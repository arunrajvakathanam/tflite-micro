
zephyr.elf:     file format elf64-x86-64


Disassembly of section .locore:

0000000000001000 <__start>:
 */
.section .locore,"ax"
.code32
.globl __start
__start:
	jmp __start32
    1000:	eb 57                	jmp    1059 <__start32>
	nop
    1002:	90                   	nop
	nop
    1003:	90                   	nop
	nop
    1004:	90                   	nop
	nop
    1005:	90                   	nop
	nop
    1006:	90                   	nop
	nop
    1007:	90                   	nop
	nop
    1008:	90                   	nop
	nop
    1009:	90                   	nop

000000000000100a <x86_ap_start>:
	/*
	 * First, we move to 32-bit protected mode, and set up the
	 * same flat environment that the BSP gets from the loader.
	 */

	lgdt gdt48
    100a:	0f 01 16             	lgdt   (%rsi)
    100d:	70 81                	jo     f90 <CONFIG_MAIN_STACK_SIZE+0x790>
	lidt idt48
    100f:	0f 01 1e             	lidt   (%rsi)
    1012:	00 30                	add    %dh,(%rax)
	movl %cr0, %eax
    1014:	0f 20 c0             	mov    %cr0,%rax
	or $1, %eax
    1017:	66 83 c8 01          	or     $0x1,%ax
	movl %eax, %cr0
    101b:	0f 22 c0             	mov    %rax,%cr0

	jmpl $X86_KERNEL_CS_32, $1f
    101e:	66 ea                	data16 (bad) 
    1020:	26 10 00             	es adc %al,(%rax)
    1023:	00 08                	add    %cl,(%rax)
    1025:	00 66 b8             	add    %ah,-0x48(%rsi)
.code32
1:	movw $X86_KERNEL_DS_32, %ax
    1028:	10 00                	adc    %al,(%rax)
	movw %ax, %ds
    102a:	8e d8                	mov    %eax,%ds
	movw %ax, %es
    102c:	8e c0                	mov    %eax,%es
	movw %ax, %ss
    102e:	8e d0                	mov    %eax,%ss
	movw %ax, %fs
    1030:	8e e0                	mov    %eax,%fs
	/*
	 * Now, reverse-map our local APIC ID to our logical CPU ID
	 * so we can locate our x86_cpuboot[] bundle. Put it in EBP.
	 */

	movl CONFIG_LOAPIC_BASE_ADDRESS+LOAPIC_ID, %eax
    1032:	a1 20 00 e0 fe c1 e8 	movabs 0x8318e8c1fee00020,%eax
    1039:	18 83 
	shrl $24, %eax
	andl $0x0F, %eax		/* local APIC ID -> EAX */
    103b:	e0 0f                	loopne 104c <x86_ap_start+0x42>

	movl $x86_cpuboot, %ebp
    103d:	bd 40 1a 14 00       	mov    $0x141a40,%ebp
	xorl %ebx, %ebx
    1042:	31 db                	xor    %ebx,%ebx
1:	cmpl $CONFIG_MP_MAX_NUM_CPUS, %ebx
    1044:	83 fb 02             	cmp    $0x2,%ebx
	jz unknown_loapic_id
    1047:	74 0e                	je     1057 <unknown_loapic_id>
	cmpb %al, x86_cpu_loapics(%ebx)
    1049:	38 83 64 29 14 00    	cmp    %al,0x142964(%rbx)
	je go64				/* proceed to 64-bit mode */
    104f:	74 67                	je     10b8 <go64>
	incl %ebx
    1051:	43 83 c5 30          	rex.XB add $0x30,%r13d
	addl $__X86_CPUBOOT_SIZEOF, %ebp
	jmp 1b
    1055:	eb ed                	jmp    1044 <x86_ap_start+0x3a>

0000000000001057 <unknown_loapic_id>:

unknown_loapic_id:
	jmp unknown_loapic_id
    1057:	eb fe                	jmp    1057 <unknown_loapic_id>

0000000000001059 <__start32>:
	 * kernel execution begins here in 32-bit mode, with flat-mode
	 * descriptors in all segment registers, interrupts disabled.
	 */

	/* See note above, re: OUTRAGEOUS HACK */
	movl $__start, %ebp
    1059:	bd 00 10 00 00       	mov    $0x1000,%ebp
	movb $0x90, 0(%ebp)
    105e:	c6 45 00 90          	movb   $0x90,0x0(%rbp)
	movb $0x90, 1(%ebp)
    1062:	c6 45 01 90          	movb   $0x90,0x1(%rbp)
	movb $0x90, 2(%ebp)
    1066:	c6 45 02 90          	movb   $0x90,0x2(%rbp)
	movb $0x90, 3(%ebp)
    106a:	c6 45 03 90          	movb   $0x90,0x3(%rbp)
	movb $0x90, 4(%ebp)
    106e:	c6 45 04 90          	movb   $0x90,0x4(%rbp)
	movb $0x90, 5(%ebp)
    1072:	c6 45 05 90          	movb   $0x90,0x5(%rbp)
	movb $0x90, 6(%ebp)
    1076:	c6 45 06 90          	movb   $0x90,0x6(%rbp)
	movb $0x90, 7(%ebp)
    107a:	c6 45 07 90          	movb   $0x90,0x7(%rbp)
	wbinvd
    107e:	0f 09                	wbinvd 

	lgdt gdt48
    1080:	0f 01 15 70 81 00 00 	lgdt   0x8170(%rip)        # 91f7 <_lodata_end+0x1f7>
	lidt idt48
    1087:	0f 01 1d 00 30 00 00 	lidt   0x3000(%rip)        # 408e <_lodata_start+0x8e>
	 * "Disable" legacy i8259 interrupt controllers. Note that we
	 * can't actually disable them, but we mask all their interrupt
	 * sources which is effectively the same thing (almost).
	 */

	movb $0xff, %al
    108e:	b0 ff                	mov    $0xff,%al
	outb %al, $0x21
    1090:	e6 21                	out    %al,$0x21
	outb %al, $0xA1
    1092:	e6 a1                	out    %al,$0xa1
#endif

#ifdef CONFIG_MULTIBOOT
	jmp 1f
    1094:	eb 0e                	jmp    10a4 <__bss_num_dwords+0x8>
    1096:	66 90                	xchg   %ax,%ax
    1098:	02 b0 ad 1b 02 00    	add    0x21bad(%rax),%dh
    109e:	00 00                	add    %al,(%rax)
    10a0:	fc                   	cld    
    10a1:	4f 52                	rex.WRXB push %r10
    10a3:	e4 bd                	in     $0xbd,%al
	/*
	 * N.B.: if multiboot info struct is present, "common.S"
	 * has left a pointer to it in EBX.
	 */

	movl $x86_cpu_boot_arg, %ebp
    10a5:	00 80 00 00 c7 45    	add    %al,0x45c70000(%rax)

	/* Inserting boot type */
	movl $MULTIBOOT_BOOT_TYPE, __x86_boot_arg_t_boot_type_OFFSET(%ebp)
    10ab:	00 01                	add    %al,(%rcx)
    10ad:	00 00                	add    %al,(%rax)
    10af:	00 89 5d 08 bd 40    	add    %cl,0x40bd085d(%rcx)
	/* and multiboot info */
	movl %ebx, __x86_boot_arg_t_arg_OFFSET(%ebp)

	movl $x86_cpuboot, %ebp         /* BSP is always logical CPU id 0 */
    10b5:	1a 14 00             	sbb    (%rax,%rax,1),%dl

00000000000010b8 <go64>:

go64:	/* Install page tables and transition to long mode */
	install_pagetables_32
    10b8:	0f 20 e0             	mov    %cr4,%rax
    10bb:	0d 20 02 00 00       	or     $0x220,%eax
    10c0:	0f 22 e0             	mov    %rax,%cr4
    10c3:	0f 06                	clts   
    10c5:	b8 00 90 14 00       	mov    $0x149000,%eax
    10ca:	0f 22 d8             	mov    %rax,%cr3
    10cd:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    10d2:	0f 32                	rdmsr  
    10d4:	0d 01 09 00 00       	or     $0x901,%eax
    10d9:	0f 30                	wrmsr  
    10db:	0f 20 c0             	mov    %cr0,%rax
    10de:	0d 00 00 01 80       	or     $0x80010000,%eax
    10e3:	0f 22 c0             	mov    %rax,%cr0
	jmpl $X86_KERNEL_CS, $enter_code64
    10e6:	ea                   	(bad)  
    10e7:	ed                   	in     (%dx),%eax
    10e8:	10 00                	adc    %al,(%rax)
    10ea:	00 18                	add    %bl,(%rax)
	...

00000000000010ed <enter_code64>:
	 * Here we reload the segment registers,
	 * and configure per-CPU stuff: GS, task register, stack.
	 */
	.code64
enter_code64:
	movl $X86_KERNEL_DS, %eax
    10ed:	b8 20 00 00 00       	mov    $0x20,%eax
	movw %ax, %ds
    10f2:	8e d8                	mov    %eax,%ds
	movw %ax, %es
    10f4:	8e c0                	mov    %eax,%es
	movw %ax, %ss
    10f6:	8e d0                	mov    %eax,%ss
	movw %ax, %fs
    10f8:	8e e0                	mov    %eax,%fs
	 * zero, GS_BASE is also being set to zero. This would interfere
	 * with the actual use of GS_BASE for usespace. To avoid accidentally
	 * clearing GS_BASE, simply set GS to 0 at boot, so any subsequent
	 * clearing of GS will not clear GS_BASE.
	 */
	mov $0, %eax
    10fa:	b8 00 00 00 00       	mov    $0x0,%eax
	movw %ax, %gs
    10ff:	8e e8                	mov    %eax,%gs

	movw __x86_cpuboot_t_tr_OFFSET(%rbp), %ax
    1101:	66 8b 45 04          	mov    0x4(%rbp),%ax
	ltr %ax
    1105:	0f 00 d8             	ltr    %ax

	/* Set up MSRs for GS / KERNEL_GS base */
	movq __x86_cpuboot_t_gs_base_OFFSET(%rbp), %rax
    1108:	48 8b 45 08          	mov    0x8(%rbp),%rax
	movq %rax, %rdx
    110c:	48 89 c2             	mov    %rax,%rdx
	shrq $32, %rdx
    110f:	48 c1 ea 20          	shr    $0x20,%rdx
	/* X86_KERNEL_GS_BASE and X86_GS_BASE are swapped by the 'swapgs'
	 * instruction.
	 */
	movl $X86_KERNEL_GS_BASE, %ecx
    1113:	b9 02 01 00 c0       	mov    $0xc0000102,%ecx
	wrmsr
    1118:	0f 30                	wrmsr  
	/* X86_GS_BASE shadows base fields of %gs, effectively setting %gs */
	movl $X86_GS_BASE, %ecx
    111a:	b9 01 01 00 c0       	mov    $0xc0000101,%ecx
	wrmsr
    111f:	0f 30                	wrmsr  

	movq __x86_cpuboot_t_sp_OFFSET(%rbp), %rsp
    1121:	48 8b 65 10          	mov    0x10(%rbp),%rsp
	movq %rsp, %gs:__x86_tss64_t_ist1_OFFSET
    1125:	65 48 89 24 25 24 00 	mov    %rsp,%gs:0x24
    112c:	00 00 

	/* finally, complete environment for the C runtime and go. */
	cld	/* GCC presumes a clear direction flag */
    112e:	fc                   	cld    
	shr $3, %rcx /* moving 8 bytes a time, so fewer repeats */
	rep stosq
#endif

	/* Enter C domain now that we have a stack set up, never to return */
	movq %rbp, %rdi
    112f:	48 89 ef             	mov    %rbp,%rdi
	call z_x86_cpu_init
    1132:	e8 b0 08 11 00       	call   1119e7 <z_x86_cpu_init>

0000000000001137 <__start64>:
	 * 32 bit startup does.
	 */
.globl __start64
__start64:
	/* Zero the TSC */
	xorq %rax, %rax
    1137:	48 31 c0             	xor    %rax,%rax
	xorq %rdx, %rdx
    113a:	48 31 d2             	xor    %rdx,%rdx
	movq $X86_TIME_STAMP_COUNTER_MSR, %rcx
    113d:	48 c7 c1 10 00 00 00 	mov    $0x10,%rcx
	wrmsr
    1144:	0f 30                	wrmsr  

	lidt idt80
    1146:	0f 01 1c 25 06 30 00 	lidt   0x3006
    114d:	00 
	lgdt gdt80
    114e:	0f 01 14 25 76 81 00 	lgdt   0x8176
    1155:	00 

	install_pagetables_64
    1156:	0f 20 e0             	mov    %cr4,%rax
    1159:	48 0d 20 02 00 00    	or     $0x220,%rax
    115f:	0f 22 e0             	mov    %rax,%cr4
    1162:	0f 06                	clts   
    1164:	48 c7 c0 00 90 14 00 	mov    $0x149000,%rax
    116b:	0f 22 d8             	mov    %rax,%cr3
    116e:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    1173:	0f 32                	rdmsr  
    1175:	0d 01 09 00 00       	or     $0x901,%eax
    117a:	0f 30                	wrmsr  
    117c:	0f 20 c0             	mov    %cr0,%rax
    117f:	0d 00 00 01 80       	or     $0x80010000,%eax
    1184:	0f 22 c0             	mov    %rax,%cr0

	/* Disable 8259 PIT.  Almost certainly not needed on modern
	 * UEFI platforms taking this code path, but...
	 */
	movb $0xff, %al
    1187:	b0 ff                	mov    $0xff,%al
	outb %al, $0x21
    1189:	e6 21                	out    %al,$0x21
	outb %al, $0xA1
    118b:	e6 a1                	out    %al,$0xa1

	movq $x86_cpu_boot_arg, %rbp
    118d:	48 c7 c5 00 80 00 00 	mov    $0x8000,%rbp
	/* Inserting boot type */
	movq $EFI_BOOT_TYPE, __x86_boot_arg_t_boot_type_OFFSET(%rbp)
    1194:	48 c7 45 00 02 00 00 	movq   $0x2,0x0(%rbp)
    119b:	00 
	/* and EFI boot arg (if any) */
	movq %rbx, __x86_boot_arg_t_arg_OFFSET(%rbp)
    119c:	48 89 5d 08          	mov    %rbx,0x8(%rbp)

	movq $x86_cpuboot, %rbp		/* BSP is always logical CPU id 0 */
    11a0:	48 c7 c5 40 1a 14 00 	mov    $0x141a40,%rbp

	mov jmpdesc, %rax
    11a7:	48 8b 04 25 b1 11 00 	mov    0x11b1,%rax
    11ae:	00 
	jmp *%rax
    11af:	ff e0                	jmp    *%rax

00000000000011b1 <jmpdesc>:
    11b1:	ed                   	in     (%dx),%eax
    11b2:	10 00                	adc    %al,(%rax)
    11b4:	00 00                	add    %al,(%rax)
    11b6:	00 00                	add    %al,(%rax)
    11b8:	00 18                	add    %bl,(%rax)
	...

00000000000011bb <x86_sse_init>:
 * not NULL, then the resulting FP state is saved to thread->arch.sse.
 */

.global x86_sse_init
x86_sse_init:
	fninit
    11bb:	db e3                	fninit 
	ldmxcsr mxcsr
    11bd:	0f ae 14 25 d2 11 00 	ldmxcsr 0x11d2
    11c4:	00 
	testq %rdi, %rdi
    11c5:	48 85 ff             	test   %rdi,%rdi
	jz 1f
    11c8:	74 07                	je     11d1 <x86_sse_init+0x16>
	fxsave _thread_offset_to_sse(%rdi)
    11ca:	0f ae 87 20 01 00 00 	fxsave 0x120(%rdi)
1:	retq
    11d1:	c3                   	ret    

00000000000011d2 <mxcsr>:
    11d2:	80 1f 00             	sbbb   $0x0,(%rdi)
	...

00000000000011d6 <z_x86_switch>:
z_x86_switch:
	/* RSI contains the switch_handle field to which we are
	 * notionally supposed to store.  Offset it to get back to the
	 * thread handle instead.
	 */
	subq $___thread_t_switch_handle_OFFSET, %rsi
    11d6:	48 81 ee b8 00 00 00 	sub    $0xb8,%rsi

	andb $~X86_THREAD_FLAG_ALL, _thread_offset_to_flags(%rsi)
    11dd:	80 a6 d0 00 00 00 fe 	andb   $0xfe,0xd0(%rsi)

	popq %rax
    11e4:	58                   	pop    %rax
	movq %rax, _thread_offset_to_rip(%rsi)
    11e5:	48 89 86 88 00 00 00 	mov    %rax,0x88(%rsi)
	pushfq
    11ec:	9c                   	pushf  
	popq %rax
    11ed:	58                   	pop    %rax
	movq %rax, _thread_offset_to_rflags(%rsi)
    11ee:	48 89 86 90 00 00 00 	mov    %rax,0x90(%rsi)
	movq %rsp, _thread_offset_to_rsp(%rsi)
    11f5:	48 89 66 50          	mov    %rsp,0x50(%rsi)
	movq %rbx, _thread_offset_to_rbx(%rsi)
    11f9:	48 89 5e 58          	mov    %rbx,0x58(%rsi)
	movq %rbp, _thread_offset_to_rbp(%rsi)
    11fd:	48 89 6e 60          	mov    %rbp,0x60(%rsi)
	movq %r12, _thread_offset_to_r12(%rsi)
    1201:	4c 89 66 68          	mov    %r12,0x68(%rsi)
	movq %r13, _thread_offset_to_r13(%rsi)
    1205:	4c 89 6e 70          	mov    %r13,0x70(%rsi)
	movq %r14, _thread_offset_to_r14(%rsi)
    1209:	4c 89 76 78          	mov    %r14,0x78(%rsi)
	movq %r15, _thread_offset_to_r15(%rsi)
    120d:	4c 89 be 80 00 00 00 	mov    %r15,0x80(%rsi)
	/* Store the handle (i.e. our thread struct address) into the
	 * switch handle field, this is a synchronization signal that
	 * must occur after the last data from the old context is
	 * saved.
	 */
	movq %rsi, ___thread_t_switch_handle_OFFSET(%rsi)
    1214:	48 89 b6 b8 00 00 00 	mov    %rsi,0xb8(%rsi)

	movq %gs:__x86_tss64_t_ist1_OFFSET, %rsp
    121b:	65 48 8b 24 25 24 00 	mov    %gs:0x24,%rsp
    1222:	00 00 

0000000000001224 <__resume>:

#ifdef CONFIG_USERSPACE
	/* Set up exception return stack frame */
	pushq _thread_offset_to_ss(%rdi)	/* SS */
#else
	pushq $X86_KERNEL_DS			/* SS */
    1224:	6a 20                	push   $0x20
#endif /* CONFIG_USERSPACE */
	pushq _thread_offset_to_rsp(%rdi)	/* RSP */
    1226:	ff 77 50             	push   0x50(%rdi)
	pushq _thread_offset_to_rflags(%rdi)	/* RFLAGS */
    1229:	ff b7 90 00 00 00    	push   0x90(%rdi)
#ifdef CONFIG_USERSPACE
	pushq _thread_offset_to_cs(%rdi)	/* CS */
#else
	pushq $X86_KERNEL_CS			/* CS */
    122f:	6a 18                	push   $0x18
#endif
	pushq _thread_offset_to_rip(%rdi)	/* RIP */
    1231:	ff b7 88 00 00 00    	push   0x88(%rdi)
	 */
	movq $0xB9, _thread_offset_to_rip(%rdi)
#endif


	movq _thread_offset_to_rbx(%rdi), %rbx
    1237:	48 8b 5f 58          	mov    0x58(%rdi),%rbx
	movq _thread_offset_to_rbp(%rdi), %rbp
    123b:	48 8b 6f 60          	mov    0x60(%rdi),%rbp
	movq _thread_offset_to_r12(%rdi), %r12
    123f:	4c 8b 67 68          	mov    0x68(%rdi),%r12
	movq _thread_offset_to_r13(%rdi), %r13
    1243:	4c 8b 6f 70          	mov    0x70(%rdi),%r13
	movq _thread_offset_to_r14(%rdi), %r14
    1247:	4c 8b 77 78          	mov    0x78(%rdi),%r14
	movq _thread_offset_to_r15(%rdi), %r15
    124b:	4c 8b bf 80 00 00 00 	mov    0x80(%rdi),%r15
	 */
	movq _thread_offset_to_psp(%rdi), %rax
	movq %rax, %gs:__x86_tss64_t_psp_OFFSET
#endif

	testb $X86_THREAD_FLAG_ALL, _thread_offset_to_flags(%rdi)
    1252:	f6 87 d0 00 00 00 01 	testb  $0x1,0xd0(%rdi)
	jz 1f
    1259:	74 46                	je     12a1 <__resume+0x7d>

	fxrstor _thread_offset_to_sse(%rdi)
    125b:	0f ae 8f 20 01 00 00 	fxrstor 0x120(%rdi)
	movq _thread_offset_to_rax(%rdi), %rax
    1262:	48 8b 87 d8 00 00 00 	mov    0xd8(%rdi),%rax
	movq _thread_offset_to_rcx(%rdi), %rcx
    1269:	48 8b 8f e0 00 00 00 	mov    0xe0(%rdi),%rcx
	movq _thread_offset_to_rdx(%rdi), %rdx
    1270:	48 8b 97 e8 00 00 00 	mov    0xe8(%rdi),%rdx
	movq _thread_offset_to_rsi(%rdi), %rsi
    1277:	48 8b b7 f0 00 00 00 	mov    0xf0(%rdi),%rsi
	movq _thread_offset_to_r8(%rdi), %r8
    127e:	4c 8b 87 00 01 00 00 	mov    0x100(%rdi),%r8
	movq _thread_offset_to_r9(%rdi), %r9
    1285:	4c 8b 8f 08 01 00 00 	mov    0x108(%rdi),%r9
	movq _thread_offset_to_r10(%rdi), %r10
    128c:	4c 8b 97 10 01 00 00 	mov    0x110(%rdi),%r10
	movq _thread_offset_to_r11(%rdi), %r11
    1293:	4c 8b 9f 18 01 00 00 	mov    0x118(%rdi),%r11
	movq _thread_offset_to_rdi(%rdi), %rdi  /* do last :-) */
    129a:	48 8b bf f8 00 00 00 	mov    0xf8(%rdi),%rdi
1:
#ifdef CONFIG_X86_BOUNDS_CHECK_BYPASS_MITIGATION
	/* swapgs variant of Spectre V1. Disable speculation past this point */
	lfence
#endif /* CONFIG_X86_BOUNDS_CHECK_BYPASS_MITIGATION */
	iretq
    12a1:	48 cf                	iretq  

00000000000012a3 <except>:
except: /*
	 * finish struct NANO_ESF on stack. 'vector' .. 'ss' are
	 * already there from hardware trap and EXCEPT_*() stub.
	 */

	pushq %r11
    12a3:	41 53                	push   %r11

	/* In addition to r11, push the rest of the caller-saved regs */
	/* Positioning of this fxsave is important, RSP must be 16-byte
	 * aligned
	 */
	subq $X86_FXSAVE_SIZE, %rsp
    12a5:	48 81 ec 00 02 00 00 	sub    $0x200,%rsp
	fxsave (%rsp)
    12ac:	0f ae 04 24          	fxsave (%rsp)
	pushq %r10
    12b0:	41 52                	push   %r10
	pushq %r9
    12b2:	41 51                	push   %r9
	pushq %r8
    12b4:	41 50                	push   %r8
	pushq %rdi
    12b6:	57                   	push   %rdi
	pushq %rsi
    12b7:	56                   	push   %rsi
	pushq %rdx
    12b8:	52                   	push   %rdx
	pushq %rcx
    12b9:	51                   	push   %rcx
	pushq %rax
    12ba:	50                   	push   %rax
	pushq %rbp
    12bb:	55                   	push   %rbp
	pushq %r14
	pushq %r13
	pushq %r12
	pushq %rbx
#endif /* CONFIG_EXCEPTION_DEBUG */
	movq %rsp, %rdi
    12bc:	48 89 e7             	mov    %rsp,%rdi

	call z_x86_exception
    12bf:	e8 3a 09 11 00       	call   111bfe <z_x86_exception>
	popq %r12
	popq %r13
	popq %r14
	popq %r15
#endif /* CONFIG_EXCEPTION_DEBUG */
	popq %rbp
    12c4:	5d                   	pop    %rbp
	popq %rax
    12c5:	58                   	pop    %rax
	popq %rcx
    12c6:	59                   	pop    %rcx
	popq %rdx
    12c7:	5a                   	pop    %rdx
	popq %rsi
    12c8:	5e                   	pop    %rsi
	popq %rdi
    12c9:	5f                   	pop    %rdi
	popq %r8
    12ca:	41 58                	pop    %r8
	popq %r9
    12cc:	41 59                	pop    %r9
	popq %r10
    12ce:	41 5a                	pop    %r10
	fxrstor (%rsp)
    12d0:	0f ae 0c 24          	fxrstor (%rsp)
	addq $X86_FXSAVE_SIZE, %rsp
    12d4:	48 81 c4 00 02 00 00 	add    $0x200,%rsp
	popq %r11
    12db:	41 5b                	pop    %r11

	/* Drop the vector/err code pushed by the HW or EXCEPT_*() stub */
	add $16, %rsp
    12dd:	48 83 c4 10          	add    $0x10,%rsp
	swapgs
#endif /* CONFIG_X86_KPTI */
1:
#endif /* CONFIG_USERSPACE */

	iretq
    12e1:	48 cf                	iretq  

00000000000012e3 <vector_0>:
/* Vector reserved for handling a kernel oops; treat as an exception
 * and not an interrupt
 */
EXCEPT(Z_X86_OOPS_VECTOR, 7);
#else
EXCEPT      ( 0); EXCEPT      ( 1); EXCEPT      ( 2); EXCEPT      ( 3)
    12e3:	6a 00                	push   $0x0
    12e5:	6a 00                	push   $0x0
    12e7:	eb ba                	jmp    12a3 <except>

00000000000012e9 <vector_1>:
    12e9:	6a 00                	push   $0x0
    12eb:	6a 01                	push   $0x1
    12ed:	eb b4                	jmp    12a3 <except>

00000000000012ef <vector_2>:
    12ef:	6a 00                	push   $0x0
    12f1:	6a 02                	push   $0x2
    12f3:	eb ae                	jmp    12a3 <except>

00000000000012f5 <vector_3>:
    12f5:	6a 00                	push   $0x0
    12f7:	6a 03                	push   $0x3
    12f9:	eb a8                	jmp    12a3 <except>

00000000000012fb <vector_4>:
EXCEPT      ( 4); EXCEPT      ( 5); EXCEPT      ( 6); EXCEPT      ( 7)
    12fb:	6a 00                	push   $0x0
    12fd:	6a 04                	push   $0x4
    12ff:	eb a2                	jmp    12a3 <except>

0000000000001301 <vector_5>:
    1301:	6a 00                	push   $0x0
    1303:	6a 05                	push   $0x5
    1305:	eb 9c                	jmp    12a3 <except>

0000000000001307 <vector_6>:
    1307:	6a 00                	push   $0x0
    1309:	6a 06                	push   $0x6
    130b:	eb 96                	jmp    12a3 <except>

000000000000130d <vector_7>:
    130d:	6a 00                	push   $0x0
    130f:	6a 07                	push   $0x7
    1311:	eb 90                	jmp    12a3 <except>

0000000000001313 <vector_8>:
EXCEPT_CODE ( 8); EXCEPT      ( 9); EXCEPT_CODE (10); EXCEPT_CODE (11)
    1313:	6a 08                	push   $0x8
    1315:	eb 8c                	jmp    12a3 <except>

0000000000001317 <vector_9>:
    1317:	6a 00                	push   $0x0
    1319:	6a 09                	push   $0x9
    131b:	eb 86                	jmp    12a3 <except>

000000000000131d <vector_10>:
    131d:	6a 0a                	push   $0xa
    131f:	eb 82                	jmp    12a3 <except>

0000000000001321 <vector_11>:
    1321:	6a 0b                	push   $0xb
    1323:	e9 7b ff ff ff       	jmp    12a3 <except>

0000000000001328 <vector_12>:
EXCEPT_CODE (12); EXCEPT_CODE (13); EXCEPT_CODE (14); EXCEPT      (15)
    1328:	6a 0c                	push   $0xc
    132a:	e9 74 ff ff ff       	jmp    12a3 <except>

000000000000132f <vector_13>:
    132f:	6a 0d                	push   $0xd
    1331:	e9 6d ff ff ff       	jmp    12a3 <except>

0000000000001336 <vector_14>:
    1336:	6a 0e                	push   $0xe
    1338:	e9 66 ff ff ff       	jmp    12a3 <except>

000000000000133d <vector_15>:
    133d:	6a 00                	push   $0x0
    133f:	6a 0f                	push   $0xf
    1341:	e9 5d ff ff ff       	jmp    12a3 <except>

0000000000001346 <vector_16>:
EXCEPT      (16); EXCEPT_CODE (17); EXCEPT      (18); EXCEPT      (19)
    1346:	6a 00                	push   $0x0
    1348:	6a 10                	push   $0x10
    134a:	e9 54 ff ff ff       	jmp    12a3 <except>

000000000000134f <vector_17>:
    134f:	6a 11                	push   $0x11
    1351:	e9 4d ff ff ff       	jmp    12a3 <except>

0000000000001356 <vector_18>:
    1356:	6a 00                	push   $0x0
    1358:	6a 12                	push   $0x12
    135a:	e9 44 ff ff ff       	jmp    12a3 <except>

000000000000135f <vector_19>:
    135f:	6a 00                	push   $0x0
    1361:	6a 13                	push   $0x13
    1363:	e9 3b ff ff ff       	jmp    12a3 <except>

0000000000001368 <vector_20>:
EXCEPT      (20); EXCEPT      (21); EXCEPT      (22); EXCEPT      (23)
    1368:	6a 00                	push   $0x0
    136a:	6a 14                	push   $0x14
    136c:	e9 32 ff ff ff       	jmp    12a3 <except>

0000000000001371 <vector_21>:
    1371:	6a 00                	push   $0x0
    1373:	6a 15                	push   $0x15
    1375:	e9 29 ff ff ff       	jmp    12a3 <except>

000000000000137a <vector_22>:
    137a:	6a 00                	push   $0x0
    137c:	6a 16                	push   $0x16
    137e:	e9 20 ff ff ff       	jmp    12a3 <except>

0000000000001383 <vector_23>:
    1383:	6a 00                	push   $0x0
    1385:	6a 17                	push   $0x17
    1387:	e9 17 ff ff ff       	jmp    12a3 <except>

000000000000138c <vector_24>:
EXCEPT      (24); EXCEPT      (25); EXCEPT      (26); EXCEPT      (27)
    138c:	6a 00                	push   $0x0
    138e:	6a 18                	push   $0x18
    1390:	e9 0e ff ff ff       	jmp    12a3 <except>

0000000000001395 <vector_25>:
    1395:	6a 00                	push   $0x0
    1397:	6a 19                	push   $0x19
    1399:	e9 05 ff ff ff       	jmp    12a3 <except>

000000000000139e <vector_26>:
    139e:	6a 00                	push   $0x0
    13a0:	6a 1a                	push   $0x1a
    13a2:	e9 fc fe ff ff       	jmp    12a3 <except>

00000000000013a7 <vector_27>:
    13a7:	6a 00                	push   $0x0
    13a9:	6a 1b                	push   $0x1b
    13ab:	e9 f3 fe ff ff       	jmp    12a3 <except>

00000000000013b0 <vector_28>:
EXCEPT      (28); EXCEPT      (29); EXCEPT      (30); EXCEPT      (31)
    13b0:	6a 00                	push   $0x0
    13b2:	6a 1c                	push   $0x1c
    13b4:	e9 ea fe ff ff       	jmp    12a3 <except>

00000000000013b9 <vector_29>:
    13b9:	6a 00                	push   $0x0
    13bb:	6a 1d                	push   $0x1d
    13bd:	e9 e1 fe ff ff       	jmp    12a3 <except>

00000000000013c2 <vector_30>:
    13c2:	6a 00                	push   $0x0
    13c4:	6a 1e                	push   $0x1e
    13c6:	e9 d8 fe ff ff       	jmp    12a3 <except>

00000000000013cb <vector_31>:
    13cb:	6a 00                	push   $0x0
    13cd:	6a 1f                	push   $0x1f
    13cf:	e9 cf fe ff ff       	jmp    12a3 <except>

00000000000013d4 <vector_Z_X86_OOPS_VECTOR>:

/* Vector reserved for handling a kernel oops; treat as an exception
 * and not an interrupt
 */
EXCEPT(Z_X86_OOPS_VECTOR);
    13d4:	6a 00                	push   $0x0
    13d6:	6a 20                	push   $0x20
    13d8:	e9 c6 fe ff ff       	jmp    12a3 <except>

00000000000013dd <irq>:

.globl x86_irq_funcs	/* see irq_manage.c .. */
.globl x86_irq_args	/* .. for these definitions */

irq:
	pushq %rsi
    13dd:	56                   	push   %rsi
	pushq (%rsi)	/* Stashed RSI value */
	movq $0, (%rsi) /* Cover our tracks, stashed RSI might be sensitive */
#endif /* CONFIG_X86_KPTI */
#endif /* CONFIG_USERSPACE */

	movq %gs:__x86_tss64_t_cpu_OFFSET, %rsi
    13de:	65 48 8b 34 25 68 00 	mov    %gs:0x68,%rsi
    13e5:	00 00 
	 * Bump the IRQ nesting count and move to the next IRQ stack.
	 * That's sufficient to safely re-enable interrupts, so if we
	 * haven't reached the maximum nesting depth yet, do it.
	 */

	incl ___cpu_t_nested_OFFSET(%rsi)
    13e7:	ff 06                	incl   (%rsi)
	subq $CONFIG_ISR_SUBSTACK_SIZE, %gs:__x86_tss64_t_ist1_OFFSET
    13e9:	65 48 81 2c 25 24 00 	subq   $0x1000,%gs:0x24
    13f0:	00 00 00 10 00 00 
	cmpl $CONFIG_ISR_DEPTH, ___cpu_t_nested_OFFSET(%rsi)
    13f6:	83 3e 04             	cmpl   $0x4,(%rsi)
	jz 1f
    13f9:	74 01                	je     13fc <irq+0x1f>
	sti
    13fb:	fb                   	sti    
1:	cmpl $1, ___cpu_t_nested_OFFSET(%rsi)
    13fc:	83 3e 01             	cmpl   $0x1,(%rsi)
	je irq_enter_unnested
    13ff:	74 25                	je     1426 <irq_enter_unnested>

0000000000001401 <irq_enter_nested>:
	 * note that the final value of RSP must be 16-byte aligned here,
	 * both to satisfy FXSAVE/FXRSTOR but also to honor the C ABI.
	 */

irq_enter_nested: /* Nested IRQ: dump register state to stack. */
	pushq %rcx
    1401:	51                   	push   %rcx
	movq 16(%rsp), %rcx /* RCX = vector */
    1402:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
	movq %rax, 16(%rsp) /* looks like we pushed RAX, not the vector */
    1407:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
	pushq %rdx
    140c:	52                   	push   %rdx
	pushq %rdi
    140d:	57                   	push   %rdi
	pushq %r8
    140e:	41 50                	push   %r8
	pushq %r9
    1410:	41 51                	push   %r9
	pushq %r10
    1412:	41 52                	push   %r10
	pushq %r11
    1414:	41 53                	push   %r11
	subq $X86_FXSAVE_SIZE, %rsp
    1416:	48 81 ec 00 02 00 00 	sub    $0x200,%rsp
	fxsave (%rsp)
    141d:	0f ae 04 24          	fxsave (%rsp)
	jmp irq_dispatch
    1421:	e9 85 00 00 00       	jmp    14ab <irq_dispatch>

0000000000001426 <irq_enter_unnested>:

irq_enter_unnested: /* Not nested: dump state to thread struct for __resume */
	movq ___cpu_t_current_OFFSET(%rsi), %rsi
    1426:	48 8b 76 10          	mov    0x10(%rsi),%rsi
	orb $X86_THREAD_FLAG_ALL, _thread_offset_to_flags(%rsi)
    142a:	80 8e d0 00 00 00 01 	orb    $0x1,0xd0(%rsi)
	fxsave _thread_offset_to_sse(%rsi)
    1431:	0f ae 86 20 01 00 00 	fxsave 0x120(%rsi)
	movq %rbx, _thread_offset_to_rbx(%rsi)
    1438:	48 89 5e 58          	mov    %rbx,0x58(%rsi)
	movq %rbp, _thread_offset_to_rbp(%rsi)
    143c:	48 89 6e 60          	mov    %rbp,0x60(%rsi)
	movq %r12, _thread_offset_to_r12(%rsi)
    1440:	4c 89 66 68          	mov    %r12,0x68(%rsi)
	movq %r13, _thread_offset_to_r13(%rsi)
    1444:	4c 89 6e 70          	mov    %r13,0x70(%rsi)
	movq %r14, _thread_offset_to_r14(%rsi)
    1448:	4c 89 76 78          	mov    %r14,0x78(%rsi)
	movq %r15, _thread_offset_to_r15(%rsi)
    144c:	4c 89 be 80 00 00 00 	mov    %r15,0x80(%rsi)
	movq %rax, _thread_offset_to_rax(%rsi)
    1453:	48 89 86 d8 00 00 00 	mov    %rax,0xd8(%rsi)
	movq %rcx, _thread_offset_to_rcx(%rsi)
    145a:	48 89 8e e0 00 00 00 	mov    %rcx,0xe0(%rsi)
	movq %rdx, _thread_offset_to_rdx(%rsi)
    1461:	48 89 96 e8 00 00 00 	mov    %rdx,0xe8(%rsi)
	movq %rdi, _thread_offset_to_rdi(%rsi)
    1468:	48 89 be f8 00 00 00 	mov    %rdi,0xf8(%rsi)
	movq %r8, _thread_offset_to_r8(%rsi)
    146f:	4c 89 86 00 01 00 00 	mov    %r8,0x100(%rsi)
	movq %r9, _thread_offset_to_r9(%rsi)
    1476:	4c 89 8e 08 01 00 00 	mov    %r9,0x108(%rsi)
	movq %r10, _thread_offset_to_r10(%rsi)
    147d:	4c 89 96 10 01 00 00 	mov    %r10,0x110(%rsi)
	movq %r11, _thread_offset_to_r11(%rsi)
    1484:	4c 89 9e 18 01 00 00 	mov    %r11,0x118(%rsi)
	popq %rax /* RSI */
    148b:	58                   	pop    %rax
	movq %rax, _thread_offset_to_rsi(%rsi)
    148c:	48 89 86 f0 00 00 00 	mov    %rax,0xf0(%rsi)
	popq %rcx /* vector number */
    1493:	59                   	pop    %rcx
	popq %rax /* RIP */
    1494:	58                   	pop    %rax
	movq %rax, _thread_offset_to_rip(%rsi)
    1495:	48 89 86 88 00 00 00 	mov    %rax,0x88(%rsi)
	popq %rax /* CS */
    149c:	58                   	pop    %rax
#ifdef CONFIG_USERSPACE
	movq %rax, _thread_offset_to_cs(%rsi)
#endif
	popq %rax /* RFLAGS */
    149d:	58                   	pop    %rax
	movq %rax, _thread_offset_to_rflags(%rsi)
    149e:	48 89 86 90 00 00 00 	mov    %rax,0x90(%rsi)
	popq %rax /* RSP */
    14a5:	58                   	pop    %rax
	movq %rax, _thread_offset_to_rsp(%rsi)
    14a6:	48 89 46 50          	mov    %rax,0x50(%rsi)
	popq %rax /* SS */
    14aa:	58                   	pop    %rax

00000000000014ab <irq_dispatch>:
#ifdef CONFIG_SCHED_THREAD_USAGE
	pushq %rcx
	call z_sched_usage_stop
	popq %rcx
#endif
	movq x86_irq_funcs(,%rcx,8), %rax
    14ab:	48 8b 04 cd 20 2a 12 	mov    0x122a20(,%rcx,8),%rax
    14b2:	00 
	movq x86_irq_args(,%rcx,8), %rdi
    14b3:	48 8b 3c cd 20 23 12 	mov    0x122320(,%rcx,8),%rdi
    14ba:	00 
	call *%rax
    14bb:	ff d0                	call   *%rax

	xorq %rax, %rax
    14bd:	48 31 c0             	xor    %rax,%rax
#ifdef CONFIG_X2APIC
	xorl %edx, %edx
	movl $(X86_X2APIC_BASE_MSR + (LOAPIC_EOI >> 4)), %ecx
	wrmsr
#else /* xAPIC */
	movq z_loapic_regs, %rdx
    14c0:	48 8b 14 25 a8 61 12 	mov    0x1261a8,%rdx
    14c7:	00 
	movl %eax, LOAPIC_EOI(%rdx)
    14c8:	89 82 b0 00 00 00    	mov    %eax,0xb0(%rdx)
#endif /* CONFIG_X2APIC */

	movq %gs:__x86_tss64_t_cpu_OFFSET, %rsi
    14ce:	65 48 8b 34 25 68 00 	mov    %gs:0x68,%rsi
    14d5:	00 00 

	cli
    14d7:	fa                   	cli    
	addq $CONFIG_ISR_SUBSTACK_SIZE, %gs:__x86_tss64_t_ist1_OFFSET
    14d8:	65 48 81 04 25 24 00 	addq   $0x1000,%gs:0x24
    14df:	00 00 00 10 00 00 
	decl ___cpu_t_nested_OFFSET(%rsi)
    14e5:	ff 0e                	decl   (%rsi)
	jnz irq_exit_nested
    14e7:	75 11                	jne    14fa <irq_exit_nested>

	/* not nested; ask the scheduler who's up next and resume it */

	movq ___cpu_t_current_OFFSET(%rsi), %rdi
    14e9:	48 8b 7e 10          	mov    0x10(%rsi),%rdi
	call z_get_next_switch_handle
    14ed:	e8 fa 87 11 00       	call   119cec <z_get_next_switch_handle>
	movq %rax, %rdi
    14f2:	48 89 c7             	mov    %rax,%rdi
	jmp __resume
    14f5:	e9 2a fd ff ff       	jmp    1224 <__resume>

00000000000014fa <irq_exit_nested>:

irq_exit_nested:
	fxrstor (%rsp)
    14fa:	0f ae 0c 24          	fxrstor (%rsp)
	addq $X86_FXSAVE_SIZE, %rsp
    14fe:	48 81 c4 00 02 00 00 	add    $0x200,%rsp
	popq %r11
    1505:	41 5b                	pop    %r11
	popq %r10
    1507:	41 5a                	pop    %r10
	popq %r9
    1509:	41 59                	pop    %r9
	popq %r8
    150b:	41 58                	pop    %r8
	popq %rdi
    150d:	5f                   	pop    %rdi
	popq %rdx
    150e:	5a                   	pop    %rdx
	popq %rcx
    150f:	59                   	pop    %rcx
	popq %rsi
    1510:	5e                   	pop    %rsi
	popq %rax
    1511:	58                   	pop    %rax
	iretq
    1512:	48 cf                	iretq  

0000000000001514 <vector_33>:

#define IRQ(nr) vector_ ## nr: pushq $(nr - IV_IRQS); jmp irq

IRQ( 33); IRQ( 34); IRQ( 35); IRQ( 36); IRQ( 37); IRQ( 38); IRQ( 39)
    1514:	6a 01                	push   $0x1
    1516:	e9 c2 fe ff ff       	jmp    13dd <irq>

000000000000151b <vector_34>:
    151b:	6a 02                	push   $0x2
    151d:	e9 bb fe ff ff       	jmp    13dd <irq>

0000000000001522 <vector_35>:
    1522:	6a 03                	push   $0x3
    1524:	e9 b4 fe ff ff       	jmp    13dd <irq>

0000000000001529 <vector_36>:
    1529:	6a 04                	push   $0x4
    152b:	e9 ad fe ff ff       	jmp    13dd <irq>

0000000000001530 <vector_37>:
    1530:	6a 05                	push   $0x5
    1532:	e9 a6 fe ff ff       	jmp    13dd <irq>

0000000000001537 <vector_38>:
    1537:	6a 06                	push   $0x6
    1539:	e9 9f fe ff ff       	jmp    13dd <irq>

000000000000153e <vector_39>:
    153e:	6a 07                	push   $0x7
    1540:	e9 98 fe ff ff       	jmp    13dd <irq>

0000000000001545 <vector_40>:
IRQ( 40); IRQ( 41); IRQ( 42); IRQ( 43); IRQ( 44); IRQ( 45); IRQ( 46); IRQ( 47)
    1545:	6a 08                	push   $0x8
    1547:	e9 91 fe ff ff       	jmp    13dd <irq>

000000000000154c <vector_41>:
    154c:	6a 09                	push   $0x9
    154e:	e9 8a fe ff ff       	jmp    13dd <irq>

0000000000001553 <vector_42>:
    1553:	6a 0a                	push   $0xa
    1555:	e9 83 fe ff ff       	jmp    13dd <irq>

000000000000155a <vector_43>:
    155a:	6a 0b                	push   $0xb
    155c:	e9 7c fe ff ff       	jmp    13dd <irq>

0000000000001561 <vector_44>:
    1561:	6a 0c                	push   $0xc
    1563:	e9 75 fe ff ff       	jmp    13dd <irq>

0000000000001568 <vector_45>:
    1568:	6a 0d                	push   $0xd
    156a:	e9 6e fe ff ff       	jmp    13dd <irq>

000000000000156f <vector_46>:
    156f:	6a 0e                	push   $0xe
    1571:	e9 67 fe ff ff       	jmp    13dd <irq>

0000000000001576 <vector_47>:
    1576:	6a 0f                	push   $0xf
    1578:	e9 60 fe ff ff       	jmp    13dd <irq>

000000000000157d <vector_48>:
IRQ( 48); IRQ( 49); IRQ( 50); IRQ( 51); IRQ( 52); IRQ( 53); IRQ( 54); IRQ( 55)
    157d:	6a 10                	push   $0x10
    157f:	e9 59 fe ff ff       	jmp    13dd <irq>

0000000000001584 <vector_49>:
    1584:	6a 11                	push   $0x11
    1586:	e9 52 fe ff ff       	jmp    13dd <irq>

000000000000158b <vector_50>:
    158b:	6a 12                	push   $0x12
    158d:	e9 4b fe ff ff       	jmp    13dd <irq>

0000000000001592 <vector_51>:
    1592:	6a 13                	push   $0x13
    1594:	e9 44 fe ff ff       	jmp    13dd <irq>

0000000000001599 <vector_52>:
    1599:	6a 14                	push   $0x14
    159b:	e9 3d fe ff ff       	jmp    13dd <irq>

00000000000015a0 <vector_53>:
    15a0:	6a 15                	push   $0x15
    15a2:	e9 36 fe ff ff       	jmp    13dd <irq>

00000000000015a7 <vector_54>:
    15a7:	6a 16                	push   $0x16
    15a9:	e9 2f fe ff ff       	jmp    13dd <irq>

00000000000015ae <vector_55>:
    15ae:	6a 17                	push   $0x17
    15b0:	e9 28 fe ff ff       	jmp    13dd <irq>

00000000000015b5 <vector_56>:
IRQ( 56); IRQ( 57); IRQ( 58); IRQ( 59); IRQ( 60); IRQ( 61); IRQ( 62); IRQ( 63)
    15b5:	6a 18                	push   $0x18
    15b7:	e9 21 fe ff ff       	jmp    13dd <irq>

00000000000015bc <vector_57>:
    15bc:	6a 19                	push   $0x19
    15be:	e9 1a fe ff ff       	jmp    13dd <irq>

00000000000015c3 <vector_58>:
    15c3:	6a 1a                	push   $0x1a
    15c5:	e9 13 fe ff ff       	jmp    13dd <irq>

00000000000015ca <vector_59>:
    15ca:	6a 1b                	push   $0x1b
    15cc:	e9 0c fe ff ff       	jmp    13dd <irq>

00000000000015d1 <vector_60>:
    15d1:	6a 1c                	push   $0x1c
    15d3:	e9 05 fe ff ff       	jmp    13dd <irq>

00000000000015d8 <vector_61>:
    15d8:	6a 1d                	push   $0x1d
    15da:	e9 fe fd ff ff       	jmp    13dd <irq>

00000000000015df <vector_62>:
    15df:	6a 1e                	push   $0x1e
    15e1:	e9 f7 fd ff ff       	jmp    13dd <irq>

00000000000015e6 <vector_63>:
    15e6:	6a 1f                	push   $0x1f
    15e8:	e9 f0 fd ff ff       	jmp    13dd <irq>

00000000000015ed <vector_64>:
IRQ( 64); IRQ( 65); IRQ( 66); IRQ( 67); IRQ( 68); IRQ( 69); IRQ( 70); IRQ( 71)
    15ed:	6a 20                	push   $0x20
    15ef:	e9 e9 fd ff ff       	jmp    13dd <irq>

00000000000015f4 <vector_65>:
    15f4:	6a 21                	push   $0x21
    15f6:	e9 e2 fd ff ff       	jmp    13dd <irq>

00000000000015fb <vector_66>:
    15fb:	6a 22                	push   $0x22
    15fd:	e9 db fd ff ff       	jmp    13dd <irq>

0000000000001602 <vector_67>:
    1602:	6a 23                	push   $0x23
    1604:	e9 d4 fd ff ff       	jmp    13dd <irq>

0000000000001609 <vector_68>:
    1609:	6a 24                	push   $0x24
    160b:	e9 cd fd ff ff       	jmp    13dd <irq>

0000000000001610 <vector_69>:
    1610:	6a 25                	push   $0x25
    1612:	e9 c6 fd ff ff       	jmp    13dd <irq>

0000000000001617 <vector_70>:
    1617:	6a 26                	push   $0x26
    1619:	e9 bf fd ff ff       	jmp    13dd <irq>

000000000000161e <vector_71>:
    161e:	6a 27                	push   $0x27
    1620:	e9 b8 fd ff ff       	jmp    13dd <irq>

0000000000001625 <vector_72>:
IRQ( 72); IRQ( 73); IRQ( 74); IRQ( 75); IRQ( 76); IRQ( 77); IRQ( 78); IRQ( 79)
    1625:	6a 28                	push   $0x28
    1627:	e9 b1 fd ff ff       	jmp    13dd <irq>

000000000000162c <vector_73>:
    162c:	6a 29                	push   $0x29
    162e:	e9 aa fd ff ff       	jmp    13dd <irq>

0000000000001633 <vector_74>:
    1633:	6a 2a                	push   $0x2a
    1635:	e9 a3 fd ff ff       	jmp    13dd <irq>

000000000000163a <vector_75>:
    163a:	6a 2b                	push   $0x2b
    163c:	e9 9c fd ff ff       	jmp    13dd <irq>

0000000000001641 <vector_76>:
    1641:	6a 2c                	push   $0x2c
    1643:	e9 95 fd ff ff       	jmp    13dd <irq>

0000000000001648 <vector_77>:
    1648:	6a 2d                	push   $0x2d
    164a:	e9 8e fd ff ff       	jmp    13dd <irq>

000000000000164f <vector_78>:
    164f:	6a 2e                	push   $0x2e
    1651:	e9 87 fd ff ff       	jmp    13dd <irq>

0000000000001656 <vector_79>:
    1656:	6a 2f                	push   $0x2f
    1658:	e9 80 fd ff ff       	jmp    13dd <irq>

000000000000165d <vector_80>:
IRQ( 80); IRQ( 81); IRQ( 82); IRQ( 83); IRQ( 84); IRQ( 85); IRQ( 86); IRQ( 87)
    165d:	6a 30                	push   $0x30
    165f:	e9 79 fd ff ff       	jmp    13dd <irq>

0000000000001664 <vector_81>:
    1664:	6a 31                	push   $0x31
    1666:	e9 72 fd ff ff       	jmp    13dd <irq>

000000000000166b <vector_82>:
    166b:	6a 32                	push   $0x32
    166d:	e9 6b fd ff ff       	jmp    13dd <irq>

0000000000001672 <vector_83>:
    1672:	6a 33                	push   $0x33
    1674:	e9 64 fd ff ff       	jmp    13dd <irq>

0000000000001679 <vector_84>:
    1679:	6a 34                	push   $0x34
    167b:	e9 5d fd ff ff       	jmp    13dd <irq>

0000000000001680 <vector_85>:
    1680:	6a 35                	push   $0x35
    1682:	e9 56 fd ff ff       	jmp    13dd <irq>

0000000000001687 <vector_86>:
    1687:	6a 36                	push   $0x36
    1689:	e9 4f fd ff ff       	jmp    13dd <irq>

000000000000168e <vector_87>:
    168e:	6a 37                	push   $0x37
    1690:	e9 48 fd ff ff       	jmp    13dd <irq>

0000000000001695 <vector_88>:
IRQ( 88); IRQ( 89); IRQ( 90); IRQ( 91); IRQ( 92); IRQ( 93); IRQ( 94); IRQ( 95)
    1695:	6a 38                	push   $0x38
    1697:	e9 41 fd ff ff       	jmp    13dd <irq>

000000000000169c <vector_89>:
    169c:	6a 39                	push   $0x39
    169e:	e9 3a fd ff ff       	jmp    13dd <irq>

00000000000016a3 <vector_90>:
    16a3:	6a 3a                	push   $0x3a
    16a5:	e9 33 fd ff ff       	jmp    13dd <irq>

00000000000016aa <vector_91>:
    16aa:	6a 3b                	push   $0x3b
    16ac:	e9 2c fd ff ff       	jmp    13dd <irq>

00000000000016b1 <vector_92>:
    16b1:	6a 3c                	push   $0x3c
    16b3:	e9 25 fd ff ff       	jmp    13dd <irq>

00000000000016b8 <vector_93>:
    16b8:	6a 3d                	push   $0x3d
    16ba:	e9 1e fd ff ff       	jmp    13dd <irq>

00000000000016bf <vector_94>:
    16bf:	6a 3e                	push   $0x3e
    16c1:	e9 17 fd ff ff       	jmp    13dd <irq>

00000000000016c6 <vector_95>:
    16c6:	6a 3f                	push   $0x3f
    16c8:	e9 10 fd ff ff       	jmp    13dd <irq>

00000000000016cd <vector_96>:
IRQ( 96); IRQ( 97); IRQ( 98); IRQ( 99); IRQ(100); IRQ(101); IRQ(102); IRQ(103)
    16cd:	6a 40                	push   $0x40
    16cf:	e9 09 fd ff ff       	jmp    13dd <irq>

00000000000016d4 <vector_97>:
    16d4:	6a 41                	push   $0x41
    16d6:	e9 02 fd ff ff       	jmp    13dd <irq>

00000000000016db <vector_98>:
    16db:	6a 42                	push   $0x42
    16dd:	e9 fb fc ff ff       	jmp    13dd <irq>

00000000000016e2 <vector_99>:
    16e2:	6a 43                	push   $0x43
    16e4:	e9 f4 fc ff ff       	jmp    13dd <irq>

00000000000016e9 <vector_100>:
    16e9:	6a 44                	push   $0x44
    16eb:	e9 ed fc ff ff       	jmp    13dd <irq>

00000000000016f0 <vector_101>:
    16f0:	6a 45                	push   $0x45
    16f2:	e9 e6 fc ff ff       	jmp    13dd <irq>

00000000000016f7 <vector_102>:
    16f7:	6a 46                	push   $0x46
    16f9:	e9 df fc ff ff       	jmp    13dd <irq>

00000000000016fe <vector_103>:
    16fe:	6a 47                	push   $0x47
    1700:	e9 d8 fc ff ff       	jmp    13dd <irq>

0000000000001705 <vector_104>:
IRQ(104); IRQ(105); IRQ(106); IRQ(107); IRQ(108); IRQ(109); IRQ(110); IRQ(111)
    1705:	6a 48                	push   $0x48
    1707:	e9 d1 fc ff ff       	jmp    13dd <irq>

000000000000170c <vector_105>:
    170c:	6a 49                	push   $0x49
    170e:	e9 ca fc ff ff       	jmp    13dd <irq>

0000000000001713 <vector_106>:
    1713:	6a 4a                	push   $0x4a
    1715:	e9 c3 fc ff ff       	jmp    13dd <irq>

000000000000171a <vector_107>:
    171a:	6a 4b                	push   $0x4b
    171c:	e9 bc fc ff ff       	jmp    13dd <irq>

0000000000001721 <vector_108>:
    1721:	6a 4c                	push   $0x4c
    1723:	e9 b5 fc ff ff       	jmp    13dd <irq>

0000000000001728 <vector_109>:
    1728:	6a 4d                	push   $0x4d
    172a:	e9 ae fc ff ff       	jmp    13dd <irq>

000000000000172f <vector_110>:
    172f:	6a 4e                	push   $0x4e
    1731:	e9 a7 fc ff ff       	jmp    13dd <irq>

0000000000001736 <vector_111>:
    1736:	6a 4f                	push   $0x4f
    1738:	e9 a0 fc ff ff       	jmp    13dd <irq>

000000000000173d <vector_112>:
IRQ(112); IRQ(113); IRQ(114); IRQ(115); IRQ(116); IRQ(117); IRQ(118); IRQ(119)
    173d:	6a 50                	push   $0x50
    173f:	e9 99 fc ff ff       	jmp    13dd <irq>

0000000000001744 <vector_113>:
    1744:	6a 51                	push   $0x51
    1746:	e9 92 fc ff ff       	jmp    13dd <irq>

000000000000174b <vector_114>:
    174b:	6a 52                	push   $0x52
    174d:	e9 8b fc ff ff       	jmp    13dd <irq>

0000000000001752 <vector_115>:
    1752:	6a 53                	push   $0x53
    1754:	e9 84 fc ff ff       	jmp    13dd <irq>

0000000000001759 <vector_116>:
    1759:	6a 54                	push   $0x54
    175b:	e9 7d fc ff ff       	jmp    13dd <irq>

0000000000001760 <vector_117>:
    1760:	6a 55                	push   $0x55
    1762:	e9 76 fc ff ff       	jmp    13dd <irq>

0000000000001767 <vector_118>:
    1767:	6a 56                	push   $0x56
    1769:	e9 6f fc ff ff       	jmp    13dd <irq>

000000000000176e <vector_119>:
    176e:	6a 57                	push   $0x57
    1770:	e9 68 fc ff ff       	jmp    13dd <irq>

0000000000001775 <vector_120>:
IRQ(120); IRQ(121); IRQ(122); IRQ(123); IRQ(124); IRQ(125); IRQ(126); IRQ(127)
    1775:	6a 58                	push   $0x58
    1777:	e9 61 fc ff ff       	jmp    13dd <irq>

000000000000177c <vector_121>:
    177c:	6a 59                	push   $0x59
    177e:	e9 5a fc ff ff       	jmp    13dd <irq>

0000000000001783 <vector_122>:
    1783:	6a 5a                	push   $0x5a
    1785:	e9 53 fc ff ff       	jmp    13dd <irq>

000000000000178a <vector_123>:
    178a:	6a 5b                	push   $0x5b
    178c:	e9 4c fc ff ff       	jmp    13dd <irq>

0000000000001791 <vector_124>:
    1791:	6a 5c                	push   $0x5c
    1793:	e9 45 fc ff ff       	jmp    13dd <irq>

0000000000001798 <vector_125>:
    1798:	6a 5d                	push   $0x5d
    179a:	e9 3e fc ff ff       	jmp    13dd <irq>

000000000000179f <vector_126>:
    179f:	6a 5e                	push   $0x5e
    17a1:	e9 37 fc ff ff       	jmp    13dd <irq>

00000000000017a6 <vector_127>:
    17a6:	6a 5f                	push   $0x5f
    17a8:	e9 30 fc ff ff       	jmp    13dd <irq>

00000000000017ad <vector_128>:
IRQ(128); IRQ(129); IRQ(130); IRQ(131); IRQ(132); IRQ(133); IRQ(134); IRQ(135)
    17ad:	6a 60                	push   $0x60
    17af:	e9 29 fc ff ff       	jmp    13dd <irq>

00000000000017b4 <vector_129>:
    17b4:	6a 61                	push   $0x61
    17b6:	e9 22 fc ff ff       	jmp    13dd <irq>

00000000000017bb <vector_130>:
    17bb:	6a 62                	push   $0x62
    17bd:	e9 1b fc ff ff       	jmp    13dd <irq>

00000000000017c2 <vector_131>:
    17c2:	6a 63                	push   $0x63
    17c4:	e9 14 fc ff ff       	jmp    13dd <irq>

00000000000017c9 <vector_132>:
    17c9:	6a 64                	push   $0x64
    17cb:	e9 0d fc ff ff       	jmp    13dd <irq>

00000000000017d0 <vector_133>:
    17d0:	6a 65                	push   $0x65
    17d2:	e9 06 fc ff ff       	jmp    13dd <irq>

00000000000017d7 <vector_134>:
    17d7:	6a 66                	push   $0x66
    17d9:	e9 ff fb ff ff       	jmp    13dd <irq>

00000000000017de <vector_135>:
    17de:	6a 67                	push   $0x67
    17e0:	e9 f8 fb ff ff       	jmp    13dd <irq>

00000000000017e5 <vector_136>:
IRQ(136); IRQ(137); IRQ(138); IRQ(139); IRQ(140); IRQ(141); IRQ(142); IRQ(143)
    17e5:	6a 68                	push   $0x68
    17e7:	e9 f1 fb ff ff       	jmp    13dd <irq>

00000000000017ec <vector_137>:
    17ec:	6a 69                	push   $0x69
    17ee:	e9 ea fb ff ff       	jmp    13dd <irq>

00000000000017f3 <vector_138>:
    17f3:	6a 6a                	push   $0x6a
    17f5:	e9 e3 fb ff ff       	jmp    13dd <irq>

00000000000017fa <vector_139>:
    17fa:	6a 6b                	push   $0x6b
    17fc:	e9 dc fb ff ff       	jmp    13dd <irq>

0000000000001801 <vector_140>:
    1801:	6a 6c                	push   $0x6c
    1803:	e9 d5 fb ff ff       	jmp    13dd <irq>

0000000000001808 <vector_141>:
    1808:	6a 6d                	push   $0x6d
    180a:	e9 ce fb ff ff       	jmp    13dd <irq>

000000000000180f <vector_142>:
    180f:	6a 6e                	push   $0x6e
    1811:	e9 c7 fb ff ff       	jmp    13dd <irq>

0000000000001816 <vector_143>:
    1816:	6a 6f                	push   $0x6f
    1818:	e9 c0 fb ff ff       	jmp    13dd <irq>

000000000000181d <vector_144>:
IRQ(144); IRQ(145); IRQ(146); IRQ(147); IRQ(148); IRQ(149); IRQ(150); IRQ(151)
    181d:	6a 70                	push   $0x70
    181f:	e9 b9 fb ff ff       	jmp    13dd <irq>

0000000000001824 <vector_145>:
    1824:	6a 71                	push   $0x71
    1826:	e9 b2 fb ff ff       	jmp    13dd <irq>

000000000000182b <vector_146>:
    182b:	6a 72                	push   $0x72
    182d:	e9 ab fb ff ff       	jmp    13dd <irq>

0000000000001832 <vector_147>:
    1832:	6a 73                	push   $0x73
    1834:	e9 a4 fb ff ff       	jmp    13dd <irq>

0000000000001839 <vector_148>:
    1839:	6a 74                	push   $0x74
    183b:	e9 9d fb ff ff       	jmp    13dd <irq>

0000000000001840 <vector_149>:
    1840:	6a 75                	push   $0x75
    1842:	e9 96 fb ff ff       	jmp    13dd <irq>

0000000000001847 <vector_150>:
    1847:	6a 76                	push   $0x76
    1849:	e9 8f fb ff ff       	jmp    13dd <irq>

000000000000184e <vector_151>:
    184e:	6a 77                	push   $0x77
    1850:	e9 88 fb ff ff       	jmp    13dd <irq>

0000000000001855 <vector_152>:
IRQ(152); IRQ(153); IRQ(154); IRQ(155); IRQ(156); IRQ(157); IRQ(158); IRQ(159)
    1855:	6a 78                	push   $0x78
    1857:	e9 81 fb ff ff       	jmp    13dd <irq>

000000000000185c <vector_153>:
    185c:	6a 79                	push   $0x79
    185e:	e9 7a fb ff ff       	jmp    13dd <irq>

0000000000001863 <vector_154>:
    1863:	6a 7a                	push   $0x7a
    1865:	e9 73 fb ff ff       	jmp    13dd <irq>

000000000000186a <vector_155>:
    186a:	6a 7b                	push   $0x7b
    186c:	e9 6c fb ff ff       	jmp    13dd <irq>

0000000000001871 <vector_156>:
    1871:	6a 7c                	push   $0x7c
    1873:	e9 65 fb ff ff       	jmp    13dd <irq>

0000000000001878 <vector_157>:
    1878:	6a 7d                	push   $0x7d
    187a:	e9 5e fb ff ff       	jmp    13dd <irq>

000000000000187f <vector_158>:
    187f:	6a 7e                	push   $0x7e
    1881:	e9 57 fb ff ff       	jmp    13dd <irq>

0000000000001886 <vector_159>:
    1886:	6a 7f                	push   $0x7f
    1888:	e9 50 fb ff ff       	jmp    13dd <irq>

000000000000188d <vector_160>:
IRQ(160); IRQ(161); IRQ(162); IRQ(163); IRQ(164); IRQ(165); IRQ(166); IRQ(167)
    188d:	68 80 00 00 00       	push   $0x80
    1892:	e9 46 fb ff ff       	jmp    13dd <irq>

0000000000001897 <vector_161>:
    1897:	68 81 00 00 00       	push   $0x81
    189c:	e9 3c fb ff ff       	jmp    13dd <irq>

00000000000018a1 <vector_162>:
    18a1:	68 82 00 00 00       	push   $0x82
    18a6:	e9 32 fb ff ff       	jmp    13dd <irq>

00000000000018ab <vector_163>:
    18ab:	68 83 00 00 00       	push   $0x83
    18b0:	e9 28 fb ff ff       	jmp    13dd <irq>

00000000000018b5 <vector_164>:
    18b5:	68 84 00 00 00       	push   $0x84
    18ba:	e9 1e fb ff ff       	jmp    13dd <irq>

00000000000018bf <vector_165>:
    18bf:	68 85 00 00 00       	push   $0x85
    18c4:	e9 14 fb ff ff       	jmp    13dd <irq>

00000000000018c9 <vector_166>:
    18c9:	68 86 00 00 00       	push   $0x86
    18ce:	e9 0a fb ff ff       	jmp    13dd <irq>

00000000000018d3 <vector_167>:
    18d3:	68 87 00 00 00       	push   $0x87
    18d8:	e9 00 fb ff ff       	jmp    13dd <irq>

00000000000018dd <vector_168>:
IRQ(168); IRQ(169); IRQ(170); IRQ(171); IRQ(172); IRQ(173); IRQ(174); IRQ(175)
    18dd:	68 88 00 00 00       	push   $0x88
    18e2:	e9 f6 fa ff ff       	jmp    13dd <irq>

00000000000018e7 <vector_169>:
    18e7:	68 89 00 00 00       	push   $0x89
    18ec:	e9 ec fa ff ff       	jmp    13dd <irq>

00000000000018f1 <vector_170>:
    18f1:	68 8a 00 00 00       	push   $0x8a
    18f6:	e9 e2 fa ff ff       	jmp    13dd <irq>

00000000000018fb <vector_171>:
    18fb:	68 8b 00 00 00       	push   $0x8b
    1900:	e9 d8 fa ff ff       	jmp    13dd <irq>

0000000000001905 <vector_172>:
    1905:	68 8c 00 00 00       	push   $0x8c
    190a:	e9 ce fa ff ff       	jmp    13dd <irq>

000000000000190f <vector_173>:
    190f:	68 8d 00 00 00       	push   $0x8d
    1914:	e9 c4 fa ff ff       	jmp    13dd <irq>

0000000000001919 <vector_174>:
    1919:	68 8e 00 00 00       	push   $0x8e
    191e:	e9 ba fa ff ff       	jmp    13dd <irq>

0000000000001923 <vector_175>:
    1923:	68 8f 00 00 00       	push   $0x8f
    1928:	e9 b0 fa ff ff       	jmp    13dd <irq>

000000000000192d <vector_176>:
IRQ(176); IRQ(177); IRQ(178); IRQ(179); IRQ(180); IRQ(181); IRQ(182); IRQ(183)
    192d:	68 90 00 00 00       	push   $0x90
    1932:	e9 a6 fa ff ff       	jmp    13dd <irq>

0000000000001937 <vector_177>:
    1937:	68 91 00 00 00       	push   $0x91
    193c:	e9 9c fa ff ff       	jmp    13dd <irq>

0000000000001941 <vector_178>:
    1941:	68 92 00 00 00       	push   $0x92
    1946:	e9 92 fa ff ff       	jmp    13dd <irq>

000000000000194b <vector_179>:
    194b:	68 93 00 00 00       	push   $0x93
    1950:	e9 88 fa ff ff       	jmp    13dd <irq>

0000000000001955 <vector_180>:
    1955:	68 94 00 00 00       	push   $0x94
    195a:	e9 7e fa ff ff       	jmp    13dd <irq>

000000000000195f <vector_181>:
    195f:	68 95 00 00 00       	push   $0x95
    1964:	e9 74 fa ff ff       	jmp    13dd <irq>

0000000000001969 <vector_182>:
    1969:	68 96 00 00 00       	push   $0x96
    196e:	e9 6a fa ff ff       	jmp    13dd <irq>

0000000000001973 <vector_183>:
    1973:	68 97 00 00 00       	push   $0x97
    1978:	e9 60 fa ff ff       	jmp    13dd <irq>

000000000000197d <vector_184>:
IRQ(184); IRQ(185); IRQ(186); IRQ(187); IRQ(188); IRQ(189); IRQ(190); IRQ(191)
    197d:	68 98 00 00 00       	push   $0x98
    1982:	e9 56 fa ff ff       	jmp    13dd <irq>

0000000000001987 <vector_185>:
    1987:	68 99 00 00 00       	push   $0x99
    198c:	e9 4c fa ff ff       	jmp    13dd <irq>

0000000000001991 <vector_186>:
    1991:	68 9a 00 00 00       	push   $0x9a
    1996:	e9 42 fa ff ff       	jmp    13dd <irq>

000000000000199b <vector_187>:
    199b:	68 9b 00 00 00       	push   $0x9b
    19a0:	e9 38 fa ff ff       	jmp    13dd <irq>

00000000000019a5 <vector_188>:
    19a5:	68 9c 00 00 00       	push   $0x9c
    19aa:	e9 2e fa ff ff       	jmp    13dd <irq>

00000000000019af <vector_189>:
    19af:	68 9d 00 00 00       	push   $0x9d
    19b4:	e9 24 fa ff ff       	jmp    13dd <irq>

00000000000019b9 <vector_190>:
    19b9:	68 9e 00 00 00       	push   $0x9e
    19be:	e9 1a fa ff ff       	jmp    13dd <irq>

00000000000019c3 <vector_191>:
    19c3:	68 9f 00 00 00       	push   $0x9f
    19c8:	e9 10 fa ff ff       	jmp    13dd <irq>

00000000000019cd <vector_192>:
IRQ(192); IRQ(193); IRQ(194); IRQ(195); IRQ(196); IRQ(197); IRQ(198); IRQ(199)
    19cd:	68 a0 00 00 00       	push   $0xa0
    19d2:	e9 06 fa ff ff       	jmp    13dd <irq>

00000000000019d7 <vector_193>:
    19d7:	68 a1 00 00 00       	push   $0xa1
    19dc:	e9 fc f9 ff ff       	jmp    13dd <irq>

00000000000019e1 <vector_194>:
    19e1:	68 a2 00 00 00       	push   $0xa2
    19e6:	e9 f2 f9 ff ff       	jmp    13dd <irq>

00000000000019eb <vector_195>:
    19eb:	68 a3 00 00 00       	push   $0xa3
    19f0:	e9 e8 f9 ff ff       	jmp    13dd <irq>

00000000000019f5 <vector_196>:
    19f5:	68 a4 00 00 00       	push   $0xa4
    19fa:	e9 de f9 ff ff       	jmp    13dd <irq>

00000000000019ff <vector_197>:
    19ff:	68 a5 00 00 00       	push   $0xa5
    1a04:	e9 d4 f9 ff ff       	jmp    13dd <irq>

0000000000001a09 <vector_198>:
    1a09:	68 a6 00 00 00       	push   $0xa6
    1a0e:	e9 ca f9 ff ff       	jmp    13dd <irq>

0000000000001a13 <vector_199>:
    1a13:	68 a7 00 00 00       	push   $0xa7
    1a18:	e9 c0 f9 ff ff       	jmp    13dd <irq>

0000000000001a1d <vector_200>:
IRQ(200); IRQ(201); IRQ(202); IRQ(203); IRQ(204); IRQ(205); IRQ(206); IRQ(207)
    1a1d:	68 a8 00 00 00       	push   $0xa8
    1a22:	e9 b6 f9 ff ff       	jmp    13dd <irq>

0000000000001a27 <vector_201>:
    1a27:	68 a9 00 00 00       	push   $0xa9
    1a2c:	e9 ac f9 ff ff       	jmp    13dd <irq>

0000000000001a31 <vector_202>:
    1a31:	68 aa 00 00 00       	push   $0xaa
    1a36:	e9 a2 f9 ff ff       	jmp    13dd <irq>

0000000000001a3b <vector_203>:
    1a3b:	68 ab 00 00 00       	push   $0xab
    1a40:	e9 98 f9 ff ff       	jmp    13dd <irq>

0000000000001a45 <vector_204>:
    1a45:	68 ac 00 00 00       	push   $0xac
    1a4a:	e9 8e f9 ff ff       	jmp    13dd <irq>

0000000000001a4f <vector_205>:
    1a4f:	68 ad 00 00 00       	push   $0xad
    1a54:	e9 84 f9 ff ff       	jmp    13dd <irq>

0000000000001a59 <vector_206>:
    1a59:	68 ae 00 00 00       	push   $0xae
    1a5e:	e9 7a f9 ff ff       	jmp    13dd <irq>

0000000000001a63 <vector_207>:
    1a63:	68 af 00 00 00       	push   $0xaf
    1a68:	e9 70 f9 ff ff       	jmp    13dd <irq>

0000000000001a6d <vector_208>:
IRQ(208); IRQ(209); IRQ(210); IRQ(211); IRQ(212); IRQ(213); IRQ(214); IRQ(215)
    1a6d:	68 b0 00 00 00       	push   $0xb0
    1a72:	e9 66 f9 ff ff       	jmp    13dd <irq>

0000000000001a77 <vector_209>:
    1a77:	68 b1 00 00 00       	push   $0xb1
    1a7c:	e9 5c f9 ff ff       	jmp    13dd <irq>

0000000000001a81 <vector_210>:
    1a81:	68 b2 00 00 00       	push   $0xb2
    1a86:	e9 52 f9 ff ff       	jmp    13dd <irq>

0000000000001a8b <vector_211>:
    1a8b:	68 b3 00 00 00       	push   $0xb3
    1a90:	e9 48 f9 ff ff       	jmp    13dd <irq>

0000000000001a95 <vector_212>:
    1a95:	68 b4 00 00 00       	push   $0xb4
    1a9a:	e9 3e f9 ff ff       	jmp    13dd <irq>

0000000000001a9f <vector_213>:
    1a9f:	68 b5 00 00 00       	push   $0xb5
    1aa4:	e9 34 f9 ff ff       	jmp    13dd <irq>

0000000000001aa9 <vector_214>:
    1aa9:	68 b6 00 00 00       	push   $0xb6
    1aae:	e9 2a f9 ff ff       	jmp    13dd <irq>

0000000000001ab3 <vector_215>:
    1ab3:	68 b7 00 00 00       	push   $0xb7
    1ab8:	e9 20 f9 ff ff       	jmp    13dd <irq>

0000000000001abd <vector_216>:
IRQ(216); IRQ(217); IRQ(218); IRQ(219); IRQ(220); IRQ(221); IRQ(222); IRQ(223)
    1abd:	68 b8 00 00 00       	push   $0xb8
    1ac2:	e9 16 f9 ff ff       	jmp    13dd <irq>

0000000000001ac7 <vector_217>:
    1ac7:	68 b9 00 00 00       	push   $0xb9
    1acc:	e9 0c f9 ff ff       	jmp    13dd <irq>

0000000000001ad1 <vector_218>:
    1ad1:	68 ba 00 00 00       	push   $0xba
    1ad6:	e9 02 f9 ff ff       	jmp    13dd <irq>

0000000000001adb <vector_219>:
    1adb:	68 bb 00 00 00       	push   $0xbb
    1ae0:	e9 f8 f8 ff ff       	jmp    13dd <irq>

0000000000001ae5 <vector_220>:
    1ae5:	68 bc 00 00 00       	push   $0xbc
    1aea:	e9 ee f8 ff ff       	jmp    13dd <irq>

0000000000001aef <vector_221>:
    1aef:	68 bd 00 00 00       	push   $0xbd
    1af4:	e9 e4 f8 ff ff       	jmp    13dd <irq>

0000000000001af9 <vector_222>:
    1af9:	68 be 00 00 00       	push   $0xbe
    1afe:	e9 da f8 ff ff       	jmp    13dd <irq>

0000000000001b03 <vector_223>:
    1b03:	68 bf 00 00 00       	push   $0xbf
    1b08:	e9 d0 f8 ff ff       	jmp    13dd <irq>

0000000000001b0d <vector_224>:
IRQ(224); IRQ(225); IRQ(226); IRQ(227); IRQ(228); IRQ(229); IRQ(230); IRQ(231)
    1b0d:	68 c0 00 00 00       	push   $0xc0
    1b12:	e9 c6 f8 ff ff       	jmp    13dd <irq>

0000000000001b17 <vector_225>:
    1b17:	68 c1 00 00 00       	push   $0xc1
    1b1c:	e9 bc f8 ff ff       	jmp    13dd <irq>

0000000000001b21 <vector_226>:
    1b21:	68 c2 00 00 00       	push   $0xc2
    1b26:	e9 b2 f8 ff ff       	jmp    13dd <irq>

0000000000001b2b <vector_227>:
    1b2b:	68 c3 00 00 00       	push   $0xc3
    1b30:	e9 a8 f8 ff ff       	jmp    13dd <irq>

0000000000001b35 <vector_228>:
    1b35:	68 c4 00 00 00       	push   $0xc4
    1b3a:	e9 9e f8 ff ff       	jmp    13dd <irq>

0000000000001b3f <vector_229>:
    1b3f:	68 c5 00 00 00       	push   $0xc5
    1b44:	e9 94 f8 ff ff       	jmp    13dd <irq>

0000000000001b49 <vector_230>:
    1b49:	68 c6 00 00 00       	push   $0xc6
    1b4e:	e9 8a f8 ff ff       	jmp    13dd <irq>

0000000000001b53 <vector_231>:
    1b53:	68 c7 00 00 00       	push   $0xc7
    1b58:	e9 80 f8 ff ff       	jmp    13dd <irq>

0000000000001b5d <vector_232>:
IRQ(232); IRQ(233); IRQ(234); IRQ(235); IRQ(236); IRQ(237); IRQ(238); IRQ(239)
    1b5d:	68 c8 00 00 00       	push   $0xc8
    1b62:	e9 76 f8 ff ff       	jmp    13dd <irq>

0000000000001b67 <vector_233>:
    1b67:	68 c9 00 00 00       	push   $0xc9
    1b6c:	e9 6c f8 ff ff       	jmp    13dd <irq>

0000000000001b71 <vector_234>:
    1b71:	68 ca 00 00 00       	push   $0xca
    1b76:	e9 62 f8 ff ff       	jmp    13dd <irq>

0000000000001b7b <vector_235>:
    1b7b:	68 cb 00 00 00       	push   $0xcb
    1b80:	e9 58 f8 ff ff       	jmp    13dd <irq>

0000000000001b85 <vector_236>:
    1b85:	68 cc 00 00 00       	push   $0xcc
    1b8a:	e9 4e f8 ff ff       	jmp    13dd <irq>

0000000000001b8f <vector_237>:
    1b8f:	68 cd 00 00 00       	push   $0xcd
    1b94:	e9 44 f8 ff ff       	jmp    13dd <irq>

0000000000001b99 <vector_238>:
    1b99:	68 ce 00 00 00       	push   $0xce
    1b9e:	e9 3a f8 ff ff       	jmp    13dd <irq>

0000000000001ba3 <vector_239>:
    1ba3:	68 cf 00 00 00       	push   $0xcf
    1ba8:	e9 30 f8 ff ff       	jmp    13dd <irq>

0000000000001bad <vector_240>:
IRQ(240); IRQ(241); IRQ(242); IRQ(243); IRQ(244); IRQ(245); IRQ(246); IRQ(247)
    1bad:	68 d0 00 00 00       	push   $0xd0
    1bb2:	e9 26 f8 ff ff       	jmp    13dd <irq>

0000000000001bb7 <vector_241>:
    1bb7:	68 d1 00 00 00       	push   $0xd1
    1bbc:	e9 1c f8 ff ff       	jmp    13dd <irq>

0000000000001bc1 <vector_242>:
    1bc1:	68 d2 00 00 00       	push   $0xd2
    1bc6:	e9 12 f8 ff ff       	jmp    13dd <irq>

0000000000001bcb <vector_243>:
    1bcb:	68 d3 00 00 00       	push   $0xd3
    1bd0:	e9 08 f8 ff ff       	jmp    13dd <irq>

0000000000001bd5 <vector_244>:
    1bd5:	68 d4 00 00 00       	push   $0xd4
    1bda:	e9 fe f7 ff ff       	jmp    13dd <irq>

0000000000001bdf <vector_245>:
    1bdf:	68 d5 00 00 00       	push   $0xd5
    1be4:	e9 f4 f7 ff ff       	jmp    13dd <irq>

0000000000001be9 <vector_246>:
    1be9:	68 d6 00 00 00       	push   $0xd6
    1bee:	e9 ea f7 ff ff       	jmp    13dd <irq>

0000000000001bf3 <vector_247>:
    1bf3:	68 d7 00 00 00       	push   $0xd7
    1bf8:	e9 e0 f7 ff ff       	jmp    13dd <irq>

0000000000001bfd <vector_248>:
IRQ(248); IRQ(249); IRQ(250); IRQ(251); IRQ(252); IRQ(253); IRQ(254); IRQ(255)
    1bfd:	68 d8 00 00 00       	push   $0xd8
    1c02:	e9 d6 f7 ff ff       	jmp    13dd <irq>

0000000000001c07 <vector_249>:
    1c07:	68 d9 00 00 00       	push   $0xd9
    1c0c:	e9 cc f7 ff ff       	jmp    13dd <irq>

0000000000001c11 <vector_250>:
    1c11:	68 da 00 00 00       	push   $0xda
    1c16:	e9 c2 f7 ff ff       	jmp    13dd <irq>

0000000000001c1b <vector_251>:
    1c1b:	68 db 00 00 00       	push   $0xdb
    1c20:	e9 b8 f7 ff ff       	jmp    13dd <irq>

0000000000001c25 <vector_252>:
    1c25:	68 dc 00 00 00       	push   $0xdc
    1c2a:	e9 ae f7 ff ff       	jmp    13dd <irq>

0000000000001c2f <vector_253>:
    1c2f:	68 dd 00 00 00       	push   $0xdd
    1c34:	e9 a4 f7 ff ff       	jmp    13dd <irq>

0000000000001c39 <vector_254>:
    1c39:	68 de 00 00 00       	push   $0xde
    1c3e:	e9 9a f7 ff ff       	jmp    13dd <irq>

0000000000001c43 <vector_255>:
    1c43:	68 df 00 00 00       	push   $0xdf
    1c48:	e9 90 f7 ff ff       	jmp    13dd <irq>
    1c4d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1c54:	00 00 00 
    1c57:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1c5e:	00 00 00 
    1c61:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1c68:	00 00 00 
    1c6b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1c72:	00 00 00 
    1c75:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1c7c:	00 00 00 
    1c7f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1c86:	00 00 00 
    1c89:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1c90:	00 00 00 
    1c93:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1c9a:	00 00 00 
    1c9d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1ca4:	00 00 00 
    1ca7:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1cae:	00 00 00 
    1cb1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1cb8:	00 00 00 
    1cbb:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1cc2:	00 00 00 
    1cc5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1ccc:	00 00 00 
    1ccf:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1cd6:	00 00 00 
    1cd9:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1ce0:	00 00 00 
    1ce3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1cea:	00 00 00 
    1ced:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1cf4:	00 00 00 
    1cf7:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1cfe:	00 00 00 
    1d01:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d08:	00 00 00 
    1d0b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d12:	00 00 00 
    1d15:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d1c:	00 00 00 
    1d1f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d26:	00 00 00 
    1d29:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d30:	00 00 00 
    1d33:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d3a:	00 00 00 
    1d3d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d44:	00 00 00 
    1d47:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d4e:	00 00 00 
    1d51:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d58:	00 00 00 
    1d5b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d62:	00 00 00 
    1d65:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d6c:	00 00 00 
    1d6f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d76:	00 00 00 
    1d79:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d80:	00 00 00 
    1d83:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d8a:	00 00 00 
    1d8d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d94:	00 00 00 
    1d97:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1d9e:	00 00 00 
    1da1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1da8:	00 00 00 
    1dab:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1db2:	00 00 00 
    1db5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1dbc:	00 00 00 
    1dbf:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1dc6:	00 00 00 
    1dc9:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1dd0:	00 00 00 
    1dd3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1dda:	00 00 00 
    1ddd:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1de4:	00 00 00 
    1de7:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1dee:	00 00 00 
    1df1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1df8:	00 00 00 
    1dfb:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1e02:	00 00 00 
    1e05:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1e0c:	00 00 00 
    1e0f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1e16:	00 00 00 
    1e19:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1e20:	00 00 00 
    1e23:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1e2a:	00 00 00 
    1e2d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1e34:	00 00 00 
    1e37:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1e3e:	00 00 00 
    1e41:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1e48:	00 00 00 
    1e4b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1e52:	00 00 00 
    1e55:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1e5c:	00 00 00 
    1e5f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1e66:	00 00 00 
    1e69:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1e70:	00 00 00 
    1e73:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1e7a:	00 00 00 
    1e7d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1e84:	00 00 00 
    1e87:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1e8e:	00 00 00 
    1e91:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1e98:	00 00 00 
    1e9b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1ea2:	00 00 00 
    1ea5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1eac:	00 00 00 
    1eaf:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1eb6:	00 00 00 
    1eb9:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1ec0:	00 00 00 
    1ec3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1eca:	00 00 00 
    1ecd:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1ed4:	00 00 00 
    1ed7:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1ede:	00 00 00 
    1ee1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1ee8:	00 00 00 
    1eeb:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1ef2:	00 00 00 
    1ef5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1efc:	00 00 00 
    1eff:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1f06:	00 00 00 
    1f09:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1f10:	00 00 00 
    1f13:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1f1a:	00 00 00 
    1f1d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1f24:	00 00 00 
    1f27:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1f2e:	00 00 00 
    1f31:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1f38:	00 00 00 
    1f3b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1f42:	00 00 00 
    1f45:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1f4c:	00 00 00 
    1f4f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1f56:	00 00 00 
    1f59:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1f60:	00 00 00 
    1f63:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1f6a:	00 00 00 
    1f6d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1f74:	00 00 00 
    1f77:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1f7e:	00 00 00 
    1f81:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1f88:	00 00 00 
    1f8b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1f92:	00 00 00 
    1f95:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1f9c:	00 00 00 
    1f9f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1fa6:	00 00 00 
    1fa9:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1fb0:	00 00 00 
    1fb3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1fba:	00 00 00 
    1fbd:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1fc4:	00 00 00 
    1fc7:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1fce:	00 00 00 
    1fd1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1fd8:	00 00 00 
    1fdb:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1fe2:	00 00 00 
    1fe5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1fec:	00 00 00 
    1fef:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1ff6:	00 00 00 
    1ff9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002000 <_locore_end>:
    2000:	e3 12                	jrcxz  2014 <_locore_end+0x14>
    2002:	18 00                	sbb    %al,(%rax)
    2004:	07                   	(bad)  
    2005:	8f 00                	pop    (%rax)
	...
    200f:	00 e9                	add    %ch,%cl
    2011:	12 18                	adc    (%rax),%bl
    2013:	00 07                	add    %al,(%rdi)
    2015:	8f 00                	pop    (%rax)
	...
    201f:	00 ef                	add    %ch,%bh
    2021:	12 18                	adc    (%rax),%bl
    2023:	00 06                	add    %al,(%rsi)
    2025:	8f 00                	pop    (%rax)
	...
    202f:	00 f5                	add    %dh,%ch
    2031:	12 18                	adc    (%rax),%bl
    2033:	00 07                	add    %al,(%rdi)
    2035:	8f 00                	pop    (%rax)
	...
    203f:	00 fb                	add    %bh,%bl
    2041:	12 18                	adc    (%rax),%bl
    2043:	00 07                	add    %al,(%rdi)
    2045:	8f 00                	pop    (%rax)
	...
    204f:	00 01                	add    %al,(%rcx)
    2051:	13 18                	adc    (%rax),%ebx
    2053:	00 07                	add    %al,(%rdi)
    2055:	8f 00                	pop    (%rax)
	...
    205f:	00 07                	add    %al,(%rdi)
    2061:	13 18                	adc    (%rax),%ebx
    2063:	00 07                	add    %al,(%rdi)
    2065:	8f 00                	pop    (%rax)
	...
    206f:	00 0d 13 18 00 07    	add    %cl,0x7001813(%rip)        # 7003888 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x582c048>
    2075:	8f 00                	pop    (%rax)
	...
    207f:	00 13                	add    %dl,(%rbx)
    2081:	13 18                	adc    (%rax),%ebx
    2083:	00 07                	add    %al,(%rdi)
    2085:	8f 00                	pop    (%rax)
	...
    208f:	00 17                	add    %dl,(%rdi)
    2091:	13 18                	adc    (%rax),%ebx
    2093:	00 07                	add    %al,(%rdi)
    2095:	8f 00                	pop    (%rax)
	...
    209f:	00 1d 13 18 00 07    	add    %bl,0x7001813(%rip)        # 70038b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x582c078>
    20a5:	8f 00                	pop    (%rax)
	...
    20af:	00 21                	add    %ah,(%rcx)
    20b1:	13 18                	adc    (%rax),%ebx
    20b3:	00 07                	add    %al,(%rdi)
    20b5:	8f 00                	pop    (%rax)
	...
    20bf:	00 28                	add    %ch,(%rax)
    20c1:	13 18                	adc    (%rax),%ebx
    20c3:	00 07                	add    %al,(%rdi)
    20c5:	8f 00                	pop    (%rax)
	...
    20cf:	00 2f                	add    %ch,(%rdi)
    20d1:	13 18                	adc    (%rax),%ebx
    20d3:	00 07                	add    %al,(%rdi)
    20d5:	8f 00                	pop    (%rax)
	...
    20df:	00 36                	add    %dh,(%rsi)
    20e1:	13 18                	adc    (%rax),%ebx
    20e3:	00 07                	add    %al,(%rdi)
    20e5:	8f 00                	pop    (%rax)
	...
    20ef:	00 3d 13 18 00 07    	add    %bh,0x7001813(%rip)        # 7003908 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x582c0c8>
    20f5:	8f 00                	pop    (%rax)
	...
    20ff:	00 46 13             	add    %al,0x13(%rsi)
    2102:	18 00                	sbb    %al,(%rax)
    2104:	07                   	(bad)  
    2105:	8f 00                	pop    (%rax)
	...
    210f:	00 4f 13             	add    %cl,0x13(%rdi)
    2112:	18 00                	sbb    %al,(%rax)
    2114:	07                   	(bad)  
    2115:	8f 00                	pop    (%rax)
	...
    211f:	00 56 13             	add    %dl,0x13(%rsi)
    2122:	18 00                	sbb    %al,(%rax)
    2124:	07                   	(bad)  
    2125:	8f 00                	pop    (%rax)
	...
    212f:	00 5f 13             	add    %bl,0x13(%rdi)
    2132:	18 00                	sbb    %al,(%rax)
    2134:	07                   	(bad)  
    2135:	8f 00                	pop    (%rax)
	...
    213f:	00 68 13             	add    %ch,0x13(%rax)
    2142:	18 00                	sbb    %al,(%rax)
    2144:	07                   	(bad)  
    2145:	8f 00                	pop    (%rax)
	...
    214f:	00 71 13             	add    %dh,0x13(%rcx)
    2152:	18 00                	sbb    %al,(%rax)
    2154:	07                   	(bad)  
    2155:	8f 00                	pop    (%rax)
	...
    215f:	00 7a 13             	add    %bh,0x13(%rdx)
    2162:	18 00                	sbb    %al,(%rax)
    2164:	07                   	(bad)  
    2165:	8f 00                	pop    (%rax)
	...
    216f:	00 83 13 18 00 07    	add    %al,0x7001813(%rbx)
    2175:	8f 00                	pop    (%rax)
	...
    217f:	00 8c 13 18 00 07 8f 	add    %cl,-0x70f8ffe8(%rbx,%rdx,1)
	...
    218e:	00 00                	add    %al,(%rax)
    2190:	95                   	xchg   %eax,%ebp
    2191:	13 18                	adc    (%rax),%ebx
    2193:	00 07                	add    %al,(%rdi)
    2195:	8f 00                	pop    (%rax)
	...
    219f:	00 9e 13 18 00 07    	add    %bl,0x7001813(%rsi)
    21a5:	8f 00                	pop    (%rax)
	...
    21af:	00 a7 13 18 00 07    	add    %ah,0x7001813(%rdi)
    21b5:	8f 00                	pop    (%rax)
	...
    21bf:	00 b0 13 18 00 07    	add    %dh,0x7001813(%rax)
    21c5:	8f 00                	pop    (%rax)
	...
    21cf:	00 b9 13 18 00 07    	add    %bh,0x7001813(%rcx)
    21d5:	8f 00                	pop    (%rax)
	...
    21df:	00 c2                	add    %al,%dl
    21e1:	13 18                	adc    (%rax),%ebx
    21e3:	00 07                	add    %al,(%rdi)
    21e5:	8f 00                	pop    (%rax)
	...
    21ef:	00 cb                	add    %cl,%bl
    21f1:	13 18                	adc    (%rax),%ebx
    21f3:	00 07                	add    %al,(%rdi)
    21f5:	8f 00                	pop    (%rax)
	...
    21ff:	00 d4                	add    %dl,%ah
    2201:	13 18                	adc    (%rax),%ebx
    2203:	00 07                	add    %al,(%rdi)
    2205:	ee                   	out    %al,(%dx)
	...
    220e:	00 00                	add    %al,(%rax)
    2210:	14 15                	adc    $0x15,%al
    2212:	18 00                	sbb    %al,(%rax)
    2214:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    221a:	00 00                	add    %al,(%rax)
    221c:	00 00                	add    %al,(%rax)
    221e:	00 00                	add    %al,(%rax)
    2220:	1b 15 18 00 01 8e    	sbb    -0x71feffe8(%rip),%edx        # ffffffff8e01223e <CONFIG_LOAPIC_BASE_ADDRESS+0xfffffffe8f21223e>
	...
    222e:	00 00                	add    %al,(%rax)
    2230:	22 15 18 00 01 8e    	and    -0x71feffe8(%rip),%dl        # ffffffff8e01224e <CONFIG_LOAPIC_BASE_ADDRESS+0xfffffffe8f21224e>
	...
    223e:	00 00                	add    %al,(%rax)
    2240:	29 15 18 00 01 8e    	sub    %edx,-0x71feffe8(%rip)        # ffffffff8e01225e <CONFIG_LOAPIC_BASE_ADDRESS+0xfffffffe8f21225e>
	...
    224e:	00 00                	add    %al,(%rax)
    2250:	30 15 18 00 01 8e    	xor    %dl,-0x71feffe8(%rip)        # ffffffff8e01226e <CONFIG_LOAPIC_BASE_ADDRESS+0xfffffffe8f21226e>
	...
    225e:	00 00                	add    %al,(%rax)
    2260:	37                   	(bad)  
    2261:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    226e:	00 00                	add    %al,(%rax)
    2270:	3e 15 18 00 01 8e    	ds adc $0x8e010018,%eax
	...
    227e:	00 00                	add    %al,(%rax)
    2280:	45 15 18 00 01 8e    	rex.RB adc $0x8e010018,%eax
	...
    228e:	00 00                	add    %al,(%rax)
    2290:	4c 15 18 00 01 8e    	rex.WR adc $0xffffffff8e010018,%rax
	...
    229e:	00 00                	add    %al,(%rax)
    22a0:	53                   	push   %rbx
    22a1:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    22ae:	00 00                	add    %al,(%rax)
    22b0:	5a                   	pop    %rdx
    22b1:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    22be:	00 00                	add    %al,(%rax)
    22c0:	61                   	(bad)  
    22c1:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    22ce:	00 00                	add    %al,(%rax)
    22d0:	68 15 18 00 01       	push   $0x1001815
    22d5:	8e 00                	mov    (%rax),%es
	...
    22df:	00 6f 15             	add    %ch,0x15(%rdi)
    22e2:	18 00                	sbb    %al,(%rax)
    22e4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    22ea:	00 00                	add    %al,(%rax)
    22ec:	00 00                	add    %al,(%rax)
    22ee:	00 00                	add    %al,(%rax)
    22f0:	76 15                	jbe    2307 <_locore_end+0x307>
    22f2:	18 00                	sbb    %al,(%rax)
    22f4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    22fa:	00 00                	add    %al,(%rax)
    22fc:	00 00                	add    %al,(%rax)
    22fe:	00 00                	add    %al,(%rax)
    2300:	7d 15                	jge    2317 <_locore_end+0x317>
    2302:	18 00                	sbb    %al,(%rax)
    2304:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    230a:	00 00                	add    %al,(%rax)
    230c:	00 00                	add    %al,(%rax)
    230e:	00 00                	add    %al,(%rax)
    2310:	84 15 18 00 01 8e    	test   %dl,-0x71feffe8(%rip)        # ffffffff8e01232e <CONFIG_LOAPIC_BASE_ADDRESS+0xfffffffe8f21232e>
	...
    231e:	00 00                	add    %al,(%rax)
    2320:	8b 15 18 00 01 8e    	mov    -0x71feffe8(%rip),%edx        # ffffffff8e01233e <CONFIG_LOAPIC_BASE_ADDRESS+0xfffffffe8f21233e>
	...
    232e:	00 00                	add    %al,(%rax)
    2330:	92                   	xchg   %eax,%edx
    2331:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    233e:	00 00                	add    %al,(%rax)
    2340:	99                   	cltd   
    2341:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    234e:	00 00                	add    %al,(%rax)
    2350:	a0 15 18 00 01 8e 00 	movabs 0x8e01001815,%al
    2357:	00 00 
    2359:	00 00                	add    %al,(%rax)
    235b:	00 00                	add    %al,(%rax)
    235d:	00 00                	add    %al,(%rax)
    235f:	00 a7 15 18 00 01    	add    %ah,0x1001815(%rdi)
    2365:	8e 00                	mov    (%rax),%es
	...
    236f:	00 ae 15 18 00 01    	add    %ch,0x1001815(%rsi)
    2375:	8e 00                	mov    (%rax),%es
	...
    237f:	00 b5 15 18 00 01    	add    %dh,0x1001815(%rbp)
    2385:	8e 00                	mov    (%rax),%es
	...
    238f:	00 bc 15 18 00 01 8e 	add    %bh,-0x71feffe8(%rbp,%rdx,1)
	...
    239e:	00 00                	add    %al,(%rax)
    23a0:	c3                   	ret    
    23a1:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    23ae:	00 00                	add    %al,(%rax)
    23b0:	ca 15 18             	lret   $0x1815
    23b3:	00 01                	add    %al,(%rcx)
    23b5:	8e 00                	mov    (%rax),%es
	...
    23bf:	00 d1                	add    %dl,%cl
    23c1:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    23ce:	00 00                	add    %al,(%rax)
    23d0:	d8 15 18 00 01 8e    	fcoms  -0x71feffe8(%rip)        # ffffffff8e0123ee <CONFIG_LOAPIC_BASE_ADDRESS+0xfffffffe8f2123ee>
	...
    23de:	00 00                	add    %al,(%rax)
    23e0:	df 15 18 00 01 8e    	fists  -0x71feffe8(%rip)        # ffffffff8e0123fe <CONFIG_LOAPIC_BASE_ADDRESS+0xfffffffe8f2123fe>
	...
    23ee:	00 00                	add    %al,(%rax)
    23f0:	e6 15                	out    %al,$0x15
    23f2:	18 00                	sbb    %al,(%rax)
    23f4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    23fa:	00 00                	add    %al,(%rax)
    23fc:	00 00                	add    %al,(%rax)
    23fe:	00 00                	add    %al,(%rax)
    2400:	ed                   	in     (%dx),%eax
    2401:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    240e:	00 00                	add    %al,(%rax)
    2410:	f4                   	hlt    
    2411:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    241e:	00 00                	add    %al,(%rax)
    2420:	fb                   	sti    
    2421:	15 18 00 01 8e       	adc    $0x8e010018,%eax
	...
    242e:	00 00                	add    %al,(%rax)
    2430:	02 16                	add    (%rsi),%dl
    2432:	18 00                	sbb    %al,(%rax)
    2434:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    243a:	00 00                	add    %al,(%rax)
    243c:	00 00                	add    %al,(%rax)
    243e:	00 00                	add    %al,(%rax)
    2440:	09 16                	or     %edx,(%rsi)
    2442:	18 00                	sbb    %al,(%rax)
    2444:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    244a:	00 00                	add    %al,(%rax)
    244c:	00 00                	add    %al,(%rax)
    244e:	00 00                	add    %al,(%rax)
    2450:	10 16                	adc    %dl,(%rsi)
    2452:	18 00                	sbb    %al,(%rax)
    2454:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    245a:	00 00                	add    %al,(%rax)
    245c:	00 00                	add    %al,(%rax)
    245e:	00 00                	add    %al,(%rax)
    2460:	17                   	(bad)  
    2461:	16                   	(bad)  
    2462:	18 00                	sbb    %al,(%rax)
    2464:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    246a:	00 00                	add    %al,(%rax)
    246c:	00 00                	add    %al,(%rax)
    246e:	00 00                	add    %al,(%rax)
    2470:	1e                   	(bad)  
    2471:	16                   	(bad)  
    2472:	18 00                	sbb    %al,(%rax)
    2474:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    247a:	00 00                	add    %al,(%rax)
    247c:	00 00                	add    %al,(%rax)
    247e:	00 00                	add    %al,(%rax)
    2480:	25 16 18 00 01       	and    $0x1001816,%eax
    2485:	8e 00                	mov    (%rax),%es
	...
    248f:	00 2c 16             	add    %ch,(%rsi,%rdx,1)
    2492:	18 00                	sbb    %al,(%rax)
    2494:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    249a:	00 00                	add    %al,(%rax)
    249c:	00 00                	add    %al,(%rax)
    249e:	00 00                	add    %al,(%rax)
    24a0:	33 16                	xor    (%rsi),%edx
    24a2:	18 00                	sbb    %al,(%rax)
    24a4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    24aa:	00 00                	add    %al,(%rax)
    24ac:	00 00                	add    %al,(%rax)
    24ae:	00 00                	add    %al,(%rax)
    24b0:	3a 16                	cmp    (%rsi),%dl
    24b2:	18 00                	sbb    %al,(%rax)
    24b4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    24ba:	00 00                	add    %al,(%rax)
    24bc:	00 00                	add    %al,(%rax)
    24be:	00 00                	add    %al,(%rax)
    24c0:	41 16                	rex.B (bad) 
    24c2:	18 00                	sbb    %al,(%rax)
    24c4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    24ca:	00 00                	add    %al,(%rax)
    24cc:	00 00                	add    %al,(%rax)
    24ce:	00 00                	add    %al,(%rax)
    24d0:	48 16                	rex.W (bad) 
    24d2:	18 00                	sbb    %al,(%rax)
    24d4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    24da:	00 00                	add    %al,(%rax)
    24dc:	00 00                	add    %al,(%rax)
    24de:	00 00                	add    %al,(%rax)
    24e0:	4f 16                	rex.WRXB (bad) 
    24e2:	18 00                	sbb    %al,(%rax)
    24e4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    24ea:	00 00                	add    %al,(%rax)
    24ec:	00 00                	add    %al,(%rax)
    24ee:	00 00                	add    %al,(%rax)
    24f0:	56                   	push   %rsi
    24f1:	16                   	(bad)  
    24f2:	18 00                	sbb    %al,(%rax)
    24f4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    24fa:	00 00                	add    %al,(%rax)
    24fc:	00 00                	add    %al,(%rax)
    24fe:	00 00                	add    %al,(%rax)
    2500:	5d                   	pop    %rbp
    2501:	16                   	(bad)  
    2502:	18 00                	sbb    %al,(%rax)
    2504:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    250a:	00 00                	add    %al,(%rax)
    250c:	00 00                	add    %al,(%rax)
    250e:	00 00                	add    %al,(%rax)
    2510:	64 16                	fs (bad) 
    2512:	18 00                	sbb    %al,(%rax)
    2514:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    251a:	00 00                	add    %al,(%rax)
    251c:	00 00                	add    %al,(%rax)
    251e:	00 00                	add    %al,(%rax)
    2520:	6b 16 18             	imul   $0x18,(%rsi),%edx
    2523:	00 01                	add    %al,(%rcx)
    2525:	8e 00                	mov    (%rax),%es
	...
    252f:	00 72 16             	add    %dh,0x16(%rdx)
    2532:	18 00                	sbb    %al,(%rax)
    2534:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    253a:	00 00                	add    %al,(%rax)
    253c:	00 00                	add    %al,(%rax)
    253e:	00 00                	add    %al,(%rax)
    2540:	79 16                	jns    2558 <_locore_end+0x558>
    2542:	18 00                	sbb    %al,(%rax)
    2544:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    254a:	00 00                	add    %al,(%rax)
    254c:	00 00                	add    %al,(%rax)
    254e:	00 00                	add    %al,(%rax)
    2550:	80 16 18             	adcb   $0x18,(%rsi)
    2553:	00 01                	add    %al,(%rcx)
    2555:	8e 00                	mov    (%rax),%es
	...
    255f:	00 87 16 18 00 01    	add    %al,0x1001816(%rdi)
    2565:	8e 00                	mov    (%rax),%es
	...
    256f:	00 8e 16 18 00 01    	add    %cl,0x1001816(%rsi)
    2575:	8e 00                	mov    (%rax),%es
	...
    257f:	00 95 16 18 00 01    	add    %dl,0x1001816(%rbp)
    2585:	8e 00                	mov    (%rax),%es
	...
    258f:	00 9c 16 18 00 01 8e 	add    %bl,-0x71feffe8(%rsi,%rdx,1)
	...
    259e:	00 00                	add    %al,(%rax)
    25a0:	a3 16 18 00 01 8e 00 	movabs %eax,0x8e01001816
    25a7:	00 00 
    25a9:	00 00                	add    %al,(%rax)
    25ab:	00 00                	add    %al,(%rax)
    25ad:	00 00                	add    %al,(%rax)
    25af:	00 aa 16 18 00 01    	add    %ch,0x1001816(%rdx)
    25b5:	8e 00                	mov    (%rax),%es
	...
    25bf:	00 b1 16 18 00 01    	add    %dh,0x1001816(%rcx)
    25c5:	8e 00                	mov    (%rax),%es
	...
    25cf:	00 b8 16 18 00 01    	add    %bh,0x1001816(%rax)
    25d5:	8e 00                	mov    (%rax),%es
	...
    25df:	00 bf 16 18 00 01    	add    %bh,0x1001816(%rdi)
    25e5:	8e 00                	mov    (%rax),%es
	...
    25ef:	00 c6                	add    %al,%dh
    25f1:	16                   	(bad)  
    25f2:	18 00                	sbb    %al,(%rax)
    25f4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    25fa:	00 00                	add    %al,(%rax)
    25fc:	00 00                	add    %al,(%rax)
    25fe:	00 00                	add    %al,(%rax)
    2600:	cd 16                	int    $0x16
    2602:	18 00                	sbb    %al,(%rax)
    2604:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    260a:	00 00                	add    %al,(%rax)
    260c:	00 00                	add    %al,(%rax)
    260e:	00 00                	add    %al,(%rax)
    2610:	d4                   	(bad)  
    2611:	16                   	(bad)  
    2612:	18 00                	sbb    %al,(%rax)
    2614:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    261a:	00 00                	add    %al,(%rax)
    261c:	00 00                	add    %al,(%rax)
    261e:	00 00                	add    %al,(%rax)
    2620:	db 16                	fistl  (%rsi)
    2622:	18 00                	sbb    %al,(%rax)
    2624:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    262a:	00 00                	add    %al,(%rax)
    262c:	00 00                	add    %al,(%rax)
    262e:	00 00                	add    %al,(%rax)
    2630:	e2 16                	loop   2648 <_locore_end+0x648>
    2632:	18 00                	sbb    %al,(%rax)
    2634:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    263a:	00 00                	add    %al,(%rax)
    263c:	00 00                	add    %al,(%rax)
    263e:	00 00                	add    %al,(%rax)
    2640:	e9 16 18 00 01       	jmp    1003e5b <CONFIG_KERNEL_VM_SIZE+0x803e5b>
    2645:	8e 00                	mov    (%rax),%es
	...
    264f:	00 f0                	add    %dh,%al
    2651:	16                   	(bad)  
    2652:	18 00                	sbb    %al,(%rax)
    2654:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    265a:	00 00                	add    %al,(%rax)
    265c:	00 00                	add    %al,(%rax)
    265e:	00 00                	add    %al,(%rax)
    2660:	f7 16                	notl   (%rsi)
    2662:	18 00                	sbb    %al,(%rax)
    2664:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    266a:	00 00                	add    %al,(%rax)
    266c:	00 00                	add    %al,(%rax)
    266e:	00 00                	add    %al,(%rax)
    2670:	fe                   	(bad)  
    2671:	16                   	(bad)  
    2672:	18 00                	sbb    %al,(%rax)
    2674:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    267a:	00 00                	add    %al,(%rax)
    267c:	00 00                	add    %al,(%rax)
    267e:	00 00                	add    %al,(%rax)
    2680:	05 17 18 00 01       	add    $0x1001817,%eax
    2685:	8e 00                	mov    (%rax),%es
	...
    268f:	00 0c 17             	add    %cl,(%rdi,%rdx,1)
    2692:	18 00                	sbb    %al,(%rax)
    2694:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    269a:	00 00                	add    %al,(%rax)
    269c:	00 00                	add    %al,(%rax)
    269e:	00 00                	add    %al,(%rax)
    26a0:	13 17                	adc    (%rdi),%edx
    26a2:	18 00                	sbb    %al,(%rax)
    26a4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    26aa:	00 00                	add    %al,(%rax)
    26ac:	00 00                	add    %al,(%rax)
    26ae:	00 00                	add    %al,(%rax)
    26b0:	1a 17                	sbb    (%rdi),%dl
    26b2:	18 00                	sbb    %al,(%rax)
    26b4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    26ba:	00 00                	add    %al,(%rax)
    26bc:	00 00                	add    %al,(%rax)
    26be:	00 00                	add    %al,(%rax)
    26c0:	21 17                	and    %edx,(%rdi)
    26c2:	18 00                	sbb    %al,(%rax)
    26c4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    26ca:	00 00                	add    %al,(%rax)
    26cc:	00 00                	add    %al,(%rax)
    26ce:	00 00                	add    %al,(%rax)
    26d0:	28 17                	sub    %dl,(%rdi)
    26d2:	18 00                	sbb    %al,(%rax)
    26d4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    26da:	00 00                	add    %al,(%rax)
    26dc:	00 00                	add    %al,(%rax)
    26de:	00 00                	add    %al,(%rax)
    26e0:	2f                   	(bad)  
    26e1:	17                   	(bad)  
    26e2:	18 00                	sbb    %al,(%rax)
    26e4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    26ea:	00 00                	add    %al,(%rax)
    26ec:	00 00                	add    %al,(%rax)
    26ee:	00 00                	add    %al,(%rax)
    26f0:	36 17                	ss (bad) 
    26f2:	18 00                	sbb    %al,(%rax)
    26f4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    26fa:	00 00                	add    %al,(%rax)
    26fc:	00 00                	add    %al,(%rax)
    26fe:	00 00                	add    %al,(%rax)
    2700:	3d 17 18 00 01       	cmp    $0x1001817,%eax
    2705:	8e 00                	mov    (%rax),%es
	...
    270f:	00 44 17 18          	add    %al,0x18(%rdi,%rdx,1)
    2713:	00 01                	add    %al,(%rcx)
    2715:	8e 00                	mov    (%rax),%es
	...
    271f:	00 4b 17             	add    %cl,0x17(%rbx)
    2722:	18 00                	sbb    %al,(%rax)
    2724:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    272a:	00 00                	add    %al,(%rax)
    272c:	00 00                	add    %al,(%rax)
    272e:	00 00                	add    %al,(%rax)
    2730:	52                   	push   %rdx
    2731:	17                   	(bad)  
    2732:	18 00                	sbb    %al,(%rax)
    2734:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    273a:	00 00                	add    %al,(%rax)
    273c:	00 00                	add    %al,(%rax)
    273e:	00 00                	add    %al,(%rax)
    2740:	59                   	pop    %rcx
    2741:	17                   	(bad)  
    2742:	18 00                	sbb    %al,(%rax)
    2744:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    274a:	00 00                	add    %al,(%rax)
    274c:	00 00                	add    %al,(%rax)
    274e:	00 00                	add    %al,(%rax)
    2750:	60                   	(bad)  
    2751:	17                   	(bad)  
    2752:	18 00                	sbb    %al,(%rax)
    2754:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    275a:	00 00                	add    %al,(%rax)
    275c:	00 00                	add    %al,(%rax)
    275e:	00 00                	add    %al,(%rax)
    2760:	67 17                	addr32 (bad) 
    2762:	18 00                	sbb    %al,(%rax)
    2764:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    276a:	00 00                	add    %al,(%rax)
    276c:	00 00                	add    %al,(%rax)
    276e:	00 00                	add    %al,(%rax)
    2770:	6e                   	outsb  %ds:(%rsi),(%dx)
    2771:	17                   	(bad)  
    2772:	18 00                	sbb    %al,(%rax)
    2774:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    277a:	00 00                	add    %al,(%rax)
    277c:	00 00                	add    %al,(%rax)
    277e:	00 00                	add    %al,(%rax)
    2780:	75 17                	jne    2799 <_locore_end+0x799>
    2782:	18 00                	sbb    %al,(%rax)
    2784:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    278a:	00 00                	add    %al,(%rax)
    278c:	00 00                	add    %al,(%rax)
    278e:	00 00                	add    %al,(%rax)
    2790:	7c 17                	jl     27a9 <_locore_end+0x7a9>
    2792:	18 00                	sbb    %al,(%rax)
    2794:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    279a:	00 00                	add    %al,(%rax)
    279c:	00 00                	add    %al,(%rax)
    279e:	00 00                	add    %al,(%rax)
    27a0:	83 17 18             	adcl   $0x18,(%rdi)
    27a3:	00 01                	add    %al,(%rcx)
    27a5:	8e 00                	mov    (%rax),%es
	...
    27af:	00 8a 17 18 00 01    	add    %cl,0x1001817(%rdx)
    27b5:	8e 00                	mov    (%rax),%es
	...
    27bf:	00 91 17 18 00 01    	add    %dl,0x1001817(%rcx)
    27c5:	8e 00                	mov    (%rax),%es
	...
    27cf:	00 98 17 18 00 01    	add    %bl,0x1001817(%rax)
    27d5:	8e 00                	mov    (%rax),%es
	...
    27df:	00 9f 17 18 00 01    	add    %bl,0x1001817(%rdi)
    27e5:	8e 00                	mov    (%rax),%es
	...
    27ef:	00 a6 17 18 00 01    	add    %ah,0x1001817(%rsi)
    27f5:	8e 00                	mov    (%rax),%es
	...
    27ff:	00 ad 17 18 00 01    	add    %ch,0x1001817(%rbp)
    2805:	8e 00                	mov    (%rax),%es
	...
    280f:	00 b4 17 18 00 01 8e 	add    %dh,-0x71feffe8(%rdi,%rdx,1)
	...
    281e:	00 00                	add    %al,(%rax)
    2820:	bb 17 18 00 01       	mov    $0x1001817,%ebx
    2825:	8e 00                	mov    (%rax),%es
	...
    282f:	00 c2                	add    %al,%dl
    2831:	17                   	(bad)  
    2832:	18 00                	sbb    %al,(%rax)
    2834:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    283a:	00 00                	add    %al,(%rax)
    283c:	00 00                	add    %al,(%rax)
    283e:	00 00                	add    %al,(%rax)
    2840:	c9                   	leave  
    2841:	17                   	(bad)  
    2842:	18 00                	sbb    %al,(%rax)
    2844:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    284a:	00 00                	add    %al,(%rax)
    284c:	00 00                	add    %al,(%rax)
    284e:	00 00                	add    %al,(%rax)
    2850:	d0 17                	rclb   (%rdi)
    2852:	18 00                	sbb    %al,(%rax)
    2854:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    285a:	00 00                	add    %al,(%rax)
    285c:	00 00                	add    %al,(%rax)
    285e:	00 00                	add    %al,(%rax)
    2860:	d7                   	xlat   %ds:(%rbx)
    2861:	17                   	(bad)  
    2862:	18 00                	sbb    %al,(%rax)
    2864:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    286a:	00 00                	add    %al,(%rax)
    286c:	00 00                	add    %al,(%rax)
    286e:	00 00                	add    %al,(%rax)
    2870:	de 17                	ficoms (%rdi)
    2872:	18 00                	sbb    %al,(%rax)
    2874:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    287a:	00 00                	add    %al,(%rax)
    287c:	00 00                	add    %al,(%rax)
    287e:	00 00                	add    %al,(%rax)
    2880:	e5 17                	in     $0x17,%eax
    2882:	18 00                	sbb    %al,(%rax)
    2884:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    288a:	00 00                	add    %al,(%rax)
    288c:	00 00                	add    %al,(%rax)
    288e:	00 00                	add    %al,(%rax)
    2890:	ec                   	in     (%dx),%al
    2891:	17                   	(bad)  
    2892:	18 00                	sbb    %al,(%rax)
    2894:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    289a:	00 00                	add    %al,(%rax)
    289c:	00 00                	add    %al,(%rax)
    289e:	00 00                	add    %al,(%rax)
    28a0:	f3 17                	repz (bad) 
    28a2:	18 00                	sbb    %al,(%rax)
    28a4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    28aa:	00 00                	add    %al,(%rax)
    28ac:	00 00                	add    %al,(%rax)
    28ae:	00 00                	add    %al,(%rax)
    28b0:	fa                   	cli    
    28b1:	17                   	(bad)  
    28b2:	18 00                	sbb    %al,(%rax)
    28b4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    28ba:	00 00                	add    %al,(%rax)
    28bc:	00 00                	add    %al,(%rax)
    28be:	00 00                	add    %al,(%rax)
    28c0:	01 18                	add    %ebx,(%rax)
    28c2:	18 00                	sbb    %al,(%rax)
    28c4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    28ca:	00 00                	add    %al,(%rax)
    28cc:	00 00                	add    %al,(%rax)
    28ce:	00 00                	add    %al,(%rax)
    28d0:	08 18                	or     %bl,(%rax)
    28d2:	18 00                	sbb    %al,(%rax)
    28d4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    28da:	00 00                	add    %al,(%rax)
    28dc:	00 00                	add    %al,(%rax)
    28de:	00 00                	add    %al,(%rax)
    28e0:	0f 18 18             	prefetcht2 (%rax)
    28e3:	00 01                	add    %al,(%rcx)
    28e5:	8e 00                	mov    (%rax),%es
	...
    28ef:	00 16                	add    %dl,(%rsi)
    28f1:	18 18                	sbb    %bl,(%rax)
    28f3:	00 01                	add    %al,(%rcx)
    28f5:	8e 00                	mov    (%rax),%es
	...
    28ff:	00 1d 18 18 00 01    	add    %bl,0x1001818(%rip)        # 100411d <CONFIG_KERNEL_VM_SIZE+0x80411d>
    2905:	8e 00                	mov    (%rax),%es
	...
    290f:	00 24 18             	add    %ah,(%rax,%rbx,1)
    2912:	18 00                	sbb    %al,(%rax)
    2914:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    291a:	00 00                	add    %al,(%rax)
    291c:	00 00                	add    %al,(%rax)
    291e:	00 00                	add    %al,(%rax)
    2920:	2b 18                	sub    (%rax),%ebx
    2922:	18 00                	sbb    %al,(%rax)
    2924:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    292a:	00 00                	add    %al,(%rax)
    292c:	00 00                	add    %al,(%rax)
    292e:	00 00                	add    %al,(%rax)
    2930:	32 18                	xor    (%rax),%bl
    2932:	18 00                	sbb    %al,(%rax)
    2934:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    293a:	00 00                	add    %al,(%rax)
    293c:	00 00                	add    %al,(%rax)
    293e:	00 00                	add    %al,(%rax)
    2940:	39 18                	cmp    %ebx,(%rax)
    2942:	18 00                	sbb    %al,(%rax)
    2944:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    294a:	00 00                	add    %al,(%rax)
    294c:	00 00                	add    %al,(%rax)
    294e:	00 00                	add    %al,(%rax)
    2950:	40 18 18             	rex sbb %bl,(%rax)
    2953:	00 01                	add    %al,(%rcx)
    2955:	8e 00                	mov    (%rax),%es
	...
    295f:	00 47 18             	add    %al,0x18(%rdi)
    2962:	18 00                	sbb    %al,(%rax)
    2964:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    296a:	00 00                	add    %al,(%rax)
    296c:	00 00                	add    %al,(%rax)
    296e:	00 00                	add    %al,(%rax)
    2970:	4e 18 18             	rex.WRX sbb %r11b,(%rax)
    2973:	00 01                	add    %al,(%rcx)
    2975:	8e 00                	mov    (%rax),%es
	...
    297f:	00 55 18             	add    %dl,0x18(%rbp)
    2982:	18 00                	sbb    %al,(%rax)
    2984:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    298a:	00 00                	add    %al,(%rax)
    298c:	00 00                	add    %al,(%rax)
    298e:	00 00                	add    %al,(%rax)
    2990:	5c                   	pop    %rsp
    2991:	18 18                	sbb    %bl,(%rax)
    2993:	00 01                	add    %al,(%rcx)
    2995:	8e 00                	mov    (%rax),%es
	...
    299f:	00 63 18             	add    %ah,0x18(%rbx)
    29a2:	18 00                	sbb    %al,(%rax)
    29a4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    29aa:	00 00                	add    %al,(%rax)
    29ac:	00 00                	add    %al,(%rax)
    29ae:	00 00                	add    %al,(%rax)
    29b0:	6a 18                	push   $0x18
    29b2:	18 00                	sbb    %al,(%rax)
    29b4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    29ba:	00 00                	add    %al,(%rax)
    29bc:	00 00                	add    %al,(%rax)
    29be:	00 00                	add    %al,(%rax)
    29c0:	71 18                	jno    29da <_locore_end+0x9da>
    29c2:	18 00                	sbb    %al,(%rax)
    29c4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    29ca:	00 00                	add    %al,(%rax)
    29cc:	00 00                	add    %al,(%rax)
    29ce:	00 00                	add    %al,(%rax)
    29d0:	78 18                	js     29ea <_locore_end+0x9ea>
    29d2:	18 00                	sbb    %al,(%rax)
    29d4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    29da:	00 00                	add    %al,(%rax)
    29dc:	00 00                	add    %al,(%rax)
    29de:	00 00                	add    %al,(%rax)
    29e0:	7f 18                	jg     29fa <_locore_end+0x9fa>
    29e2:	18 00                	sbb    %al,(%rax)
    29e4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    29ea:	00 00                	add    %al,(%rax)
    29ec:	00 00                	add    %al,(%rax)
    29ee:	00 00                	add    %al,(%rax)
    29f0:	86 18                	xchg   %bl,(%rax)
    29f2:	18 00                	sbb    %al,(%rax)
    29f4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    29fa:	00 00                	add    %al,(%rax)
    29fc:	00 00                	add    %al,(%rax)
    29fe:	00 00                	add    %al,(%rax)
    2a00:	8d 18                	lea    (%rax),%ebx
    2a02:	18 00                	sbb    %al,(%rax)
    2a04:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2a0a:	00 00                	add    %al,(%rax)
    2a0c:	00 00                	add    %al,(%rax)
    2a0e:	00 00                	add    %al,(%rax)
    2a10:	97                   	xchg   %eax,%edi
    2a11:	18 18                	sbb    %bl,(%rax)
    2a13:	00 01                	add    %al,(%rcx)
    2a15:	8e 00                	mov    (%rax),%es
	...
    2a1f:	00 a1 18 18 00 01    	add    %ah,0x1001818(%rcx)
    2a25:	8e 00                	mov    (%rax),%es
	...
    2a2f:	00 ab 18 18 00 01    	add    %ch,0x1001818(%rbx)
    2a35:	8e 00                	mov    (%rax),%es
	...
    2a3f:	00 b5 18 18 00 01    	add    %dh,0x1001818(%rbp)
    2a45:	8e 00                	mov    (%rax),%es
	...
    2a4f:	00 bf 18 18 00 01    	add    %bh,0x1001818(%rdi)
    2a55:	8e 00                	mov    (%rax),%es
	...
    2a5f:	00 c9                	add    %cl,%cl
    2a61:	18 18                	sbb    %bl,(%rax)
    2a63:	00 01                	add    %al,(%rcx)
    2a65:	8e 00                	mov    (%rax),%es
	...
    2a6f:	00 d3                	add    %dl,%bl
    2a71:	18 18                	sbb    %bl,(%rax)
    2a73:	00 01                	add    %al,(%rcx)
    2a75:	8e 00                	mov    (%rax),%es
	...
    2a7f:	00 dd                	add    %bl,%ch
    2a81:	18 18                	sbb    %bl,(%rax)
    2a83:	00 01                	add    %al,(%rcx)
    2a85:	8e 00                	mov    (%rax),%es
	...
    2a8f:	00 e7                	add    %ah,%bh
    2a91:	18 18                	sbb    %bl,(%rax)
    2a93:	00 01                	add    %al,(%rcx)
    2a95:	8e 00                	mov    (%rax),%es
	...
    2a9f:	00 f1                	add    %dh,%cl
    2aa1:	18 18                	sbb    %bl,(%rax)
    2aa3:	00 01                	add    %al,(%rcx)
    2aa5:	8e 00                	mov    (%rax),%es
	...
    2aaf:	00 fb                	add    %bh,%bl
    2ab1:	18 18                	sbb    %bl,(%rax)
    2ab3:	00 01                	add    %al,(%rcx)
    2ab5:	8e 00                	mov    (%rax),%es
	...
    2abf:	00 05 19 18 00 01    	add    %al,0x1001819(%rip)        # 10042de <CONFIG_KERNEL_VM_SIZE+0x8042de>
    2ac5:	8e 00                	mov    (%rax),%es
	...
    2acf:	00 0f                	add    %cl,(%rdi)
    2ad1:	19 18                	sbb    %ebx,(%rax)
    2ad3:	00 01                	add    %al,(%rcx)
    2ad5:	8e 00                	mov    (%rax),%es
	...
    2adf:	00 19                	add    %bl,(%rcx)
    2ae1:	19 18                	sbb    %ebx,(%rax)
    2ae3:	00 01                	add    %al,(%rcx)
    2ae5:	8e 00                	mov    (%rax),%es
	...
    2aef:	00 23                	add    %ah,(%rbx)
    2af1:	19 18                	sbb    %ebx,(%rax)
    2af3:	00 01                	add    %al,(%rcx)
    2af5:	8e 00                	mov    (%rax),%es
	...
    2aff:	00 2d 19 18 00 01    	add    %ch,0x1001819(%rip)        # 100431e <CONFIG_KERNEL_VM_SIZE+0x80431e>
    2b05:	8e 00                	mov    (%rax),%es
	...
    2b0f:	00 37                	add    %dh,(%rdi)
    2b11:	19 18                	sbb    %ebx,(%rax)
    2b13:	00 01                	add    %al,(%rcx)
    2b15:	8e 00                	mov    (%rax),%es
	...
    2b1f:	00 41 19             	add    %al,0x19(%rcx)
    2b22:	18 00                	sbb    %al,(%rax)
    2b24:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2b2a:	00 00                	add    %al,(%rax)
    2b2c:	00 00                	add    %al,(%rax)
    2b2e:	00 00                	add    %al,(%rax)
    2b30:	4b 19 18             	rex.WXB sbb %rbx,(%r8)
    2b33:	00 01                	add    %al,(%rcx)
    2b35:	8e 00                	mov    (%rax),%es
	...
    2b3f:	00 55 19             	add    %dl,0x19(%rbp)
    2b42:	18 00                	sbb    %al,(%rax)
    2b44:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2b4a:	00 00                	add    %al,(%rax)
    2b4c:	00 00                	add    %al,(%rax)
    2b4e:	00 00                	add    %al,(%rax)
    2b50:	5f                   	pop    %rdi
    2b51:	19 18                	sbb    %ebx,(%rax)
    2b53:	00 01                	add    %al,(%rcx)
    2b55:	8e 00                	mov    (%rax),%es
	...
    2b5f:	00 69 19             	add    %ch,0x19(%rcx)
    2b62:	18 00                	sbb    %al,(%rax)
    2b64:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2b6a:	00 00                	add    %al,(%rax)
    2b6c:	00 00                	add    %al,(%rax)
    2b6e:	00 00                	add    %al,(%rax)
    2b70:	73 19                	jae    2b8b <_locore_end+0xb8b>
    2b72:	18 00                	sbb    %al,(%rax)
    2b74:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2b7a:	00 00                	add    %al,(%rax)
    2b7c:	00 00                	add    %al,(%rax)
    2b7e:	00 00                	add    %al,(%rax)
    2b80:	7d 19                	jge    2b9b <_locore_end+0xb9b>
    2b82:	18 00                	sbb    %al,(%rax)
    2b84:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2b8a:	00 00                	add    %al,(%rax)
    2b8c:	00 00                	add    %al,(%rax)
    2b8e:	00 00                	add    %al,(%rax)
    2b90:	87 19                	xchg   %ebx,(%rcx)
    2b92:	18 00                	sbb    %al,(%rax)
    2b94:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2b9a:	00 00                	add    %al,(%rax)
    2b9c:	00 00                	add    %al,(%rax)
    2b9e:	00 00                	add    %al,(%rax)
    2ba0:	91                   	xchg   %eax,%ecx
    2ba1:	19 18                	sbb    %ebx,(%rax)
    2ba3:	00 01                	add    %al,(%rcx)
    2ba5:	8e 00                	mov    (%rax),%es
	...
    2baf:	00 9b 19 18 00 01    	add    %bl,0x1001819(%rbx)
    2bb5:	8e 00                	mov    (%rax),%es
	...
    2bbf:	00 a5 19 18 00 01    	add    %ah,0x1001819(%rbp)
    2bc5:	8e 00                	mov    (%rax),%es
	...
    2bcf:	00 af 19 18 00 01    	add    %ch,0x1001819(%rdi)
    2bd5:	8e 00                	mov    (%rax),%es
	...
    2bdf:	00 b9 19 18 00 01    	add    %bh,0x1001819(%rcx)
    2be5:	8e 00                	mov    (%rax),%es
	...
    2bef:	00 c3                	add    %al,%bl
    2bf1:	19 18                	sbb    %ebx,(%rax)
    2bf3:	00 01                	add    %al,(%rcx)
    2bf5:	8e 00                	mov    (%rax),%es
	...
    2bff:	00 cd                	add    %cl,%ch
    2c01:	19 18                	sbb    %ebx,(%rax)
    2c03:	00 01                	add    %al,(%rcx)
    2c05:	8e 00                	mov    (%rax),%es
	...
    2c0f:	00 d7                	add    %dl,%bh
    2c11:	19 18                	sbb    %ebx,(%rax)
    2c13:	00 01                	add    %al,(%rcx)
    2c15:	8e 00                	mov    (%rax),%es
	...
    2c1f:	00 e1                	add    %ah,%cl
    2c21:	19 18                	sbb    %ebx,(%rax)
    2c23:	00 01                	add    %al,(%rcx)
    2c25:	8e 00                	mov    (%rax),%es
	...
    2c2f:	00 eb                	add    %ch,%bl
    2c31:	19 18                	sbb    %ebx,(%rax)
    2c33:	00 01                	add    %al,(%rcx)
    2c35:	8e 00                	mov    (%rax),%es
	...
    2c3f:	00 f5                	add    %dh,%ch
    2c41:	19 18                	sbb    %ebx,(%rax)
    2c43:	00 01                	add    %al,(%rcx)
    2c45:	8e 00                	mov    (%rax),%es
	...
    2c4f:	00 ff                	add    %bh,%bh
    2c51:	19 18                	sbb    %ebx,(%rax)
    2c53:	00 01                	add    %al,(%rcx)
    2c55:	8e 00                	mov    (%rax),%es
	...
    2c5f:	00 09                	add    %cl,(%rcx)
    2c61:	1a 18                	sbb    (%rax),%bl
    2c63:	00 01                	add    %al,(%rcx)
    2c65:	8e 00                	mov    (%rax),%es
	...
    2c6f:	00 13                	add    %dl,(%rbx)
    2c71:	1a 18                	sbb    (%rax),%bl
    2c73:	00 01                	add    %al,(%rcx)
    2c75:	8e 00                	mov    (%rax),%es
	...
    2c7f:	00 1d 1a 18 00 01    	add    %bl,0x100181a(%rip)        # 100449f <CONFIG_KERNEL_VM_SIZE+0x80449f>
    2c85:	8e 00                	mov    (%rax),%es
	...
    2c8f:	00 27                	add    %ah,(%rdi)
    2c91:	1a 18                	sbb    (%rax),%bl
    2c93:	00 01                	add    %al,(%rcx)
    2c95:	8e 00                	mov    (%rax),%es
	...
    2c9f:	00 31                	add    %dh,(%rcx)
    2ca1:	1a 18                	sbb    (%rax),%bl
    2ca3:	00 01                	add    %al,(%rcx)
    2ca5:	8e 00                	mov    (%rax),%es
	...
    2caf:	00 3b                	add    %bh,(%rbx)
    2cb1:	1a 18                	sbb    (%rax),%bl
    2cb3:	00 01                	add    %al,(%rcx)
    2cb5:	8e 00                	mov    (%rax),%es
	...
    2cbf:	00 45 1a             	add    %al,0x1a(%rbp)
    2cc2:	18 00                	sbb    %al,(%rax)
    2cc4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2cca:	00 00                	add    %al,(%rax)
    2ccc:	00 00                	add    %al,(%rax)
    2cce:	00 00                	add    %al,(%rax)
    2cd0:	4f 1a 18             	rex.WRXB sbb (%r8),%r11b
    2cd3:	00 01                	add    %al,(%rcx)
    2cd5:	8e 00                	mov    (%rax),%es
	...
    2cdf:	00 59 1a             	add    %bl,0x1a(%rcx)
    2ce2:	18 00                	sbb    %al,(%rax)
    2ce4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2cea:	00 00                	add    %al,(%rax)
    2cec:	00 00                	add    %al,(%rax)
    2cee:	00 00                	add    %al,(%rax)
    2cf0:	63 1a                	movsxd (%rdx),%ebx
    2cf2:	18 00                	sbb    %al,(%rax)
    2cf4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2cfa:	00 00                	add    %al,(%rax)
    2cfc:	00 00                	add    %al,(%rax)
    2cfe:	00 00                	add    %al,(%rax)
    2d00:	6d                   	insl   (%dx),%es:(%rdi)
    2d01:	1a 18                	sbb    (%rax),%bl
    2d03:	00 01                	add    %al,(%rcx)
    2d05:	8e 00                	mov    (%rax),%es
	...
    2d0f:	00 77 1a             	add    %dh,0x1a(%rdi)
    2d12:	18 00                	sbb    %al,(%rax)
    2d14:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2d1a:	00 00                	add    %al,(%rax)
    2d1c:	00 00                	add    %al,(%rax)
    2d1e:	00 00                	add    %al,(%rax)
    2d20:	81 1a 18 00 01 8e    	sbbl   $0x8e010018,(%rdx)
	...
    2d2e:	00 00                	add    %al,(%rax)
    2d30:	8b 1a                	mov    (%rdx),%ebx
    2d32:	18 00                	sbb    %al,(%rax)
    2d34:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2d3a:	00 00                	add    %al,(%rax)
    2d3c:	00 00                	add    %al,(%rax)
    2d3e:	00 00                	add    %al,(%rax)
    2d40:	95                   	xchg   %eax,%ebp
    2d41:	1a 18                	sbb    (%rax),%bl
    2d43:	00 01                	add    %al,(%rcx)
    2d45:	8e 00                	mov    (%rax),%es
	...
    2d4f:	00 9f 1a 18 00 01    	add    %bl,0x100181a(%rdi)
    2d55:	8e 00                	mov    (%rax),%es
	...
    2d5f:	00 a9 1a 18 00 01    	add    %ch,0x100181a(%rcx)
    2d65:	8e 00                	mov    (%rax),%es
	...
    2d6f:	00 b3 1a 18 00 01    	add    %dh,0x100181a(%rbx)
    2d75:	8e 00                	mov    (%rax),%es
	...
    2d7f:	00 bd 1a 18 00 01    	add    %bh,0x100181a(%rbp)
    2d85:	8e 00                	mov    (%rax),%es
	...
    2d8f:	00 c7                	add    %al,%bh
    2d91:	1a 18                	sbb    (%rax),%bl
    2d93:	00 01                	add    %al,(%rcx)
    2d95:	8e 00                	mov    (%rax),%es
	...
    2d9f:	00 d1                	add    %dl,%cl
    2da1:	1a 18                	sbb    (%rax),%bl
    2da3:	00 01                	add    %al,(%rcx)
    2da5:	8e 00                	mov    (%rax),%es
	...
    2daf:	00 db                	add    %bl,%bl
    2db1:	1a 18                	sbb    (%rax),%bl
    2db3:	00 01                	add    %al,(%rcx)
    2db5:	8e 00                	mov    (%rax),%es
	...
    2dbf:	00 e5                	add    %ah,%ch
    2dc1:	1a 18                	sbb    (%rax),%bl
    2dc3:	00 01                	add    %al,(%rcx)
    2dc5:	8e 00                	mov    (%rax),%es
	...
    2dcf:	00 ef                	add    %ch,%bh
    2dd1:	1a 18                	sbb    (%rax),%bl
    2dd3:	00 01                	add    %al,(%rcx)
    2dd5:	8e 00                	mov    (%rax),%es
	...
    2ddf:	00 f9                	add    %bh,%cl
    2de1:	1a 18                	sbb    (%rax),%bl
    2de3:	00 01                	add    %al,(%rcx)
    2de5:	8e 00                	mov    (%rax),%es
	...
    2def:	00 03                	add    %al,(%rbx)
    2df1:	1b 18                	sbb    (%rax),%ebx
    2df3:	00 01                	add    %al,(%rcx)
    2df5:	8e 00                	mov    (%rax),%es
	...
    2dff:	00 0d 1b 18 00 01    	add    %cl,0x100181b(%rip)        # 1004620 <CONFIG_KERNEL_VM_SIZE+0x804620>
    2e05:	8e 00                	mov    (%rax),%es
	...
    2e0f:	00 17                	add    %dl,(%rdi)
    2e11:	1b 18                	sbb    (%rax),%ebx
    2e13:	00 01                	add    %al,(%rcx)
    2e15:	8e 00                	mov    (%rax),%es
	...
    2e1f:	00 21                	add    %ah,(%rcx)
    2e21:	1b 18                	sbb    (%rax),%ebx
    2e23:	00 01                	add    %al,(%rcx)
    2e25:	8e 00                	mov    (%rax),%es
	...
    2e2f:	00 2b                	add    %ch,(%rbx)
    2e31:	1b 18                	sbb    (%rax),%ebx
    2e33:	00 01                	add    %al,(%rcx)
    2e35:	8e 00                	mov    (%rax),%es
	...
    2e3f:	00 35 1b 18 00 01    	add    %dh,0x100181b(%rip)        # 1004660 <CONFIG_KERNEL_VM_SIZE+0x804660>
    2e45:	8e 00                	mov    (%rax),%es
	...
    2e4f:	00 3f                	add    %bh,(%rdi)
    2e51:	1b 18                	sbb    (%rax),%ebx
    2e53:	00 01                	add    %al,(%rcx)
    2e55:	8e 00                	mov    (%rax),%es
	...
    2e5f:	00 49 1b             	add    %cl,0x1b(%rcx)
    2e62:	18 00                	sbb    %al,(%rax)
    2e64:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2e6a:	00 00                	add    %al,(%rax)
    2e6c:	00 00                	add    %al,(%rax)
    2e6e:	00 00                	add    %al,(%rax)
    2e70:	53                   	push   %rbx
    2e71:	1b 18                	sbb    (%rax),%ebx
    2e73:	00 01                	add    %al,(%rcx)
    2e75:	8e 00                	mov    (%rax),%es
	...
    2e7f:	00 5d 1b             	add    %bl,0x1b(%rbp)
    2e82:	18 00                	sbb    %al,(%rax)
    2e84:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2e8a:	00 00                	add    %al,(%rax)
    2e8c:	00 00                	add    %al,(%rax)
    2e8e:	00 00                	add    %al,(%rax)
    2e90:	67 1b 18             	sbb    (%eax),%ebx
    2e93:	00 01                	add    %al,(%rcx)
    2e95:	8e 00                	mov    (%rax),%es
	...
    2e9f:	00 71 1b             	add    %dh,0x1b(%rcx)
    2ea2:	18 00                	sbb    %al,(%rax)
    2ea4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2eaa:	00 00                	add    %al,(%rax)
    2eac:	00 00                	add    %al,(%rax)
    2eae:	00 00                	add    %al,(%rax)
    2eb0:	7b 1b                	jnp    2ecd <_locore_end+0xecd>
    2eb2:	18 00                	sbb    %al,(%rax)
    2eb4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2eba:	00 00                	add    %al,(%rax)
    2ebc:	00 00                	add    %al,(%rax)
    2ebe:	00 00                	add    %al,(%rax)
    2ec0:	85 1b                	test   %ebx,(%rbx)
    2ec2:	18 00                	sbb    %al,(%rax)
    2ec4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2eca:	00 00                	add    %al,(%rax)
    2ecc:	00 00                	add    %al,(%rax)
    2ece:	00 00                	add    %al,(%rax)
    2ed0:	8f                   	(bad)  
    2ed1:	1b 18                	sbb    (%rax),%ebx
    2ed3:	00 01                	add    %al,(%rcx)
    2ed5:	8e 00                	mov    (%rax),%es
	...
    2edf:	00 99 1b 18 00 01    	add    %bl,0x100181b(%rcx)
    2ee5:	8e 00                	mov    (%rax),%es
	...
    2eef:	00 a3 1b 18 00 01    	add    %ah,0x100181b(%rbx)
    2ef5:	8e 00                	mov    (%rax),%es
	...
    2eff:	00 ad 1b 18 00 01    	add    %ch,0x100181b(%rbp)
    2f05:	8e 00                	mov    (%rax),%es
	...
    2f0f:	00 b7 1b 18 00 01    	add    %dh,0x100181b(%rdi)
    2f15:	8e 00                	mov    (%rax),%es
	...
    2f1f:	00 c1                	add    %al,%cl
    2f21:	1b 18                	sbb    (%rax),%ebx
    2f23:	00 01                	add    %al,(%rcx)
    2f25:	8e 00                	mov    (%rax),%es
	...
    2f2f:	00 cb                	add    %cl,%bl
    2f31:	1b 18                	sbb    (%rax),%ebx
    2f33:	00 01                	add    %al,(%rcx)
    2f35:	8e 00                	mov    (%rax),%es
	...
    2f3f:	00 d5                	add    %dl,%ch
    2f41:	1b 18                	sbb    (%rax),%ebx
    2f43:	00 01                	add    %al,(%rcx)
    2f45:	8e 00                	mov    (%rax),%es
	...
    2f4f:	00 df                	add    %bl,%bh
    2f51:	1b 18                	sbb    (%rax),%ebx
    2f53:	00 01                	add    %al,(%rcx)
    2f55:	8e 00                	mov    (%rax),%es
	...
    2f5f:	00 e9                	add    %ch,%cl
    2f61:	1b 18                	sbb    (%rax),%ebx
    2f63:	00 01                	add    %al,(%rcx)
    2f65:	8e 00                	mov    (%rax),%es
	...
    2f6f:	00 f3                	add    %dh,%bl
    2f71:	1b 18                	sbb    (%rax),%ebx
    2f73:	00 01                	add    %al,(%rcx)
    2f75:	8e 00                	mov    (%rax),%es
	...
    2f7f:	00 fd                	add    %bh,%ch
    2f81:	1b 18                	sbb    (%rax),%ebx
    2f83:	00 01                	add    %al,(%rcx)
    2f85:	8e 00                	mov    (%rax),%es
	...
    2f8f:	00 07                	add    %al,(%rdi)
    2f91:	1c 18                	sbb    $0x18,%al
    2f93:	00 01                	add    %al,(%rcx)
    2f95:	8e 00                	mov    (%rax),%es
	...
    2f9f:	00 11                	add    %dl,(%rcx)
    2fa1:	1c 18                	sbb    $0x18,%al
    2fa3:	00 01                	add    %al,(%rcx)
    2fa5:	8e 00                	mov    (%rax),%es
	...
    2faf:	00 1b                	add    %bl,(%rbx)
    2fb1:	1c 18                	sbb    $0x18,%al
    2fb3:	00 01                	add    %al,(%rcx)
    2fb5:	8e 00                	mov    (%rax),%es
	...
    2fbf:	00 25 1c 18 00 01    	add    %ah,0x100181c(%rip)        # 10047e1 <CONFIG_KERNEL_VM_SIZE+0x8047e1>
    2fc5:	8e 00                	mov    (%rax),%es
	...
    2fcf:	00 2f                	add    %ch,(%rdi)
    2fd1:	1c 18                	sbb    $0x18,%al
    2fd3:	00 01                	add    %al,(%rcx)
    2fd5:	8e 00                	mov    (%rax),%es
	...
    2fdf:	00 39                	add    %bh,(%rcx)
    2fe1:	1c 18                	sbb    $0x18,%al
    2fe3:	00 01                	add    %al,(%rcx)
    2fe5:	8e 00                	mov    (%rax),%es
	...
    2fef:	00 43 1c             	add    %al,0x1c(%rbx)
    2ff2:	18 00                	sbb    %al,(%rax)
    2ff4:	01 8e 00 00 00 00    	add    %ecx,0x0(%rsi)
    2ffa:	00 00                	add    %al,(%rax)
    2ffc:	00 00                	add    %al,(%rax)
	...

0000000000003000 <idt48>:
    3000:	ff 0f                	decl   (%rdi)
    3002:	00 20                	add    %ah,(%rax)
	...

0000000000003006 <idt80>:
    3006:	ff 0f                	decl   (%rdi)
    3008:	00 20                	add    %ah,(%rax)
    300a:	00 00                	add    %al,(%rax)
    300c:	00 00                	add    %al,(%rax)
    300e:	00 00                	add    %al,(%rax)
    3010:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3017:	00 00 00 
    301a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3021:	00 00 00 
    3024:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    302b:	00 00 00 
    302e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3035:	00 00 00 
    3038:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    303f:	00 00 00 
    3042:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3049:	00 00 00 
    304c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3053:	00 00 00 
    3056:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    305d:	00 00 00 
    3060:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3067:	00 00 00 
    306a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3071:	00 00 00 
    3074:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    307b:	00 00 00 
    307e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3085:	00 00 00 
    3088:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    308f:	00 00 00 
    3092:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3099:	00 00 00 
    309c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    30a3:	00 00 00 
    30a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    30ad:	00 00 00 
    30b0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    30b7:	00 00 00 
    30ba:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    30c1:	00 00 00 
    30c4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    30cb:	00 00 00 
    30ce:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    30d5:	00 00 00 
    30d8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    30df:	00 00 00 
    30e2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    30e9:	00 00 00 
    30ec:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    30f3:	00 00 00 
    30f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    30fd:	00 00 00 
    3100:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3107:	00 00 00 
    310a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3111:	00 00 00 
    3114:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    311b:	00 00 00 
    311e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3125:	00 00 00 
    3128:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    312f:	00 00 00 
    3132:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3139:	00 00 00 
    313c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3143:	00 00 00 
    3146:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    314d:	00 00 00 
    3150:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3157:	00 00 00 
    315a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3161:	00 00 00 
    3164:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    316b:	00 00 00 
    316e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3175:	00 00 00 
    3178:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    317f:	00 00 00 
    3182:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3189:	00 00 00 
    318c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3193:	00 00 00 
    3196:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    319d:	00 00 00 
    31a0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    31a7:	00 00 00 
    31aa:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    31b1:	00 00 00 
    31b4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    31bb:	00 00 00 
    31be:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    31c5:	00 00 00 
    31c8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    31cf:	00 00 00 
    31d2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    31d9:	00 00 00 
    31dc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    31e3:	00 00 00 
    31e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    31ed:	00 00 00 
    31f0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    31f7:	00 00 00 
    31fa:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3201:	00 00 00 
    3204:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    320b:	00 00 00 
    320e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3215:	00 00 00 
    3218:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    321f:	00 00 00 
    3222:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3229:	00 00 00 
    322c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3233:	00 00 00 
    3236:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    323d:	00 00 00 
    3240:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3247:	00 00 00 
    324a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3251:	00 00 00 
    3254:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    325b:	00 00 00 
    325e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3265:	00 00 00 
    3268:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    326f:	00 00 00 
    3272:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3279:	00 00 00 
    327c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3283:	00 00 00 
    3286:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    328d:	00 00 00 
    3290:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3297:	00 00 00 
    329a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    32a1:	00 00 00 
    32a4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    32ab:	00 00 00 
    32ae:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    32b5:	00 00 00 
    32b8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    32bf:	00 00 00 
    32c2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    32c9:	00 00 00 
    32cc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    32d3:	00 00 00 
    32d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    32dd:	00 00 00 
    32e0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    32e7:	00 00 00 
    32ea:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    32f1:	00 00 00 
    32f4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    32fb:	00 00 00 
    32fe:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3305:	00 00 00 
    3308:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    330f:	00 00 00 
    3312:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3319:	00 00 00 
    331c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3323:	00 00 00 
    3326:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    332d:	00 00 00 
    3330:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3337:	00 00 00 
    333a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3341:	00 00 00 
    3344:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    334b:	00 00 00 
    334e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3355:	00 00 00 
    3358:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    335f:	00 00 00 
    3362:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3369:	00 00 00 
    336c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3373:	00 00 00 
    3376:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    337d:	00 00 00 
    3380:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3387:	00 00 00 
    338a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3391:	00 00 00 
    3394:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    339b:	00 00 00 
    339e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    33a5:	00 00 00 
    33a8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    33af:	00 00 00 
    33b2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    33b9:	00 00 00 
    33bc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    33c3:	00 00 00 
    33c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    33cd:	00 00 00 
    33d0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    33d7:	00 00 00 
    33da:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    33e1:	00 00 00 
    33e4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    33eb:	00 00 00 
    33ee:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    33f5:	00 00 00 
    33f8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    33ff:	00 00 00 
    3402:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3409:	00 00 00 
    340c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3413:	00 00 00 
    3416:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    341d:	00 00 00 
    3420:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3427:	00 00 00 
    342a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3431:	00 00 00 
    3434:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    343b:	00 00 00 
    343e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3445:	00 00 00 
    3448:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    344f:	00 00 00 
    3452:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3459:	00 00 00 
    345c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3463:	00 00 00 
    3466:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    346d:	00 00 00 
    3470:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3477:	00 00 00 
    347a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3481:	00 00 00 
    3484:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    348b:	00 00 00 
    348e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3495:	00 00 00 
    3498:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    349f:	00 00 00 
    34a2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    34a9:	00 00 00 
    34ac:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    34b3:	00 00 00 
    34b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    34bd:	00 00 00 
    34c0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    34c7:	00 00 00 
    34ca:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    34d1:	00 00 00 
    34d4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    34db:	00 00 00 
    34de:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    34e5:	00 00 00 
    34e8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    34ef:	00 00 00 
    34f2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    34f9:	00 00 00 
    34fc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3503:	00 00 00 
    3506:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    350d:	00 00 00 
    3510:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3517:	00 00 00 
    351a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3521:	00 00 00 
    3524:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    352b:	00 00 00 
    352e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3535:	00 00 00 
    3538:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    353f:	00 00 00 
    3542:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3549:	00 00 00 
    354c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3553:	00 00 00 
    3556:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    355d:	00 00 00 
    3560:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3567:	00 00 00 
    356a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3571:	00 00 00 
    3574:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    357b:	00 00 00 
    357e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3585:	00 00 00 
    3588:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    358f:	00 00 00 
    3592:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3599:	00 00 00 
    359c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    35a3:	00 00 00 
    35a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    35ad:	00 00 00 
    35b0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    35b7:	00 00 00 
    35ba:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    35c1:	00 00 00 
    35c4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    35cb:	00 00 00 
    35ce:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    35d5:	00 00 00 
    35d8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    35df:	00 00 00 
    35e2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    35e9:	00 00 00 
    35ec:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    35f3:	00 00 00 
    35f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    35fd:	00 00 00 
    3600:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3607:	00 00 00 
    360a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3611:	00 00 00 
    3614:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    361b:	00 00 00 
    361e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3625:	00 00 00 
    3628:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    362f:	00 00 00 
    3632:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3639:	00 00 00 
    363c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3643:	00 00 00 
    3646:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    364d:	00 00 00 
    3650:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3657:	00 00 00 
    365a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3661:	00 00 00 
    3664:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    366b:	00 00 00 
    366e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3675:	00 00 00 
    3678:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    367f:	00 00 00 
    3682:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3689:	00 00 00 
    368c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3693:	00 00 00 
    3696:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    369d:	00 00 00 
    36a0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    36a7:	00 00 00 
    36aa:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    36b1:	00 00 00 
    36b4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    36bb:	00 00 00 
    36be:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    36c5:	00 00 00 
    36c8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    36cf:	00 00 00 
    36d2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    36d9:	00 00 00 
    36dc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    36e3:	00 00 00 
    36e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    36ed:	00 00 00 
    36f0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    36f7:	00 00 00 
    36fa:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3701:	00 00 00 
    3704:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    370b:	00 00 00 
    370e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3715:	00 00 00 
    3718:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    371f:	00 00 00 
    3722:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3729:	00 00 00 
    372c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3733:	00 00 00 
    3736:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    373d:	00 00 00 
    3740:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3747:	00 00 00 
    374a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3751:	00 00 00 
    3754:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    375b:	00 00 00 
    375e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3765:	00 00 00 
    3768:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    376f:	00 00 00 
    3772:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3779:	00 00 00 
    377c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3783:	00 00 00 
    3786:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    378d:	00 00 00 
    3790:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3797:	00 00 00 
    379a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    37a1:	00 00 00 
    37a4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    37ab:	00 00 00 
    37ae:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    37b5:	00 00 00 
    37b8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    37bf:	00 00 00 
    37c2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    37c9:	00 00 00 
    37cc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    37d3:	00 00 00 
    37d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    37dd:	00 00 00 
    37e0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    37e7:	00 00 00 
    37ea:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    37f1:	00 00 00 
    37f4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    37fb:	00 00 00 
    37fe:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3805:	00 00 00 
    3808:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    380f:	00 00 00 
    3812:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3819:	00 00 00 
    381c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3823:	00 00 00 
    3826:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    382d:	00 00 00 
    3830:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3837:	00 00 00 
    383a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3841:	00 00 00 
    3844:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    384b:	00 00 00 
    384e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3855:	00 00 00 
    3858:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    385f:	00 00 00 
    3862:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3869:	00 00 00 
    386c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3873:	00 00 00 
    3876:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    387d:	00 00 00 
    3880:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3887:	00 00 00 
    388a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3891:	00 00 00 
    3894:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    389b:	00 00 00 
    389e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    38a5:	00 00 00 
    38a8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    38af:	00 00 00 
    38b2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    38b9:	00 00 00 
    38bc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    38c3:	00 00 00 
    38c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    38cd:	00 00 00 
    38d0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    38d7:	00 00 00 
    38da:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    38e1:	00 00 00 
    38e4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    38eb:	00 00 00 
    38ee:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    38f5:	00 00 00 
    38f8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    38ff:	00 00 00 
    3902:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3909:	00 00 00 
    390c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3913:	00 00 00 
    3916:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    391d:	00 00 00 
    3920:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3927:	00 00 00 
    392a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3931:	00 00 00 
    3934:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    393b:	00 00 00 
    393e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3945:	00 00 00 
    3948:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    394f:	00 00 00 
    3952:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3959:	00 00 00 
    395c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3963:	00 00 00 
    3966:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    396d:	00 00 00 
    3970:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3977:	00 00 00 
    397a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3981:	00 00 00 
    3984:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    398b:	00 00 00 
    398e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3995:	00 00 00 
    3998:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    399f:	00 00 00 
    39a2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    39a9:	00 00 00 
    39ac:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    39b3:	00 00 00 
    39b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    39bd:	00 00 00 
    39c0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    39c7:	00 00 00 
    39ca:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    39d1:	00 00 00 
    39d4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    39db:	00 00 00 
    39de:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    39e5:	00 00 00 
    39e8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    39ef:	00 00 00 
    39f2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    39f9:	00 00 00 
    39fc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3a03:	00 00 00 
    3a06:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3a0d:	00 00 00 
    3a10:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3a17:	00 00 00 
    3a1a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3a21:	00 00 00 
    3a24:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3a2b:	00 00 00 
    3a2e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3a35:	00 00 00 
    3a38:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3a3f:	00 00 00 
    3a42:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3a49:	00 00 00 
    3a4c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3a53:	00 00 00 
    3a56:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3a5d:	00 00 00 
    3a60:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3a67:	00 00 00 
    3a6a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3a71:	00 00 00 
    3a74:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3a7b:	00 00 00 
    3a7e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3a85:	00 00 00 
    3a88:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3a8f:	00 00 00 
    3a92:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3a99:	00 00 00 
    3a9c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3aa3:	00 00 00 
    3aa6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3aad:	00 00 00 
    3ab0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3ab7:	00 00 00 
    3aba:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3ac1:	00 00 00 
    3ac4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3acb:	00 00 00 
    3ace:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3ad5:	00 00 00 
    3ad8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3adf:	00 00 00 
    3ae2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3ae9:	00 00 00 
    3aec:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3af3:	00 00 00 
    3af6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3afd:	00 00 00 
    3b00:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3b07:	00 00 00 
    3b0a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3b11:	00 00 00 
    3b14:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3b1b:	00 00 00 
    3b1e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3b25:	00 00 00 
    3b28:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3b2f:	00 00 00 
    3b32:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3b39:	00 00 00 
    3b3c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3b43:	00 00 00 
    3b46:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3b4d:	00 00 00 
    3b50:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3b57:	00 00 00 
    3b5a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3b61:	00 00 00 
    3b64:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3b6b:	00 00 00 
    3b6e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3b75:	00 00 00 
    3b78:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3b7f:	00 00 00 
    3b82:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3b89:	00 00 00 
    3b8c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3b93:	00 00 00 
    3b96:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3b9d:	00 00 00 
    3ba0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3ba7:	00 00 00 
    3baa:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3bb1:	00 00 00 
    3bb4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3bbb:	00 00 00 
    3bbe:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3bc5:	00 00 00 
    3bc8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3bcf:	00 00 00 
    3bd2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3bd9:	00 00 00 
    3bdc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3be3:	00 00 00 
    3be6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3bed:	00 00 00 
    3bf0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3bf7:	00 00 00 
    3bfa:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3c01:	00 00 00 
    3c04:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3c0b:	00 00 00 
    3c0e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3c15:	00 00 00 
    3c18:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3c1f:	00 00 00 
    3c22:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3c29:	00 00 00 
    3c2c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3c33:	00 00 00 
    3c36:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3c3d:	00 00 00 
    3c40:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3c47:	00 00 00 
    3c4a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3c51:	00 00 00 
    3c54:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3c5b:	00 00 00 
    3c5e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3c65:	00 00 00 
    3c68:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3c6f:	00 00 00 
    3c72:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3c79:	00 00 00 
    3c7c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3c83:	00 00 00 
    3c86:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3c8d:	00 00 00 
    3c90:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3c97:	00 00 00 
    3c9a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3ca1:	00 00 00 
    3ca4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3cab:	00 00 00 
    3cae:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3cb5:	00 00 00 
    3cb8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3cbf:	00 00 00 
    3cc2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3cc9:	00 00 00 
    3ccc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3cd3:	00 00 00 
    3cd6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3cdd:	00 00 00 
    3ce0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3ce7:	00 00 00 
    3cea:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3cf1:	00 00 00 
    3cf4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3cfb:	00 00 00 
    3cfe:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3d05:	00 00 00 
    3d08:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3d0f:	00 00 00 
    3d12:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3d19:	00 00 00 
    3d1c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3d23:	00 00 00 
    3d26:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3d2d:	00 00 00 
    3d30:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3d37:	00 00 00 
    3d3a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3d41:	00 00 00 
    3d44:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3d4b:	00 00 00 
    3d4e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3d55:	00 00 00 
    3d58:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3d5f:	00 00 00 
    3d62:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3d69:	00 00 00 
    3d6c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3d73:	00 00 00 
    3d76:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3d7d:	00 00 00 
    3d80:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3d87:	00 00 00 
    3d8a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3d91:	00 00 00 
    3d94:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3d9b:	00 00 00 
    3d9e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3da5:	00 00 00 
    3da8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3daf:	00 00 00 
    3db2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3db9:	00 00 00 
    3dbc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3dc3:	00 00 00 
    3dc6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3dcd:	00 00 00 
    3dd0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3dd7:	00 00 00 
    3dda:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3de1:	00 00 00 
    3de4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3deb:	00 00 00 
    3dee:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3df5:	00 00 00 
    3df8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3dff:	00 00 00 
    3e02:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3e09:	00 00 00 
    3e0c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3e13:	00 00 00 
    3e16:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3e1d:	00 00 00 
    3e20:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3e27:	00 00 00 
    3e2a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3e31:	00 00 00 
    3e34:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3e3b:	00 00 00 
    3e3e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3e45:	00 00 00 
    3e48:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3e4f:	00 00 00 
    3e52:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3e59:	00 00 00 
    3e5c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3e63:	00 00 00 
    3e66:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3e6d:	00 00 00 
    3e70:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3e77:	00 00 00 
    3e7a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3e81:	00 00 00 
    3e84:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3e8b:	00 00 00 
    3e8e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3e95:	00 00 00 
    3e98:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3e9f:	00 00 00 
    3ea2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3ea9:	00 00 00 
    3eac:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3eb3:	00 00 00 
    3eb6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3ebd:	00 00 00 
    3ec0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3ec7:	00 00 00 
    3eca:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3ed1:	00 00 00 
    3ed4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3edb:	00 00 00 
    3ede:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3ee5:	00 00 00 
    3ee8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3eef:	00 00 00 
    3ef2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3ef9:	00 00 00 
    3efc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3f03:	00 00 00 
    3f06:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3f0d:	00 00 00 
    3f10:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3f17:	00 00 00 
    3f1a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3f21:	00 00 00 
    3f24:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3f2b:	00 00 00 
    3f2e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3f35:	00 00 00 
    3f38:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3f3f:	00 00 00 
    3f42:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3f49:	00 00 00 
    3f4c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3f53:	00 00 00 
    3f56:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3f5d:	00 00 00 
    3f60:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3f67:	00 00 00 
    3f6a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3f71:	00 00 00 
    3f74:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3f7b:	00 00 00 
    3f7e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3f85:	00 00 00 
    3f88:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3f8f:	00 00 00 
    3f92:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3f99:	00 00 00 
    3f9c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3fa3:	00 00 00 
    3fa6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3fad:	00 00 00 
    3fb0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3fb7:	00 00 00 
    3fba:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3fc1:	00 00 00 
    3fc4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3fcb:	00 00 00 
    3fce:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3fd5:	00 00 00 
    3fd8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3fdf:	00 00 00 
    3fe2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3fe9:	00 00 00 
    3fec:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3ff3:	00 00 00 
    3ff6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    3ffd:	00 00 00 

0000000000004000 <_lodata_start>:
    4000:	aa                   	stos   %al,%es:(%rdi)
    4001:	aa                   	stos   %al,%es:(%rdi)
    4002:	aa                   	stos   %al,%es:(%rdi)
    4003:	aa                   	stos   %al,%es:(%rdi)
    4004:	aa                   	stos   %al,%es:(%rdi)
    4005:	aa                   	stos   %al,%es:(%rdi)
    4006:	aa                   	stos   %al,%es:(%rdi)
    4007:	aa                   	stos   %al,%es:(%rdi)
    4008:	aa                   	stos   %al,%es:(%rdi)
    4009:	aa                   	stos   %al,%es:(%rdi)
    400a:	aa                   	stos   %al,%es:(%rdi)
    400b:	aa                   	stos   %al,%es:(%rdi)
    400c:	aa                   	stos   %al,%es:(%rdi)
    400d:	aa                   	stos   %al,%es:(%rdi)
    400e:	aa                   	stos   %al,%es:(%rdi)
    400f:	aa                   	stos   %al,%es:(%rdi)
    4010:	aa                   	stos   %al,%es:(%rdi)
    4011:	aa                   	stos   %al,%es:(%rdi)
    4012:	aa                   	stos   %al,%es:(%rdi)
    4013:	aa                   	stos   %al,%es:(%rdi)
    4014:	aa                   	stos   %al,%es:(%rdi)
    4015:	aa                   	stos   %al,%es:(%rdi)
    4016:	aa                   	stos   %al,%es:(%rdi)
    4017:	aa                   	stos   %al,%es:(%rdi)
    4018:	aa                   	stos   %al,%es:(%rdi)
    4019:	aa                   	stos   %al,%es:(%rdi)
    401a:	aa                   	stos   %al,%es:(%rdi)
    401b:	aa                   	stos   %al,%es:(%rdi)
    401c:	aa                   	stos   %al,%es:(%rdi)
    401d:	aa                   	stos   %al,%es:(%rdi)
    401e:	aa                   	stos   %al,%es:(%rdi)
    401f:	aa                   	stos   %al,%es:(%rdi)
    4020:	aa                   	stos   %al,%es:(%rdi)
    4021:	aa                   	stos   %al,%es:(%rdi)
    4022:	aa                   	stos   %al,%es:(%rdi)
    4023:	aa                   	stos   %al,%es:(%rdi)
    4024:	aa                   	stos   %al,%es:(%rdi)
    4025:	aa                   	stos   %al,%es:(%rdi)
    4026:	aa                   	stos   %al,%es:(%rdi)
    4027:	aa                   	stos   %al,%es:(%rdi)
    4028:	aa                   	stos   %al,%es:(%rdi)
    4029:	aa                   	stos   %al,%es:(%rdi)
    402a:	aa                   	stos   %al,%es:(%rdi)
    402b:	aa                   	stos   %al,%es:(%rdi)
    402c:	aa                   	stos   %al,%es:(%rdi)
    402d:	aa                   	stos   %al,%es:(%rdi)
    402e:	aa                   	stos   %al,%es:(%rdi)
    402f:	aa                   	stos   %al,%es:(%rdi)
    4030:	aa                   	stos   %al,%es:(%rdi)
    4031:	aa                   	stos   %al,%es:(%rdi)
    4032:	aa                   	stos   %al,%es:(%rdi)
    4033:	aa                   	stos   %al,%es:(%rdi)
    4034:	aa                   	stos   %al,%es:(%rdi)
    4035:	aa                   	stos   %al,%es:(%rdi)
    4036:	aa                   	stos   %al,%es:(%rdi)
    4037:	aa                   	stos   %al,%es:(%rdi)
    4038:	aa                   	stos   %al,%es:(%rdi)
    4039:	aa                   	stos   %al,%es:(%rdi)
    403a:	aa                   	stos   %al,%es:(%rdi)
    403b:	aa                   	stos   %al,%es:(%rdi)
    403c:	aa                   	stos   %al,%es:(%rdi)
    403d:	aa                   	stos   %al,%es:(%rdi)
    403e:	aa                   	stos   %al,%es:(%rdi)
    403f:	aa                   	stos   %al,%es:(%rdi)
    4040:	aa                   	stos   %al,%es:(%rdi)
    4041:	aa                   	stos   %al,%es:(%rdi)
    4042:	aa                   	stos   %al,%es:(%rdi)
    4043:	aa                   	stos   %al,%es:(%rdi)
    4044:	aa                   	stos   %al,%es:(%rdi)
    4045:	aa                   	stos   %al,%es:(%rdi)
    4046:	aa                   	stos   %al,%es:(%rdi)
    4047:	aa                   	stos   %al,%es:(%rdi)
    4048:	aa                   	stos   %al,%es:(%rdi)
    4049:	aa                   	stos   %al,%es:(%rdi)
    404a:	aa                   	stos   %al,%es:(%rdi)
    404b:	aa                   	stos   %al,%es:(%rdi)
    404c:	aa                   	stos   %al,%es:(%rdi)
    404d:	aa                   	stos   %al,%es:(%rdi)
    404e:	aa                   	stos   %al,%es:(%rdi)
    404f:	aa                   	stos   %al,%es:(%rdi)
    4050:	aa                   	stos   %al,%es:(%rdi)
    4051:	aa                   	stos   %al,%es:(%rdi)
    4052:	aa                   	stos   %al,%es:(%rdi)
    4053:	aa                   	stos   %al,%es:(%rdi)
    4054:	aa                   	stos   %al,%es:(%rdi)
    4055:	aa                   	stos   %al,%es:(%rdi)
    4056:	aa                   	stos   %al,%es:(%rdi)
    4057:	aa                   	stos   %al,%es:(%rdi)
    4058:	aa                   	stos   %al,%es:(%rdi)
    4059:	aa                   	stos   %al,%es:(%rdi)
    405a:	aa                   	stos   %al,%es:(%rdi)
    405b:	aa                   	stos   %al,%es:(%rdi)
    405c:	aa                   	stos   %al,%es:(%rdi)
    405d:	aa                   	stos   %al,%es:(%rdi)
    405e:	aa                   	stos   %al,%es:(%rdi)
    405f:	aa                   	stos   %al,%es:(%rdi)
    4060:	aa                   	stos   %al,%es:(%rdi)
    4061:	aa                   	stos   %al,%es:(%rdi)
    4062:	aa                   	stos   %al,%es:(%rdi)
    4063:	aa                   	stos   %al,%es:(%rdi)
    4064:	aa                   	stos   %al,%es:(%rdi)
    4065:	aa                   	stos   %al,%es:(%rdi)
    4066:	aa                   	stos   %al,%es:(%rdi)
    4067:	aa                   	stos   %al,%es:(%rdi)
    4068:	aa                   	stos   %al,%es:(%rdi)
    4069:	aa                   	stos   %al,%es:(%rdi)
    406a:	aa                   	stos   %al,%es:(%rdi)
    406b:	aa                   	stos   %al,%es:(%rdi)
    406c:	aa                   	stos   %al,%es:(%rdi)
    406d:	aa                   	stos   %al,%es:(%rdi)
    406e:	aa                   	stos   %al,%es:(%rdi)
    406f:	aa                   	stos   %al,%es:(%rdi)
    4070:	aa                   	stos   %al,%es:(%rdi)
    4071:	aa                   	stos   %al,%es:(%rdi)
    4072:	aa                   	stos   %al,%es:(%rdi)
    4073:	aa                   	stos   %al,%es:(%rdi)
    4074:	aa                   	stos   %al,%es:(%rdi)
    4075:	aa                   	stos   %al,%es:(%rdi)
    4076:	aa                   	stos   %al,%es:(%rdi)
    4077:	aa                   	stos   %al,%es:(%rdi)
    4078:	aa                   	stos   %al,%es:(%rdi)
    4079:	aa                   	stos   %al,%es:(%rdi)
    407a:	aa                   	stos   %al,%es:(%rdi)
    407b:	aa                   	stos   %al,%es:(%rdi)
    407c:	aa                   	stos   %al,%es:(%rdi)
    407d:	aa                   	stos   %al,%es:(%rdi)
    407e:	aa                   	stos   %al,%es:(%rdi)
    407f:	aa                   	stos   %al,%es:(%rdi)
    4080:	aa                   	stos   %al,%es:(%rdi)
    4081:	aa                   	stos   %al,%es:(%rdi)
    4082:	aa                   	stos   %al,%es:(%rdi)
    4083:	aa                   	stos   %al,%es:(%rdi)
    4084:	aa                   	stos   %al,%es:(%rdi)
    4085:	aa                   	stos   %al,%es:(%rdi)
    4086:	aa                   	stos   %al,%es:(%rdi)
    4087:	aa                   	stos   %al,%es:(%rdi)
    4088:	aa                   	stos   %al,%es:(%rdi)
    4089:	aa                   	stos   %al,%es:(%rdi)
    408a:	aa                   	stos   %al,%es:(%rdi)
    408b:	aa                   	stos   %al,%es:(%rdi)
    408c:	aa                   	stos   %al,%es:(%rdi)
    408d:	aa                   	stos   %al,%es:(%rdi)
    408e:	aa                   	stos   %al,%es:(%rdi)
    408f:	aa                   	stos   %al,%es:(%rdi)
    4090:	aa                   	stos   %al,%es:(%rdi)
    4091:	aa                   	stos   %al,%es:(%rdi)
    4092:	aa                   	stos   %al,%es:(%rdi)
    4093:	aa                   	stos   %al,%es:(%rdi)
    4094:	aa                   	stos   %al,%es:(%rdi)
    4095:	aa                   	stos   %al,%es:(%rdi)
    4096:	aa                   	stos   %al,%es:(%rdi)
    4097:	aa                   	stos   %al,%es:(%rdi)
    4098:	aa                   	stos   %al,%es:(%rdi)
    4099:	aa                   	stos   %al,%es:(%rdi)
    409a:	aa                   	stos   %al,%es:(%rdi)
    409b:	aa                   	stos   %al,%es:(%rdi)
    409c:	aa                   	stos   %al,%es:(%rdi)
    409d:	aa                   	stos   %al,%es:(%rdi)
    409e:	aa                   	stos   %al,%es:(%rdi)
    409f:	aa                   	stos   %al,%es:(%rdi)
    40a0:	aa                   	stos   %al,%es:(%rdi)
    40a1:	aa                   	stos   %al,%es:(%rdi)
    40a2:	aa                   	stos   %al,%es:(%rdi)
    40a3:	aa                   	stos   %al,%es:(%rdi)
    40a4:	aa                   	stos   %al,%es:(%rdi)
    40a5:	aa                   	stos   %al,%es:(%rdi)
    40a6:	aa                   	stos   %al,%es:(%rdi)
    40a7:	aa                   	stos   %al,%es:(%rdi)
    40a8:	aa                   	stos   %al,%es:(%rdi)
    40a9:	aa                   	stos   %al,%es:(%rdi)
    40aa:	aa                   	stos   %al,%es:(%rdi)
    40ab:	aa                   	stos   %al,%es:(%rdi)
    40ac:	aa                   	stos   %al,%es:(%rdi)
    40ad:	aa                   	stos   %al,%es:(%rdi)
    40ae:	aa                   	stos   %al,%es:(%rdi)
    40af:	aa                   	stos   %al,%es:(%rdi)
    40b0:	aa                   	stos   %al,%es:(%rdi)
    40b1:	aa                   	stos   %al,%es:(%rdi)
    40b2:	aa                   	stos   %al,%es:(%rdi)
    40b3:	aa                   	stos   %al,%es:(%rdi)
    40b4:	aa                   	stos   %al,%es:(%rdi)
    40b5:	aa                   	stos   %al,%es:(%rdi)
    40b6:	aa                   	stos   %al,%es:(%rdi)
    40b7:	aa                   	stos   %al,%es:(%rdi)
    40b8:	aa                   	stos   %al,%es:(%rdi)
    40b9:	aa                   	stos   %al,%es:(%rdi)
    40ba:	aa                   	stos   %al,%es:(%rdi)
    40bb:	aa                   	stos   %al,%es:(%rdi)
    40bc:	aa                   	stos   %al,%es:(%rdi)
    40bd:	aa                   	stos   %al,%es:(%rdi)
    40be:	aa                   	stos   %al,%es:(%rdi)
    40bf:	aa                   	stos   %al,%es:(%rdi)
    40c0:	aa                   	stos   %al,%es:(%rdi)
    40c1:	aa                   	stos   %al,%es:(%rdi)
    40c2:	aa                   	stos   %al,%es:(%rdi)
    40c3:	aa                   	stos   %al,%es:(%rdi)
    40c4:	aa                   	stos   %al,%es:(%rdi)
    40c5:	aa                   	stos   %al,%es:(%rdi)
    40c6:	aa                   	stos   %al,%es:(%rdi)
    40c7:	aa                   	stos   %al,%es:(%rdi)
    40c8:	aa                   	stos   %al,%es:(%rdi)
    40c9:	aa                   	stos   %al,%es:(%rdi)
    40ca:	aa                   	stos   %al,%es:(%rdi)
    40cb:	aa                   	stos   %al,%es:(%rdi)
    40cc:	aa                   	stos   %al,%es:(%rdi)
    40cd:	aa                   	stos   %al,%es:(%rdi)
    40ce:	aa                   	stos   %al,%es:(%rdi)
    40cf:	aa                   	stos   %al,%es:(%rdi)
    40d0:	aa                   	stos   %al,%es:(%rdi)
    40d1:	aa                   	stos   %al,%es:(%rdi)
    40d2:	aa                   	stos   %al,%es:(%rdi)
    40d3:	aa                   	stos   %al,%es:(%rdi)
    40d4:	aa                   	stos   %al,%es:(%rdi)
    40d5:	aa                   	stos   %al,%es:(%rdi)
    40d6:	aa                   	stos   %al,%es:(%rdi)
    40d7:	aa                   	stos   %al,%es:(%rdi)
    40d8:	aa                   	stos   %al,%es:(%rdi)
    40d9:	aa                   	stos   %al,%es:(%rdi)
    40da:	aa                   	stos   %al,%es:(%rdi)
    40db:	aa                   	stos   %al,%es:(%rdi)
    40dc:	aa                   	stos   %al,%es:(%rdi)
    40dd:	aa                   	stos   %al,%es:(%rdi)
    40de:	aa                   	stos   %al,%es:(%rdi)
    40df:	aa                   	stos   %al,%es:(%rdi)
    40e0:	aa                   	stos   %al,%es:(%rdi)
    40e1:	aa                   	stos   %al,%es:(%rdi)
    40e2:	aa                   	stos   %al,%es:(%rdi)
    40e3:	aa                   	stos   %al,%es:(%rdi)
    40e4:	aa                   	stos   %al,%es:(%rdi)
    40e5:	aa                   	stos   %al,%es:(%rdi)
    40e6:	aa                   	stos   %al,%es:(%rdi)
    40e7:	aa                   	stos   %al,%es:(%rdi)
    40e8:	aa                   	stos   %al,%es:(%rdi)
    40e9:	aa                   	stos   %al,%es:(%rdi)
    40ea:	aa                   	stos   %al,%es:(%rdi)
    40eb:	aa                   	stos   %al,%es:(%rdi)
    40ec:	aa                   	stos   %al,%es:(%rdi)
    40ed:	aa                   	stos   %al,%es:(%rdi)
    40ee:	aa                   	stos   %al,%es:(%rdi)
    40ef:	aa                   	stos   %al,%es:(%rdi)
    40f0:	aa                   	stos   %al,%es:(%rdi)
    40f1:	aa                   	stos   %al,%es:(%rdi)
    40f2:	aa                   	stos   %al,%es:(%rdi)
    40f3:	aa                   	stos   %al,%es:(%rdi)
    40f4:	aa                   	stos   %al,%es:(%rdi)
    40f5:	aa                   	stos   %al,%es:(%rdi)
    40f6:	aa                   	stos   %al,%es:(%rdi)
    40f7:	aa                   	stos   %al,%es:(%rdi)
    40f8:	aa                   	stos   %al,%es:(%rdi)
    40f9:	aa                   	stos   %al,%es:(%rdi)
    40fa:	aa                   	stos   %al,%es:(%rdi)
    40fb:	aa                   	stos   %al,%es:(%rdi)
    40fc:	aa                   	stos   %al,%es:(%rdi)
    40fd:	aa                   	stos   %al,%es:(%rdi)
    40fe:	aa                   	stos   %al,%es:(%rdi)
    40ff:	aa                   	stos   %al,%es:(%rdi)
    4100:	aa                   	stos   %al,%es:(%rdi)
    4101:	aa                   	stos   %al,%es:(%rdi)
    4102:	aa                   	stos   %al,%es:(%rdi)
    4103:	aa                   	stos   %al,%es:(%rdi)
    4104:	aa                   	stos   %al,%es:(%rdi)
    4105:	aa                   	stos   %al,%es:(%rdi)
    4106:	aa                   	stos   %al,%es:(%rdi)
    4107:	aa                   	stos   %al,%es:(%rdi)
    4108:	aa                   	stos   %al,%es:(%rdi)
    4109:	aa                   	stos   %al,%es:(%rdi)
    410a:	aa                   	stos   %al,%es:(%rdi)
    410b:	aa                   	stos   %al,%es:(%rdi)
    410c:	aa                   	stos   %al,%es:(%rdi)
    410d:	aa                   	stos   %al,%es:(%rdi)
    410e:	aa                   	stos   %al,%es:(%rdi)
    410f:	aa                   	stos   %al,%es:(%rdi)
    4110:	aa                   	stos   %al,%es:(%rdi)
    4111:	aa                   	stos   %al,%es:(%rdi)
    4112:	aa                   	stos   %al,%es:(%rdi)
    4113:	aa                   	stos   %al,%es:(%rdi)
    4114:	aa                   	stos   %al,%es:(%rdi)
    4115:	aa                   	stos   %al,%es:(%rdi)
    4116:	aa                   	stos   %al,%es:(%rdi)
    4117:	aa                   	stos   %al,%es:(%rdi)
    4118:	aa                   	stos   %al,%es:(%rdi)
    4119:	aa                   	stos   %al,%es:(%rdi)
    411a:	aa                   	stos   %al,%es:(%rdi)
    411b:	aa                   	stos   %al,%es:(%rdi)
    411c:	aa                   	stos   %al,%es:(%rdi)
    411d:	aa                   	stos   %al,%es:(%rdi)
    411e:	aa                   	stos   %al,%es:(%rdi)
    411f:	aa                   	stos   %al,%es:(%rdi)
    4120:	aa                   	stos   %al,%es:(%rdi)
    4121:	aa                   	stos   %al,%es:(%rdi)
    4122:	aa                   	stos   %al,%es:(%rdi)
    4123:	aa                   	stos   %al,%es:(%rdi)
    4124:	aa                   	stos   %al,%es:(%rdi)
    4125:	aa                   	stos   %al,%es:(%rdi)
    4126:	aa                   	stos   %al,%es:(%rdi)
    4127:	aa                   	stos   %al,%es:(%rdi)
    4128:	aa                   	stos   %al,%es:(%rdi)
    4129:	aa                   	stos   %al,%es:(%rdi)
    412a:	aa                   	stos   %al,%es:(%rdi)
    412b:	aa                   	stos   %al,%es:(%rdi)
    412c:	aa                   	stos   %al,%es:(%rdi)
    412d:	aa                   	stos   %al,%es:(%rdi)
    412e:	aa                   	stos   %al,%es:(%rdi)
    412f:	aa                   	stos   %al,%es:(%rdi)
    4130:	aa                   	stos   %al,%es:(%rdi)
    4131:	aa                   	stos   %al,%es:(%rdi)
    4132:	aa                   	stos   %al,%es:(%rdi)
    4133:	aa                   	stos   %al,%es:(%rdi)
    4134:	aa                   	stos   %al,%es:(%rdi)
    4135:	aa                   	stos   %al,%es:(%rdi)
    4136:	aa                   	stos   %al,%es:(%rdi)
    4137:	aa                   	stos   %al,%es:(%rdi)
    4138:	aa                   	stos   %al,%es:(%rdi)
    4139:	aa                   	stos   %al,%es:(%rdi)
    413a:	aa                   	stos   %al,%es:(%rdi)
    413b:	aa                   	stos   %al,%es:(%rdi)
    413c:	aa                   	stos   %al,%es:(%rdi)
    413d:	aa                   	stos   %al,%es:(%rdi)
    413e:	aa                   	stos   %al,%es:(%rdi)
    413f:	aa                   	stos   %al,%es:(%rdi)
    4140:	aa                   	stos   %al,%es:(%rdi)
    4141:	aa                   	stos   %al,%es:(%rdi)
    4142:	aa                   	stos   %al,%es:(%rdi)
    4143:	aa                   	stos   %al,%es:(%rdi)
    4144:	aa                   	stos   %al,%es:(%rdi)
    4145:	aa                   	stos   %al,%es:(%rdi)
    4146:	aa                   	stos   %al,%es:(%rdi)
    4147:	aa                   	stos   %al,%es:(%rdi)
    4148:	aa                   	stos   %al,%es:(%rdi)
    4149:	aa                   	stos   %al,%es:(%rdi)
    414a:	aa                   	stos   %al,%es:(%rdi)
    414b:	aa                   	stos   %al,%es:(%rdi)
    414c:	aa                   	stos   %al,%es:(%rdi)
    414d:	aa                   	stos   %al,%es:(%rdi)
    414e:	aa                   	stos   %al,%es:(%rdi)
    414f:	aa                   	stos   %al,%es:(%rdi)
    4150:	aa                   	stos   %al,%es:(%rdi)
    4151:	aa                   	stos   %al,%es:(%rdi)
    4152:	aa                   	stos   %al,%es:(%rdi)
    4153:	aa                   	stos   %al,%es:(%rdi)
    4154:	aa                   	stos   %al,%es:(%rdi)
    4155:	aa                   	stos   %al,%es:(%rdi)
    4156:	aa                   	stos   %al,%es:(%rdi)
    4157:	aa                   	stos   %al,%es:(%rdi)
    4158:	aa                   	stos   %al,%es:(%rdi)
    4159:	aa                   	stos   %al,%es:(%rdi)
    415a:	aa                   	stos   %al,%es:(%rdi)
    415b:	aa                   	stos   %al,%es:(%rdi)
    415c:	aa                   	stos   %al,%es:(%rdi)
    415d:	aa                   	stos   %al,%es:(%rdi)
    415e:	aa                   	stos   %al,%es:(%rdi)
    415f:	aa                   	stos   %al,%es:(%rdi)
    4160:	aa                   	stos   %al,%es:(%rdi)
    4161:	aa                   	stos   %al,%es:(%rdi)
    4162:	aa                   	stos   %al,%es:(%rdi)
    4163:	aa                   	stos   %al,%es:(%rdi)
    4164:	aa                   	stos   %al,%es:(%rdi)
    4165:	aa                   	stos   %al,%es:(%rdi)
    4166:	aa                   	stos   %al,%es:(%rdi)
    4167:	aa                   	stos   %al,%es:(%rdi)
    4168:	aa                   	stos   %al,%es:(%rdi)
    4169:	aa                   	stos   %al,%es:(%rdi)
    416a:	aa                   	stos   %al,%es:(%rdi)
    416b:	aa                   	stos   %al,%es:(%rdi)
    416c:	aa                   	stos   %al,%es:(%rdi)
    416d:	aa                   	stos   %al,%es:(%rdi)
    416e:	aa                   	stos   %al,%es:(%rdi)
    416f:	aa                   	stos   %al,%es:(%rdi)
    4170:	aa                   	stos   %al,%es:(%rdi)
    4171:	aa                   	stos   %al,%es:(%rdi)
    4172:	aa                   	stos   %al,%es:(%rdi)
    4173:	aa                   	stos   %al,%es:(%rdi)
    4174:	aa                   	stos   %al,%es:(%rdi)
    4175:	aa                   	stos   %al,%es:(%rdi)
    4176:	aa                   	stos   %al,%es:(%rdi)
    4177:	aa                   	stos   %al,%es:(%rdi)
    4178:	aa                   	stos   %al,%es:(%rdi)
    4179:	aa                   	stos   %al,%es:(%rdi)
    417a:	aa                   	stos   %al,%es:(%rdi)
    417b:	aa                   	stos   %al,%es:(%rdi)
    417c:	aa                   	stos   %al,%es:(%rdi)
    417d:	aa                   	stos   %al,%es:(%rdi)
    417e:	aa                   	stos   %al,%es:(%rdi)
    417f:	aa                   	stos   %al,%es:(%rdi)
    4180:	aa                   	stos   %al,%es:(%rdi)
    4181:	aa                   	stos   %al,%es:(%rdi)
    4182:	aa                   	stos   %al,%es:(%rdi)
    4183:	aa                   	stos   %al,%es:(%rdi)
    4184:	aa                   	stos   %al,%es:(%rdi)
    4185:	aa                   	stos   %al,%es:(%rdi)
    4186:	aa                   	stos   %al,%es:(%rdi)
    4187:	aa                   	stos   %al,%es:(%rdi)
    4188:	aa                   	stos   %al,%es:(%rdi)
    4189:	aa                   	stos   %al,%es:(%rdi)
    418a:	aa                   	stos   %al,%es:(%rdi)
    418b:	aa                   	stos   %al,%es:(%rdi)
    418c:	aa                   	stos   %al,%es:(%rdi)
    418d:	aa                   	stos   %al,%es:(%rdi)
    418e:	aa                   	stos   %al,%es:(%rdi)
    418f:	aa                   	stos   %al,%es:(%rdi)
    4190:	aa                   	stos   %al,%es:(%rdi)
    4191:	aa                   	stos   %al,%es:(%rdi)
    4192:	aa                   	stos   %al,%es:(%rdi)
    4193:	aa                   	stos   %al,%es:(%rdi)
    4194:	aa                   	stos   %al,%es:(%rdi)
    4195:	aa                   	stos   %al,%es:(%rdi)
    4196:	aa                   	stos   %al,%es:(%rdi)
    4197:	aa                   	stos   %al,%es:(%rdi)
    4198:	aa                   	stos   %al,%es:(%rdi)
    4199:	aa                   	stos   %al,%es:(%rdi)
    419a:	aa                   	stos   %al,%es:(%rdi)
    419b:	aa                   	stos   %al,%es:(%rdi)
    419c:	aa                   	stos   %al,%es:(%rdi)
    419d:	aa                   	stos   %al,%es:(%rdi)
    419e:	aa                   	stos   %al,%es:(%rdi)
    419f:	aa                   	stos   %al,%es:(%rdi)
    41a0:	aa                   	stos   %al,%es:(%rdi)
    41a1:	aa                   	stos   %al,%es:(%rdi)
    41a2:	aa                   	stos   %al,%es:(%rdi)
    41a3:	aa                   	stos   %al,%es:(%rdi)
    41a4:	aa                   	stos   %al,%es:(%rdi)
    41a5:	aa                   	stos   %al,%es:(%rdi)
    41a6:	aa                   	stos   %al,%es:(%rdi)
    41a7:	aa                   	stos   %al,%es:(%rdi)
    41a8:	aa                   	stos   %al,%es:(%rdi)
    41a9:	aa                   	stos   %al,%es:(%rdi)
    41aa:	aa                   	stos   %al,%es:(%rdi)
    41ab:	aa                   	stos   %al,%es:(%rdi)
    41ac:	aa                   	stos   %al,%es:(%rdi)
    41ad:	aa                   	stos   %al,%es:(%rdi)
    41ae:	aa                   	stos   %al,%es:(%rdi)
    41af:	aa                   	stos   %al,%es:(%rdi)
    41b0:	aa                   	stos   %al,%es:(%rdi)
    41b1:	aa                   	stos   %al,%es:(%rdi)
    41b2:	aa                   	stos   %al,%es:(%rdi)
    41b3:	aa                   	stos   %al,%es:(%rdi)
    41b4:	aa                   	stos   %al,%es:(%rdi)
    41b5:	aa                   	stos   %al,%es:(%rdi)
    41b6:	aa                   	stos   %al,%es:(%rdi)
    41b7:	aa                   	stos   %al,%es:(%rdi)
    41b8:	aa                   	stos   %al,%es:(%rdi)
    41b9:	aa                   	stos   %al,%es:(%rdi)
    41ba:	aa                   	stos   %al,%es:(%rdi)
    41bb:	aa                   	stos   %al,%es:(%rdi)
    41bc:	aa                   	stos   %al,%es:(%rdi)
    41bd:	aa                   	stos   %al,%es:(%rdi)
    41be:	aa                   	stos   %al,%es:(%rdi)
    41bf:	aa                   	stos   %al,%es:(%rdi)
    41c0:	aa                   	stos   %al,%es:(%rdi)
    41c1:	aa                   	stos   %al,%es:(%rdi)
    41c2:	aa                   	stos   %al,%es:(%rdi)
    41c3:	aa                   	stos   %al,%es:(%rdi)
    41c4:	aa                   	stos   %al,%es:(%rdi)
    41c5:	aa                   	stos   %al,%es:(%rdi)
    41c6:	aa                   	stos   %al,%es:(%rdi)
    41c7:	aa                   	stos   %al,%es:(%rdi)
    41c8:	aa                   	stos   %al,%es:(%rdi)
    41c9:	aa                   	stos   %al,%es:(%rdi)
    41ca:	aa                   	stos   %al,%es:(%rdi)
    41cb:	aa                   	stos   %al,%es:(%rdi)
    41cc:	aa                   	stos   %al,%es:(%rdi)
    41cd:	aa                   	stos   %al,%es:(%rdi)
    41ce:	aa                   	stos   %al,%es:(%rdi)
    41cf:	aa                   	stos   %al,%es:(%rdi)
    41d0:	aa                   	stos   %al,%es:(%rdi)
    41d1:	aa                   	stos   %al,%es:(%rdi)
    41d2:	aa                   	stos   %al,%es:(%rdi)
    41d3:	aa                   	stos   %al,%es:(%rdi)
    41d4:	aa                   	stos   %al,%es:(%rdi)
    41d5:	aa                   	stos   %al,%es:(%rdi)
    41d6:	aa                   	stos   %al,%es:(%rdi)
    41d7:	aa                   	stos   %al,%es:(%rdi)
    41d8:	aa                   	stos   %al,%es:(%rdi)
    41d9:	aa                   	stos   %al,%es:(%rdi)
    41da:	aa                   	stos   %al,%es:(%rdi)
    41db:	aa                   	stos   %al,%es:(%rdi)
    41dc:	aa                   	stos   %al,%es:(%rdi)
    41dd:	aa                   	stos   %al,%es:(%rdi)
    41de:	aa                   	stos   %al,%es:(%rdi)
    41df:	aa                   	stos   %al,%es:(%rdi)
    41e0:	aa                   	stos   %al,%es:(%rdi)
    41e1:	aa                   	stos   %al,%es:(%rdi)
    41e2:	aa                   	stos   %al,%es:(%rdi)
    41e3:	aa                   	stos   %al,%es:(%rdi)
    41e4:	aa                   	stos   %al,%es:(%rdi)
    41e5:	aa                   	stos   %al,%es:(%rdi)
    41e6:	aa                   	stos   %al,%es:(%rdi)
    41e7:	aa                   	stos   %al,%es:(%rdi)
    41e8:	aa                   	stos   %al,%es:(%rdi)
    41e9:	aa                   	stos   %al,%es:(%rdi)
    41ea:	aa                   	stos   %al,%es:(%rdi)
    41eb:	aa                   	stos   %al,%es:(%rdi)
    41ec:	aa                   	stos   %al,%es:(%rdi)
    41ed:	aa                   	stos   %al,%es:(%rdi)
    41ee:	aa                   	stos   %al,%es:(%rdi)
    41ef:	aa                   	stos   %al,%es:(%rdi)
    41f0:	aa                   	stos   %al,%es:(%rdi)
    41f1:	aa                   	stos   %al,%es:(%rdi)
    41f2:	aa                   	stos   %al,%es:(%rdi)
    41f3:	aa                   	stos   %al,%es:(%rdi)
    41f4:	aa                   	stos   %al,%es:(%rdi)
    41f5:	aa                   	stos   %al,%es:(%rdi)
    41f6:	aa                   	stos   %al,%es:(%rdi)
    41f7:	aa                   	stos   %al,%es:(%rdi)
    41f8:	aa                   	stos   %al,%es:(%rdi)
    41f9:	aa                   	stos   %al,%es:(%rdi)
    41fa:	aa                   	stos   %al,%es:(%rdi)
    41fb:	aa                   	stos   %al,%es:(%rdi)
    41fc:	aa                   	stos   %al,%es:(%rdi)
    41fd:	aa                   	stos   %al,%es:(%rdi)
    41fe:	aa                   	stos   %al,%es:(%rdi)
    41ff:	aa                   	stos   %al,%es:(%rdi)
    4200:	aa                   	stos   %al,%es:(%rdi)
    4201:	aa                   	stos   %al,%es:(%rdi)
    4202:	aa                   	stos   %al,%es:(%rdi)
    4203:	aa                   	stos   %al,%es:(%rdi)
    4204:	aa                   	stos   %al,%es:(%rdi)
    4205:	aa                   	stos   %al,%es:(%rdi)
    4206:	aa                   	stos   %al,%es:(%rdi)
    4207:	aa                   	stos   %al,%es:(%rdi)
    4208:	aa                   	stos   %al,%es:(%rdi)
    4209:	aa                   	stos   %al,%es:(%rdi)
    420a:	aa                   	stos   %al,%es:(%rdi)
    420b:	aa                   	stos   %al,%es:(%rdi)
    420c:	aa                   	stos   %al,%es:(%rdi)
    420d:	aa                   	stos   %al,%es:(%rdi)
    420e:	aa                   	stos   %al,%es:(%rdi)
    420f:	aa                   	stos   %al,%es:(%rdi)
    4210:	aa                   	stos   %al,%es:(%rdi)
    4211:	aa                   	stos   %al,%es:(%rdi)
    4212:	aa                   	stos   %al,%es:(%rdi)
    4213:	aa                   	stos   %al,%es:(%rdi)
    4214:	aa                   	stos   %al,%es:(%rdi)
    4215:	aa                   	stos   %al,%es:(%rdi)
    4216:	aa                   	stos   %al,%es:(%rdi)
    4217:	aa                   	stos   %al,%es:(%rdi)
    4218:	aa                   	stos   %al,%es:(%rdi)
    4219:	aa                   	stos   %al,%es:(%rdi)
    421a:	aa                   	stos   %al,%es:(%rdi)
    421b:	aa                   	stos   %al,%es:(%rdi)
    421c:	aa                   	stos   %al,%es:(%rdi)
    421d:	aa                   	stos   %al,%es:(%rdi)
    421e:	aa                   	stos   %al,%es:(%rdi)
    421f:	aa                   	stos   %al,%es:(%rdi)
    4220:	aa                   	stos   %al,%es:(%rdi)
    4221:	aa                   	stos   %al,%es:(%rdi)
    4222:	aa                   	stos   %al,%es:(%rdi)
    4223:	aa                   	stos   %al,%es:(%rdi)
    4224:	aa                   	stos   %al,%es:(%rdi)
    4225:	aa                   	stos   %al,%es:(%rdi)
    4226:	aa                   	stos   %al,%es:(%rdi)
    4227:	aa                   	stos   %al,%es:(%rdi)
    4228:	aa                   	stos   %al,%es:(%rdi)
    4229:	aa                   	stos   %al,%es:(%rdi)
    422a:	aa                   	stos   %al,%es:(%rdi)
    422b:	aa                   	stos   %al,%es:(%rdi)
    422c:	aa                   	stos   %al,%es:(%rdi)
    422d:	aa                   	stos   %al,%es:(%rdi)
    422e:	aa                   	stos   %al,%es:(%rdi)
    422f:	aa                   	stos   %al,%es:(%rdi)
    4230:	aa                   	stos   %al,%es:(%rdi)
    4231:	aa                   	stos   %al,%es:(%rdi)
    4232:	aa                   	stos   %al,%es:(%rdi)
    4233:	aa                   	stos   %al,%es:(%rdi)
    4234:	aa                   	stos   %al,%es:(%rdi)
    4235:	aa                   	stos   %al,%es:(%rdi)
    4236:	aa                   	stos   %al,%es:(%rdi)
    4237:	aa                   	stos   %al,%es:(%rdi)
    4238:	aa                   	stos   %al,%es:(%rdi)
    4239:	aa                   	stos   %al,%es:(%rdi)
    423a:	aa                   	stos   %al,%es:(%rdi)
    423b:	aa                   	stos   %al,%es:(%rdi)
    423c:	aa                   	stos   %al,%es:(%rdi)
    423d:	aa                   	stos   %al,%es:(%rdi)
    423e:	aa                   	stos   %al,%es:(%rdi)
    423f:	aa                   	stos   %al,%es:(%rdi)
    4240:	aa                   	stos   %al,%es:(%rdi)
    4241:	aa                   	stos   %al,%es:(%rdi)
    4242:	aa                   	stos   %al,%es:(%rdi)
    4243:	aa                   	stos   %al,%es:(%rdi)
    4244:	aa                   	stos   %al,%es:(%rdi)
    4245:	aa                   	stos   %al,%es:(%rdi)
    4246:	aa                   	stos   %al,%es:(%rdi)
    4247:	aa                   	stos   %al,%es:(%rdi)
    4248:	aa                   	stos   %al,%es:(%rdi)
    4249:	aa                   	stos   %al,%es:(%rdi)
    424a:	aa                   	stos   %al,%es:(%rdi)
    424b:	aa                   	stos   %al,%es:(%rdi)
    424c:	aa                   	stos   %al,%es:(%rdi)
    424d:	aa                   	stos   %al,%es:(%rdi)
    424e:	aa                   	stos   %al,%es:(%rdi)
    424f:	aa                   	stos   %al,%es:(%rdi)
    4250:	aa                   	stos   %al,%es:(%rdi)
    4251:	aa                   	stos   %al,%es:(%rdi)
    4252:	aa                   	stos   %al,%es:(%rdi)
    4253:	aa                   	stos   %al,%es:(%rdi)
    4254:	aa                   	stos   %al,%es:(%rdi)
    4255:	aa                   	stos   %al,%es:(%rdi)
    4256:	aa                   	stos   %al,%es:(%rdi)
    4257:	aa                   	stos   %al,%es:(%rdi)
    4258:	aa                   	stos   %al,%es:(%rdi)
    4259:	aa                   	stos   %al,%es:(%rdi)
    425a:	aa                   	stos   %al,%es:(%rdi)
    425b:	aa                   	stos   %al,%es:(%rdi)
    425c:	aa                   	stos   %al,%es:(%rdi)
    425d:	aa                   	stos   %al,%es:(%rdi)
    425e:	aa                   	stos   %al,%es:(%rdi)
    425f:	aa                   	stos   %al,%es:(%rdi)
    4260:	aa                   	stos   %al,%es:(%rdi)
    4261:	aa                   	stos   %al,%es:(%rdi)
    4262:	aa                   	stos   %al,%es:(%rdi)
    4263:	aa                   	stos   %al,%es:(%rdi)
    4264:	aa                   	stos   %al,%es:(%rdi)
    4265:	aa                   	stos   %al,%es:(%rdi)
    4266:	aa                   	stos   %al,%es:(%rdi)
    4267:	aa                   	stos   %al,%es:(%rdi)
    4268:	aa                   	stos   %al,%es:(%rdi)
    4269:	aa                   	stos   %al,%es:(%rdi)
    426a:	aa                   	stos   %al,%es:(%rdi)
    426b:	aa                   	stos   %al,%es:(%rdi)
    426c:	aa                   	stos   %al,%es:(%rdi)
    426d:	aa                   	stos   %al,%es:(%rdi)
    426e:	aa                   	stos   %al,%es:(%rdi)
    426f:	aa                   	stos   %al,%es:(%rdi)
    4270:	aa                   	stos   %al,%es:(%rdi)
    4271:	aa                   	stos   %al,%es:(%rdi)
    4272:	aa                   	stos   %al,%es:(%rdi)
    4273:	aa                   	stos   %al,%es:(%rdi)
    4274:	aa                   	stos   %al,%es:(%rdi)
    4275:	aa                   	stos   %al,%es:(%rdi)
    4276:	aa                   	stos   %al,%es:(%rdi)
    4277:	aa                   	stos   %al,%es:(%rdi)
    4278:	aa                   	stos   %al,%es:(%rdi)
    4279:	aa                   	stos   %al,%es:(%rdi)
    427a:	aa                   	stos   %al,%es:(%rdi)
    427b:	aa                   	stos   %al,%es:(%rdi)
    427c:	aa                   	stos   %al,%es:(%rdi)
    427d:	aa                   	stos   %al,%es:(%rdi)
    427e:	aa                   	stos   %al,%es:(%rdi)
    427f:	aa                   	stos   %al,%es:(%rdi)
    4280:	aa                   	stos   %al,%es:(%rdi)
    4281:	aa                   	stos   %al,%es:(%rdi)
    4282:	aa                   	stos   %al,%es:(%rdi)
    4283:	aa                   	stos   %al,%es:(%rdi)
    4284:	aa                   	stos   %al,%es:(%rdi)
    4285:	aa                   	stos   %al,%es:(%rdi)
    4286:	aa                   	stos   %al,%es:(%rdi)
    4287:	aa                   	stos   %al,%es:(%rdi)
    4288:	aa                   	stos   %al,%es:(%rdi)
    4289:	aa                   	stos   %al,%es:(%rdi)
    428a:	aa                   	stos   %al,%es:(%rdi)
    428b:	aa                   	stos   %al,%es:(%rdi)
    428c:	aa                   	stos   %al,%es:(%rdi)
    428d:	aa                   	stos   %al,%es:(%rdi)
    428e:	aa                   	stos   %al,%es:(%rdi)
    428f:	aa                   	stos   %al,%es:(%rdi)
    4290:	aa                   	stos   %al,%es:(%rdi)
    4291:	aa                   	stos   %al,%es:(%rdi)
    4292:	aa                   	stos   %al,%es:(%rdi)
    4293:	aa                   	stos   %al,%es:(%rdi)
    4294:	aa                   	stos   %al,%es:(%rdi)
    4295:	aa                   	stos   %al,%es:(%rdi)
    4296:	aa                   	stos   %al,%es:(%rdi)
    4297:	aa                   	stos   %al,%es:(%rdi)
    4298:	aa                   	stos   %al,%es:(%rdi)
    4299:	aa                   	stos   %al,%es:(%rdi)
    429a:	aa                   	stos   %al,%es:(%rdi)
    429b:	aa                   	stos   %al,%es:(%rdi)
    429c:	aa                   	stos   %al,%es:(%rdi)
    429d:	aa                   	stos   %al,%es:(%rdi)
    429e:	aa                   	stos   %al,%es:(%rdi)
    429f:	aa                   	stos   %al,%es:(%rdi)
    42a0:	aa                   	stos   %al,%es:(%rdi)
    42a1:	aa                   	stos   %al,%es:(%rdi)
    42a2:	aa                   	stos   %al,%es:(%rdi)
    42a3:	aa                   	stos   %al,%es:(%rdi)
    42a4:	aa                   	stos   %al,%es:(%rdi)
    42a5:	aa                   	stos   %al,%es:(%rdi)
    42a6:	aa                   	stos   %al,%es:(%rdi)
    42a7:	aa                   	stos   %al,%es:(%rdi)
    42a8:	aa                   	stos   %al,%es:(%rdi)
    42a9:	aa                   	stos   %al,%es:(%rdi)
    42aa:	aa                   	stos   %al,%es:(%rdi)
    42ab:	aa                   	stos   %al,%es:(%rdi)
    42ac:	aa                   	stos   %al,%es:(%rdi)
    42ad:	aa                   	stos   %al,%es:(%rdi)
    42ae:	aa                   	stos   %al,%es:(%rdi)
    42af:	aa                   	stos   %al,%es:(%rdi)
    42b0:	aa                   	stos   %al,%es:(%rdi)
    42b1:	aa                   	stos   %al,%es:(%rdi)
    42b2:	aa                   	stos   %al,%es:(%rdi)
    42b3:	aa                   	stos   %al,%es:(%rdi)
    42b4:	aa                   	stos   %al,%es:(%rdi)
    42b5:	aa                   	stos   %al,%es:(%rdi)
    42b6:	aa                   	stos   %al,%es:(%rdi)
    42b7:	aa                   	stos   %al,%es:(%rdi)
    42b8:	aa                   	stos   %al,%es:(%rdi)
    42b9:	aa                   	stos   %al,%es:(%rdi)
    42ba:	aa                   	stos   %al,%es:(%rdi)
    42bb:	aa                   	stos   %al,%es:(%rdi)
    42bc:	aa                   	stos   %al,%es:(%rdi)
    42bd:	aa                   	stos   %al,%es:(%rdi)
    42be:	aa                   	stos   %al,%es:(%rdi)
    42bf:	aa                   	stos   %al,%es:(%rdi)
    42c0:	aa                   	stos   %al,%es:(%rdi)
    42c1:	aa                   	stos   %al,%es:(%rdi)
    42c2:	aa                   	stos   %al,%es:(%rdi)
    42c3:	aa                   	stos   %al,%es:(%rdi)
    42c4:	aa                   	stos   %al,%es:(%rdi)
    42c5:	aa                   	stos   %al,%es:(%rdi)
    42c6:	aa                   	stos   %al,%es:(%rdi)
    42c7:	aa                   	stos   %al,%es:(%rdi)
    42c8:	aa                   	stos   %al,%es:(%rdi)
    42c9:	aa                   	stos   %al,%es:(%rdi)
    42ca:	aa                   	stos   %al,%es:(%rdi)
    42cb:	aa                   	stos   %al,%es:(%rdi)
    42cc:	aa                   	stos   %al,%es:(%rdi)
    42cd:	aa                   	stos   %al,%es:(%rdi)
    42ce:	aa                   	stos   %al,%es:(%rdi)
    42cf:	aa                   	stos   %al,%es:(%rdi)
    42d0:	aa                   	stos   %al,%es:(%rdi)
    42d1:	aa                   	stos   %al,%es:(%rdi)
    42d2:	aa                   	stos   %al,%es:(%rdi)
    42d3:	aa                   	stos   %al,%es:(%rdi)
    42d4:	aa                   	stos   %al,%es:(%rdi)
    42d5:	aa                   	stos   %al,%es:(%rdi)
    42d6:	aa                   	stos   %al,%es:(%rdi)
    42d7:	aa                   	stos   %al,%es:(%rdi)
    42d8:	aa                   	stos   %al,%es:(%rdi)
    42d9:	aa                   	stos   %al,%es:(%rdi)
    42da:	aa                   	stos   %al,%es:(%rdi)
    42db:	aa                   	stos   %al,%es:(%rdi)
    42dc:	aa                   	stos   %al,%es:(%rdi)
    42dd:	aa                   	stos   %al,%es:(%rdi)
    42de:	aa                   	stos   %al,%es:(%rdi)
    42df:	aa                   	stos   %al,%es:(%rdi)
    42e0:	aa                   	stos   %al,%es:(%rdi)
    42e1:	aa                   	stos   %al,%es:(%rdi)
    42e2:	aa                   	stos   %al,%es:(%rdi)
    42e3:	aa                   	stos   %al,%es:(%rdi)
    42e4:	aa                   	stos   %al,%es:(%rdi)
    42e5:	aa                   	stos   %al,%es:(%rdi)
    42e6:	aa                   	stos   %al,%es:(%rdi)
    42e7:	aa                   	stos   %al,%es:(%rdi)
    42e8:	aa                   	stos   %al,%es:(%rdi)
    42e9:	aa                   	stos   %al,%es:(%rdi)
    42ea:	aa                   	stos   %al,%es:(%rdi)
    42eb:	aa                   	stos   %al,%es:(%rdi)
    42ec:	aa                   	stos   %al,%es:(%rdi)
    42ed:	aa                   	stos   %al,%es:(%rdi)
    42ee:	aa                   	stos   %al,%es:(%rdi)
    42ef:	aa                   	stos   %al,%es:(%rdi)
    42f0:	aa                   	stos   %al,%es:(%rdi)
    42f1:	aa                   	stos   %al,%es:(%rdi)
    42f2:	aa                   	stos   %al,%es:(%rdi)
    42f3:	aa                   	stos   %al,%es:(%rdi)
    42f4:	aa                   	stos   %al,%es:(%rdi)
    42f5:	aa                   	stos   %al,%es:(%rdi)
    42f6:	aa                   	stos   %al,%es:(%rdi)
    42f7:	aa                   	stos   %al,%es:(%rdi)
    42f8:	aa                   	stos   %al,%es:(%rdi)
    42f9:	aa                   	stos   %al,%es:(%rdi)
    42fa:	aa                   	stos   %al,%es:(%rdi)
    42fb:	aa                   	stos   %al,%es:(%rdi)
    42fc:	aa                   	stos   %al,%es:(%rdi)
    42fd:	aa                   	stos   %al,%es:(%rdi)
    42fe:	aa                   	stos   %al,%es:(%rdi)
    42ff:	aa                   	stos   %al,%es:(%rdi)
    4300:	aa                   	stos   %al,%es:(%rdi)
    4301:	aa                   	stos   %al,%es:(%rdi)
    4302:	aa                   	stos   %al,%es:(%rdi)
    4303:	aa                   	stos   %al,%es:(%rdi)
    4304:	aa                   	stos   %al,%es:(%rdi)
    4305:	aa                   	stos   %al,%es:(%rdi)
    4306:	aa                   	stos   %al,%es:(%rdi)
    4307:	aa                   	stos   %al,%es:(%rdi)
    4308:	aa                   	stos   %al,%es:(%rdi)
    4309:	aa                   	stos   %al,%es:(%rdi)
    430a:	aa                   	stos   %al,%es:(%rdi)
    430b:	aa                   	stos   %al,%es:(%rdi)
    430c:	aa                   	stos   %al,%es:(%rdi)
    430d:	aa                   	stos   %al,%es:(%rdi)
    430e:	aa                   	stos   %al,%es:(%rdi)
    430f:	aa                   	stos   %al,%es:(%rdi)
    4310:	aa                   	stos   %al,%es:(%rdi)
    4311:	aa                   	stos   %al,%es:(%rdi)
    4312:	aa                   	stos   %al,%es:(%rdi)
    4313:	aa                   	stos   %al,%es:(%rdi)
    4314:	aa                   	stos   %al,%es:(%rdi)
    4315:	aa                   	stos   %al,%es:(%rdi)
    4316:	aa                   	stos   %al,%es:(%rdi)
    4317:	aa                   	stos   %al,%es:(%rdi)
    4318:	aa                   	stos   %al,%es:(%rdi)
    4319:	aa                   	stos   %al,%es:(%rdi)
    431a:	aa                   	stos   %al,%es:(%rdi)
    431b:	aa                   	stos   %al,%es:(%rdi)
    431c:	aa                   	stos   %al,%es:(%rdi)
    431d:	aa                   	stos   %al,%es:(%rdi)
    431e:	aa                   	stos   %al,%es:(%rdi)
    431f:	aa                   	stos   %al,%es:(%rdi)
    4320:	aa                   	stos   %al,%es:(%rdi)
    4321:	aa                   	stos   %al,%es:(%rdi)
    4322:	aa                   	stos   %al,%es:(%rdi)
    4323:	aa                   	stos   %al,%es:(%rdi)
    4324:	aa                   	stos   %al,%es:(%rdi)
    4325:	aa                   	stos   %al,%es:(%rdi)
    4326:	aa                   	stos   %al,%es:(%rdi)
    4327:	aa                   	stos   %al,%es:(%rdi)
    4328:	aa                   	stos   %al,%es:(%rdi)
    4329:	aa                   	stos   %al,%es:(%rdi)
    432a:	aa                   	stos   %al,%es:(%rdi)
    432b:	aa                   	stos   %al,%es:(%rdi)
    432c:	aa                   	stos   %al,%es:(%rdi)
    432d:	aa                   	stos   %al,%es:(%rdi)
    432e:	aa                   	stos   %al,%es:(%rdi)
    432f:	aa                   	stos   %al,%es:(%rdi)
    4330:	aa                   	stos   %al,%es:(%rdi)
    4331:	aa                   	stos   %al,%es:(%rdi)
    4332:	aa                   	stos   %al,%es:(%rdi)
    4333:	aa                   	stos   %al,%es:(%rdi)
    4334:	aa                   	stos   %al,%es:(%rdi)
    4335:	aa                   	stos   %al,%es:(%rdi)
    4336:	aa                   	stos   %al,%es:(%rdi)
    4337:	aa                   	stos   %al,%es:(%rdi)
    4338:	aa                   	stos   %al,%es:(%rdi)
    4339:	aa                   	stos   %al,%es:(%rdi)
    433a:	aa                   	stos   %al,%es:(%rdi)
    433b:	aa                   	stos   %al,%es:(%rdi)
    433c:	aa                   	stos   %al,%es:(%rdi)
    433d:	aa                   	stos   %al,%es:(%rdi)
    433e:	aa                   	stos   %al,%es:(%rdi)
    433f:	aa                   	stos   %al,%es:(%rdi)
    4340:	aa                   	stos   %al,%es:(%rdi)
    4341:	aa                   	stos   %al,%es:(%rdi)
    4342:	aa                   	stos   %al,%es:(%rdi)
    4343:	aa                   	stos   %al,%es:(%rdi)
    4344:	aa                   	stos   %al,%es:(%rdi)
    4345:	aa                   	stos   %al,%es:(%rdi)
    4346:	aa                   	stos   %al,%es:(%rdi)
    4347:	aa                   	stos   %al,%es:(%rdi)
    4348:	aa                   	stos   %al,%es:(%rdi)
    4349:	aa                   	stos   %al,%es:(%rdi)
    434a:	aa                   	stos   %al,%es:(%rdi)
    434b:	aa                   	stos   %al,%es:(%rdi)
    434c:	aa                   	stos   %al,%es:(%rdi)
    434d:	aa                   	stos   %al,%es:(%rdi)
    434e:	aa                   	stos   %al,%es:(%rdi)
    434f:	aa                   	stos   %al,%es:(%rdi)
    4350:	aa                   	stos   %al,%es:(%rdi)
    4351:	aa                   	stos   %al,%es:(%rdi)
    4352:	aa                   	stos   %al,%es:(%rdi)
    4353:	aa                   	stos   %al,%es:(%rdi)
    4354:	aa                   	stos   %al,%es:(%rdi)
    4355:	aa                   	stos   %al,%es:(%rdi)
    4356:	aa                   	stos   %al,%es:(%rdi)
    4357:	aa                   	stos   %al,%es:(%rdi)
    4358:	aa                   	stos   %al,%es:(%rdi)
    4359:	aa                   	stos   %al,%es:(%rdi)
    435a:	aa                   	stos   %al,%es:(%rdi)
    435b:	aa                   	stos   %al,%es:(%rdi)
    435c:	aa                   	stos   %al,%es:(%rdi)
    435d:	aa                   	stos   %al,%es:(%rdi)
    435e:	aa                   	stos   %al,%es:(%rdi)
    435f:	aa                   	stos   %al,%es:(%rdi)
    4360:	aa                   	stos   %al,%es:(%rdi)
    4361:	aa                   	stos   %al,%es:(%rdi)
    4362:	aa                   	stos   %al,%es:(%rdi)
    4363:	aa                   	stos   %al,%es:(%rdi)
    4364:	aa                   	stos   %al,%es:(%rdi)
    4365:	aa                   	stos   %al,%es:(%rdi)
    4366:	aa                   	stos   %al,%es:(%rdi)
    4367:	aa                   	stos   %al,%es:(%rdi)
    4368:	aa                   	stos   %al,%es:(%rdi)
    4369:	aa                   	stos   %al,%es:(%rdi)
    436a:	aa                   	stos   %al,%es:(%rdi)
    436b:	aa                   	stos   %al,%es:(%rdi)
    436c:	aa                   	stos   %al,%es:(%rdi)
    436d:	aa                   	stos   %al,%es:(%rdi)
    436e:	aa                   	stos   %al,%es:(%rdi)
    436f:	aa                   	stos   %al,%es:(%rdi)
    4370:	aa                   	stos   %al,%es:(%rdi)
    4371:	aa                   	stos   %al,%es:(%rdi)
    4372:	aa                   	stos   %al,%es:(%rdi)
    4373:	aa                   	stos   %al,%es:(%rdi)
    4374:	aa                   	stos   %al,%es:(%rdi)
    4375:	aa                   	stos   %al,%es:(%rdi)
    4376:	aa                   	stos   %al,%es:(%rdi)
    4377:	aa                   	stos   %al,%es:(%rdi)
    4378:	aa                   	stos   %al,%es:(%rdi)
    4379:	aa                   	stos   %al,%es:(%rdi)
    437a:	aa                   	stos   %al,%es:(%rdi)
    437b:	aa                   	stos   %al,%es:(%rdi)
    437c:	aa                   	stos   %al,%es:(%rdi)
    437d:	aa                   	stos   %al,%es:(%rdi)
    437e:	aa                   	stos   %al,%es:(%rdi)
    437f:	aa                   	stos   %al,%es:(%rdi)
    4380:	aa                   	stos   %al,%es:(%rdi)
    4381:	aa                   	stos   %al,%es:(%rdi)
    4382:	aa                   	stos   %al,%es:(%rdi)
    4383:	aa                   	stos   %al,%es:(%rdi)
    4384:	aa                   	stos   %al,%es:(%rdi)
    4385:	aa                   	stos   %al,%es:(%rdi)
    4386:	aa                   	stos   %al,%es:(%rdi)
    4387:	aa                   	stos   %al,%es:(%rdi)
    4388:	aa                   	stos   %al,%es:(%rdi)
    4389:	aa                   	stos   %al,%es:(%rdi)
    438a:	aa                   	stos   %al,%es:(%rdi)
    438b:	aa                   	stos   %al,%es:(%rdi)
    438c:	aa                   	stos   %al,%es:(%rdi)
    438d:	aa                   	stos   %al,%es:(%rdi)
    438e:	aa                   	stos   %al,%es:(%rdi)
    438f:	aa                   	stos   %al,%es:(%rdi)
    4390:	aa                   	stos   %al,%es:(%rdi)
    4391:	aa                   	stos   %al,%es:(%rdi)
    4392:	aa                   	stos   %al,%es:(%rdi)
    4393:	aa                   	stos   %al,%es:(%rdi)
    4394:	aa                   	stos   %al,%es:(%rdi)
    4395:	aa                   	stos   %al,%es:(%rdi)
    4396:	aa                   	stos   %al,%es:(%rdi)
    4397:	aa                   	stos   %al,%es:(%rdi)
    4398:	aa                   	stos   %al,%es:(%rdi)
    4399:	aa                   	stos   %al,%es:(%rdi)
    439a:	aa                   	stos   %al,%es:(%rdi)
    439b:	aa                   	stos   %al,%es:(%rdi)
    439c:	aa                   	stos   %al,%es:(%rdi)
    439d:	aa                   	stos   %al,%es:(%rdi)
    439e:	aa                   	stos   %al,%es:(%rdi)
    439f:	aa                   	stos   %al,%es:(%rdi)
    43a0:	aa                   	stos   %al,%es:(%rdi)
    43a1:	aa                   	stos   %al,%es:(%rdi)
    43a2:	aa                   	stos   %al,%es:(%rdi)
    43a3:	aa                   	stos   %al,%es:(%rdi)
    43a4:	aa                   	stos   %al,%es:(%rdi)
    43a5:	aa                   	stos   %al,%es:(%rdi)
    43a6:	aa                   	stos   %al,%es:(%rdi)
    43a7:	aa                   	stos   %al,%es:(%rdi)
    43a8:	aa                   	stos   %al,%es:(%rdi)
    43a9:	aa                   	stos   %al,%es:(%rdi)
    43aa:	aa                   	stos   %al,%es:(%rdi)
    43ab:	aa                   	stos   %al,%es:(%rdi)
    43ac:	aa                   	stos   %al,%es:(%rdi)
    43ad:	aa                   	stos   %al,%es:(%rdi)
    43ae:	aa                   	stos   %al,%es:(%rdi)
    43af:	aa                   	stos   %al,%es:(%rdi)
    43b0:	aa                   	stos   %al,%es:(%rdi)
    43b1:	aa                   	stos   %al,%es:(%rdi)
    43b2:	aa                   	stos   %al,%es:(%rdi)
    43b3:	aa                   	stos   %al,%es:(%rdi)
    43b4:	aa                   	stos   %al,%es:(%rdi)
    43b5:	aa                   	stos   %al,%es:(%rdi)
    43b6:	aa                   	stos   %al,%es:(%rdi)
    43b7:	aa                   	stos   %al,%es:(%rdi)
    43b8:	aa                   	stos   %al,%es:(%rdi)
    43b9:	aa                   	stos   %al,%es:(%rdi)
    43ba:	aa                   	stos   %al,%es:(%rdi)
    43bb:	aa                   	stos   %al,%es:(%rdi)
    43bc:	aa                   	stos   %al,%es:(%rdi)
    43bd:	aa                   	stos   %al,%es:(%rdi)
    43be:	aa                   	stos   %al,%es:(%rdi)
    43bf:	aa                   	stos   %al,%es:(%rdi)
    43c0:	aa                   	stos   %al,%es:(%rdi)
    43c1:	aa                   	stos   %al,%es:(%rdi)
    43c2:	aa                   	stos   %al,%es:(%rdi)
    43c3:	aa                   	stos   %al,%es:(%rdi)
    43c4:	aa                   	stos   %al,%es:(%rdi)
    43c5:	aa                   	stos   %al,%es:(%rdi)
    43c6:	aa                   	stos   %al,%es:(%rdi)
    43c7:	aa                   	stos   %al,%es:(%rdi)
    43c8:	aa                   	stos   %al,%es:(%rdi)
    43c9:	aa                   	stos   %al,%es:(%rdi)
    43ca:	aa                   	stos   %al,%es:(%rdi)
    43cb:	aa                   	stos   %al,%es:(%rdi)
    43cc:	aa                   	stos   %al,%es:(%rdi)
    43cd:	aa                   	stos   %al,%es:(%rdi)
    43ce:	aa                   	stos   %al,%es:(%rdi)
    43cf:	aa                   	stos   %al,%es:(%rdi)
    43d0:	aa                   	stos   %al,%es:(%rdi)
    43d1:	aa                   	stos   %al,%es:(%rdi)
    43d2:	aa                   	stos   %al,%es:(%rdi)
    43d3:	aa                   	stos   %al,%es:(%rdi)
    43d4:	aa                   	stos   %al,%es:(%rdi)
    43d5:	aa                   	stos   %al,%es:(%rdi)
    43d6:	aa                   	stos   %al,%es:(%rdi)
    43d7:	aa                   	stos   %al,%es:(%rdi)
    43d8:	aa                   	stos   %al,%es:(%rdi)
    43d9:	aa                   	stos   %al,%es:(%rdi)
    43da:	aa                   	stos   %al,%es:(%rdi)
    43db:	aa                   	stos   %al,%es:(%rdi)
    43dc:	aa                   	stos   %al,%es:(%rdi)
    43dd:	aa                   	stos   %al,%es:(%rdi)
    43de:	aa                   	stos   %al,%es:(%rdi)
    43df:	aa                   	stos   %al,%es:(%rdi)
    43e0:	aa                   	stos   %al,%es:(%rdi)
    43e1:	aa                   	stos   %al,%es:(%rdi)
    43e2:	aa                   	stos   %al,%es:(%rdi)
    43e3:	aa                   	stos   %al,%es:(%rdi)
    43e4:	aa                   	stos   %al,%es:(%rdi)
    43e5:	aa                   	stos   %al,%es:(%rdi)
    43e6:	aa                   	stos   %al,%es:(%rdi)
    43e7:	aa                   	stos   %al,%es:(%rdi)
    43e8:	aa                   	stos   %al,%es:(%rdi)
    43e9:	aa                   	stos   %al,%es:(%rdi)
    43ea:	aa                   	stos   %al,%es:(%rdi)
    43eb:	aa                   	stos   %al,%es:(%rdi)
    43ec:	aa                   	stos   %al,%es:(%rdi)
    43ed:	aa                   	stos   %al,%es:(%rdi)
    43ee:	aa                   	stos   %al,%es:(%rdi)
    43ef:	aa                   	stos   %al,%es:(%rdi)
    43f0:	aa                   	stos   %al,%es:(%rdi)
    43f1:	aa                   	stos   %al,%es:(%rdi)
    43f2:	aa                   	stos   %al,%es:(%rdi)
    43f3:	aa                   	stos   %al,%es:(%rdi)
    43f4:	aa                   	stos   %al,%es:(%rdi)
    43f5:	aa                   	stos   %al,%es:(%rdi)
    43f6:	aa                   	stos   %al,%es:(%rdi)
    43f7:	aa                   	stos   %al,%es:(%rdi)
    43f8:	aa                   	stos   %al,%es:(%rdi)
    43f9:	aa                   	stos   %al,%es:(%rdi)
    43fa:	aa                   	stos   %al,%es:(%rdi)
    43fb:	aa                   	stos   %al,%es:(%rdi)
    43fc:	aa                   	stos   %al,%es:(%rdi)
    43fd:	aa                   	stos   %al,%es:(%rdi)
    43fe:	aa                   	stos   %al,%es:(%rdi)
    43ff:	aa                   	stos   %al,%es:(%rdi)
    4400:	aa                   	stos   %al,%es:(%rdi)
    4401:	aa                   	stos   %al,%es:(%rdi)
    4402:	aa                   	stos   %al,%es:(%rdi)
    4403:	aa                   	stos   %al,%es:(%rdi)
    4404:	aa                   	stos   %al,%es:(%rdi)
    4405:	aa                   	stos   %al,%es:(%rdi)
    4406:	aa                   	stos   %al,%es:(%rdi)
    4407:	aa                   	stos   %al,%es:(%rdi)
    4408:	aa                   	stos   %al,%es:(%rdi)
    4409:	aa                   	stos   %al,%es:(%rdi)
    440a:	aa                   	stos   %al,%es:(%rdi)
    440b:	aa                   	stos   %al,%es:(%rdi)
    440c:	aa                   	stos   %al,%es:(%rdi)
    440d:	aa                   	stos   %al,%es:(%rdi)
    440e:	aa                   	stos   %al,%es:(%rdi)
    440f:	aa                   	stos   %al,%es:(%rdi)
    4410:	aa                   	stos   %al,%es:(%rdi)
    4411:	aa                   	stos   %al,%es:(%rdi)
    4412:	aa                   	stos   %al,%es:(%rdi)
    4413:	aa                   	stos   %al,%es:(%rdi)
    4414:	aa                   	stos   %al,%es:(%rdi)
    4415:	aa                   	stos   %al,%es:(%rdi)
    4416:	aa                   	stos   %al,%es:(%rdi)
    4417:	aa                   	stos   %al,%es:(%rdi)
    4418:	aa                   	stos   %al,%es:(%rdi)
    4419:	aa                   	stos   %al,%es:(%rdi)
    441a:	aa                   	stos   %al,%es:(%rdi)
    441b:	aa                   	stos   %al,%es:(%rdi)
    441c:	aa                   	stos   %al,%es:(%rdi)
    441d:	aa                   	stos   %al,%es:(%rdi)
    441e:	aa                   	stos   %al,%es:(%rdi)
    441f:	aa                   	stos   %al,%es:(%rdi)
    4420:	aa                   	stos   %al,%es:(%rdi)
    4421:	aa                   	stos   %al,%es:(%rdi)
    4422:	aa                   	stos   %al,%es:(%rdi)
    4423:	aa                   	stos   %al,%es:(%rdi)
    4424:	aa                   	stos   %al,%es:(%rdi)
    4425:	aa                   	stos   %al,%es:(%rdi)
    4426:	aa                   	stos   %al,%es:(%rdi)
    4427:	aa                   	stos   %al,%es:(%rdi)
    4428:	aa                   	stos   %al,%es:(%rdi)
    4429:	aa                   	stos   %al,%es:(%rdi)
    442a:	aa                   	stos   %al,%es:(%rdi)
    442b:	aa                   	stos   %al,%es:(%rdi)
    442c:	aa                   	stos   %al,%es:(%rdi)
    442d:	aa                   	stos   %al,%es:(%rdi)
    442e:	aa                   	stos   %al,%es:(%rdi)
    442f:	aa                   	stos   %al,%es:(%rdi)
    4430:	aa                   	stos   %al,%es:(%rdi)
    4431:	aa                   	stos   %al,%es:(%rdi)
    4432:	aa                   	stos   %al,%es:(%rdi)
    4433:	aa                   	stos   %al,%es:(%rdi)
    4434:	aa                   	stos   %al,%es:(%rdi)
    4435:	aa                   	stos   %al,%es:(%rdi)
    4436:	aa                   	stos   %al,%es:(%rdi)
    4437:	aa                   	stos   %al,%es:(%rdi)
    4438:	aa                   	stos   %al,%es:(%rdi)
    4439:	aa                   	stos   %al,%es:(%rdi)
    443a:	aa                   	stos   %al,%es:(%rdi)
    443b:	aa                   	stos   %al,%es:(%rdi)
    443c:	aa                   	stos   %al,%es:(%rdi)
    443d:	aa                   	stos   %al,%es:(%rdi)
    443e:	aa                   	stos   %al,%es:(%rdi)
    443f:	aa                   	stos   %al,%es:(%rdi)
    4440:	aa                   	stos   %al,%es:(%rdi)
    4441:	aa                   	stos   %al,%es:(%rdi)
    4442:	aa                   	stos   %al,%es:(%rdi)
    4443:	aa                   	stos   %al,%es:(%rdi)
    4444:	aa                   	stos   %al,%es:(%rdi)
    4445:	aa                   	stos   %al,%es:(%rdi)
    4446:	aa                   	stos   %al,%es:(%rdi)
    4447:	aa                   	stos   %al,%es:(%rdi)
    4448:	aa                   	stos   %al,%es:(%rdi)
    4449:	aa                   	stos   %al,%es:(%rdi)
    444a:	aa                   	stos   %al,%es:(%rdi)
    444b:	aa                   	stos   %al,%es:(%rdi)
    444c:	aa                   	stos   %al,%es:(%rdi)
    444d:	aa                   	stos   %al,%es:(%rdi)
    444e:	aa                   	stos   %al,%es:(%rdi)
    444f:	aa                   	stos   %al,%es:(%rdi)
    4450:	aa                   	stos   %al,%es:(%rdi)
    4451:	aa                   	stos   %al,%es:(%rdi)
    4452:	aa                   	stos   %al,%es:(%rdi)
    4453:	aa                   	stos   %al,%es:(%rdi)
    4454:	aa                   	stos   %al,%es:(%rdi)
    4455:	aa                   	stos   %al,%es:(%rdi)
    4456:	aa                   	stos   %al,%es:(%rdi)
    4457:	aa                   	stos   %al,%es:(%rdi)
    4458:	aa                   	stos   %al,%es:(%rdi)
    4459:	aa                   	stos   %al,%es:(%rdi)
    445a:	aa                   	stos   %al,%es:(%rdi)
    445b:	aa                   	stos   %al,%es:(%rdi)
    445c:	aa                   	stos   %al,%es:(%rdi)
    445d:	aa                   	stos   %al,%es:(%rdi)
    445e:	aa                   	stos   %al,%es:(%rdi)
    445f:	aa                   	stos   %al,%es:(%rdi)
    4460:	aa                   	stos   %al,%es:(%rdi)
    4461:	aa                   	stos   %al,%es:(%rdi)
    4462:	aa                   	stos   %al,%es:(%rdi)
    4463:	aa                   	stos   %al,%es:(%rdi)
    4464:	aa                   	stos   %al,%es:(%rdi)
    4465:	aa                   	stos   %al,%es:(%rdi)
    4466:	aa                   	stos   %al,%es:(%rdi)
    4467:	aa                   	stos   %al,%es:(%rdi)
    4468:	aa                   	stos   %al,%es:(%rdi)
    4469:	aa                   	stos   %al,%es:(%rdi)
    446a:	aa                   	stos   %al,%es:(%rdi)
    446b:	aa                   	stos   %al,%es:(%rdi)
    446c:	aa                   	stos   %al,%es:(%rdi)
    446d:	aa                   	stos   %al,%es:(%rdi)
    446e:	aa                   	stos   %al,%es:(%rdi)
    446f:	aa                   	stos   %al,%es:(%rdi)
    4470:	aa                   	stos   %al,%es:(%rdi)
    4471:	aa                   	stos   %al,%es:(%rdi)
    4472:	aa                   	stos   %al,%es:(%rdi)
    4473:	aa                   	stos   %al,%es:(%rdi)
    4474:	aa                   	stos   %al,%es:(%rdi)
    4475:	aa                   	stos   %al,%es:(%rdi)
    4476:	aa                   	stos   %al,%es:(%rdi)
    4477:	aa                   	stos   %al,%es:(%rdi)
    4478:	aa                   	stos   %al,%es:(%rdi)
    4479:	aa                   	stos   %al,%es:(%rdi)
    447a:	aa                   	stos   %al,%es:(%rdi)
    447b:	aa                   	stos   %al,%es:(%rdi)
    447c:	aa                   	stos   %al,%es:(%rdi)
    447d:	aa                   	stos   %al,%es:(%rdi)
    447e:	aa                   	stos   %al,%es:(%rdi)
    447f:	aa                   	stos   %al,%es:(%rdi)
    4480:	aa                   	stos   %al,%es:(%rdi)
    4481:	aa                   	stos   %al,%es:(%rdi)
    4482:	aa                   	stos   %al,%es:(%rdi)
    4483:	aa                   	stos   %al,%es:(%rdi)
    4484:	aa                   	stos   %al,%es:(%rdi)
    4485:	aa                   	stos   %al,%es:(%rdi)
    4486:	aa                   	stos   %al,%es:(%rdi)
    4487:	aa                   	stos   %al,%es:(%rdi)
    4488:	aa                   	stos   %al,%es:(%rdi)
    4489:	aa                   	stos   %al,%es:(%rdi)
    448a:	aa                   	stos   %al,%es:(%rdi)
    448b:	aa                   	stos   %al,%es:(%rdi)
    448c:	aa                   	stos   %al,%es:(%rdi)
    448d:	aa                   	stos   %al,%es:(%rdi)
    448e:	aa                   	stos   %al,%es:(%rdi)
    448f:	aa                   	stos   %al,%es:(%rdi)
    4490:	aa                   	stos   %al,%es:(%rdi)
    4491:	aa                   	stos   %al,%es:(%rdi)
    4492:	aa                   	stos   %al,%es:(%rdi)
    4493:	aa                   	stos   %al,%es:(%rdi)
    4494:	aa                   	stos   %al,%es:(%rdi)
    4495:	aa                   	stos   %al,%es:(%rdi)
    4496:	aa                   	stos   %al,%es:(%rdi)
    4497:	aa                   	stos   %al,%es:(%rdi)
    4498:	aa                   	stos   %al,%es:(%rdi)
    4499:	aa                   	stos   %al,%es:(%rdi)
    449a:	aa                   	stos   %al,%es:(%rdi)
    449b:	aa                   	stos   %al,%es:(%rdi)
    449c:	aa                   	stos   %al,%es:(%rdi)
    449d:	aa                   	stos   %al,%es:(%rdi)
    449e:	aa                   	stos   %al,%es:(%rdi)
    449f:	aa                   	stos   %al,%es:(%rdi)
    44a0:	aa                   	stos   %al,%es:(%rdi)
    44a1:	aa                   	stos   %al,%es:(%rdi)
    44a2:	aa                   	stos   %al,%es:(%rdi)
    44a3:	aa                   	stos   %al,%es:(%rdi)
    44a4:	aa                   	stos   %al,%es:(%rdi)
    44a5:	aa                   	stos   %al,%es:(%rdi)
    44a6:	aa                   	stos   %al,%es:(%rdi)
    44a7:	aa                   	stos   %al,%es:(%rdi)
    44a8:	aa                   	stos   %al,%es:(%rdi)
    44a9:	aa                   	stos   %al,%es:(%rdi)
    44aa:	aa                   	stos   %al,%es:(%rdi)
    44ab:	aa                   	stos   %al,%es:(%rdi)
    44ac:	aa                   	stos   %al,%es:(%rdi)
    44ad:	aa                   	stos   %al,%es:(%rdi)
    44ae:	aa                   	stos   %al,%es:(%rdi)
    44af:	aa                   	stos   %al,%es:(%rdi)
    44b0:	aa                   	stos   %al,%es:(%rdi)
    44b1:	aa                   	stos   %al,%es:(%rdi)
    44b2:	aa                   	stos   %al,%es:(%rdi)
    44b3:	aa                   	stos   %al,%es:(%rdi)
    44b4:	aa                   	stos   %al,%es:(%rdi)
    44b5:	aa                   	stos   %al,%es:(%rdi)
    44b6:	aa                   	stos   %al,%es:(%rdi)
    44b7:	aa                   	stos   %al,%es:(%rdi)
    44b8:	aa                   	stos   %al,%es:(%rdi)
    44b9:	aa                   	stos   %al,%es:(%rdi)
    44ba:	aa                   	stos   %al,%es:(%rdi)
    44bb:	aa                   	stos   %al,%es:(%rdi)
    44bc:	aa                   	stos   %al,%es:(%rdi)
    44bd:	aa                   	stos   %al,%es:(%rdi)
    44be:	aa                   	stos   %al,%es:(%rdi)
    44bf:	aa                   	stos   %al,%es:(%rdi)
    44c0:	aa                   	stos   %al,%es:(%rdi)
    44c1:	aa                   	stos   %al,%es:(%rdi)
    44c2:	aa                   	stos   %al,%es:(%rdi)
    44c3:	aa                   	stos   %al,%es:(%rdi)
    44c4:	aa                   	stos   %al,%es:(%rdi)
    44c5:	aa                   	stos   %al,%es:(%rdi)
    44c6:	aa                   	stos   %al,%es:(%rdi)
    44c7:	aa                   	stos   %al,%es:(%rdi)
    44c8:	aa                   	stos   %al,%es:(%rdi)
    44c9:	aa                   	stos   %al,%es:(%rdi)
    44ca:	aa                   	stos   %al,%es:(%rdi)
    44cb:	aa                   	stos   %al,%es:(%rdi)
    44cc:	aa                   	stos   %al,%es:(%rdi)
    44cd:	aa                   	stos   %al,%es:(%rdi)
    44ce:	aa                   	stos   %al,%es:(%rdi)
    44cf:	aa                   	stos   %al,%es:(%rdi)
    44d0:	aa                   	stos   %al,%es:(%rdi)
    44d1:	aa                   	stos   %al,%es:(%rdi)
    44d2:	aa                   	stos   %al,%es:(%rdi)
    44d3:	aa                   	stos   %al,%es:(%rdi)
    44d4:	aa                   	stos   %al,%es:(%rdi)
    44d5:	aa                   	stos   %al,%es:(%rdi)
    44d6:	aa                   	stos   %al,%es:(%rdi)
    44d7:	aa                   	stos   %al,%es:(%rdi)
    44d8:	aa                   	stos   %al,%es:(%rdi)
    44d9:	aa                   	stos   %al,%es:(%rdi)
    44da:	aa                   	stos   %al,%es:(%rdi)
    44db:	aa                   	stos   %al,%es:(%rdi)
    44dc:	aa                   	stos   %al,%es:(%rdi)
    44dd:	aa                   	stos   %al,%es:(%rdi)
    44de:	aa                   	stos   %al,%es:(%rdi)
    44df:	aa                   	stos   %al,%es:(%rdi)
    44e0:	aa                   	stos   %al,%es:(%rdi)
    44e1:	aa                   	stos   %al,%es:(%rdi)
    44e2:	aa                   	stos   %al,%es:(%rdi)
    44e3:	aa                   	stos   %al,%es:(%rdi)
    44e4:	aa                   	stos   %al,%es:(%rdi)
    44e5:	aa                   	stos   %al,%es:(%rdi)
    44e6:	aa                   	stos   %al,%es:(%rdi)
    44e7:	aa                   	stos   %al,%es:(%rdi)
    44e8:	aa                   	stos   %al,%es:(%rdi)
    44e9:	aa                   	stos   %al,%es:(%rdi)
    44ea:	aa                   	stos   %al,%es:(%rdi)
    44eb:	aa                   	stos   %al,%es:(%rdi)
    44ec:	aa                   	stos   %al,%es:(%rdi)
    44ed:	aa                   	stos   %al,%es:(%rdi)
    44ee:	aa                   	stos   %al,%es:(%rdi)
    44ef:	aa                   	stos   %al,%es:(%rdi)
    44f0:	aa                   	stos   %al,%es:(%rdi)
    44f1:	aa                   	stos   %al,%es:(%rdi)
    44f2:	aa                   	stos   %al,%es:(%rdi)
    44f3:	aa                   	stos   %al,%es:(%rdi)
    44f4:	aa                   	stos   %al,%es:(%rdi)
    44f5:	aa                   	stos   %al,%es:(%rdi)
    44f6:	aa                   	stos   %al,%es:(%rdi)
    44f7:	aa                   	stos   %al,%es:(%rdi)
    44f8:	aa                   	stos   %al,%es:(%rdi)
    44f9:	aa                   	stos   %al,%es:(%rdi)
    44fa:	aa                   	stos   %al,%es:(%rdi)
    44fb:	aa                   	stos   %al,%es:(%rdi)
    44fc:	aa                   	stos   %al,%es:(%rdi)
    44fd:	aa                   	stos   %al,%es:(%rdi)
    44fe:	aa                   	stos   %al,%es:(%rdi)
    44ff:	aa                   	stos   %al,%es:(%rdi)
    4500:	aa                   	stos   %al,%es:(%rdi)
    4501:	aa                   	stos   %al,%es:(%rdi)
    4502:	aa                   	stos   %al,%es:(%rdi)
    4503:	aa                   	stos   %al,%es:(%rdi)
    4504:	aa                   	stos   %al,%es:(%rdi)
    4505:	aa                   	stos   %al,%es:(%rdi)
    4506:	aa                   	stos   %al,%es:(%rdi)
    4507:	aa                   	stos   %al,%es:(%rdi)
    4508:	aa                   	stos   %al,%es:(%rdi)
    4509:	aa                   	stos   %al,%es:(%rdi)
    450a:	aa                   	stos   %al,%es:(%rdi)
    450b:	aa                   	stos   %al,%es:(%rdi)
    450c:	aa                   	stos   %al,%es:(%rdi)
    450d:	aa                   	stos   %al,%es:(%rdi)
    450e:	aa                   	stos   %al,%es:(%rdi)
    450f:	aa                   	stos   %al,%es:(%rdi)
    4510:	aa                   	stos   %al,%es:(%rdi)
    4511:	aa                   	stos   %al,%es:(%rdi)
    4512:	aa                   	stos   %al,%es:(%rdi)
    4513:	aa                   	stos   %al,%es:(%rdi)
    4514:	aa                   	stos   %al,%es:(%rdi)
    4515:	aa                   	stos   %al,%es:(%rdi)
    4516:	aa                   	stos   %al,%es:(%rdi)
    4517:	aa                   	stos   %al,%es:(%rdi)
    4518:	aa                   	stos   %al,%es:(%rdi)
    4519:	aa                   	stos   %al,%es:(%rdi)
    451a:	aa                   	stos   %al,%es:(%rdi)
    451b:	aa                   	stos   %al,%es:(%rdi)
    451c:	aa                   	stos   %al,%es:(%rdi)
    451d:	aa                   	stos   %al,%es:(%rdi)
    451e:	aa                   	stos   %al,%es:(%rdi)
    451f:	aa                   	stos   %al,%es:(%rdi)
    4520:	aa                   	stos   %al,%es:(%rdi)
    4521:	aa                   	stos   %al,%es:(%rdi)
    4522:	aa                   	stos   %al,%es:(%rdi)
    4523:	aa                   	stos   %al,%es:(%rdi)
    4524:	aa                   	stos   %al,%es:(%rdi)
    4525:	aa                   	stos   %al,%es:(%rdi)
    4526:	aa                   	stos   %al,%es:(%rdi)
    4527:	aa                   	stos   %al,%es:(%rdi)
    4528:	aa                   	stos   %al,%es:(%rdi)
    4529:	aa                   	stos   %al,%es:(%rdi)
    452a:	aa                   	stos   %al,%es:(%rdi)
    452b:	aa                   	stos   %al,%es:(%rdi)
    452c:	aa                   	stos   %al,%es:(%rdi)
    452d:	aa                   	stos   %al,%es:(%rdi)
    452e:	aa                   	stos   %al,%es:(%rdi)
    452f:	aa                   	stos   %al,%es:(%rdi)
    4530:	aa                   	stos   %al,%es:(%rdi)
    4531:	aa                   	stos   %al,%es:(%rdi)
    4532:	aa                   	stos   %al,%es:(%rdi)
    4533:	aa                   	stos   %al,%es:(%rdi)
    4534:	aa                   	stos   %al,%es:(%rdi)
    4535:	aa                   	stos   %al,%es:(%rdi)
    4536:	aa                   	stos   %al,%es:(%rdi)
    4537:	aa                   	stos   %al,%es:(%rdi)
    4538:	aa                   	stos   %al,%es:(%rdi)
    4539:	aa                   	stos   %al,%es:(%rdi)
    453a:	aa                   	stos   %al,%es:(%rdi)
    453b:	aa                   	stos   %al,%es:(%rdi)
    453c:	aa                   	stos   %al,%es:(%rdi)
    453d:	aa                   	stos   %al,%es:(%rdi)
    453e:	aa                   	stos   %al,%es:(%rdi)
    453f:	aa                   	stos   %al,%es:(%rdi)
    4540:	aa                   	stos   %al,%es:(%rdi)
    4541:	aa                   	stos   %al,%es:(%rdi)
    4542:	aa                   	stos   %al,%es:(%rdi)
    4543:	aa                   	stos   %al,%es:(%rdi)
    4544:	aa                   	stos   %al,%es:(%rdi)
    4545:	aa                   	stos   %al,%es:(%rdi)
    4546:	aa                   	stos   %al,%es:(%rdi)
    4547:	aa                   	stos   %al,%es:(%rdi)
    4548:	aa                   	stos   %al,%es:(%rdi)
    4549:	aa                   	stos   %al,%es:(%rdi)
    454a:	aa                   	stos   %al,%es:(%rdi)
    454b:	aa                   	stos   %al,%es:(%rdi)
    454c:	aa                   	stos   %al,%es:(%rdi)
    454d:	aa                   	stos   %al,%es:(%rdi)
    454e:	aa                   	stos   %al,%es:(%rdi)
    454f:	aa                   	stos   %al,%es:(%rdi)
    4550:	aa                   	stos   %al,%es:(%rdi)
    4551:	aa                   	stos   %al,%es:(%rdi)
    4552:	aa                   	stos   %al,%es:(%rdi)
    4553:	aa                   	stos   %al,%es:(%rdi)
    4554:	aa                   	stos   %al,%es:(%rdi)
    4555:	aa                   	stos   %al,%es:(%rdi)
    4556:	aa                   	stos   %al,%es:(%rdi)
    4557:	aa                   	stos   %al,%es:(%rdi)
    4558:	aa                   	stos   %al,%es:(%rdi)
    4559:	aa                   	stos   %al,%es:(%rdi)
    455a:	aa                   	stos   %al,%es:(%rdi)
    455b:	aa                   	stos   %al,%es:(%rdi)
    455c:	aa                   	stos   %al,%es:(%rdi)
    455d:	aa                   	stos   %al,%es:(%rdi)
    455e:	aa                   	stos   %al,%es:(%rdi)
    455f:	aa                   	stos   %al,%es:(%rdi)
    4560:	aa                   	stos   %al,%es:(%rdi)
    4561:	aa                   	stos   %al,%es:(%rdi)
    4562:	aa                   	stos   %al,%es:(%rdi)
    4563:	aa                   	stos   %al,%es:(%rdi)
    4564:	aa                   	stos   %al,%es:(%rdi)
    4565:	aa                   	stos   %al,%es:(%rdi)
    4566:	aa                   	stos   %al,%es:(%rdi)
    4567:	aa                   	stos   %al,%es:(%rdi)
    4568:	aa                   	stos   %al,%es:(%rdi)
    4569:	aa                   	stos   %al,%es:(%rdi)
    456a:	aa                   	stos   %al,%es:(%rdi)
    456b:	aa                   	stos   %al,%es:(%rdi)
    456c:	aa                   	stos   %al,%es:(%rdi)
    456d:	aa                   	stos   %al,%es:(%rdi)
    456e:	aa                   	stos   %al,%es:(%rdi)
    456f:	aa                   	stos   %al,%es:(%rdi)
    4570:	aa                   	stos   %al,%es:(%rdi)
    4571:	aa                   	stos   %al,%es:(%rdi)
    4572:	aa                   	stos   %al,%es:(%rdi)
    4573:	aa                   	stos   %al,%es:(%rdi)
    4574:	aa                   	stos   %al,%es:(%rdi)
    4575:	aa                   	stos   %al,%es:(%rdi)
    4576:	aa                   	stos   %al,%es:(%rdi)
    4577:	aa                   	stos   %al,%es:(%rdi)
    4578:	aa                   	stos   %al,%es:(%rdi)
    4579:	aa                   	stos   %al,%es:(%rdi)
    457a:	aa                   	stos   %al,%es:(%rdi)
    457b:	aa                   	stos   %al,%es:(%rdi)
    457c:	aa                   	stos   %al,%es:(%rdi)
    457d:	aa                   	stos   %al,%es:(%rdi)
    457e:	aa                   	stos   %al,%es:(%rdi)
    457f:	aa                   	stos   %al,%es:(%rdi)
    4580:	aa                   	stos   %al,%es:(%rdi)
    4581:	aa                   	stos   %al,%es:(%rdi)
    4582:	aa                   	stos   %al,%es:(%rdi)
    4583:	aa                   	stos   %al,%es:(%rdi)
    4584:	aa                   	stos   %al,%es:(%rdi)
    4585:	aa                   	stos   %al,%es:(%rdi)
    4586:	aa                   	stos   %al,%es:(%rdi)
    4587:	aa                   	stos   %al,%es:(%rdi)
    4588:	aa                   	stos   %al,%es:(%rdi)
    4589:	aa                   	stos   %al,%es:(%rdi)
    458a:	aa                   	stos   %al,%es:(%rdi)
    458b:	aa                   	stos   %al,%es:(%rdi)
    458c:	aa                   	stos   %al,%es:(%rdi)
    458d:	aa                   	stos   %al,%es:(%rdi)
    458e:	aa                   	stos   %al,%es:(%rdi)
    458f:	aa                   	stos   %al,%es:(%rdi)
    4590:	aa                   	stos   %al,%es:(%rdi)
    4591:	aa                   	stos   %al,%es:(%rdi)
    4592:	aa                   	stos   %al,%es:(%rdi)
    4593:	aa                   	stos   %al,%es:(%rdi)
    4594:	aa                   	stos   %al,%es:(%rdi)
    4595:	aa                   	stos   %al,%es:(%rdi)
    4596:	aa                   	stos   %al,%es:(%rdi)
    4597:	aa                   	stos   %al,%es:(%rdi)
    4598:	aa                   	stos   %al,%es:(%rdi)
    4599:	aa                   	stos   %al,%es:(%rdi)
    459a:	aa                   	stos   %al,%es:(%rdi)
    459b:	aa                   	stos   %al,%es:(%rdi)
    459c:	aa                   	stos   %al,%es:(%rdi)
    459d:	aa                   	stos   %al,%es:(%rdi)
    459e:	aa                   	stos   %al,%es:(%rdi)
    459f:	aa                   	stos   %al,%es:(%rdi)
    45a0:	aa                   	stos   %al,%es:(%rdi)
    45a1:	aa                   	stos   %al,%es:(%rdi)
    45a2:	aa                   	stos   %al,%es:(%rdi)
    45a3:	aa                   	stos   %al,%es:(%rdi)
    45a4:	aa                   	stos   %al,%es:(%rdi)
    45a5:	aa                   	stos   %al,%es:(%rdi)
    45a6:	aa                   	stos   %al,%es:(%rdi)
    45a7:	aa                   	stos   %al,%es:(%rdi)
    45a8:	aa                   	stos   %al,%es:(%rdi)
    45a9:	aa                   	stos   %al,%es:(%rdi)
    45aa:	aa                   	stos   %al,%es:(%rdi)
    45ab:	aa                   	stos   %al,%es:(%rdi)
    45ac:	aa                   	stos   %al,%es:(%rdi)
    45ad:	aa                   	stos   %al,%es:(%rdi)
    45ae:	aa                   	stos   %al,%es:(%rdi)
    45af:	aa                   	stos   %al,%es:(%rdi)
    45b0:	aa                   	stos   %al,%es:(%rdi)
    45b1:	aa                   	stos   %al,%es:(%rdi)
    45b2:	aa                   	stos   %al,%es:(%rdi)
    45b3:	aa                   	stos   %al,%es:(%rdi)
    45b4:	aa                   	stos   %al,%es:(%rdi)
    45b5:	aa                   	stos   %al,%es:(%rdi)
    45b6:	aa                   	stos   %al,%es:(%rdi)
    45b7:	aa                   	stos   %al,%es:(%rdi)
    45b8:	aa                   	stos   %al,%es:(%rdi)
    45b9:	aa                   	stos   %al,%es:(%rdi)
    45ba:	aa                   	stos   %al,%es:(%rdi)
    45bb:	aa                   	stos   %al,%es:(%rdi)
    45bc:	aa                   	stos   %al,%es:(%rdi)
    45bd:	aa                   	stos   %al,%es:(%rdi)
    45be:	aa                   	stos   %al,%es:(%rdi)
    45bf:	aa                   	stos   %al,%es:(%rdi)
    45c0:	aa                   	stos   %al,%es:(%rdi)
    45c1:	aa                   	stos   %al,%es:(%rdi)
    45c2:	aa                   	stos   %al,%es:(%rdi)
    45c3:	aa                   	stos   %al,%es:(%rdi)
    45c4:	aa                   	stos   %al,%es:(%rdi)
    45c5:	aa                   	stos   %al,%es:(%rdi)
    45c6:	aa                   	stos   %al,%es:(%rdi)
    45c7:	aa                   	stos   %al,%es:(%rdi)
    45c8:	aa                   	stos   %al,%es:(%rdi)
    45c9:	aa                   	stos   %al,%es:(%rdi)
    45ca:	aa                   	stos   %al,%es:(%rdi)
    45cb:	aa                   	stos   %al,%es:(%rdi)
    45cc:	aa                   	stos   %al,%es:(%rdi)
    45cd:	aa                   	stos   %al,%es:(%rdi)
    45ce:	aa                   	stos   %al,%es:(%rdi)
    45cf:	aa                   	stos   %al,%es:(%rdi)
    45d0:	aa                   	stos   %al,%es:(%rdi)
    45d1:	aa                   	stos   %al,%es:(%rdi)
    45d2:	aa                   	stos   %al,%es:(%rdi)
    45d3:	aa                   	stos   %al,%es:(%rdi)
    45d4:	aa                   	stos   %al,%es:(%rdi)
    45d5:	aa                   	stos   %al,%es:(%rdi)
    45d6:	aa                   	stos   %al,%es:(%rdi)
    45d7:	aa                   	stos   %al,%es:(%rdi)
    45d8:	aa                   	stos   %al,%es:(%rdi)
    45d9:	aa                   	stos   %al,%es:(%rdi)
    45da:	aa                   	stos   %al,%es:(%rdi)
    45db:	aa                   	stos   %al,%es:(%rdi)
    45dc:	aa                   	stos   %al,%es:(%rdi)
    45dd:	aa                   	stos   %al,%es:(%rdi)
    45de:	aa                   	stos   %al,%es:(%rdi)
    45df:	aa                   	stos   %al,%es:(%rdi)
    45e0:	aa                   	stos   %al,%es:(%rdi)
    45e1:	aa                   	stos   %al,%es:(%rdi)
    45e2:	aa                   	stos   %al,%es:(%rdi)
    45e3:	aa                   	stos   %al,%es:(%rdi)
    45e4:	aa                   	stos   %al,%es:(%rdi)
    45e5:	aa                   	stos   %al,%es:(%rdi)
    45e6:	aa                   	stos   %al,%es:(%rdi)
    45e7:	aa                   	stos   %al,%es:(%rdi)
    45e8:	aa                   	stos   %al,%es:(%rdi)
    45e9:	aa                   	stos   %al,%es:(%rdi)
    45ea:	aa                   	stos   %al,%es:(%rdi)
    45eb:	aa                   	stos   %al,%es:(%rdi)
    45ec:	aa                   	stos   %al,%es:(%rdi)
    45ed:	aa                   	stos   %al,%es:(%rdi)
    45ee:	aa                   	stos   %al,%es:(%rdi)
    45ef:	aa                   	stos   %al,%es:(%rdi)
    45f0:	aa                   	stos   %al,%es:(%rdi)
    45f1:	aa                   	stos   %al,%es:(%rdi)
    45f2:	aa                   	stos   %al,%es:(%rdi)
    45f3:	aa                   	stos   %al,%es:(%rdi)
    45f4:	aa                   	stos   %al,%es:(%rdi)
    45f5:	aa                   	stos   %al,%es:(%rdi)
    45f6:	aa                   	stos   %al,%es:(%rdi)
    45f7:	aa                   	stos   %al,%es:(%rdi)
    45f8:	aa                   	stos   %al,%es:(%rdi)
    45f9:	aa                   	stos   %al,%es:(%rdi)
    45fa:	aa                   	stos   %al,%es:(%rdi)
    45fb:	aa                   	stos   %al,%es:(%rdi)
    45fc:	aa                   	stos   %al,%es:(%rdi)
    45fd:	aa                   	stos   %al,%es:(%rdi)
    45fe:	aa                   	stos   %al,%es:(%rdi)
    45ff:	aa                   	stos   %al,%es:(%rdi)
    4600:	aa                   	stos   %al,%es:(%rdi)
    4601:	aa                   	stos   %al,%es:(%rdi)
    4602:	aa                   	stos   %al,%es:(%rdi)
    4603:	aa                   	stos   %al,%es:(%rdi)
    4604:	aa                   	stos   %al,%es:(%rdi)
    4605:	aa                   	stos   %al,%es:(%rdi)
    4606:	aa                   	stos   %al,%es:(%rdi)
    4607:	aa                   	stos   %al,%es:(%rdi)
    4608:	aa                   	stos   %al,%es:(%rdi)
    4609:	aa                   	stos   %al,%es:(%rdi)
    460a:	aa                   	stos   %al,%es:(%rdi)
    460b:	aa                   	stos   %al,%es:(%rdi)
    460c:	aa                   	stos   %al,%es:(%rdi)
    460d:	aa                   	stos   %al,%es:(%rdi)
    460e:	aa                   	stos   %al,%es:(%rdi)
    460f:	aa                   	stos   %al,%es:(%rdi)
    4610:	aa                   	stos   %al,%es:(%rdi)
    4611:	aa                   	stos   %al,%es:(%rdi)
    4612:	aa                   	stos   %al,%es:(%rdi)
    4613:	aa                   	stos   %al,%es:(%rdi)
    4614:	aa                   	stos   %al,%es:(%rdi)
    4615:	aa                   	stos   %al,%es:(%rdi)
    4616:	aa                   	stos   %al,%es:(%rdi)
    4617:	aa                   	stos   %al,%es:(%rdi)
    4618:	aa                   	stos   %al,%es:(%rdi)
    4619:	aa                   	stos   %al,%es:(%rdi)
    461a:	aa                   	stos   %al,%es:(%rdi)
    461b:	aa                   	stos   %al,%es:(%rdi)
    461c:	aa                   	stos   %al,%es:(%rdi)
    461d:	aa                   	stos   %al,%es:(%rdi)
    461e:	aa                   	stos   %al,%es:(%rdi)
    461f:	aa                   	stos   %al,%es:(%rdi)
    4620:	aa                   	stos   %al,%es:(%rdi)
    4621:	aa                   	stos   %al,%es:(%rdi)
    4622:	aa                   	stos   %al,%es:(%rdi)
    4623:	aa                   	stos   %al,%es:(%rdi)
    4624:	aa                   	stos   %al,%es:(%rdi)
    4625:	aa                   	stos   %al,%es:(%rdi)
    4626:	aa                   	stos   %al,%es:(%rdi)
    4627:	aa                   	stos   %al,%es:(%rdi)
    4628:	aa                   	stos   %al,%es:(%rdi)
    4629:	aa                   	stos   %al,%es:(%rdi)
    462a:	aa                   	stos   %al,%es:(%rdi)
    462b:	aa                   	stos   %al,%es:(%rdi)
    462c:	aa                   	stos   %al,%es:(%rdi)
    462d:	aa                   	stos   %al,%es:(%rdi)
    462e:	aa                   	stos   %al,%es:(%rdi)
    462f:	aa                   	stos   %al,%es:(%rdi)
    4630:	aa                   	stos   %al,%es:(%rdi)
    4631:	aa                   	stos   %al,%es:(%rdi)
    4632:	aa                   	stos   %al,%es:(%rdi)
    4633:	aa                   	stos   %al,%es:(%rdi)
    4634:	aa                   	stos   %al,%es:(%rdi)
    4635:	aa                   	stos   %al,%es:(%rdi)
    4636:	aa                   	stos   %al,%es:(%rdi)
    4637:	aa                   	stos   %al,%es:(%rdi)
    4638:	aa                   	stos   %al,%es:(%rdi)
    4639:	aa                   	stos   %al,%es:(%rdi)
    463a:	aa                   	stos   %al,%es:(%rdi)
    463b:	aa                   	stos   %al,%es:(%rdi)
    463c:	aa                   	stos   %al,%es:(%rdi)
    463d:	aa                   	stos   %al,%es:(%rdi)
    463e:	aa                   	stos   %al,%es:(%rdi)
    463f:	aa                   	stos   %al,%es:(%rdi)
    4640:	aa                   	stos   %al,%es:(%rdi)
    4641:	aa                   	stos   %al,%es:(%rdi)
    4642:	aa                   	stos   %al,%es:(%rdi)
    4643:	aa                   	stos   %al,%es:(%rdi)
    4644:	aa                   	stos   %al,%es:(%rdi)
    4645:	aa                   	stos   %al,%es:(%rdi)
    4646:	aa                   	stos   %al,%es:(%rdi)
    4647:	aa                   	stos   %al,%es:(%rdi)
    4648:	aa                   	stos   %al,%es:(%rdi)
    4649:	aa                   	stos   %al,%es:(%rdi)
    464a:	aa                   	stos   %al,%es:(%rdi)
    464b:	aa                   	stos   %al,%es:(%rdi)
    464c:	aa                   	stos   %al,%es:(%rdi)
    464d:	aa                   	stos   %al,%es:(%rdi)
    464e:	aa                   	stos   %al,%es:(%rdi)
    464f:	aa                   	stos   %al,%es:(%rdi)
    4650:	aa                   	stos   %al,%es:(%rdi)
    4651:	aa                   	stos   %al,%es:(%rdi)
    4652:	aa                   	stos   %al,%es:(%rdi)
    4653:	aa                   	stos   %al,%es:(%rdi)
    4654:	aa                   	stos   %al,%es:(%rdi)
    4655:	aa                   	stos   %al,%es:(%rdi)
    4656:	aa                   	stos   %al,%es:(%rdi)
    4657:	aa                   	stos   %al,%es:(%rdi)
    4658:	aa                   	stos   %al,%es:(%rdi)
    4659:	aa                   	stos   %al,%es:(%rdi)
    465a:	aa                   	stos   %al,%es:(%rdi)
    465b:	aa                   	stos   %al,%es:(%rdi)
    465c:	aa                   	stos   %al,%es:(%rdi)
    465d:	aa                   	stos   %al,%es:(%rdi)
    465e:	aa                   	stos   %al,%es:(%rdi)
    465f:	aa                   	stos   %al,%es:(%rdi)
    4660:	aa                   	stos   %al,%es:(%rdi)
    4661:	aa                   	stos   %al,%es:(%rdi)
    4662:	aa                   	stos   %al,%es:(%rdi)
    4663:	aa                   	stos   %al,%es:(%rdi)
    4664:	aa                   	stos   %al,%es:(%rdi)
    4665:	aa                   	stos   %al,%es:(%rdi)
    4666:	aa                   	stos   %al,%es:(%rdi)
    4667:	aa                   	stos   %al,%es:(%rdi)
    4668:	aa                   	stos   %al,%es:(%rdi)
    4669:	aa                   	stos   %al,%es:(%rdi)
    466a:	aa                   	stos   %al,%es:(%rdi)
    466b:	aa                   	stos   %al,%es:(%rdi)
    466c:	aa                   	stos   %al,%es:(%rdi)
    466d:	aa                   	stos   %al,%es:(%rdi)
    466e:	aa                   	stos   %al,%es:(%rdi)
    466f:	aa                   	stos   %al,%es:(%rdi)
    4670:	aa                   	stos   %al,%es:(%rdi)
    4671:	aa                   	stos   %al,%es:(%rdi)
    4672:	aa                   	stos   %al,%es:(%rdi)
    4673:	aa                   	stos   %al,%es:(%rdi)
    4674:	aa                   	stos   %al,%es:(%rdi)
    4675:	aa                   	stos   %al,%es:(%rdi)
    4676:	aa                   	stos   %al,%es:(%rdi)
    4677:	aa                   	stos   %al,%es:(%rdi)
    4678:	aa                   	stos   %al,%es:(%rdi)
    4679:	aa                   	stos   %al,%es:(%rdi)
    467a:	aa                   	stos   %al,%es:(%rdi)
    467b:	aa                   	stos   %al,%es:(%rdi)
    467c:	aa                   	stos   %al,%es:(%rdi)
    467d:	aa                   	stos   %al,%es:(%rdi)
    467e:	aa                   	stos   %al,%es:(%rdi)
    467f:	aa                   	stos   %al,%es:(%rdi)
    4680:	aa                   	stos   %al,%es:(%rdi)
    4681:	aa                   	stos   %al,%es:(%rdi)
    4682:	aa                   	stos   %al,%es:(%rdi)
    4683:	aa                   	stos   %al,%es:(%rdi)
    4684:	aa                   	stos   %al,%es:(%rdi)
    4685:	aa                   	stos   %al,%es:(%rdi)
    4686:	aa                   	stos   %al,%es:(%rdi)
    4687:	aa                   	stos   %al,%es:(%rdi)
    4688:	aa                   	stos   %al,%es:(%rdi)
    4689:	aa                   	stos   %al,%es:(%rdi)
    468a:	aa                   	stos   %al,%es:(%rdi)
    468b:	aa                   	stos   %al,%es:(%rdi)
    468c:	aa                   	stos   %al,%es:(%rdi)
    468d:	aa                   	stos   %al,%es:(%rdi)
    468e:	aa                   	stos   %al,%es:(%rdi)
    468f:	aa                   	stos   %al,%es:(%rdi)
    4690:	aa                   	stos   %al,%es:(%rdi)
    4691:	aa                   	stos   %al,%es:(%rdi)
    4692:	aa                   	stos   %al,%es:(%rdi)
    4693:	aa                   	stos   %al,%es:(%rdi)
    4694:	aa                   	stos   %al,%es:(%rdi)
    4695:	aa                   	stos   %al,%es:(%rdi)
    4696:	aa                   	stos   %al,%es:(%rdi)
    4697:	aa                   	stos   %al,%es:(%rdi)
    4698:	aa                   	stos   %al,%es:(%rdi)
    4699:	aa                   	stos   %al,%es:(%rdi)
    469a:	aa                   	stos   %al,%es:(%rdi)
    469b:	aa                   	stos   %al,%es:(%rdi)
    469c:	aa                   	stos   %al,%es:(%rdi)
    469d:	aa                   	stos   %al,%es:(%rdi)
    469e:	aa                   	stos   %al,%es:(%rdi)
    469f:	aa                   	stos   %al,%es:(%rdi)
    46a0:	aa                   	stos   %al,%es:(%rdi)
    46a1:	aa                   	stos   %al,%es:(%rdi)
    46a2:	aa                   	stos   %al,%es:(%rdi)
    46a3:	aa                   	stos   %al,%es:(%rdi)
    46a4:	aa                   	stos   %al,%es:(%rdi)
    46a5:	aa                   	stos   %al,%es:(%rdi)
    46a6:	aa                   	stos   %al,%es:(%rdi)
    46a7:	aa                   	stos   %al,%es:(%rdi)
    46a8:	aa                   	stos   %al,%es:(%rdi)
    46a9:	aa                   	stos   %al,%es:(%rdi)
    46aa:	aa                   	stos   %al,%es:(%rdi)
    46ab:	aa                   	stos   %al,%es:(%rdi)
    46ac:	aa                   	stos   %al,%es:(%rdi)
    46ad:	aa                   	stos   %al,%es:(%rdi)
    46ae:	aa                   	stos   %al,%es:(%rdi)
    46af:	aa                   	stos   %al,%es:(%rdi)
    46b0:	aa                   	stos   %al,%es:(%rdi)
    46b1:	aa                   	stos   %al,%es:(%rdi)
    46b2:	aa                   	stos   %al,%es:(%rdi)
    46b3:	aa                   	stos   %al,%es:(%rdi)
    46b4:	aa                   	stos   %al,%es:(%rdi)
    46b5:	aa                   	stos   %al,%es:(%rdi)
    46b6:	aa                   	stos   %al,%es:(%rdi)
    46b7:	aa                   	stos   %al,%es:(%rdi)
    46b8:	aa                   	stos   %al,%es:(%rdi)
    46b9:	aa                   	stos   %al,%es:(%rdi)
    46ba:	aa                   	stos   %al,%es:(%rdi)
    46bb:	aa                   	stos   %al,%es:(%rdi)
    46bc:	aa                   	stos   %al,%es:(%rdi)
    46bd:	aa                   	stos   %al,%es:(%rdi)
    46be:	aa                   	stos   %al,%es:(%rdi)
    46bf:	aa                   	stos   %al,%es:(%rdi)
    46c0:	aa                   	stos   %al,%es:(%rdi)
    46c1:	aa                   	stos   %al,%es:(%rdi)
    46c2:	aa                   	stos   %al,%es:(%rdi)
    46c3:	aa                   	stos   %al,%es:(%rdi)
    46c4:	aa                   	stos   %al,%es:(%rdi)
    46c5:	aa                   	stos   %al,%es:(%rdi)
    46c6:	aa                   	stos   %al,%es:(%rdi)
    46c7:	aa                   	stos   %al,%es:(%rdi)
    46c8:	aa                   	stos   %al,%es:(%rdi)
    46c9:	aa                   	stos   %al,%es:(%rdi)
    46ca:	aa                   	stos   %al,%es:(%rdi)
    46cb:	aa                   	stos   %al,%es:(%rdi)
    46cc:	aa                   	stos   %al,%es:(%rdi)
    46cd:	aa                   	stos   %al,%es:(%rdi)
    46ce:	aa                   	stos   %al,%es:(%rdi)
    46cf:	aa                   	stos   %al,%es:(%rdi)
    46d0:	aa                   	stos   %al,%es:(%rdi)
    46d1:	aa                   	stos   %al,%es:(%rdi)
    46d2:	aa                   	stos   %al,%es:(%rdi)
    46d3:	aa                   	stos   %al,%es:(%rdi)
    46d4:	aa                   	stos   %al,%es:(%rdi)
    46d5:	aa                   	stos   %al,%es:(%rdi)
    46d6:	aa                   	stos   %al,%es:(%rdi)
    46d7:	aa                   	stos   %al,%es:(%rdi)
    46d8:	aa                   	stos   %al,%es:(%rdi)
    46d9:	aa                   	stos   %al,%es:(%rdi)
    46da:	aa                   	stos   %al,%es:(%rdi)
    46db:	aa                   	stos   %al,%es:(%rdi)
    46dc:	aa                   	stos   %al,%es:(%rdi)
    46dd:	aa                   	stos   %al,%es:(%rdi)
    46de:	aa                   	stos   %al,%es:(%rdi)
    46df:	aa                   	stos   %al,%es:(%rdi)
    46e0:	aa                   	stos   %al,%es:(%rdi)
    46e1:	aa                   	stos   %al,%es:(%rdi)
    46e2:	aa                   	stos   %al,%es:(%rdi)
    46e3:	aa                   	stos   %al,%es:(%rdi)
    46e4:	aa                   	stos   %al,%es:(%rdi)
    46e5:	aa                   	stos   %al,%es:(%rdi)
    46e6:	aa                   	stos   %al,%es:(%rdi)
    46e7:	aa                   	stos   %al,%es:(%rdi)
    46e8:	aa                   	stos   %al,%es:(%rdi)
    46e9:	aa                   	stos   %al,%es:(%rdi)
    46ea:	aa                   	stos   %al,%es:(%rdi)
    46eb:	aa                   	stos   %al,%es:(%rdi)
    46ec:	aa                   	stos   %al,%es:(%rdi)
    46ed:	aa                   	stos   %al,%es:(%rdi)
    46ee:	aa                   	stos   %al,%es:(%rdi)
    46ef:	aa                   	stos   %al,%es:(%rdi)
    46f0:	aa                   	stos   %al,%es:(%rdi)
    46f1:	aa                   	stos   %al,%es:(%rdi)
    46f2:	aa                   	stos   %al,%es:(%rdi)
    46f3:	aa                   	stos   %al,%es:(%rdi)
    46f4:	aa                   	stos   %al,%es:(%rdi)
    46f5:	aa                   	stos   %al,%es:(%rdi)
    46f6:	aa                   	stos   %al,%es:(%rdi)
    46f7:	aa                   	stos   %al,%es:(%rdi)
    46f8:	aa                   	stos   %al,%es:(%rdi)
    46f9:	aa                   	stos   %al,%es:(%rdi)
    46fa:	aa                   	stos   %al,%es:(%rdi)
    46fb:	aa                   	stos   %al,%es:(%rdi)
    46fc:	aa                   	stos   %al,%es:(%rdi)
    46fd:	aa                   	stos   %al,%es:(%rdi)
    46fe:	aa                   	stos   %al,%es:(%rdi)
    46ff:	aa                   	stos   %al,%es:(%rdi)
    4700:	aa                   	stos   %al,%es:(%rdi)
    4701:	aa                   	stos   %al,%es:(%rdi)
    4702:	aa                   	stos   %al,%es:(%rdi)
    4703:	aa                   	stos   %al,%es:(%rdi)
    4704:	aa                   	stos   %al,%es:(%rdi)
    4705:	aa                   	stos   %al,%es:(%rdi)
    4706:	aa                   	stos   %al,%es:(%rdi)
    4707:	aa                   	stos   %al,%es:(%rdi)
    4708:	aa                   	stos   %al,%es:(%rdi)
    4709:	aa                   	stos   %al,%es:(%rdi)
    470a:	aa                   	stos   %al,%es:(%rdi)
    470b:	aa                   	stos   %al,%es:(%rdi)
    470c:	aa                   	stos   %al,%es:(%rdi)
    470d:	aa                   	stos   %al,%es:(%rdi)
    470e:	aa                   	stos   %al,%es:(%rdi)
    470f:	aa                   	stos   %al,%es:(%rdi)
    4710:	aa                   	stos   %al,%es:(%rdi)
    4711:	aa                   	stos   %al,%es:(%rdi)
    4712:	aa                   	stos   %al,%es:(%rdi)
    4713:	aa                   	stos   %al,%es:(%rdi)
    4714:	aa                   	stos   %al,%es:(%rdi)
    4715:	aa                   	stos   %al,%es:(%rdi)
    4716:	aa                   	stos   %al,%es:(%rdi)
    4717:	aa                   	stos   %al,%es:(%rdi)
    4718:	aa                   	stos   %al,%es:(%rdi)
    4719:	aa                   	stos   %al,%es:(%rdi)
    471a:	aa                   	stos   %al,%es:(%rdi)
    471b:	aa                   	stos   %al,%es:(%rdi)
    471c:	aa                   	stos   %al,%es:(%rdi)
    471d:	aa                   	stos   %al,%es:(%rdi)
    471e:	aa                   	stos   %al,%es:(%rdi)
    471f:	aa                   	stos   %al,%es:(%rdi)
    4720:	aa                   	stos   %al,%es:(%rdi)
    4721:	aa                   	stos   %al,%es:(%rdi)
    4722:	aa                   	stos   %al,%es:(%rdi)
    4723:	aa                   	stos   %al,%es:(%rdi)
    4724:	aa                   	stos   %al,%es:(%rdi)
    4725:	aa                   	stos   %al,%es:(%rdi)
    4726:	aa                   	stos   %al,%es:(%rdi)
    4727:	aa                   	stos   %al,%es:(%rdi)
    4728:	aa                   	stos   %al,%es:(%rdi)
    4729:	aa                   	stos   %al,%es:(%rdi)
    472a:	aa                   	stos   %al,%es:(%rdi)
    472b:	aa                   	stos   %al,%es:(%rdi)
    472c:	aa                   	stos   %al,%es:(%rdi)
    472d:	aa                   	stos   %al,%es:(%rdi)
    472e:	aa                   	stos   %al,%es:(%rdi)
    472f:	aa                   	stos   %al,%es:(%rdi)
    4730:	aa                   	stos   %al,%es:(%rdi)
    4731:	aa                   	stos   %al,%es:(%rdi)
    4732:	aa                   	stos   %al,%es:(%rdi)
    4733:	aa                   	stos   %al,%es:(%rdi)
    4734:	aa                   	stos   %al,%es:(%rdi)
    4735:	aa                   	stos   %al,%es:(%rdi)
    4736:	aa                   	stos   %al,%es:(%rdi)
    4737:	aa                   	stos   %al,%es:(%rdi)
    4738:	aa                   	stos   %al,%es:(%rdi)
    4739:	aa                   	stos   %al,%es:(%rdi)
    473a:	aa                   	stos   %al,%es:(%rdi)
    473b:	aa                   	stos   %al,%es:(%rdi)
    473c:	aa                   	stos   %al,%es:(%rdi)
    473d:	aa                   	stos   %al,%es:(%rdi)
    473e:	aa                   	stos   %al,%es:(%rdi)
    473f:	aa                   	stos   %al,%es:(%rdi)
    4740:	aa                   	stos   %al,%es:(%rdi)
    4741:	aa                   	stos   %al,%es:(%rdi)
    4742:	aa                   	stos   %al,%es:(%rdi)
    4743:	aa                   	stos   %al,%es:(%rdi)
    4744:	aa                   	stos   %al,%es:(%rdi)
    4745:	aa                   	stos   %al,%es:(%rdi)
    4746:	aa                   	stos   %al,%es:(%rdi)
    4747:	aa                   	stos   %al,%es:(%rdi)
    4748:	aa                   	stos   %al,%es:(%rdi)
    4749:	aa                   	stos   %al,%es:(%rdi)
    474a:	aa                   	stos   %al,%es:(%rdi)
    474b:	aa                   	stos   %al,%es:(%rdi)
    474c:	aa                   	stos   %al,%es:(%rdi)
    474d:	aa                   	stos   %al,%es:(%rdi)
    474e:	aa                   	stos   %al,%es:(%rdi)
    474f:	aa                   	stos   %al,%es:(%rdi)
    4750:	aa                   	stos   %al,%es:(%rdi)
    4751:	aa                   	stos   %al,%es:(%rdi)
    4752:	aa                   	stos   %al,%es:(%rdi)
    4753:	aa                   	stos   %al,%es:(%rdi)
    4754:	aa                   	stos   %al,%es:(%rdi)
    4755:	aa                   	stos   %al,%es:(%rdi)
    4756:	aa                   	stos   %al,%es:(%rdi)
    4757:	aa                   	stos   %al,%es:(%rdi)
    4758:	aa                   	stos   %al,%es:(%rdi)
    4759:	aa                   	stos   %al,%es:(%rdi)
    475a:	aa                   	stos   %al,%es:(%rdi)
    475b:	aa                   	stos   %al,%es:(%rdi)
    475c:	aa                   	stos   %al,%es:(%rdi)
    475d:	aa                   	stos   %al,%es:(%rdi)
    475e:	aa                   	stos   %al,%es:(%rdi)
    475f:	aa                   	stos   %al,%es:(%rdi)
    4760:	aa                   	stos   %al,%es:(%rdi)
    4761:	aa                   	stos   %al,%es:(%rdi)
    4762:	aa                   	stos   %al,%es:(%rdi)
    4763:	aa                   	stos   %al,%es:(%rdi)
    4764:	aa                   	stos   %al,%es:(%rdi)
    4765:	aa                   	stos   %al,%es:(%rdi)
    4766:	aa                   	stos   %al,%es:(%rdi)
    4767:	aa                   	stos   %al,%es:(%rdi)
    4768:	aa                   	stos   %al,%es:(%rdi)
    4769:	aa                   	stos   %al,%es:(%rdi)
    476a:	aa                   	stos   %al,%es:(%rdi)
    476b:	aa                   	stos   %al,%es:(%rdi)
    476c:	aa                   	stos   %al,%es:(%rdi)
    476d:	aa                   	stos   %al,%es:(%rdi)
    476e:	aa                   	stos   %al,%es:(%rdi)
    476f:	aa                   	stos   %al,%es:(%rdi)
    4770:	aa                   	stos   %al,%es:(%rdi)
    4771:	aa                   	stos   %al,%es:(%rdi)
    4772:	aa                   	stos   %al,%es:(%rdi)
    4773:	aa                   	stos   %al,%es:(%rdi)
    4774:	aa                   	stos   %al,%es:(%rdi)
    4775:	aa                   	stos   %al,%es:(%rdi)
    4776:	aa                   	stos   %al,%es:(%rdi)
    4777:	aa                   	stos   %al,%es:(%rdi)
    4778:	aa                   	stos   %al,%es:(%rdi)
    4779:	aa                   	stos   %al,%es:(%rdi)
    477a:	aa                   	stos   %al,%es:(%rdi)
    477b:	aa                   	stos   %al,%es:(%rdi)
    477c:	aa                   	stos   %al,%es:(%rdi)
    477d:	aa                   	stos   %al,%es:(%rdi)
    477e:	aa                   	stos   %al,%es:(%rdi)
    477f:	aa                   	stos   %al,%es:(%rdi)
    4780:	aa                   	stos   %al,%es:(%rdi)
    4781:	aa                   	stos   %al,%es:(%rdi)
    4782:	aa                   	stos   %al,%es:(%rdi)
    4783:	aa                   	stos   %al,%es:(%rdi)
    4784:	aa                   	stos   %al,%es:(%rdi)
    4785:	aa                   	stos   %al,%es:(%rdi)
    4786:	aa                   	stos   %al,%es:(%rdi)
    4787:	aa                   	stos   %al,%es:(%rdi)
    4788:	aa                   	stos   %al,%es:(%rdi)
    4789:	aa                   	stos   %al,%es:(%rdi)
    478a:	aa                   	stos   %al,%es:(%rdi)
    478b:	aa                   	stos   %al,%es:(%rdi)
    478c:	aa                   	stos   %al,%es:(%rdi)
    478d:	aa                   	stos   %al,%es:(%rdi)
    478e:	aa                   	stos   %al,%es:(%rdi)
    478f:	aa                   	stos   %al,%es:(%rdi)
    4790:	aa                   	stos   %al,%es:(%rdi)
    4791:	aa                   	stos   %al,%es:(%rdi)
    4792:	aa                   	stos   %al,%es:(%rdi)
    4793:	aa                   	stos   %al,%es:(%rdi)
    4794:	aa                   	stos   %al,%es:(%rdi)
    4795:	aa                   	stos   %al,%es:(%rdi)
    4796:	aa                   	stos   %al,%es:(%rdi)
    4797:	aa                   	stos   %al,%es:(%rdi)
    4798:	aa                   	stos   %al,%es:(%rdi)
    4799:	aa                   	stos   %al,%es:(%rdi)
    479a:	aa                   	stos   %al,%es:(%rdi)
    479b:	aa                   	stos   %al,%es:(%rdi)
    479c:	aa                   	stos   %al,%es:(%rdi)
    479d:	aa                   	stos   %al,%es:(%rdi)
    479e:	aa                   	stos   %al,%es:(%rdi)
    479f:	aa                   	stos   %al,%es:(%rdi)
    47a0:	aa                   	stos   %al,%es:(%rdi)
    47a1:	aa                   	stos   %al,%es:(%rdi)
    47a2:	aa                   	stos   %al,%es:(%rdi)
    47a3:	aa                   	stos   %al,%es:(%rdi)
    47a4:	aa                   	stos   %al,%es:(%rdi)
    47a5:	aa                   	stos   %al,%es:(%rdi)
    47a6:	aa                   	stos   %al,%es:(%rdi)
    47a7:	aa                   	stos   %al,%es:(%rdi)
    47a8:	aa                   	stos   %al,%es:(%rdi)
    47a9:	aa                   	stos   %al,%es:(%rdi)
    47aa:	aa                   	stos   %al,%es:(%rdi)
    47ab:	aa                   	stos   %al,%es:(%rdi)
    47ac:	aa                   	stos   %al,%es:(%rdi)
    47ad:	aa                   	stos   %al,%es:(%rdi)
    47ae:	aa                   	stos   %al,%es:(%rdi)
    47af:	aa                   	stos   %al,%es:(%rdi)
    47b0:	aa                   	stos   %al,%es:(%rdi)
    47b1:	aa                   	stos   %al,%es:(%rdi)
    47b2:	aa                   	stos   %al,%es:(%rdi)
    47b3:	aa                   	stos   %al,%es:(%rdi)
    47b4:	aa                   	stos   %al,%es:(%rdi)
    47b5:	aa                   	stos   %al,%es:(%rdi)
    47b6:	aa                   	stos   %al,%es:(%rdi)
    47b7:	aa                   	stos   %al,%es:(%rdi)
    47b8:	aa                   	stos   %al,%es:(%rdi)
    47b9:	aa                   	stos   %al,%es:(%rdi)
    47ba:	aa                   	stos   %al,%es:(%rdi)
    47bb:	aa                   	stos   %al,%es:(%rdi)
    47bc:	aa                   	stos   %al,%es:(%rdi)
    47bd:	aa                   	stos   %al,%es:(%rdi)
    47be:	aa                   	stos   %al,%es:(%rdi)
    47bf:	aa                   	stos   %al,%es:(%rdi)
    47c0:	aa                   	stos   %al,%es:(%rdi)
    47c1:	aa                   	stos   %al,%es:(%rdi)
    47c2:	aa                   	stos   %al,%es:(%rdi)
    47c3:	aa                   	stos   %al,%es:(%rdi)
    47c4:	aa                   	stos   %al,%es:(%rdi)
    47c5:	aa                   	stos   %al,%es:(%rdi)
    47c6:	aa                   	stos   %al,%es:(%rdi)
    47c7:	aa                   	stos   %al,%es:(%rdi)
    47c8:	aa                   	stos   %al,%es:(%rdi)
    47c9:	aa                   	stos   %al,%es:(%rdi)
    47ca:	aa                   	stos   %al,%es:(%rdi)
    47cb:	aa                   	stos   %al,%es:(%rdi)
    47cc:	aa                   	stos   %al,%es:(%rdi)
    47cd:	aa                   	stos   %al,%es:(%rdi)
    47ce:	aa                   	stos   %al,%es:(%rdi)
    47cf:	aa                   	stos   %al,%es:(%rdi)
    47d0:	aa                   	stos   %al,%es:(%rdi)
    47d1:	aa                   	stos   %al,%es:(%rdi)
    47d2:	aa                   	stos   %al,%es:(%rdi)
    47d3:	aa                   	stos   %al,%es:(%rdi)
    47d4:	aa                   	stos   %al,%es:(%rdi)
    47d5:	aa                   	stos   %al,%es:(%rdi)
    47d6:	aa                   	stos   %al,%es:(%rdi)
    47d7:	aa                   	stos   %al,%es:(%rdi)
    47d8:	aa                   	stos   %al,%es:(%rdi)
    47d9:	aa                   	stos   %al,%es:(%rdi)
    47da:	aa                   	stos   %al,%es:(%rdi)
    47db:	aa                   	stos   %al,%es:(%rdi)
    47dc:	aa                   	stos   %al,%es:(%rdi)
    47dd:	aa                   	stos   %al,%es:(%rdi)
    47de:	aa                   	stos   %al,%es:(%rdi)
    47df:	aa                   	stos   %al,%es:(%rdi)
    47e0:	aa                   	stos   %al,%es:(%rdi)
    47e1:	aa                   	stos   %al,%es:(%rdi)
    47e2:	aa                   	stos   %al,%es:(%rdi)
    47e3:	aa                   	stos   %al,%es:(%rdi)
    47e4:	aa                   	stos   %al,%es:(%rdi)
    47e5:	aa                   	stos   %al,%es:(%rdi)
    47e6:	aa                   	stos   %al,%es:(%rdi)
    47e7:	aa                   	stos   %al,%es:(%rdi)
    47e8:	aa                   	stos   %al,%es:(%rdi)
    47e9:	aa                   	stos   %al,%es:(%rdi)
    47ea:	aa                   	stos   %al,%es:(%rdi)
    47eb:	aa                   	stos   %al,%es:(%rdi)
    47ec:	aa                   	stos   %al,%es:(%rdi)
    47ed:	aa                   	stos   %al,%es:(%rdi)
    47ee:	aa                   	stos   %al,%es:(%rdi)
    47ef:	aa                   	stos   %al,%es:(%rdi)
    47f0:	aa                   	stos   %al,%es:(%rdi)
    47f1:	aa                   	stos   %al,%es:(%rdi)
    47f2:	aa                   	stos   %al,%es:(%rdi)
    47f3:	aa                   	stos   %al,%es:(%rdi)
    47f4:	aa                   	stos   %al,%es:(%rdi)
    47f5:	aa                   	stos   %al,%es:(%rdi)
    47f6:	aa                   	stos   %al,%es:(%rdi)
    47f7:	aa                   	stos   %al,%es:(%rdi)
    47f8:	aa                   	stos   %al,%es:(%rdi)
    47f9:	aa                   	stos   %al,%es:(%rdi)
    47fa:	aa                   	stos   %al,%es:(%rdi)
    47fb:	aa                   	stos   %al,%es:(%rdi)
    47fc:	aa                   	stos   %al,%es:(%rdi)
    47fd:	aa                   	stos   %al,%es:(%rdi)
    47fe:	aa                   	stos   %al,%es:(%rdi)
    47ff:	aa                   	stos   %al,%es:(%rdi)
    4800:	aa                   	stos   %al,%es:(%rdi)
    4801:	aa                   	stos   %al,%es:(%rdi)
    4802:	aa                   	stos   %al,%es:(%rdi)
    4803:	aa                   	stos   %al,%es:(%rdi)
    4804:	aa                   	stos   %al,%es:(%rdi)
    4805:	aa                   	stos   %al,%es:(%rdi)
    4806:	aa                   	stos   %al,%es:(%rdi)
    4807:	aa                   	stos   %al,%es:(%rdi)
    4808:	aa                   	stos   %al,%es:(%rdi)
    4809:	aa                   	stos   %al,%es:(%rdi)
    480a:	aa                   	stos   %al,%es:(%rdi)
    480b:	aa                   	stos   %al,%es:(%rdi)
    480c:	aa                   	stos   %al,%es:(%rdi)
    480d:	aa                   	stos   %al,%es:(%rdi)
    480e:	aa                   	stos   %al,%es:(%rdi)
    480f:	aa                   	stos   %al,%es:(%rdi)
    4810:	aa                   	stos   %al,%es:(%rdi)
    4811:	aa                   	stos   %al,%es:(%rdi)
    4812:	aa                   	stos   %al,%es:(%rdi)
    4813:	aa                   	stos   %al,%es:(%rdi)
    4814:	aa                   	stos   %al,%es:(%rdi)
    4815:	aa                   	stos   %al,%es:(%rdi)
    4816:	aa                   	stos   %al,%es:(%rdi)
    4817:	aa                   	stos   %al,%es:(%rdi)
    4818:	aa                   	stos   %al,%es:(%rdi)
    4819:	aa                   	stos   %al,%es:(%rdi)
    481a:	aa                   	stos   %al,%es:(%rdi)
    481b:	aa                   	stos   %al,%es:(%rdi)
    481c:	aa                   	stos   %al,%es:(%rdi)
    481d:	aa                   	stos   %al,%es:(%rdi)
    481e:	aa                   	stos   %al,%es:(%rdi)
    481f:	aa                   	stos   %al,%es:(%rdi)
    4820:	aa                   	stos   %al,%es:(%rdi)
    4821:	aa                   	stos   %al,%es:(%rdi)
    4822:	aa                   	stos   %al,%es:(%rdi)
    4823:	aa                   	stos   %al,%es:(%rdi)
    4824:	aa                   	stos   %al,%es:(%rdi)
    4825:	aa                   	stos   %al,%es:(%rdi)
    4826:	aa                   	stos   %al,%es:(%rdi)
    4827:	aa                   	stos   %al,%es:(%rdi)
    4828:	aa                   	stos   %al,%es:(%rdi)
    4829:	aa                   	stos   %al,%es:(%rdi)
    482a:	aa                   	stos   %al,%es:(%rdi)
    482b:	aa                   	stos   %al,%es:(%rdi)
    482c:	aa                   	stos   %al,%es:(%rdi)
    482d:	aa                   	stos   %al,%es:(%rdi)
    482e:	aa                   	stos   %al,%es:(%rdi)
    482f:	aa                   	stos   %al,%es:(%rdi)
    4830:	aa                   	stos   %al,%es:(%rdi)
    4831:	aa                   	stos   %al,%es:(%rdi)
    4832:	aa                   	stos   %al,%es:(%rdi)
    4833:	aa                   	stos   %al,%es:(%rdi)
    4834:	aa                   	stos   %al,%es:(%rdi)
    4835:	aa                   	stos   %al,%es:(%rdi)
    4836:	aa                   	stos   %al,%es:(%rdi)
    4837:	aa                   	stos   %al,%es:(%rdi)
    4838:	aa                   	stos   %al,%es:(%rdi)
    4839:	aa                   	stos   %al,%es:(%rdi)
    483a:	aa                   	stos   %al,%es:(%rdi)
    483b:	aa                   	stos   %al,%es:(%rdi)
    483c:	aa                   	stos   %al,%es:(%rdi)
    483d:	aa                   	stos   %al,%es:(%rdi)
    483e:	aa                   	stos   %al,%es:(%rdi)
    483f:	aa                   	stos   %al,%es:(%rdi)
    4840:	aa                   	stos   %al,%es:(%rdi)
    4841:	aa                   	stos   %al,%es:(%rdi)
    4842:	aa                   	stos   %al,%es:(%rdi)
    4843:	aa                   	stos   %al,%es:(%rdi)
    4844:	aa                   	stos   %al,%es:(%rdi)
    4845:	aa                   	stos   %al,%es:(%rdi)
    4846:	aa                   	stos   %al,%es:(%rdi)
    4847:	aa                   	stos   %al,%es:(%rdi)
    4848:	aa                   	stos   %al,%es:(%rdi)
    4849:	aa                   	stos   %al,%es:(%rdi)
    484a:	aa                   	stos   %al,%es:(%rdi)
    484b:	aa                   	stos   %al,%es:(%rdi)
    484c:	aa                   	stos   %al,%es:(%rdi)
    484d:	aa                   	stos   %al,%es:(%rdi)
    484e:	aa                   	stos   %al,%es:(%rdi)
    484f:	aa                   	stos   %al,%es:(%rdi)
    4850:	aa                   	stos   %al,%es:(%rdi)
    4851:	aa                   	stos   %al,%es:(%rdi)
    4852:	aa                   	stos   %al,%es:(%rdi)
    4853:	aa                   	stos   %al,%es:(%rdi)
    4854:	aa                   	stos   %al,%es:(%rdi)
    4855:	aa                   	stos   %al,%es:(%rdi)
    4856:	aa                   	stos   %al,%es:(%rdi)
    4857:	aa                   	stos   %al,%es:(%rdi)
    4858:	aa                   	stos   %al,%es:(%rdi)
    4859:	aa                   	stos   %al,%es:(%rdi)
    485a:	aa                   	stos   %al,%es:(%rdi)
    485b:	aa                   	stos   %al,%es:(%rdi)
    485c:	aa                   	stos   %al,%es:(%rdi)
    485d:	aa                   	stos   %al,%es:(%rdi)
    485e:	aa                   	stos   %al,%es:(%rdi)
    485f:	aa                   	stos   %al,%es:(%rdi)
    4860:	aa                   	stos   %al,%es:(%rdi)
    4861:	aa                   	stos   %al,%es:(%rdi)
    4862:	aa                   	stos   %al,%es:(%rdi)
    4863:	aa                   	stos   %al,%es:(%rdi)
    4864:	aa                   	stos   %al,%es:(%rdi)
    4865:	aa                   	stos   %al,%es:(%rdi)
    4866:	aa                   	stos   %al,%es:(%rdi)
    4867:	aa                   	stos   %al,%es:(%rdi)
    4868:	aa                   	stos   %al,%es:(%rdi)
    4869:	aa                   	stos   %al,%es:(%rdi)
    486a:	aa                   	stos   %al,%es:(%rdi)
    486b:	aa                   	stos   %al,%es:(%rdi)
    486c:	aa                   	stos   %al,%es:(%rdi)
    486d:	aa                   	stos   %al,%es:(%rdi)
    486e:	aa                   	stos   %al,%es:(%rdi)
    486f:	aa                   	stos   %al,%es:(%rdi)
    4870:	aa                   	stos   %al,%es:(%rdi)
    4871:	aa                   	stos   %al,%es:(%rdi)
    4872:	aa                   	stos   %al,%es:(%rdi)
    4873:	aa                   	stos   %al,%es:(%rdi)
    4874:	aa                   	stos   %al,%es:(%rdi)
    4875:	aa                   	stos   %al,%es:(%rdi)
    4876:	aa                   	stos   %al,%es:(%rdi)
    4877:	aa                   	stos   %al,%es:(%rdi)
    4878:	aa                   	stos   %al,%es:(%rdi)
    4879:	aa                   	stos   %al,%es:(%rdi)
    487a:	aa                   	stos   %al,%es:(%rdi)
    487b:	aa                   	stos   %al,%es:(%rdi)
    487c:	aa                   	stos   %al,%es:(%rdi)
    487d:	aa                   	stos   %al,%es:(%rdi)
    487e:	aa                   	stos   %al,%es:(%rdi)
    487f:	aa                   	stos   %al,%es:(%rdi)
    4880:	aa                   	stos   %al,%es:(%rdi)
    4881:	aa                   	stos   %al,%es:(%rdi)
    4882:	aa                   	stos   %al,%es:(%rdi)
    4883:	aa                   	stos   %al,%es:(%rdi)
    4884:	aa                   	stos   %al,%es:(%rdi)
    4885:	aa                   	stos   %al,%es:(%rdi)
    4886:	aa                   	stos   %al,%es:(%rdi)
    4887:	aa                   	stos   %al,%es:(%rdi)
    4888:	aa                   	stos   %al,%es:(%rdi)
    4889:	aa                   	stos   %al,%es:(%rdi)
    488a:	aa                   	stos   %al,%es:(%rdi)
    488b:	aa                   	stos   %al,%es:(%rdi)
    488c:	aa                   	stos   %al,%es:(%rdi)
    488d:	aa                   	stos   %al,%es:(%rdi)
    488e:	aa                   	stos   %al,%es:(%rdi)
    488f:	aa                   	stos   %al,%es:(%rdi)
    4890:	aa                   	stos   %al,%es:(%rdi)
    4891:	aa                   	stos   %al,%es:(%rdi)
    4892:	aa                   	stos   %al,%es:(%rdi)
    4893:	aa                   	stos   %al,%es:(%rdi)
    4894:	aa                   	stos   %al,%es:(%rdi)
    4895:	aa                   	stos   %al,%es:(%rdi)
    4896:	aa                   	stos   %al,%es:(%rdi)
    4897:	aa                   	stos   %al,%es:(%rdi)
    4898:	aa                   	stos   %al,%es:(%rdi)
    4899:	aa                   	stos   %al,%es:(%rdi)
    489a:	aa                   	stos   %al,%es:(%rdi)
    489b:	aa                   	stos   %al,%es:(%rdi)
    489c:	aa                   	stos   %al,%es:(%rdi)
    489d:	aa                   	stos   %al,%es:(%rdi)
    489e:	aa                   	stos   %al,%es:(%rdi)
    489f:	aa                   	stos   %al,%es:(%rdi)
    48a0:	aa                   	stos   %al,%es:(%rdi)
    48a1:	aa                   	stos   %al,%es:(%rdi)
    48a2:	aa                   	stos   %al,%es:(%rdi)
    48a3:	aa                   	stos   %al,%es:(%rdi)
    48a4:	aa                   	stos   %al,%es:(%rdi)
    48a5:	aa                   	stos   %al,%es:(%rdi)
    48a6:	aa                   	stos   %al,%es:(%rdi)
    48a7:	aa                   	stos   %al,%es:(%rdi)
    48a8:	aa                   	stos   %al,%es:(%rdi)
    48a9:	aa                   	stos   %al,%es:(%rdi)
    48aa:	aa                   	stos   %al,%es:(%rdi)
    48ab:	aa                   	stos   %al,%es:(%rdi)
    48ac:	aa                   	stos   %al,%es:(%rdi)
    48ad:	aa                   	stos   %al,%es:(%rdi)
    48ae:	aa                   	stos   %al,%es:(%rdi)
    48af:	aa                   	stos   %al,%es:(%rdi)
    48b0:	aa                   	stos   %al,%es:(%rdi)
    48b1:	aa                   	stos   %al,%es:(%rdi)
    48b2:	aa                   	stos   %al,%es:(%rdi)
    48b3:	aa                   	stos   %al,%es:(%rdi)
    48b4:	aa                   	stos   %al,%es:(%rdi)
    48b5:	aa                   	stos   %al,%es:(%rdi)
    48b6:	aa                   	stos   %al,%es:(%rdi)
    48b7:	aa                   	stos   %al,%es:(%rdi)
    48b8:	aa                   	stos   %al,%es:(%rdi)
    48b9:	aa                   	stos   %al,%es:(%rdi)
    48ba:	aa                   	stos   %al,%es:(%rdi)
    48bb:	aa                   	stos   %al,%es:(%rdi)
    48bc:	aa                   	stos   %al,%es:(%rdi)
    48bd:	aa                   	stos   %al,%es:(%rdi)
    48be:	aa                   	stos   %al,%es:(%rdi)
    48bf:	aa                   	stos   %al,%es:(%rdi)
    48c0:	aa                   	stos   %al,%es:(%rdi)
    48c1:	aa                   	stos   %al,%es:(%rdi)
    48c2:	aa                   	stos   %al,%es:(%rdi)
    48c3:	aa                   	stos   %al,%es:(%rdi)
    48c4:	aa                   	stos   %al,%es:(%rdi)
    48c5:	aa                   	stos   %al,%es:(%rdi)
    48c6:	aa                   	stos   %al,%es:(%rdi)
    48c7:	aa                   	stos   %al,%es:(%rdi)
    48c8:	aa                   	stos   %al,%es:(%rdi)
    48c9:	aa                   	stos   %al,%es:(%rdi)
    48ca:	aa                   	stos   %al,%es:(%rdi)
    48cb:	aa                   	stos   %al,%es:(%rdi)
    48cc:	aa                   	stos   %al,%es:(%rdi)
    48cd:	aa                   	stos   %al,%es:(%rdi)
    48ce:	aa                   	stos   %al,%es:(%rdi)
    48cf:	aa                   	stos   %al,%es:(%rdi)
    48d0:	aa                   	stos   %al,%es:(%rdi)
    48d1:	aa                   	stos   %al,%es:(%rdi)
    48d2:	aa                   	stos   %al,%es:(%rdi)
    48d3:	aa                   	stos   %al,%es:(%rdi)
    48d4:	aa                   	stos   %al,%es:(%rdi)
    48d5:	aa                   	stos   %al,%es:(%rdi)
    48d6:	aa                   	stos   %al,%es:(%rdi)
    48d7:	aa                   	stos   %al,%es:(%rdi)
    48d8:	aa                   	stos   %al,%es:(%rdi)
    48d9:	aa                   	stos   %al,%es:(%rdi)
    48da:	aa                   	stos   %al,%es:(%rdi)
    48db:	aa                   	stos   %al,%es:(%rdi)
    48dc:	aa                   	stos   %al,%es:(%rdi)
    48dd:	aa                   	stos   %al,%es:(%rdi)
    48de:	aa                   	stos   %al,%es:(%rdi)
    48df:	aa                   	stos   %al,%es:(%rdi)
    48e0:	aa                   	stos   %al,%es:(%rdi)
    48e1:	aa                   	stos   %al,%es:(%rdi)
    48e2:	aa                   	stos   %al,%es:(%rdi)
    48e3:	aa                   	stos   %al,%es:(%rdi)
    48e4:	aa                   	stos   %al,%es:(%rdi)
    48e5:	aa                   	stos   %al,%es:(%rdi)
    48e6:	aa                   	stos   %al,%es:(%rdi)
    48e7:	aa                   	stos   %al,%es:(%rdi)
    48e8:	aa                   	stos   %al,%es:(%rdi)
    48e9:	aa                   	stos   %al,%es:(%rdi)
    48ea:	aa                   	stos   %al,%es:(%rdi)
    48eb:	aa                   	stos   %al,%es:(%rdi)
    48ec:	aa                   	stos   %al,%es:(%rdi)
    48ed:	aa                   	stos   %al,%es:(%rdi)
    48ee:	aa                   	stos   %al,%es:(%rdi)
    48ef:	aa                   	stos   %al,%es:(%rdi)
    48f0:	aa                   	stos   %al,%es:(%rdi)
    48f1:	aa                   	stos   %al,%es:(%rdi)
    48f2:	aa                   	stos   %al,%es:(%rdi)
    48f3:	aa                   	stos   %al,%es:(%rdi)
    48f4:	aa                   	stos   %al,%es:(%rdi)
    48f5:	aa                   	stos   %al,%es:(%rdi)
    48f6:	aa                   	stos   %al,%es:(%rdi)
    48f7:	aa                   	stos   %al,%es:(%rdi)
    48f8:	aa                   	stos   %al,%es:(%rdi)
    48f9:	aa                   	stos   %al,%es:(%rdi)
    48fa:	aa                   	stos   %al,%es:(%rdi)
    48fb:	aa                   	stos   %al,%es:(%rdi)
    48fc:	aa                   	stos   %al,%es:(%rdi)
    48fd:	aa                   	stos   %al,%es:(%rdi)
    48fe:	aa                   	stos   %al,%es:(%rdi)
    48ff:	aa                   	stos   %al,%es:(%rdi)
    4900:	aa                   	stos   %al,%es:(%rdi)
    4901:	aa                   	stos   %al,%es:(%rdi)
    4902:	aa                   	stos   %al,%es:(%rdi)
    4903:	aa                   	stos   %al,%es:(%rdi)
    4904:	aa                   	stos   %al,%es:(%rdi)
    4905:	aa                   	stos   %al,%es:(%rdi)
    4906:	aa                   	stos   %al,%es:(%rdi)
    4907:	aa                   	stos   %al,%es:(%rdi)
    4908:	aa                   	stos   %al,%es:(%rdi)
    4909:	aa                   	stos   %al,%es:(%rdi)
    490a:	aa                   	stos   %al,%es:(%rdi)
    490b:	aa                   	stos   %al,%es:(%rdi)
    490c:	aa                   	stos   %al,%es:(%rdi)
    490d:	aa                   	stos   %al,%es:(%rdi)
    490e:	aa                   	stos   %al,%es:(%rdi)
    490f:	aa                   	stos   %al,%es:(%rdi)
    4910:	aa                   	stos   %al,%es:(%rdi)
    4911:	aa                   	stos   %al,%es:(%rdi)
    4912:	aa                   	stos   %al,%es:(%rdi)
    4913:	aa                   	stos   %al,%es:(%rdi)
    4914:	aa                   	stos   %al,%es:(%rdi)
    4915:	aa                   	stos   %al,%es:(%rdi)
    4916:	aa                   	stos   %al,%es:(%rdi)
    4917:	aa                   	stos   %al,%es:(%rdi)
    4918:	aa                   	stos   %al,%es:(%rdi)
    4919:	aa                   	stos   %al,%es:(%rdi)
    491a:	aa                   	stos   %al,%es:(%rdi)
    491b:	aa                   	stos   %al,%es:(%rdi)
    491c:	aa                   	stos   %al,%es:(%rdi)
    491d:	aa                   	stos   %al,%es:(%rdi)
    491e:	aa                   	stos   %al,%es:(%rdi)
    491f:	aa                   	stos   %al,%es:(%rdi)
    4920:	aa                   	stos   %al,%es:(%rdi)
    4921:	aa                   	stos   %al,%es:(%rdi)
    4922:	aa                   	stos   %al,%es:(%rdi)
    4923:	aa                   	stos   %al,%es:(%rdi)
    4924:	aa                   	stos   %al,%es:(%rdi)
    4925:	aa                   	stos   %al,%es:(%rdi)
    4926:	aa                   	stos   %al,%es:(%rdi)
    4927:	aa                   	stos   %al,%es:(%rdi)
    4928:	aa                   	stos   %al,%es:(%rdi)
    4929:	aa                   	stos   %al,%es:(%rdi)
    492a:	aa                   	stos   %al,%es:(%rdi)
    492b:	aa                   	stos   %al,%es:(%rdi)
    492c:	aa                   	stos   %al,%es:(%rdi)
    492d:	aa                   	stos   %al,%es:(%rdi)
    492e:	aa                   	stos   %al,%es:(%rdi)
    492f:	aa                   	stos   %al,%es:(%rdi)
    4930:	aa                   	stos   %al,%es:(%rdi)
    4931:	aa                   	stos   %al,%es:(%rdi)
    4932:	aa                   	stos   %al,%es:(%rdi)
    4933:	aa                   	stos   %al,%es:(%rdi)
    4934:	aa                   	stos   %al,%es:(%rdi)
    4935:	aa                   	stos   %al,%es:(%rdi)
    4936:	aa                   	stos   %al,%es:(%rdi)
    4937:	aa                   	stos   %al,%es:(%rdi)
    4938:	aa                   	stos   %al,%es:(%rdi)
    4939:	aa                   	stos   %al,%es:(%rdi)
    493a:	aa                   	stos   %al,%es:(%rdi)
    493b:	aa                   	stos   %al,%es:(%rdi)
    493c:	aa                   	stos   %al,%es:(%rdi)
    493d:	aa                   	stos   %al,%es:(%rdi)
    493e:	aa                   	stos   %al,%es:(%rdi)
    493f:	aa                   	stos   %al,%es:(%rdi)
    4940:	aa                   	stos   %al,%es:(%rdi)
    4941:	aa                   	stos   %al,%es:(%rdi)
    4942:	aa                   	stos   %al,%es:(%rdi)
    4943:	aa                   	stos   %al,%es:(%rdi)
    4944:	aa                   	stos   %al,%es:(%rdi)
    4945:	aa                   	stos   %al,%es:(%rdi)
    4946:	aa                   	stos   %al,%es:(%rdi)
    4947:	aa                   	stos   %al,%es:(%rdi)
    4948:	aa                   	stos   %al,%es:(%rdi)
    4949:	aa                   	stos   %al,%es:(%rdi)
    494a:	aa                   	stos   %al,%es:(%rdi)
    494b:	aa                   	stos   %al,%es:(%rdi)
    494c:	aa                   	stos   %al,%es:(%rdi)
    494d:	aa                   	stos   %al,%es:(%rdi)
    494e:	aa                   	stos   %al,%es:(%rdi)
    494f:	aa                   	stos   %al,%es:(%rdi)
    4950:	aa                   	stos   %al,%es:(%rdi)
    4951:	aa                   	stos   %al,%es:(%rdi)
    4952:	aa                   	stos   %al,%es:(%rdi)
    4953:	aa                   	stos   %al,%es:(%rdi)
    4954:	aa                   	stos   %al,%es:(%rdi)
    4955:	aa                   	stos   %al,%es:(%rdi)
    4956:	aa                   	stos   %al,%es:(%rdi)
    4957:	aa                   	stos   %al,%es:(%rdi)
    4958:	aa                   	stos   %al,%es:(%rdi)
    4959:	aa                   	stos   %al,%es:(%rdi)
    495a:	aa                   	stos   %al,%es:(%rdi)
    495b:	aa                   	stos   %al,%es:(%rdi)
    495c:	aa                   	stos   %al,%es:(%rdi)
    495d:	aa                   	stos   %al,%es:(%rdi)
    495e:	aa                   	stos   %al,%es:(%rdi)
    495f:	aa                   	stos   %al,%es:(%rdi)
    4960:	aa                   	stos   %al,%es:(%rdi)
    4961:	aa                   	stos   %al,%es:(%rdi)
    4962:	aa                   	stos   %al,%es:(%rdi)
    4963:	aa                   	stos   %al,%es:(%rdi)
    4964:	aa                   	stos   %al,%es:(%rdi)
    4965:	aa                   	stos   %al,%es:(%rdi)
    4966:	aa                   	stos   %al,%es:(%rdi)
    4967:	aa                   	stos   %al,%es:(%rdi)
    4968:	aa                   	stos   %al,%es:(%rdi)
    4969:	aa                   	stos   %al,%es:(%rdi)
    496a:	aa                   	stos   %al,%es:(%rdi)
    496b:	aa                   	stos   %al,%es:(%rdi)
    496c:	aa                   	stos   %al,%es:(%rdi)
    496d:	aa                   	stos   %al,%es:(%rdi)
    496e:	aa                   	stos   %al,%es:(%rdi)
    496f:	aa                   	stos   %al,%es:(%rdi)
    4970:	aa                   	stos   %al,%es:(%rdi)
    4971:	aa                   	stos   %al,%es:(%rdi)
    4972:	aa                   	stos   %al,%es:(%rdi)
    4973:	aa                   	stos   %al,%es:(%rdi)
    4974:	aa                   	stos   %al,%es:(%rdi)
    4975:	aa                   	stos   %al,%es:(%rdi)
    4976:	aa                   	stos   %al,%es:(%rdi)
    4977:	aa                   	stos   %al,%es:(%rdi)
    4978:	aa                   	stos   %al,%es:(%rdi)
    4979:	aa                   	stos   %al,%es:(%rdi)
    497a:	aa                   	stos   %al,%es:(%rdi)
    497b:	aa                   	stos   %al,%es:(%rdi)
    497c:	aa                   	stos   %al,%es:(%rdi)
    497d:	aa                   	stos   %al,%es:(%rdi)
    497e:	aa                   	stos   %al,%es:(%rdi)
    497f:	aa                   	stos   %al,%es:(%rdi)
    4980:	aa                   	stos   %al,%es:(%rdi)
    4981:	aa                   	stos   %al,%es:(%rdi)
    4982:	aa                   	stos   %al,%es:(%rdi)
    4983:	aa                   	stos   %al,%es:(%rdi)
    4984:	aa                   	stos   %al,%es:(%rdi)
    4985:	aa                   	stos   %al,%es:(%rdi)
    4986:	aa                   	stos   %al,%es:(%rdi)
    4987:	aa                   	stos   %al,%es:(%rdi)
    4988:	aa                   	stos   %al,%es:(%rdi)
    4989:	aa                   	stos   %al,%es:(%rdi)
    498a:	aa                   	stos   %al,%es:(%rdi)
    498b:	aa                   	stos   %al,%es:(%rdi)
    498c:	aa                   	stos   %al,%es:(%rdi)
    498d:	aa                   	stos   %al,%es:(%rdi)
    498e:	aa                   	stos   %al,%es:(%rdi)
    498f:	aa                   	stos   %al,%es:(%rdi)
    4990:	aa                   	stos   %al,%es:(%rdi)
    4991:	aa                   	stos   %al,%es:(%rdi)
    4992:	aa                   	stos   %al,%es:(%rdi)
    4993:	aa                   	stos   %al,%es:(%rdi)
    4994:	aa                   	stos   %al,%es:(%rdi)
    4995:	aa                   	stos   %al,%es:(%rdi)
    4996:	aa                   	stos   %al,%es:(%rdi)
    4997:	aa                   	stos   %al,%es:(%rdi)
    4998:	aa                   	stos   %al,%es:(%rdi)
    4999:	aa                   	stos   %al,%es:(%rdi)
    499a:	aa                   	stos   %al,%es:(%rdi)
    499b:	aa                   	stos   %al,%es:(%rdi)
    499c:	aa                   	stos   %al,%es:(%rdi)
    499d:	aa                   	stos   %al,%es:(%rdi)
    499e:	aa                   	stos   %al,%es:(%rdi)
    499f:	aa                   	stos   %al,%es:(%rdi)
    49a0:	aa                   	stos   %al,%es:(%rdi)
    49a1:	aa                   	stos   %al,%es:(%rdi)
    49a2:	aa                   	stos   %al,%es:(%rdi)
    49a3:	aa                   	stos   %al,%es:(%rdi)
    49a4:	aa                   	stos   %al,%es:(%rdi)
    49a5:	aa                   	stos   %al,%es:(%rdi)
    49a6:	aa                   	stos   %al,%es:(%rdi)
    49a7:	aa                   	stos   %al,%es:(%rdi)
    49a8:	aa                   	stos   %al,%es:(%rdi)
    49a9:	aa                   	stos   %al,%es:(%rdi)
    49aa:	aa                   	stos   %al,%es:(%rdi)
    49ab:	aa                   	stos   %al,%es:(%rdi)
    49ac:	aa                   	stos   %al,%es:(%rdi)
    49ad:	aa                   	stos   %al,%es:(%rdi)
    49ae:	aa                   	stos   %al,%es:(%rdi)
    49af:	aa                   	stos   %al,%es:(%rdi)
    49b0:	aa                   	stos   %al,%es:(%rdi)
    49b1:	aa                   	stos   %al,%es:(%rdi)
    49b2:	aa                   	stos   %al,%es:(%rdi)
    49b3:	aa                   	stos   %al,%es:(%rdi)
    49b4:	aa                   	stos   %al,%es:(%rdi)
    49b5:	aa                   	stos   %al,%es:(%rdi)
    49b6:	aa                   	stos   %al,%es:(%rdi)
    49b7:	aa                   	stos   %al,%es:(%rdi)
    49b8:	aa                   	stos   %al,%es:(%rdi)
    49b9:	aa                   	stos   %al,%es:(%rdi)
    49ba:	aa                   	stos   %al,%es:(%rdi)
    49bb:	aa                   	stos   %al,%es:(%rdi)
    49bc:	aa                   	stos   %al,%es:(%rdi)
    49bd:	aa                   	stos   %al,%es:(%rdi)
    49be:	aa                   	stos   %al,%es:(%rdi)
    49bf:	aa                   	stos   %al,%es:(%rdi)
    49c0:	aa                   	stos   %al,%es:(%rdi)
    49c1:	aa                   	stos   %al,%es:(%rdi)
    49c2:	aa                   	stos   %al,%es:(%rdi)
    49c3:	aa                   	stos   %al,%es:(%rdi)
    49c4:	aa                   	stos   %al,%es:(%rdi)
    49c5:	aa                   	stos   %al,%es:(%rdi)
    49c6:	aa                   	stos   %al,%es:(%rdi)
    49c7:	aa                   	stos   %al,%es:(%rdi)
    49c8:	aa                   	stos   %al,%es:(%rdi)
    49c9:	aa                   	stos   %al,%es:(%rdi)
    49ca:	aa                   	stos   %al,%es:(%rdi)
    49cb:	aa                   	stos   %al,%es:(%rdi)
    49cc:	aa                   	stos   %al,%es:(%rdi)
    49cd:	aa                   	stos   %al,%es:(%rdi)
    49ce:	aa                   	stos   %al,%es:(%rdi)
    49cf:	aa                   	stos   %al,%es:(%rdi)
    49d0:	aa                   	stos   %al,%es:(%rdi)
    49d1:	aa                   	stos   %al,%es:(%rdi)
    49d2:	aa                   	stos   %al,%es:(%rdi)
    49d3:	aa                   	stos   %al,%es:(%rdi)
    49d4:	aa                   	stos   %al,%es:(%rdi)
    49d5:	aa                   	stos   %al,%es:(%rdi)
    49d6:	aa                   	stos   %al,%es:(%rdi)
    49d7:	aa                   	stos   %al,%es:(%rdi)
    49d8:	aa                   	stos   %al,%es:(%rdi)
    49d9:	aa                   	stos   %al,%es:(%rdi)
    49da:	aa                   	stos   %al,%es:(%rdi)
    49db:	aa                   	stos   %al,%es:(%rdi)
    49dc:	aa                   	stos   %al,%es:(%rdi)
    49dd:	aa                   	stos   %al,%es:(%rdi)
    49de:	aa                   	stos   %al,%es:(%rdi)
    49df:	aa                   	stos   %al,%es:(%rdi)
    49e0:	aa                   	stos   %al,%es:(%rdi)
    49e1:	aa                   	stos   %al,%es:(%rdi)
    49e2:	aa                   	stos   %al,%es:(%rdi)
    49e3:	aa                   	stos   %al,%es:(%rdi)
    49e4:	aa                   	stos   %al,%es:(%rdi)
    49e5:	aa                   	stos   %al,%es:(%rdi)
    49e6:	aa                   	stos   %al,%es:(%rdi)
    49e7:	aa                   	stos   %al,%es:(%rdi)
    49e8:	aa                   	stos   %al,%es:(%rdi)
    49e9:	aa                   	stos   %al,%es:(%rdi)
    49ea:	aa                   	stos   %al,%es:(%rdi)
    49eb:	aa                   	stos   %al,%es:(%rdi)
    49ec:	aa                   	stos   %al,%es:(%rdi)
    49ed:	aa                   	stos   %al,%es:(%rdi)
    49ee:	aa                   	stos   %al,%es:(%rdi)
    49ef:	aa                   	stos   %al,%es:(%rdi)
    49f0:	aa                   	stos   %al,%es:(%rdi)
    49f1:	aa                   	stos   %al,%es:(%rdi)
    49f2:	aa                   	stos   %al,%es:(%rdi)
    49f3:	aa                   	stos   %al,%es:(%rdi)
    49f4:	aa                   	stos   %al,%es:(%rdi)
    49f5:	aa                   	stos   %al,%es:(%rdi)
    49f6:	aa                   	stos   %al,%es:(%rdi)
    49f7:	aa                   	stos   %al,%es:(%rdi)
    49f8:	aa                   	stos   %al,%es:(%rdi)
    49f9:	aa                   	stos   %al,%es:(%rdi)
    49fa:	aa                   	stos   %al,%es:(%rdi)
    49fb:	aa                   	stos   %al,%es:(%rdi)
    49fc:	aa                   	stos   %al,%es:(%rdi)
    49fd:	aa                   	stos   %al,%es:(%rdi)
    49fe:	aa                   	stos   %al,%es:(%rdi)
    49ff:	aa                   	stos   %al,%es:(%rdi)
    4a00:	aa                   	stos   %al,%es:(%rdi)
    4a01:	aa                   	stos   %al,%es:(%rdi)
    4a02:	aa                   	stos   %al,%es:(%rdi)
    4a03:	aa                   	stos   %al,%es:(%rdi)
    4a04:	aa                   	stos   %al,%es:(%rdi)
    4a05:	aa                   	stos   %al,%es:(%rdi)
    4a06:	aa                   	stos   %al,%es:(%rdi)
    4a07:	aa                   	stos   %al,%es:(%rdi)
    4a08:	aa                   	stos   %al,%es:(%rdi)
    4a09:	aa                   	stos   %al,%es:(%rdi)
    4a0a:	aa                   	stos   %al,%es:(%rdi)
    4a0b:	aa                   	stos   %al,%es:(%rdi)
    4a0c:	aa                   	stos   %al,%es:(%rdi)
    4a0d:	aa                   	stos   %al,%es:(%rdi)
    4a0e:	aa                   	stos   %al,%es:(%rdi)
    4a0f:	aa                   	stos   %al,%es:(%rdi)
    4a10:	aa                   	stos   %al,%es:(%rdi)
    4a11:	aa                   	stos   %al,%es:(%rdi)
    4a12:	aa                   	stos   %al,%es:(%rdi)
    4a13:	aa                   	stos   %al,%es:(%rdi)
    4a14:	aa                   	stos   %al,%es:(%rdi)
    4a15:	aa                   	stos   %al,%es:(%rdi)
    4a16:	aa                   	stos   %al,%es:(%rdi)
    4a17:	aa                   	stos   %al,%es:(%rdi)
    4a18:	aa                   	stos   %al,%es:(%rdi)
    4a19:	aa                   	stos   %al,%es:(%rdi)
    4a1a:	aa                   	stos   %al,%es:(%rdi)
    4a1b:	aa                   	stos   %al,%es:(%rdi)
    4a1c:	aa                   	stos   %al,%es:(%rdi)
    4a1d:	aa                   	stos   %al,%es:(%rdi)
    4a1e:	aa                   	stos   %al,%es:(%rdi)
    4a1f:	aa                   	stos   %al,%es:(%rdi)
    4a20:	aa                   	stos   %al,%es:(%rdi)
    4a21:	aa                   	stos   %al,%es:(%rdi)
    4a22:	aa                   	stos   %al,%es:(%rdi)
    4a23:	aa                   	stos   %al,%es:(%rdi)
    4a24:	aa                   	stos   %al,%es:(%rdi)
    4a25:	aa                   	stos   %al,%es:(%rdi)
    4a26:	aa                   	stos   %al,%es:(%rdi)
    4a27:	aa                   	stos   %al,%es:(%rdi)
    4a28:	aa                   	stos   %al,%es:(%rdi)
    4a29:	aa                   	stos   %al,%es:(%rdi)
    4a2a:	aa                   	stos   %al,%es:(%rdi)
    4a2b:	aa                   	stos   %al,%es:(%rdi)
    4a2c:	aa                   	stos   %al,%es:(%rdi)
    4a2d:	aa                   	stos   %al,%es:(%rdi)
    4a2e:	aa                   	stos   %al,%es:(%rdi)
    4a2f:	aa                   	stos   %al,%es:(%rdi)
    4a30:	aa                   	stos   %al,%es:(%rdi)
    4a31:	aa                   	stos   %al,%es:(%rdi)
    4a32:	aa                   	stos   %al,%es:(%rdi)
    4a33:	aa                   	stos   %al,%es:(%rdi)
    4a34:	aa                   	stos   %al,%es:(%rdi)
    4a35:	aa                   	stos   %al,%es:(%rdi)
    4a36:	aa                   	stos   %al,%es:(%rdi)
    4a37:	aa                   	stos   %al,%es:(%rdi)
    4a38:	aa                   	stos   %al,%es:(%rdi)
    4a39:	aa                   	stos   %al,%es:(%rdi)
    4a3a:	aa                   	stos   %al,%es:(%rdi)
    4a3b:	aa                   	stos   %al,%es:(%rdi)
    4a3c:	aa                   	stos   %al,%es:(%rdi)
    4a3d:	aa                   	stos   %al,%es:(%rdi)
    4a3e:	aa                   	stos   %al,%es:(%rdi)
    4a3f:	aa                   	stos   %al,%es:(%rdi)
    4a40:	aa                   	stos   %al,%es:(%rdi)
    4a41:	aa                   	stos   %al,%es:(%rdi)
    4a42:	aa                   	stos   %al,%es:(%rdi)
    4a43:	aa                   	stos   %al,%es:(%rdi)
    4a44:	aa                   	stos   %al,%es:(%rdi)
    4a45:	aa                   	stos   %al,%es:(%rdi)
    4a46:	aa                   	stos   %al,%es:(%rdi)
    4a47:	aa                   	stos   %al,%es:(%rdi)
    4a48:	aa                   	stos   %al,%es:(%rdi)
    4a49:	aa                   	stos   %al,%es:(%rdi)
    4a4a:	aa                   	stos   %al,%es:(%rdi)
    4a4b:	aa                   	stos   %al,%es:(%rdi)
    4a4c:	aa                   	stos   %al,%es:(%rdi)
    4a4d:	aa                   	stos   %al,%es:(%rdi)
    4a4e:	aa                   	stos   %al,%es:(%rdi)
    4a4f:	aa                   	stos   %al,%es:(%rdi)
    4a50:	aa                   	stos   %al,%es:(%rdi)
    4a51:	aa                   	stos   %al,%es:(%rdi)
    4a52:	aa                   	stos   %al,%es:(%rdi)
    4a53:	aa                   	stos   %al,%es:(%rdi)
    4a54:	aa                   	stos   %al,%es:(%rdi)
    4a55:	aa                   	stos   %al,%es:(%rdi)
    4a56:	aa                   	stos   %al,%es:(%rdi)
    4a57:	aa                   	stos   %al,%es:(%rdi)
    4a58:	aa                   	stos   %al,%es:(%rdi)
    4a59:	aa                   	stos   %al,%es:(%rdi)
    4a5a:	aa                   	stos   %al,%es:(%rdi)
    4a5b:	aa                   	stos   %al,%es:(%rdi)
    4a5c:	aa                   	stos   %al,%es:(%rdi)
    4a5d:	aa                   	stos   %al,%es:(%rdi)
    4a5e:	aa                   	stos   %al,%es:(%rdi)
    4a5f:	aa                   	stos   %al,%es:(%rdi)
    4a60:	aa                   	stos   %al,%es:(%rdi)
    4a61:	aa                   	stos   %al,%es:(%rdi)
    4a62:	aa                   	stos   %al,%es:(%rdi)
    4a63:	aa                   	stos   %al,%es:(%rdi)
    4a64:	aa                   	stos   %al,%es:(%rdi)
    4a65:	aa                   	stos   %al,%es:(%rdi)
    4a66:	aa                   	stos   %al,%es:(%rdi)
    4a67:	aa                   	stos   %al,%es:(%rdi)
    4a68:	aa                   	stos   %al,%es:(%rdi)
    4a69:	aa                   	stos   %al,%es:(%rdi)
    4a6a:	aa                   	stos   %al,%es:(%rdi)
    4a6b:	aa                   	stos   %al,%es:(%rdi)
    4a6c:	aa                   	stos   %al,%es:(%rdi)
    4a6d:	aa                   	stos   %al,%es:(%rdi)
    4a6e:	aa                   	stos   %al,%es:(%rdi)
    4a6f:	aa                   	stos   %al,%es:(%rdi)
    4a70:	aa                   	stos   %al,%es:(%rdi)
    4a71:	aa                   	stos   %al,%es:(%rdi)
    4a72:	aa                   	stos   %al,%es:(%rdi)
    4a73:	aa                   	stos   %al,%es:(%rdi)
    4a74:	aa                   	stos   %al,%es:(%rdi)
    4a75:	aa                   	stos   %al,%es:(%rdi)
    4a76:	aa                   	stos   %al,%es:(%rdi)
    4a77:	aa                   	stos   %al,%es:(%rdi)
    4a78:	aa                   	stos   %al,%es:(%rdi)
    4a79:	aa                   	stos   %al,%es:(%rdi)
    4a7a:	aa                   	stos   %al,%es:(%rdi)
    4a7b:	aa                   	stos   %al,%es:(%rdi)
    4a7c:	aa                   	stos   %al,%es:(%rdi)
    4a7d:	aa                   	stos   %al,%es:(%rdi)
    4a7e:	aa                   	stos   %al,%es:(%rdi)
    4a7f:	aa                   	stos   %al,%es:(%rdi)
    4a80:	aa                   	stos   %al,%es:(%rdi)
    4a81:	aa                   	stos   %al,%es:(%rdi)
    4a82:	aa                   	stos   %al,%es:(%rdi)
    4a83:	aa                   	stos   %al,%es:(%rdi)
    4a84:	aa                   	stos   %al,%es:(%rdi)
    4a85:	aa                   	stos   %al,%es:(%rdi)
    4a86:	aa                   	stos   %al,%es:(%rdi)
    4a87:	aa                   	stos   %al,%es:(%rdi)
    4a88:	aa                   	stos   %al,%es:(%rdi)
    4a89:	aa                   	stos   %al,%es:(%rdi)
    4a8a:	aa                   	stos   %al,%es:(%rdi)
    4a8b:	aa                   	stos   %al,%es:(%rdi)
    4a8c:	aa                   	stos   %al,%es:(%rdi)
    4a8d:	aa                   	stos   %al,%es:(%rdi)
    4a8e:	aa                   	stos   %al,%es:(%rdi)
    4a8f:	aa                   	stos   %al,%es:(%rdi)
    4a90:	aa                   	stos   %al,%es:(%rdi)
    4a91:	aa                   	stos   %al,%es:(%rdi)
    4a92:	aa                   	stos   %al,%es:(%rdi)
    4a93:	aa                   	stos   %al,%es:(%rdi)
    4a94:	aa                   	stos   %al,%es:(%rdi)
    4a95:	aa                   	stos   %al,%es:(%rdi)
    4a96:	aa                   	stos   %al,%es:(%rdi)
    4a97:	aa                   	stos   %al,%es:(%rdi)
    4a98:	aa                   	stos   %al,%es:(%rdi)
    4a99:	aa                   	stos   %al,%es:(%rdi)
    4a9a:	aa                   	stos   %al,%es:(%rdi)
    4a9b:	aa                   	stos   %al,%es:(%rdi)
    4a9c:	aa                   	stos   %al,%es:(%rdi)
    4a9d:	aa                   	stos   %al,%es:(%rdi)
    4a9e:	aa                   	stos   %al,%es:(%rdi)
    4a9f:	aa                   	stos   %al,%es:(%rdi)
    4aa0:	aa                   	stos   %al,%es:(%rdi)
    4aa1:	aa                   	stos   %al,%es:(%rdi)
    4aa2:	aa                   	stos   %al,%es:(%rdi)
    4aa3:	aa                   	stos   %al,%es:(%rdi)
    4aa4:	aa                   	stos   %al,%es:(%rdi)
    4aa5:	aa                   	stos   %al,%es:(%rdi)
    4aa6:	aa                   	stos   %al,%es:(%rdi)
    4aa7:	aa                   	stos   %al,%es:(%rdi)
    4aa8:	aa                   	stos   %al,%es:(%rdi)
    4aa9:	aa                   	stos   %al,%es:(%rdi)
    4aaa:	aa                   	stos   %al,%es:(%rdi)
    4aab:	aa                   	stos   %al,%es:(%rdi)
    4aac:	aa                   	stos   %al,%es:(%rdi)
    4aad:	aa                   	stos   %al,%es:(%rdi)
    4aae:	aa                   	stos   %al,%es:(%rdi)
    4aaf:	aa                   	stos   %al,%es:(%rdi)
    4ab0:	aa                   	stos   %al,%es:(%rdi)
    4ab1:	aa                   	stos   %al,%es:(%rdi)
    4ab2:	aa                   	stos   %al,%es:(%rdi)
    4ab3:	aa                   	stos   %al,%es:(%rdi)
    4ab4:	aa                   	stos   %al,%es:(%rdi)
    4ab5:	aa                   	stos   %al,%es:(%rdi)
    4ab6:	aa                   	stos   %al,%es:(%rdi)
    4ab7:	aa                   	stos   %al,%es:(%rdi)
    4ab8:	aa                   	stos   %al,%es:(%rdi)
    4ab9:	aa                   	stos   %al,%es:(%rdi)
    4aba:	aa                   	stos   %al,%es:(%rdi)
    4abb:	aa                   	stos   %al,%es:(%rdi)
    4abc:	aa                   	stos   %al,%es:(%rdi)
    4abd:	aa                   	stos   %al,%es:(%rdi)
    4abe:	aa                   	stos   %al,%es:(%rdi)
    4abf:	aa                   	stos   %al,%es:(%rdi)
    4ac0:	aa                   	stos   %al,%es:(%rdi)
    4ac1:	aa                   	stos   %al,%es:(%rdi)
    4ac2:	aa                   	stos   %al,%es:(%rdi)
    4ac3:	aa                   	stos   %al,%es:(%rdi)
    4ac4:	aa                   	stos   %al,%es:(%rdi)
    4ac5:	aa                   	stos   %al,%es:(%rdi)
    4ac6:	aa                   	stos   %al,%es:(%rdi)
    4ac7:	aa                   	stos   %al,%es:(%rdi)
    4ac8:	aa                   	stos   %al,%es:(%rdi)
    4ac9:	aa                   	stos   %al,%es:(%rdi)
    4aca:	aa                   	stos   %al,%es:(%rdi)
    4acb:	aa                   	stos   %al,%es:(%rdi)
    4acc:	aa                   	stos   %al,%es:(%rdi)
    4acd:	aa                   	stos   %al,%es:(%rdi)
    4ace:	aa                   	stos   %al,%es:(%rdi)
    4acf:	aa                   	stos   %al,%es:(%rdi)
    4ad0:	aa                   	stos   %al,%es:(%rdi)
    4ad1:	aa                   	stos   %al,%es:(%rdi)
    4ad2:	aa                   	stos   %al,%es:(%rdi)
    4ad3:	aa                   	stos   %al,%es:(%rdi)
    4ad4:	aa                   	stos   %al,%es:(%rdi)
    4ad5:	aa                   	stos   %al,%es:(%rdi)
    4ad6:	aa                   	stos   %al,%es:(%rdi)
    4ad7:	aa                   	stos   %al,%es:(%rdi)
    4ad8:	aa                   	stos   %al,%es:(%rdi)
    4ad9:	aa                   	stos   %al,%es:(%rdi)
    4ada:	aa                   	stos   %al,%es:(%rdi)
    4adb:	aa                   	stos   %al,%es:(%rdi)
    4adc:	aa                   	stos   %al,%es:(%rdi)
    4add:	aa                   	stos   %al,%es:(%rdi)
    4ade:	aa                   	stos   %al,%es:(%rdi)
    4adf:	aa                   	stos   %al,%es:(%rdi)
    4ae0:	aa                   	stos   %al,%es:(%rdi)
    4ae1:	aa                   	stos   %al,%es:(%rdi)
    4ae2:	aa                   	stos   %al,%es:(%rdi)
    4ae3:	aa                   	stos   %al,%es:(%rdi)
    4ae4:	aa                   	stos   %al,%es:(%rdi)
    4ae5:	aa                   	stos   %al,%es:(%rdi)
    4ae6:	aa                   	stos   %al,%es:(%rdi)
    4ae7:	aa                   	stos   %al,%es:(%rdi)
    4ae8:	aa                   	stos   %al,%es:(%rdi)
    4ae9:	aa                   	stos   %al,%es:(%rdi)
    4aea:	aa                   	stos   %al,%es:(%rdi)
    4aeb:	aa                   	stos   %al,%es:(%rdi)
    4aec:	aa                   	stos   %al,%es:(%rdi)
    4aed:	aa                   	stos   %al,%es:(%rdi)
    4aee:	aa                   	stos   %al,%es:(%rdi)
    4aef:	aa                   	stos   %al,%es:(%rdi)
    4af0:	aa                   	stos   %al,%es:(%rdi)
    4af1:	aa                   	stos   %al,%es:(%rdi)
    4af2:	aa                   	stos   %al,%es:(%rdi)
    4af3:	aa                   	stos   %al,%es:(%rdi)
    4af4:	aa                   	stos   %al,%es:(%rdi)
    4af5:	aa                   	stos   %al,%es:(%rdi)
    4af6:	aa                   	stos   %al,%es:(%rdi)
    4af7:	aa                   	stos   %al,%es:(%rdi)
    4af8:	aa                   	stos   %al,%es:(%rdi)
    4af9:	aa                   	stos   %al,%es:(%rdi)
    4afa:	aa                   	stos   %al,%es:(%rdi)
    4afb:	aa                   	stos   %al,%es:(%rdi)
    4afc:	aa                   	stos   %al,%es:(%rdi)
    4afd:	aa                   	stos   %al,%es:(%rdi)
    4afe:	aa                   	stos   %al,%es:(%rdi)
    4aff:	aa                   	stos   %al,%es:(%rdi)
    4b00:	aa                   	stos   %al,%es:(%rdi)
    4b01:	aa                   	stos   %al,%es:(%rdi)
    4b02:	aa                   	stos   %al,%es:(%rdi)
    4b03:	aa                   	stos   %al,%es:(%rdi)
    4b04:	aa                   	stos   %al,%es:(%rdi)
    4b05:	aa                   	stos   %al,%es:(%rdi)
    4b06:	aa                   	stos   %al,%es:(%rdi)
    4b07:	aa                   	stos   %al,%es:(%rdi)
    4b08:	aa                   	stos   %al,%es:(%rdi)
    4b09:	aa                   	stos   %al,%es:(%rdi)
    4b0a:	aa                   	stos   %al,%es:(%rdi)
    4b0b:	aa                   	stos   %al,%es:(%rdi)
    4b0c:	aa                   	stos   %al,%es:(%rdi)
    4b0d:	aa                   	stos   %al,%es:(%rdi)
    4b0e:	aa                   	stos   %al,%es:(%rdi)
    4b0f:	aa                   	stos   %al,%es:(%rdi)
    4b10:	aa                   	stos   %al,%es:(%rdi)
    4b11:	aa                   	stos   %al,%es:(%rdi)
    4b12:	aa                   	stos   %al,%es:(%rdi)
    4b13:	aa                   	stos   %al,%es:(%rdi)
    4b14:	aa                   	stos   %al,%es:(%rdi)
    4b15:	aa                   	stos   %al,%es:(%rdi)
    4b16:	aa                   	stos   %al,%es:(%rdi)
    4b17:	aa                   	stos   %al,%es:(%rdi)
    4b18:	aa                   	stos   %al,%es:(%rdi)
    4b19:	aa                   	stos   %al,%es:(%rdi)
    4b1a:	aa                   	stos   %al,%es:(%rdi)
    4b1b:	aa                   	stos   %al,%es:(%rdi)
    4b1c:	aa                   	stos   %al,%es:(%rdi)
    4b1d:	aa                   	stos   %al,%es:(%rdi)
    4b1e:	aa                   	stos   %al,%es:(%rdi)
    4b1f:	aa                   	stos   %al,%es:(%rdi)
    4b20:	aa                   	stos   %al,%es:(%rdi)
    4b21:	aa                   	stos   %al,%es:(%rdi)
    4b22:	aa                   	stos   %al,%es:(%rdi)
    4b23:	aa                   	stos   %al,%es:(%rdi)
    4b24:	aa                   	stos   %al,%es:(%rdi)
    4b25:	aa                   	stos   %al,%es:(%rdi)
    4b26:	aa                   	stos   %al,%es:(%rdi)
    4b27:	aa                   	stos   %al,%es:(%rdi)
    4b28:	aa                   	stos   %al,%es:(%rdi)
    4b29:	aa                   	stos   %al,%es:(%rdi)
    4b2a:	aa                   	stos   %al,%es:(%rdi)
    4b2b:	aa                   	stos   %al,%es:(%rdi)
    4b2c:	aa                   	stos   %al,%es:(%rdi)
    4b2d:	aa                   	stos   %al,%es:(%rdi)
    4b2e:	aa                   	stos   %al,%es:(%rdi)
    4b2f:	aa                   	stos   %al,%es:(%rdi)
    4b30:	aa                   	stos   %al,%es:(%rdi)
    4b31:	aa                   	stos   %al,%es:(%rdi)
    4b32:	aa                   	stos   %al,%es:(%rdi)
    4b33:	aa                   	stos   %al,%es:(%rdi)
    4b34:	aa                   	stos   %al,%es:(%rdi)
    4b35:	aa                   	stos   %al,%es:(%rdi)
    4b36:	aa                   	stos   %al,%es:(%rdi)
    4b37:	aa                   	stos   %al,%es:(%rdi)
    4b38:	aa                   	stos   %al,%es:(%rdi)
    4b39:	aa                   	stos   %al,%es:(%rdi)
    4b3a:	aa                   	stos   %al,%es:(%rdi)
    4b3b:	aa                   	stos   %al,%es:(%rdi)
    4b3c:	aa                   	stos   %al,%es:(%rdi)
    4b3d:	aa                   	stos   %al,%es:(%rdi)
    4b3e:	aa                   	stos   %al,%es:(%rdi)
    4b3f:	aa                   	stos   %al,%es:(%rdi)
    4b40:	aa                   	stos   %al,%es:(%rdi)
    4b41:	aa                   	stos   %al,%es:(%rdi)
    4b42:	aa                   	stos   %al,%es:(%rdi)
    4b43:	aa                   	stos   %al,%es:(%rdi)
    4b44:	aa                   	stos   %al,%es:(%rdi)
    4b45:	aa                   	stos   %al,%es:(%rdi)
    4b46:	aa                   	stos   %al,%es:(%rdi)
    4b47:	aa                   	stos   %al,%es:(%rdi)
    4b48:	aa                   	stos   %al,%es:(%rdi)
    4b49:	aa                   	stos   %al,%es:(%rdi)
    4b4a:	aa                   	stos   %al,%es:(%rdi)
    4b4b:	aa                   	stos   %al,%es:(%rdi)
    4b4c:	aa                   	stos   %al,%es:(%rdi)
    4b4d:	aa                   	stos   %al,%es:(%rdi)
    4b4e:	aa                   	stos   %al,%es:(%rdi)
    4b4f:	aa                   	stos   %al,%es:(%rdi)
    4b50:	aa                   	stos   %al,%es:(%rdi)
    4b51:	aa                   	stos   %al,%es:(%rdi)
    4b52:	aa                   	stos   %al,%es:(%rdi)
    4b53:	aa                   	stos   %al,%es:(%rdi)
    4b54:	aa                   	stos   %al,%es:(%rdi)
    4b55:	aa                   	stos   %al,%es:(%rdi)
    4b56:	aa                   	stos   %al,%es:(%rdi)
    4b57:	aa                   	stos   %al,%es:(%rdi)
    4b58:	aa                   	stos   %al,%es:(%rdi)
    4b59:	aa                   	stos   %al,%es:(%rdi)
    4b5a:	aa                   	stos   %al,%es:(%rdi)
    4b5b:	aa                   	stos   %al,%es:(%rdi)
    4b5c:	aa                   	stos   %al,%es:(%rdi)
    4b5d:	aa                   	stos   %al,%es:(%rdi)
    4b5e:	aa                   	stos   %al,%es:(%rdi)
    4b5f:	aa                   	stos   %al,%es:(%rdi)
    4b60:	aa                   	stos   %al,%es:(%rdi)
    4b61:	aa                   	stos   %al,%es:(%rdi)
    4b62:	aa                   	stos   %al,%es:(%rdi)
    4b63:	aa                   	stos   %al,%es:(%rdi)
    4b64:	aa                   	stos   %al,%es:(%rdi)
    4b65:	aa                   	stos   %al,%es:(%rdi)
    4b66:	aa                   	stos   %al,%es:(%rdi)
    4b67:	aa                   	stos   %al,%es:(%rdi)
    4b68:	aa                   	stos   %al,%es:(%rdi)
    4b69:	aa                   	stos   %al,%es:(%rdi)
    4b6a:	aa                   	stos   %al,%es:(%rdi)
    4b6b:	aa                   	stos   %al,%es:(%rdi)
    4b6c:	aa                   	stos   %al,%es:(%rdi)
    4b6d:	aa                   	stos   %al,%es:(%rdi)
    4b6e:	aa                   	stos   %al,%es:(%rdi)
    4b6f:	aa                   	stos   %al,%es:(%rdi)
    4b70:	aa                   	stos   %al,%es:(%rdi)
    4b71:	aa                   	stos   %al,%es:(%rdi)
    4b72:	aa                   	stos   %al,%es:(%rdi)
    4b73:	aa                   	stos   %al,%es:(%rdi)
    4b74:	aa                   	stos   %al,%es:(%rdi)
    4b75:	aa                   	stos   %al,%es:(%rdi)
    4b76:	aa                   	stos   %al,%es:(%rdi)
    4b77:	aa                   	stos   %al,%es:(%rdi)
    4b78:	aa                   	stos   %al,%es:(%rdi)
    4b79:	aa                   	stos   %al,%es:(%rdi)
    4b7a:	aa                   	stos   %al,%es:(%rdi)
    4b7b:	aa                   	stos   %al,%es:(%rdi)
    4b7c:	aa                   	stos   %al,%es:(%rdi)
    4b7d:	aa                   	stos   %al,%es:(%rdi)
    4b7e:	aa                   	stos   %al,%es:(%rdi)
    4b7f:	aa                   	stos   %al,%es:(%rdi)
    4b80:	aa                   	stos   %al,%es:(%rdi)
    4b81:	aa                   	stos   %al,%es:(%rdi)
    4b82:	aa                   	stos   %al,%es:(%rdi)
    4b83:	aa                   	stos   %al,%es:(%rdi)
    4b84:	aa                   	stos   %al,%es:(%rdi)
    4b85:	aa                   	stos   %al,%es:(%rdi)
    4b86:	aa                   	stos   %al,%es:(%rdi)
    4b87:	aa                   	stos   %al,%es:(%rdi)
    4b88:	aa                   	stos   %al,%es:(%rdi)
    4b89:	aa                   	stos   %al,%es:(%rdi)
    4b8a:	aa                   	stos   %al,%es:(%rdi)
    4b8b:	aa                   	stos   %al,%es:(%rdi)
    4b8c:	aa                   	stos   %al,%es:(%rdi)
    4b8d:	aa                   	stos   %al,%es:(%rdi)
    4b8e:	aa                   	stos   %al,%es:(%rdi)
    4b8f:	aa                   	stos   %al,%es:(%rdi)
    4b90:	aa                   	stos   %al,%es:(%rdi)
    4b91:	aa                   	stos   %al,%es:(%rdi)
    4b92:	aa                   	stos   %al,%es:(%rdi)
    4b93:	aa                   	stos   %al,%es:(%rdi)
    4b94:	aa                   	stos   %al,%es:(%rdi)
    4b95:	aa                   	stos   %al,%es:(%rdi)
    4b96:	aa                   	stos   %al,%es:(%rdi)
    4b97:	aa                   	stos   %al,%es:(%rdi)
    4b98:	aa                   	stos   %al,%es:(%rdi)
    4b99:	aa                   	stos   %al,%es:(%rdi)
    4b9a:	aa                   	stos   %al,%es:(%rdi)
    4b9b:	aa                   	stos   %al,%es:(%rdi)
    4b9c:	aa                   	stos   %al,%es:(%rdi)
    4b9d:	aa                   	stos   %al,%es:(%rdi)
    4b9e:	aa                   	stos   %al,%es:(%rdi)
    4b9f:	aa                   	stos   %al,%es:(%rdi)
    4ba0:	aa                   	stos   %al,%es:(%rdi)
    4ba1:	aa                   	stos   %al,%es:(%rdi)
    4ba2:	aa                   	stos   %al,%es:(%rdi)
    4ba3:	aa                   	stos   %al,%es:(%rdi)
    4ba4:	aa                   	stos   %al,%es:(%rdi)
    4ba5:	aa                   	stos   %al,%es:(%rdi)
    4ba6:	aa                   	stos   %al,%es:(%rdi)
    4ba7:	aa                   	stos   %al,%es:(%rdi)
    4ba8:	aa                   	stos   %al,%es:(%rdi)
    4ba9:	aa                   	stos   %al,%es:(%rdi)
    4baa:	aa                   	stos   %al,%es:(%rdi)
    4bab:	aa                   	stos   %al,%es:(%rdi)
    4bac:	aa                   	stos   %al,%es:(%rdi)
    4bad:	aa                   	stos   %al,%es:(%rdi)
    4bae:	aa                   	stos   %al,%es:(%rdi)
    4baf:	aa                   	stos   %al,%es:(%rdi)
    4bb0:	aa                   	stos   %al,%es:(%rdi)
    4bb1:	aa                   	stos   %al,%es:(%rdi)
    4bb2:	aa                   	stos   %al,%es:(%rdi)
    4bb3:	aa                   	stos   %al,%es:(%rdi)
    4bb4:	aa                   	stos   %al,%es:(%rdi)
    4bb5:	aa                   	stos   %al,%es:(%rdi)
    4bb6:	aa                   	stos   %al,%es:(%rdi)
    4bb7:	aa                   	stos   %al,%es:(%rdi)
    4bb8:	aa                   	stos   %al,%es:(%rdi)
    4bb9:	aa                   	stos   %al,%es:(%rdi)
    4bba:	aa                   	stos   %al,%es:(%rdi)
    4bbb:	aa                   	stos   %al,%es:(%rdi)
    4bbc:	aa                   	stos   %al,%es:(%rdi)
    4bbd:	aa                   	stos   %al,%es:(%rdi)
    4bbe:	aa                   	stos   %al,%es:(%rdi)
    4bbf:	aa                   	stos   %al,%es:(%rdi)
    4bc0:	aa                   	stos   %al,%es:(%rdi)
    4bc1:	aa                   	stos   %al,%es:(%rdi)
    4bc2:	aa                   	stos   %al,%es:(%rdi)
    4bc3:	aa                   	stos   %al,%es:(%rdi)
    4bc4:	aa                   	stos   %al,%es:(%rdi)
    4bc5:	aa                   	stos   %al,%es:(%rdi)
    4bc6:	aa                   	stos   %al,%es:(%rdi)
    4bc7:	aa                   	stos   %al,%es:(%rdi)
    4bc8:	aa                   	stos   %al,%es:(%rdi)
    4bc9:	aa                   	stos   %al,%es:(%rdi)
    4bca:	aa                   	stos   %al,%es:(%rdi)
    4bcb:	aa                   	stos   %al,%es:(%rdi)
    4bcc:	aa                   	stos   %al,%es:(%rdi)
    4bcd:	aa                   	stos   %al,%es:(%rdi)
    4bce:	aa                   	stos   %al,%es:(%rdi)
    4bcf:	aa                   	stos   %al,%es:(%rdi)
    4bd0:	aa                   	stos   %al,%es:(%rdi)
    4bd1:	aa                   	stos   %al,%es:(%rdi)
    4bd2:	aa                   	stos   %al,%es:(%rdi)
    4bd3:	aa                   	stos   %al,%es:(%rdi)
    4bd4:	aa                   	stos   %al,%es:(%rdi)
    4bd5:	aa                   	stos   %al,%es:(%rdi)
    4bd6:	aa                   	stos   %al,%es:(%rdi)
    4bd7:	aa                   	stos   %al,%es:(%rdi)
    4bd8:	aa                   	stos   %al,%es:(%rdi)
    4bd9:	aa                   	stos   %al,%es:(%rdi)
    4bda:	aa                   	stos   %al,%es:(%rdi)
    4bdb:	aa                   	stos   %al,%es:(%rdi)
    4bdc:	aa                   	stos   %al,%es:(%rdi)
    4bdd:	aa                   	stos   %al,%es:(%rdi)
    4bde:	aa                   	stos   %al,%es:(%rdi)
    4bdf:	aa                   	stos   %al,%es:(%rdi)
    4be0:	aa                   	stos   %al,%es:(%rdi)
    4be1:	aa                   	stos   %al,%es:(%rdi)
    4be2:	aa                   	stos   %al,%es:(%rdi)
    4be3:	aa                   	stos   %al,%es:(%rdi)
    4be4:	aa                   	stos   %al,%es:(%rdi)
    4be5:	aa                   	stos   %al,%es:(%rdi)
    4be6:	aa                   	stos   %al,%es:(%rdi)
    4be7:	aa                   	stos   %al,%es:(%rdi)
    4be8:	aa                   	stos   %al,%es:(%rdi)
    4be9:	aa                   	stos   %al,%es:(%rdi)
    4bea:	aa                   	stos   %al,%es:(%rdi)
    4beb:	aa                   	stos   %al,%es:(%rdi)
    4bec:	aa                   	stos   %al,%es:(%rdi)
    4bed:	aa                   	stos   %al,%es:(%rdi)
    4bee:	aa                   	stos   %al,%es:(%rdi)
    4bef:	aa                   	stos   %al,%es:(%rdi)
    4bf0:	aa                   	stos   %al,%es:(%rdi)
    4bf1:	aa                   	stos   %al,%es:(%rdi)
    4bf2:	aa                   	stos   %al,%es:(%rdi)
    4bf3:	aa                   	stos   %al,%es:(%rdi)
    4bf4:	aa                   	stos   %al,%es:(%rdi)
    4bf5:	aa                   	stos   %al,%es:(%rdi)
    4bf6:	aa                   	stos   %al,%es:(%rdi)
    4bf7:	aa                   	stos   %al,%es:(%rdi)
    4bf8:	aa                   	stos   %al,%es:(%rdi)
    4bf9:	aa                   	stos   %al,%es:(%rdi)
    4bfa:	aa                   	stos   %al,%es:(%rdi)
    4bfb:	aa                   	stos   %al,%es:(%rdi)
    4bfc:	aa                   	stos   %al,%es:(%rdi)
    4bfd:	aa                   	stos   %al,%es:(%rdi)
    4bfe:	aa                   	stos   %al,%es:(%rdi)
    4bff:	aa                   	stos   %al,%es:(%rdi)
    4c00:	aa                   	stos   %al,%es:(%rdi)
    4c01:	aa                   	stos   %al,%es:(%rdi)
    4c02:	aa                   	stos   %al,%es:(%rdi)
    4c03:	aa                   	stos   %al,%es:(%rdi)
    4c04:	aa                   	stos   %al,%es:(%rdi)
    4c05:	aa                   	stos   %al,%es:(%rdi)
    4c06:	aa                   	stos   %al,%es:(%rdi)
    4c07:	aa                   	stos   %al,%es:(%rdi)
    4c08:	aa                   	stos   %al,%es:(%rdi)
    4c09:	aa                   	stos   %al,%es:(%rdi)
    4c0a:	aa                   	stos   %al,%es:(%rdi)
    4c0b:	aa                   	stos   %al,%es:(%rdi)
    4c0c:	aa                   	stos   %al,%es:(%rdi)
    4c0d:	aa                   	stos   %al,%es:(%rdi)
    4c0e:	aa                   	stos   %al,%es:(%rdi)
    4c0f:	aa                   	stos   %al,%es:(%rdi)
    4c10:	aa                   	stos   %al,%es:(%rdi)
    4c11:	aa                   	stos   %al,%es:(%rdi)
    4c12:	aa                   	stos   %al,%es:(%rdi)
    4c13:	aa                   	stos   %al,%es:(%rdi)
    4c14:	aa                   	stos   %al,%es:(%rdi)
    4c15:	aa                   	stos   %al,%es:(%rdi)
    4c16:	aa                   	stos   %al,%es:(%rdi)
    4c17:	aa                   	stos   %al,%es:(%rdi)
    4c18:	aa                   	stos   %al,%es:(%rdi)
    4c19:	aa                   	stos   %al,%es:(%rdi)
    4c1a:	aa                   	stos   %al,%es:(%rdi)
    4c1b:	aa                   	stos   %al,%es:(%rdi)
    4c1c:	aa                   	stos   %al,%es:(%rdi)
    4c1d:	aa                   	stos   %al,%es:(%rdi)
    4c1e:	aa                   	stos   %al,%es:(%rdi)
    4c1f:	aa                   	stos   %al,%es:(%rdi)
    4c20:	aa                   	stos   %al,%es:(%rdi)
    4c21:	aa                   	stos   %al,%es:(%rdi)
    4c22:	aa                   	stos   %al,%es:(%rdi)
    4c23:	aa                   	stos   %al,%es:(%rdi)
    4c24:	aa                   	stos   %al,%es:(%rdi)
    4c25:	aa                   	stos   %al,%es:(%rdi)
    4c26:	aa                   	stos   %al,%es:(%rdi)
    4c27:	aa                   	stos   %al,%es:(%rdi)
    4c28:	aa                   	stos   %al,%es:(%rdi)
    4c29:	aa                   	stos   %al,%es:(%rdi)
    4c2a:	aa                   	stos   %al,%es:(%rdi)
    4c2b:	aa                   	stos   %al,%es:(%rdi)
    4c2c:	aa                   	stos   %al,%es:(%rdi)
    4c2d:	aa                   	stos   %al,%es:(%rdi)
    4c2e:	aa                   	stos   %al,%es:(%rdi)
    4c2f:	aa                   	stos   %al,%es:(%rdi)
    4c30:	aa                   	stos   %al,%es:(%rdi)
    4c31:	aa                   	stos   %al,%es:(%rdi)
    4c32:	aa                   	stos   %al,%es:(%rdi)
    4c33:	aa                   	stos   %al,%es:(%rdi)
    4c34:	aa                   	stos   %al,%es:(%rdi)
    4c35:	aa                   	stos   %al,%es:(%rdi)
    4c36:	aa                   	stos   %al,%es:(%rdi)
    4c37:	aa                   	stos   %al,%es:(%rdi)
    4c38:	aa                   	stos   %al,%es:(%rdi)
    4c39:	aa                   	stos   %al,%es:(%rdi)
    4c3a:	aa                   	stos   %al,%es:(%rdi)
    4c3b:	aa                   	stos   %al,%es:(%rdi)
    4c3c:	aa                   	stos   %al,%es:(%rdi)
    4c3d:	aa                   	stos   %al,%es:(%rdi)
    4c3e:	aa                   	stos   %al,%es:(%rdi)
    4c3f:	aa                   	stos   %al,%es:(%rdi)
    4c40:	aa                   	stos   %al,%es:(%rdi)
    4c41:	aa                   	stos   %al,%es:(%rdi)
    4c42:	aa                   	stos   %al,%es:(%rdi)
    4c43:	aa                   	stos   %al,%es:(%rdi)
    4c44:	aa                   	stos   %al,%es:(%rdi)
    4c45:	aa                   	stos   %al,%es:(%rdi)
    4c46:	aa                   	stos   %al,%es:(%rdi)
    4c47:	aa                   	stos   %al,%es:(%rdi)
    4c48:	aa                   	stos   %al,%es:(%rdi)
    4c49:	aa                   	stos   %al,%es:(%rdi)
    4c4a:	aa                   	stos   %al,%es:(%rdi)
    4c4b:	aa                   	stos   %al,%es:(%rdi)
    4c4c:	aa                   	stos   %al,%es:(%rdi)
    4c4d:	aa                   	stos   %al,%es:(%rdi)
    4c4e:	aa                   	stos   %al,%es:(%rdi)
    4c4f:	aa                   	stos   %al,%es:(%rdi)
    4c50:	aa                   	stos   %al,%es:(%rdi)
    4c51:	aa                   	stos   %al,%es:(%rdi)
    4c52:	aa                   	stos   %al,%es:(%rdi)
    4c53:	aa                   	stos   %al,%es:(%rdi)
    4c54:	aa                   	stos   %al,%es:(%rdi)
    4c55:	aa                   	stos   %al,%es:(%rdi)
    4c56:	aa                   	stos   %al,%es:(%rdi)
    4c57:	aa                   	stos   %al,%es:(%rdi)
    4c58:	aa                   	stos   %al,%es:(%rdi)
    4c59:	aa                   	stos   %al,%es:(%rdi)
    4c5a:	aa                   	stos   %al,%es:(%rdi)
    4c5b:	aa                   	stos   %al,%es:(%rdi)
    4c5c:	aa                   	stos   %al,%es:(%rdi)
    4c5d:	aa                   	stos   %al,%es:(%rdi)
    4c5e:	aa                   	stos   %al,%es:(%rdi)
    4c5f:	aa                   	stos   %al,%es:(%rdi)
    4c60:	aa                   	stos   %al,%es:(%rdi)
    4c61:	aa                   	stos   %al,%es:(%rdi)
    4c62:	aa                   	stos   %al,%es:(%rdi)
    4c63:	aa                   	stos   %al,%es:(%rdi)
    4c64:	aa                   	stos   %al,%es:(%rdi)
    4c65:	aa                   	stos   %al,%es:(%rdi)
    4c66:	aa                   	stos   %al,%es:(%rdi)
    4c67:	aa                   	stos   %al,%es:(%rdi)
    4c68:	aa                   	stos   %al,%es:(%rdi)
    4c69:	aa                   	stos   %al,%es:(%rdi)
    4c6a:	aa                   	stos   %al,%es:(%rdi)
    4c6b:	aa                   	stos   %al,%es:(%rdi)
    4c6c:	aa                   	stos   %al,%es:(%rdi)
    4c6d:	aa                   	stos   %al,%es:(%rdi)
    4c6e:	aa                   	stos   %al,%es:(%rdi)
    4c6f:	aa                   	stos   %al,%es:(%rdi)
    4c70:	aa                   	stos   %al,%es:(%rdi)
    4c71:	aa                   	stos   %al,%es:(%rdi)
    4c72:	aa                   	stos   %al,%es:(%rdi)
    4c73:	aa                   	stos   %al,%es:(%rdi)
    4c74:	aa                   	stos   %al,%es:(%rdi)
    4c75:	aa                   	stos   %al,%es:(%rdi)
    4c76:	aa                   	stos   %al,%es:(%rdi)
    4c77:	aa                   	stos   %al,%es:(%rdi)
    4c78:	aa                   	stos   %al,%es:(%rdi)
    4c79:	aa                   	stos   %al,%es:(%rdi)
    4c7a:	aa                   	stos   %al,%es:(%rdi)
    4c7b:	aa                   	stos   %al,%es:(%rdi)
    4c7c:	aa                   	stos   %al,%es:(%rdi)
    4c7d:	aa                   	stos   %al,%es:(%rdi)
    4c7e:	aa                   	stos   %al,%es:(%rdi)
    4c7f:	aa                   	stos   %al,%es:(%rdi)
    4c80:	aa                   	stos   %al,%es:(%rdi)
    4c81:	aa                   	stos   %al,%es:(%rdi)
    4c82:	aa                   	stos   %al,%es:(%rdi)
    4c83:	aa                   	stos   %al,%es:(%rdi)
    4c84:	aa                   	stos   %al,%es:(%rdi)
    4c85:	aa                   	stos   %al,%es:(%rdi)
    4c86:	aa                   	stos   %al,%es:(%rdi)
    4c87:	aa                   	stos   %al,%es:(%rdi)
    4c88:	aa                   	stos   %al,%es:(%rdi)
    4c89:	aa                   	stos   %al,%es:(%rdi)
    4c8a:	aa                   	stos   %al,%es:(%rdi)
    4c8b:	aa                   	stos   %al,%es:(%rdi)
    4c8c:	aa                   	stos   %al,%es:(%rdi)
    4c8d:	aa                   	stos   %al,%es:(%rdi)
    4c8e:	aa                   	stos   %al,%es:(%rdi)
    4c8f:	aa                   	stos   %al,%es:(%rdi)
    4c90:	aa                   	stos   %al,%es:(%rdi)
    4c91:	aa                   	stos   %al,%es:(%rdi)
    4c92:	aa                   	stos   %al,%es:(%rdi)
    4c93:	aa                   	stos   %al,%es:(%rdi)
    4c94:	aa                   	stos   %al,%es:(%rdi)
    4c95:	aa                   	stos   %al,%es:(%rdi)
    4c96:	aa                   	stos   %al,%es:(%rdi)
    4c97:	aa                   	stos   %al,%es:(%rdi)
    4c98:	aa                   	stos   %al,%es:(%rdi)
    4c99:	aa                   	stos   %al,%es:(%rdi)
    4c9a:	aa                   	stos   %al,%es:(%rdi)
    4c9b:	aa                   	stos   %al,%es:(%rdi)
    4c9c:	aa                   	stos   %al,%es:(%rdi)
    4c9d:	aa                   	stos   %al,%es:(%rdi)
    4c9e:	aa                   	stos   %al,%es:(%rdi)
    4c9f:	aa                   	stos   %al,%es:(%rdi)
    4ca0:	aa                   	stos   %al,%es:(%rdi)
    4ca1:	aa                   	stos   %al,%es:(%rdi)
    4ca2:	aa                   	stos   %al,%es:(%rdi)
    4ca3:	aa                   	stos   %al,%es:(%rdi)
    4ca4:	aa                   	stos   %al,%es:(%rdi)
    4ca5:	aa                   	stos   %al,%es:(%rdi)
    4ca6:	aa                   	stos   %al,%es:(%rdi)
    4ca7:	aa                   	stos   %al,%es:(%rdi)
    4ca8:	aa                   	stos   %al,%es:(%rdi)
    4ca9:	aa                   	stos   %al,%es:(%rdi)
    4caa:	aa                   	stos   %al,%es:(%rdi)
    4cab:	aa                   	stos   %al,%es:(%rdi)
    4cac:	aa                   	stos   %al,%es:(%rdi)
    4cad:	aa                   	stos   %al,%es:(%rdi)
    4cae:	aa                   	stos   %al,%es:(%rdi)
    4caf:	aa                   	stos   %al,%es:(%rdi)
    4cb0:	aa                   	stos   %al,%es:(%rdi)
    4cb1:	aa                   	stos   %al,%es:(%rdi)
    4cb2:	aa                   	stos   %al,%es:(%rdi)
    4cb3:	aa                   	stos   %al,%es:(%rdi)
    4cb4:	aa                   	stos   %al,%es:(%rdi)
    4cb5:	aa                   	stos   %al,%es:(%rdi)
    4cb6:	aa                   	stos   %al,%es:(%rdi)
    4cb7:	aa                   	stos   %al,%es:(%rdi)
    4cb8:	aa                   	stos   %al,%es:(%rdi)
    4cb9:	aa                   	stos   %al,%es:(%rdi)
    4cba:	aa                   	stos   %al,%es:(%rdi)
    4cbb:	aa                   	stos   %al,%es:(%rdi)
    4cbc:	aa                   	stos   %al,%es:(%rdi)
    4cbd:	aa                   	stos   %al,%es:(%rdi)
    4cbe:	aa                   	stos   %al,%es:(%rdi)
    4cbf:	aa                   	stos   %al,%es:(%rdi)
    4cc0:	aa                   	stos   %al,%es:(%rdi)
    4cc1:	aa                   	stos   %al,%es:(%rdi)
    4cc2:	aa                   	stos   %al,%es:(%rdi)
    4cc3:	aa                   	stos   %al,%es:(%rdi)
    4cc4:	aa                   	stos   %al,%es:(%rdi)
    4cc5:	aa                   	stos   %al,%es:(%rdi)
    4cc6:	aa                   	stos   %al,%es:(%rdi)
    4cc7:	aa                   	stos   %al,%es:(%rdi)
    4cc8:	aa                   	stos   %al,%es:(%rdi)
    4cc9:	aa                   	stos   %al,%es:(%rdi)
    4cca:	aa                   	stos   %al,%es:(%rdi)
    4ccb:	aa                   	stos   %al,%es:(%rdi)
    4ccc:	aa                   	stos   %al,%es:(%rdi)
    4ccd:	aa                   	stos   %al,%es:(%rdi)
    4cce:	aa                   	stos   %al,%es:(%rdi)
    4ccf:	aa                   	stos   %al,%es:(%rdi)
    4cd0:	aa                   	stos   %al,%es:(%rdi)
    4cd1:	aa                   	stos   %al,%es:(%rdi)
    4cd2:	aa                   	stos   %al,%es:(%rdi)
    4cd3:	aa                   	stos   %al,%es:(%rdi)
    4cd4:	aa                   	stos   %al,%es:(%rdi)
    4cd5:	aa                   	stos   %al,%es:(%rdi)
    4cd6:	aa                   	stos   %al,%es:(%rdi)
    4cd7:	aa                   	stos   %al,%es:(%rdi)
    4cd8:	aa                   	stos   %al,%es:(%rdi)
    4cd9:	aa                   	stos   %al,%es:(%rdi)
    4cda:	aa                   	stos   %al,%es:(%rdi)
    4cdb:	aa                   	stos   %al,%es:(%rdi)
    4cdc:	aa                   	stos   %al,%es:(%rdi)
    4cdd:	aa                   	stos   %al,%es:(%rdi)
    4cde:	aa                   	stos   %al,%es:(%rdi)
    4cdf:	aa                   	stos   %al,%es:(%rdi)
    4ce0:	aa                   	stos   %al,%es:(%rdi)
    4ce1:	aa                   	stos   %al,%es:(%rdi)
    4ce2:	aa                   	stos   %al,%es:(%rdi)
    4ce3:	aa                   	stos   %al,%es:(%rdi)
    4ce4:	aa                   	stos   %al,%es:(%rdi)
    4ce5:	aa                   	stos   %al,%es:(%rdi)
    4ce6:	aa                   	stos   %al,%es:(%rdi)
    4ce7:	aa                   	stos   %al,%es:(%rdi)
    4ce8:	aa                   	stos   %al,%es:(%rdi)
    4ce9:	aa                   	stos   %al,%es:(%rdi)
    4cea:	aa                   	stos   %al,%es:(%rdi)
    4ceb:	aa                   	stos   %al,%es:(%rdi)
    4cec:	aa                   	stos   %al,%es:(%rdi)
    4ced:	aa                   	stos   %al,%es:(%rdi)
    4cee:	aa                   	stos   %al,%es:(%rdi)
    4cef:	aa                   	stos   %al,%es:(%rdi)
    4cf0:	aa                   	stos   %al,%es:(%rdi)
    4cf1:	aa                   	stos   %al,%es:(%rdi)
    4cf2:	aa                   	stos   %al,%es:(%rdi)
    4cf3:	aa                   	stos   %al,%es:(%rdi)
    4cf4:	aa                   	stos   %al,%es:(%rdi)
    4cf5:	aa                   	stos   %al,%es:(%rdi)
    4cf6:	aa                   	stos   %al,%es:(%rdi)
    4cf7:	aa                   	stos   %al,%es:(%rdi)
    4cf8:	aa                   	stos   %al,%es:(%rdi)
    4cf9:	aa                   	stos   %al,%es:(%rdi)
    4cfa:	aa                   	stos   %al,%es:(%rdi)
    4cfb:	aa                   	stos   %al,%es:(%rdi)
    4cfc:	aa                   	stos   %al,%es:(%rdi)
    4cfd:	aa                   	stos   %al,%es:(%rdi)
    4cfe:	aa                   	stos   %al,%es:(%rdi)
    4cff:	aa                   	stos   %al,%es:(%rdi)
    4d00:	aa                   	stos   %al,%es:(%rdi)
    4d01:	aa                   	stos   %al,%es:(%rdi)
    4d02:	aa                   	stos   %al,%es:(%rdi)
    4d03:	aa                   	stos   %al,%es:(%rdi)
    4d04:	aa                   	stos   %al,%es:(%rdi)
    4d05:	aa                   	stos   %al,%es:(%rdi)
    4d06:	aa                   	stos   %al,%es:(%rdi)
    4d07:	aa                   	stos   %al,%es:(%rdi)
    4d08:	aa                   	stos   %al,%es:(%rdi)
    4d09:	aa                   	stos   %al,%es:(%rdi)
    4d0a:	aa                   	stos   %al,%es:(%rdi)
    4d0b:	aa                   	stos   %al,%es:(%rdi)
    4d0c:	aa                   	stos   %al,%es:(%rdi)
    4d0d:	aa                   	stos   %al,%es:(%rdi)
    4d0e:	aa                   	stos   %al,%es:(%rdi)
    4d0f:	aa                   	stos   %al,%es:(%rdi)
    4d10:	aa                   	stos   %al,%es:(%rdi)
    4d11:	aa                   	stos   %al,%es:(%rdi)
    4d12:	aa                   	stos   %al,%es:(%rdi)
    4d13:	aa                   	stos   %al,%es:(%rdi)
    4d14:	aa                   	stos   %al,%es:(%rdi)
    4d15:	aa                   	stos   %al,%es:(%rdi)
    4d16:	aa                   	stos   %al,%es:(%rdi)
    4d17:	aa                   	stos   %al,%es:(%rdi)
    4d18:	aa                   	stos   %al,%es:(%rdi)
    4d19:	aa                   	stos   %al,%es:(%rdi)
    4d1a:	aa                   	stos   %al,%es:(%rdi)
    4d1b:	aa                   	stos   %al,%es:(%rdi)
    4d1c:	aa                   	stos   %al,%es:(%rdi)
    4d1d:	aa                   	stos   %al,%es:(%rdi)
    4d1e:	aa                   	stos   %al,%es:(%rdi)
    4d1f:	aa                   	stos   %al,%es:(%rdi)
    4d20:	aa                   	stos   %al,%es:(%rdi)
    4d21:	aa                   	stos   %al,%es:(%rdi)
    4d22:	aa                   	stos   %al,%es:(%rdi)
    4d23:	aa                   	stos   %al,%es:(%rdi)
    4d24:	aa                   	stos   %al,%es:(%rdi)
    4d25:	aa                   	stos   %al,%es:(%rdi)
    4d26:	aa                   	stos   %al,%es:(%rdi)
    4d27:	aa                   	stos   %al,%es:(%rdi)
    4d28:	aa                   	stos   %al,%es:(%rdi)
    4d29:	aa                   	stos   %al,%es:(%rdi)
    4d2a:	aa                   	stos   %al,%es:(%rdi)
    4d2b:	aa                   	stos   %al,%es:(%rdi)
    4d2c:	aa                   	stos   %al,%es:(%rdi)
    4d2d:	aa                   	stos   %al,%es:(%rdi)
    4d2e:	aa                   	stos   %al,%es:(%rdi)
    4d2f:	aa                   	stos   %al,%es:(%rdi)
    4d30:	aa                   	stos   %al,%es:(%rdi)
    4d31:	aa                   	stos   %al,%es:(%rdi)
    4d32:	aa                   	stos   %al,%es:(%rdi)
    4d33:	aa                   	stos   %al,%es:(%rdi)
    4d34:	aa                   	stos   %al,%es:(%rdi)
    4d35:	aa                   	stos   %al,%es:(%rdi)
    4d36:	aa                   	stos   %al,%es:(%rdi)
    4d37:	aa                   	stos   %al,%es:(%rdi)
    4d38:	aa                   	stos   %al,%es:(%rdi)
    4d39:	aa                   	stos   %al,%es:(%rdi)
    4d3a:	aa                   	stos   %al,%es:(%rdi)
    4d3b:	aa                   	stos   %al,%es:(%rdi)
    4d3c:	aa                   	stos   %al,%es:(%rdi)
    4d3d:	aa                   	stos   %al,%es:(%rdi)
    4d3e:	aa                   	stos   %al,%es:(%rdi)
    4d3f:	aa                   	stos   %al,%es:(%rdi)
    4d40:	aa                   	stos   %al,%es:(%rdi)
    4d41:	aa                   	stos   %al,%es:(%rdi)
    4d42:	aa                   	stos   %al,%es:(%rdi)
    4d43:	aa                   	stos   %al,%es:(%rdi)
    4d44:	aa                   	stos   %al,%es:(%rdi)
    4d45:	aa                   	stos   %al,%es:(%rdi)
    4d46:	aa                   	stos   %al,%es:(%rdi)
    4d47:	aa                   	stos   %al,%es:(%rdi)
    4d48:	aa                   	stos   %al,%es:(%rdi)
    4d49:	aa                   	stos   %al,%es:(%rdi)
    4d4a:	aa                   	stos   %al,%es:(%rdi)
    4d4b:	aa                   	stos   %al,%es:(%rdi)
    4d4c:	aa                   	stos   %al,%es:(%rdi)
    4d4d:	aa                   	stos   %al,%es:(%rdi)
    4d4e:	aa                   	stos   %al,%es:(%rdi)
    4d4f:	aa                   	stos   %al,%es:(%rdi)
    4d50:	aa                   	stos   %al,%es:(%rdi)
    4d51:	aa                   	stos   %al,%es:(%rdi)
    4d52:	aa                   	stos   %al,%es:(%rdi)
    4d53:	aa                   	stos   %al,%es:(%rdi)
    4d54:	aa                   	stos   %al,%es:(%rdi)
    4d55:	aa                   	stos   %al,%es:(%rdi)
    4d56:	aa                   	stos   %al,%es:(%rdi)
    4d57:	aa                   	stos   %al,%es:(%rdi)
    4d58:	aa                   	stos   %al,%es:(%rdi)
    4d59:	aa                   	stos   %al,%es:(%rdi)
    4d5a:	aa                   	stos   %al,%es:(%rdi)
    4d5b:	aa                   	stos   %al,%es:(%rdi)
    4d5c:	aa                   	stos   %al,%es:(%rdi)
    4d5d:	aa                   	stos   %al,%es:(%rdi)
    4d5e:	aa                   	stos   %al,%es:(%rdi)
    4d5f:	aa                   	stos   %al,%es:(%rdi)
    4d60:	aa                   	stos   %al,%es:(%rdi)
    4d61:	aa                   	stos   %al,%es:(%rdi)
    4d62:	aa                   	stos   %al,%es:(%rdi)
    4d63:	aa                   	stos   %al,%es:(%rdi)
    4d64:	aa                   	stos   %al,%es:(%rdi)
    4d65:	aa                   	stos   %al,%es:(%rdi)
    4d66:	aa                   	stos   %al,%es:(%rdi)
    4d67:	aa                   	stos   %al,%es:(%rdi)
    4d68:	aa                   	stos   %al,%es:(%rdi)
    4d69:	aa                   	stos   %al,%es:(%rdi)
    4d6a:	aa                   	stos   %al,%es:(%rdi)
    4d6b:	aa                   	stos   %al,%es:(%rdi)
    4d6c:	aa                   	stos   %al,%es:(%rdi)
    4d6d:	aa                   	stos   %al,%es:(%rdi)
    4d6e:	aa                   	stos   %al,%es:(%rdi)
    4d6f:	aa                   	stos   %al,%es:(%rdi)
    4d70:	aa                   	stos   %al,%es:(%rdi)
    4d71:	aa                   	stos   %al,%es:(%rdi)
    4d72:	aa                   	stos   %al,%es:(%rdi)
    4d73:	aa                   	stos   %al,%es:(%rdi)
    4d74:	aa                   	stos   %al,%es:(%rdi)
    4d75:	aa                   	stos   %al,%es:(%rdi)
    4d76:	aa                   	stos   %al,%es:(%rdi)
    4d77:	aa                   	stos   %al,%es:(%rdi)
    4d78:	aa                   	stos   %al,%es:(%rdi)
    4d79:	aa                   	stos   %al,%es:(%rdi)
    4d7a:	aa                   	stos   %al,%es:(%rdi)
    4d7b:	aa                   	stos   %al,%es:(%rdi)
    4d7c:	aa                   	stos   %al,%es:(%rdi)
    4d7d:	aa                   	stos   %al,%es:(%rdi)
    4d7e:	aa                   	stos   %al,%es:(%rdi)
    4d7f:	aa                   	stos   %al,%es:(%rdi)
    4d80:	aa                   	stos   %al,%es:(%rdi)
    4d81:	aa                   	stos   %al,%es:(%rdi)
    4d82:	aa                   	stos   %al,%es:(%rdi)
    4d83:	aa                   	stos   %al,%es:(%rdi)
    4d84:	aa                   	stos   %al,%es:(%rdi)
    4d85:	aa                   	stos   %al,%es:(%rdi)
    4d86:	aa                   	stos   %al,%es:(%rdi)
    4d87:	aa                   	stos   %al,%es:(%rdi)
    4d88:	aa                   	stos   %al,%es:(%rdi)
    4d89:	aa                   	stos   %al,%es:(%rdi)
    4d8a:	aa                   	stos   %al,%es:(%rdi)
    4d8b:	aa                   	stos   %al,%es:(%rdi)
    4d8c:	aa                   	stos   %al,%es:(%rdi)
    4d8d:	aa                   	stos   %al,%es:(%rdi)
    4d8e:	aa                   	stos   %al,%es:(%rdi)
    4d8f:	aa                   	stos   %al,%es:(%rdi)
    4d90:	aa                   	stos   %al,%es:(%rdi)
    4d91:	aa                   	stos   %al,%es:(%rdi)
    4d92:	aa                   	stos   %al,%es:(%rdi)
    4d93:	aa                   	stos   %al,%es:(%rdi)
    4d94:	aa                   	stos   %al,%es:(%rdi)
    4d95:	aa                   	stos   %al,%es:(%rdi)
    4d96:	aa                   	stos   %al,%es:(%rdi)
    4d97:	aa                   	stos   %al,%es:(%rdi)
    4d98:	aa                   	stos   %al,%es:(%rdi)
    4d99:	aa                   	stos   %al,%es:(%rdi)
    4d9a:	aa                   	stos   %al,%es:(%rdi)
    4d9b:	aa                   	stos   %al,%es:(%rdi)
    4d9c:	aa                   	stos   %al,%es:(%rdi)
    4d9d:	aa                   	stos   %al,%es:(%rdi)
    4d9e:	aa                   	stos   %al,%es:(%rdi)
    4d9f:	aa                   	stos   %al,%es:(%rdi)
    4da0:	aa                   	stos   %al,%es:(%rdi)
    4da1:	aa                   	stos   %al,%es:(%rdi)
    4da2:	aa                   	stos   %al,%es:(%rdi)
    4da3:	aa                   	stos   %al,%es:(%rdi)
    4da4:	aa                   	stos   %al,%es:(%rdi)
    4da5:	aa                   	stos   %al,%es:(%rdi)
    4da6:	aa                   	stos   %al,%es:(%rdi)
    4da7:	aa                   	stos   %al,%es:(%rdi)
    4da8:	aa                   	stos   %al,%es:(%rdi)
    4da9:	aa                   	stos   %al,%es:(%rdi)
    4daa:	aa                   	stos   %al,%es:(%rdi)
    4dab:	aa                   	stos   %al,%es:(%rdi)
    4dac:	aa                   	stos   %al,%es:(%rdi)
    4dad:	aa                   	stos   %al,%es:(%rdi)
    4dae:	aa                   	stos   %al,%es:(%rdi)
    4daf:	aa                   	stos   %al,%es:(%rdi)
    4db0:	aa                   	stos   %al,%es:(%rdi)
    4db1:	aa                   	stos   %al,%es:(%rdi)
    4db2:	aa                   	stos   %al,%es:(%rdi)
    4db3:	aa                   	stos   %al,%es:(%rdi)
    4db4:	aa                   	stos   %al,%es:(%rdi)
    4db5:	aa                   	stos   %al,%es:(%rdi)
    4db6:	aa                   	stos   %al,%es:(%rdi)
    4db7:	aa                   	stos   %al,%es:(%rdi)
    4db8:	aa                   	stos   %al,%es:(%rdi)
    4db9:	aa                   	stos   %al,%es:(%rdi)
    4dba:	aa                   	stos   %al,%es:(%rdi)
    4dbb:	aa                   	stos   %al,%es:(%rdi)
    4dbc:	aa                   	stos   %al,%es:(%rdi)
    4dbd:	aa                   	stos   %al,%es:(%rdi)
    4dbe:	aa                   	stos   %al,%es:(%rdi)
    4dbf:	aa                   	stos   %al,%es:(%rdi)
    4dc0:	aa                   	stos   %al,%es:(%rdi)
    4dc1:	aa                   	stos   %al,%es:(%rdi)
    4dc2:	aa                   	stos   %al,%es:(%rdi)
    4dc3:	aa                   	stos   %al,%es:(%rdi)
    4dc4:	aa                   	stos   %al,%es:(%rdi)
    4dc5:	aa                   	stos   %al,%es:(%rdi)
    4dc6:	aa                   	stos   %al,%es:(%rdi)
    4dc7:	aa                   	stos   %al,%es:(%rdi)
    4dc8:	aa                   	stos   %al,%es:(%rdi)
    4dc9:	aa                   	stos   %al,%es:(%rdi)
    4dca:	aa                   	stos   %al,%es:(%rdi)
    4dcb:	aa                   	stos   %al,%es:(%rdi)
    4dcc:	aa                   	stos   %al,%es:(%rdi)
    4dcd:	aa                   	stos   %al,%es:(%rdi)
    4dce:	aa                   	stos   %al,%es:(%rdi)
    4dcf:	aa                   	stos   %al,%es:(%rdi)
    4dd0:	aa                   	stos   %al,%es:(%rdi)
    4dd1:	aa                   	stos   %al,%es:(%rdi)
    4dd2:	aa                   	stos   %al,%es:(%rdi)
    4dd3:	aa                   	stos   %al,%es:(%rdi)
    4dd4:	aa                   	stos   %al,%es:(%rdi)
    4dd5:	aa                   	stos   %al,%es:(%rdi)
    4dd6:	aa                   	stos   %al,%es:(%rdi)
    4dd7:	aa                   	stos   %al,%es:(%rdi)
    4dd8:	aa                   	stos   %al,%es:(%rdi)
    4dd9:	aa                   	stos   %al,%es:(%rdi)
    4dda:	aa                   	stos   %al,%es:(%rdi)
    4ddb:	aa                   	stos   %al,%es:(%rdi)
    4ddc:	aa                   	stos   %al,%es:(%rdi)
    4ddd:	aa                   	stos   %al,%es:(%rdi)
    4dde:	aa                   	stos   %al,%es:(%rdi)
    4ddf:	aa                   	stos   %al,%es:(%rdi)
    4de0:	aa                   	stos   %al,%es:(%rdi)
    4de1:	aa                   	stos   %al,%es:(%rdi)
    4de2:	aa                   	stos   %al,%es:(%rdi)
    4de3:	aa                   	stos   %al,%es:(%rdi)
    4de4:	aa                   	stos   %al,%es:(%rdi)
    4de5:	aa                   	stos   %al,%es:(%rdi)
    4de6:	aa                   	stos   %al,%es:(%rdi)
    4de7:	aa                   	stos   %al,%es:(%rdi)
    4de8:	aa                   	stos   %al,%es:(%rdi)
    4de9:	aa                   	stos   %al,%es:(%rdi)
    4dea:	aa                   	stos   %al,%es:(%rdi)
    4deb:	aa                   	stos   %al,%es:(%rdi)
    4dec:	aa                   	stos   %al,%es:(%rdi)
    4ded:	aa                   	stos   %al,%es:(%rdi)
    4dee:	aa                   	stos   %al,%es:(%rdi)
    4def:	aa                   	stos   %al,%es:(%rdi)
    4df0:	aa                   	stos   %al,%es:(%rdi)
    4df1:	aa                   	stos   %al,%es:(%rdi)
    4df2:	aa                   	stos   %al,%es:(%rdi)
    4df3:	aa                   	stos   %al,%es:(%rdi)
    4df4:	aa                   	stos   %al,%es:(%rdi)
    4df5:	aa                   	stos   %al,%es:(%rdi)
    4df6:	aa                   	stos   %al,%es:(%rdi)
    4df7:	aa                   	stos   %al,%es:(%rdi)
    4df8:	aa                   	stos   %al,%es:(%rdi)
    4df9:	aa                   	stos   %al,%es:(%rdi)
    4dfa:	aa                   	stos   %al,%es:(%rdi)
    4dfb:	aa                   	stos   %al,%es:(%rdi)
    4dfc:	aa                   	stos   %al,%es:(%rdi)
    4dfd:	aa                   	stos   %al,%es:(%rdi)
    4dfe:	aa                   	stos   %al,%es:(%rdi)
    4dff:	aa                   	stos   %al,%es:(%rdi)
    4e00:	aa                   	stos   %al,%es:(%rdi)
    4e01:	aa                   	stos   %al,%es:(%rdi)
    4e02:	aa                   	stos   %al,%es:(%rdi)
    4e03:	aa                   	stos   %al,%es:(%rdi)
    4e04:	aa                   	stos   %al,%es:(%rdi)
    4e05:	aa                   	stos   %al,%es:(%rdi)
    4e06:	aa                   	stos   %al,%es:(%rdi)
    4e07:	aa                   	stos   %al,%es:(%rdi)
    4e08:	aa                   	stos   %al,%es:(%rdi)
    4e09:	aa                   	stos   %al,%es:(%rdi)
    4e0a:	aa                   	stos   %al,%es:(%rdi)
    4e0b:	aa                   	stos   %al,%es:(%rdi)
    4e0c:	aa                   	stos   %al,%es:(%rdi)
    4e0d:	aa                   	stos   %al,%es:(%rdi)
    4e0e:	aa                   	stos   %al,%es:(%rdi)
    4e0f:	aa                   	stos   %al,%es:(%rdi)
    4e10:	aa                   	stos   %al,%es:(%rdi)
    4e11:	aa                   	stos   %al,%es:(%rdi)
    4e12:	aa                   	stos   %al,%es:(%rdi)
    4e13:	aa                   	stos   %al,%es:(%rdi)
    4e14:	aa                   	stos   %al,%es:(%rdi)
    4e15:	aa                   	stos   %al,%es:(%rdi)
    4e16:	aa                   	stos   %al,%es:(%rdi)
    4e17:	aa                   	stos   %al,%es:(%rdi)
    4e18:	aa                   	stos   %al,%es:(%rdi)
    4e19:	aa                   	stos   %al,%es:(%rdi)
    4e1a:	aa                   	stos   %al,%es:(%rdi)
    4e1b:	aa                   	stos   %al,%es:(%rdi)
    4e1c:	aa                   	stos   %al,%es:(%rdi)
    4e1d:	aa                   	stos   %al,%es:(%rdi)
    4e1e:	aa                   	stos   %al,%es:(%rdi)
    4e1f:	aa                   	stos   %al,%es:(%rdi)
    4e20:	aa                   	stos   %al,%es:(%rdi)
    4e21:	aa                   	stos   %al,%es:(%rdi)
    4e22:	aa                   	stos   %al,%es:(%rdi)
    4e23:	aa                   	stos   %al,%es:(%rdi)
    4e24:	aa                   	stos   %al,%es:(%rdi)
    4e25:	aa                   	stos   %al,%es:(%rdi)
    4e26:	aa                   	stos   %al,%es:(%rdi)
    4e27:	aa                   	stos   %al,%es:(%rdi)
    4e28:	aa                   	stos   %al,%es:(%rdi)
    4e29:	aa                   	stos   %al,%es:(%rdi)
    4e2a:	aa                   	stos   %al,%es:(%rdi)
    4e2b:	aa                   	stos   %al,%es:(%rdi)
    4e2c:	aa                   	stos   %al,%es:(%rdi)
    4e2d:	aa                   	stos   %al,%es:(%rdi)
    4e2e:	aa                   	stos   %al,%es:(%rdi)
    4e2f:	aa                   	stos   %al,%es:(%rdi)
    4e30:	aa                   	stos   %al,%es:(%rdi)
    4e31:	aa                   	stos   %al,%es:(%rdi)
    4e32:	aa                   	stos   %al,%es:(%rdi)
    4e33:	aa                   	stos   %al,%es:(%rdi)
    4e34:	aa                   	stos   %al,%es:(%rdi)
    4e35:	aa                   	stos   %al,%es:(%rdi)
    4e36:	aa                   	stos   %al,%es:(%rdi)
    4e37:	aa                   	stos   %al,%es:(%rdi)
    4e38:	aa                   	stos   %al,%es:(%rdi)
    4e39:	aa                   	stos   %al,%es:(%rdi)
    4e3a:	aa                   	stos   %al,%es:(%rdi)
    4e3b:	aa                   	stos   %al,%es:(%rdi)
    4e3c:	aa                   	stos   %al,%es:(%rdi)
    4e3d:	aa                   	stos   %al,%es:(%rdi)
    4e3e:	aa                   	stos   %al,%es:(%rdi)
    4e3f:	aa                   	stos   %al,%es:(%rdi)
    4e40:	aa                   	stos   %al,%es:(%rdi)
    4e41:	aa                   	stos   %al,%es:(%rdi)
    4e42:	aa                   	stos   %al,%es:(%rdi)
    4e43:	aa                   	stos   %al,%es:(%rdi)
    4e44:	aa                   	stos   %al,%es:(%rdi)
    4e45:	aa                   	stos   %al,%es:(%rdi)
    4e46:	aa                   	stos   %al,%es:(%rdi)
    4e47:	aa                   	stos   %al,%es:(%rdi)
    4e48:	aa                   	stos   %al,%es:(%rdi)
    4e49:	aa                   	stos   %al,%es:(%rdi)
    4e4a:	aa                   	stos   %al,%es:(%rdi)
    4e4b:	aa                   	stos   %al,%es:(%rdi)
    4e4c:	aa                   	stos   %al,%es:(%rdi)
    4e4d:	aa                   	stos   %al,%es:(%rdi)
    4e4e:	aa                   	stos   %al,%es:(%rdi)
    4e4f:	aa                   	stos   %al,%es:(%rdi)
    4e50:	aa                   	stos   %al,%es:(%rdi)
    4e51:	aa                   	stos   %al,%es:(%rdi)
    4e52:	aa                   	stos   %al,%es:(%rdi)
    4e53:	aa                   	stos   %al,%es:(%rdi)
    4e54:	aa                   	stos   %al,%es:(%rdi)
    4e55:	aa                   	stos   %al,%es:(%rdi)
    4e56:	aa                   	stos   %al,%es:(%rdi)
    4e57:	aa                   	stos   %al,%es:(%rdi)
    4e58:	aa                   	stos   %al,%es:(%rdi)
    4e59:	aa                   	stos   %al,%es:(%rdi)
    4e5a:	aa                   	stos   %al,%es:(%rdi)
    4e5b:	aa                   	stos   %al,%es:(%rdi)
    4e5c:	aa                   	stos   %al,%es:(%rdi)
    4e5d:	aa                   	stos   %al,%es:(%rdi)
    4e5e:	aa                   	stos   %al,%es:(%rdi)
    4e5f:	aa                   	stos   %al,%es:(%rdi)
    4e60:	aa                   	stos   %al,%es:(%rdi)
    4e61:	aa                   	stos   %al,%es:(%rdi)
    4e62:	aa                   	stos   %al,%es:(%rdi)
    4e63:	aa                   	stos   %al,%es:(%rdi)
    4e64:	aa                   	stos   %al,%es:(%rdi)
    4e65:	aa                   	stos   %al,%es:(%rdi)
    4e66:	aa                   	stos   %al,%es:(%rdi)
    4e67:	aa                   	stos   %al,%es:(%rdi)
    4e68:	aa                   	stos   %al,%es:(%rdi)
    4e69:	aa                   	stos   %al,%es:(%rdi)
    4e6a:	aa                   	stos   %al,%es:(%rdi)
    4e6b:	aa                   	stos   %al,%es:(%rdi)
    4e6c:	aa                   	stos   %al,%es:(%rdi)
    4e6d:	aa                   	stos   %al,%es:(%rdi)
    4e6e:	aa                   	stos   %al,%es:(%rdi)
    4e6f:	aa                   	stos   %al,%es:(%rdi)
    4e70:	aa                   	stos   %al,%es:(%rdi)
    4e71:	aa                   	stos   %al,%es:(%rdi)
    4e72:	aa                   	stos   %al,%es:(%rdi)
    4e73:	aa                   	stos   %al,%es:(%rdi)
    4e74:	aa                   	stos   %al,%es:(%rdi)
    4e75:	aa                   	stos   %al,%es:(%rdi)
    4e76:	aa                   	stos   %al,%es:(%rdi)
    4e77:	aa                   	stos   %al,%es:(%rdi)
    4e78:	aa                   	stos   %al,%es:(%rdi)
    4e79:	aa                   	stos   %al,%es:(%rdi)
    4e7a:	aa                   	stos   %al,%es:(%rdi)
    4e7b:	aa                   	stos   %al,%es:(%rdi)
    4e7c:	aa                   	stos   %al,%es:(%rdi)
    4e7d:	aa                   	stos   %al,%es:(%rdi)
    4e7e:	aa                   	stos   %al,%es:(%rdi)
    4e7f:	aa                   	stos   %al,%es:(%rdi)
    4e80:	aa                   	stos   %al,%es:(%rdi)
    4e81:	aa                   	stos   %al,%es:(%rdi)
    4e82:	aa                   	stos   %al,%es:(%rdi)
    4e83:	aa                   	stos   %al,%es:(%rdi)
    4e84:	aa                   	stos   %al,%es:(%rdi)
    4e85:	aa                   	stos   %al,%es:(%rdi)
    4e86:	aa                   	stos   %al,%es:(%rdi)
    4e87:	aa                   	stos   %al,%es:(%rdi)
    4e88:	aa                   	stos   %al,%es:(%rdi)
    4e89:	aa                   	stos   %al,%es:(%rdi)
    4e8a:	aa                   	stos   %al,%es:(%rdi)
    4e8b:	aa                   	stos   %al,%es:(%rdi)
    4e8c:	aa                   	stos   %al,%es:(%rdi)
    4e8d:	aa                   	stos   %al,%es:(%rdi)
    4e8e:	aa                   	stos   %al,%es:(%rdi)
    4e8f:	aa                   	stos   %al,%es:(%rdi)
    4e90:	aa                   	stos   %al,%es:(%rdi)
    4e91:	aa                   	stos   %al,%es:(%rdi)
    4e92:	aa                   	stos   %al,%es:(%rdi)
    4e93:	aa                   	stos   %al,%es:(%rdi)
    4e94:	aa                   	stos   %al,%es:(%rdi)
    4e95:	aa                   	stos   %al,%es:(%rdi)
    4e96:	aa                   	stos   %al,%es:(%rdi)
    4e97:	aa                   	stos   %al,%es:(%rdi)
    4e98:	aa                   	stos   %al,%es:(%rdi)
    4e99:	aa                   	stos   %al,%es:(%rdi)
    4e9a:	aa                   	stos   %al,%es:(%rdi)
    4e9b:	aa                   	stos   %al,%es:(%rdi)
    4e9c:	aa                   	stos   %al,%es:(%rdi)
    4e9d:	aa                   	stos   %al,%es:(%rdi)
    4e9e:	aa                   	stos   %al,%es:(%rdi)
    4e9f:	aa                   	stos   %al,%es:(%rdi)
    4ea0:	aa                   	stos   %al,%es:(%rdi)
    4ea1:	aa                   	stos   %al,%es:(%rdi)
    4ea2:	aa                   	stos   %al,%es:(%rdi)
    4ea3:	aa                   	stos   %al,%es:(%rdi)
    4ea4:	aa                   	stos   %al,%es:(%rdi)
    4ea5:	aa                   	stos   %al,%es:(%rdi)
    4ea6:	aa                   	stos   %al,%es:(%rdi)
    4ea7:	aa                   	stos   %al,%es:(%rdi)
    4ea8:	aa                   	stos   %al,%es:(%rdi)
    4ea9:	aa                   	stos   %al,%es:(%rdi)
    4eaa:	aa                   	stos   %al,%es:(%rdi)
    4eab:	aa                   	stos   %al,%es:(%rdi)
    4eac:	aa                   	stos   %al,%es:(%rdi)
    4ead:	aa                   	stos   %al,%es:(%rdi)
    4eae:	aa                   	stos   %al,%es:(%rdi)
    4eaf:	aa                   	stos   %al,%es:(%rdi)
    4eb0:	aa                   	stos   %al,%es:(%rdi)
    4eb1:	aa                   	stos   %al,%es:(%rdi)
    4eb2:	aa                   	stos   %al,%es:(%rdi)
    4eb3:	aa                   	stos   %al,%es:(%rdi)
    4eb4:	aa                   	stos   %al,%es:(%rdi)
    4eb5:	aa                   	stos   %al,%es:(%rdi)
    4eb6:	aa                   	stos   %al,%es:(%rdi)
    4eb7:	aa                   	stos   %al,%es:(%rdi)
    4eb8:	aa                   	stos   %al,%es:(%rdi)
    4eb9:	aa                   	stos   %al,%es:(%rdi)
    4eba:	aa                   	stos   %al,%es:(%rdi)
    4ebb:	aa                   	stos   %al,%es:(%rdi)
    4ebc:	aa                   	stos   %al,%es:(%rdi)
    4ebd:	aa                   	stos   %al,%es:(%rdi)
    4ebe:	aa                   	stos   %al,%es:(%rdi)
    4ebf:	aa                   	stos   %al,%es:(%rdi)
    4ec0:	aa                   	stos   %al,%es:(%rdi)
    4ec1:	aa                   	stos   %al,%es:(%rdi)
    4ec2:	aa                   	stos   %al,%es:(%rdi)
    4ec3:	aa                   	stos   %al,%es:(%rdi)
    4ec4:	aa                   	stos   %al,%es:(%rdi)
    4ec5:	aa                   	stos   %al,%es:(%rdi)
    4ec6:	aa                   	stos   %al,%es:(%rdi)
    4ec7:	aa                   	stos   %al,%es:(%rdi)
    4ec8:	aa                   	stos   %al,%es:(%rdi)
    4ec9:	aa                   	stos   %al,%es:(%rdi)
    4eca:	aa                   	stos   %al,%es:(%rdi)
    4ecb:	aa                   	stos   %al,%es:(%rdi)
    4ecc:	aa                   	stos   %al,%es:(%rdi)
    4ecd:	aa                   	stos   %al,%es:(%rdi)
    4ece:	aa                   	stos   %al,%es:(%rdi)
    4ecf:	aa                   	stos   %al,%es:(%rdi)
    4ed0:	aa                   	stos   %al,%es:(%rdi)
    4ed1:	aa                   	stos   %al,%es:(%rdi)
    4ed2:	aa                   	stos   %al,%es:(%rdi)
    4ed3:	aa                   	stos   %al,%es:(%rdi)
    4ed4:	aa                   	stos   %al,%es:(%rdi)
    4ed5:	aa                   	stos   %al,%es:(%rdi)
    4ed6:	aa                   	stos   %al,%es:(%rdi)
    4ed7:	aa                   	stos   %al,%es:(%rdi)
    4ed8:	aa                   	stos   %al,%es:(%rdi)
    4ed9:	aa                   	stos   %al,%es:(%rdi)
    4eda:	aa                   	stos   %al,%es:(%rdi)
    4edb:	aa                   	stos   %al,%es:(%rdi)
    4edc:	aa                   	stos   %al,%es:(%rdi)
    4edd:	aa                   	stos   %al,%es:(%rdi)
    4ede:	aa                   	stos   %al,%es:(%rdi)
    4edf:	aa                   	stos   %al,%es:(%rdi)
    4ee0:	aa                   	stos   %al,%es:(%rdi)
    4ee1:	aa                   	stos   %al,%es:(%rdi)
    4ee2:	aa                   	stos   %al,%es:(%rdi)
    4ee3:	aa                   	stos   %al,%es:(%rdi)
    4ee4:	aa                   	stos   %al,%es:(%rdi)
    4ee5:	aa                   	stos   %al,%es:(%rdi)
    4ee6:	aa                   	stos   %al,%es:(%rdi)
    4ee7:	aa                   	stos   %al,%es:(%rdi)
    4ee8:	aa                   	stos   %al,%es:(%rdi)
    4ee9:	aa                   	stos   %al,%es:(%rdi)
    4eea:	aa                   	stos   %al,%es:(%rdi)
    4eeb:	aa                   	stos   %al,%es:(%rdi)
    4eec:	aa                   	stos   %al,%es:(%rdi)
    4eed:	aa                   	stos   %al,%es:(%rdi)
    4eee:	aa                   	stos   %al,%es:(%rdi)
    4eef:	aa                   	stos   %al,%es:(%rdi)
    4ef0:	aa                   	stos   %al,%es:(%rdi)
    4ef1:	aa                   	stos   %al,%es:(%rdi)
    4ef2:	aa                   	stos   %al,%es:(%rdi)
    4ef3:	aa                   	stos   %al,%es:(%rdi)
    4ef4:	aa                   	stos   %al,%es:(%rdi)
    4ef5:	aa                   	stos   %al,%es:(%rdi)
    4ef6:	aa                   	stos   %al,%es:(%rdi)
    4ef7:	aa                   	stos   %al,%es:(%rdi)
    4ef8:	aa                   	stos   %al,%es:(%rdi)
    4ef9:	aa                   	stos   %al,%es:(%rdi)
    4efa:	aa                   	stos   %al,%es:(%rdi)
    4efb:	aa                   	stos   %al,%es:(%rdi)
    4efc:	aa                   	stos   %al,%es:(%rdi)
    4efd:	aa                   	stos   %al,%es:(%rdi)
    4efe:	aa                   	stos   %al,%es:(%rdi)
    4eff:	aa                   	stos   %al,%es:(%rdi)
    4f00:	aa                   	stos   %al,%es:(%rdi)
    4f01:	aa                   	stos   %al,%es:(%rdi)
    4f02:	aa                   	stos   %al,%es:(%rdi)
    4f03:	aa                   	stos   %al,%es:(%rdi)
    4f04:	aa                   	stos   %al,%es:(%rdi)
    4f05:	aa                   	stos   %al,%es:(%rdi)
    4f06:	aa                   	stos   %al,%es:(%rdi)
    4f07:	aa                   	stos   %al,%es:(%rdi)
    4f08:	aa                   	stos   %al,%es:(%rdi)
    4f09:	aa                   	stos   %al,%es:(%rdi)
    4f0a:	aa                   	stos   %al,%es:(%rdi)
    4f0b:	aa                   	stos   %al,%es:(%rdi)
    4f0c:	aa                   	stos   %al,%es:(%rdi)
    4f0d:	aa                   	stos   %al,%es:(%rdi)
    4f0e:	aa                   	stos   %al,%es:(%rdi)
    4f0f:	aa                   	stos   %al,%es:(%rdi)
    4f10:	aa                   	stos   %al,%es:(%rdi)
    4f11:	aa                   	stos   %al,%es:(%rdi)
    4f12:	aa                   	stos   %al,%es:(%rdi)
    4f13:	aa                   	stos   %al,%es:(%rdi)
    4f14:	aa                   	stos   %al,%es:(%rdi)
    4f15:	aa                   	stos   %al,%es:(%rdi)
    4f16:	aa                   	stos   %al,%es:(%rdi)
    4f17:	aa                   	stos   %al,%es:(%rdi)
    4f18:	aa                   	stos   %al,%es:(%rdi)
    4f19:	aa                   	stos   %al,%es:(%rdi)
    4f1a:	aa                   	stos   %al,%es:(%rdi)
    4f1b:	aa                   	stos   %al,%es:(%rdi)
    4f1c:	aa                   	stos   %al,%es:(%rdi)
    4f1d:	aa                   	stos   %al,%es:(%rdi)
    4f1e:	aa                   	stos   %al,%es:(%rdi)
    4f1f:	aa                   	stos   %al,%es:(%rdi)
    4f20:	aa                   	stos   %al,%es:(%rdi)
    4f21:	aa                   	stos   %al,%es:(%rdi)
    4f22:	aa                   	stos   %al,%es:(%rdi)
    4f23:	aa                   	stos   %al,%es:(%rdi)
    4f24:	aa                   	stos   %al,%es:(%rdi)
    4f25:	aa                   	stos   %al,%es:(%rdi)
    4f26:	aa                   	stos   %al,%es:(%rdi)
    4f27:	aa                   	stos   %al,%es:(%rdi)
    4f28:	aa                   	stos   %al,%es:(%rdi)
    4f29:	aa                   	stos   %al,%es:(%rdi)
    4f2a:	aa                   	stos   %al,%es:(%rdi)
    4f2b:	aa                   	stos   %al,%es:(%rdi)
    4f2c:	aa                   	stos   %al,%es:(%rdi)
    4f2d:	aa                   	stos   %al,%es:(%rdi)
    4f2e:	aa                   	stos   %al,%es:(%rdi)
    4f2f:	aa                   	stos   %al,%es:(%rdi)
    4f30:	aa                   	stos   %al,%es:(%rdi)
    4f31:	aa                   	stos   %al,%es:(%rdi)
    4f32:	aa                   	stos   %al,%es:(%rdi)
    4f33:	aa                   	stos   %al,%es:(%rdi)
    4f34:	aa                   	stos   %al,%es:(%rdi)
    4f35:	aa                   	stos   %al,%es:(%rdi)
    4f36:	aa                   	stos   %al,%es:(%rdi)
    4f37:	aa                   	stos   %al,%es:(%rdi)
    4f38:	aa                   	stos   %al,%es:(%rdi)
    4f39:	aa                   	stos   %al,%es:(%rdi)
    4f3a:	aa                   	stos   %al,%es:(%rdi)
    4f3b:	aa                   	stos   %al,%es:(%rdi)
    4f3c:	aa                   	stos   %al,%es:(%rdi)
    4f3d:	aa                   	stos   %al,%es:(%rdi)
    4f3e:	aa                   	stos   %al,%es:(%rdi)
    4f3f:	aa                   	stos   %al,%es:(%rdi)
    4f40:	aa                   	stos   %al,%es:(%rdi)
    4f41:	aa                   	stos   %al,%es:(%rdi)
    4f42:	aa                   	stos   %al,%es:(%rdi)
    4f43:	aa                   	stos   %al,%es:(%rdi)
    4f44:	aa                   	stos   %al,%es:(%rdi)
    4f45:	aa                   	stos   %al,%es:(%rdi)
    4f46:	aa                   	stos   %al,%es:(%rdi)
    4f47:	aa                   	stos   %al,%es:(%rdi)
    4f48:	aa                   	stos   %al,%es:(%rdi)
    4f49:	aa                   	stos   %al,%es:(%rdi)
    4f4a:	aa                   	stos   %al,%es:(%rdi)
    4f4b:	aa                   	stos   %al,%es:(%rdi)
    4f4c:	aa                   	stos   %al,%es:(%rdi)
    4f4d:	aa                   	stos   %al,%es:(%rdi)
    4f4e:	aa                   	stos   %al,%es:(%rdi)
    4f4f:	aa                   	stos   %al,%es:(%rdi)
    4f50:	aa                   	stos   %al,%es:(%rdi)
    4f51:	aa                   	stos   %al,%es:(%rdi)
    4f52:	aa                   	stos   %al,%es:(%rdi)
    4f53:	aa                   	stos   %al,%es:(%rdi)
    4f54:	aa                   	stos   %al,%es:(%rdi)
    4f55:	aa                   	stos   %al,%es:(%rdi)
    4f56:	aa                   	stos   %al,%es:(%rdi)
    4f57:	aa                   	stos   %al,%es:(%rdi)
    4f58:	aa                   	stos   %al,%es:(%rdi)
    4f59:	aa                   	stos   %al,%es:(%rdi)
    4f5a:	aa                   	stos   %al,%es:(%rdi)
    4f5b:	aa                   	stos   %al,%es:(%rdi)
    4f5c:	aa                   	stos   %al,%es:(%rdi)
    4f5d:	aa                   	stos   %al,%es:(%rdi)
    4f5e:	aa                   	stos   %al,%es:(%rdi)
    4f5f:	aa                   	stos   %al,%es:(%rdi)
    4f60:	aa                   	stos   %al,%es:(%rdi)
    4f61:	aa                   	stos   %al,%es:(%rdi)
    4f62:	aa                   	stos   %al,%es:(%rdi)
    4f63:	aa                   	stos   %al,%es:(%rdi)
    4f64:	aa                   	stos   %al,%es:(%rdi)
    4f65:	aa                   	stos   %al,%es:(%rdi)
    4f66:	aa                   	stos   %al,%es:(%rdi)
    4f67:	aa                   	stos   %al,%es:(%rdi)
    4f68:	aa                   	stos   %al,%es:(%rdi)
    4f69:	aa                   	stos   %al,%es:(%rdi)
    4f6a:	aa                   	stos   %al,%es:(%rdi)
    4f6b:	aa                   	stos   %al,%es:(%rdi)
    4f6c:	aa                   	stos   %al,%es:(%rdi)
    4f6d:	aa                   	stos   %al,%es:(%rdi)
    4f6e:	aa                   	stos   %al,%es:(%rdi)
    4f6f:	aa                   	stos   %al,%es:(%rdi)
    4f70:	aa                   	stos   %al,%es:(%rdi)
    4f71:	aa                   	stos   %al,%es:(%rdi)
    4f72:	aa                   	stos   %al,%es:(%rdi)
    4f73:	aa                   	stos   %al,%es:(%rdi)
    4f74:	aa                   	stos   %al,%es:(%rdi)
    4f75:	aa                   	stos   %al,%es:(%rdi)
    4f76:	aa                   	stos   %al,%es:(%rdi)
    4f77:	aa                   	stos   %al,%es:(%rdi)
    4f78:	aa                   	stos   %al,%es:(%rdi)
    4f79:	aa                   	stos   %al,%es:(%rdi)
    4f7a:	aa                   	stos   %al,%es:(%rdi)
    4f7b:	aa                   	stos   %al,%es:(%rdi)
    4f7c:	aa                   	stos   %al,%es:(%rdi)
    4f7d:	aa                   	stos   %al,%es:(%rdi)
    4f7e:	aa                   	stos   %al,%es:(%rdi)
    4f7f:	aa                   	stos   %al,%es:(%rdi)
    4f80:	aa                   	stos   %al,%es:(%rdi)
    4f81:	aa                   	stos   %al,%es:(%rdi)
    4f82:	aa                   	stos   %al,%es:(%rdi)
    4f83:	aa                   	stos   %al,%es:(%rdi)
    4f84:	aa                   	stos   %al,%es:(%rdi)
    4f85:	aa                   	stos   %al,%es:(%rdi)
    4f86:	aa                   	stos   %al,%es:(%rdi)
    4f87:	aa                   	stos   %al,%es:(%rdi)
    4f88:	aa                   	stos   %al,%es:(%rdi)
    4f89:	aa                   	stos   %al,%es:(%rdi)
    4f8a:	aa                   	stos   %al,%es:(%rdi)
    4f8b:	aa                   	stos   %al,%es:(%rdi)
    4f8c:	aa                   	stos   %al,%es:(%rdi)
    4f8d:	aa                   	stos   %al,%es:(%rdi)
    4f8e:	aa                   	stos   %al,%es:(%rdi)
    4f8f:	aa                   	stos   %al,%es:(%rdi)
    4f90:	aa                   	stos   %al,%es:(%rdi)
    4f91:	aa                   	stos   %al,%es:(%rdi)
    4f92:	aa                   	stos   %al,%es:(%rdi)
    4f93:	aa                   	stos   %al,%es:(%rdi)
    4f94:	aa                   	stos   %al,%es:(%rdi)
    4f95:	aa                   	stos   %al,%es:(%rdi)
    4f96:	aa                   	stos   %al,%es:(%rdi)
    4f97:	aa                   	stos   %al,%es:(%rdi)
    4f98:	aa                   	stos   %al,%es:(%rdi)
    4f99:	aa                   	stos   %al,%es:(%rdi)
    4f9a:	aa                   	stos   %al,%es:(%rdi)
    4f9b:	aa                   	stos   %al,%es:(%rdi)
    4f9c:	aa                   	stos   %al,%es:(%rdi)
    4f9d:	aa                   	stos   %al,%es:(%rdi)
    4f9e:	aa                   	stos   %al,%es:(%rdi)
    4f9f:	aa                   	stos   %al,%es:(%rdi)
    4fa0:	aa                   	stos   %al,%es:(%rdi)
    4fa1:	aa                   	stos   %al,%es:(%rdi)
    4fa2:	aa                   	stos   %al,%es:(%rdi)
    4fa3:	aa                   	stos   %al,%es:(%rdi)
    4fa4:	aa                   	stos   %al,%es:(%rdi)
    4fa5:	aa                   	stos   %al,%es:(%rdi)
    4fa6:	aa                   	stos   %al,%es:(%rdi)
    4fa7:	aa                   	stos   %al,%es:(%rdi)
    4fa8:	aa                   	stos   %al,%es:(%rdi)
    4fa9:	aa                   	stos   %al,%es:(%rdi)
    4faa:	aa                   	stos   %al,%es:(%rdi)
    4fab:	aa                   	stos   %al,%es:(%rdi)
    4fac:	aa                   	stos   %al,%es:(%rdi)
    4fad:	aa                   	stos   %al,%es:(%rdi)
    4fae:	aa                   	stos   %al,%es:(%rdi)
    4faf:	aa                   	stos   %al,%es:(%rdi)
    4fb0:	aa                   	stos   %al,%es:(%rdi)
    4fb1:	aa                   	stos   %al,%es:(%rdi)
    4fb2:	aa                   	stos   %al,%es:(%rdi)
    4fb3:	aa                   	stos   %al,%es:(%rdi)
    4fb4:	aa                   	stos   %al,%es:(%rdi)
    4fb5:	aa                   	stos   %al,%es:(%rdi)
    4fb6:	aa                   	stos   %al,%es:(%rdi)
    4fb7:	aa                   	stos   %al,%es:(%rdi)
    4fb8:	aa                   	stos   %al,%es:(%rdi)
    4fb9:	aa                   	stos   %al,%es:(%rdi)
    4fba:	aa                   	stos   %al,%es:(%rdi)
    4fbb:	aa                   	stos   %al,%es:(%rdi)
    4fbc:	aa                   	stos   %al,%es:(%rdi)
    4fbd:	aa                   	stos   %al,%es:(%rdi)
    4fbe:	aa                   	stos   %al,%es:(%rdi)
    4fbf:	aa                   	stos   %al,%es:(%rdi)
    4fc0:	aa                   	stos   %al,%es:(%rdi)
    4fc1:	aa                   	stos   %al,%es:(%rdi)
    4fc2:	aa                   	stos   %al,%es:(%rdi)
    4fc3:	aa                   	stos   %al,%es:(%rdi)
    4fc4:	aa                   	stos   %al,%es:(%rdi)
    4fc5:	aa                   	stos   %al,%es:(%rdi)
    4fc6:	aa                   	stos   %al,%es:(%rdi)
    4fc7:	aa                   	stos   %al,%es:(%rdi)
    4fc8:	aa                   	stos   %al,%es:(%rdi)
    4fc9:	aa                   	stos   %al,%es:(%rdi)
    4fca:	aa                   	stos   %al,%es:(%rdi)
    4fcb:	aa                   	stos   %al,%es:(%rdi)
    4fcc:	aa                   	stos   %al,%es:(%rdi)
    4fcd:	aa                   	stos   %al,%es:(%rdi)
    4fce:	aa                   	stos   %al,%es:(%rdi)
    4fcf:	aa                   	stos   %al,%es:(%rdi)
    4fd0:	aa                   	stos   %al,%es:(%rdi)
    4fd1:	aa                   	stos   %al,%es:(%rdi)
    4fd2:	aa                   	stos   %al,%es:(%rdi)
    4fd3:	aa                   	stos   %al,%es:(%rdi)
    4fd4:	aa                   	stos   %al,%es:(%rdi)
    4fd5:	aa                   	stos   %al,%es:(%rdi)
    4fd6:	aa                   	stos   %al,%es:(%rdi)
    4fd7:	aa                   	stos   %al,%es:(%rdi)
    4fd8:	aa                   	stos   %al,%es:(%rdi)
    4fd9:	aa                   	stos   %al,%es:(%rdi)
    4fda:	aa                   	stos   %al,%es:(%rdi)
    4fdb:	aa                   	stos   %al,%es:(%rdi)
    4fdc:	aa                   	stos   %al,%es:(%rdi)
    4fdd:	aa                   	stos   %al,%es:(%rdi)
    4fde:	aa                   	stos   %al,%es:(%rdi)
    4fdf:	aa                   	stos   %al,%es:(%rdi)
    4fe0:	aa                   	stos   %al,%es:(%rdi)
    4fe1:	aa                   	stos   %al,%es:(%rdi)
    4fe2:	aa                   	stos   %al,%es:(%rdi)
    4fe3:	aa                   	stos   %al,%es:(%rdi)
    4fe4:	aa                   	stos   %al,%es:(%rdi)
    4fe5:	aa                   	stos   %al,%es:(%rdi)
    4fe6:	aa                   	stos   %al,%es:(%rdi)
    4fe7:	aa                   	stos   %al,%es:(%rdi)
    4fe8:	aa                   	stos   %al,%es:(%rdi)
    4fe9:	aa                   	stos   %al,%es:(%rdi)
    4fea:	aa                   	stos   %al,%es:(%rdi)
    4feb:	aa                   	stos   %al,%es:(%rdi)
    4fec:	aa                   	stos   %al,%es:(%rdi)
    4fed:	aa                   	stos   %al,%es:(%rdi)
    4fee:	aa                   	stos   %al,%es:(%rdi)
    4fef:	aa                   	stos   %al,%es:(%rdi)
    4ff0:	aa                   	stos   %al,%es:(%rdi)
    4ff1:	aa                   	stos   %al,%es:(%rdi)
    4ff2:	aa                   	stos   %al,%es:(%rdi)
    4ff3:	aa                   	stos   %al,%es:(%rdi)
    4ff4:	aa                   	stos   %al,%es:(%rdi)
    4ff5:	aa                   	stos   %al,%es:(%rdi)
    4ff6:	aa                   	stos   %al,%es:(%rdi)
    4ff7:	aa                   	stos   %al,%es:(%rdi)
    4ff8:	aa                   	stos   %al,%es:(%rdi)
    4ff9:	aa                   	stos   %al,%es:(%rdi)
    4ffa:	aa                   	stos   %al,%es:(%rdi)
    4ffb:	aa                   	stos   %al,%es:(%rdi)
    4ffc:	aa                   	stos   %al,%es:(%rdi)
    4ffd:	aa                   	stos   %al,%es:(%rdi)
    4ffe:	aa                   	stos   %al,%es:(%rdi)
    4fff:	aa                   	stos   %al,%es:(%rdi)

0000000000005000 <z_x86_nmi_stack>:
    5000:	aa                   	stos   %al,%es:(%rdi)
    5001:	aa                   	stos   %al,%es:(%rdi)
    5002:	aa                   	stos   %al,%es:(%rdi)
    5003:	aa                   	stos   %al,%es:(%rdi)
    5004:	aa                   	stos   %al,%es:(%rdi)
    5005:	aa                   	stos   %al,%es:(%rdi)
    5006:	aa                   	stos   %al,%es:(%rdi)
    5007:	aa                   	stos   %al,%es:(%rdi)
    5008:	aa                   	stos   %al,%es:(%rdi)
    5009:	aa                   	stos   %al,%es:(%rdi)
    500a:	aa                   	stos   %al,%es:(%rdi)
    500b:	aa                   	stos   %al,%es:(%rdi)
    500c:	aa                   	stos   %al,%es:(%rdi)
    500d:	aa                   	stos   %al,%es:(%rdi)
    500e:	aa                   	stos   %al,%es:(%rdi)
    500f:	aa                   	stos   %al,%es:(%rdi)
    5010:	aa                   	stos   %al,%es:(%rdi)
    5011:	aa                   	stos   %al,%es:(%rdi)
    5012:	aa                   	stos   %al,%es:(%rdi)
    5013:	aa                   	stos   %al,%es:(%rdi)
    5014:	aa                   	stos   %al,%es:(%rdi)
    5015:	aa                   	stos   %al,%es:(%rdi)
    5016:	aa                   	stos   %al,%es:(%rdi)
    5017:	aa                   	stos   %al,%es:(%rdi)
    5018:	aa                   	stos   %al,%es:(%rdi)
    5019:	aa                   	stos   %al,%es:(%rdi)
    501a:	aa                   	stos   %al,%es:(%rdi)
    501b:	aa                   	stos   %al,%es:(%rdi)
    501c:	aa                   	stos   %al,%es:(%rdi)
    501d:	aa                   	stos   %al,%es:(%rdi)
    501e:	aa                   	stos   %al,%es:(%rdi)
    501f:	aa                   	stos   %al,%es:(%rdi)
    5020:	aa                   	stos   %al,%es:(%rdi)
    5021:	aa                   	stos   %al,%es:(%rdi)
    5022:	aa                   	stos   %al,%es:(%rdi)
    5023:	aa                   	stos   %al,%es:(%rdi)
    5024:	aa                   	stos   %al,%es:(%rdi)
    5025:	aa                   	stos   %al,%es:(%rdi)
    5026:	aa                   	stos   %al,%es:(%rdi)
    5027:	aa                   	stos   %al,%es:(%rdi)
    5028:	aa                   	stos   %al,%es:(%rdi)
    5029:	aa                   	stos   %al,%es:(%rdi)
    502a:	aa                   	stos   %al,%es:(%rdi)
    502b:	aa                   	stos   %al,%es:(%rdi)
    502c:	aa                   	stos   %al,%es:(%rdi)
    502d:	aa                   	stos   %al,%es:(%rdi)
    502e:	aa                   	stos   %al,%es:(%rdi)
    502f:	aa                   	stos   %al,%es:(%rdi)
    5030:	aa                   	stos   %al,%es:(%rdi)
    5031:	aa                   	stos   %al,%es:(%rdi)
    5032:	aa                   	stos   %al,%es:(%rdi)
    5033:	aa                   	stos   %al,%es:(%rdi)
    5034:	aa                   	stos   %al,%es:(%rdi)
    5035:	aa                   	stos   %al,%es:(%rdi)
    5036:	aa                   	stos   %al,%es:(%rdi)
    5037:	aa                   	stos   %al,%es:(%rdi)
    5038:	aa                   	stos   %al,%es:(%rdi)
    5039:	aa                   	stos   %al,%es:(%rdi)
    503a:	aa                   	stos   %al,%es:(%rdi)
    503b:	aa                   	stos   %al,%es:(%rdi)
    503c:	aa                   	stos   %al,%es:(%rdi)
    503d:	aa                   	stos   %al,%es:(%rdi)
    503e:	aa                   	stos   %al,%es:(%rdi)
    503f:	aa                   	stos   %al,%es:(%rdi)
    5040:	aa                   	stos   %al,%es:(%rdi)
    5041:	aa                   	stos   %al,%es:(%rdi)
    5042:	aa                   	stos   %al,%es:(%rdi)
    5043:	aa                   	stos   %al,%es:(%rdi)
    5044:	aa                   	stos   %al,%es:(%rdi)
    5045:	aa                   	stos   %al,%es:(%rdi)
    5046:	aa                   	stos   %al,%es:(%rdi)
    5047:	aa                   	stos   %al,%es:(%rdi)
    5048:	aa                   	stos   %al,%es:(%rdi)
    5049:	aa                   	stos   %al,%es:(%rdi)
    504a:	aa                   	stos   %al,%es:(%rdi)
    504b:	aa                   	stos   %al,%es:(%rdi)
    504c:	aa                   	stos   %al,%es:(%rdi)
    504d:	aa                   	stos   %al,%es:(%rdi)
    504e:	aa                   	stos   %al,%es:(%rdi)
    504f:	aa                   	stos   %al,%es:(%rdi)
    5050:	aa                   	stos   %al,%es:(%rdi)
    5051:	aa                   	stos   %al,%es:(%rdi)
    5052:	aa                   	stos   %al,%es:(%rdi)
    5053:	aa                   	stos   %al,%es:(%rdi)
    5054:	aa                   	stos   %al,%es:(%rdi)
    5055:	aa                   	stos   %al,%es:(%rdi)
    5056:	aa                   	stos   %al,%es:(%rdi)
    5057:	aa                   	stos   %al,%es:(%rdi)
    5058:	aa                   	stos   %al,%es:(%rdi)
    5059:	aa                   	stos   %al,%es:(%rdi)
    505a:	aa                   	stos   %al,%es:(%rdi)
    505b:	aa                   	stos   %al,%es:(%rdi)
    505c:	aa                   	stos   %al,%es:(%rdi)
    505d:	aa                   	stos   %al,%es:(%rdi)
    505e:	aa                   	stos   %al,%es:(%rdi)
    505f:	aa                   	stos   %al,%es:(%rdi)
    5060:	aa                   	stos   %al,%es:(%rdi)
    5061:	aa                   	stos   %al,%es:(%rdi)
    5062:	aa                   	stos   %al,%es:(%rdi)
    5063:	aa                   	stos   %al,%es:(%rdi)
    5064:	aa                   	stos   %al,%es:(%rdi)
    5065:	aa                   	stos   %al,%es:(%rdi)
    5066:	aa                   	stos   %al,%es:(%rdi)
    5067:	aa                   	stos   %al,%es:(%rdi)
    5068:	aa                   	stos   %al,%es:(%rdi)
    5069:	aa                   	stos   %al,%es:(%rdi)
    506a:	aa                   	stos   %al,%es:(%rdi)
    506b:	aa                   	stos   %al,%es:(%rdi)
    506c:	aa                   	stos   %al,%es:(%rdi)
    506d:	aa                   	stos   %al,%es:(%rdi)
    506e:	aa                   	stos   %al,%es:(%rdi)
    506f:	aa                   	stos   %al,%es:(%rdi)
    5070:	aa                   	stos   %al,%es:(%rdi)
    5071:	aa                   	stos   %al,%es:(%rdi)
    5072:	aa                   	stos   %al,%es:(%rdi)
    5073:	aa                   	stos   %al,%es:(%rdi)
    5074:	aa                   	stos   %al,%es:(%rdi)
    5075:	aa                   	stos   %al,%es:(%rdi)
    5076:	aa                   	stos   %al,%es:(%rdi)
    5077:	aa                   	stos   %al,%es:(%rdi)
    5078:	aa                   	stos   %al,%es:(%rdi)
    5079:	aa                   	stos   %al,%es:(%rdi)
    507a:	aa                   	stos   %al,%es:(%rdi)
    507b:	aa                   	stos   %al,%es:(%rdi)
    507c:	aa                   	stos   %al,%es:(%rdi)
    507d:	aa                   	stos   %al,%es:(%rdi)
    507e:	aa                   	stos   %al,%es:(%rdi)
    507f:	aa                   	stos   %al,%es:(%rdi)
    5080:	aa                   	stos   %al,%es:(%rdi)
    5081:	aa                   	stos   %al,%es:(%rdi)
    5082:	aa                   	stos   %al,%es:(%rdi)
    5083:	aa                   	stos   %al,%es:(%rdi)
    5084:	aa                   	stos   %al,%es:(%rdi)
    5085:	aa                   	stos   %al,%es:(%rdi)
    5086:	aa                   	stos   %al,%es:(%rdi)
    5087:	aa                   	stos   %al,%es:(%rdi)
    5088:	aa                   	stos   %al,%es:(%rdi)
    5089:	aa                   	stos   %al,%es:(%rdi)
    508a:	aa                   	stos   %al,%es:(%rdi)
    508b:	aa                   	stos   %al,%es:(%rdi)
    508c:	aa                   	stos   %al,%es:(%rdi)
    508d:	aa                   	stos   %al,%es:(%rdi)
    508e:	aa                   	stos   %al,%es:(%rdi)
    508f:	aa                   	stos   %al,%es:(%rdi)
    5090:	aa                   	stos   %al,%es:(%rdi)
    5091:	aa                   	stos   %al,%es:(%rdi)
    5092:	aa                   	stos   %al,%es:(%rdi)
    5093:	aa                   	stos   %al,%es:(%rdi)
    5094:	aa                   	stos   %al,%es:(%rdi)
    5095:	aa                   	stos   %al,%es:(%rdi)
    5096:	aa                   	stos   %al,%es:(%rdi)
    5097:	aa                   	stos   %al,%es:(%rdi)
    5098:	aa                   	stos   %al,%es:(%rdi)
    5099:	aa                   	stos   %al,%es:(%rdi)
    509a:	aa                   	stos   %al,%es:(%rdi)
    509b:	aa                   	stos   %al,%es:(%rdi)
    509c:	aa                   	stos   %al,%es:(%rdi)
    509d:	aa                   	stos   %al,%es:(%rdi)
    509e:	aa                   	stos   %al,%es:(%rdi)
    509f:	aa                   	stos   %al,%es:(%rdi)
    50a0:	aa                   	stos   %al,%es:(%rdi)
    50a1:	aa                   	stos   %al,%es:(%rdi)
    50a2:	aa                   	stos   %al,%es:(%rdi)
    50a3:	aa                   	stos   %al,%es:(%rdi)
    50a4:	aa                   	stos   %al,%es:(%rdi)
    50a5:	aa                   	stos   %al,%es:(%rdi)
    50a6:	aa                   	stos   %al,%es:(%rdi)
    50a7:	aa                   	stos   %al,%es:(%rdi)
    50a8:	aa                   	stos   %al,%es:(%rdi)
    50a9:	aa                   	stos   %al,%es:(%rdi)
    50aa:	aa                   	stos   %al,%es:(%rdi)
    50ab:	aa                   	stos   %al,%es:(%rdi)
    50ac:	aa                   	stos   %al,%es:(%rdi)
    50ad:	aa                   	stos   %al,%es:(%rdi)
    50ae:	aa                   	stos   %al,%es:(%rdi)
    50af:	aa                   	stos   %al,%es:(%rdi)
    50b0:	aa                   	stos   %al,%es:(%rdi)
    50b1:	aa                   	stos   %al,%es:(%rdi)
    50b2:	aa                   	stos   %al,%es:(%rdi)
    50b3:	aa                   	stos   %al,%es:(%rdi)
    50b4:	aa                   	stos   %al,%es:(%rdi)
    50b5:	aa                   	stos   %al,%es:(%rdi)
    50b6:	aa                   	stos   %al,%es:(%rdi)
    50b7:	aa                   	stos   %al,%es:(%rdi)
    50b8:	aa                   	stos   %al,%es:(%rdi)
    50b9:	aa                   	stos   %al,%es:(%rdi)
    50ba:	aa                   	stos   %al,%es:(%rdi)
    50bb:	aa                   	stos   %al,%es:(%rdi)
    50bc:	aa                   	stos   %al,%es:(%rdi)
    50bd:	aa                   	stos   %al,%es:(%rdi)
    50be:	aa                   	stos   %al,%es:(%rdi)
    50bf:	aa                   	stos   %al,%es:(%rdi)
    50c0:	aa                   	stos   %al,%es:(%rdi)
    50c1:	aa                   	stos   %al,%es:(%rdi)
    50c2:	aa                   	stos   %al,%es:(%rdi)
    50c3:	aa                   	stos   %al,%es:(%rdi)
    50c4:	aa                   	stos   %al,%es:(%rdi)
    50c5:	aa                   	stos   %al,%es:(%rdi)
    50c6:	aa                   	stos   %al,%es:(%rdi)
    50c7:	aa                   	stos   %al,%es:(%rdi)
    50c8:	aa                   	stos   %al,%es:(%rdi)
    50c9:	aa                   	stos   %al,%es:(%rdi)
    50ca:	aa                   	stos   %al,%es:(%rdi)
    50cb:	aa                   	stos   %al,%es:(%rdi)
    50cc:	aa                   	stos   %al,%es:(%rdi)
    50cd:	aa                   	stos   %al,%es:(%rdi)
    50ce:	aa                   	stos   %al,%es:(%rdi)
    50cf:	aa                   	stos   %al,%es:(%rdi)
    50d0:	aa                   	stos   %al,%es:(%rdi)
    50d1:	aa                   	stos   %al,%es:(%rdi)
    50d2:	aa                   	stos   %al,%es:(%rdi)
    50d3:	aa                   	stos   %al,%es:(%rdi)
    50d4:	aa                   	stos   %al,%es:(%rdi)
    50d5:	aa                   	stos   %al,%es:(%rdi)
    50d6:	aa                   	stos   %al,%es:(%rdi)
    50d7:	aa                   	stos   %al,%es:(%rdi)
    50d8:	aa                   	stos   %al,%es:(%rdi)
    50d9:	aa                   	stos   %al,%es:(%rdi)
    50da:	aa                   	stos   %al,%es:(%rdi)
    50db:	aa                   	stos   %al,%es:(%rdi)
    50dc:	aa                   	stos   %al,%es:(%rdi)
    50dd:	aa                   	stos   %al,%es:(%rdi)
    50de:	aa                   	stos   %al,%es:(%rdi)
    50df:	aa                   	stos   %al,%es:(%rdi)
    50e0:	aa                   	stos   %al,%es:(%rdi)
    50e1:	aa                   	stos   %al,%es:(%rdi)
    50e2:	aa                   	stos   %al,%es:(%rdi)
    50e3:	aa                   	stos   %al,%es:(%rdi)
    50e4:	aa                   	stos   %al,%es:(%rdi)
    50e5:	aa                   	stos   %al,%es:(%rdi)
    50e6:	aa                   	stos   %al,%es:(%rdi)
    50e7:	aa                   	stos   %al,%es:(%rdi)
    50e8:	aa                   	stos   %al,%es:(%rdi)
    50e9:	aa                   	stos   %al,%es:(%rdi)
    50ea:	aa                   	stos   %al,%es:(%rdi)
    50eb:	aa                   	stos   %al,%es:(%rdi)
    50ec:	aa                   	stos   %al,%es:(%rdi)
    50ed:	aa                   	stos   %al,%es:(%rdi)
    50ee:	aa                   	stos   %al,%es:(%rdi)
    50ef:	aa                   	stos   %al,%es:(%rdi)
    50f0:	aa                   	stos   %al,%es:(%rdi)
    50f1:	aa                   	stos   %al,%es:(%rdi)
    50f2:	aa                   	stos   %al,%es:(%rdi)
    50f3:	aa                   	stos   %al,%es:(%rdi)
    50f4:	aa                   	stos   %al,%es:(%rdi)
    50f5:	aa                   	stos   %al,%es:(%rdi)
    50f6:	aa                   	stos   %al,%es:(%rdi)
    50f7:	aa                   	stos   %al,%es:(%rdi)
    50f8:	aa                   	stos   %al,%es:(%rdi)
    50f9:	aa                   	stos   %al,%es:(%rdi)
    50fa:	aa                   	stos   %al,%es:(%rdi)
    50fb:	aa                   	stos   %al,%es:(%rdi)
    50fc:	aa                   	stos   %al,%es:(%rdi)
    50fd:	aa                   	stos   %al,%es:(%rdi)
    50fe:	aa                   	stos   %al,%es:(%rdi)
    50ff:	aa                   	stos   %al,%es:(%rdi)
    5100:	aa                   	stos   %al,%es:(%rdi)
    5101:	aa                   	stos   %al,%es:(%rdi)
    5102:	aa                   	stos   %al,%es:(%rdi)
    5103:	aa                   	stos   %al,%es:(%rdi)
    5104:	aa                   	stos   %al,%es:(%rdi)
    5105:	aa                   	stos   %al,%es:(%rdi)
    5106:	aa                   	stos   %al,%es:(%rdi)
    5107:	aa                   	stos   %al,%es:(%rdi)
    5108:	aa                   	stos   %al,%es:(%rdi)
    5109:	aa                   	stos   %al,%es:(%rdi)
    510a:	aa                   	stos   %al,%es:(%rdi)
    510b:	aa                   	stos   %al,%es:(%rdi)
    510c:	aa                   	stos   %al,%es:(%rdi)
    510d:	aa                   	stos   %al,%es:(%rdi)
    510e:	aa                   	stos   %al,%es:(%rdi)
    510f:	aa                   	stos   %al,%es:(%rdi)
    5110:	aa                   	stos   %al,%es:(%rdi)
    5111:	aa                   	stos   %al,%es:(%rdi)
    5112:	aa                   	stos   %al,%es:(%rdi)
    5113:	aa                   	stos   %al,%es:(%rdi)
    5114:	aa                   	stos   %al,%es:(%rdi)
    5115:	aa                   	stos   %al,%es:(%rdi)
    5116:	aa                   	stos   %al,%es:(%rdi)
    5117:	aa                   	stos   %al,%es:(%rdi)
    5118:	aa                   	stos   %al,%es:(%rdi)
    5119:	aa                   	stos   %al,%es:(%rdi)
    511a:	aa                   	stos   %al,%es:(%rdi)
    511b:	aa                   	stos   %al,%es:(%rdi)
    511c:	aa                   	stos   %al,%es:(%rdi)
    511d:	aa                   	stos   %al,%es:(%rdi)
    511e:	aa                   	stos   %al,%es:(%rdi)
    511f:	aa                   	stos   %al,%es:(%rdi)
    5120:	aa                   	stos   %al,%es:(%rdi)
    5121:	aa                   	stos   %al,%es:(%rdi)
    5122:	aa                   	stos   %al,%es:(%rdi)
    5123:	aa                   	stos   %al,%es:(%rdi)
    5124:	aa                   	stos   %al,%es:(%rdi)
    5125:	aa                   	stos   %al,%es:(%rdi)
    5126:	aa                   	stos   %al,%es:(%rdi)
    5127:	aa                   	stos   %al,%es:(%rdi)
    5128:	aa                   	stos   %al,%es:(%rdi)
    5129:	aa                   	stos   %al,%es:(%rdi)
    512a:	aa                   	stos   %al,%es:(%rdi)
    512b:	aa                   	stos   %al,%es:(%rdi)
    512c:	aa                   	stos   %al,%es:(%rdi)
    512d:	aa                   	stos   %al,%es:(%rdi)
    512e:	aa                   	stos   %al,%es:(%rdi)
    512f:	aa                   	stos   %al,%es:(%rdi)
    5130:	aa                   	stos   %al,%es:(%rdi)
    5131:	aa                   	stos   %al,%es:(%rdi)
    5132:	aa                   	stos   %al,%es:(%rdi)
    5133:	aa                   	stos   %al,%es:(%rdi)
    5134:	aa                   	stos   %al,%es:(%rdi)
    5135:	aa                   	stos   %al,%es:(%rdi)
    5136:	aa                   	stos   %al,%es:(%rdi)
    5137:	aa                   	stos   %al,%es:(%rdi)
    5138:	aa                   	stos   %al,%es:(%rdi)
    5139:	aa                   	stos   %al,%es:(%rdi)
    513a:	aa                   	stos   %al,%es:(%rdi)
    513b:	aa                   	stos   %al,%es:(%rdi)
    513c:	aa                   	stos   %al,%es:(%rdi)
    513d:	aa                   	stos   %al,%es:(%rdi)
    513e:	aa                   	stos   %al,%es:(%rdi)
    513f:	aa                   	stos   %al,%es:(%rdi)
    5140:	aa                   	stos   %al,%es:(%rdi)
    5141:	aa                   	stos   %al,%es:(%rdi)
    5142:	aa                   	stos   %al,%es:(%rdi)
    5143:	aa                   	stos   %al,%es:(%rdi)
    5144:	aa                   	stos   %al,%es:(%rdi)
    5145:	aa                   	stos   %al,%es:(%rdi)
    5146:	aa                   	stos   %al,%es:(%rdi)
    5147:	aa                   	stos   %al,%es:(%rdi)
    5148:	aa                   	stos   %al,%es:(%rdi)
    5149:	aa                   	stos   %al,%es:(%rdi)
    514a:	aa                   	stos   %al,%es:(%rdi)
    514b:	aa                   	stos   %al,%es:(%rdi)
    514c:	aa                   	stos   %al,%es:(%rdi)
    514d:	aa                   	stos   %al,%es:(%rdi)
    514e:	aa                   	stos   %al,%es:(%rdi)
    514f:	aa                   	stos   %al,%es:(%rdi)
    5150:	aa                   	stos   %al,%es:(%rdi)
    5151:	aa                   	stos   %al,%es:(%rdi)
    5152:	aa                   	stos   %al,%es:(%rdi)
    5153:	aa                   	stos   %al,%es:(%rdi)
    5154:	aa                   	stos   %al,%es:(%rdi)
    5155:	aa                   	stos   %al,%es:(%rdi)
    5156:	aa                   	stos   %al,%es:(%rdi)
    5157:	aa                   	stos   %al,%es:(%rdi)
    5158:	aa                   	stos   %al,%es:(%rdi)
    5159:	aa                   	stos   %al,%es:(%rdi)
    515a:	aa                   	stos   %al,%es:(%rdi)
    515b:	aa                   	stos   %al,%es:(%rdi)
    515c:	aa                   	stos   %al,%es:(%rdi)
    515d:	aa                   	stos   %al,%es:(%rdi)
    515e:	aa                   	stos   %al,%es:(%rdi)
    515f:	aa                   	stos   %al,%es:(%rdi)
    5160:	aa                   	stos   %al,%es:(%rdi)
    5161:	aa                   	stos   %al,%es:(%rdi)
    5162:	aa                   	stos   %al,%es:(%rdi)
    5163:	aa                   	stos   %al,%es:(%rdi)
    5164:	aa                   	stos   %al,%es:(%rdi)
    5165:	aa                   	stos   %al,%es:(%rdi)
    5166:	aa                   	stos   %al,%es:(%rdi)
    5167:	aa                   	stos   %al,%es:(%rdi)
    5168:	aa                   	stos   %al,%es:(%rdi)
    5169:	aa                   	stos   %al,%es:(%rdi)
    516a:	aa                   	stos   %al,%es:(%rdi)
    516b:	aa                   	stos   %al,%es:(%rdi)
    516c:	aa                   	stos   %al,%es:(%rdi)
    516d:	aa                   	stos   %al,%es:(%rdi)
    516e:	aa                   	stos   %al,%es:(%rdi)
    516f:	aa                   	stos   %al,%es:(%rdi)
    5170:	aa                   	stos   %al,%es:(%rdi)
    5171:	aa                   	stos   %al,%es:(%rdi)
    5172:	aa                   	stos   %al,%es:(%rdi)
    5173:	aa                   	stos   %al,%es:(%rdi)
    5174:	aa                   	stos   %al,%es:(%rdi)
    5175:	aa                   	stos   %al,%es:(%rdi)
    5176:	aa                   	stos   %al,%es:(%rdi)
    5177:	aa                   	stos   %al,%es:(%rdi)
    5178:	aa                   	stos   %al,%es:(%rdi)
    5179:	aa                   	stos   %al,%es:(%rdi)
    517a:	aa                   	stos   %al,%es:(%rdi)
    517b:	aa                   	stos   %al,%es:(%rdi)
    517c:	aa                   	stos   %al,%es:(%rdi)
    517d:	aa                   	stos   %al,%es:(%rdi)
    517e:	aa                   	stos   %al,%es:(%rdi)
    517f:	aa                   	stos   %al,%es:(%rdi)
    5180:	aa                   	stos   %al,%es:(%rdi)
    5181:	aa                   	stos   %al,%es:(%rdi)
    5182:	aa                   	stos   %al,%es:(%rdi)
    5183:	aa                   	stos   %al,%es:(%rdi)
    5184:	aa                   	stos   %al,%es:(%rdi)
    5185:	aa                   	stos   %al,%es:(%rdi)
    5186:	aa                   	stos   %al,%es:(%rdi)
    5187:	aa                   	stos   %al,%es:(%rdi)
    5188:	aa                   	stos   %al,%es:(%rdi)
    5189:	aa                   	stos   %al,%es:(%rdi)
    518a:	aa                   	stos   %al,%es:(%rdi)
    518b:	aa                   	stos   %al,%es:(%rdi)
    518c:	aa                   	stos   %al,%es:(%rdi)
    518d:	aa                   	stos   %al,%es:(%rdi)
    518e:	aa                   	stos   %al,%es:(%rdi)
    518f:	aa                   	stos   %al,%es:(%rdi)
    5190:	aa                   	stos   %al,%es:(%rdi)
    5191:	aa                   	stos   %al,%es:(%rdi)
    5192:	aa                   	stos   %al,%es:(%rdi)
    5193:	aa                   	stos   %al,%es:(%rdi)
    5194:	aa                   	stos   %al,%es:(%rdi)
    5195:	aa                   	stos   %al,%es:(%rdi)
    5196:	aa                   	stos   %al,%es:(%rdi)
    5197:	aa                   	stos   %al,%es:(%rdi)
    5198:	aa                   	stos   %al,%es:(%rdi)
    5199:	aa                   	stos   %al,%es:(%rdi)
    519a:	aa                   	stos   %al,%es:(%rdi)
    519b:	aa                   	stos   %al,%es:(%rdi)
    519c:	aa                   	stos   %al,%es:(%rdi)
    519d:	aa                   	stos   %al,%es:(%rdi)
    519e:	aa                   	stos   %al,%es:(%rdi)
    519f:	aa                   	stos   %al,%es:(%rdi)
    51a0:	aa                   	stos   %al,%es:(%rdi)
    51a1:	aa                   	stos   %al,%es:(%rdi)
    51a2:	aa                   	stos   %al,%es:(%rdi)
    51a3:	aa                   	stos   %al,%es:(%rdi)
    51a4:	aa                   	stos   %al,%es:(%rdi)
    51a5:	aa                   	stos   %al,%es:(%rdi)
    51a6:	aa                   	stos   %al,%es:(%rdi)
    51a7:	aa                   	stos   %al,%es:(%rdi)
    51a8:	aa                   	stos   %al,%es:(%rdi)
    51a9:	aa                   	stos   %al,%es:(%rdi)
    51aa:	aa                   	stos   %al,%es:(%rdi)
    51ab:	aa                   	stos   %al,%es:(%rdi)
    51ac:	aa                   	stos   %al,%es:(%rdi)
    51ad:	aa                   	stos   %al,%es:(%rdi)
    51ae:	aa                   	stos   %al,%es:(%rdi)
    51af:	aa                   	stos   %al,%es:(%rdi)
    51b0:	aa                   	stos   %al,%es:(%rdi)
    51b1:	aa                   	stos   %al,%es:(%rdi)
    51b2:	aa                   	stos   %al,%es:(%rdi)
    51b3:	aa                   	stos   %al,%es:(%rdi)
    51b4:	aa                   	stos   %al,%es:(%rdi)
    51b5:	aa                   	stos   %al,%es:(%rdi)
    51b6:	aa                   	stos   %al,%es:(%rdi)
    51b7:	aa                   	stos   %al,%es:(%rdi)
    51b8:	aa                   	stos   %al,%es:(%rdi)
    51b9:	aa                   	stos   %al,%es:(%rdi)
    51ba:	aa                   	stos   %al,%es:(%rdi)
    51bb:	aa                   	stos   %al,%es:(%rdi)
    51bc:	aa                   	stos   %al,%es:(%rdi)
    51bd:	aa                   	stos   %al,%es:(%rdi)
    51be:	aa                   	stos   %al,%es:(%rdi)
    51bf:	aa                   	stos   %al,%es:(%rdi)
    51c0:	aa                   	stos   %al,%es:(%rdi)
    51c1:	aa                   	stos   %al,%es:(%rdi)
    51c2:	aa                   	stos   %al,%es:(%rdi)
    51c3:	aa                   	stos   %al,%es:(%rdi)
    51c4:	aa                   	stos   %al,%es:(%rdi)
    51c5:	aa                   	stos   %al,%es:(%rdi)
    51c6:	aa                   	stos   %al,%es:(%rdi)
    51c7:	aa                   	stos   %al,%es:(%rdi)
    51c8:	aa                   	stos   %al,%es:(%rdi)
    51c9:	aa                   	stos   %al,%es:(%rdi)
    51ca:	aa                   	stos   %al,%es:(%rdi)
    51cb:	aa                   	stos   %al,%es:(%rdi)
    51cc:	aa                   	stos   %al,%es:(%rdi)
    51cd:	aa                   	stos   %al,%es:(%rdi)
    51ce:	aa                   	stos   %al,%es:(%rdi)
    51cf:	aa                   	stos   %al,%es:(%rdi)
    51d0:	aa                   	stos   %al,%es:(%rdi)
    51d1:	aa                   	stos   %al,%es:(%rdi)
    51d2:	aa                   	stos   %al,%es:(%rdi)
    51d3:	aa                   	stos   %al,%es:(%rdi)
    51d4:	aa                   	stos   %al,%es:(%rdi)
    51d5:	aa                   	stos   %al,%es:(%rdi)
    51d6:	aa                   	stos   %al,%es:(%rdi)
    51d7:	aa                   	stos   %al,%es:(%rdi)
    51d8:	aa                   	stos   %al,%es:(%rdi)
    51d9:	aa                   	stos   %al,%es:(%rdi)
    51da:	aa                   	stos   %al,%es:(%rdi)
    51db:	aa                   	stos   %al,%es:(%rdi)
    51dc:	aa                   	stos   %al,%es:(%rdi)
    51dd:	aa                   	stos   %al,%es:(%rdi)
    51de:	aa                   	stos   %al,%es:(%rdi)
    51df:	aa                   	stos   %al,%es:(%rdi)
    51e0:	aa                   	stos   %al,%es:(%rdi)
    51e1:	aa                   	stos   %al,%es:(%rdi)
    51e2:	aa                   	stos   %al,%es:(%rdi)
    51e3:	aa                   	stos   %al,%es:(%rdi)
    51e4:	aa                   	stos   %al,%es:(%rdi)
    51e5:	aa                   	stos   %al,%es:(%rdi)
    51e6:	aa                   	stos   %al,%es:(%rdi)
    51e7:	aa                   	stos   %al,%es:(%rdi)
    51e8:	aa                   	stos   %al,%es:(%rdi)
    51e9:	aa                   	stos   %al,%es:(%rdi)
    51ea:	aa                   	stos   %al,%es:(%rdi)
    51eb:	aa                   	stos   %al,%es:(%rdi)
    51ec:	aa                   	stos   %al,%es:(%rdi)
    51ed:	aa                   	stos   %al,%es:(%rdi)
    51ee:	aa                   	stos   %al,%es:(%rdi)
    51ef:	aa                   	stos   %al,%es:(%rdi)
    51f0:	aa                   	stos   %al,%es:(%rdi)
    51f1:	aa                   	stos   %al,%es:(%rdi)
    51f2:	aa                   	stos   %al,%es:(%rdi)
    51f3:	aa                   	stos   %al,%es:(%rdi)
    51f4:	aa                   	stos   %al,%es:(%rdi)
    51f5:	aa                   	stos   %al,%es:(%rdi)
    51f6:	aa                   	stos   %al,%es:(%rdi)
    51f7:	aa                   	stos   %al,%es:(%rdi)
    51f8:	aa                   	stos   %al,%es:(%rdi)
    51f9:	aa                   	stos   %al,%es:(%rdi)
    51fa:	aa                   	stos   %al,%es:(%rdi)
    51fb:	aa                   	stos   %al,%es:(%rdi)
    51fc:	aa                   	stos   %al,%es:(%rdi)
    51fd:	aa                   	stos   %al,%es:(%rdi)
    51fe:	aa                   	stos   %al,%es:(%rdi)
    51ff:	aa                   	stos   %al,%es:(%rdi)
    5200:	aa                   	stos   %al,%es:(%rdi)
    5201:	aa                   	stos   %al,%es:(%rdi)
    5202:	aa                   	stos   %al,%es:(%rdi)
    5203:	aa                   	stos   %al,%es:(%rdi)
    5204:	aa                   	stos   %al,%es:(%rdi)
    5205:	aa                   	stos   %al,%es:(%rdi)
    5206:	aa                   	stos   %al,%es:(%rdi)
    5207:	aa                   	stos   %al,%es:(%rdi)
    5208:	aa                   	stos   %al,%es:(%rdi)
    5209:	aa                   	stos   %al,%es:(%rdi)
    520a:	aa                   	stos   %al,%es:(%rdi)
    520b:	aa                   	stos   %al,%es:(%rdi)
    520c:	aa                   	stos   %al,%es:(%rdi)
    520d:	aa                   	stos   %al,%es:(%rdi)
    520e:	aa                   	stos   %al,%es:(%rdi)
    520f:	aa                   	stos   %al,%es:(%rdi)
    5210:	aa                   	stos   %al,%es:(%rdi)
    5211:	aa                   	stos   %al,%es:(%rdi)
    5212:	aa                   	stos   %al,%es:(%rdi)
    5213:	aa                   	stos   %al,%es:(%rdi)
    5214:	aa                   	stos   %al,%es:(%rdi)
    5215:	aa                   	stos   %al,%es:(%rdi)
    5216:	aa                   	stos   %al,%es:(%rdi)
    5217:	aa                   	stos   %al,%es:(%rdi)
    5218:	aa                   	stos   %al,%es:(%rdi)
    5219:	aa                   	stos   %al,%es:(%rdi)
    521a:	aa                   	stos   %al,%es:(%rdi)
    521b:	aa                   	stos   %al,%es:(%rdi)
    521c:	aa                   	stos   %al,%es:(%rdi)
    521d:	aa                   	stos   %al,%es:(%rdi)
    521e:	aa                   	stos   %al,%es:(%rdi)
    521f:	aa                   	stos   %al,%es:(%rdi)
    5220:	aa                   	stos   %al,%es:(%rdi)
    5221:	aa                   	stos   %al,%es:(%rdi)
    5222:	aa                   	stos   %al,%es:(%rdi)
    5223:	aa                   	stos   %al,%es:(%rdi)
    5224:	aa                   	stos   %al,%es:(%rdi)
    5225:	aa                   	stos   %al,%es:(%rdi)
    5226:	aa                   	stos   %al,%es:(%rdi)
    5227:	aa                   	stos   %al,%es:(%rdi)
    5228:	aa                   	stos   %al,%es:(%rdi)
    5229:	aa                   	stos   %al,%es:(%rdi)
    522a:	aa                   	stos   %al,%es:(%rdi)
    522b:	aa                   	stos   %al,%es:(%rdi)
    522c:	aa                   	stos   %al,%es:(%rdi)
    522d:	aa                   	stos   %al,%es:(%rdi)
    522e:	aa                   	stos   %al,%es:(%rdi)
    522f:	aa                   	stos   %al,%es:(%rdi)
    5230:	aa                   	stos   %al,%es:(%rdi)
    5231:	aa                   	stos   %al,%es:(%rdi)
    5232:	aa                   	stos   %al,%es:(%rdi)
    5233:	aa                   	stos   %al,%es:(%rdi)
    5234:	aa                   	stos   %al,%es:(%rdi)
    5235:	aa                   	stos   %al,%es:(%rdi)
    5236:	aa                   	stos   %al,%es:(%rdi)
    5237:	aa                   	stos   %al,%es:(%rdi)
    5238:	aa                   	stos   %al,%es:(%rdi)
    5239:	aa                   	stos   %al,%es:(%rdi)
    523a:	aa                   	stos   %al,%es:(%rdi)
    523b:	aa                   	stos   %al,%es:(%rdi)
    523c:	aa                   	stos   %al,%es:(%rdi)
    523d:	aa                   	stos   %al,%es:(%rdi)
    523e:	aa                   	stos   %al,%es:(%rdi)
    523f:	aa                   	stos   %al,%es:(%rdi)
    5240:	aa                   	stos   %al,%es:(%rdi)
    5241:	aa                   	stos   %al,%es:(%rdi)
    5242:	aa                   	stos   %al,%es:(%rdi)
    5243:	aa                   	stos   %al,%es:(%rdi)
    5244:	aa                   	stos   %al,%es:(%rdi)
    5245:	aa                   	stos   %al,%es:(%rdi)
    5246:	aa                   	stos   %al,%es:(%rdi)
    5247:	aa                   	stos   %al,%es:(%rdi)
    5248:	aa                   	stos   %al,%es:(%rdi)
    5249:	aa                   	stos   %al,%es:(%rdi)
    524a:	aa                   	stos   %al,%es:(%rdi)
    524b:	aa                   	stos   %al,%es:(%rdi)
    524c:	aa                   	stos   %al,%es:(%rdi)
    524d:	aa                   	stos   %al,%es:(%rdi)
    524e:	aa                   	stos   %al,%es:(%rdi)
    524f:	aa                   	stos   %al,%es:(%rdi)
    5250:	aa                   	stos   %al,%es:(%rdi)
    5251:	aa                   	stos   %al,%es:(%rdi)
    5252:	aa                   	stos   %al,%es:(%rdi)
    5253:	aa                   	stos   %al,%es:(%rdi)
    5254:	aa                   	stos   %al,%es:(%rdi)
    5255:	aa                   	stos   %al,%es:(%rdi)
    5256:	aa                   	stos   %al,%es:(%rdi)
    5257:	aa                   	stos   %al,%es:(%rdi)
    5258:	aa                   	stos   %al,%es:(%rdi)
    5259:	aa                   	stos   %al,%es:(%rdi)
    525a:	aa                   	stos   %al,%es:(%rdi)
    525b:	aa                   	stos   %al,%es:(%rdi)
    525c:	aa                   	stos   %al,%es:(%rdi)
    525d:	aa                   	stos   %al,%es:(%rdi)
    525e:	aa                   	stos   %al,%es:(%rdi)
    525f:	aa                   	stos   %al,%es:(%rdi)
    5260:	aa                   	stos   %al,%es:(%rdi)
    5261:	aa                   	stos   %al,%es:(%rdi)
    5262:	aa                   	stos   %al,%es:(%rdi)
    5263:	aa                   	stos   %al,%es:(%rdi)
    5264:	aa                   	stos   %al,%es:(%rdi)
    5265:	aa                   	stos   %al,%es:(%rdi)
    5266:	aa                   	stos   %al,%es:(%rdi)
    5267:	aa                   	stos   %al,%es:(%rdi)
    5268:	aa                   	stos   %al,%es:(%rdi)
    5269:	aa                   	stos   %al,%es:(%rdi)
    526a:	aa                   	stos   %al,%es:(%rdi)
    526b:	aa                   	stos   %al,%es:(%rdi)
    526c:	aa                   	stos   %al,%es:(%rdi)
    526d:	aa                   	stos   %al,%es:(%rdi)
    526e:	aa                   	stos   %al,%es:(%rdi)
    526f:	aa                   	stos   %al,%es:(%rdi)
    5270:	aa                   	stos   %al,%es:(%rdi)
    5271:	aa                   	stos   %al,%es:(%rdi)
    5272:	aa                   	stos   %al,%es:(%rdi)
    5273:	aa                   	stos   %al,%es:(%rdi)
    5274:	aa                   	stos   %al,%es:(%rdi)
    5275:	aa                   	stos   %al,%es:(%rdi)
    5276:	aa                   	stos   %al,%es:(%rdi)
    5277:	aa                   	stos   %al,%es:(%rdi)
    5278:	aa                   	stos   %al,%es:(%rdi)
    5279:	aa                   	stos   %al,%es:(%rdi)
    527a:	aa                   	stos   %al,%es:(%rdi)
    527b:	aa                   	stos   %al,%es:(%rdi)
    527c:	aa                   	stos   %al,%es:(%rdi)
    527d:	aa                   	stos   %al,%es:(%rdi)
    527e:	aa                   	stos   %al,%es:(%rdi)
    527f:	aa                   	stos   %al,%es:(%rdi)
    5280:	aa                   	stos   %al,%es:(%rdi)
    5281:	aa                   	stos   %al,%es:(%rdi)
    5282:	aa                   	stos   %al,%es:(%rdi)
    5283:	aa                   	stos   %al,%es:(%rdi)
    5284:	aa                   	stos   %al,%es:(%rdi)
    5285:	aa                   	stos   %al,%es:(%rdi)
    5286:	aa                   	stos   %al,%es:(%rdi)
    5287:	aa                   	stos   %al,%es:(%rdi)
    5288:	aa                   	stos   %al,%es:(%rdi)
    5289:	aa                   	stos   %al,%es:(%rdi)
    528a:	aa                   	stos   %al,%es:(%rdi)
    528b:	aa                   	stos   %al,%es:(%rdi)
    528c:	aa                   	stos   %al,%es:(%rdi)
    528d:	aa                   	stos   %al,%es:(%rdi)
    528e:	aa                   	stos   %al,%es:(%rdi)
    528f:	aa                   	stos   %al,%es:(%rdi)
    5290:	aa                   	stos   %al,%es:(%rdi)
    5291:	aa                   	stos   %al,%es:(%rdi)
    5292:	aa                   	stos   %al,%es:(%rdi)
    5293:	aa                   	stos   %al,%es:(%rdi)
    5294:	aa                   	stos   %al,%es:(%rdi)
    5295:	aa                   	stos   %al,%es:(%rdi)
    5296:	aa                   	stos   %al,%es:(%rdi)
    5297:	aa                   	stos   %al,%es:(%rdi)
    5298:	aa                   	stos   %al,%es:(%rdi)
    5299:	aa                   	stos   %al,%es:(%rdi)
    529a:	aa                   	stos   %al,%es:(%rdi)
    529b:	aa                   	stos   %al,%es:(%rdi)
    529c:	aa                   	stos   %al,%es:(%rdi)
    529d:	aa                   	stos   %al,%es:(%rdi)
    529e:	aa                   	stos   %al,%es:(%rdi)
    529f:	aa                   	stos   %al,%es:(%rdi)
    52a0:	aa                   	stos   %al,%es:(%rdi)
    52a1:	aa                   	stos   %al,%es:(%rdi)
    52a2:	aa                   	stos   %al,%es:(%rdi)
    52a3:	aa                   	stos   %al,%es:(%rdi)
    52a4:	aa                   	stos   %al,%es:(%rdi)
    52a5:	aa                   	stos   %al,%es:(%rdi)
    52a6:	aa                   	stos   %al,%es:(%rdi)
    52a7:	aa                   	stos   %al,%es:(%rdi)
    52a8:	aa                   	stos   %al,%es:(%rdi)
    52a9:	aa                   	stos   %al,%es:(%rdi)
    52aa:	aa                   	stos   %al,%es:(%rdi)
    52ab:	aa                   	stos   %al,%es:(%rdi)
    52ac:	aa                   	stos   %al,%es:(%rdi)
    52ad:	aa                   	stos   %al,%es:(%rdi)
    52ae:	aa                   	stos   %al,%es:(%rdi)
    52af:	aa                   	stos   %al,%es:(%rdi)
    52b0:	aa                   	stos   %al,%es:(%rdi)
    52b1:	aa                   	stos   %al,%es:(%rdi)
    52b2:	aa                   	stos   %al,%es:(%rdi)
    52b3:	aa                   	stos   %al,%es:(%rdi)
    52b4:	aa                   	stos   %al,%es:(%rdi)
    52b5:	aa                   	stos   %al,%es:(%rdi)
    52b6:	aa                   	stos   %al,%es:(%rdi)
    52b7:	aa                   	stos   %al,%es:(%rdi)
    52b8:	aa                   	stos   %al,%es:(%rdi)
    52b9:	aa                   	stos   %al,%es:(%rdi)
    52ba:	aa                   	stos   %al,%es:(%rdi)
    52bb:	aa                   	stos   %al,%es:(%rdi)
    52bc:	aa                   	stos   %al,%es:(%rdi)
    52bd:	aa                   	stos   %al,%es:(%rdi)
    52be:	aa                   	stos   %al,%es:(%rdi)
    52bf:	aa                   	stos   %al,%es:(%rdi)
    52c0:	aa                   	stos   %al,%es:(%rdi)
    52c1:	aa                   	stos   %al,%es:(%rdi)
    52c2:	aa                   	stos   %al,%es:(%rdi)
    52c3:	aa                   	stos   %al,%es:(%rdi)
    52c4:	aa                   	stos   %al,%es:(%rdi)
    52c5:	aa                   	stos   %al,%es:(%rdi)
    52c6:	aa                   	stos   %al,%es:(%rdi)
    52c7:	aa                   	stos   %al,%es:(%rdi)
    52c8:	aa                   	stos   %al,%es:(%rdi)
    52c9:	aa                   	stos   %al,%es:(%rdi)
    52ca:	aa                   	stos   %al,%es:(%rdi)
    52cb:	aa                   	stos   %al,%es:(%rdi)
    52cc:	aa                   	stos   %al,%es:(%rdi)
    52cd:	aa                   	stos   %al,%es:(%rdi)
    52ce:	aa                   	stos   %al,%es:(%rdi)
    52cf:	aa                   	stos   %al,%es:(%rdi)
    52d0:	aa                   	stos   %al,%es:(%rdi)
    52d1:	aa                   	stos   %al,%es:(%rdi)
    52d2:	aa                   	stos   %al,%es:(%rdi)
    52d3:	aa                   	stos   %al,%es:(%rdi)
    52d4:	aa                   	stos   %al,%es:(%rdi)
    52d5:	aa                   	stos   %al,%es:(%rdi)
    52d6:	aa                   	stos   %al,%es:(%rdi)
    52d7:	aa                   	stos   %al,%es:(%rdi)
    52d8:	aa                   	stos   %al,%es:(%rdi)
    52d9:	aa                   	stos   %al,%es:(%rdi)
    52da:	aa                   	stos   %al,%es:(%rdi)
    52db:	aa                   	stos   %al,%es:(%rdi)
    52dc:	aa                   	stos   %al,%es:(%rdi)
    52dd:	aa                   	stos   %al,%es:(%rdi)
    52de:	aa                   	stos   %al,%es:(%rdi)
    52df:	aa                   	stos   %al,%es:(%rdi)
    52e0:	aa                   	stos   %al,%es:(%rdi)
    52e1:	aa                   	stos   %al,%es:(%rdi)
    52e2:	aa                   	stos   %al,%es:(%rdi)
    52e3:	aa                   	stos   %al,%es:(%rdi)
    52e4:	aa                   	stos   %al,%es:(%rdi)
    52e5:	aa                   	stos   %al,%es:(%rdi)
    52e6:	aa                   	stos   %al,%es:(%rdi)
    52e7:	aa                   	stos   %al,%es:(%rdi)
    52e8:	aa                   	stos   %al,%es:(%rdi)
    52e9:	aa                   	stos   %al,%es:(%rdi)
    52ea:	aa                   	stos   %al,%es:(%rdi)
    52eb:	aa                   	stos   %al,%es:(%rdi)
    52ec:	aa                   	stos   %al,%es:(%rdi)
    52ed:	aa                   	stos   %al,%es:(%rdi)
    52ee:	aa                   	stos   %al,%es:(%rdi)
    52ef:	aa                   	stos   %al,%es:(%rdi)
    52f0:	aa                   	stos   %al,%es:(%rdi)
    52f1:	aa                   	stos   %al,%es:(%rdi)
    52f2:	aa                   	stos   %al,%es:(%rdi)
    52f3:	aa                   	stos   %al,%es:(%rdi)
    52f4:	aa                   	stos   %al,%es:(%rdi)
    52f5:	aa                   	stos   %al,%es:(%rdi)
    52f6:	aa                   	stos   %al,%es:(%rdi)
    52f7:	aa                   	stos   %al,%es:(%rdi)
    52f8:	aa                   	stos   %al,%es:(%rdi)
    52f9:	aa                   	stos   %al,%es:(%rdi)
    52fa:	aa                   	stos   %al,%es:(%rdi)
    52fb:	aa                   	stos   %al,%es:(%rdi)
    52fc:	aa                   	stos   %al,%es:(%rdi)
    52fd:	aa                   	stos   %al,%es:(%rdi)
    52fe:	aa                   	stos   %al,%es:(%rdi)
    52ff:	aa                   	stos   %al,%es:(%rdi)
    5300:	aa                   	stos   %al,%es:(%rdi)
    5301:	aa                   	stos   %al,%es:(%rdi)
    5302:	aa                   	stos   %al,%es:(%rdi)
    5303:	aa                   	stos   %al,%es:(%rdi)
    5304:	aa                   	stos   %al,%es:(%rdi)
    5305:	aa                   	stos   %al,%es:(%rdi)
    5306:	aa                   	stos   %al,%es:(%rdi)
    5307:	aa                   	stos   %al,%es:(%rdi)
    5308:	aa                   	stos   %al,%es:(%rdi)
    5309:	aa                   	stos   %al,%es:(%rdi)
    530a:	aa                   	stos   %al,%es:(%rdi)
    530b:	aa                   	stos   %al,%es:(%rdi)
    530c:	aa                   	stos   %al,%es:(%rdi)
    530d:	aa                   	stos   %al,%es:(%rdi)
    530e:	aa                   	stos   %al,%es:(%rdi)
    530f:	aa                   	stos   %al,%es:(%rdi)
    5310:	aa                   	stos   %al,%es:(%rdi)
    5311:	aa                   	stos   %al,%es:(%rdi)
    5312:	aa                   	stos   %al,%es:(%rdi)
    5313:	aa                   	stos   %al,%es:(%rdi)
    5314:	aa                   	stos   %al,%es:(%rdi)
    5315:	aa                   	stos   %al,%es:(%rdi)
    5316:	aa                   	stos   %al,%es:(%rdi)
    5317:	aa                   	stos   %al,%es:(%rdi)
    5318:	aa                   	stos   %al,%es:(%rdi)
    5319:	aa                   	stos   %al,%es:(%rdi)
    531a:	aa                   	stos   %al,%es:(%rdi)
    531b:	aa                   	stos   %al,%es:(%rdi)
    531c:	aa                   	stos   %al,%es:(%rdi)
    531d:	aa                   	stos   %al,%es:(%rdi)
    531e:	aa                   	stos   %al,%es:(%rdi)
    531f:	aa                   	stos   %al,%es:(%rdi)
    5320:	aa                   	stos   %al,%es:(%rdi)
    5321:	aa                   	stos   %al,%es:(%rdi)
    5322:	aa                   	stos   %al,%es:(%rdi)
    5323:	aa                   	stos   %al,%es:(%rdi)
    5324:	aa                   	stos   %al,%es:(%rdi)
    5325:	aa                   	stos   %al,%es:(%rdi)
    5326:	aa                   	stos   %al,%es:(%rdi)
    5327:	aa                   	stos   %al,%es:(%rdi)
    5328:	aa                   	stos   %al,%es:(%rdi)
    5329:	aa                   	stos   %al,%es:(%rdi)
    532a:	aa                   	stos   %al,%es:(%rdi)
    532b:	aa                   	stos   %al,%es:(%rdi)
    532c:	aa                   	stos   %al,%es:(%rdi)
    532d:	aa                   	stos   %al,%es:(%rdi)
    532e:	aa                   	stos   %al,%es:(%rdi)
    532f:	aa                   	stos   %al,%es:(%rdi)
    5330:	aa                   	stos   %al,%es:(%rdi)
    5331:	aa                   	stos   %al,%es:(%rdi)
    5332:	aa                   	stos   %al,%es:(%rdi)
    5333:	aa                   	stos   %al,%es:(%rdi)
    5334:	aa                   	stos   %al,%es:(%rdi)
    5335:	aa                   	stos   %al,%es:(%rdi)
    5336:	aa                   	stos   %al,%es:(%rdi)
    5337:	aa                   	stos   %al,%es:(%rdi)
    5338:	aa                   	stos   %al,%es:(%rdi)
    5339:	aa                   	stos   %al,%es:(%rdi)
    533a:	aa                   	stos   %al,%es:(%rdi)
    533b:	aa                   	stos   %al,%es:(%rdi)
    533c:	aa                   	stos   %al,%es:(%rdi)
    533d:	aa                   	stos   %al,%es:(%rdi)
    533e:	aa                   	stos   %al,%es:(%rdi)
    533f:	aa                   	stos   %al,%es:(%rdi)
    5340:	aa                   	stos   %al,%es:(%rdi)
    5341:	aa                   	stos   %al,%es:(%rdi)
    5342:	aa                   	stos   %al,%es:(%rdi)
    5343:	aa                   	stos   %al,%es:(%rdi)
    5344:	aa                   	stos   %al,%es:(%rdi)
    5345:	aa                   	stos   %al,%es:(%rdi)
    5346:	aa                   	stos   %al,%es:(%rdi)
    5347:	aa                   	stos   %al,%es:(%rdi)
    5348:	aa                   	stos   %al,%es:(%rdi)
    5349:	aa                   	stos   %al,%es:(%rdi)
    534a:	aa                   	stos   %al,%es:(%rdi)
    534b:	aa                   	stos   %al,%es:(%rdi)
    534c:	aa                   	stos   %al,%es:(%rdi)
    534d:	aa                   	stos   %al,%es:(%rdi)
    534e:	aa                   	stos   %al,%es:(%rdi)
    534f:	aa                   	stos   %al,%es:(%rdi)
    5350:	aa                   	stos   %al,%es:(%rdi)
    5351:	aa                   	stos   %al,%es:(%rdi)
    5352:	aa                   	stos   %al,%es:(%rdi)
    5353:	aa                   	stos   %al,%es:(%rdi)
    5354:	aa                   	stos   %al,%es:(%rdi)
    5355:	aa                   	stos   %al,%es:(%rdi)
    5356:	aa                   	stos   %al,%es:(%rdi)
    5357:	aa                   	stos   %al,%es:(%rdi)
    5358:	aa                   	stos   %al,%es:(%rdi)
    5359:	aa                   	stos   %al,%es:(%rdi)
    535a:	aa                   	stos   %al,%es:(%rdi)
    535b:	aa                   	stos   %al,%es:(%rdi)
    535c:	aa                   	stos   %al,%es:(%rdi)
    535d:	aa                   	stos   %al,%es:(%rdi)
    535e:	aa                   	stos   %al,%es:(%rdi)
    535f:	aa                   	stos   %al,%es:(%rdi)
    5360:	aa                   	stos   %al,%es:(%rdi)
    5361:	aa                   	stos   %al,%es:(%rdi)
    5362:	aa                   	stos   %al,%es:(%rdi)
    5363:	aa                   	stos   %al,%es:(%rdi)
    5364:	aa                   	stos   %al,%es:(%rdi)
    5365:	aa                   	stos   %al,%es:(%rdi)
    5366:	aa                   	stos   %al,%es:(%rdi)
    5367:	aa                   	stos   %al,%es:(%rdi)
    5368:	aa                   	stos   %al,%es:(%rdi)
    5369:	aa                   	stos   %al,%es:(%rdi)
    536a:	aa                   	stos   %al,%es:(%rdi)
    536b:	aa                   	stos   %al,%es:(%rdi)
    536c:	aa                   	stos   %al,%es:(%rdi)
    536d:	aa                   	stos   %al,%es:(%rdi)
    536e:	aa                   	stos   %al,%es:(%rdi)
    536f:	aa                   	stos   %al,%es:(%rdi)
    5370:	aa                   	stos   %al,%es:(%rdi)
    5371:	aa                   	stos   %al,%es:(%rdi)
    5372:	aa                   	stos   %al,%es:(%rdi)
    5373:	aa                   	stos   %al,%es:(%rdi)
    5374:	aa                   	stos   %al,%es:(%rdi)
    5375:	aa                   	stos   %al,%es:(%rdi)
    5376:	aa                   	stos   %al,%es:(%rdi)
    5377:	aa                   	stos   %al,%es:(%rdi)
    5378:	aa                   	stos   %al,%es:(%rdi)
    5379:	aa                   	stos   %al,%es:(%rdi)
    537a:	aa                   	stos   %al,%es:(%rdi)
    537b:	aa                   	stos   %al,%es:(%rdi)
    537c:	aa                   	stos   %al,%es:(%rdi)
    537d:	aa                   	stos   %al,%es:(%rdi)
    537e:	aa                   	stos   %al,%es:(%rdi)
    537f:	aa                   	stos   %al,%es:(%rdi)
    5380:	aa                   	stos   %al,%es:(%rdi)
    5381:	aa                   	stos   %al,%es:(%rdi)
    5382:	aa                   	stos   %al,%es:(%rdi)
    5383:	aa                   	stos   %al,%es:(%rdi)
    5384:	aa                   	stos   %al,%es:(%rdi)
    5385:	aa                   	stos   %al,%es:(%rdi)
    5386:	aa                   	stos   %al,%es:(%rdi)
    5387:	aa                   	stos   %al,%es:(%rdi)
    5388:	aa                   	stos   %al,%es:(%rdi)
    5389:	aa                   	stos   %al,%es:(%rdi)
    538a:	aa                   	stos   %al,%es:(%rdi)
    538b:	aa                   	stos   %al,%es:(%rdi)
    538c:	aa                   	stos   %al,%es:(%rdi)
    538d:	aa                   	stos   %al,%es:(%rdi)
    538e:	aa                   	stos   %al,%es:(%rdi)
    538f:	aa                   	stos   %al,%es:(%rdi)
    5390:	aa                   	stos   %al,%es:(%rdi)
    5391:	aa                   	stos   %al,%es:(%rdi)
    5392:	aa                   	stos   %al,%es:(%rdi)
    5393:	aa                   	stos   %al,%es:(%rdi)
    5394:	aa                   	stos   %al,%es:(%rdi)
    5395:	aa                   	stos   %al,%es:(%rdi)
    5396:	aa                   	stos   %al,%es:(%rdi)
    5397:	aa                   	stos   %al,%es:(%rdi)
    5398:	aa                   	stos   %al,%es:(%rdi)
    5399:	aa                   	stos   %al,%es:(%rdi)
    539a:	aa                   	stos   %al,%es:(%rdi)
    539b:	aa                   	stos   %al,%es:(%rdi)
    539c:	aa                   	stos   %al,%es:(%rdi)
    539d:	aa                   	stos   %al,%es:(%rdi)
    539e:	aa                   	stos   %al,%es:(%rdi)
    539f:	aa                   	stos   %al,%es:(%rdi)
    53a0:	aa                   	stos   %al,%es:(%rdi)
    53a1:	aa                   	stos   %al,%es:(%rdi)
    53a2:	aa                   	stos   %al,%es:(%rdi)
    53a3:	aa                   	stos   %al,%es:(%rdi)
    53a4:	aa                   	stos   %al,%es:(%rdi)
    53a5:	aa                   	stos   %al,%es:(%rdi)
    53a6:	aa                   	stos   %al,%es:(%rdi)
    53a7:	aa                   	stos   %al,%es:(%rdi)
    53a8:	aa                   	stos   %al,%es:(%rdi)
    53a9:	aa                   	stos   %al,%es:(%rdi)
    53aa:	aa                   	stos   %al,%es:(%rdi)
    53ab:	aa                   	stos   %al,%es:(%rdi)
    53ac:	aa                   	stos   %al,%es:(%rdi)
    53ad:	aa                   	stos   %al,%es:(%rdi)
    53ae:	aa                   	stos   %al,%es:(%rdi)
    53af:	aa                   	stos   %al,%es:(%rdi)
    53b0:	aa                   	stos   %al,%es:(%rdi)
    53b1:	aa                   	stos   %al,%es:(%rdi)
    53b2:	aa                   	stos   %al,%es:(%rdi)
    53b3:	aa                   	stos   %al,%es:(%rdi)
    53b4:	aa                   	stos   %al,%es:(%rdi)
    53b5:	aa                   	stos   %al,%es:(%rdi)
    53b6:	aa                   	stos   %al,%es:(%rdi)
    53b7:	aa                   	stos   %al,%es:(%rdi)
    53b8:	aa                   	stos   %al,%es:(%rdi)
    53b9:	aa                   	stos   %al,%es:(%rdi)
    53ba:	aa                   	stos   %al,%es:(%rdi)
    53bb:	aa                   	stos   %al,%es:(%rdi)
    53bc:	aa                   	stos   %al,%es:(%rdi)
    53bd:	aa                   	stos   %al,%es:(%rdi)
    53be:	aa                   	stos   %al,%es:(%rdi)
    53bf:	aa                   	stos   %al,%es:(%rdi)
    53c0:	aa                   	stos   %al,%es:(%rdi)
    53c1:	aa                   	stos   %al,%es:(%rdi)
    53c2:	aa                   	stos   %al,%es:(%rdi)
    53c3:	aa                   	stos   %al,%es:(%rdi)
    53c4:	aa                   	stos   %al,%es:(%rdi)
    53c5:	aa                   	stos   %al,%es:(%rdi)
    53c6:	aa                   	stos   %al,%es:(%rdi)
    53c7:	aa                   	stos   %al,%es:(%rdi)
    53c8:	aa                   	stos   %al,%es:(%rdi)
    53c9:	aa                   	stos   %al,%es:(%rdi)
    53ca:	aa                   	stos   %al,%es:(%rdi)
    53cb:	aa                   	stos   %al,%es:(%rdi)
    53cc:	aa                   	stos   %al,%es:(%rdi)
    53cd:	aa                   	stos   %al,%es:(%rdi)
    53ce:	aa                   	stos   %al,%es:(%rdi)
    53cf:	aa                   	stos   %al,%es:(%rdi)
    53d0:	aa                   	stos   %al,%es:(%rdi)
    53d1:	aa                   	stos   %al,%es:(%rdi)
    53d2:	aa                   	stos   %al,%es:(%rdi)
    53d3:	aa                   	stos   %al,%es:(%rdi)
    53d4:	aa                   	stos   %al,%es:(%rdi)
    53d5:	aa                   	stos   %al,%es:(%rdi)
    53d6:	aa                   	stos   %al,%es:(%rdi)
    53d7:	aa                   	stos   %al,%es:(%rdi)
    53d8:	aa                   	stos   %al,%es:(%rdi)
    53d9:	aa                   	stos   %al,%es:(%rdi)
    53da:	aa                   	stos   %al,%es:(%rdi)
    53db:	aa                   	stos   %al,%es:(%rdi)
    53dc:	aa                   	stos   %al,%es:(%rdi)
    53dd:	aa                   	stos   %al,%es:(%rdi)
    53de:	aa                   	stos   %al,%es:(%rdi)
    53df:	aa                   	stos   %al,%es:(%rdi)
    53e0:	aa                   	stos   %al,%es:(%rdi)
    53e1:	aa                   	stos   %al,%es:(%rdi)
    53e2:	aa                   	stos   %al,%es:(%rdi)
    53e3:	aa                   	stos   %al,%es:(%rdi)
    53e4:	aa                   	stos   %al,%es:(%rdi)
    53e5:	aa                   	stos   %al,%es:(%rdi)
    53e6:	aa                   	stos   %al,%es:(%rdi)
    53e7:	aa                   	stos   %al,%es:(%rdi)
    53e8:	aa                   	stos   %al,%es:(%rdi)
    53e9:	aa                   	stos   %al,%es:(%rdi)
    53ea:	aa                   	stos   %al,%es:(%rdi)
    53eb:	aa                   	stos   %al,%es:(%rdi)
    53ec:	aa                   	stos   %al,%es:(%rdi)
    53ed:	aa                   	stos   %al,%es:(%rdi)
    53ee:	aa                   	stos   %al,%es:(%rdi)
    53ef:	aa                   	stos   %al,%es:(%rdi)
    53f0:	aa                   	stos   %al,%es:(%rdi)
    53f1:	aa                   	stos   %al,%es:(%rdi)
    53f2:	aa                   	stos   %al,%es:(%rdi)
    53f3:	aa                   	stos   %al,%es:(%rdi)
    53f4:	aa                   	stos   %al,%es:(%rdi)
    53f5:	aa                   	stos   %al,%es:(%rdi)
    53f6:	aa                   	stos   %al,%es:(%rdi)
    53f7:	aa                   	stos   %al,%es:(%rdi)
    53f8:	aa                   	stos   %al,%es:(%rdi)
    53f9:	aa                   	stos   %al,%es:(%rdi)
    53fa:	aa                   	stos   %al,%es:(%rdi)
    53fb:	aa                   	stos   %al,%es:(%rdi)
    53fc:	aa                   	stos   %al,%es:(%rdi)
    53fd:	aa                   	stos   %al,%es:(%rdi)
    53fe:	aa                   	stos   %al,%es:(%rdi)
    53ff:	aa                   	stos   %al,%es:(%rdi)
    5400:	aa                   	stos   %al,%es:(%rdi)
    5401:	aa                   	stos   %al,%es:(%rdi)
    5402:	aa                   	stos   %al,%es:(%rdi)
    5403:	aa                   	stos   %al,%es:(%rdi)
    5404:	aa                   	stos   %al,%es:(%rdi)
    5405:	aa                   	stos   %al,%es:(%rdi)
    5406:	aa                   	stos   %al,%es:(%rdi)
    5407:	aa                   	stos   %al,%es:(%rdi)
    5408:	aa                   	stos   %al,%es:(%rdi)
    5409:	aa                   	stos   %al,%es:(%rdi)
    540a:	aa                   	stos   %al,%es:(%rdi)
    540b:	aa                   	stos   %al,%es:(%rdi)
    540c:	aa                   	stos   %al,%es:(%rdi)
    540d:	aa                   	stos   %al,%es:(%rdi)
    540e:	aa                   	stos   %al,%es:(%rdi)
    540f:	aa                   	stos   %al,%es:(%rdi)
    5410:	aa                   	stos   %al,%es:(%rdi)
    5411:	aa                   	stos   %al,%es:(%rdi)
    5412:	aa                   	stos   %al,%es:(%rdi)
    5413:	aa                   	stos   %al,%es:(%rdi)
    5414:	aa                   	stos   %al,%es:(%rdi)
    5415:	aa                   	stos   %al,%es:(%rdi)
    5416:	aa                   	stos   %al,%es:(%rdi)
    5417:	aa                   	stos   %al,%es:(%rdi)
    5418:	aa                   	stos   %al,%es:(%rdi)
    5419:	aa                   	stos   %al,%es:(%rdi)
    541a:	aa                   	stos   %al,%es:(%rdi)
    541b:	aa                   	stos   %al,%es:(%rdi)
    541c:	aa                   	stos   %al,%es:(%rdi)
    541d:	aa                   	stos   %al,%es:(%rdi)
    541e:	aa                   	stos   %al,%es:(%rdi)
    541f:	aa                   	stos   %al,%es:(%rdi)
    5420:	aa                   	stos   %al,%es:(%rdi)
    5421:	aa                   	stos   %al,%es:(%rdi)
    5422:	aa                   	stos   %al,%es:(%rdi)
    5423:	aa                   	stos   %al,%es:(%rdi)
    5424:	aa                   	stos   %al,%es:(%rdi)
    5425:	aa                   	stos   %al,%es:(%rdi)
    5426:	aa                   	stos   %al,%es:(%rdi)
    5427:	aa                   	stos   %al,%es:(%rdi)
    5428:	aa                   	stos   %al,%es:(%rdi)
    5429:	aa                   	stos   %al,%es:(%rdi)
    542a:	aa                   	stos   %al,%es:(%rdi)
    542b:	aa                   	stos   %al,%es:(%rdi)
    542c:	aa                   	stos   %al,%es:(%rdi)
    542d:	aa                   	stos   %al,%es:(%rdi)
    542e:	aa                   	stos   %al,%es:(%rdi)
    542f:	aa                   	stos   %al,%es:(%rdi)
    5430:	aa                   	stos   %al,%es:(%rdi)
    5431:	aa                   	stos   %al,%es:(%rdi)
    5432:	aa                   	stos   %al,%es:(%rdi)
    5433:	aa                   	stos   %al,%es:(%rdi)
    5434:	aa                   	stos   %al,%es:(%rdi)
    5435:	aa                   	stos   %al,%es:(%rdi)
    5436:	aa                   	stos   %al,%es:(%rdi)
    5437:	aa                   	stos   %al,%es:(%rdi)
    5438:	aa                   	stos   %al,%es:(%rdi)
    5439:	aa                   	stos   %al,%es:(%rdi)
    543a:	aa                   	stos   %al,%es:(%rdi)
    543b:	aa                   	stos   %al,%es:(%rdi)
    543c:	aa                   	stos   %al,%es:(%rdi)
    543d:	aa                   	stos   %al,%es:(%rdi)
    543e:	aa                   	stos   %al,%es:(%rdi)
    543f:	aa                   	stos   %al,%es:(%rdi)
    5440:	aa                   	stos   %al,%es:(%rdi)
    5441:	aa                   	stos   %al,%es:(%rdi)
    5442:	aa                   	stos   %al,%es:(%rdi)
    5443:	aa                   	stos   %al,%es:(%rdi)
    5444:	aa                   	stos   %al,%es:(%rdi)
    5445:	aa                   	stos   %al,%es:(%rdi)
    5446:	aa                   	stos   %al,%es:(%rdi)
    5447:	aa                   	stos   %al,%es:(%rdi)
    5448:	aa                   	stos   %al,%es:(%rdi)
    5449:	aa                   	stos   %al,%es:(%rdi)
    544a:	aa                   	stos   %al,%es:(%rdi)
    544b:	aa                   	stos   %al,%es:(%rdi)
    544c:	aa                   	stos   %al,%es:(%rdi)
    544d:	aa                   	stos   %al,%es:(%rdi)
    544e:	aa                   	stos   %al,%es:(%rdi)
    544f:	aa                   	stos   %al,%es:(%rdi)
    5450:	aa                   	stos   %al,%es:(%rdi)
    5451:	aa                   	stos   %al,%es:(%rdi)
    5452:	aa                   	stos   %al,%es:(%rdi)
    5453:	aa                   	stos   %al,%es:(%rdi)
    5454:	aa                   	stos   %al,%es:(%rdi)
    5455:	aa                   	stos   %al,%es:(%rdi)
    5456:	aa                   	stos   %al,%es:(%rdi)
    5457:	aa                   	stos   %al,%es:(%rdi)
    5458:	aa                   	stos   %al,%es:(%rdi)
    5459:	aa                   	stos   %al,%es:(%rdi)
    545a:	aa                   	stos   %al,%es:(%rdi)
    545b:	aa                   	stos   %al,%es:(%rdi)
    545c:	aa                   	stos   %al,%es:(%rdi)
    545d:	aa                   	stos   %al,%es:(%rdi)
    545e:	aa                   	stos   %al,%es:(%rdi)
    545f:	aa                   	stos   %al,%es:(%rdi)
    5460:	aa                   	stos   %al,%es:(%rdi)
    5461:	aa                   	stos   %al,%es:(%rdi)
    5462:	aa                   	stos   %al,%es:(%rdi)
    5463:	aa                   	stos   %al,%es:(%rdi)
    5464:	aa                   	stos   %al,%es:(%rdi)
    5465:	aa                   	stos   %al,%es:(%rdi)
    5466:	aa                   	stos   %al,%es:(%rdi)
    5467:	aa                   	stos   %al,%es:(%rdi)
    5468:	aa                   	stos   %al,%es:(%rdi)
    5469:	aa                   	stos   %al,%es:(%rdi)
    546a:	aa                   	stos   %al,%es:(%rdi)
    546b:	aa                   	stos   %al,%es:(%rdi)
    546c:	aa                   	stos   %al,%es:(%rdi)
    546d:	aa                   	stos   %al,%es:(%rdi)
    546e:	aa                   	stos   %al,%es:(%rdi)
    546f:	aa                   	stos   %al,%es:(%rdi)
    5470:	aa                   	stos   %al,%es:(%rdi)
    5471:	aa                   	stos   %al,%es:(%rdi)
    5472:	aa                   	stos   %al,%es:(%rdi)
    5473:	aa                   	stos   %al,%es:(%rdi)
    5474:	aa                   	stos   %al,%es:(%rdi)
    5475:	aa                   	stos   %al,%es:(%rdi)
    5476:	aa                   	stos   %al,%es:(%rdi)
    5477:	aa                   	stos   %al,%es:(%rdi)
    5478:	aa                   	stos   %al,%es:(%rdi)
    5479:	aa                   	stos   %al,%es:(%rdi)
    547a:	aa                   	stos   %al,%es:(%rdi)
    547b:	aa                   	stos   %al,%es:(%rdi)
    547c:	aa                   	stos   %al,%es:(%rdi)
    547d:	aa                   	stos   %al,%es:(%rdi)
    547e:	aa                   	stos   %al,%es:(%rdi)
    547f:	aa                   	stos   %al,%es:(%rdi)
    5480:	aa                   	stos   %al,%es:(%rdi)
    5481:	aa                   	stos   %al,%es:(%rdi)
    5482:	aa                   	stos   %al,%es:(%rdi)
    5483:	aa                   	stos   %al,%es:(%rdi)
    5484:	aa                   	stos   %al,%es:(%rdi)
    5485:	aa                   	stos   %al,%es:(%rdi)
    5486:	aa                   	stos   %al,%es:(%rdi)
    5487:	aa                   	stos   %al,%es:(%rdi)
    5488:	aa                   	stos   %al,%es:(%rdi)
    5489:	aa                   	stos   %al,%es:(%rdi)
    548a:	aa                   	stos   %al,%es:(%rdi)
    548b:	aa                   	stos   %al,%es:(%rdi)
    548c:	aa                   	stos   %al,%es:(%rdi)
    548d:	aa                   	stos   %al,%es:(%rdi)
    548e:	aa                   	stos   %al,%es:(%rdi)
    548f:	aa                   	stos   %al,%es:(%rdi)
    5490:	aa                   	stos   %al,%es:(%rdi)
    5491:	aa                   	stos   %al,%es:(%rdi)
    5492:	aa                   	stos   %al,%es:(%rdi)
    5493:	aa                   	stos   %al,%es:(%rdi)
    5494:	aa                   	stos   %al,%es:(%rdi)
    5495:	aa                   	stos   %al,%es:(%rdi)
    5496:	aa                   	stos   %al,%es:(%rdi)
    5497:	aa                   	stos   %al,%es:(%rdi)
    5498:	aa                   	stos   %al,%es:(%rdi)
    5499:	aa                   	stos   %al,%es:(%rdi)
    549a:	aa                   	stos   %al,%es:(%rdi)
    549b:	aa                   	stos   %al,%es:(%rdi)
    549c:	aa                   	stos   %al,%es:(%rdi)
    549d:	aa                   	stos   %al,%es:(%rdi)
    549e:	aa                   	stos   %al,%es:(%rdi)
    549f:	aa                   	stos   %al,%es:(%rdi)
    54a0:	aa                   	stos   %al,%es:(%rdi)
    54a1:	aa                   	stos   %al,%es:(%rdi)
    54a2:	aa                   	stos   %al,%es:(%rdi)
    54a3:	aa                   	stos   %al,%es:(%rdi)
    54a4:	aa                   	stos   %al,%es:(%rdi)
    54a5:	aa                   	stos   %al,%es:(%rdi)
    54a6:	aa                   	stos   %al,%es:(%rdi)
    54a7:	aa                   	stos   %al,%es:(%rdi)
    54a8:	aa                   	stos   %al,%es:(%rdi)
    54a9:	aa                   	stos   %al,%es:(%rdi)
    54aa:	aa                   	stos   %al,%es:(%rdi)
    54ab:	aa                   	stos   %al,%es:(%rdi)
    54ac:	aa                   	stos   %al,%es:(%rdi)
    54ad:	aa                   	stos   %al,%es:(%rdi)
    54ae:	aa                   	stos   %al,%es:(%rdi)
    54af:	aa                   	stos   %al,%es:(%rdi)
    54b0:	aa                   	stos   %al,%es:(%rdi)
    54b1:	aa                   	stos   %al,%es:(%rdi)
    54b2:	aa                   	stos   %al,%es:(%rdi)
    54b3:	aa                   	stos   %al,%es:(%rdi)
    54b4:	aa                   	stos   %al,%es:(%rdi)
    54b5:	aa                   	stos   %al,%es:(%rdi)
    54b6:	aa                   	stos   %al,%es:(%rdi)
    54b7:	aa                   	stos   %al,%es:(%rdi)
    54b8:	aa                   	stos   %al,%es:(%rdi)
    54b9:	aa                   	stos   %al,%es:(%rdi)
    54ba:	aa                   	stos   %al,%es:(%rdi)
    54bb:	aa                   	stos   %al,%es:(%rdi)
    54bc:	aa                   	stos   %al,%es:(%rdi)
    54bd:	aa                   	stos   %al,%es:(%rdi)
    54be:	aa                   	stos   %al,%es:(%rdi)
    54bf:	aa                   	stos   %al,%es:(%rdi)
    54c0:	aa                   	stos   %al,%es:(%rdi)
    54c1:	aa                   	stos   %al,%es:(%rdi)
    54c2:	aa                   	stos   %al,%es:(%rdi)
    54c3:	aa                   	stos   %al,%es:(%rdi)
    54c4:	aa                   	stos   %al,%es:(%rdi)
    54c5:	aa                   	stos   %al,%es:(%rdi)
    54c6:	aa                   	stos   %al,%es:(%rdi)
    54c7:	aa                   	stos   %al,%es:(%rdi)
    54c8:	aa                   	stos   %al,%es:(%rdi)
    54c9:	aa                   	stos   %al,%es:(%rdi)
    54ca:	aa                   	stos   %al,%es:(%rdi)
    54cb:	aa                   	stos   %al,%es:(%rdi)
    54cc:	aa                   	stos   %al,%es:(%rdi)
    54cd:	aa                   	stos   %al,%es:(%rdi)
    54ce:	aa                   	stos   %al,%es:(%rdi)
    54cf:	aa                   	stos   %al,%es:(%rdi)
    54d0:	aa                   	stos   %al,%es:(%rdi)
    54d1:	aa                   	stos   %al,%es:(%rdi)
    54d2:	aa                   	stos   %al,%es:(%rdi)
    54d3:	aa                   	stos   %al,%es:(%rdi)
    54d4:	aa                   	stos   %al,%es:(%rdi)
    54d5:	aa                   	stos   %al,%es:(%rdi)
    54d6:	aa                   	stos   %al,%es:(%rdi)
    54d7:	aa                   	stos   %al,%es:(%rdi)
    54d8:	aa                   	stos   %al,%es:(%rdi)
    54d9:	aa                   	stos   %al,%es:(%rdi)
    54da:	aa                   	stos   %al,%es:(%rdi)
    54db:	aa                   	stos   %al,%es:(%rdi)
    54dc:	aa                   	stos   %al,%es:(%rdi)
    54dd:	aa                   	stos   %al,%es:(%rdi)
    54de:	aa                   	stos   %al,%es:(%rdi)
    54df:	aa                   	stos   %al,%es:(%rdi)
    54e0:	aa                   	stos   %al,%es:(%rdi)
    54e1:	aa                   	stos   %al,%es:(%rdi)
    54e2:	aa                   	stos   %al,%es:(%rdi)
    54e3:	aa                   	stos   %al,%es:(%rdi)
    54e4:	aa                   	stos   %al,%es:(%rdi)
    54e5:	aa                   	stos   %al,%es:(%rdi)
    54e6:	aa                   	stos   %al,%es:(%rdi)
    54e7:	aa                   	stos   %al,%es:(%rdi)
    54e8:	aa                   	stos   %al,%es:(%rdi)
    54e9:	aa                   	stos   %al,%es:(%rdi)
    54ea:	aa                   	stos   %al,%es:(%rdi)
    54eb:	aa                   	stos   %al,%es:(%rdi)
    54ec:	aa                   	stos   %al,%es:(%rdi)
    54ed:	aa                   	stos   %al,%es:(%rdi)
    54ee:	aa                   	stos   %al,%es:(%rdi)
    54ef:	aa                   	stos   %al,%es:(%rdi)
    54f0:	aa                   	stos   %al,%es:(%rdi)
    54f1:	aa                   	stos   %al,%es:(%rdi)
    54f2:	aa                   	stos   %al,%es:(%rdi)
    54f3:	aa                   	stos   %al,%es:(%rdi)
    54f4:	aa                   	stos   %al,%es:(%rdi)
    54f5:	aa                   	stos   %al,%es:(%rdi)
    54f6:	aa                   	stos   %al,%es:(%rdi)
    54f7:	aa                   	stos   %al,%es:(%rdi)
    54f8:	aa                   	stos   %al,%es:(%rdi)
    54f9:	aa                   	stos   %al,%es:(%rdi)
    54fa:	aa                   	stos   %al,%es:(%rdi)
    54fb:	aa                   	stos   %al,%es:(%rdi)
    54fc:	aa                   	stos   %al,%es:(%rdi)
    54fd:	aa                   	stos   %al,%es:(%rdi)
    54fe:	aa                   	stos   %al,%es:(%rdi)
    54ff:	aa                   	stos   %al,%es:(%rdi)
    5500:	aa                   	stos   %al,%es:(%rdi)
    5501:	aa                   	stos   %al,%es:(%rdi)
    5502:	aa                   	stos   %al,%es:(%rdi)
    5503:	aa                   	stos   %al,%es:(%rdi)
    5504:	aa                   	stos   %al,%es:(%rdi)
    5505:	aa                   	stos   %al,%es:(%rdi)
    5506:	aa                   	stos   %al,%es:(%rdi)
    5507:	aa                   	stos   %al,%es:(%rdi)
    5508:	aa                   	stos   %al,%es:(%rdi)
    5509:	aa                   	stos   %al,%es:(%rdi)
    550a:	aa                   	stos   %al,%es:(%rdi)
    550b:	aa                   	stos   %al,%es:(%rdi)
    550c:	aa                   	stos   %al,%es:(%rdi)
    550d:	aa                   	stos   %al,%es:(%rdi)
    550e:	aa                   	stos   %al,%es:(%rdi)
    550f:	aa                   	stos   %al,%es:(%rdi)
    5510:	aa                   	stos   %al,%es:(%rdi)
    5511:	aa                   	stos   %al,%es:(%rdi)
    5512:	aa                   	stos   %al,%es:(%rdi)
    5513:	aa                   	stos   %al,%es:(%rdi)
    5514:	aa                   	stos   %al,%es:(%rdi)
    5515:	aa                   	stos   %al,%es:(%rdi)
    5516:	aa                   	stos   %al,%es:(%rdi)
    5517:	aa                   	stos   %al,%es:(%rdi)
    5518:	aa                   	stos   %al,%es:(%rdi)
    5519:	aa                   	stos   %al,%es:(%rdi)
    551a:	aa                   	stos   %al,%es:(%rdi)
    551b:	aa                   	stos   %al,%es:(%rdi)
    551c:	aa                   	stos   %al,%es:(%rdi)
    551d:	aa                   	stos   %al,%es:(%rdi)
    551e:	aa                   	stos   %al,%es:(%rdi)
    551f:	aa                   	stos   %al,%es:(%rdi)
    5520:	aa                   	stos   %al,%es:(%rdi)
    5521:	aa                   	stos   %al,%es:(%rdi)
    5522:	aa                   	stos   %al,%es:(%rdi)
    5523:	aa                   	stos   %al,%es:(%rdi)
    5524:	aa                   	stos   %al,%es:(%rdi)
    5525:	aa                   	stos   %al,%es:(%rdi)
    5526:	aa                   	stos   %al,%es:(%rdi)
    5527:	aa                   	stos   %al,%es:(%rdi)
    5528:	aa                   	stos   %al,%es:(%rdi)
    5529:	aa                   	stos   %al,%es:(%rdi)
    552a:	aa                   	stos   %al,%es:(%rdi)
    552b:	aa                   	stos   %al,%es:(%rdi)
    552c:	aa                   	stos   %al,%es:(%rdi)
    552d:	aa                   	stos   %al,%es:(%rdi)
    552e:	aa                   	stos   %al,%es:(%rdi)
    552f:	aa                   	stos   %al,%es:(%rdi)
    5530:	aa                   	stos   %al,%es:(%rdi)
    5531:	aa                   	stos   %al,%es:(%rdi)
    5532:	aa                   	stos   %al,%es:(%rdi)
    5533:	aa                   	stos   %al,%es:(%rdi)
    5534:	aa                   	stos   %al,%es:(%rdi)
    5535:	aa                   	stos   %al,%es:(%rdi)
    5536:	aa                   	stos   %al,%es:(%rdi)
    5537:	aa                   	stos   %al,%es:(%rdi)
    5538:	aa                   	stos   %al,%es:(%rdi)
    5539:	aa                   	stos   %al,%es:(%rdi)
    553a:	aa                   	stos   %al,%es:(%rdi)
    553b:	aa                   	stos   %al,%es:(%rdi)
    553c:	aa                   	stos   %al,%es:(%rdi)
    553d:	aa                   	stos   %al,%es:(%rdi)
    553e:	aa                   	stos   %al,%es:(%rdi)
    553f:	aa                   	stos   %al,%es:(%rdi)
    5540:	aa                   	stos   %al,%es:(%rdi)
    5541:	aa                   	stos   %al,%es:(%rdi)
    5542:	aa                   	stos   %al,%es:(%rdi)
    5543:	aa                   	stos   %al,%es:(%rdi)
    5544:	aa                   	stos   %al,%es:(%rdi)
    5545:	aa                   	stos   %al,%es:(%rdi)
    5546:	aa                   	stos   %al,%es:(%rdi)
    5547:	aa                   	stos   %al,%es:(%rdi)
    5548:	aa                   	stos   %al,%es:(%rdi)
    5549:	aa                   	stos   %al,%es:(%rdi)
    554a:	aa                   	stos   %al,%es:(%rdi)
    554b:	aa                   	stos   %al,%es:(%rdi)
    554c:	aa                   	stos   %al,%es:(%rdi)
    554d:	aa                   	stos   %al,%es:(%rdi)
    554e:	aa                   	stos   %al,%es:(%rdi)
    554f:	aa                   	stos   %al,%es:(%rdi)
    5550:	aa                   	stos   %al,%es:(%rdi)
    5551:	aa                   	stos   %al,%es:(%rdi)
    5552:	aa                   	stos   %al,%es:(%rdi)
    5553:	aa                   	stos   %al,%es:(%rdi)
    5554:	aa                   	stos   %al,%es:(%rdi)
    5555:	aa                   	stos   %al,%es:(%rdi)
    5556:	aa                   	stos   %al,%es:(%rdi)
    5557:	aa                   	stos   %al,%es:(%rdi)
    5558:	aa                   	stos   %al,%es:(%rdi)
    5559:	aa                   	stos   %al,%es:(%rdi)
    555a:	aa                   	stos   %al,%es:(%rdi)
    555b:	aa                   	stos   %al,%es:(%rdi)
    555c:	aa                   	stos   %al,%es:(%rdi)
    555d:	aa                   	stos   %al,%es:(%rdi)
    555e:	aa                   	stos   %al,%es:(%rdi)
    555f:	aa                   	stos   %al,%es:(%rdi)
    5560:	aa                   	stos   %al,%es:(%rdi)
    5561:	aa                   	stos   %al,%es:(%rdi)
    5562:	aa                   	stos   %al,%es:(%rdi)
    5563:	aa                   	stos   %al,%es:(%rdi)
    5564:	aa                   	stos   %al,%es:(%rdi)
    5565:	aa                   	stos   %al,%es:(%rdi)
    5566:	aa                   	stos   %al,%es:(%rdi)
    5567:	aa                   	stos   %al,%es:(%rdi)
    5568:	aa                   	stos   %al,%es:(%rdi)
    5569:	aa                   	stos   %al,%es:(%rdi)
    556a:	aa                   	stos   %al,%es:(%rdi)
    556b:	aa                   	stos   %al,%es:(%rdi)
    556c:	aa                   	stos   %al,%es:(%rdi)
    556d:	aa                   	stos   %al,%es:(%rdi)
    556e:	aa                   	stos   %al,%es:(%rdi)
    556f:	aa                   	stos   %al,%es:(%rdi)
    5570:	aa                   	stos   %al,%es:(%rdi)
    5571:	aa                   	stos   %al,%es:(%rdi)
    5572:	aa                   	stos   %al,%es:(%rdi)
    5573:	aa                   	stos   %al,%es:(%rdi)
    5574:	aa                   	stos   %al,%es:(%rdi)
    5575:	aa                   	stos   %al,%es:(%rdi)
    5576:	aa                   	stos   %al,%es:(%rdi)
    5577:	aa                   	stos   %al,%es:(%rdi)
    5578:	aa                   	stos   %al,%es:(%rdi)
    5579:	aa                   	stos   %al,%es:(%rdi)
    557a:	aa                   	stos   %al,%es:(%rdi)
    557b:	aa                   	stos   %al,%es:(%rdi)
    557c:	aa                   	stos   %al,%es:(%rdi)
    557d:	aa                   	stos   %al,%es:(%rdi)
    557e:	aa                   	stos   %al,%es:(%rdi)
    557f:	aa                   	stos   %al,%es:(%rdi)
    5580:	aa                   	stos   %al,%es:(%rdi)
    5581:	aa                   	stos   %al,%es:(%rdi)
    5582:	aa                   	stos   %al,%es:(%rdi)
    5583:	aa                   	stos   %al,%es:(%rdi)
    5584:	aa                   	stos   %al,%es:(%rdi)
    5585:	aa                   	stos   %al,%es:(%rdi)
    5586:	aa                   	stos   %al,%es:(%rdi)
    5587:	aa                   	stos   %al,%es:(%rdi)
    5588:	aa                   	stos   %al,%es:(%rdi)
    5589:	aa                   	stos   %al,%es:(%rdi)
    558a:	aa                   	stos   %al,%es:(%rdi)
    558b:	aa                   	stos   %al,%es:(%rdi)
    558c:	aa                   	stos   %al,%es:(%rdi)
    558d:	aa                   	stos   %al,%es:(%rdi)
    558e:	aa                   	stos   %al,%es:(%rdi)
    558f:	aa                   	stos   %al,%es:(%rdi)
    5590:	aa                   	stos   %al,%es:(%rdi)
    5591:	aa                   	stos   %al,%es:(%rdi)
    5592:	aa                   	stos   %al,%es:(%rdi)
    5593:	aa                   	stos   %al,%es:(%rdi)
    5594:	aa                   	stos   %al,%es:(%rdi)
    5595:	aa                   	stos   %al,%es:(%rdi)
    5596:	aa                   	stos   %al,%es:(%rdi)
    5597:	aa                   	stos   %al,%es:(%rdi)
    5598:	aa                   	stos   %al,%es:(%rdi)
    5599:	aa                   	stos   %al,%es:(%rdi)
    559a:	aa                   	stos   %al,%es:(%rdi)
    559b:	aa                   	stos   %al,%es:(%rdi)
    559c:	aa                   	stos   %al,%es:(%rdi)
    559d:	aa                   	stos   %al,%es:(%rdi)
    559e:	aa                   	stos   %al,%es:(%rdi)
    559f:	aa                   	stos   %al,%es:(%rdi)
    55a0:	aa                   	stos   %al,%es:(%rdi)
    55a1:	aa                   	stos   %al,%es:(%rdi)
    55a2:	aa                   	stos   %al,%es:(%rdi)
    55a3:	aa                   	stos   %al,%es:(%rdi)
    55a4:	aa                   	stos   %al,%es:(%rdi)
    55a5:	aa                   	stos   %al,%es:(%rdi)
    55a6:	aa                   	stos   %al,%es:(%rdi)
    55a7:	aa                   	stos   %al,%es:(%rdi)
    55a8:	aa                   	stos   %al,%es:(%rdi)
    55a9:	aa                   	stos   %al,%es:(%rdi)
    55aa:	aa                   	stos   %al,%es:(%rdi)
    55ab:	aa                   	stos   %al,%es:(%rdi)
    55ac:	aa                   	stos   %al,%es:(%rdi)
    55ad:	aa                   	stos   %al,%es:(%rdi)
    55ae:	aa                   	stos   %al,%es:(%rdi)
    55af:	aa                   	stos   %al,%es:(%rdi)
    55b0:	aa                   	stos   %al,%es:(%rdi)
    55b1:	aa                   	stos   %al,%es:(%rdi)
    55b2:	aa                   	stos   %al,%es:(%rdi)
    55b3:	aa                   	stos   %al,%es:(%rdi)
    55b4:	aa                   	stos   %al,%es:(%rdi)
    55b5:	aa                   	stos   %al,%es:(%rdi)
    55b6:	aa                   	stos   %al,%es:(%rdi)
    55b7:	aa                   	stos   %al,%es:(%rdi)
    55b8:	aa                   	stos   %al,%es:(%rdi)
    55b9:	aa                   	stos   %al,%es:(%rdi)
    55ba:	aa                   	stos   %al,%es:(%rdi)
    55bb:	aa                   	stos   %al,%es:(%rdi)
    55bc:	aa                   	stos   %al,%es:(%rdi)
    55bd:	aa                   	stos   %al,%es:(%rdi)
    55be:	aa                   	stos   %al,%es:(%rdi)
    55bf:	aa                   	stos   %al,%es:(%rdi)
    55c0:	aa                   	stos   %al,%es:(%rdi)
    55c1:	aa                   	stos   %al,%es:(%rdi)
    55c2:	aa                   	stos   %al,%es:(%rdi)
    55c3:	aa                   	stos   %al,%es:(%rdi)
    55c4:	aa                   	stos   %al,%es:(%rdi)
    55c5:	aa                   	stos   %al,%es:(%rdi)
    55c6:	aa                   	stos   %al,%es:(%rdi)
    55c7:	aa                   	stos   %al,%es:(%rdi)
    55c8:	aa                   	stos   %al,%es:(%rdi)
    55c9:	aa                   	stos   %al,%es:(%rdi)
    55ca:	aa                   	stos   %al,%es:(%rdi)
    55cb:	aa                   	stos   %al,%es:(%rdi)
    55cc:	aa                   	stos   %al,%es:(%rdi)
    55cd:	aa                   	stos   %al,%es:(%rdi)
    55ce:	aa                   	stos   %al,%es:(%rdi)
    55cf:	aa                   	stos   %al,%es:(%rdi)
    55d0:	aa                   	stos   %al,%es:(%rdi)
    55d1:	aa                   	stos   %al,%es:(%rdi)
    55d2:	aa                   	stos   %al,%es:(%rdi)
    55d3:	aa                   	stos   %al,%es:(%rdi)
    55d4:	aa                   	stos   %al,%es:(%rdi)
    55d5:	aa                   	stos   %al,%es:(%rdi)
    55d6:	aa                   	stos   %al,%es:(%rdi)
    55d7:	aa                   	stos   %al,%es:(%rdi)
    55d8:	aa                   	stos   %al,%es:(%rdi)
    55d9:	aa                   	stos   %al,%es:(%rdi)
    55da:	aa                   	stos   %al,%es:(%rdi)
    55db:	aa                   	stos   %al,%es:(%rdi)
    55dc:	aa                   	stos   %al,%es:(%rdi)
    55dd:	aa                   	stos   %al,%es:(%rdi)
    55de:	aa                   	stos   %al,%es:(%rdi)
    55df:	aa                   	stos   %al,%es:(%rdi)
    55e0:	aa                   	stos   %al,%es:(%rdi)
    55e1:	aa                   	stos   %al,%es:(%rdi)
    55e2:	aa                   	stos   %al,%es:(%rdi)
    55e3:	aa                   	stos   %al,%es:(%rdi)
    55e4:	aa                   	stos   %al,%es:(%rdi)
    55e5:	aa                   	stos   %al,%es:(%rdi)
    55e6:	aa                   	stos   %al,%es:(%rdi)
    55e7:	aa                   	stos   %al,%es:(%rdi)
    55e8:	aa                   	stos   %al,%es:(%rdi)
    55e9:	aa                   	stos   %al,%es:(%rdi)
    55ea:	aa                   	stos   %al,%es:(%rdi)
    55eb:	aa                   	stos   %al,%es:(%rdi)
    55ec:	aa                   	stos   %al,%es:(%rdi)
    55ed:	aa                   	stos   %al,%es:(%rdi)
    55ee:	aa                   	stos   %al,%es:(%rdi)
    55ef:	aa                   	stos   %al,%es:(%rdi)
    55f0:	aa                   	stos   %al,%es:(%rdi)
    55f1:	aa                   	stos   %al,%es:(%rdi)
    55f2:	aa                   	stos   %al,%es:(%rdi)
    55f3:	aa                   	stos   %al,%es:(%rdi)
    55f4:	aa                   	stos   %al,%es:(%rdi)
    55f5:	aa                   	stos   %al,%es:(%rdi)
    55f6:	aa                   	stos   %al,%es:(%rdi)
    55f7:	aa                   	stos   %al,%es:(%rdi)
    55f8:	aa                   	stos   %al,%es:(%rdi)
    55f9:	aa                   	stos   %al,%es:(%rdi)
    55fa:	aa                   	stos   %al,%es:(%rdi)
    55fb:	aa                   	stos   %al,%es:(%rdi)
    55fc:	aa                   	stos   %al,%es:(%rdi)
    55fd:	aa                   	stos   %al,%es:(%rdi)
    55fe:	aa                   	stos   %al,%es:(%rdi)
    55ff:	aa                   	stos   %al,%es:(%rdi)
    5600:	aa                   	stos   %al,%es:(%rdi)
    5601:	aa                   	stos   %al,%es:(%rdi)
    5602:	aa                   	stos   %al,%es:(%rdi)
    5603:	aa                   	stos   %al,%es:(%rdi)
    5604:	aa                   	stos   %al,%es:(%rdi)
    5605:	aa                   	stos   %al,%es:(%rdi)
    5606:	aa                   	stos   %al,%es:(%rdi)
    5607:	aa                   	stos   %al,%es:(%rdi)
    5608:	aa                   	stos   %al,%es:(%rdi)
    5609:	aa                   	stos   %al,%es:(%rdi)
    560a:	aa                   	stos   %al,%es:(%rdi)
    560b:	aa                   	stos   %al,%es:(%rdi)
    560c:	aa                   	stos   %al,%es:(%rdi)
    560d:	aa                   	stos   %al,%es:(%rdi)
    560e:	aa                   	stos   %al,%es:(%rdi)
    560f:	aa                   	stos   %al,%es:(%rdi)
    5610:	aa                   	stos   %al,%es:(%rdi)
    5611:	aa                   	stos   %al,%es:(%rdi)
    5612:	aa                   	stos   %al,%es:(%rdi)
    5613:	aa                   	stos   %al,%es:(%rdi)
    5614:	aa                   	stos   %al,%es:(%rdi)
    5615:	aa                   	stos   %al,%es:(%rdi)
    5616:	aa                   	stos   %al,%es:(%rdi)
    5617:	aa                   	stos   %al,%es:(%rdi)
    5618:	aa                   	stos   %al,%es:(%rdi)
    5619:	aa                   	stos   %al,%es:(%rdi)
    561a:	aa                   	stos   %al,%es:(%rdi)
    561b:	aa                   	stos   %al,%es:(%rdi)
    561c:	aa                   	stos   %al,%es:(%rdi)
    561d:	aa                   	stos   %al,%es:(%rdi)
    561e:	aa                   	stos   %al,%es:(%rdi)
    561f:	aa                   	stos   %al,%es:(%rdi)
    5620:	aa                   	stos   %al,%es:(%rdi)
    5621:	aa                   	stos   %al,%es:(%rdi)
    5622:	aa                   	stos   %al,%es:(%rdi)
    5623:	aa                   	stos   %al,%es:(%rdi)
    5624:	aa                   	stos   %al,%es:(%rdi)
    5625:	aa                   	stos   %al,%es:(%rdi)
    5626:	aa                   	stos   %al,%es:(%rdi)
    5627:	aa                   	stos   %al,%es:(%rdi)
    5628:	aa                   	stos   %al,%es:(%rdi)
    5629:	aa                   	stos   %al,%es:(%rdi)
    562a:	aa                   	stos   %al,%es:(%rdi)
    562b:	aa                   	stos   %al,%es:(%rdi)
    562c:	aa                   	stos   %al,%es:(%rdi)
    562d:	aa                   	stos   %al,%es:(%rdi)
    562e:	aa                   	stos   %al,%es:(%rdi)
    562f:	aa                   	stos   %al,%es:(%rdi)
    5630:	aa                   	stos   %al,%es:(%rdi)
    5631:	aa                   	stos   %al,%es:(%rdi)
    5632:	aa                   	stos   %al,%es:(%rdi)
    5633:	aa                   	stos   %al,%es:(%rdi)
    5634:	aa                   	stos   %al,%es:(%rdi)
    5635:	aa                   	stos   %al,%es:(%rdi)
    5636:	aa                   	stos   %al,%es:(%rdi)
    5637:	aa                   	stos   %al,%es:(%rdi)
    5638:	aa                   	stos   %al,%es:(%rdi)
    5639:	aa                   	stos   %al,%es:(%rdi)
    563a:	aa                   	stos   %al,%es:(%rdi)
    563b:	aa                   	stos   %al,%es:(%rdi)
    563c:	aa                   	stos   %al,%es:(%rdi)
    563d:	aa                   	stos   %al,%es:(%rdi)
    563e:	aa                   	stos   %al,%es:(%rdi)
    563f:	aa                   	stos   %al,%es:(%rdi)
    5640:	aa                   	stos   %al,%es:(%rdi)
    5641:	aa                   	stos   %al,%es:(%rdi)
    5642:	aa                   	stos   %al,%es:(%rdi)
    5643:	aa                   	stos   %al,%es:(%rdi)
    5644:	aa                   	stos   %al,%es:(%rdi)
    5645:	aa                   	stos   %al,%es:(%rdi)
    5646:	aa                   	stos   %al,%es:(%rdi)
    5647:	aa                   	stos   %al,%es:(%rdi)
    5648:	aa                   	stos   %al,%es:(%rdi)
    5649:	aa                   	stos   %al,%es:(%rdi)
    564a:	aa                   	stos   %al,%es:(%rdi)
    564b:	aa                   	stos   %al,%es:(%rdi)
    564c:	aa                   	stos   %al,%es:(%rdi)
    564d:	aa                   	stos   %al,%es:(%rdi)
    564e:	aa                   	stos   %al,%es:(%rdi)
    564f:	aa                   	stos   %al,%es:(%rdi)
    5650:	aa                   	stos   %al,%es:(%rdi)
    5651:	aa                   	stos   %al,%es:(%rdi)
    5652:	aa                   	stos   %al,%es:(%rdi)
    5653:	aa                   	stos   %al,%es:(%rdi)
    5654:	aa                   	stos   %al,%es:(%rdi)
    5655:	aa                   	stos   %al,%es:(%rdi)
    5656:	aa                   	stos   %al,%es:(%rdi)
    5657:	aa                   	stos   %al,%es:(%rdi)
    5658:	aa                   	stos   %al,%es:(%rdi)
    5659:	aa                   	stos   %al,%es:(%rdi)
    565a:	aa                   	stos   %al,%es:(%rdi)
    565b:	aa                   	stos   %al,%es:(%rdi)
    565c:	aa                   	stos   %al,%es:(%rdi)
    565d:	aa                   	stos   %al,%es:(%rdi)
    565e:	aa                   	stos   %al,%es:(%rdi)
    565f:	aa                   	stos   %al,%es:(%rdi)
    5660:	aa                   	stos   %al,%es:(%rdi)
    5661:	aa                   	stos   %al,%es:(%rdi)
    5662:	aa                   	stos   %al,%es:(%rdi)
    5663:	aa                   	stos   %al,%es:(%rdi)
    5664:	aa                   	stos   %al,%es:(%rdi)
    5665:	aa                   	stos   %al,%es:(%rdi)
    5666:	aa                   	stos   %al,%es:(%rdi)
    5667:	aa                   	stos   %al,%es:(%rdi)
    5668:	aa                   	stos   %al,%es:(%rdi)
    5669:	aa                   	stos   %al,%es:(%rdi)
    566a:	aa                   	stos   %al,%es:(%rdi)
    566b:	aa                   	stos   %al,%es:(%rdi)
    566c:	aa                   	stos   %al,%es:(%rdi)
    566d:	aa                   	stos   %al,%es:(%rdi)
    566e:	aa                   	stos   %al,%es:(%rdi)
    566f:	aa                   	stos   %al,%es:(%rdi)
    5670:	aa                   	stos   %al,%es:(%rdi)
    5671:	aa                   	stos   %al,%es:(%rdi)
    5672:	aa                   	stos   %al,%es:(%rdi)
    5673:	aa                   	stos   %al,%es:(%rdi)
    5674:	aa                   	stos   %al,%es:(%rdi)
    5675:	aa                   	stos   %al,%es:(%rdi)
    5676:	aa                   	stos   %al,%es:(%rdi)
    5677:	aa                   	stos   %al,%es:(%rdi)
    5678:	aa                   	stos   %al,%es:(%rdi)
    5679:	aa                   	stos   %al,%es:(%rdi)
    567a:	aa                   	stos   %al,%es:(%rdi)
    567b:	aa                   	stos   %al,%es:(%rdi)
    567c:	aa                   	stos   %al,%es:(%rdi)
    567d:	aa                   	stos   %al,%es:(%rdi)
    567e:	aa                   	stos   %al,%es:(%rdi)
    567f:	aa                   	stos   %al,%es:(%rdi)
    5680:	aa                   	stos   %al,%es:(%rdi)
    5681:	aa                   	stos   %al,%es:(%rdi)
    5682:	aa                   	stos   %al,%es:(%rdi)
    5683:	aa                   	stos   %al,%es:(%rdi)
    5684:	aa                   	stos   %al,%es:(%rdi)
    5685:	aa                   	stos   %al,%es:(%rdi)
    5686:	aa                   	stos   %al,%es:(%rdi)
    5687:	aa                   	stos   %al,%es:(%rdi)
    5688:	aa                   	stos   %al,%es:(%rdi)
    5689:	aa                   	stos   %al,%es:(%rdi)
    568a:	aa                   	stos   %al,%es:(%rdi)
    568b:	aa                   	stos   %al,%es:(%rdi)
    568c:	aa                   	stos   %al,%es:(%rdi)
    568d:	aa                   	stos   %al,%es:(%rdi)
    568e:	aa                   	stos   %al,%es:(%rdi)
    568f:	aa                   	stos   %al,%es:(%rdi)
    5690:	aa                   	stos   %al,%es:(%rdi)
    5691:	aa                   	stos   %al,%es:(%rdi)
    5692:	aa                   	stos   %al,%es:(%rdi)
    5693:	aa                   	stos   %al,%es:(%rdi)
    5694:	aa                   	stos   %al,%es:(%rdi)
    5695:	aa                   	stos   %al,%es:(%rdi)
    5696:	aa                   	stos   %al,%es:(%rdi)
    5697:	aa                   	stos   %al,%es:(%rdi)
    5698:	aa                   	stos   %al,%es:(%rdi)
    5699:	aa                   	stos   %al,%es:(%rdi)
    569a:	aa                   	stos   %al,%es:(%rdi)
    569b:	aa                   	stos   %al,%es:(%rdi)
    569c:	aa                   	stos   %al,%es:(%rdi)
    569d:	aa                   	stos   %al,%es:(%rdi)
    569e:	aa                   	stos   %al,%es:(%rdi)
    569f:	aa                   	stos   %al,%es:(%rdi)
    56a0:	aa                   	stos   %al,%es:(%rdi)
    56a1:	aa                   	stos   %al,%es:(%rdi)
    56a2:	aa                   	stos   %al,%es:(%rdi)
    56a3:	aa                   	stos   %al,%es:(%rdi)
    56a4:	aa                   	stos   %al,%es:(%rdi)
    56a5:	aa                   	stos   %al,%es:(%rdi)
    56a6:	aa                   	stos   %al,%es:(%rdi)
    56a7:	aa                   	stos   %al,%es:(%rdi)
    56a8:	aa                   	stos   %al,%es:(%rdi)
    56a9:	aa                   	stos   %al,%es:(%rdi)
    56aa:	aa                   	stos   %al,%es:(%rdi)
    56ab:	aa                   	stos   %al,%es:(%rdi)
    56ac:	aa                   	stos   %al,%es:(%rdi)
    56ad:	aa                   	stos   %al,%es:(%rdi)
    56ae:	aa                   	stos   %al,%es:(%rdi)
    56af:	aa                   	stos   %al,%es:(%rdi)
    56b0:	aa                   	stos   %al,%es:(%rdi)
    56b1:	aa                   	stos   %al,%es:(%rdi)
    56b2:	aa                   	stos   %al,%es:(%rdi)
    56b3:	aa                   	stos   %al,%es:(%rdi)
    56b4:	aa                   	stos   %al,%es:(%rdi)
    56b5:	aa                   	stos   %al,%es:(%rdi)
    56b6:	aa                   	stos   %al,%es:(%rdi)
    56b7:	aa                   	stos   %al,%es:(%rdi)
    56b8:	aa                   	stos   %al,%es:(%rdi)
    56b9:	aa                   	stos   %al,%es:(%rdi)
    56ba:	aa                   	stos   %al,%es:(%rdi)
    56bb:	aa                   	stos   %al,%es:(%rdi)
    56bc:	aa                   	stos   %al,%es:(%rdi)
    56bd:	aa                   	stos   %al,%es:(%rdi)
    56be:	aa                   	stos   %al,%es:(%rdi)
    56bf:	aa                   	stos   %al,%es:(%rdi)
    56c0:	aa                   	stos   %al,%es:(%rdi)
    56c1:	aa                   	stos   %al,%es:(%rdi)
    56c2:	aa                   	stos   %al,%es:(%rdi)
    56c3:	aa                   	stos   %al,%es:(%rdi)
    56c4:	aa                   	stos   %al,%es:(%rdi)
    56c5:	aa                   	stos   %al,%es:(%rdi)
    56c6:	aa                   	stos   %al,%es:(%rdi)
    56c7:	aa                   	stos   %al,%es:(%rdi)
    56c8:	aa                   	stos   %al,%es:(%rdi)
    56c9:	aa                   	stos   %al,%es:(%rdi)
    56ca:	aa                   	stos   %al,%es:(%rdi)
    56cb:	aa                   	stos   %al,%es:(%rdi)
    56cc:	aa                   	stos   %al,%es:(%rdi)
    56cd:	aa                   	stos   %al,%es:(%rdi)
    56ce:	aa                   	stos   %al,%es:(%rdi)
    56cf:	aa                   	stos   %al,%es:(%rdi)
    56d0:	aa                   	stos   %al,%es:(%rdi)
    56d1:	aa                   	stos   %al,%es:(%rdi)
    56d2:	aa                   	stos   %al,%es:(%rdi)
    56d3:	aa                   	stos   %al,%es:(%rdi)
    56d4:	aa                   	stos   %al,%es:(%rdi)
    56d5:	aa                   	stos   %al,%es:(%rdi)
    56d6:	aa                   	stos   %al,%es:(%rdi)
    56d7:	aa                   	stos   %al,%es:(%rdi)
    56d8:	aa                   	stos   %al,%es:(%rdi)
    56d9:	aa                   	stos   %al,%es:(%rdi)
    56da:	aa                   	stos   %al,%es:(%rdi)
    56db:	aa                   	stos   %al,%es:(%rdi)
    56dc:	aa                   	stos   %al,%es:(%rdi)
    56dd:	aa                   	stos   %al,%es:(%rdi)
    56de:	aa                   	stos   %al,%es:(%rdi)
    56df:	aa                   	stos   %al,%es:(%rdi)
    56e0:	aa                   	stos   %al,%es:(%rdi)
    56e1:	aa                   	stos   %al,%es:(%rdi)
    56e2:	aa                   	stos   %al,%es:(%rdi)
    56e3:	aa                   	stos   %al,%es:(%rdi)
    56e4:	aa                   	stos   %al,%es:(%rdi)
    56e5:	aa                   	stos   %al,%es:(%rdi)
    56e6:	aa                   	stos   %al,%es:(%rdi)
    56e7:	aa                   	stos   %al,%es:(%rdi)
    56e8:	aa                   	stos   %al,%es:(%rdi)
    56e9:	aa                   	stos   %al,%es:(%rdi)
    56ea:	aa                   	stos   %al,%es:(%rdi)
    56eb:	aa                   	stos   %al,%es:(%rdi)
    56ec:	aa                   	stos   %al,%es:(%rdi)
    56ed:	aa                   	stos   %al,%es:(%rdi)
    56ee:	aa                   	stos   %al,%es:(%rdi)
    56ef:	aa                   	stos   %al,%es:(%rdi)
    56f0:	aa                   	stos   %al,%es:(%rdi)
    56f1:	aa                   	stos   %al,%es:(%rdi)
    56f2:	aa                   	stos   %al,%es:(%rdi)
    56f3:	aa                   	stos   %al,%es:(%rdi)
    56f4:	aa                   	stos   %al,%es:(%rdi)
    56f5:	aa                   	stos   %al,%es:(%rdi)
    56f6:	aa                   	stos   %al,%es:(%rdi)
    56f7:	aa                   	stos   %al,%es:(%rdi)
    56f8:	aa                   	stos   %al,%es:(%rdi)
    56f9:	aa                   	stos   %al,%es:(%rdi)
    56fa:	aa                   	stos   %al,%es:(%rdi)
    56fb:	aa                   	stos   %al,%es:(%rdi)
    56fc:	aa                   	stos   %al,%es:(%rdi)
    56fd:	aa                   	stos   %al,%es:(%rdi)
    56fe:	aa                   	stos   %al,%es:(%rdi)
    56ff:	aa                   	stos   %al,%es:(%rdi)
    5700:	aa                   	stos   %al,%es:(%rdi)
    5701:	aa                   	stos   %al,%es:(%rdi)
    5702:	aa                   	stos   %al,%es:(%rdi)
    5703:	aa                   	stos   %al,%es:(%rdi)
    5704:	aa                   	stos   %al,%es:(%rdi)
    5705:	aa                   	stos   %al,%es:(%rdi)
    5706:	aa                   	stos   %al,%es:(%rdi)
    5707:	aa                   	stos   %al,%es:(%rdi)
    5708:	aa                   	stos   %al,%es:(%rdi)
    5709:	aa                   	stos   %al,%es:(%rdi)
    570a:	aa                   	stos   %al,%es:(%rdi)
    570b:	aa                   	stos   %al,%es:(%rdi)
    570c:	aa                   	stos   %al,%es:(%rdi)
    570d:	aa                   	stos   %al,%es:(%rdi)
    570e:	aa                   	stos   %al,%es:(%rdi)
    570f:	aa                   	stos   %al,%es:(%rdi)
    5710:	aa                   	stos   %al,%es:(%rdi)
    5711:	aa                   	stos   %al,%es:(%rdi)
    5712:	aa                   	stos   %al,%es:(%rdi)
    5713:	aa                   	stos   %al,%es:(%rdi)
    5714:	aa                   	stos   %al,%es:(%rdi)
    5715:	aa                   	stos   %al,%es:(%rdi)
    5716:	aa                   	stos   %al,%es:(%rdi)
    5717:	aa                   	stos   %al,%es:(%rdi)
    5718:	aa                   	stos   %al,%es:(%rdi)
    5719:	aa                   	stos   %al,%es:(%rdi)
    571a:	aa                   	stos   %al,%es:(%rdi)
    571b:	aa                   	stos   %al,%es:(%rdi)
    571c:	aa                   	stos   %al,%es:(%rdi)
    571d:	aa                   	stos   %al,%es:(%rdi)
    571e:	aa                   	stos   %al,%es:(%rdi)
    571f:	aa                   	stos   %al,%es:(%rdi)
    5720:	aa                   	stos   %al,%es:(%rdi)
    5721:	aa                   	stos   %al,%es:(%rdi)
    5722:	aa                   	stos   %al,%es:(%rdi)
    5723:	aa                   	stos   %al,%es:(%rdi)
    5724:	aa                   	stos   %al,%es:(%rdi)
    5725:	aa                   	stos   %al,%es:(%rdi)
    5726:	aa                   	stos   %al,%es:(%rdi)
    5727:	aa                   	stos   %al,%es:(%rdi)
    5728:	aa                   	stos   %al,%es:(%rdi)
    5729:	aa                   	stos   %al,%es:(%rdi)
    572a:	aa                   	stos   %al,%es:(%rdi)
    572b:	aa                   	stos   %al,%es:(%rdi)
    572c:	aa                   	stos   %al,%es:(%rdi)
    572d:	aa                   	stos   %al,%es:(%rdi)
    572e:	aa                   	stos   %al,%es:(%rdi)
    572f:	aa                   	stos   %al,%es:(%rdi)
    5730:	aa                   	stos   %al,%es:(%rdi)
    5731:	aa                   	stos   %al,%es:(%rdi)
    5732:	aa                   	stos   %al,%es:(%rdi)
    5733:	aa                   	stos   %al,%es:(%rdi)
    5734:	aa                   	stos   %al,%es:(%rdi)
    5735:	aa                   	stos   %al,%es:(%rdi)
    5736:	aa                   	stos   %al,%es:(%rdi)
    5737:	aa                   	stos   %al,%es:(%rdi)
    5738:	aa                   	stos   %al,%es:(%rdi)
    5739:	aa                   	stos   %al,%es:(%rdi)
    573a:	aa                   	stos   %al,%es:(%rdi)
    573b:	aa                   	stos   %al,%es:(%rdi)
    573c:	aa                   	stos   %al,%es:(%rdi)
    573d:	aa                   	stos   %al,%es:(%rdi)
    573e:	aa                   	stos   %al,%es:(%rdi)
    573f:	aa                   	stos   %al,%es:(%rdi)
    5740:	aa                   	stos   %al,%es:(%rdi)
    5741:	aa                   	stos   %al,%es:(%rdi)
    5742:	aa                   	stos   %al,%es:(%rdi)
    5743:	aa                   	stos   %al,%es:(%rdi)
    5744:	aa                   	stos   %al,%es:(%rdi)
    5745:	aa                   	stos   %al,%es:(%rdi)
    5746:	aa                   	stos   %al,%es:(%rdi)
    5747:	aa                   	stos   %al,%es:(%rdi)
    5748:	aa                   	stos   %al,%es:(%rdi)
    5749:	aa                   	stos   %al,%es:(%rdi)
    574a:	aa                   	stos   %al,%es:(%rdi)
    574b:	aa                   	stos   %al,%es:(%rdi)
    574c:	aa                   	stos   %al,%es:(%rdi)
    574d:	aa                   	stos   %al,%es:(%rdi)
    574e:	aa                   	stos   %al,%es:(%rdi)
    574f:	aa                   	stos   %al,%es:(%rdi)
    5750:	aa                   	stos   %al,%es:(%rdi)
    5751:	aa                   	stos   %al,%es:(%rdi)
    5752:	aa                   	stos   %al,%es:(%rdi)
    5753:	aa                   	stos   %al,%es:(%rdi)
    5754:	aa                   	stos   %al,%es:(%rdi)
    5755:	aa                   	stos   %al,%es:(%rdi)
    5756:	aa                   	stos   %al,%es:(%rdi)
    5757:	aa                   	stos   %al,%es:(%rdi)
    5758:	aa                   	stos   %al,%es:(%rdi)
    5759:	aa                   	stos   %al,%es:(%rdi)
    575a:	aa                   	stos   %al,%es:(%rdi)
    575b:	aa                   	stos   %al,%es:(%rdi)
    575c:	aa                   	stos   %al,%es:(%rdi)
    575d:	aa                   	stos   %al,%es:(%rdi)
    575e:	aa                   	stos   %al,%es:(%rdi)
    575f:	aa                   	stos   %al,%es:(%rdi)
    5760:	aa                   	stos   %al,%es:(%rdi)
    5761:	aa                   	stos   %al,%es:(%rdi)
    5762:	aa                   	stos   %al,%es:(%rdi)
    5763:	aa                   	stos   %al,%es:(%rdi)
    5764:	aa                   	stos   %al,%es:(%rdi)
    5765:	aa                   	stos   %al,%es:(%rdi)
    5766:	aa                   	stos   %al,%es:(%rdi)
    5767:	aa                   	stos   %al,%es:(%rdi)
    5768:	aa                   	stos   %al,%es:(%rdi)
    5769:	aa                   	stos   %al,%es:(%rdi)
    576a:	aa                   	stos   %al,%es:(%rdi)
    576b:	aa                   	stos   %al,%es:(%rdi)
    576c:	aa                   	stos   %al,%es:(%rdi)
    576d:	aa                   	stos   %al,%es:(%rdi)
    576e:	aa                   	stos   %al,%es:(%rdi)
    576f:	aa                   	stos   %al,%es:(%rdi)
    5770:	aa                   	stos   %al,%es:(%rdi)
    5771:	aa                   	stos   %al,%es:(%rdi)
    5772:	aa                   	stos   %al,%es:(%rdi)
    5773:	aa                   	stos   %al,%es:(%rdi)
    5774:	aa                   	stos   %al,%es:(%rdi)
    5775:	aa                   	stos   %al,%es:(%rdi)
    5776:	aa                   	stos   %al,%es:(%rdi)
    5777:	aa                   	stos   %al,%es:(%rdi)
    5778:	aa                   	stos   %al,%es:(%rdi)
    5779:	aa                   	stos   %al,%es:(%rdi)
    577a:	aa                   	stos   %al,%es:(%rdi)
    577b:	aa                   	stos   %al,%es:(%rdi)
    577c:	aa                   	stos   %al,%es:(%rdi)
    577d:	aa                   	stos   %al,%es:(%rdi)
    577e:	aa                   	stos   %al,%es:(%rdi)
    577f:	aa                   	stos   %al,%es:(%rdi)
    5780:	aa                   	stos   %al,%es:(%rdi)
    5781:	aa                   	stos   %al,%es:(%rdi)
    5782:	aa                   	stos   %al,%es:(%rdi)
    5783:	aa                   	stos   %al,%es:(%rdi)
    5784:	aa                   	stos   %al,%es:(%rdi)
    5785:	aa                   	stos   %al,%es:(%rdi)
    5786:	aa                   	stos   %al,%es:(%rdi)
    5787:	aa                   	stos   %al,%es:(%rdi)
    5788:	aa                   	stos   %al,%es:(%rdi)
    5789:	aa                   	stos   %al,%es:(%rdi)
    578a:	aa                   	stos   %al,%es:(%rdi)
    578b:	aa                   	stos   %al,%es:(%rdi)
    578c:	aa                   	stos   %al,%es:(%rdi)
    578d:	aa                   	stos   %al,%es:(%rdi)
    578e:	aa                   	stos   %al,%es:(%rdi)
    578f:	aa                   	stos   %al,%es:(%rdi)
    5790:	aa                   	stos   %al,%es:(%rdi)
    5791:	aa                   	stos   %al,%es:(%rdi)
    5792:	aa                   	stos   %al,%es:(%rdi)
    5793:	aa                   	stos   %al,%es:(%rdi)
    5794:	aa                   	stos   %al,%es:(%rdi)
    5795:	aa                   	stos   %al,%es:(%rdi)
    5796:	aa                   	stos   %al,%es:(%rdi)
    5797:	aa                   	stos   %al,%es:(%rdi)
    5798:	aa                   	stos   %al,%es:(%rdi)
    5799:	aa                   	stos   %al,%es:(%rdi)
    579a:	aa                   	stos   %al,%es:(%rdi)
    579b:	aa                   	stos   %al,%es:(%rdi)
    579c:	aa                   	stos   %al,%es:(%rdi)
    579d:	aa                   	stos   %al,%es:(%rdi)
    579e:	aa                   	stos   %al,%es:(%rdi)
    579f:	aa                   	stos   %al,%es:(%rdi)
    57a0:	aa                   	stos   %al,%es:(%rdi)
    57a1:	aa                   	stos   %al,%es:(%rdi)
    57a2:	aa                   	stos   %al,%es:(%rdi)
    57a3:	aa                   	stos   %al,%es:(%rdi)
    57a4:	aa                   	stos   %al,%es:(%rdi)
    57a5:	aa                   	stos   %al,%es:(%rdi)
    57a6:	aa                   	stos   %al,%es:(%rdi)
    57a7:	aa                   	stos   %al,%es:(%rdi)
    57a8:	aa                   	stos   %al,%es:(%rdi)
    57a9:	aa                   	stos   %al,%es:(%rdi)
    57aa:	aa                   	stos   %al,%es:(%rdi)
    57ab:	aa                   	stos   %al,%es:(%rdi)
    57ac:	aa                   	stos   %al,%es:(%rdi)
    57ad:	aa                   	stos   %al,%es:(%rdi)
    57ae:	aa                   	stos   %al,%es:(%rdi)
    57af:	aa                   	stos   %al,%es:(%rdi)
    57b0:	aa                   	stos   %al,%es:(%rdi)
    57b1:	aa                   	stos   %al,%es:(%rdi)
    57b2:	aa                   	stos   %al,%es:(%rdi)
    57b3:	aa                   	stos   %al,%es:(%rdi)
    57b4:	aa                   	stos   %al,%es:(%rdi)
    57b5:	aa                   	stos   %al,%es:(%rdi)
    57b6:	aa                   	stos   %al,%es:(%rdi)
    57b7:	aa                   	stos   %al,%es:(%rdi)
    57b8:	aa                   	stos   %al,%es:(%rdi)
    57b9:	aa                   	stos   %al,%es:(%rdi)
    57ba:	aa                   	stos   %al,%es:(%rdi)
    57bb:	aa                   	stos   %al,%es:(%rdi)
    57bc:	aa                   	stos   %al,%es:(%rdi)
    57bd:	aa                   	stos   %al,%es:(%rdi)
    57be:	aa                   	stos   %al,%es:(%rdi)
    57bf:	aa                   	stos   %al,%es:(%rdi)
    57c0:	aa                   	stos   %al,%es:(%rdi)
    57c1:	aa                   	stos   %al,%es:(%rdi)
    57c2:	aa                   	stos   %al,%es:(%rdi)
    57c3:	aa                   	stos   %al,%es:(%rdi)
    57c4:	aa                   	stos   %al,%es:(%rdi)
    57c5:	aa                   	stos   %al,%es:(%rdi)
    57c6:	aa                   	stos   %al,%es:(%rdi)
    57c7:	aa                   	stos   %al,%es:(%rdi)
    57c8:	aa                   	stos   %al,%es:(%rdi)
    57c9:	aa                   	stos   %al,%es:(%rdi)
    57ca:	aa                   	stos   %al,%es:(%rdi)
    57cb:	aa                   	stos   %al,%es:(%rdi)
    57cc:	aa                   	stos   %al,%es:(%rdi)
    57cd:	aa                   	stos   %al,%es:(%rdi)
    57ce:	aa                   	stos   %al,%es:(%rdi)
    57cf:	aa                   	stos   %al,%es:(%rdi)
    57d0:	aa                   	stos   %al,%es:(%rdi)
    57d1:	aa                   	stos   %al,%es:(%rdi)
    57d2:	aa                   	stos   %al,%es:(%rdi)
    57d3:	aa                   	stos   %al,%es:(%rdi)
    57d4:	aa                   	stos   %al,%es:(%rdi)
    57d5:	aa                   	stos   %al,%es:(%rdi)
    57d6:	aa                   	stos   %al,%es:(%rdi)
    57d7:	aa                   	stos   %al,%es:(%rdi)
    57d8:	aa                   	stos   %al,%es:(%rdi)
    57d9:	aa                   	stos   %al,%es:(%rdi)
    57da:	aa                   	stos   %al,%es:(%rdi)
    57db:	aa                   	stos   %al,%es:(%rdi)
    57dc:	aa                   	stos   %al,%es:(%rdi)
    57dd:	aa                   	stos   %al,%es:(%rdi)
    57de:	aa                   	stos   %al,%es:(%rdi)
    57df:	aa                   	stos   %al,%es:(%rdi)
    57e0:	aa                   	stos   %al,%es:(%rdi)
    57e1:	aa                   	stos   %al,%es:(%rdi)
    57e2:	aa                   	stos   %al,%es:(%rdi)
    57e3:	aa                   	stos   %al,%es:(%rdi)
    57e4:	aa                   	stos   %al,%es:(%rdi)
    57e5:	aa                   	stos   %al,%es:(%rdi)
    57e6:	aa                   	stos   %al,%es:(%rdi)
    57e7:	aa                   	stos   %al,%es:(%rdi)
    57e8:	aa                   	stos   %al,%es:(%rdi)
    57e9:	aa                   	stos   %al,%es:(%rdi)
    57ea:	aa                   	stos   %al,%es:(%rdi)
    57eb:	aa                   	stos   %al,%es:(%rdi)
    57ec:	aa                   	stos   %al,%es:(%rdi)
    57ed:	aa                   	stos   %al,%es:(%rdi)
    57ee:	aa                   	stos   %al,%es:(%rdi)
    57ef:	aa                   	stos   %al,%es:(%rdi)
    57f0:	aa                   	stos   %al,%es:(%rdi)
    57f1:	aa                   	stos   %al,%es:(%rdi)
    57f2:	aa                   	stos   %al,%es:(%rdi)
    57f3:	aa                   	stos   %al,%es:(%rdi)
    57f4:	aa                   	stos   %al,%es:(%rdi)
    57f5:	aa                   	stos   %al,%es:(%rdi)
    57f6:	aa                   	stos   %al,%es:(%rdi)
    57f7:	aa                   	stos   %al,%es:(%rdi)
    57f8:	aa                   	stos   %al,%es:(%rdi)
    57f9:	aa                   	stos   %al,%es:(%rdi)
    57fa:	aa                   	stos   %al,%es:(%rdi)
    57fb:	aa                   	stos   %al,%es:(%rdi)
    57fc:	aa                   	stos   %al,%es:(%rdi)
    57fd:	aa                   	stos   %al,%es:(%rdi)
    57fe:	aa                   	stos   %al,%es:(%rdi)
    57ff:	aa                   	stos   %al,%es:(%rdi)
    5800:	aa                   	stos   %al,%es:(%rdi)
    5801:	aa                   	stos   %al,%es:(%rdi)
    5802:	aa                   	stos   %al,%es:(%rdi)
    5803:	aa                   	stos   %al,%es:(%rdi)
    5804:	aa                   	stos   %al,%es:(%rdi)
    5805:	aa                   	stos   %al,%es:(%rdi)
    5806:	aa                   	stos   %al,%es:(%rdi)
    5807:	aa                   	stos   %al,%es:(%rdi)
    5808:	aa                   	stos   %al,%es:(%rdi)
    5809:	aa                   	stos   %al,%es:(%rdi)
    580a:	aa                   	stos   %al,%es:(%rdi)
    580b:	aa                   	stos   %al,%es:(%rdi)
    580c:	aa                   	stos   %al,%es:(%rdi)
    580d:	aa                   	stos   %al,%es:(%rdi)
    580e:	aa                   	stos   %al,%es:(%rdi)
    580f:	aa                   	stos   %al,%es:(%rdi)
    5810:	aa                   	stos   %al,%es:(%rdi)
    5811:	aa                   	stos   %al,%es:(%rdi)
    5812:	aa                   	stos   %al,%es:(%rdi)
    5813:	aa                   	stos   %al,%es:(%rdi)
    5814:	aa                   	stos   %al,%es:(%rdi)
    5815:	aa                   	stos   %al,%es:(%rdi)
    5816:	aa                   	stos   %al,%es:(%rdi)
    5817:	aa                   	stos   %al,%es:(%rdi)
    5818:	aa                   	stos   %al,%es:(%rdi)
    5819:	aa                   	stos   %al,%es:(%rdi)
    581a:	aa                   	stos   %al,%es:(%rdi)
    581b:	aa                   	stos   %al,%es:(%rdi)
    581c:	aa                   	stos   %al,%es:(%rdi)
    581d:	aa                   	stos   %al,%es:(%rdi)
    581e:	aa                   	stos   %al,%es:(%rdi)
    581f:	aa                   	stos   %al,%es:(%rdi)
    5820:	aa                   	stos   %al,%es:(%rdi)
    5821:	aa                   	stos   %al,%es:(%rdi)
    5822:	aa                   	stos   %al,%es:(%rdi)
    5823:	aa                   	stos   %al,%es:(%rdi)
    5824:	aa                   	stos   %al,%es:(%rdi)
    5825:	aa                   	stos   %al,%es:(%rdi)
    5826:	aa                   	stos   %al,%es:(%rdi)
    5827:	aa                   	stos   %al,%es:(%rdi)
    5828:	aa                   	stos   %al,%es:(%rdi)
    5829:	aa                   	stos   %al,%es:(%rdi)
    582a:	aa                   	stos   %al,%es:(%rdi)
    582b:	aa                   	stos   %al,%es:(%rdi)
    582c:	aa                   	stos   %al,%es:(%rdi)
    582d:	aa                   	stos   %al,%es:(%rdi)
    582e:	aa                   	stos   %al,%es:(%rdi)
    582f:	aa                   	stos   %al,%es:(%rdi)
    5830:	aa                   	stos   %al,%es:(%rdi)
    5831:	aa                   	stos   %al,%es:(%rdi)
    5832:	aa                   	stos   %al,%es:(%rdi)
    5833:	aa                   	stos   %al,%es:(%rdi)
    5834:	aa                   	stos   %al,%es:(%rdi)
    5835:	aa                   	stos   %al,%es:(%rdi)
    5836:	aa                   	stos   %al,%es:(%rdi)
    5837:	aa                   	stos   %al,%es:(%rdi)
    5838:	aa                   	stos   %al,%es:(%rdi)
    5839:	aa                   	stos   %al,%es:(%rdi)
    583a:	aa                   	stos   %al,%es:(%rdi)
    583b:	aa                   	stos   %al,%es:(%rdi)
    583c:	aa                   	stos   %al,%es:(%rdi)
    583d:	aa                   	stos   %al,%es:(%rdi)
    583e:	aa                   	stos   %al,%es:(%rdi)
    583f:	aa                   	stos   %al,%es:(%rdi)
    5840:	aa                   	stos   %al,%es:(%rdi)
    5841:	aa                   	stos   %al,%es:(%rdi)
    5842:	aa                   	stos   %al,%es:(%rdi)
    5843:	aa                   	stos   %al,%es:(%rdi)
    5844:	aa                   	stos   %al,%es:(%rdi)
    5845:	aa                   	stos   %al,%es:(%rdi)
    5846:	aa                   	stos   %al,%es:(%rdi)
    5847:	aa                   	stos   %al,%es:(%rdi)
    5848:	aa                   	stos   %al,%es:(%rdi)
    5849:	aa                   	stos   %al,%es:(%rdi)
    584a:	aa                   	stos   %al,%es:(%rdi)
    584b:	aa                   	stos   %al,%es:(%rdi)
    584c:	aa                   	stos   %al,%es:(%rdi)
    584d:	aa                   	stos   %al,%es:(%rdi)
    584e:	aa                   	stos   %al,%es:(%rdi)
    584f:	aa                   	stos   %al,%es:(%rdi)
    5850:	aa                   	stos   %al,%es:(%rdi)
    5851:	aa                   	stos   %al,%es:(%rdi)
    5852:	aa                   	stos   %al,%es:(%rdi)
    5853:	aa                   	stos   %al,%es:(%rdi)
    5854:	aa                   	stos   %al,%es:(%rdi)
    5855:	aa                   	stos   %al,%es:(%rdi)
    5856:	aa                   	stos   %al,%es:(%rdi)
    5857:	aa                   	stos   %al,%es:(%rdi)
    5858:	aa                   	stos   %al,%es:(%rdi)
    5859:	aa                   	stos   %al,%es:(%rdi)
    585a:	aa                   	stos   %al,%es:(%rdi)
    585b:	aa                   	stos   %al,%es:(%rdi)
    585c:	aa                   	stos   %al,%es:(%rdi)
    585d:	aa                   	stos   %al,%es:(%rdi)
    585e:	aa                   	stos   %al,%es:(%rdi)
    585f:	aa                   	stos   %al,%es:(%rdi)
    5860:	aa                   	stos   %al,%es:(%rdi)
    5861:	aa                   	stos   %al,%es:(%rdi)
    5862:	aa                   	stos   %al,%es:(%rdi)
    5863:	aa                   	stos   %al,%es:(%rdi)
    5864:	aa                   	stos   %al,%es:(%rdi)
    5865:	aa                   	stos   %al,%es:(%rdi)
    5866:	aa                   	stos   %al,%es:(%rdi)
    5867:	aa                   	stos   %al,%es:(%rdi)
    5868:	aa                   	stos   %al,%es:(%rdi)
    5869:	aa                   	stos   %al,%es:(%rdi)
    586a:	aa                   	stos   %al,%es:(%rdi)
    586b:	aa                   	stos   %al,%es:(%rdi)
    586c:	aa                   	stos   %al,%es:(%rdi)
    586d:	aa                   	stos   %al,%es:(%rdi)
    586e:	aa                   	stos   %al,%es:(%rdi)
    586f:	aa                   	stos   %al,%es:(%rdi)
    5870:	aa                   	stos   %al,%es:(%rdi)
    5871:	aa                   	stos   %al,%es:(%rdi)
    5872:	aa                   	stos   %al,%es:(%rdi)
    5873:	aa                   	stos   %al,%es:(%rdi)
    5874:	aa                   	stos   %al,%es:(%rdi)
    5875:	aa                   	stos   %al,%es:(%rdi)
    5876:	aa                   	stos   %al,%es:(%rdi)
    5877:	aa                   	stos   %al,%es:(%rdi)
    5878:	aa                   	stos   %al,%es:(%rdi)
    5879:	aa                   	stos   %al,%es:(%rdi)
    587a:	aa                   	stos   %al,%es:(%rdi)
    587b:	aa                   	stos   %al,%es:(%rdi)
    587c:	aa                   	stos   %al,%es:(%rdi)
    587d:	aa                   	stos   %al,%es:(%rdi)
    587e:	aa                   	stos   %al,%es:(%rdi)
    587f:	aa                   	stos   %al,%es:(%rdi)
    5880:	aa                   	stos   %al,%es:(%rdi)
    5881:	aa                   	stos   %al,%es:(%rdi)
    5882:	aa                   	stos   %al,%es:(%rdi)
    5883:	aa                   	stos   %al,%es:(%rdi)
    5884:	aa                   	stos   %al,%es:(%rdi)
    5885:	aa                   	stos   %al,%es:(%rdi)
    5886:	aa                   	stos   %al,%es:(%rdi)
    5887:	aa                   	stos   %al,%es:(%rdi)
    5888:	aa                   	stos   %al,%es:(%rdi)
    5889:	aa                   	stos   %al,%es:(%rdi)
    588a:	aa                   	stos   %al,%es:(%rdi)
    588b:	aa                   	stos   %al,%es:(%rdi)
    588c:	aa                   	stos   %al,%es:(%rdi)
    588d:	aa                   	stos   %al,%es:(%rdi)
    588e:	aa                   	stos   %al,%es:(%rdi)
    588f:	aa                   	stos   %al,%es:(%rdi)
    5890:	aa                   	stos   %al,%es:(%rdi)
    5891:	aa                   	stos   %al,%es:(%rdi)
    5892:	aa                   	stos   %al,%es:(%rdi)
    5893:	aa                   	stos   %al,%es:(%rdi)
    5894:	aa                   	stos   %al,%es:(%rdi)
    5895:	aa                   	stos   %al,%es:(%rdi)
    5896:	aa                   	stos   %al,%es:(%rdi)
    5897:	aa                   	stos   %al,%es:(%rdi)
    5898:	aa                   	stos   %al,%es:(%rdi)
    5899:	aa                   	stos   %al,%es:(%rdi)
    589a:	aa                   	stos   %al,%es:(%rdi)
    589b:	aa                   	stos   %al,%es:(%rdi)
    589c:	aa                   	stos   %al,%es:(%rdi)
    589d:	aa                   	stos   %al,%es:(%rdi)
    589e:	aa                   	stos   %al,%es:(%rdi)
    589f:	aa                   	stos   %al,%es:(%rdi)
    58a0:	aa                   	stos   %al,%es:(%rdi)
    58a1:	aa                   	stos   %al,%es:(%rdi)
    58a2:	aa                   	stos   %al,%es:(%rdi)
    58a3:	aa                   	stos   %al,%es:(%rdi)
    58a4:	aa                   	stos   %al,%es:(%rdi)
    58a5:	aa                   	stos   %al,%es:(%rdi)
    58a6:	aa                   	stos   %al,%es:(%rdi)
    58a7:	aa                   	stos   %al,%es:(%rdi)
    58a8:	aa                   	stos   %al,%es:(%rdi)
    58a9:	aa                   	stos   %al,%es:(%rdi)
    58aa:	aa                   	stos   %al,%es:(%rdi)
    58ab:	aa                   	stos   %al,%es:(%rdi)
    58ac:	aa                   	stos   %al,%es:(%rdi)
    58ad:	aa                   	stos   %al,%es:(%rdi)
    58ae:	aa                   	stos   %al,%es:(%rdi)
    58af:	aa                   	stos   %al,%es:(%rdi)
    58b0:	aa                   	stos   %al,%es:(%rdi)
    58b1:	aa                   	stos   %al,%es:(%rdi)
    58b2:	aa                   	stos   %al,%es:(%rdi)
    58b3:	aa                   	stos   %al,%es:(%rdi)
    58b4:	aa                   	stos   %al,%es:(%rdi)
    58b5:	aa                   	stos   %al,%es:(%rdi)
    58b6:	aa                   	stos   %al,%es:(%rdi)
    58b7:	aa                   	stos   %al,%es:(%rdi)
    58b8:	aa                   	stos   %al,%es:(%rdi)
    58b9:	aa                   	stos   %al,%es:(%rdi)
    58ba:	aa                   	stos   %al,%es:(%rdi)
    58bb:	aa                   	stos   %al,%es:(%rdi)
    58bc:	aa                   	stos   %al,%es:(%rdi)
    58bd:	aa                   	stos   %al,%es:(%rdi)
    58be:	aa                   	stos   %al,%es:(%rdi)
    58bf:	aa                   	stos   %al,%es:(%rdi)
    58c0:	aa                   	stos   %al,%es:(%rdi)
    58c1:	aa                   	stos   %al,%es:(%rdi)
    58c2:	aa                   	stos   %al,%es:(%rdi)
    58c3:	aa                   	stos   %al,%es:(%rdi)
    58c4:	aa                   	stos   %al,%es:(%rdi)
    58c5:	aa                   	stos   %al,%es:(%rdi)
    58c6:	aa                   	stos   %al,%es:(%rdi)
    58c7:	aa                   	stos   %al,%es:(%rdi)
    58c8:	aa                   	stos   %al,%es:(%rdi)
    58c9:	aa                   	stos   %al,%es:(%rdi)
    58ca:	aa                   	stos   %al,%es:(%rdi)
    58cb:	aa                   	stos   %al,%es:(%rdi)
    58cc:	aa                   	stos   %al,%es:(%rdi)
    58cd:	aa                   	stos   %al,%es:(%rdi)
    58ce:	aa                   	stos   %al,%es:(%rdi)
    58cf:	aa                   	stos   %al,%es:(%rdi)
    58d0:	aa                   	stos   %al,%es:(%rdi)
    58d1:	aa                   	stos   %al,%es:(%rdi)
    58d2:	aa                   	stos   %al,%es:(%rdi)
    58d3:	aa                   	stos   %al,%es:(%rdi)
    58d4:	aa                   	stos   %al,%es:(%rdi)
    58d5:	aa                   	stos   %al,%es:(%rdi)
    58d6:	aa                   	stos   %al,%es:(%rdi)
    58d7:	aa                   	stos   %al,%es:(%rdi)
    58d8:	aa                   	stos   %al,%es:(%rdi)
    58d9:	aa                   	stos   %al,%es:(%rdi)
    58da:	aa                   	stos   %al,%es:(%rdi)
    58db:	aa                   	stos   %al,%es:(%rdi)
    58dc:	aa                   	stos   %al,%es:(%rdi)
    58dd:	aa                   	stos   %al,%es:(%rdi)
    58de:	aa                   	stos   %al,%es:(%rdi)
    58df:	aa                   	stos   %al,%es:(%rdi)
    58e0:	aa                   	stos   %al,%es:(%rdi)
    58e1:	aa                   	stos   %al,%es:(%rdi)
    58e2:	aa                   	stos   %al,%es:(%rdi)
    58e3:	aa                   	stos   %al,%es:(%rdi)
    58e4:	aa                   	stos   %al,%es:(%rdi)
    58e5:	aa                   	stos   %al,%es:(%rdi)
    58e6:	aa                   	stos   %al,%es:(%rdi)
    58e7:	aa                   	stos   %al,%es:(%rdi)
    58e8:	aa                   	stos   %al,%es:(%rdi)
    58e9:	aa                   	stos   %al,%es:(%rdi)
    58ea:	aa                   	stos   %al,%es:(%rdi)
    58eb:	aa                   	stos   %al,%es:(%rdi)
    58ec:	aa                   	stos   %al,%es:(%rdi)
    58ed:	aa                   	stos   %al,%es:(%rdi)
    58ee:	aa                   	stos   %al,%es:(%rdi)
    58ef:	aa                   	stos   %al,%es:(%rdi)
    58f0:	aa                   	stos   %al,%es:(%rdi)
    58f1:	aa                   	stos   %al,%es:(%rdi)
    58f2:	aa                   	stos   %al,%es:(%rdi)
    58f3:	aa                   	stos   %al,%es:(%rdi)
    58f4:	aa                   	stos   %al,%es:(%rdi)
    58f5:	aa                   	stos   %al,%es:(%rdi)
    58f6:	aa                   	stos   %al,%es:(%rdi)
    58f7:	aa                   	stos   %al,%es:(%rdi)
    58f8:	aa                   	stos   %al,%es:(%rdi)
    58f9:	aa                   	stos   %al,%es:(%rdi)
    58fa:	aa                   	stos   %al,%es:(%rdi)
    58fb:	aa                   	stos   %al,%es:(%rdi)
    58fc:	aa                   	stos   %al,%es:(%rdi)
    58fd:	aa                   	stos   %al,%es:(%rdi)
    58fe:	aa                   	stos   %al,%es:(%rdi)
    58ff:	aa                   	stos   %al,%es:(%rdi)
    5900:	aa                   	stos   %al,%es:(%rdi)
    5901:	aa                   	stos   %al,%es:(%rdi)
    5902:	aa                   	stos   %al,%es:(%rdi)
    5903:	aa                   	stos   %al,%es:(%rdi)
    5904:	aa                   	stos   %al,%es:(%rdi)
    5905:	aa                   	stos   %al,%es:(%rdi)
    5906:	aa                   	stos   %al,%es:(%rdi)
    5907:	aa                   	stos   %al,%es:(%rdi)
    5908:	aa                   	stos   %al,%es:(%rdi)
    5909:	aa                   	stos   %al,%es:(%rdi)
    590a:	aa                   	stos   %al,%es:(%rdi)
    590b:	aa                   	stos   %al,%es:(%rdi)
    590c:	aa                   	stos   %al,%es:(%rdi)
    590d:	aa                   	stos   %al,%es:(%rdi)
    590e:	aa                   	stos   %al,%es:(%rdi)
    590f:	aa                   	stos   %al,%es:(%rdi)
    5910:	aa                   	stos   %al,%es:(%rdi)
    5911:	aa                   	stos   %al,%es:(%rdi)
    5912:	aa                   	stos   %al,%es:(%rdi)
    5913:	aa                   	stos   %al,%es:(%rdi)
    5914:	aa                   	stos   %al,%es:(%rdi)
    5915:	aa                   	stos   %al,%es:(%rdi)
    5916:	aa                   	stos   %al,%es:(%rdi)
    5917:	aa                   	stos   %al,%es:(%rdi)
    5918:	aa                   	stos   %al,%es:(%rdi)
    5919:	aa                   	stos   %al,%es:(%rdi)
    591a:	aa                   	stos   %al,%es:(%rdi)
    591b:	aa                   	stos   %al,%es:(%rdi)
    591c:	aa                   	stos   %al,%es:(%rdi)
    591d:	aa                   	stos   %al,%es:(%rdi)
    591e:	aa                   	stos   %al,%es:(%rdi)
    591f:	aa                   	stos   %al,%es:(%rdi)
    5920:	aa                   	stos   %al,%es:(%rdi)
    5921:	aa                   	stos   %al,%es:(%rdi)
    5922:	aa                   	stos   %al,%es:(%rdi)
    5923:	aa                   	stos   %al,%es:(%rdi)
    5924:	aa                   	stos   %al,%es:(%rdi)
    5925:	aa                   	stos   %al,%es:(%rdi)
    5926:	aa                   	stos   %al,%es:(%rdi)
    5927:	aa                   	stos   %al,%es:(%rdi)
    5928:	aa                   	stos   %al,%es:(%rdi)
    5929:	aa                   	stos   %al,%es:(%rdi)
    592a:	aa                   	stos   %al,%es:(%rdi)
    592b:	aa                   	stos   %al,%es:(%rdi)
    592c:	aa                   	stos   %al,%es:(%rdi)
    592d:	aa                   	stos   %al,%es:(%rdi)
    592e:	aa                   	stos   %al,%es:(%rdi)
    592f:	aa                   	stos   %al,%es:(%rdi)
    5930:	aa                   	stos   %al,%es:(%rdi)
    5931:	aa                   	stos   %al,%es:(%rdi)
    5932:	aa                   	stos   %al,%es:(%rdi)
    5933:	aa                   	stos   %al,%es:(%rdi)
    5934:	aa                   	stos   %al,%es:(%rdi)
    5935:	aa                   	stos   %al,%es:(%rdi)
    5936:	aa                   	stos   %al,%es:(%rdi)
    5937:	aa                   	stos   %al,%es:(%rdi)
    5938:	aa                   	stos   %al,%es:(%rdi)
    5939:	aa                   	stos   %al,%es:(%rdi)
    593a:	aa                   	stos   %al,%es:(%rdi)
    593b:	aa                   	stos   %al,%es:(%rdi)
    593c:	aa                   	stos   %al,%es:(%rdi)
    593d:	aa                   	stos   %al,%es:(%rdi)
    593e:	aa                   	stos   %al,%es:(%rdi)
    593f:	aa                   	stos   %al,%es:(%rdi)
    5940:	aa                   	stos   %al,%es:(%rdi)
    5941:	aa                   	stos   %al,%es:(%rdi)
    5942:	aa                   	stos   %al,%es:(%rdi)
    5943:	aa                   	stos   %al,%es:(%rdi)
    5944:	aa                   	stos   %al,%es:(%rdi)
    5945:	aa                   	stos   %al,%es:(%rdi)
    5946:	aa                   	stos   %al,%es:(%rdi)
    5947:	aa                   	stos   %al,%es:(%rdi)
    5948:	aa                   	stos   %al,%es:(%rdi)
    5949:	aa                   	stos   %al,%es:(%rdi)
    594a:	aa                   	stos   %al,%es:(%rdi)
    594b:	aa                   	stos   %al,%es:(%rdi)
    594c:	aa                   	stos   %al,%es:(%rdi)
    594d:	aa                   	stos   %al,%es:(%rdi)
    594e:	aa                   	stos   %al,%es:(%rdi)
    594f:	aa                   	stos   %al,%es:(%rdi)
    5950:	aa                   	stos   %al,%es:(%rdi)
    5951:	aa                   	stos   %al,%es:(%rdi)
    5952:	aa                   	stos   %al,%es:(%rdi)
    5953:	aa                   	stos   %al,%es:(%rdi)
    5954:	aa                   	stos   %al,%es:(%rdi)
    5955:	aa                   	stos   %al,%es:(%rdi)
    5956:	aa                   	stos   %al,%es:(%rdi)
    5957:	aa                   	stos   %al,%es:(%rdi)
    5958:	aa                   	stos   %al,%es:(%rdi)
    5959:	aa                   	stos   %al,%es:(%rdi)
    595a:	aa                   	stos   %al,%es:(%rdi)
    595b:	aa                   	stos   %al,%es:(%rdi)
    595c:	aa                   	stos   %al,%es:(%rdi)
    595d:	aa                   	stos   %al,%es:(%rdi)
    595e:	aa                   	stos   %al,%es:(%rdi)
    595f:	aa                   	stos   %al,%es:(%rdi)
    5960:	aa                   	stos   %al,%es:(%rdi)
    5961:	aa                   	stos   %al,%es:(%rdi)
    5962:	aa                   	stos   %al,%es:(%rdi)
    5963:	aa                   	stos   %al,%es:(%rdi)
    5964:	aa                   	stos   %al,%es:(%rdi)
    5965:	aa                   	stos   %al,%es:(%rdi)
    5966:	aa                   	stos   %al,%es:(%rdi)
    5967:	aa                   	stos   %al,%es:(%rdi)
    5968:	aa                   	stos   %al,%es:(%rdi)
    5969:	aa                   	stos   %al,%es:(%rdi)
    596a:	aa                   	stos   %al,%es:(%rdi)
    596b:	aa                   	stos   %al,%es:(%rdi)
    596c:	aa                   	stos   %al,%es:(%rdi)
    596d:	aa                   	stos   %al,%es:(%rdi)
    596e:	aa                   	stos   %al,%es:(%rdi)
    596f:	aa                   	stos   %al,%es:(%rdi)
    5970:	aa                   	stos   %al,%es:(%rdi)
    5971:	aa                   	stos   %al,%es:(%rdi)
    5972:	aa                   	stos   %al,%es:(%rdi)
    5973:	aa                   	stos   %al,%es:(%rdi)
    5974:	aa                   	stos   %al,%es:(%rdi)
    5975:	aa                   	stos   %al,%es:(%rdi)
    5976:	aa                   	stos   %al,%es:(%rdi)
    5977:	aa                   	stos   %al,%es:(%rdi)
    5978:	aa                   	stos   %al,%es:(%rdi)
    5979:	aa                   	stos   %al,%es:(%rdi)
    597a:	aa                   	stos   %al,%es:(%rdi)
    597b:	aa                   	stos   %al,%es:(%rdi)
    597c:	aa                   	stos   %al,%es:(%rdi)
    597d:	aa                   	stos   %al,%es:(%rdi)
    597e:	aa                   	stos   %al,%es:(%rdi)
    597f:	aa                   	stos   %al,%es:(%rdi)
    5980:	aa                   	stos   %al,%es:(%rdi)
    5981:	aa                   	stos   %al,%es:(%rdi)
    5982:	aa                   	stos   %al,%es:(%rdi)
    5983:	aa                   	stos   %al,%es:(%rdi)
    5984:	aa                   	stos   %al,%es:(%rdi)
    5985:	aa                   	stos   %al,%es:(%rdi)
    5986:	aa                   	stos   %al,%es:(%rdi)
    5987:	aa                   	stos   %al,%es:(%rdi)
    5988:	aa                   	stos   %al,%es:(%rdi)
    5989:	aa                   	stos   %al,%es:(%rdi)
    598a:	aa                   	stos   %al,%es:(%rdi)
    598b:	aa                   	stos   %al,%es:(%rdi)
    598c:	aa                   	stos   %al,%es:(%rdi)
    598d:	aa                   	stos   %al,%es:(%rdi)
    598e:	aa                   	stos   %al,%es:(%rdi)
    598f:	aa                   	stos   %al,%es:(%rdi)
    5990:	aa                   	stos   %al,%es:(%rdi)
    5991:	aa                   	stos   %al,%es:(%rdi)
    5992:	aa                   	stos   %al,%es:(%rdi)
    5993:	aa                   	stos   %al,%es:(%rdi)
    5994:	aa                   	stos   %al,%es:(%rdi)
    5995:	aa                   	stos   %al,%es:(%rdi)
    5996:	aa                   	stos   %al,%es:(%rdi)
    5997:	aa                   	stos   %al,%es:(%rdi)
    5998:	aa                   	stos   %al,%es:(%rdi)
    5999:	aa                   	stos   %al,%es:(%rdi)
    599a:	aa                   	stos   %al,%es:(%rdi)
    599b:	aa                   	stos   %al,%es:(%rdi)
    599c:	aa                   	stos   %al,%es:(%rdi)
    599d:	aa                   	stos   %al,%es:(%rdi)
    599e:	aa                   	stos   %al,%es:(%rdi)
    599f:	aa                   	stos   %al,%es:(%rdi)
    59a0:	aa                   	stos   %al,%es:(%rdi)
    59a1:	aa                   	stos   %al,%es:(%rdi)
    59a2:	aa                   	stos   %al,%es:(%rdi)
    59a3:	aa                   	stos   %al,%es:(%rdi)
    59a4:	aa                   	stos   %al,%es:(%rdi)
    59a5:	aa                   	stos   %al,%es:(%rdi)
    59a6:	aa                   	stos   %al,%es:(%rdi)
    59a7:	aa                   	stos   %al,%es:(%rdi)
    59a8:	aa                   	stos   %al,%es:(%rdi)
    59a9:	aa                   	stos   %al,%es:(%rdi)
    59aa:	aa                   	stos   %al,%es:(%rdi)
    59ab:	aa                   	stos   %al,%es:(%rdi)
    59ac:	aa                   	stos   %al,%es:(%rdi)
    59ad:	aa                   	stos   %al,%es:(%rdi)
    59ae:	aa                   	stos   %al,%es:(%rdi)
    59af:	aa                   	stos   %al,%es:(%rdi)
    59b0:	aa                   	stos   %al,%es:(%rdi)
    59b1:	aa                   	stos   %al,%es:(%rdi)
    59b2:	aa                   	stos   %al,%es:(%rdi)
    59b3:	aa                   	stos   %al,%es:(%rdi)
    59b4:	aa                   	stos   %al,%es:(%rdi)
    59b5:	aa                   	stos   %al,%es:(%rdi)
    59b6:	aa                   	stos   %al,%es:(%rdi)
    59b7:	aa                   	stos   %al,%es:(%rdi)
    59b8:	aa                   	stos   %al,%es:(%rdi)
    59b9:	aa                   	stos   %al,%es:(%rdi)
    59ba:	aa                   	stos   %al,%es:(%rdi)
    59bb:	aa                   	stos   %al,%es:(%rdi)
    59bc:	aa                   	stos   %al,%es:(%rdi)
    59bd:	aa                   	stos   %al,%es:(%rdi)
    59be:	aa                   	stos   %al,%es:(%rdi)
    59bf:	aa                   	stos   %al,%es:(%rdi)
    59c0:	aa                   	stos   %al,%es:(%rdi)
    59c1:	aa                   	stos   %al,%es:(%rdi)
    59c2:	aa                   	stos   %al,%es:(%rdi)
    59c3:	aa                   	stos   %al,%es:(%rdi)
    59c4:	aa                   	stos   %al,%es:(%rdi)
    59c5:	aa                   	stos   %al,%es:(%rdi)
    59c6:	aa                   	stos   %al,%es:(%rdi)
    59c7:	aa                   	stos   %al,%es:(%rdi)
    59c8:	aa                   	stos   %al,%es:(%rdi)
    59c9:	aa                   	stos   %al,%es:(%rdi)
    59ca:	aa                   	stos   %al,%es:(%rdi)
    59cb:	aa                   	stos   %al,%es:(%rdi)
    59cc:	aa                   	stos   %al,%es:(%rdi)
    59cd:	aa                   	stos   %al,%es:(%rdi)
    59ce:	aa                   	stos   %al,%es:(%rdi)
    59cf:	aa                   	stos   %al,%es:(%rdi)
    59d0:	aa                   	stos   %al,%es:(%rdi)
    59d1:	aa                   	stos   %al,%es:(%rdi)
    59d2:	aa                   	stos   %al,%es:(%rdi)
    59d3:	aa                   	stos   %al,%es:(%rdi)
    59d4:	aa                   	stos   %al,%es:(%rdi)
    59d5:	aa                   	stos   %al,%es:(%rdi)
    59d6:	aa                   	stos   %al,%es:(%rdi)
    59d7:	aa                   	stos   %al,%es:(%rdi)
    59d8:	aa                   	stos   %al,%es:(%rdi)
    59d9:	aa                   	stos   %al,%es:(%rdi)
    59da:	aa                   	stos   %al,%es:(%rdi)
    59db:	aa                   	stos   %al,%es:(%rdi)
    59dc:	aa                   	stos   %al,%es:(%rdi)
    59dd:	aa                   	stos   %al,%es:(%rdi)
    59de:	aa                   	stos   %al,%es:(%rdi)
    59df:	aa                   	stos   %al,%es:(%rdi)
    59e0:	aa                   	stos   %al,%es:(%rdi)
    59e1:	aa                   	stos   %al,%es:(%rdi)
    59e2:	aa                   	stos   %al,%es:(%rdi)
    59e3:	aa                   	stos   %al,%es:(%rdi)
    59e4:	aa                   	stos   %al,%es:(%rdi)
    59e5:	aa                   	stos   %al,%es:(%rdi)
    59e6:	aa                   	stos   %al,%es:(%rdi)
    59e7:	aa                   	stos   %al,%es:(%rdi)
    59e8:	aa                   	stos   %al,%es:(%rdi)
    59e9:	aa                   	stos   %al,%es:(%rdi)
    59ea:	aa                   	stos   %al,%es:(%rdi)
    59eb:	aa                   	stos   %al,%es:(%rdi)
    59ec:	aa                   	stos   %al,%es:(%rdi)
    59ed:	aa                   	stos   %al,%es:(%rdi)
    59ee:	aa                   	stos   %al,%es:(%rdi)
    59ef:	aa                   	stos   %al,%es:(%rdi)
    59f0:	aa                   	stos   %al,%es:(%rdi)
    59f1:	aa                   	stos   %al,%es:(%rdi)
    59f2:	aa                   	stos   %al,%es:(%rdi)
    59f3:	aa                   	stos   %al,%es:(%rdi)
    59f4:	aa                   	stos   %al,%es:(%rdi)
    59f5:	aa                   	stos   %al,%es:(%rdi)
    59f6:	aa                   	stos   %al,%es:(%rdi)
    59f7:	aa                   	stos   %al,%es:(%rdi)
    59f8:	aa                   	stos   %al,%es:(%rdi)
    59f9:	aa                   	stos   %al,%es:(%rdi)
    59fa:	aa                   	stos   %al,%es:(%rdi)
    59fb:	aa                   	stos   %al,%es:(%rdi)
    59fc:	aa                   	stos   %al,%es:(%rdi)
    59fd:	aa                   	stos   %al,%es:(%rdi)
    59fe:	aa                   	stos   %al,%es:(%rdi)
    59ff:	aa                   	stos   %al,%es:(%rdi)
    5a00:	aa                   	stos   %al,%es:(%rdi)
    5a01:	aa                   	stos   %al,%es:(%rdi)
    5a02:	aa                   	stos   %al,%es:(%rdi)
    5a03:	aa                   	stos   %al,%es:(%rdi)
    5a04:	aa                   	stos   %al,%es:(%rdi)
    5a05:	aa                   	stos   %al,%es:(%rdi)
    5a06:	aa                   	stos   %al,%es:(%rdi)
    5a07:	aa                   	stos   %al,%es:(%rdi)
    5a08:	aa                   	stos   %al,%es:(%rdi)
    5a09:	aa                   	stos   %al,%es:(%rdi)
    5a0a:	aa                   	stos   %al,%es:(%rdi)
    5a0b:	aa                   	stos   %al,%es:(%rdi)
    5a0c:	aa                   	stos   %al,%es:(%rdi)
    5a0d:	aa                   	stos   %al,%es:(%rdi)
    5a0e:	aa                   	stos   %al,%es:(%rdi)
    5a0f:	aa                   	stos   %al,%es:(%rdi)
    5a10:	aa                   	stos   %al,%es:(%rdi)
    5a11:	aa                   	stos   %al,%es:(%rdi)
    5a12:	aa                   	stos   %al,%es:(%rdi)
    5a13:	aa                   	stos   %al,%es:(%rdi)
    5a14:	aa                   	stos   %al,%es:(%rdi)
    5a15:	aa                   	stos   %al,%es:(%rdi)
    5a16:	aa                   	stos   %al,%es:(%rdi)
    5a17:	aa                   	stos   %al,%es:(%rdi)
    5a18:	aa                   	stos   %al,%es:(%rdi)
    5a19:	aa                   	stos   %al,%es:(%rdi)
    5a1a:	aa                   	stos   %al,%es:(%rdi)
    5a1b:	aa                   	stos   %al,%es:(%rdi)
    5a1c:	aa                   	stos   %al,%es:(%rdi)
    5a1d:	aa                   	stos   %al,%es:(%rdi)
    5a1e:	aa                   	stos   %al,%es:(%rdi)
    5a1f:	aa                   	stos   %al,%es:(%rdi)
    5a20:	aa                   	stos   %al,%es:(%rdi)
    5a21:	aa                   	stos   %al,%es:(%rdi)
    5a22:	aa                   	stos   %al,%es:(%rdi)
    5a23:	aa                   	stos   %al,%es:(%rdi)
    5a24:	aa                   	stos   %al,%es:(%rdi)
    5a25:	aa                   	stos   %al,%es:(%rdi)
    5a26:	aa                   	stos   %al,%es:(%rdi)
    5a27:	aa                   	stos   %al,%es:(%rdi)
    5a28:	aa                   	stos   %al,%es:(%rdi)
    5a29:	aa                   	stos   %al,%es:(%rdi)
    5a2a:	aa                   	stos   %al,%es:(%rdi)
    5a2b:	aa                   	stos   %al,%es:(%rdi)
    5a2c:	aa                   	stos   %al,%es:(%rdi)
    5a2d:	aa                   	stos   %al,%es:(%rdi)
    5a2e:	aa                   	stos   %al,%es:(%rdi)
    5a2f:	aa                   	stos   %al,%es:(%rdi)
    5a30:	aa                   	stos   %al,%es:(%rdi)
    5a31:	aa                   	stos   %al,%es:(%rdi)
    5a32:	aa                   	stos   %al,%es:(%rdi)
    5a33:	aa                   	stos   %al,%es:(%rdi)
    5a34:	aa                   	stos   %al,%es:(%rdi)
    5a35:	aa                   	stos   %al,%es:(%rdi)
    5a36:	aa                   	stos   %al,%es:(%rdi)
    5a37:	aa                   	stos   %al,%es:(%rdi)
    5a38:	aa                   	stos   %al,%es:(%rdi)
    5a39:	aa                   	stos   %al,%es:(%rdi)
    5a3a:	aa                   	stos   %al,%es:(%rdi)
    5a3b:	aa                   	stos   %al,%es:(%rdi)
    5a3c:	aa                   	stos   %al,%es:(%rdi)
    5a3d:	aa                   	stos   %al,%es:(%rdi)
    5a3e:	aa                   	stos   %al,%es:(%rdi)
    5a3f:	aa                   	stos   %al,%es:(%rdi)
    5a40:	aa                   	stos   %al,%es:(%rdi)
    5a41:	aa                   	stos   %al,%es:(%rdi)
    5a42:	aa                   	stos   %al,%es:(%rdi)
    5a43:	aa                   	stos   %al,%es:(%rdi)
    5a44:	aa                   	stos   %al,%es:(%rdi)
    5a45:	aa                   	stos   %al,%es:(%rdi)
    5a46:	aa                   	stos   %al,%es:(%rdi)
    5a47:	aa                   	stos   %al,%es:(%rdi)
    5a48:	aa                   	stos   %al,%es:(%rdi)
    5a49:	aa                   	stos   %al,%es:(%rdi)
    5a4a:	aa                   	stos   %al,%es:(%rdi)
    5a4b:	aa                   	stos   %al,%es:(%rdi)
    5a4c:	aa                   	stos   %al,%es:(%rdi)
    5a4d:	aa                   	stos   %al,%es:(%rdi)
    5a4e:	aa                   	stos   %al,%es:(%rdi)
    5a4f:	aa                   	stos   %al,%es:(%rdi)
    5a50:	aa                   	stos   %al,%es:(%rdi)
    5a51:	aa                   	stos   %al,%es:(%rdi)
    5a52:	aa                   	stos   %al,%es:(%rdi)
    5a53:	aa                   	stos   %al,%es:(%rdi)
    5a54:	aa                   	stos   %al,%es:(%rdi)
    5a55:	aa                   	stos   %al,%es:(%rdi)
    5a56:	aa                   	stos   %al,%es:(%rdi)
    5a57:	aa                   	stos   %al,%es:(%rdi)
    5a58:	aa                   	stos   %al,%es:(%rdi)
    5a59:	aa                   	stos   %al,%es:(%rdi)
    5a5a:	aa                   	stos   %al,%es:(%rdi)
    5a5b:	aa                   	stos   %al,%es:(%rdi)
    5a5c:	aa                   	stos   %al,%es:(%rdi)
    5a5d:	aa                   	stos   %al,%es:(%rdi)
    5a5e:	aa                   	stos   %al,%es:(%rdi)
    5a5f:	aa                   	stos   %al,%es:(%rdi)
    5a60:	aa                   	stos   %al,%es:(%rdi)
    5a61:	aa                   	stos   %al,%es:(%rdi)
    5a62:	aa                   	stos   %al,%es:(%rdi)
    5a63:	aa                   	stos   %al,%es:(%rdi)
    5a64:	aa                   	stos   %al,%es:(%rdi)
    5a65:	aa                   	stos   %al,%es:(%rdi)
    5a66:	aa                   	stos   %al,%es:(%rdi)
    5a67:	aa                   	stos   %al,%es:(%rdi)
    5a68:	aa                   	stos   %al,%es:(%rdi)
    5a69:	aa                   	stos   %al,%es:(%rdi)
    5a6a:	aa                   	stos   %al,%es:(%rdi)
    5a6b:	aa                   	stos   %al,%es:(%rdi)
    5a6c:	aa                   	stos   %al,%es:(%rdi)
    5a6d:	aa                   	stos   %al,%es:(%rdi)
    5a6e:	aa                   	stos   %al,%es:(%rdi)
    5a6f:	aa                   	stos   %al,%es:(%rdi)
    5a70:	aa                   	stos   %al,%es:(%rdi)
    5a71:	aa                   	stos   %al,%es:(%rdi)
    5a72:	aa                   	stos   %al,%es:(%rdi)
    5a73:	aa                   	stos   %al,%es:(%rdi)
    5a74:	aa                   	stos   %al,%es:(%rdi)
    5a75:	aa                   	stos   %al,%es:(%rdi)
    5a76:	aa                   	stos   %al,%es:(%rdi)
    5a77:	aa                   	stos   %al,%es:(%rdi)
    5a78:	aa                   	stos   %al,%es:(%rdi)
    5a79:	aa                   	stos   %al,%es:(%rdi)
    5a7a:	aa                   	stos   %al,%es:(%rdi)
    5a7b:	aa                   	stos   %al,%es:(%rdi)
    5a7c:	aa                   	stos   %al,%es:(%rdi)
    5a7d:	aa                   	stos   %al,%es:(%rdi)
    5a7e:	aa                   	stos   %al,%es:(%rdi)
    5a7f:	aa                   	stos   %al,%es:(%rdi)
    5a80:	aa                   	stos   %al,%es:(%rdi)
    5a81:	aa                   	stos   %al,%es:(%rdi)
    5a82:	aa                   	stos   %al,%es:(%rdi)
    5a83:	aa                   	stos   %al,%es:(%rdi)
    5a84:	aa                   	stos   %al,%es:(%rdi)
    5a85:	aa                   	stos   %al,%es:(%rdi)
    5a86:	aa                   	stos   %al,%es:(%rdi)
    5a87:	aa                   	stos   %al,%es:(%rdi)
    5a88:	aa                   	stos   %al,%es:(%rdi)
    5a89:	aa                   	stos   %al,%es:(%rdi)
    5a8a:	aa                   	stos   %al,%es:(%rdi)
    5a8b:	aa                   	stos   %al,%es:(%rdi)
    5a8c:	aa                   	stos   %al,%es:(%rdi)
    5a8d:	aa                   	stos   %al,%es:(%rdi)
    5a8e:	aa                   	stos   %al,%es:(%rdi)
    5a8f:	aa                   	stos   %al,%es:(%rdi)
    5a90:	aa                   	stos   %al,%es:(%rdi)
    5a91:	aa                   	stos   %al,%es:(%rdi)
    5a92:	aa                   	stos   %al,%es:(%rdi)
    5a93:	aa                   	stos   %al,%es:(%rdi)
    5a94:	aa                   	stos   %al,%es:(%rdi)
    5a95:	aa                   	stos   %al,%es:(%rdi)
    5a96:	aa                   	stos   %al,%es:(%rdi)
    5a97:	aa                   	stos   %al,%es:(%rdi)
    5a98:	aa                   	stos   %al,%es:(%rdi)
    5a99:	aa                   	stos   %al,%es:(%rdi)
    5a9a:	aa                   	stos   %al,%es:(%rdi)
    5a9b:	aa                   	stos   %al,%es:(%rdi)
    5a9c:	aa                   	stos   %al,%es:(%rdi)
    5a9d:	aa                   	stos   %al,%es:(%rdi)
    5a9e:	aa                   	stos   %al,%es:(%rdi)
    5a9f:	aa                   	stos   %al,%es:(%rdi)
    5aa0:	aa                   	stos   %al,%es:(%rdi)
    5aa1:	aa                   	stos   %al,%es:(%rdi)
    5aa2:	aa                   	stos   %al,%es:(%rdi)
    5aa3:	aa                   	stos   %al,%es:(%rdi)
    5aa4:	aa                   	stos   %al,%es:(%rdi)
    5aa5:	aa                   	stos   %al,%es:(%rdi)
    5aa6:	aa                   	stos   %al,%es:(%rdi)
    5aa7:	aa                   	stos   %al,%es:(%rdi)
    5aa8:	aa                   	stos   %al,%es:(%rdi)
    5aa9:	aa                   	stos   %al,%es:(%rdi)
    5aaa:	aa                   	stos   %al,%es:(%rdi)
    5aab:	aa                   	stos   %al,%es:(%rdi)
    5aac:	aa                   	stos   %al,%es:(%rdi)
    5aad:	aa                   	stos   %al,%es:(%rdi)
    5aae:	aa                   	stos   %al,%es:(%rdi)
    5aaf:	aa                   	stos   %al,%es:(%rdi)
    5ab0:	aa                   	stos   %al,%es:(%rdi)
    5ab1:	aa                   	stos   %al,%es:(%rdi)
    5ab2:	aa                   	stos   %al,%es:(%rdi)
    5ab3:	aa                   	stos   %al,%es:(%rdi)
    5ab4:	aa                   	stos   %al,%es:(%rdi)
    5ab5:	aa                   	stos   %al,%es:(%rdi)
    5ab6:	aa                   	stos   %al,%es:(%rdi)
    5ab7:	aa                   	stos   %al,%es:(%rdi)
    5ab8:	aa                   	stos   %al,%es:(%rdi)
    5ab9:	aa                   	stos   %al,%es:(%rdi)
    5aba:	aa                   	stos   %al,%es:(%rdi)
    5abb:	aa                   	stos   %al,%es:(%rdi)
    5abc:	aa                   	stos   %al,%es:(%rdi)
    5abd:	aa                   	stos   %al,%es:(%rdi)
    5abe:	aa                   	stos   %al,%es:(%rdi)
    5abf:	aa                   	stos   %al,%es:(%rdi)
    5ac0:	aa                   	stos   %al,%es:(%rdi)
    5ac1:	aa                   	stos   %al,%es:(%rdi)
    5ac2:	aa                   	stos   %al,%es:(%rdi)
    5ac3:	aa                   	stos   %al,%es:(%rdi)
    5ac4:	aa                   	stos   %al,%es:(%rdi)
    5ac5:	aa                   	stos   %al,%es:(%rdi)
    5ac6:	aa                   	stos   %al,%es:(%rdi)
    5ac7:	aa                   	stos   %al,%es:(%rdi)
    5ac8:	aa                   	stos   %al,%es:(%rdi)
    5ac9:	aa                   	stos   %al,%es:(%rdi)
    5aca:	aa                   	stos   %al,%es:(%rdi)
    5acb:	aa                   	stos   %al,%es:(%rdi)
    5acc:	aa                   	stos   %al,%es:(%rdi)
    5acd:	aa                   	stos   %al,%es:(%rdi)
    5ace:	aa                   	stos   %al,%es:(%rdi)
    5acf:	aa                   	stos   %al,%es:(%rdi)
    5ad0:	aa                   	stos   %al,%es:(%rdi)
    5ad1:	aa                   	stos   %al,%es:(%rdi)
    5ad2:	aa                   	stos   %al,%es:(%rdi)
    5ad3:	aa                   	stos   %al,%es:(%rdi)
    5ad4:	aa                   	stos   %al,%es:(%rdi)
    5ad5:	aa                   	stos   %al,%es:(%rdi)
    5ad6:	aa                   	stos   %al,%es:(%rdi)
    5ad7:	aa                   	stos   %al,%es:(%rdi)
    5ad8:	aa                   	stos   %al,%es:(%rdi)
    5ad9:	aa                   	stos   %al,%es:(%rdi)
    5ada:	aa                   	stos   %al,%es:(%rdi)
    5adb:	aa                   	stos   %al,%es:(%rdi)
    5adc:	aa                   	stos   %al,%es:(%rdi)
    5add:	aa                   	stos   %al,%es:(%rdi)
    5ade:	aa                   	stos   %al,%es:(%rdi)
    5adf:	aa                   	stos   %al,%es:(%rdi)
    5ae0:	aa                   	stos   %al,%es:(%rdi)
    5ae1:	aa                   	stos   %al,%es:(%rdi)
    5ae2:	aa                   	stos   %al,%es:(%rdi)
    5ae3:	aa                   	stos   %al,%es:(%rdi)
    5ae4:	aa                   	stos   %al,%es:(%rdi)
    5ae5:	aa                   	stos   %al,%es:(%rdi)
    5ae6:	aa                   	stos   %al,%es:(%rdi)
    5ae7:	aa                   	stos   %al,%es:(%rdi)
    5ae8:	aa                   	stos   %al,%es:(%rdi)
    5ae9:	aa                   	stos   %al,%es:(%rdi)
    5aea:	aa                   	stos   %al,%es:(%rdi)
    5aeb:	aa                   	stos   %al,%es:(%rdi)
    5aec:	aa                   	stos   %al,%es:(%rdi)
    5aed:	aa                   	stos   %al,%es:(%rdi)
    5aee:	aa                   	stos   %al,%es:(%rdi)
    5aef:	aa                   	stos   %al,%es:(%rdi)
    5af0:	aa                   	stos   %al,%es:(%rdi)
    5af1:	aa                   	stos   %al,%es:(%rdi)
    5af2:	aa                   	stos   %al,%es:(%rdi)
    5af3:	aa                   	stos   %al,%es:(%rdi)
    5af4:	aa                   	stos   %al,%es:(%rdi)
    5af5:	aa                   	stos   %al,%es:(%rdi)
    5af6:	aa                   	stos   %al,%es:(%rdi)
    5af7:	aa                   	stos   %al,%es:(%rdi)
    5af8:	aa                   	stos   %al,%es:(%rdi)
    5af9:	aa                   	stos   %al,%es:(%rdi)
    5afa:	aa                   	stos   %al,%es:(%rdi)
    5afb:	aa                   	stos   %al,%es:(%rdi)
    5afc:	aa                   	stos   %al,%es:(%rdi)
    5afd:	aa                   	stos   %al,%es:(%rdi)
    5afe:	aa                   	stos   %al,%es:(%rdi)
    5aff:	aa                   	stos   %al,%es:(%rdi)
    5b00:	aa                   	stos   %al,%es:(%rdi)
    5b01:	aa                   	stos   %al,%es:(%rdi)
    5b02:	aa                   	stos   %al,%es:(%rdi)
    5b03:	aa                   	stos   %al,%es:(%rdi)
    5b04:	aa                   	stos   %al,%es:(%rdi)
    5b05:	aa                   	stos   %al,%es:(%rdi)
    5b06:	aa                   	stos   %al,%es:(%rdi)
    5b07:	aa                   	stos   %al,%es:(%rdi)
    5b08:	aa                   	stos   %al,%es:(%rdi)
    5b09:	aa                   	stos   %al,%es:(%rdi)
    5b0a:	aa                   	stos   %al,%es:(%rdi)
    5b0b:	aa                   	stos   %al,%es:(%rdi)
    5b0c:	aa                   	stos   %al,%es:(%rdi)
    5b0d:	aa                   	stos   %al,%es:(%rdi)
    5b0e:	aa                   	stos   %al,%es:(%rdi)
    5b0f:	aa                   	stos   %al,%es:(%rdi)
    5b10:	aa                   	stos   %al,%es:(%rdi)
    5b11:	aa                   	stos   %al,%es:(%rdi)
    5b12:	aa                   	stos   %al,%es:(%rdi)
    5b13:	aa                   	stos   %al,%es:(%rdi)
    5b14:	aa                   	stos   %al,%es:(%rdi)
    5b15:	aa                   	stos   %al,%es:(%rdi)
    5b16:	aa                   	stos   %al,%es:(%rdi)
    5b17:	aa                   	stos   %al,%es:(%rdi)
    5b18:	aa                   	stos   %al,%es:(%rdi)
    5b19:	aa                   	stos   %al,%es:(%rdi)
    5b1a:	aa                   	stos   %al,%es:(%rdi)
    5b1b:	aa                   	stos   %al,%es:(%rdi)
    5b1c:	aa                   	stos   %al,%es:(%rdi)
    5b1d:	aa                   	stos   %al,%es:(%rdi)
    5b1e:	aa                   	stos   %al,%es:(%rdi)
    5b1f:	aa                   	stos   %al,%es:(%rdi)
    5b20:	aa                   	stos   %al,%es:(%rdi)
    5b21:	aa                   	stos   %al,%es:(%rdi)
    5b22:	aa                   	stos   %al,%es:(%rdi)
    5b23:	aa                   	stos   %al,%es:(%rdi)
    5b24:	aa                   	stos   %al,%es:(%rdi)
    5b25:	aa                   	stos   %al,%es:(%rdi)
    5b26:	aa                   	stos   %al,%es:(%rdi)
    5b27:	aa                   	stos   %al,%es:(%rdi)
    5b28:	aa                   	stos   %al,%es:(%rdi)
    5b29:	aa                   	stos   %al,%es:(%rdi)
    5b2a:	aa                   	stos   %al,%es:(%rdi)
    5b2b:	aa                   	stos   %al,%es:(%rdi)
    5b2c:	aa                   	stos   %al,%es:(%rdi)
    5b2d:	aa                   	stos   %al,%es:(%rdi)
    5b2e:	aa                   	stos   %al,%es:(%rdi)
    5b2f:	aa                   	stos   %al,%es:(%rdi)
    5b30:	aa                   	stos   %al,%es:(%rdi)
    5b31:	aa                   	stos   %al,%es:(%rdi)
    5b32:	aa                   	stos   %al,%es:(%rdi)
    5b33:	aa                   	stos   %al,%es:(%rdi)
    5b34:	aa                   	stos   %al,%es:(%rdi)
    5b35:	aa                   	stos   %al,%es:(%rdi)
    5b36:	aa                   	stos   %al,%es:(%rdi)
    5b37:	aa                   	stos   %al,%es:(%rdi)
    5b38:	aa                   	stos   %al,%es:(%rdi)
    5b39:	aa                   	stos   %al,%es:(%rdi)
    5b3a:	aa                   	stos   %al,%es:(%rdi)
    5b3b:	aa                   	stos   %al,%es:(%rdi)
    5b3c:	aa                   	stos   %al,%es:(%rdi)
    5b3d:	aa                   	stos   %al,%es:(%rdi)
    5b3e:	aa                   	stos   %al,%es:(%rdi)
    5b3f:	aa                   	stos   %al,%es:(%rdi)
    5b40:	aa                   	stos   %al,%es:(%rdi)
    5b41:	aa                   	stos   %al,%es:(%rdi)
    5b42:	aa                   	stos   %al,%es:(%rdi)
    5b43:	aa                   	stos   %al,%es:(%rdi)
    5b44:	aa                   	stos   %al,%es:(%rdi)
    5b45:	aa                   	stos   %al,%es:(%rdi)
    5b46:	aa                   	stos   %al,%es:(%rdi)
    5b47:	aa                   	stos   %al,%es:(%rdi)
    5b48:	aa                   	stos   %al,%es:(%rdi)
    5b49:	aa                   	stos   %al,%es:(%rdi)
    5b4a:	aa                   	stos   %al,%es:(%rdi)
    5b4b:	aa                   	stos   %al,%es:(%rdi)
    5b4c:	aa                   	stos   %al,%es:(%rdi)
    5b4d:	aa                   	stos   %al,%es:(%rdi)
    5b4e:	aa                   	stos   %al,%es:(%rdi)
    5b4f:	aa                   	stos   %al,%es:(%rdi)
    5b50:	aa                   	stos   %al,%es:(%rdi)
    5b51:	aa                   	stos   %al,%es:(%rdi)
    5b52:	aa                   	stos   %al,%es:(%rdi)
    5b53:	aa                   	stos   %al,%es:(%rdi)
    5b54:	aa                   	stos   %al,%es:(%rdi)
    5b55:	aa                   	stos   %al,%es:(%rdi)
    5b56:	aa                   	stos   %al,%es:(%rdi)
    5b57:	aa                   	stos   %al,%es:(%rdi)
    5b58:	aa                   	stos   %al,%es:(%rdi)
    5b59:	aa                   	stos   %al,%es:(%rdi)
    5b5a:	aa                   	stos   %al,%es:(%rdi)
    5b5b:	aa                   	stos   %al,%es:(%rdi)
    5b5c:	aa                   	stos   %al,%es:(%rdi)
    5b5d:	aa                   	stos   %al,%es:(%rdi)
    5b5e:	aa                   	stos   %al,%es:(%rdi)
    5b5f:	aa                   	stos   %al,%es:(%rdi)
    5b60:	aa                   	stos   %al,%es:(%rdi)
    5b61:	aa                   	stos   %al,%es:(%rdi)
    5b62:	aa                   	stos   %al,%es:(%rdi)
    5b63:	aa                   	stos   %al,%es:(%rdi)
    5b64:	aa                   	stos   %al,%es:(%rdi)
    5b65:	aa                   	stos   %al,%es:(%rdi)
    5b66:	aa                   	stos   %al,%es:(%rdi)
    5b67:	aa                   	stos   %al,%es:(%rdi)
    5b68:	aa                   	stos   %al,%es:(%rdi)
    5b69:	aa                   	stos   %al,%es:(%rdi)
    5b6a:	aa                   	stos   %al,%es:(%rdi)
    5b6b:	aa                   	stos   %al,%es:(%rdi)
    5b6c:	aa                   	stos   %al,%es:(%rdi)
    5b6d:	aa                   	stos   %al,%es:(%rdi)
    5b6e:	aa                   	stos   %al,%es:(%rdi)
    5b6f:	aa                   	stos   %al,%es:(%rdi)
    5b70:	aa                   	stos   %al,%es:(%rdi)
    5b71:	aa                   	stos   %al,%es:(%rdi)
    5b72:	aa                   	stos   %al,%es:(%rdi)
    5b73:	aa                   	stos   %al,%es:(%rdi)
    5b74:	aa                   	stos   %al,%es:(%rdi)
    5b75:	aa                   	stos   %al,%es:(%rdi)
    5b76:	aa                   	stos   %al,%es:(%rdi)
    5b77:	aa                   	stos   %al,%es:(%rdi)
    5b78:	aa                   	stos   %al,%es:(%rdi)
    5b79:	aa                   	stos   %al,%es:(%rdi)
    5b7a:	aa                   	stos   %al,%es:(%rdi)
    5b7b:	aa                   	stos   %al,%es:(%rdi)
    5b7c:	aa                   	stos   %al,%es:(%rdi)
    5b7d:	aa                   	stos   %al,%es:(%rdi)
    5b7e:	aa                   	stos   %al,%es:(%rdi)
    5b7f:	aa                   	stos   %al,%es:(%rdi)
    5b80:	aa                   	stos   %al,%es:(%rdi)
    5b81:	aa                   	stos   %al,%es:(%rdi)
    5b82:	aa                   	stos   %al,%es:(%rdi)
    5b83:	aa                   	stos   %al,%es:(%rdi)
    5b84:	aa                   	stos   %al,%es:(%rdi)
    5b85:	aa                   	stos   %al,%es:(%rdi)
    5b86:	aa                   	stos   %al,%es:(%rdi)
    5b87:	aa                   	stos   %al,%es:(%rdi)
    5b88:	aa                   	stos   %al,%es:(%rdi)
    5b89:	aa                   	stos   %al,%es:(%rdi)
    5b8a:	aa                   	stos   %al,%es:(%rdi)
    5b8b:	aa                   	stos   %al,%es:(%rdi)
    5b8c:	aa                   	stos   %al,%es:(%rdi)
    5b8d:	aa                   	stos   %al,%es:(%rdi)
    5b8e:	aa                   	stos   %al,%es:(%rdi)
    5b8f:	aa                   	stos   %al,%es:(%rdi)
    5b90:	aa                   	stos   %al,%es:(%rdi)
    5b91:	aa                   	stos   %al,%es:(%rdi)
    5b92:	aa                   	stos   %al,%es:(%rdi)
    5b93:	aa                   	stos   %al,%es:(%rdi)
    5b94:	aa                   	stos   %al,%es:(%rdi)
    5b95:	aa                   	stos   %al,%es:(%rdi)
    5b96:	aa                   	stos   %al,%es:(%rdi)
    5b97:	aa                   	stos   %al,%es:(%rdi)
    5b98:	aa                   	stos   %al,%es:(%rdi)
    5b99:	aa                   	stos   %al,%es:(%rdi)
    5b9a:	aa                   	stos   %al,%es:(%rdi)
    5b9b:	aa                   	stos   %al,%es:(%rdi)
    5b9c:	aa                   	stos   %al,%es:(%rdi)
    5b9d:	aa                   	stos   %al,%es:(%rdi)
    5b9e:	aa                   	stos   %al,%es:(%rdi)
    5b9f:	aa                   	stos   %al,%es:(%rdi)
    5ba0:	aa                   	stos   %al,%es:(%rdi)
    5ba1:	aa                   	stos   %al,%es:(%rdi)
    5ba2:	aa                   	stos   %al,%es:(%rdi)
    5ba3:	aa                   	stos   %al,%es:(%rdi)
    5ba4:	aa                   	stos   %al,%es:(%rdi)
    5ba5:	aa                   	stos   %al,%es:(%rdi)
    5ba6:	aa                   	stos   %al,%es:(%rdi)
    5ba7:	aa                   	stos   %al,%es:(%rdi)
    5ba8:	aa                   	stos   %al,%es:(%rdi)
    5ba9:	aa                   	stos   %al,%es:(%rdi)
    5baa:	aa                   	stos   %al,%es:(%rdi)
    5bab:	aa                   	stos   %al,%es:(%rdi)
    5bac:	aa                   	stos   %al,%es:(%rdi)
    5bad:	aa                   	stos   %al,%es:(%rdi)
    5bae:	aa                   	stos   %al,%es:(%rdi)
    5baf:	aa                   	stos   %al,%es:(%rdi)
    5bb0:	aa                   	stos   %al,%es:(%rdi)
    5bb1:	aa                   	stos   %al,%es:(%rdi)
    5bb2:	aa                   	stos   %al,%es:(%rdi)
    5bb3:	aa                   	stos   %al,%es:(%rdi)
    5bb4:	aa                   	stos   %al,%es:(%rdi)
    5bb5:	aa                   	stos   %al,%es:(%rdi)
    5bb6:	aa                   	stos   %al,%es:(%rdi)
    5bb7:	aa                   	stos   %al,%es:(%rdi)
    5bb8:	aa                   	stos   %al,%es:(%rdi)
    5bb9:	aa                   	stos   %al,%es:(%rdi)
    5bba:	aa                   	stos   %al,%es:(%rdi)
    5bbb:	aa                   	stos   %al,%es:(%rdi)
    5bbc:	aa                   	stos   %al,%es:(%rdi)
    5bbd:	aa                   	stos   %al,%es:(%rdi)
    5bbe:	aa                   	stos   %al,%es:(%rdi)
    5bbf:	aa                   	stos   %al,%es:(%rdi)
    5bc0:	aa                   	stos   %al,%es:(%rdi)
    5bc1:	aa                   	stos   %al,%es:(%rdi)
    5bc2:	aa                   	stos   %al,%es:(%rdi)
    5bc3:	aa                   	stos   %al,%es:(%rdi)
    5bc4:	aa                   	stos   %al,%es:(%rdi)
    5bc5:	aa                   	stos   %al,%es:(%rdi)
    5bc6:	aa                   	stos   %al,%es:(%rdi)
    5bc7:	aa                   	stos   %al,%es:(%rdi)
    5bc8:	aa                   	stos   %al,%es:(%rdi)
    5bc9:	aa                   	stos   %al,%es:(%rdi)
    5bca:	aa                   	stos   %al,%es:(%rdi)
    5bcb:	aa                   	stos   %al,%es:(%rdi)
    5bcc:	aa                   	stos   %al,%es:(%rdi)
    5bcd:	aa                   	stos   %al,%es:(%rdi)
    5bce:	aa                   	stos   %al,%es:(%rdi)
    5bcf:	aa                   	stos   %al,%es:(%rdi)
    5bd0:	aa                   	stos   %al,%es:(%rdi)
    5bd1:	aa                   	stos   %al,%es:(%rdi)
    5bd2:	aa                   	stos   %al,%es:(%rdi)
    5bd3:	aa                   	stos   %al,%es:(%rdi)
    5bd4:	aa                   	stos   %al,%es:(%rdi)
    5bd5:	aa                   	stos   %al,%es:(%rdi)
    5bd6:	aa                   	stos   %al,%es:(%rdi)
    5bd7:	aa                   	stos   %al,%es:(%rdi)
    5bd8:	aa                   	stos   %al,%es:(%rdi)
    5bd9:	aa                   	stos   %al,%es:(%rdi)
    5bda:	aa                   	stos   %al,%es:(%rdi)
    5bdb:	aa                   	stos   %al,%es:(%rdi)
    5bdc:	aa                   	stos   %al,%es:(%rdi)
    5bdd:	aa                   	stos   %al,%es:(%rdi)
    5bde:	aa                   	stos   %al,%es:(%rdi)
    5bdf:	aa                   	stos   %al,%es:(%rdi)
    5be0:	aa                   	stos   %al,%es:(%rdi)
    5be1:	aa                   	stos   %al,%es:(%rdi)
    5be2:	aa                   	stos   %al,%es:(%rdi)
    5be3:	aa                   	stos   %al,%es:(%rdi)
    5be4:	aa                   	stos   %al,%es:(%rdi)
    5be5:	aa                   	stos   %al,%es:(%rdi)
    5be6:	aa                   	stos   %al,%es:(%rdi)
    5be7:	aa                   	stos   %al,%es:(%rdi)
    5be8:	aa                   	stos   %al,%es:(%rdi)
    5be9:	aa                   	stos   %al,%es:(%rdi)
    5bea:	aa                   	stos   %al,%es:(%rdi)
    5beb:	aa                   	stos   %al,%es:(%rdi)
    5bec:	aa                   	stos   %al,%es:(%rdi)
    5bed:	aa                   	stos   %al,%es:(%rdi)
    5bee:	aa                   	stos   %al,%es:(%rdi)
    5bef:	aa                   	stos   %al,%es:(%rdi)
    5bf0:	aa                   	stos   %al,%es:(%rdi)
    5bf1:	aa                   	stos   %al,%es:(%rdi)
    5bf2:	aa                   	stos   %al,%es:(%rdi)
    5bf3:	aa                   	stos   %al,%es:(%rdi)
    5bf4:	aa                   	stos   %al,%es:(%rdi)
    5bf5:	aa                   	stos   %al,%es:(%rdi)
    5bf6:	aa                   	stos   %al,%es:(%rdi)
    5bf7:	aa                   	stos   %al,%es:(%rdi)
    5bf8:	aa                   	stos   %al,%es:(%rdi)
    5bf9:	aa                   	stos   %al,%es:(%rdi)
    5bfa:	aa                   	stos   %al,%es:(%rdi)
    5bfb:	aa                   	stos   %al,%es:(%rdi)
    5bfc:	aa                   	stos   %al,%es:(%rdi)
    5bfd:	aa                   	stos   %al,%es:(%rdi)
    5bfe:	aa                   	stos   %al,%es:(%rdi)
    5bff:	aa                   	stos   %al,%es:(%rdi)
    5c00:	aa                   	stos   %al,%es:(%rdi)
    5c01:	aa                   	stos   %al,%es:(%rdi)
    5c02:	aa                   	stos   %al,%es:(%rdi)
    5c03:	aa                   	stos   %al,%es:(%rdi)
    5c04:	aa                   	stos   %al,%es:(%rdi)
    5c05:	aa                   	stos   %al,%es:(%rdi)
    5c06:	aa                   	stos   %al,%es:(%rdi)
    5c07:	aa                   	stos   %al,%es:(%rdi)
    5c08:	aa                   	stos   %al,%es:(%rdi)
    5c09:	aa                   	stos   %al,%es:(%rdi)
    5c0a:	aa                   	stos   %al,%es:(%rdi)
    5c0b:	aa                   	stos   %al,%es:(%rdi)
    5c0c:	aa                   	stos   %al,%es:(%rdi)
    5c0d:	aa                   	stos   %al,%es:(%rdi)
    5c0e:	aa                   	stos   %al,%es:(%rdi)
    5c0f:	aa                   	stos   %al,%es:(%rdi)
    5c10:	aa                   	stos   %al,%es:(%rdi)
    5c11:	aa                   	stos   %al,%es:(%rdi)
    5c12:	aa                   	stos   %al,%es:(%rdi)
    5c13:	aa                   	stos   %al,%es:(%rdi)
    5c14:	aa                   	stos   %al,%es:(%rdi)
    5c15:	aa                   	stos   %al,%es:(%rdi)
    5c16:	aa                   	stos   %al,%es:(%rdi)
    5c17:	aa                   	stos   %al,%es:(%rdi)
    5c18:	aa                   	stos   %al,%es:(%rdi)
    5c19:	aa                   	stos   %al,%es:(%rdi)
    5c1a:	aa                   	stos   %al,%es:(%rdi)
    5c1b:	aa                   	stos   %al,%es:(%rdi)
    5c1c:	aa                   	stos   %al,%es:(%rdi)
    5c1d:	aa                   	stos   %al,%es:(%rdi)
    5c1e:	aa                   	stos   %al,%es:(%rdi)
    5c1f:	aa                   	stos   %al,%es:(%rdi)
    5c20:	aa                   	stos   %al,%es:(%rdi)
    5c21:	aa                   	stos   %al,%es:(%rdi)
    5c22:	aa                   	stos   %al,%es:(%rdi)
    5c23:	aa                   	stos   %al,%es:(%rdi)
    5c24:	aa                   	stos   %al,%es:(%rdi)
    5c25:	aa                   	stos   %al,%es:(%rdi)
    5c26:	aa                   	stos   %al,%es:(%rdi)
    5c27:	aa                   	stos   %al,%es:(%rdi)
    5c28:	aa                   	stos   %al,%es:(%rdi)
    5c29:	aa                   	stos   %al,%es:(%rdi)
    5c2a:	aa                   	stos   %al,%es:(%rdi)
    5c2b:	aa                   	stos   %al,%es:(%rdi)
    5c2c:	aa                   	stos   %al,%es:(%rdi)
    5c2d:	aa                   	stos   %al,%es:(%rdi)
    5c2e:	aa                   	stos   %al,%es:(%rdi)
    5c2f:	aa                   	stos   %al,%es:(%rdi)
    5c30:	aa                   	stos   %al,%es:(%rdi)
    5c31:	aa                   	stos   %al,%es:(%rdi)
    5c32:	aa                   	stos   %al,%es:(%rdi)
    5c33:	aa                   	stos   %al,%es:(%rdi)
    5c34:	aa                   	stos   %al,%es:(%rdi)
    5c35:	aa                   	stos   %al,%es:(%rdi)
    5c36:	aa                   	stos   %al,%es:(%rdi)
    5c37:	aa                   	stos   %al,%es:(%rdi)
    5c38:	aa                   	stos   %al,%es:(%rdi)
    5c39:	aa                   	stos   %al,%es:(%rdi)
    5c3a:	aa                   	stos   %al,%es:(%rdi)
    5c3b:	aa                   	stos   %al,%es:(%rdi)
    5c3c:	aa                   	stos   %al,%es:(%rdi)
    5c3d:	aa                   	stos   %al,%es:(%rdi)
    5c3e:	aa                   	stos   %al,%es:(%rdi)
    5c3f:	aa                   	stos   %al,%es:(%rdi)
    5c40:	aa                   	stos   %al,%es:(%rdi)
    5c41:	aa                   	stos   %al,%es:(%rdi)
    5c42:	aa                   	stos   %al,%es:(%rdi)
    5c43:	aa                   	stos   %al,%es:(%rdi)
    5c44:	aa                   	stos   %al,%es:(%rdi)
    5c45:	aa                   	stos   %al,%es:(%rdi)
    5c46:	aa                   	stos   %al,%es:(%rdi)
    5c47:	aa                   	stos   %al,%es:(%rdi)
    5c48:	aa                   	stos   %al,%es:(%rdi)
    5c49:	aa                   	stos   %al,%es:(%rdi)
    5c4a:	aa                   	stos   %al,%es:(%rdi)
    5c4b:	aa                   	stos   %al,%es:(%rdi)
    5c4c:	aa                   	stos   %al,%es:(%rdi)
    5c4d:	aa                   	stos   %al,%es:(%rdi)
    5c4e:	aa                   	stos   %al,%es:(%rdi)
    5c4f:	aa                   	stos   %al,%es:(%rdi)
    5c50:	aa                   	stos   %al,%es:(%rdi)
    5c51:	aa                   	stos   %al,%es:(%rdi)
    5c52:	aa                   	stos   %al,%es:(%rdi)
    5c53:	aa                   	stos   %al,%es:(%rdi)
    5c54:	aa                   	stos   %al,%es:(%rdi)
    5c55:	aa                   	stos   %al,%es:(%rdi)
    5c56:	aa                   	stos   %al,%es:(%rdi)
    5c57:	aa                   	stos   %al,%es:(%rdi)
    5c58:	aa                   	stos   %al,%es:(%rdi)
    5c59:	aa                   	stos   %al,%es:(%rdi)
    5c5a:	aa                   	stos   %al,%es:(%rdi)
    5c5b:	aa                   	stos   %al,%es:(%rdi)
    5c5c:	aa                   	stos   %al,%es:(%rdi)
    5c5d:	aa                   	stos   %al,%es:(%rdi)
    5c5e:	aa                   	stos   %al,%es:(%rdi)
    5c5f:	aa                   	stos   %al,%es:(%rdi)
    5c60:	aa                   	stos   %al,%es:(%rdi)
    5c61:	aa                   	stos   %al,%es:(%rdi)
    5c62:	aa                   	stos   %al,%es:(%rdi)
    5c63:	aa                   	stos   %al,%es:(%rdi)
    5c64:	aa                   	stos   %al,%es:(%rdi)
    5c65:	aa                   	stos   %al,%es:(%rdi)
    5c66:	aa                   	stos   %al,%es:(%rdi)
    5c67:	aa                   	stos   %al,%es:(%rdi)
    5c68:	aa                   	stos   %al,%es:(%rdi)
    5c69:	aa                   	stos   %al,%es:(%rdi)
    5c6a:	aa                   	stos   %al,%es:(%rdi)
    5c6b:	aa                   	stos   %al,%es:(%rdi)
    5c6c:	aa                   	stos   %al,%es:(%rdi)
    5c6d:	aa                   	stos   %al,%es:(%rdi)
    5c6e:	aa                   	stos   %al,%es:(%rdi)
    5c6f:	aa                   	stos   %al,%es:(%rdi)
    5c70:	aa                   	stos   %al,%es:(%rdi)
    5c71:	aa                   	stos   %al,%es:(%rdi)
    5c72:	aa                   	stos   %al,%es:(%rdi)
    5c73:	aa                   	stos   %al,%es:(%rdi)
    5c74:	aa                   	stos   %al,%es:(%rdi)
    5c75:	aa                   	stos   %al,%es:(%rdi)
    5c76:	aa                   	stos   %al,%es:(%rdi)
    5c77:	aa                   	stos   %al,%es:(%rdi)
    5c78:	aa                   	stos   %al,%es:(%rdi)
    5c79:	aa                   	stos   %al,%es:(%rdi)
    5c7a:	aa                   	stos   %al,%es:(%rdi)
    5c7b:	aa                   	stos   %al,%es:(%rdi)
    5c7c:	aa                   	stos   %al,%es:(%rdi)
    5c7d:	aa                   	stos   %al,%es:(%rdi)
    5c7e:	aa                   	stos   %al,%es:(%rdi)
    5c7f:	aa                   	stos   %al,%es:(%rdi)
    5c80:	aa                   	stos   %al,%es:(%rdi)
    5c81:	aa                   	stos   %al,%es:(%rdi)
    5c82:	aa                   	stos   %al,%es:(%rdi)
    5c83:	aa                   	stos   %al,%es:(%rdi)
    5c84:	aa                   	stos   %al,%es:(%rdi)
    5c85:	aa                   	stos   %al,%es:(%rdi)
    5c86:	aa                   	stos   %al,%es:(%rdi)
    5c87:	aa                   	stos   %al,%es:(%rdi)
    5c88:	aa                   	stos   %al,%es:(%rdi)
    5c89:	aa                   	stos   %al,%es:(%rdi)
    5c8a:	aa                   	stos   %al,%es:(%rdi)
    5c8b:	aa                   	stos   %al,%es:(%rdi)
    5c8c:	aa                   	stos   %al,%es:(%rdi)
    5c8d:	aa                   	stos   %al,%es:(%rdi)
    5c8e:	aa                   	stos   %al,%es:(%rdi)
    5c8f:	aa                   	stos   %al,%es:(%rdi)
    5c90:	aa                   	stos   %al,%es:(%rdi)
    5c91:	aa                   	stos   %al,%es:(%rdi)
    5c92:	aa                   	stos   %al,%es:(%rdi)
    5c93:	aa                   	stos   %al,%es:(%rdi)
    5c94:	aa                   	stos   %al,%es:(%rdi)
    5c95:	aa                   	stos   %al,%es:(%rdi)
    5c96:	aa                   	stos   %al,%es:(%rdi)
    5c97:	aa                   	stos   %al,%es:(%rdi)
    5c98:	aa                   	stos   %al,%es:(%rdi)
    5c99:	aa                   	stos   %al,%es:(%rdi)
    5c9a:	aa                   	stos   %al,%es:(%rdi)
    5c9b:	aa                   	stos   %al,%es:(%rdi)
    5c9c:	aa                   	stos   %al,%es:(%rdi)
    5c9d:	aa                   	stos   %al,%es:(%rdi)
    5c9e:	aa                   	stos   %al,%es:(%rdi)
    5c9f:	aa                   	stos   %al,%es:(%rdi)
    5ca0:	aa                   	stos   %al,%es:(%rdi)
    5ca1:	aa                   	stos   %al,%es:(%rdi)
    5ca2:	aa                   	stos   %al,%es:(%rdi)
    5ca3:	aa                   	stos   %al,%es:(%rdi)
    5ca4:	aa                   	stos   %al,%es:(%rdi)
    5ca5:	aa                   	stos   %al,%es:(%rdi)
    5ca6:	aa                   	stos   %al,%es:(%rdi)
    5ca7:	aa                   	stos   %al,%es:(%rdi)
    5ca8:	aa                   	stos   %al,%es:(%rdi)
    5ca9:	aa                   	stos   %al,%es:(%rdi)
    5caa:	aa                   	stos   %al,%es:(%rdi)
    5cab:	aa                   	stos   %al,%es:(%rdi)
    5cac:	aa                   	stos   %al,%es:(%rdi)
    5cad:	aa                   	stos   %al,%es:(%rdi)
    5cae:	aa                   	stos   %al,%es:(%rdi)
    5caf:	aa                   	stos   %al,%es:(%rdi)
    5cb0:	aa                   	stos   %al,%es:(%rdi)
    5cb1:	aa                   	stos   %al,%es:(%rdi)
    5cb2:	aa                   	stos   %al,%es:(%rdi)
    5cb3:	aa                   	stos   %al,%es:(%rdi)
    5cb4:	aa                   	stos   %al,%es:(%rdi)
    5cb5:	aa                   	stos   %al,%es:(%rdi)
    5cb6:	aa                   	stos   %al,%es:(%rdi)
    5cb7:	aa                   	stos   %al,%es:(%rdi)
    5cb8:	aa                   	stos   %al,%es:(%rdi)
    5cb9:	aa                   	stos   %al,%es:(%rdi)
    5cba:	aa                   	stos   %al,%es:(%rdi)
    5cbb:	aa                   	stos   %al,%es:(%rdi)
    5cbc:	aa                   	stos   %al,%es:(%rdi)
    5cbd:	aa                   	stos   %al,%es:(%rdi)
    5cbe:	aa                   	stos   %al,%es:(%rdi)
    5cbf:	aa                   	stos   %al,%es:(%rdi)
    5cc0:	aa                   	stos   %al,%es:(%rdi)
    5cc1:	aa                   	stos   %al,%es:(%rdi)
    5cc2:	aa                   	stos   %al,%es:(%rdi)
    5cc3:	aa                   	stos   %al,%es:(%rdi)
    5cc4:	aa                   	stos   %al,%es:(%rdi)
    5cc5:	aa                   	stos   %al,%es:(%rdi)
    5cc6:	aa                   	stos   %al,%es:(%rdi)
    5cc7:	aa                   	stos   %al,%es:(%rdi)
    5cc8:	aa                   	stos   %al,%es:(%rdi)
    5cc9:	aa                   	stos   %al,%es:(%rdi)
    5cca:	aa                   	stos   %al,%es:(%rdi)
    5ccb:	aa                   	stos   %al,%es:(%rdi)
    5ccc:	aa                   	stos   %al,%es:(%rdi)
    5ccd:	aa                   	stos   %al,%es:(%rdi)
    5cce:	aa                   	stos   %al,%es:(%rdi)
    5ccf:	aa                   	stos   %al,%es:(%rdi)
    5cd0:	aa                   	stos   %al,%es:(%rdi)
    5cd1:	aa                   	stos   %al,%es:(%rdi)
    5cd2:	aa                   	stos   %al,%es:(%rdi)
    5cd3:	aa                   	stos   %al,%es:(%rdi)
    5cd4:	aa                   	stos   %al,%es:(%rdi)
    5cd5:	aa                   	stos   %al,%es:(%rdi)
    5cd6:	aa                   	stos   %al,%es:(%rdi)
    5cd7:	aa                   	stos   %al,%es:(%rdi)
    5cd8:	aa                   	stos   %al,%es:(%rdi)
    5cd9:	aa                   	stos   %al,%es:(%rdi)
    5cda:	aa                   	stos   %al,%es:(%rdi)
    5cdb:	aa                   	stos   %al,%es:(%rdi)
    5cdc:	aa                   	stos   %al,%es:(%rdi)
    5cdd:	aa                   	stos   %al,%es:(%rdi)
    5cde:	aa                   	stos   %al,%es:(%rdi)
    5cdf:	aa                   	stos   %al,%es:(%rdi)
    5ce0:	aa                   	stos   %al,%es:(%rdi)
    5ce1:	aa                   	stos   %al,%es:(%rdi)
    5ce2:	aa                   	stos   %al,%es:(%rdi)
    5ce3:	aa                   	stos   %al,%es:(%rdi)
    5ce4:	aa                   	stos   %al,%es:(%rdi)
    5ce5:	aa                   	stos   %al,%es:(%rdi)
    5ce6:	aa                   	stos   %al,%es:(%rdi)
    5ce7:	aa                   	stos   %al,%es:(%rdi)
    5ce8:	aa                   	stos   %al,%es:(%rdi)
    5ce9:	aa                   	stos   %al,%es:(%rdi)
    5cea:	aa                   	stos   %al,%es:(%rdi)
    5ceb:	aa                   	stos   %al,%es:(%rdi)
    5cec:	aa                   	stos   %al,%es:(%rdi)
    5ced:	aa                   	stos   %al,%es:(%rdi)
    5cee:	aa                   	stos   %al,%es:(%rdi)
    5cef:	aa                   	stos   %al,%es:(%rdi)
    5cf0:	aa                   	stos   %al,%es:(%rdi)
    5cf1:	aa                   	stos   %al,%es:(%rdi)
    5cf2:	aa                   	stos   %al,%es:(%rdi)
    5cf3:	aa                   	stos   %al,%es:(%rdi)
    5cf4:	aa                   	stos   %al,%es:(%rdi)
    5cf5:	aa                   	stos   %al,%es:(%rdi)
    5cf6:	aa                   	stos   %al,%es:(%rdi)
    5cf7:	aa                   	stos   %al,%es:(%rdi)
    5cf8:	aa                   	stos   %al,%es:(%rdi)
    5cf9:	aa                   	stos   %al,%es:(%rdi)
    5cfa:	aa                   	stos   %al,%es:(%rdi)
    5cfb:	aa                   	stos   %al,%es:(%rdi)
    5cfc:	aa                   	stos   %al,%es:(%rdi)
    5cfd:	aa                   	stos   %al,%es:(%rdi)
    5cfe:	aa                   	stos   %al,%es:(%rdi)
    5cff:	aa                   	stos   %al,%es:(%rdi)
    5d00:	aa                   	stos   %al,%es:(%rdi)
    5d01:	aa                   	stos   %al,%es:(%rdi)
    5d02:	aa                   	stos   %al,%es:(%rdi)
    5d03:	aa                   	stos   %al,%es:(%rdi)
    5d04:	aa                   	stos   %al,%es:(%rdi)
    5d05:	aa                   	stos   %al,%es:(%rdi)
    5d06:	aa                   	stos   %al,%es:(%rdi)
    5d07:	aa                   	stos   %al,%es:(%rdi)
    5d08:	aa                   	stos   %al,%es:(%rdi)
    5d09:	aa                   	stos   %al,%es:(%rdi)
    5d0a:	aa                   	stos   %al,%es:(%rdi)
    5d0b:	aa                   	stos   %al,%es:(%rdi)
    5d0c:	aa                   	stos   %al,%es:(%rdi)
    5d0d:	aa                   	stos   %al,%es:(%rdi)
    5d0e:	aa                   	stos   %al,%es:(%rdi)
    5d0f:	aa                   	stos   %al,%es:(%rdi)
    5d10:	aa                   	stos   %al,%es:(%rdi)
    5d11:	aa                   	stos   %al,%es:(%rdi)
    5d12:	aa                   	stos   %al,%es:(%rdi)
    5d13:	aa                   	stos   %al,%es:(%rdi)
    5d14:	aa                   	stos   %al,%es:(%rdi)
    5d15:	aa                   	stos   %al,%es:(%rdi)
    5d16:	aa                   	stos   %al,%es:(%rdi)
    5d17:	aa                   	stos   %al,%es:(%rdi)
    5d18:	aa                   	stos   %al,%es:(%rdi)
    5d19:	aa                   	stos   %al,%es:(%rdi)
    5d1a:	aa                   	stos   %al,%es:(%rdi)
    5d1b:	aa                   	stos   %al,%es:(%rdi)
    5d1c:	aa                   	stos   %al,%es:(%rdi)
    5d1d:	aa                   	stos   %al,%es:(%rdi)
    5d1e:	aa                   	stos   %al,%es:(%rdi)
    5d1f:	aa                   	stos   %al,%es:(%rdi)
    5d20:	aa                   	stos   %al,%es:(%rdi)
    5d21:	aa                   	stos   %al,%es:(%rdi)
    5d22:	aa                   	stos   %al,%es:(%rdi)
    5d23:	aa                   	stos   %al,%es:(%rdi)
    5d24:	aa                   	stos   %al,%es:(%rdi)
    5d25:	aa                   	stos   %al,%es:(%rdi)
    5d26:	aa                   	stos   %al,%es:(%rdi)
    5d27:	aa                   	stos   %al,%es:(%rdi)
    5d28:	aa                   	stos   %al,%es:(%rdi)
    5d29:	aa                   	stos   %al,%es:(%rdi)
    5d2a:	aa                   	stos   %al,%es:(%rdi)
    5d2b:	aa                   	stos   %al,%es:(%rdi)
    5d2c:	aa                   	stos   %al,%es:(%rdi)
    5d2d:	aa                   	stos   %al,%es:(%rdi)
    5d2e:	aa                   	stos   %al,%es:(%rdi)
    5d2f:	aa                   	stos   %al,%es:(%rdi)
    5d30:	aa                   	stos   %al,%es:(%rdi)
    5d31:	aa                   	stos   %al,%es:(%rdi)
    5d32:	aa                   	stos   %al,%es:(%rdi)
    5d33:	aa                   	stos   %al,%es:(%rdi)
    5d34:	aa                   	stos   %al,%es:(%rdi)
    5d35:	aa                   	stos   %al,%es:(%rdi)
    5d36:	aa                   	stos   %al,%es:(%rdi)
    5d37:	aa                   	stos   %al,%es:(%rdi)
    5d38:	aa                   	stos   %al,%es:(%rdi)
    5d39:	aa                   	stos   %al,%es:(%rdi)
    5d3a:	aa                   	stos   %al,%es:(%rdi)
    5d3b:	aa                   	stos   %al,%es:(%rdi)
    5d3c:	aa                   	stos   %al,%es:(%rdi)
    5d3d:	aa                   	stos   %al,%es:(%rdi)
    5d3e:	aa                   	stos   %al,%es:(%rdi)
    5d3f:	aa                   	stos   %al,%es:(%rdi)
    5d40:	aa                   	stos   %al,%es:(%rdi)
    5d41:	aa                   	stos   %al,%es:(%rdi)
    5d42:	aa                   	stos   %al,%es:(%rdi)
    5d43:	aa                   	stos   %al,%es:(%rdi)
    5d44:	aa                   	stos   %al,%es:(%rdi)
    5d45:	aa                   	stos   %al,%es:(%rdi)
    5d46:	aa                   	stos   %al,%es:(%rdi)
    5d47:	aa                   	stos   %al,%es:(%rdi)
    5d48:	aa                   	stos   %al,%es:(%rdi)
    5d49:	aa                   	stos   %al,%es:(%rdi)
    5d4a:	aa                   	stos   %al,%es:(%rdi)
    5d4b:	aa                   	stos   %al,%es:(%rdi)
    5d4c:	aa                   	stos   %al,%es:(%rdi)
    5d4d:	aa                   	stos   %al,%es:(%rdi)
    5d4e:	aa                   	stos   %al,%es:(%rdi)
    5d4f:	aa                   	stos   %al,%es:(%rdi)
    5d50:	aa                   	stos   %al,%es:(%rdi)
    5d51:	aa                   	stos   %al,%es:(%rdi)
    5d52:	aa                   	stos   %al,%es:(%rdi)
    5d53:	aa                   	stos   %al,%es:(%rdi)
    5d54:	aa                   	stos   %al,%es:(%rdi)
    5d55:	aa                   	stos   %al,%es:(%rdi)
    5d56:	aa                   	stos   %al,%es:(%rdi)
    5d57:	aa                   	stos   %al,%es:(%rdi)
    5d58:	aa                   	stos   %al,%es:(%rdi)
    5d59:	aa                   	stos   %al,%es:(%rdi)
    5d5a:	aa                   	stos   %al,%es:(%rdi)
    5d5b:	aa                   	stos   %al,%es:(%rdi)
    5d5c:	aa                   	stos   %al,%es:(%rdi)
    5d5d:	aa                   	stos   %al,%es:(%rdi)
    5d5e:	aa                   	stos   %al,%es:(%rdi)
    5d5f:	aa                   	stos   %al,%es:(%rdi)
    5d60:	aa                   	stos   %al,%es:(%rdi)
    5d61:	aa                   	stos   %al,%es:(%rdi)
    5d62:	aa                   	stos   %al,%es:(%rdi)
    5d63:	aa                   	stos   %al,%es:(%rdi)
    5d64:	aa                   	stos   %al,%es:(%rdi)
    5d65:	aa                   	stos   %al,%es:(%rdi)
    5d66:	aa                   	stos   %al,%es:(%rdi)
    5d67:	aa                   	stos   %al,%es:(%rdi)
    5d68:	aa                   	stos   %al,%es:(%rdi)
    5d69:	aa                   	stos   %al,%es:(%rdi)
    5d6a:	aa                   	stos   %al,%es:(%rdi)
    5d6b:	aa                   	stos   %al,%es:(%rdi)
    5d6c:	aa                   	stos   %al,%es:(%rdi)
    5d6d:	aa                   	stos   %al,%es:(%rdi)
    5d6e:	aa                   	stos   %al,%es:(%rdi)
    5d6f:	aa                   	stos   %al,%es:(%rdi)
    5d70:	aa                   	stos   %al,%es:(%rdi)
    5d71:	aa                   	stos   %al,%es:(%rdi)
    5d72:	aa                   	stos   %al,%es:(%rdi)
    5d73:	aa                   	stos   %al,%es:(%rdi)
    5d74:	aa                   	stos   %al,%es:(%rdi)
    5d75:	aa                   	stos   %al,%es:(%rdi)
    5d76:	aa                   	stos   %al,%es:(%rdi)
    5d77:	aa                   	stos   %al,%es:(%rdi)
    5d78:	aa                   	stos   %al,%es:(%rdi)
    5d79:	aa                   	stos   %al,%es:(%rdi)
    5d7a:	aa                   	stos   %al,%es:(%rdi)
    5d7b:	aa                   	stos   %al,%es:(%rdi)
    5d7c:	aa                   	stos   %al,%es:(%rdi)
    5d7d:	aa                   	stos   %al,%es:(%rdi)
    5d7e:	aa                   	stos   %al,%es:(%rdi)
    5d7f:	aa                   	stos   %al,%es:(%rdi)
    5d80:	aa                   	stos   %al,%es:(%rdi)
    5d81:	aa                   	stos   %al,%es:(%rdi)
    5d82:	aa                   	stos   %al,%es:(%rdi)
    5d83:	aa                   	stos   %al,%es:(%rdi)
    5d84:	aa                   	stos   %al,%es:(%rdi)
    5d85:	aa                   	stos   %al,%es:(%rdi)
    5d86:	aa                   	stos   %al,%es:(%rdi)
    5d87:	aa                   	stos   %al,%es:(%rdi)
    5d88:	aa                   	stos   %al,%es:(%rdi)
    5d89:	aa                   	stos   %al,%es:(%rdi)
    5d8a:	aa                   	stos   %al,%es:(%rdi)
    5d8b:	aa                   	stos   %al,%es:(%rdi)
    5d8c:	aa                   	stos   %al,%es:(%rdi)
    5d8d:	aa                   	stos   %al,%es:(%rdi)
    5d8e:	aa                   	stos   %al,%es:(%rdi)
    5d8f:	aa                   	stos   %al,%es:(%rdi)
    5d90:	aa                   	stos   %al,%es:(%rdi)
    5d91:	aa                   	stos   %al,%es:(%rdi)
    5d92:	aa                   	stos   %al,%es:(%rdi)
    5d93:	aa                   	stos   %al,%es:(%rdi)
    5d94:	aa                   	stos   %al,%es:(%rdi)
    5d95:	aa                   	stos   %al,%es:(%rdi)
    5d96:	aa                   	stos   %al,%es:(%rdi)
    5d97:	aa                   	stos   %al,%es:(%rdi)
    5d98:	aa                   	stos   %al,%es:(%rdi)
    5d99:	aa                   	stos   %al,%es:(%rdi)
    5d9a:	aa                   	stos   %al,%es:(%rdi)
    5d9b:	aa                   	stos   %al,%es:(%rdi)
    5d9c:	aa                   	stos   %al,%es:(%rdi)
    5d9d:	aa                   	stos   %al,%es:(%rdi)
    5d9e:	aa                   	stos   %al,%es:(%rdi)
    5d9f:	aa                   	stos   %al,%es:(%rdi)
    5da0:	aa                   	stos   %al,%es:(%rdi)
    5da1:	aa                   	stos   %al,%es:(%rdi)
    5da2:	aa                   	stos   %al,%es:(%rdi)
    5da3:	aa                   	stos   %al,%es:(%rdi)
    5da4:	aa                   	stos   %al,%es:(%rdi)
    5da5:	aa                   	stos   %al,%es:(%rdi)
    5da6:	aa                   	stos   %al,%es:(%rdi)
    5da7:	aa                   	stos   %al,%es:(%rdi)
    5da8:	aa                   	stos   %al,%es:(%rdi)
    5da9:	aa                   	stos   %al,%es:(%rdi)
    5daa:	aa                   	stos   %al,%es:(%rdi)
    5dab:	aa                   	stos   %al,%es:(%rdi)
    5dac:	aa                   	stos   %al,%es:(%rdi)
    5dad:	aa                   	stos   %al,%es:(%rdi)
    5dae:	aa                   	stos   %al,%es:(%rdi)
    5daf:	aa                   	stos   %al,%es:(%rdi)
    5db0:	aa                   	stos   %al,%es:(%rdi)
    5db1:	aa                   	stos   %al,%es:(%rdi)
    5db2:	aa                   	stos   %al,%es:(%rdi)
    5db3:	aa                   	stos   %al,%es:(%rdi)
    5db4:	aa                   	stos   %al,%es:(%rdi)
    5db5:	aa                   	stos   %al,%es:(%rdi)
    5db6:	aa                   	stos   %al,%es:(%rdi)
    5db7:	aa                   	stos   %al,%es:(%rdi)
    5db8:	aa                   	stos   %al,%es:(%rdi)
    5db9:	aa                   	stos   %al,%es:(%rdi)
    5dba:	aa                   	stos   %al,%es:(%rdi)
    5dbb:	aa                   	stos   %al,%es:(%rdi)
    5dbc:	aa                   	stos   %al,%es:(%rdi)
    5dbd:	aa                   	stos   %al,%es:(%rdi)
    5dbe:	aa                   	stos   %al,%es:(%rdi)
    5dbf:	aa                   	stos   %al,%es:(%rdi)
    5dc0:	aa                   	stos   %al,%es:(%rdi)
    5dc1:	aa                   	stos   %al,%es:(%rdi)
    5dc2:	aa                   	stos   %al,%es:(%rdi)
    5dc3:	aa                   	stos   %al,%es:(%rdi)
    5dc4:	aa                   	stos   %al,%es:(%rdi)
    5dc5:	aa                   	stos   %al,%es:(%rdi)
    5dc6:	aa                   	stos   %al,%es:(%rdi)
    5dc7:	aa                   	stos   %al,%es:(%rdi)
    5dc8:	aa                   	stos   %al,%es:(%rdi)
    5dc9:	aa                   	stos   %al,%es:(%rdi)
    5dca:	aa                   	stos   %al,%es:(%rdi)
    5dcb:	aa                   	stos   %al,%es:(%rdi)
    5dcc:	aa                   	stos   %al,%es:(%rdi)
    5dcd:	aa                   	stos   %al,%es:(%rdi)
    5dce:	aa                   	stos   %al,%es:(%rdi)
    5dcf:	aa                   	stos   %al,%es:(%rdi)
    5dd0:	aa                   	stos   %al,%es:(%rdi)
    5dd1:	aa                   	stos   %al,%es:(%rdi)
    5dd2:	aa                   	stos   %al,%es:(%rdi)
    5dd3:	aa                   	stos   %al,%es:(%rdi)
    5dd4:	aa                   	stos   %al,%es:(%rdi)
    5dd5:	aa                   	stos   %al,%es:(%rdi)
    5dd6:	aa                   	stos   %al,%es:(%rdi)
    5dd7:	aa                   	stos   %al,%es:(%rdi)
    5dd8:	aa                   	stos   %al,%es:(%rdi)
    5dd9:	aa                   	stos   %al,%es:(%rdi)
    5dda:	aa                   	stos   %al,%es:(%rdi)
    5ddb:	aa                   	stos   %al,%es:(%rdi)
    5ddc:	aa                   	stos   %al,%es:(%rdi)
    5ddd:	aa                   	stos   %al,%es:(%rdi)
    5dde:	aa                   	stos   %al,%es:(%rdi)
    5ddf:	aa                   	stos   %al,%es:(%rdi)
    5de0:	aa                   	stos   %al,%es:(%rdi)
    5de1:	aa                   	stos   %al,%es:(%rdi)
    5de2:	aa                   	stos   %al,%es:(%rdi)
    5de3:	aa                   	stos   %al,%es:(%rdi)
    5de4:	aa                   	stos   %al,%es:(%rdi)
    5de5:	aa                   	stos   %al,%es:(%rdi)
    5de6:	aa                   	stos   %al,%es:(%rdi)
    5de7:	aa                   	stos   %al,%es:(%rdi)
    5de8:	aa                   	stos   %al,%es:(%rdi)
    5de9:	aa                   	stos   %al,%es:(%rdi)
    5dea:	aa                   	stos   %al,%es:(%rdi)
    5deb:	aa                   	stos   %al,%es:(%rdi)
    5dec:	aa                   	stos   %al,%es:(%rdi)
    5ded:	aa                   	stos   %al,%es:(%rdi)
    5dee:	aa                   	stos   %al,%es:(%rdi)
    5def:	aa                   	stos   %al,%es:(%rdi)
    5df0:	aa                   	stos   %al,%es:(%rdi)
    5df1:	aa                   	stos   %al,%es:(%rdi)
    5df2:	aa                   	stos   %al,%es:(%rdi)
    5df3:	aa                   	stos   %al,%es:(%rdi)
    5df4:	aa                   	stos   %al,%es:(%rdi)
    5df5:	aa                   	stos   %al,%es:(%rdi)
    5df6:	aa                   	stos   %al,%es:(%rdi)
    5df7:	aa                   	stos   %al,%es:(%rdi)
    5df8:	aa                   	stos   %al,%es:(%rdi)
    5df9:	aa                   	stos   %al,%es:(%rdi)
    5dfa:	aa                   	stos   %al,%es:(%rdi)
    5dfb:	aa                   	stos   %al,%es:(%rdi)
    5dfc:	aa                   	stos   %al,%es:(%rdi)
    5dfd:	aa                   	stos   %al,%es:(%rdi)
    5dfe:	aa                   	stos   %al,%es:(%rdi)
    5dff:	aa                   	stos   %al,%es:(%rdi)
    5e00:	aa                   	stos   %al,%es:(%rdi)
    5e01:	aa                   	stos   %al,%es:(%rdi)
    5e02:	aa                   	stos   %al,%es:(%rdi)
    5e03:	aa                   	stos   %al,%es:(%rdi)
    5e04:	aa                   	stos   %al,%es:(%rdi)
    5e05:	aa                   	stos   %al,%es:(%rdi)
    5e06:	aa                   	stos   %al,%es:(%rdi)
    5e07:	aa                   	stos   %al,%es:(%rdi)
    5e08:	aa                   	stos   %al,%es:(%rdi)
    5e09:	aa                   	stos   %al,%es:(%rdi)
    5e0a:	aa                   	stos   %al,%es:(%rdi)
    5e0b:	aa                   	stos   %al,%es:(%rdi)
    5e0c:	aa                   	stos   %al,%es:(%rdi)
    5e0d:	aa                   	stos   %al,%es:(%rdi)
    5e0e:	aa                   	stos   %al,%es:(%rdi)
    5e0f:	aa                   	stos   %al,%es:(%rdi)
    5e10:	aa                   	stos   %al,%es:(%rdi)
    5e11:	aa                   	stos   %al,%es:(%rdi)
    5e12:	aa                   	stos   %al,%es:(%rdi)
    5e13:	aa                   	stos   %al,%es:(%rdi)
    5e14:	aa                   	stos   %al,%es:(%rdi)
    5e15:	aa                   	stos   %al,%es:(%rdi)
    5e16:	aa                   	stos   %al,%es:(%rdi)
    5e17:	aa                   	stos   %al,%es:(%rdi)
    5e18:	aa                   	stos   %al,%es:(%rdi)
    5e19:	aa                   	stos   %al,%es:(%rdi)
    5e1a:	aa                   	stos   %al,%es:(%rdi)
    5e1b:	aa                   	stos   %al,%es:(%rdi)
    5e1c:	aa                   	stos   %al,%es:(%rdi)
    5e1d:	aa                   	stos   %al,%es:(%rdi)
    5e1e:	aa                   	stos   %al,%es:(%rdi)
    5e1f:	aa                   	stos   %al,%es:(%rdi)
    5e20:	aa                   	stos   %al,%es:(%rdi)
    5e21:	aa                   	stos   %al,%es:(%rdi)
    5e22:	aa                   	stos   %al,%es:(%rdi)
    5e23:	aa                   	stos   %al,%es:(%rdi)
    5e24:	aa                   	stos   %al,%es:(%rdi)
    5e25:	aa                   	stos   %al,%es:(%rdi)
    5e26:	aa                   	stos   %al,%es:(%rdi)
    5e27:	aa                   	stos   %al,%es:(%rdi)
    5e28:	aa                   	stos   %al,%es:(%rdi)
    5e29:	aa                   	stos   %al,%es:(%rdi)
    5e2a:	aa                   	stos   %al,%es:(%rdi)
    5e2b:	aa                   	stos   %al,%es:(%rdi)
    5e2c:	aa                   	stos   %al,%es:(%rdi)
    5e2d:	aa                   	stos   %al,%es:(%rdi)
    5e2e:	aa                   	stos   %al,%es:(%rdi)
    5e2f:	aa                   	stos   %al,%es:(%rdi)
    5e30:	aa                   	stos   %al,%es:(%rdi)
    5e31:	aa                   	stos   %al,%es:(%rdi)
    5e32:	aa                   	stos   %al,%es:(%rdi)
    5e33:	aa                   	stos   %al,%es:(%rdi)
    5e34:	aa                   	stos   %al,%es:(%rdi)
    5e35:	aa                   	stos   %al,%es:(%rdi)
    5e36:	aa                   	stos   %al,%es:(%rdi)
    5e37:	aa                   	stos   %al,%es:(%rdi)
    5e38:	aa                   	stos   %al,%es:(%rdi)
    5e39:	aa                   	stos   %al,%es:(%rdi)
    5e3a:	aa                   	stos   %al,%es:(%rdi)
    5e3b:	aa                   	stos   %al,%es:(%rdi)
    5e3c:	aa                   	stos   %al,%es:(%rdi)
    5e3d:	aa                   	stos   %al,%es:(%rdi)
    5e3e:	aa                   	stos   %al,%es:(%rdi)
    5e3f:	aa                   	stos   %al,%es:(%rdi)
    5e40:	aa                   	stos   %al,%es:(%rdi)
    5e41:	aa                   	stos   %al,%es:(%rdi)
    5e42:	aa                   	stos   %al,%es:(%rdi)
    5e43:	aa                   	stos   %al,%es:(%rdi)
    5e44:	aa                   	stos   %al,%es:(%rdi)
    5e45:	aa                   	stos   %al,%es:(%rdi)
    5e46:	aa                   	stos   %al,%es:(%rdi)
    5e47:	aa                   	stos   %al,%es:(%rdi)
    5e48:	aa                   	stos   %al,%es:(%rdi)
    5e49:	aa                   	stos   %al,%es:(%rdi)
    5e4a:	aa                   	stos   %al,%es:(%rdi)
    5e4b:	aa                   	stos   %al,%es:(%rdi)
    5e4c:	aa                   	stos   %al,%es:(%rdi)
    5e4d:	aa                   	stos   %al,%es:(%rdi)
    5e4e:	aa                   	stos   %al,%es:(%rdi)
    5e4f:	aa                   	stos   %al,%es:(%rdi)
    5e50:	aa                   	stos   %al,%es:(%rdi)
    5e51:	aa                   	stos   %al,%es:(%rdi)
    5e52:	aa                   	stos   %al,%es:(%rdi)
    5e53:	aa                   	stos   %al,%es:(%rdi)
    5e54:	aa                   	stos   %al,%es:(%rdi)
    5e55:	aa                   	stos   %al,%es:(%rdi)
    5e56:	aa                   	stos   %al,%es:(%rdi)
    5e57:	aa                   	stos   %al,%es:(%rdi)
    5e58:	aa                   	stos   %al,%es:(%rdi)
    5e59:	aa                   	stos   %al,%es:(%rdi)
    5e5a:	aa                   	stos   %al,%es:(%rdi)
    5e5b:	aa                   	stos   %al,%es:(%rdi)
    5e5c:	aa                   	stos   %al,%es:(%rdi)
    5e5d:	aa                   	stos   %al,%es:(%rdi)
    5e5e:	aa                   	stos   %al,%es:(%rdi)
    5e5f:	aa                   	stos   %al,%es:(%rdi)
    5e60:	aa                   	stos   %al,%es:(%rdi)
    5e61:	aa                   	stos   %al,%es:(%rdi)
    5e62:	aa                   	stos   %al,%es:(%rdi)
    5e63:	aa                   	stos   %al,%es:(%rdi)
    5e64:	aa                   	stos   %al,%es:(%rdi)
    5e65:	aa                   	stos   %al,%es:(%rdi)
    5e66:	aa                   	stos   %al,%es:(%rdi)
    5e67:	aa                   	stos   %al,%es:(%rdi)
    5e68:	aa                   	stos   %al,%es:(%rdi)
    5e69:	aa                   	stos   %al,%es:(%rdi)
    5e6a:	aa                   	stos   %al,%es:(%rdi)
    5e6b:	aa                   	stos   %al,%es:(%rdi)
    5e6c:	aa                   	stos   %al,%es:(%rdi)
    5e6d:	aa                   	stos   %al,%es:(%rdi)
    5e6e:	aa                   	stos   %al,%es:(%rdi)
    5e6f:	aa                   	stos   %al,%es:(%rdi)
    5e70:	aa                   	stos   %al,%es:(%rdi)
    5e71:	aa                   	stos   %al,%es:(%rdi)
    5e72:	aa                   	stos   %al,%es:(%rdi)
    5e73:	aa                   	stos   %al,%es:(%rdi)
    5e74:	aa                   	stos   %al,%es:(%rdi)
    5e75:	aa                   	stos   %al,%es:(%rdi)
    5e76:	aa                   	stos   %al,%es:(%rdi)
    5e77:	aa                   	stos   %al,%es:(%rdi)
    5e78:	aa                   	stos   %al,%es:(%rdi)
    5e79:	aa                   	stos   %al,%es:(%rdi)
    5e7a:	aa                   	stos   %al,%es:(%rdi)
    5e7b:	aa                   	stos   %al,%es:(%rdi)
    5e7c:	aa                   	stos   %al,%es:(%rdi)
    5e7d:	aa                   	stos   %al,%es:(%rdi)
    5e7e:	aa                   	stos   %al,%es:(%rdi)
    5e7f:	aa                   	stos   %al,%es:(%rdi)
    5e80:	aa                   	stos   %al,%es:(%rdi)
    5e81:	aa                   	stos   %al,%es:(%rdi)
    5e82:	aa                   	stos   %al,%es:(%rdi)
    5e83:	aa                   	stos   %al,%es:(%rdi)
    5e84:	aa                   	stos   %al,%es:(%rdi)
    5e85:	aa                   	stos   %al,%es:(%rdi)
    5e86:	aa                   	stos   %al,%es:(%rdi)
    5e87:	aa                   	stos   %al,%es:(%rdi)
    5e88:	aa                   	stos   %al,%es:(%rdi)
    5e89:	aa                   	stos   %al,%es:(%rdi)
    5e8a:	aa                   	stos   %al,%es:(%rdi)
    5e8b:	aa                   	stos   %al,%es:(%rdi)
    5e8c:	aa                   	stos   %al,%es:(%rdi)
    5e8d:	aa                   	stos   %al,%es:(%rdi)
    5e8e:	aa                   	stos   %al,%es:(%rdi)
    5e8f:	aa                   	stos   %al,%es:(%rdi)
    5e90:	aa                   	stos   %al,%es:(%rdi)
    5e91:	aa                   	stos   %al,%es:(%rdi)
    5e92:	aa                   	stos   %al,%es:(%rdi)
    5e93:	aa                   	stos   %al,%es:(%rdi)
    5e94:	aa                   	stos   %al,%es:(%rdi)
    5e95:	aa                   	stos   %al,%es:(%rdi)
    5e96:	aa                   	stos   %al,%es:(%rdi)
    5e97:	aa                   	stos   %al,%es:(%rdi)
    5e98:	aa                   	stos   %al,%es:(%rdi)
    5e99:	aa                   	stos   %al,%es:(%rdi)
    5e9a:	aa                   	stos   %al,%es:(%rdi)
    5e9b:	aa                   	stos   %al,%es:(%rdi)
    5e9c:	aa                   	stos   %al,%es:(%rdi)
    5e9d:	aa                   	stos   %al,%es:(%rdi)
    5e9e:	aa                   	stos   %al,%es:(%rdi)
    5e9f:	aa                   	stos   %al,%es:(%rdi)
    5ea0:	aa                   	stos   %al,%es:(%rdi)
    5ea1:	aa                   	stos   %al,%es:(%rdi)
    5ea2:	aa                   	stos   %al,%es:(%rdi)
    5ea3:	aa                   	stos   %al,%es:(%rdi)
    5ea4:	aa                   	stos   %al,%es:(%rdi)
    5ea5:	aa                   	stos   %al,%es:(%rdi)
    5ea6:	aa                   	stos   %al,%es:(%rdi)
    5ea7:	aa                   	stos   %al,%es:(%rdi)
    5ea8:	aa                   	stos   %al,%es:(%rdi)
    5ea9:	aa                   	stos   %al,%es:(%rdi)
    5eaa:	aa                   	stos   %al,%es:(%rdi)
    5eab:	aa                   	stos   %al,%es:(%rdi)
    5eac:	aa                   	stos   %al,%es:(%rdi)
    5ead:	aa                   	stos   %al,%es:(%rdi)
    5eae:	aa                   	stos   %al,%es:(%rdi)
    5eaf:	aa                   	stos   %al,%es:(%rdi)
    5eb0:	aa                   	stos   %al,%es:(%rdi)
    5eb1:	aa                   	stos   %al,%es:(%rdi)
    5eb2:	aa                   	stos   %al,%es:(%rdi)
    5eb3:	aa                   	stos   %al,%es:(%rdi)
    5eb4:	aa                   	stos   %al,%es:(%rdi)
    5eb5:	aa                   	stos   %al,%es:(%rdi)
    5eb6:	aa                   	stos   %al,%es:(%rdi)
    5eb7:	aa                   	stos   %al,%es:(%rdi)
    5eb8:	aa                   	stos   %al,%es:(%rdi)
    5eb9:	aa                   	stos   %al,%es:(%rdi)
    5eba:	aa                   	stos   %al,%es:(%rdi)
    5ebb:	aa                   	stos   %al,%es:(%rdi)
    5ebc:	aa                   	stos   %al,%es:(%rdi)
    5ebd:	aa                   	stos   %al,%es:(%rdi)
    5ebe:	aa                   	stos   %al,%es:(%rdi)
    5ebf:	aa                   	stos   %al,%es:(%rdi)
    5ec0:	aa                   	stos   %al,%es:(%rdi)
    5ec1:	aa                   	stos   %al,%es:(%rdi)
    5ec2:	aa                   	stos   %al,%es:(%rdi)
    5ec3:	aa                   	stos   %al,%es:(%rdi)
    5ec4:	aa                   	stos   %al,%es:(%rdi)
    5ec5:	aa                   	stos   %al,%es:(%rdi)
    5ec6:	aa                   	stos   %al,%es:(%rdi)
    5ec7:	aa                   	stos   %al,%es:(%rdi)
    5ec8:	aa                   	stos   %al,%es:(%rdi)
    5ec9:	aa                   	stos   %al,%es:(%rdi)
    5eca:	aa                   	stos   %al,%es:(%rdi)
    5ecb:	aa                   	stos   %al,%es:(%rdi)
    5ecc:	aa                   	stos   %al,%es:(%rdi)
    5ecd:	aa                   	stos   %al,%es:(%rdi)
    5ece:	aa                   	stos   %al,%es:(%rdi)
    5ecf:	aa                   	stos   %al,%es:(%rdi)
    5ed0:	aa                   	stos   %al,%es:(%rdi)
    5ed1:	aa                   	stos   %al,%es:(%rdi)
    5ed2:	aa                   	stos   %al,%es:(%rdi)
    5ed3:	aa                   	stos   %al,%es:(%rdi)
    5ed4:	aa                   	stos   %al,%es:(%rdi)
    5ed5:	aa                   	stos   %al,%es:(%rdi)
    5ed6:	aa                   	stos   %al,%es:(%rdi)
    5ed7:	aa                   	stos   %al,%es:(%rdi)
    5ed8:	aa                   	stos   %al,%es:(%rdi)
    5ed9:	aa                   	stos   %al,%es:(%rdi)
    5eda:	aa                   	stos   %al,%es:(%rdi)
    5edb:	aa                   	stos   %al,%es:(%rdi)
    5edc:	aa                   	stos   %al,%es:(%rdi)
    5edd:	aa                   	stos   %al,%es:(%rdi)
    5ede:	aa                   	stos   %al,%es:(%rdi)
    5edf:	aa                   	stos   %al,%es:(%rdi)
    5ee0:	aa                   	stos   %al,%es:(%rdi)
    5ee1:	aa                   	stos   %al,%es:(%rdi)
    5ee2:	aa                   	stos   %al,%es:(%rdi)
    5ee3:	aa                   	stos   %al,%es:(%rdi)
    5ee4:	aa                   	stos   %al,%es:(%rdi)
    5ee5:	aa                   	stos   %al,%es:(%rdi)
    5ee6:	aa                   	stos   %al,%es:(%rdi)
    5ee7:	aa                   	stos   %al,%es:(%rdi)
    5ee8:	aa                   	stos   %al,%es:(%rdi)
    5ee9:	aa                   	stos   %al,%es:(%rdi)
    5eea:	aa                   	stos   %al,%es:(%rdi)
    5eeb:	aa                   	stos   %al,%es:(%rdi)
    5eec:	aa                   	stos   %al,%es:(%rdi)
    5eed:	aa                   	stos   %al,%es:(%rdi)
    5eee:	aa                   	stos   %al,%es:(%rdi)
    5eef:	aa                   	stos   %al,%es:(%rdi)
    5ef0:	aa                   	stos   %al,%es:(%rdi)
    5ef1:	aa                   	stos   %al,%es:(%rdi)
    5ef2:	aa                   	stos   %al,%es:(%rdi)
    5ef3:	aa                   	stos   %al,%es:(%rdi)
    5ef4:	aa                   	stos   %al,%es:(%rdi)
    5ef5:	aa                   	stos   %al,%es:(%rdi)
    5ef6:	aa                   	stos   %al,%es:(%rdi)
    5ef7:	aa                   	stos   %al,%es:(%rdi)
    5ef8:	aa                   	stos   %al,%es:(%rdi)
    5ef9:	aa                   	stos   %al,%es:(%rdi)
    5efa:	aa                   	stos   %al,%es:(%rdi)
    5efb:	aa                   	stos   %al,%es:(%rdi)
    5efc:	aa                   	stos   %al,%es:(%rdi)
    5efd:	aa                   	stos   %al,%es:(%rdi)
    5efe:	aa                   	stos   %al,%es:(%rdi)
    5eff:	aa                   	stos   %al,%es:(%rdi)
    5f00:	aa                   	stos   %al,%es:(%rdi)
    5f01:	aa                   	stos   %al,%es:(%rdi)
    5f02:	aa                   	stos   %al,%es:(%rdi)
    5f03:	aa                   	stos   %al,%es:(%rdi)
    5f04:	aa                   	stos   %al,%es:(%rdi)
    5f05:	aa                   	stos   %al,%es:(%rdi)
    5f06:	aa                   	stos   %al,%es:(%rdi)
    5f07:	aa                   	stos   %al,%es:(%rdi)
    5f08:	aa                   	stos   %al,%es:(%rdi)
    5f09:	aa                   	stos   %al,%es:(%rdi)
    5f0a:	aa                   	stos   %al,%es:(%rdi)
    5f0b:	aa                   	stos   %al,%es:(%rdi)
    5f0c:	aa                   	stos   %al,%es:(%rdi)
    5f0d:	aa                   	stos   %al,%es:(%rdi)
    5f0e:	aa                   	stos   %al,%es:(%rdi)
    5f0f:	aa                   	stos   %al,%es:(%rdi)
    5f10:	aa                   	stos   %al,%es:(%rdi)
    5f11:	aa                   	stos   %al,%es:(%rdi)
    5f12:	aa                   	stos   %al,%es:(%rdi)
    5f13:	aa                   	stos   %al,%es:(%rdi)
    5f14:	aa                   	stos   %al,%es:(%rdi)
    5f15:	aa                   	stos   %al,%es:(%rdi)
    5f16:	aa                   	stos   %al,%es:(%rdi)
    5f17:	aa                   	stos   %al,%es:(%rdi)
    5f18:	aa                   	stos   %al,%es:(%rdi)
    5f19:	aa                   	stos   %al,%es:(%rdi)
    5f1a:	aa                   	stos   %al,%es:(%rdi)
    5f1b:	aa                   	stos   %al,%es:(%rdi)
    5f1c:	aa                   	stos   %al,%es:(%rdi)
    5f1d:	aa                   	stos   %al,%es:(%rdi)
    5f1e:	aa                   	stos   %al,%es:(%rdi)
    5f1f:	aa                   	stos   %al,%es:(%rdi)
    5f20:	aa                   	stos   %al,%es:(%rdi)
    5f21:	aa                   	stos   %al,%es:(%rdi)
    5f22:	aa                   	stos   %al,%es:(%rdi)
    5f23:	aa                   	stos   %al,%es:(%rdi)
    5f24:	aa                   	stos   %al,%es:(%rdi)
    5f25:	aa                   	stos   %al,%es:(%rdi)
    5f26:	aa                   	stos   %al,%es:(%rdi)
    5f27:	aa                   	stos   %al,%es:(%rdi)
    5f28:	aa                   	stos   %al,%es:(%rdi)
    5f29:	aa                   	stos   %al,%es:(%rdi)
    5f2a:	aa                   	stos   %al,%es:(%rdi)
    5f2b:	aa                   	stos   %al,%es:(%rdi)
    5f2c:	aa                   	stos   %al,%es:(%rdi)
    5f2d:	aa                   	stos   %al,%es:(%rdi)
    5f2e:	aa                   	stos   %al,%es:(%rdi)
    5f2f:	aa                   	stos   %al,%es:(%rdi)
    5f30:	aa                   	stos   %al,%es:(%rdi)
    5f31:	aa                   	stos   %al,%es:(%rdi)
    5f32:	aa                   	stos   %al,%es:(%rdi)
    5f33:	aa                   	stos   %al,%es:(%rdi)
    5f34:	aa                   	stos   %al,%es:(%rdi)
    5f35:	aa                   	stos   %al,%es:(%rdi)
    5f36:	aa                   	stos   %al,%es:(%rdi)
    5f37:	aa                   	stos   %al,%es:(%rdi)
    5f38:	aa                   	stos   %al,%es:(%rdi)
    5f39:	aa                   	stos   %al,%es:(%rdi)
    5f3a:	aa                   	stos   %al,%es:(%rdi)
    5f3b:	aa                   	stos   %al,%es:(%rdi)
    5f3c:	aa                   	stos   %al,%es:(%rdi)
    5f3d:	aa                   	stos   %al,%es:(%rdi)
    5f3e:	aa                   	stos   %al,%es:(%rdi)
    5f3f:	aa                   	stos   %al,%es:(%rdi)
    5f40:	aa                   	stos   %al,%es:(%rdi)
    5f41:	aa                   	stos   %al,%es:(%rdi)
    5f42:	aa                   	stos   %al,%es:(%rdi)
    5f43:	aa                   	stos   %al,%es:(%rdi)
    5f44:	aa                   	stos   %al,%es:(%rdi)
    5f45:	aa                   	stos   %al,%es:(%rdi)
    5f46:	aa                   	stos   %al,%es:(%rdi)
    5f47:	aa                   	stos   %al,%es:(%rdi)
    5f48:	aa                   	stos   %al,%es:(%rdi)
    5f49:	aa                   	stos   %al,%es:(%rdi)
    5f4a:	aa                   	stos   %al,%es:(%rdi)
    5f4b:	aa                   	stos   %al,%es:(%rdi)
    5f4c:	aa                   	stos   %al,%es:(%rdi)
    5f4d:	aa                   	stos   %al,%es:(%rdi)
    5f4e:	aa                   	stos   %al,%es:(%rdi)
    5f4f:	aa                   	stos   %al,%es:(%rdi)
    5f50:	aa                   	stos   %al,%es:(%rdi)
    5f51:	aa                   	stos   %al,%es:(%rdi)
    5f52:	aa                   	stos   %al,%es:(%rdi)
    5f53:	aa                   	stos   %al,%es:(%rdi)
    5f54:	aa                   	stos   %al,%es:(%rdi)
    5f55:	aa                   	stos   %al,%es:(%rdi)
    5f56:	aa                   	stos   %al,%es:(%rdi)
    5f57:	aa                   	stos   %al,%es:(%rdi)
    5f58:	aa                   	stos   %al,%es:(%rdi)
    5f59:	aa                   	stos   %al,%es:(%rdi)
    5f5a:	aa                   	stos   %al,%es:(%rdi)
    5f5b:	aa                   	stos   %al,%es:(%rdi)
    5f5c:	aa                   	stos   %al,%es:(%rdi)
    5f5d:	aa                   	stos   %al,%es:(%rdi)
    5f5e:	aa                   	stos   %al,%es:(%rdi)
    5f5f:	aa                   	stos   %al,%es:(%rdi)
    5f60:	aa                   	stos   %al,%es:(%rdi)
    5f61:	aa                   	stos   %al,%es:(%rdi)
    5f62:	aa                   	stos   %al,%es:(%rdi)
    5f63:	aa                   	stos   %al,%es:(%rdi)
    5f64:	aa                   	stos   %al,%es:(%rdi)
    5f65:	aa                   	stos   %al,%es:(%rdi)
    5f66:	aa                   	stos   %al,%es:(%rdi)
    5f67:	aa                   	stos   %al,%es:(%rdi)
    5f68:	aa                   	stos   %al,%es:(%rdi)
    5f69:	aa                   	stos   %al,%es:(%rdi)
    5f6a:	aa                   	stos   %al,%es:(%rdi)
    5f6b:	aa                   	stos   %al,%es:(%rdi)
    5f6c:	aa                   	stos   %al,%es:(%rdi)
    5f6d:	aa                   	stos   %al,%es:(%rdi)
    5f6e:	aa                   	stos   %al,%es:(%rdi)
    5f6f:	aa                   	stos   %al,%es:(%rdi)
    5f70:	aa                   	stos   %al,%es:(%rdi)
    5f71:	aa                   	stos   %al,%es:(%rdi)
    5f72:	aa                   	stos   %al,%es:(%rdi)
    5f73:	aa                   	stos   %al,%es:(%rdi)
    5f74:	aa                   	stos   %al,%es:(%rdi)
    5f75:	aa                   	stos   %al,%es:(%rdi)
    5f76:	aa                   	stos   %al,%es:(%rdi)
    5f77:	aa                   	stos   %al,%es:(%rdi)
    5f78:	aa                   	stos   %al,%es:(%rdi)
    5f79:	aa                   	stos   %al,%es:(%rdi)
    5f7a:	aa                   	stos   %al,%es:(%rdi)
    5f7b:	aa                   	stos   %al,%es:(%rdi)
    5f7c:	aa                   	stos   %al,%es:(%rdi)
    5f7d:	aa                   	stos   %al,%es:(%rdi)
    5f7e:	aa                   	stos   %al,%es:(%rdi)
    5f7f:	aa                   	stos   %al,%es:(%rdi)
    5f80:	aa                   	stos   %al,%es:(%rdi)
    5f81:	aa                   	stos   %al,%es:(%rdi)
    5f82:	aa                   	stos   %al,%es:(%rdi)
    5f83:	aa                   	stos   %al,%es:(%rdi)
    5f84:	aa                   	stos   %al,%es:(%rdi)
    5f85:	aa                   	stos   %al,%es:(%rdi)
    5f86:	aa                   	stos   %al,%es:(%rdi)
    5f87:	aa                   	stos   %al,%es:(%rdi)
    5f88:	aa                   	stos   %al,%es:(%rdi)
    5f89:	aa                   	stos   %al,%es:(%rdi)
    5f8a:	aa                   	stos   %al,%es:(%rdi)
    5f8b:	aa                   	stos   %al,%es:(%rdi)
    5f8c:	aa                   	stos   %al,%es:(%rdi)
    5f8d:	aa                   	stos   %al,%es:(%rdi)
    5f8e:	aa                   	stos   %al,%es:(%rdi)
    5f8f:	aa                   	stos   %al,%es:(%rdi)
    5f90:	aa                   	stos   %al,%es:(%rdi)
    5f91:	aa                   	stos   %al,%es:(%rdi)
    5f92:	aa                   	stos   %al,%es:(%rdi)
    5f93:	aa                   	stos   %al,%es:(%rdi)
    5f94:	aa                   	stos   %al,%es:(%rdi)
    5f95:	aa                   	stos   %al,%es:(%rdi)
    5f96:	aa                   	stos   %al,%es:(%rdi)
    5f97:	aa                   	stos   %al,%es:(%rdi)
    5f98:	aa                   	stos   %al,%es:(%rdi)
    5f99:	aa                   	stos   %al,%es:(%rdi)
    5f9a:	aa                   	stos   %al,%es:(%rdi)
    5f9b:	aa                   	stos   %al,%es:(%rdi)
    5f9c:	aa                   	stos   %al,%es:(%rdi)
    5f9d:	aa                   	stos   %al,%es:(%rdi)
    5f9e:	aa                   	stos   %al,%es:(%rdi)
    5f9f:	aa                   	stos   %al,%es:(%rdi)
    5fa0:	aa                   	stos   %al,%es:(%rdi)
    5fa1:	aa                   	stos   %al,%es:(%rdi)
    5fa2:	aa                   	stos   %al,%es:(%rdi)
    5fa3:	aa                   	stos   %al,%es:(%rdi)
    5fa4:	aa                   	stos   %al,%es:(%rdi)
    5fa5:	aa                   	stos   %al,%es:(%rdi)
    5fa6:	aa                   	stos   %al,%es:(%rdi)
    5fa7:	aa                   	stos   %al,%es:(%rdi)
    5fa8:	aa                   	stos   %al,%es:(%rdi)
    5fa9:	aa                   	stos   %al,%es:(%rdi)
    5faa:	aa                   	stos   %al,%es:(%rdi)
    5fab:	aa                   	stos   %al,%es:(%rdi)
    5fac:	aa                   	stos   %al,%es:(%rdi)
    5fad:	aa                   	stos   %al,%es:(%rdi)
    5fae:	aa                   	stos   %al,%es:(%rdi)
    5faf:	aa                   	stos   %al,%es:(%rdi)
    5fb0:	aa                   	stos   %al,%es:(%rdi)
    5fb1:	aa                   	stos   %al,%es:(%rdi)
    5fb2:	aa                   	stos   %al,%es:(%rdi)
    5fb3:	aa                   	stos   %al,%es:(%rdi)
    5fb4:	aa                   	stos   %al,%es:(%rdi)
    5fb5:	aa                   	stos   %al,%es:(%rdi)
    5fb6:	aa                   	stos   %al,%es:(%rdi)
    5fb7:	aa                   	stos   %al,%es:(%rdi)
    5fb8:	aa                   	stos   %al,%es:(%rdi)
    5fb9:	aa                   	stos   %al,%es:(%rdi)
    5fba:	aa                   	stos   %al,%es:(%rdi)
    5fbb:	aa                   	stos   %al,%es:(%rdi)
    5fbc:	aa                   	stos   %al,%es:(%rdi)
    5fbd:	aa                   	stos   %al,%es:(%rdi)
    5fbe:	aa                   	stos   %al,%es:(%rdi)
    5fbf:	aa                   	stos   %al,%es:(%rdi)
    5fc0:	aa                   	stos   %al,%es:(%rdi)
    5fc1:	aa                   	stos   %al,%es:(%rdi)
    5fc2:	aa                   	stos   %al,%es:(%rdi)
    5fc3:	aa                   	stos   %al,%es:(%rdi)
    5fc4:	aa                   	stos   %al,%es:(%rdi)
    5fc5:	aa                   	stos   %al,%es:(%rdi)
    5fc6:	aa                   	stos   %al,%es:(%rdi)
    5fc7:	aa                   	stos   %al,%es:(%rdi)
    5fc8:	aa                   	stos   %al,%es:(%rdi)
    5fc9:	aa                   	stos   %al,%es:(%rdi)
    5fca:	aa                   	stos   %al,%es:(%rdi)
    5fcb:	aa                   	stos   %al,%es:(%rdi)
    5fcc:	aa                   	stos   %al,%es:(%rdi)
    5fcd:	aa                   	stos   %al,%es:(%rdi)
    5fce:	aa                   	stos   %al,%es:(%rdi)
    5fcf:	aa                   	stos   %al,%es:(%rdi)
    5fd0:	aa                   	stos   %al,%es:(%rdi)
    5fd1:	aa                   	stos   %al,%es:(%rdi)
    5fd2:	aa                   	stos   %al,%es:(%rdi)
    5fd3:	aa                   	stos   %al,%es:(%rdi)
    5fd4:	aa                   	stos   %al,%es:(%rdi)
    5fd5:	aa                   	stos   %al,%es:(%rdi)
    5fd6:	aa                   	stos   %al,%es:(%rdi)
    5fd7:	aa                   	stos   %al,%es:(%rdi)
    5fd8:	aa                   	stos   %al,%es:(%rdi)
    5fd9:	aa                   	stos   %al,%es:(%rdi)
    5fda:	aa                   	stos   %al,%es:(%rdi)
    5fdb:	aa                   	stos   %al,%es:(%rdi)
    5fdc:	aa                   	stos   %al,%es:(%rdi)
    5fdd:	aa                   	stos   %al,%es:(%rdi)
    5fde:	aa                   	stos   %al,%es:(%rdi)
    5fdf:	aa                   	stos   %al,%es:(%rdi)
    5fe0:	aa                   	stos   %al,%es:(%rdi)
    5fe1:	aa                   	stos   %al,%es:(%rdi)
    5fe2:	aa                   	stos   %al,%es:(%rdi)
    5fe3:	aa                   	stos   %al,%es:(%rdi)
    5fe4:	aa                   	stos   %al,%es:(%rdi)
    5fe5:	aa                   	stos   %al,%es:(%rdi)
    5fe6:	aa                   	stos   %al,%es:(%rdi)
    5fe7:	aa                   	stos   %al,%es:(%rdi)
    5fe8:	aa                   	stos   %al,%es:(%rdi)
    5fe9:	aa                   	stos   %al,%es:(%rdi)
    5fea:	aa                   	stos   %al,%es:(%rdi)
    5feb:	aa                   	stos   %al,%es:(%rdi)
    5fec:	aa                   	stos   %al,%es:(%rdi)
    5fed:	aa                   	stos   %al,%es:(%rdi)
    5fee:	aa                   	stos   %al,%es:(%rdi)
    5fef:	aa                   	stos   %al,%es:(%rdi)
    5ff0:	aa                   	stos   %al,%es:(%rdi)
    5ff1:	aa                   	stos   %al,%es:(%rdi)
    5ff2:	aa                   	stos   %al,%es:(%rdi)
    5ff3:	aa                   	stos   %al,%es:(%rdi)
    5ff4:	aa                   	stos   %al,%es:(%rdi)
    5ff5:	aa                   	stos   %al,%es:(%rdi)
    5ff6:	aa                   	stos   %al,%es:(%rdi)
    5ff7:	aa                   	stos   %al,%es:(%rdi)
    5ff8:	aa                   	stos   %al,%es:(%rdi)
    5ff9:	aa                   	stos   %al,%es:(%rdi)
    5ffa:	aa                   	stos   %al,%es:(%rdi)
    5ffb:	aa                   	stos   %al,%es:(%rdi)
    5ffc:	aa                   	stos   %al,%es:(%rdi)
    5ffd:	aa                   	stos   %al,%es:(%rdi)
    5ffe:	aa                   	stos   %al,%es:(%rdi)
    5fff:	aa                   	stos   %al,%es:(%rdi)

0000000000006000 <z_x86_exception_stack1>:
    6000:	aa                   	stos   %al,%es:(%rdi)
    6001:	aa                   	stos   %al,%es:(%rdi)
    6002:	aa                   	stos   %al,%es:(%rdi)
    6003:	aa                   	stos   %al,%es:(%rdi)
    6004:	aa                   	stos   %al,%es:(%rdi)
    6005:	aa                   	stos   %al,%es:(%rdi)
    6006:	aa                   	stos   %al,%es:(%rdi)
    6007:	aa                   	stos   %al,%es:(%rdi)
    6008:	aa                   	stos   %al,%es:(%rdi)
    6009:	aa                   	stos   %al,%es:(%rdi)
    600a:	aa                   	stos   %al,%es:(%rdi)
    600b:	aa                   	stos   %al,%es:(%rdi)
    600c:	aa                   	stos   %al,%es:(%rdi)
    600d:	aa                   	stos   %al,%es:(%rdi)
    600e:	aa                   	stos   %al,%es:(%rdi)
    600f:	aa                   	stos   %al,%es:(%rdi)
    6010:	aa                   	stos   %al,%es:(%rdi)
    6011:	aa                   	stos   %al,%es:(%rdi)
    6012:	aa                   	stos   %al,%es:(%rdi)
    6013:	aa                   	stos   %al,%es:(%rdi)
    6014:	aa                   	stos   %al,%es:(%rdi)
    6015:	aa                   	stos   %al,%es:(%rdi)
    6016:	aa                   	stos   %al,%es:(%rdi)
    6017:	aa                   	stos   %al,%es:(%rdi)
    6018:	aa                   	stos   %al,%es:(%rdi)
    6019:	aa                   	stos   %al,%es:(%rdi)
    601a:	aa                   	stos   %al,%es:(%rdi)
    601b:	aa                   	stos   %al,%es:(%rdi)
    601c:	aa                   	stos   %al,%es:(%rdi)
    601d:	aa                   	stos   %al,%es:(%rdi)
    601e:	aa                   	stos   %al,%es:(%rdi)
    601f:	aa                   	stos   %al,%es:(%rdi)
    6020:	aa                   	stos   %al,%es:(%rdi)
    6021:	aa                   	stos   %al,%es:(%rdi)
    6022:	aa                   	stos   %al,%es:(%rdi)
    6023:	aa                   	stos   %al,%es:(%rdi)
    6024:	aa                   	stos   %al,%es:(%rdi)
    6025:	aa                   	stos   %al,%es:(%rdi)
    6026:	aa                   	stos   %al,%es:(%rdi)
    6027:	aa                   	stos   %al,%es:(%rdi)
    6028:	aa                   	stos   %al,%es:(%rdi)
    6029:	aa                   	stos   %al,%es:(%rdi)
    602a:	aa                   	stos   %al,%es:(%rdi)
    602b:	aa                   	stos   %al,%es:(%rdi)
    602c:	aa                   	stos   %al,%es:(%rdi)
    602d:	aa                   	stos   %al,%es:(%rdi)
    602e:	aa                   	stos   %al,%es:(%rdi)
    602f:	aa                   	stos   %al,%es:(%rdi)
    6030:	aa                   	stos   %al,%es:(%rdi)
    6031:	aa                   	stos   %al,%es:(%rdi)
    6032:	aa                   	stos   %al,%es:(%rdi)
    6033:	aa                   	stos   %al,%es:(%rdi)
    6034:	aa                   	stos   %al,%es:(%rdi)
    6035:	aa                   	stos   %al,%es:(%rdi)
    6036:	aa                   	stos   %al,%es:(%rdi)
    6037:	aa                   	stos   %al,%es:(%rdi)
    6038:	aa                   	stos   %al,%es:(%rdi)
    6039:	aa                   	stos   %al,%es:(%rdi)
    603a:	aa                   	stos   %al,%es:(%rdi)
    603b:	aa                   	stos   %al,%es:(%rdi)
    603c:	aa                   	stos   %al,%es:(%rdi)
    603d:	aa                   	stos   %al,%es:(%rdi)
    603e:	aa                   	stos   %al,%es:(%rdi)
    603f:	aa                   	stos   %al,%es:(%rdi)
    6040:	aa                   	stos   %al,%es:(%rdi)
    6041:	aa                   	stos   %al,%es:(%rdi)
    6042:	aa                   	stos   %al,%es:(%rdi)
    6043:	aa                   	stos   %al,%es:(%rdi)
    6044:	aa                   	stos   %al,%es:(%rdi)
    6045:	aa                   	stos   %al,%es:(%rdi)
    6046:	aa                   	stos   %al,%es:(%rdi)
    6047:	aa                   	stos   %al,%es:(%rdi)
    6048:	aa                   	stos   %al,%es:(%rdi)
    6049:	aa                   	stos   %al,%es:(%rdi)
    604a:	aa                   	stos   %al,%es:(%rdi)
    604b:	aa                   	stos   %al,%es:(%rdi)
    604c:	aa                   	stos   %al,%es:(%rdi)
    604d:	aa                   	stos   %al,%es:(%rdi)
    604e:	aa                   	stos   %al,%es:(%rdi)
    604f:	aa                   	stos   %al,%es:(%rdi)
    6050:	aa                   	stos   %al,%es:(%rdi)
    6051:	aa                   	stos   %al,%es:(%rdi)
    6052:	aa                   	stos   %al,%es:(%rdi)
    6053:	aa                   	stos   %al,%es:(%rdi)
    6054:	aa                   	stos   %al,%es:(%rdi)
    6055:	aa                   	stos   %al,%es:(%rdi)
    6056:	aa                   	stos   %al,%es:(%rdi)
    6057:	aa                   	stos   %al,%es:(%rdi)
    6058:	aa                   	stos   %al,%es:(%rdi)
    6059:	aa                   	stos   %al,%es:(%rdi)
    605a:	aa                   	stos   %al,%es:(%rdi)
    605b:	aa                   	stos   %al,%es:(%rdi)
    605c:	aa                   	stos   %al,%es:(%rdi)
    605d:	aa                   	stos   %al,%es:(%rdi)
    605e:	aa                   	stos   %al,%es:(%rdi)
    605f:	aa                   	stos   %al,%es:(%rdi)
    6060:	aa                   	stos   %al,%es:(%rdi)
    6061:	aa                   	stos   %al,%es:(%rdi)
    6062:	aa                   	stos   %al,%es:(%rdi)
    6063:	aa                   	stos   %al,%es:(%rdi)
    6064:	aa                   	stos   %al,%es:(%rdi)
    6065:	aa                   	stos   %al,%es:(%rdi)
    6066:	aa                   	stos   %al,%es:(%rdi)
    6067:	aa                   	stos   %al,%es:(%rdi)
    6068:	aa                   	stos   %al,%es:(%rdi)
    6069:	aa                   	stos   %al,%es:(%rdi)
    606a:	aa                   	stos   %al,%es:(%rdi)
    606b:	aa                   	stos   %al,%es:(%rdi)
    606c:	aa                   	stos   %al,%es:(%rdi)
    606d:	aa                   	stos   %al,%es:(%rdi)
    606e:	aa                   	stos   %al,%es:(%rdi)
    606f:	aa                   	stos   %al,%es:(%rdi)
    6070:	aa                   	stos   %al,%es:(%rdi)
    6071:	aa                   	stos   %al,%es:(%rdi)
    6072:	aa                   	stos   %al,%es:(%rdi)
    6073:	aa                   	stos   %al,%es:(%rdi)
    6074:	aa                   	stos   %al,%es:(%rdi)
    6075:	aa                   	stos   %al,%es:(%rdi)
    6076:	aa                   	stos   %al,%es:(%rdi)
    6077:	aa                   	stos   %al,%es:(%rdi)
    6078:	aa                   	stos   %al,%es:(%rdi)
    6079:	aa                   	stos   %al,%es:(%rdi)
    607a:	aa                   	stos   %al,%es:(%rdi)
    607b:	aa                   	stos   %al,%es:(%rdi)
    607c:	aa                   	stos   %al,%es:(%rdi)
    607d:	aa                   	stos   %al,%es:(%rdi)
    607e:	aa                   	stos   %al,%es:(%rdi)
    607f:	aa                   	stos   %al,%es:(%rdi)
    6080:	aa                   	stos   %al,%es:(%rdi)
    6081:	aa                   	stos   %al,%es:(%rdi)
    6082:	aa                   	stos   %al,%es:(%rdi)
    6083:	aa                   	stos   %al,%es:(%rdi)
    6084:	aa                   	stos   %al,%es:(%rdi)
    6085:	aa                   	stos   %al,%es:(%rdi)
    6086:	aa                   	stos   %al,%es:(%rdi)
    6087:	aa                   	stos   %al,%es:(%rdi)
    6088:	aa                   	stos   %al,%es:(%rdi)
    6089:	aa                   	stos   %al,%es:(%rdi)
    608a:	aa                   	stos   %al,%es:(%rdi)
    608b:	aa                   	stos   %al,%es:(%rdi)
    608c:	aa                   	stos   %al,%es:(%rdi)
    608d:	aa                   	stos   %al,%es:(%rdi)
    608e:	aa                   	stos   %al,%es:(%rdi)
    608f:	aa                   	stos   %al,%es:(%rdi)
    6090:	aa                   	stos   %al,%es:(%rdi)
    6091:	aa                   	stos   %al,%es:(%rdi)
    6092:	aa                   	stos   %al,%es:(%rdi)
    6093:	aa                   	stos   %al,%es:(%rdi)
    6094:	aa                   	stos   %al,%es:(%rdi)
    6095:	aa                   	stos   %al,%es:(%rdi)
    6096:	aa                   	stos   %al,%es:(%rdi)
    6097:	aa                   	stos   %al,%es:(%rdi)
    6098:	aa                   	stos   %al,%es:(%rdi)
    6099:	aa                   	stos   %al,%es:(%rdi)
    609a:	aa                   	stos   %al,%es:(%rdi)
    609b:	aa                   	stos   %al,%es:(%rdi)
    609c:	aa                   	stos   %al,%es:(%rdi)
    609d:	aa                   	stos   %al,%es:(%rdi)
    609e:	aa                   	stos   %al,%es:(%rdi)
    609f:	aa                   	stos   %al,%es:(%rdi)
    60a0:	aa                   	stos   %al,%es:(%rdi)
    60a1:	aa                   	stos   %al,%es:(%rdi)
    60a2:	aa                   	stos   %al,%es:(%rdi)
    60a3:	aa                   	stos   %al,%es:(%rdi)
    60a4:	aa                   	stos   %al,%es:(%rdi)
    60a5:	aa                   	stos   %al,%es:(%rdi)
    60a6:	aa                   	stos   %al,%es:(%rdi)
    60a7:	aa                   	stos   %al,%es:(%rdi)
    60a8:	aa                   	stos   %al,%es:(%rdi)
    60a9:	aa                   	stos   %al,%es:(%rdi)
    60aa:	aa                   	stos   %al,%es:(%rdi)
    60ab:	aa                   	stos   %al,%es:(%rdi)
    60ac:	aa                   	stos   %al,%es:(%rdi)
    60ad:	aa                   	stos   %al,%es:(%rdi)
    60ae:	aa                   	stos   %al,%es:(%rdi)
    60af:	aa                   	stos   %al,%es:(%rdi)
    60b0:	aa                   	stos   %al,%es:(%rdi)
    60b1:	aa                   	stos   %al,%es:(%rdi)
    60b2:	aa                   	stos   %al,%es:(%rdi)
    60b3:	aa                   	stos   %al,%es:(%rdi)
    60b4:	aa                   	stos   %al,%es:(%rdi)
    60b5:	aa                   	stos   %al,%es:(%rdi)
    60b6:	aa                   	stos   %al,%es:(%rdi)
    60b7:	aa                   	stos   %al,%es:(%rdi)
    60b8:	aa                   	stos   %al,%es:(%rdi)
    60b9:	aa                   	stos   %al,%es:(%rdi)
    60ba:	aa                   	stos   %al,%es:(%rdi)
    60bb:	aa                   	stos   %al,%es:(%rdi)
    60bc:	aa                   	stos   %al,%es:(%rdi)
    60bd:	aa                   	stos   %al,%es:(%rdi)
    60be:	aa                   	stos   %al,%es:(%rdi)
    60bf:	aa                   	stos   %al,%es:(%rdi)
    60c0:	aa                   	stos   %al,%es:(%rdi)
    60c1:	aa                   	stos   %al,%es:(%rdi)
    60c2:	aa                   	stos   %al,%es:(%rdi)
    60c3:	aa                   	stos   %al,%es:(%rdi)
    60c4:	aa                   	stos   %al,%es:(%rdi)
    60c5:	aa                   	stos   %al,%es:(%rdi)
    60c6:	aa                   	stos   %al,%es:(%rdi)
    60c7:	aa                   	stos   %al,%es:(%rdi)
    60c8:	aa                   	stos   %al,%es:(%rdi)
    60c9:	aa                   	stos   %al,%es:(%rdi)
    60ca:	aa                   	stos   %al,%es:(%rdi)
    60cb:	aa                   	stos   %al,%es:(%rdi)
    60cc:	aa                   	stos   %al,%es:(%rdi)
    60cd:	aa                   	stos   %al,%es:(%rdi)
    60ce:	aa                   	stos   %al,%es:(%rdi)
    60cf:	aa                   	stos   %al,%es:(%rdi)
    60d0:	aa                   	stos   %al,%es:(%rdi)
    60d1:	aa                   	stos   %al,%es:(%rdi)
    60d2:	aa                   	stos   %al,%es:(%rdi)
    60d3:	aa                   	stos   %al,%es:(%rdi)
    60d4:	aa                   	stos   %al,%es:(%rdi)
    60d5:	aa                   	stos   %al,%es:(%rdi)
    60d6:	aa                   	stos   %al,%es:(%rdi)
    60d7:	aa                   	stos   %al,%es:(%rdi)
    60d8:	aa                   	stos   %al,%es:(%rdi)
    60d9:	aa                   	stos   %al,%es:(%rdi)
    60da:	aa                   	stos   %al,%es:(%rdi)
    60db:	aa                   	stos   %al,%es:(%rdi)
    60dc:	aa                   	stos   %al,%es:(%rdi)
    60dd:	aa                   	stos   %al,%es:(%rdi)
    60de:	aa                   	stos   %al,%es:(%rdi)
    60df:	aa                   	stos   %al,%es:(%rdi)
    60e0:	aa                   	stos   %al,%es:(%rdi)
    60e1:	aa                   	stos   %al,%es:(%rdi)
    60e2:	aa                   	stos   %al,%es:(%rdi)
    60e3:	aa                   	stos   %al,%es:(%rdi)
    60e4:	aa                   	stos   %al,%es:(%rdi)
    60e5:	aa                   	stos   %al,%es:(%rdi)
    60e6:	aa                   	stos   %al,%es:(%rdi)
    60e7:	aa                   	stos   %al,%es:(%rdi)
    60e8:	aa                   	stos   %al,%es:(%rdi)
    60e9:	aa                   	stos   %al,%es:(%rdi)
    60ea:	aa                   	stos   %al,%es:(%rdi)
    60eb:	aa                   	stos   %al,%es:(%rdi)
    60ec:	aa                   	stos   %al,%es:(%rdi)
    60ed:	aa                   	stos   %al,%es:(%rdi)
    60ee:	aa                   	stos   %al,%es:(%rdi)
    60ef:	aa                   	stos   %al,%es:(%rdi)
    60f0:	aa                   	stos   %al,%es:(%rdi)
    60f1:	aa                   	stos   %al,%es:(%rdi)
    60f2:	aa                   	stos   %al,%es:(%rdi)
    60f3:	aa                   	stos   %al,%es:(%rdi)
    60f4:	aa                   	stos   %al,%es:(%rdi)
    60f5:	aa                   	stos   %al,%es:(%rdi)
    60f6:	aa                   	stos   %al,%es:(%rdi)
    60f7:	aa                   	stos   %al,%es:(%rdi)
    60f8:	aa                   	stos   %al,%es:(%rdi)
    60f9:	aa                   	stos   %al,%es:(%rdi)
    60fa:	aa                   	stos   %al,%es:(%rdi)
    60fb:	aa                   	stos   %al,%es:(%rdi)
    60fc:	aa                   	stos   %al,%es:(%rdi)
    60fd:	aa                   	stos   %al,%es:(%rdi)
    60fe:	aa                   	stos   %al,%es:(%rdi)
    60ff:	aa                   	stos   %al,%es:(%rdi)
    6100:	aa                   	stos   %al,%es:(%rdi)
    6101:	aa                   	stos   %al,%es:(%rdi)
    6102:	aa                   	stos   %al,%es:(%rdi)
    6103:	aa                   	stos   %al,%es:(%rdi)
    6104:	aa                   	stos   %al,%es:(%rdi)
    6105:	aa                   	stos   %al,%es:(%rdi)
    6106:	aa                   	stos   %al,%es:(%rdi)
    6107:	aa                   	stos   %al,%es:(%rdi)
    6108:	aa                   	stos   %al,%es:(%rdi)
    6109:	aa                   	stos   %al,%es:(%rdi)
    610a:	aa                   	stos   %al,%es:(%rdi)
    610b:	aa                   	stos   %al,%es:(%rdi)
    610c:	aa                   	stos   %al,%es:(%rdi)
    610d:	aa                   	stos   %al,%es:(%rdi)
    610e:	aa                   	stos   %al,%es:(%rdi)
    610f:	aa                   	stos   %al,%es:(%rdi)
    6110:	aa                   	stos   %al,%es:(%rdi)
    6111:	aa                   	stos   %al,%es:(%rdi)
    6112:	aa                   	stos   %al,%es:(%rdi)
    6113:	aa                   	stos   %al,%es:(%rdi)
    6114:	aa                   	stos   %al,%es:(%rdi)
    6115:	aa                   	stos   %al,%es:(%rdi)
    6116:	aa                   	stos   %al,%es:(%rdi)
    6117:	aa                   	stos   %al,%es:(%rdi)
    6118:	aa                   	stos   %al,%es:(%rdi)
    6119:	aa                   	stos   %al,%es:(%rdi)
    611a:	aa                   	stos   %al,%es:(%rdi)
    611b:	aa                   	stos   %al,%es:(%rdi)
    611c:	aa                   	stos   %al,%es:(%rdi)
    611d:	aa                   	stos   %al,%es:(%rdi)
    611e:	aa                   	stos   %al,%es:(%rdi)
    611f:	aa                   	stos   %al,%es:(%rdi)
    6120:	aa                   	stos   %al,%es:(%rdi)
    6121:	aa                   	stos   %al,%es:(%rdi)
    6122:	aa                   	stos   %al,%es:(%rdi)
    6123:	aa                   	stos   %al,%es:(%rdi)
    6124:	aa                   	stos   %al,%es:(%rdi)
    6125:	aa                   	stos   %al,%es:(%rdi)
    6126:	aa                   	stos   %al,%es:(%rdi)
    6127:	aa                   	stos   %al,%es:(%rdi)
    6128:	aa                   	stos   %al,%es:(%rdi)
    6129:	aa                   	stos   %al,%es:(%rdi)
    612a:	aa                   	stos   %al,%es:(%rdi)
    612b:	aa                   	stos   %al,%es:(%rdi)
    612c:	aa                   	stos   %al,%es:(%rdi)
    612d:	aa                   	stos   %al,%es:(%rdi)
    612e:	aa                   	stos   %al,%es:(%rdi)
    612f:	aa                   	stos   %al,%es:(%rdi)
    6130:	aa                   	stos   %al,%es:(%rdi)
    6131:	aa                   	stos   %al,%es:(%rdi)
    6132:	aa                   	stos   %al,%es:(%rdi)
    6133:	aa                   	stos   %al,%es:(%rdi)
    6134:	aa                   	stos   %al,%es:(%rdi)
    6135:	aa                   	stos   %al,%es:(%rdi)
    6136:	aa                   	stos   %al,%es:(%rdi)
    6137:	aa                   	stos   %al,%es:(%rdi)
    6138:	aa                   	stos   %al,%es:(%rdi)
    6139:	aa                   	stos   %al,%es:(%rdi)
    613a:	aa                   	stos   %al,%es:(%rdi)
    613b:	aa                   	stos   %al,%es:(%rdi)
    613c:	aa                   	stos   %al,%es:(%rdi)
    613d:	aa                   	stos   %al,%es:(%rdi)
    613e:	aa                   	stos   %al,%es:(%rdi)
    613f:	aa                   	stos   %al,%es:(%rdi)
    6140:	aa                   	stos   %al,%es:(%rdi)
    6141:	aa                   	stos   %al,%es:(%rdi)
    6142:	aa                   	stos   %al,%es:(%rdi)
    6143:	aa                   	stos   %al,%es:(%rdi)
    6144:	aa                   	stos   %al,%es:(%rdi)
    6145:	aa                   	stos   %al,%es:(%rdi)
    6146:	aa                   	stos   %al,%es:(%rdi)
    6147:	aa                   	stos   %al,%es:(%rdi)
    6148:	aa                   	stos   %al,%es:(%rdi)
    6149:	aa                   	stos   %al,%es:(%rdi)
    614a:	aa                   	stos   %al,%es:(%rdi)
    614b:	aa                   	stos   %al,%es:(%rdi)
    614c:	aa                   	stos   %al,%es:(%rdi)
    614d:	aa                   	stos   %al,%es:(%rdi)
    614e:	aa                   	stos   %al,%es:(%rdi)
    614f:	aa                   	stos   %al,%es:(%rdi)
    6150:	aa                   	stos   %al,%es:(%rdi)
    6151:	aa                   	stos   %al,%es:(%rdi)
    6152:	aa                   	stos   %al,%es:(%rdi)
    6153:	aa                   	stos   %al,%es:(%rdi)
    6154:	aa                   	stos   %al,%es:(%rdi)
    6155:	aa                   	stos   %al,%es:(%rdi)
    6156:	aa                   	stos   %al,%es:(%rdi)
    6157:	aa                   	stos   %al,%es:(%rdi)
    6158:	aa                   	stos   %al,%es:(%rdi)
    6159:	aa                   	stos   %al,%es:(%rdi)
    615a:	aa                   	stos   %al,%es:(%rdi)
    615b:	aa                   	stos   %al,%es:(%rdi)
    615c:	aa                   	stos   %al,%es:(%rdi)
    615d:	aa                   	stos   %al,%es:(%rdi)
    615e:	aa                   	stos   %al,%es:(%rdi)
    615f:	aa                   	stos   %al,%es:(%rdi)
    6160:	aa                   	stos   %al,%es:(%rdi)
    6161:	aa                   	stos   %al,%es:(%rdi)
    6162:	aa                   	stos   %al,%es:(%rdi)
    6163:	aa                   	stos   %al,%es:(%rdi)
    6164:	aa                   	stos   %al,%es:(%rdi)
    6165:	aa                   	stos   %al,%es:(%rdi)
    6166:	aa                   	stos   %al,%es:(%rdi)
    6167:	aa                   	stos   %al,%es:(%rdi)
    6168:	aa                   	stos   %al,%es:(%rdi)
    6169:	aa                   	stos   %al,%es:(%rdi)
    616a:	aa                   	stos   %al,%es:(%rdi)
    616b:	aa                   	stos   %al,%es:(%rdi)
    616c:	aa                   	stos   %al,%es:(%rdi)
    616d:	aa                   	stos   %al,%es:(%rdi)
    616e:	aa                   	stos   %al,%es:(%rdi)
    616f:	aa                   	stos   %al,%es:(%rdi)
    6170:	aa                   	stos   %al,%es:(%rdi)
    6171:	aa                   	stos   %al,%es:(%rdi)
    6172:	aa                   	stos   %al,%es:(%rdi)
    6173:	aa                   	stos   %al,%es:(%rdi)
    6174:	aa                   	stos   %al,%es:(%rdi)
    6175:	aa                   	stos   %al,%es:(%rdi)
    6176:	aa                   	stos   %al,%es:(%rdi)
    6177:	aa                   	stos   %al,%es:(%rdi)
    6178:	aa                   	stos   %al,%es:(%rdi)
    6179:	aa                   	stos   %al,%es:(%rdi)
    617a:	aa                   	stos   %al,%es:(%rdi)
    617b:	aa                   	stos   %al,%es:(%rdi)
    617c:	aa                   	stos   %al,%es:(%rdi)
    617d:	aa                   	stos   %al,%es:(%rdi)
    617e:	aa                   	stos   %al,%es:(%rdi)
    617f:	aa                   	stos   %al,%es:(%rdi)
    6180:	aa                   	stos   %al,%es:(%rdi)
    6181:	aa                   	stos   %al,%es:(%rdi)
    6182:	aa                   	stos   %al,%es:(%rdi)
    6183:	aa                   	stos   %al,%es:(%rdi)
    6184:	aa                   	stos   %al,%es:(%rdi)
    6185:	aa                   	stos   %al,%es:(%rdi)
    6186:	aa                   	stos   %al,%es:(%rdi)
    6187:	aa                   	stos   %al,%es:(%rdi)
    6188:	aa                   	stos   %al,%es:(%rdi)
    6189:	aa                   	stos   %al,%es:(%rdi)
    618a:	aa                   	stos   %al,%es:(%rdi)
    618b:	aa                   	stos   %al,%es:(%rdi)
    618c:	aa                   	stos   %al,%es:(%rdi)
    618d:	aa                   	stos   %al,%es:(%rdi)
    618e:	aa                   	stos   %al,%es:(%rdi)
    618f:	aa                   	stos   %al,%es:(%rdi)
    6190:	aa                   	stos   %al,%es:(%rdi)
    6191:	aa                   	stos   %al,%es:(%rdi)
    6192:	aa                   	stos   %al,%es:(%rdi)
    6193:	aa                   	stos   %al,%es:(%rdi)
    6194:	aa                   	stos   %al,%es:(%rdi)
    6195:	aa                   	stos   %al,%es:(%rdi)
    6196:	aa                   	stos   %al,%es:(%rdi)
    6197:	aa                   	stos   %al,%es:(%rdi)
    6198:	aa                   	stos   %al,%es:(%rdi)
    6199:	aa                   	stos   %al,%es:(%rdi)
    619a:	aa                   	stos   %al,%es:(%rdi)
    619b:	aa                   	stos   %al,%es:(%rdi)
    619c:	aa                   	stos   %al,%es:(%rdi)
    619d:	aa                   	stos   %al,%es:(%rdi)
    619e:	aa                   	stos   %al,%es:(%rdi)
    619f:	aa                   	stos   %al,%es:(%rdi)
    61a0:	aa                   	stos   %al,%es:(%rdi)
    61a1:	aa                   	stos   %al,%es:(%rdi)
    61a2:	aa                   	stos   %al,%es:(%rdi)
    61a3:	aa                   	stos   %al,%es:(%rdi)
    61a4:	aa                   	stos   %al,%es:(%rdi)
    61a5:	aa                   	stos   %al,%es:(%rdi)
    61a6:	aa                   	stos   %al,%es:(%rdi)
    61a7:	aa                   	stos   %al,%es:(%rdi)
    61a8:	aa                   	stos   %al,%es:(%rdi)
    61a9:	aa                   	stos   %al,%es:(%rdi)
    61aa:	aa                   	stos   %al,%es:(%rdi)
    61ab:	aa                   	stos   %al,%es:(%rdi)
    61ac:	aa                   	stos   %al,%es:(%rdi)
    61ad:	aa                   	stos   %al,%es:(%rdi)
    61ae:	aa                   	stos   %al,%es:(%rdi)
    61af:	aa                   	stos   %al,%es:(%rdi)
    61b0:	aa                   	stos   %al,%es:(%rdi)
    61b1:	aa                   	stos   %al,%es:(%rdi)
    61b2:	aa                   	stos   %al,%es:(%rdi)
    61b3:	aa                   	stos   %al,%es:(%rdi)
    61b4:	aa                   	stos   %al,%es:(%rdi)
    61b5:	aa                   	stos   %al,%es:(%rdi)
    61b6:	aa                   	stos   %al,%es:(%rdi)
    61b7:	aa                   	stos   %al,%es:(%rdi)
    61b8:	aa                   	stos   %al,%es:(%rdi)
    61b9:	aa                   	stos   %al,%es:(%rdi)
    61ba:	aa                   	stos   %al,%es:(%rdi)
    61bb:	aa                   	stos   %al,%es:(%rdi)
    61bc:	aa                   	stos   %al,%es:(%rdi)
    61bd:	aa                   	stos   %al,%es:(%rdi)
    61be:	aa                   	stos   %al,%es:(%rdi)
    61bf:	aa                   	stos   %al,%es:(%rdi)
    61c0:	aa                   	stos   %al,%es:(%rdi)
    61c1:	aa                   	stos   %al,%es:(%rdi)
    61c2:	aa                   	stos   %al,%es:(%rdi)
    61c3:	aa                   	stos   %al,%es:(%rdi)
    61c4:	aa                   	stos   %al,%es:(%rdi)
    61c5:	aa                   	stos   %al,%es:(%rdi)
    61c6:	aa                   	stos   %al,%es:(%rdi)
    61c7:	aa                   	stos   %al,%es:(%rdi)
    61c8:	aa                   	stos   %al,%es:(%rdi)
    61c9:	aa                   	stos   %al,%es:(%rdi)
    61ca:	aa                   	stos   %al,%es:(%rdi)
    61cb:	aa                   	stos   %al,%es:(%rdi)
    61cc:	aa                   	stos   %al,%es:(%rdi)
    61cd:	aa                   	stos   %al,%es:(%rdi)
    61ce:	aa                   	stos   %al,%es:(%rdi)
    61cf:	aa                   	stos   %al,%es:(%rdi)
    61d0:	aa                   	stos   %al,%es:(%rdi)
    61d1:	aa                   	stos   %al,%es:(%rdi)
    61d2:	aa                   	stos   %al,%es:(%rdi)
    61d3:	aa                   	stos   %al,%es:(%rdi)
    61d4:	aa                   	stos   %al,%es:(%rdi)
    61d5:	aa                   	stos   %al,%es:(%rdi)
    61d6:	aa                   	stos   %al,%es:(%rdi)
    61d7:	aa                   	stos   %al,%es:(%rdi)
    61d8:	aa                   	stos   %al,%es:(%rdi)
    61d9:	aa                   	stos   %al,%es:(%rdi)
    61da:	aa                   	stos   %al,%es:(%rdi)
    61db:	aa                   	stos   %al,%es:(%rdi)
    61dc:	aa                   	stos   %al,%es:(%rdi)
    61dd:	aa                   	stos   %al,%es:(%rdi)
    61de:	aa                   	stos   %al,%es:(%rdi)
    61df:	aa                   	stos   %al,%es:(%rdi)
    61e0:	aa                   	stos   %al,%es:(%rdi)
    61e1:	aa                   	stos   %al,%es:(%rdi)
    61e2:	aa                   	stos   %al,%es:(%rdi)
    61e3:	aa                   	stos   %al,%es:(%rdi)
    61e4:	aa                   	stos   %al,%es:(%rdi)
    61e5:	aa                   	stos   %al,%es:(%rdi)
    61e6:	aa                   	stos   %al,%es:(%rdi)
    61e7:	aa                   	stos   %al,%es:(%rdi)
    61e8:	aa                   	stos   %al,%es:(%rdi)
    61e9:	aa                   	stos   %al,%es:(%rdi)
    61ea:	aa                   	stos   %al,%es:(%rdi)
    61eb:	aa                   	stos   %al,%es:(%rdi)
    61ec:	aa                   	stos   %al,%es:(%rdi)
    61ed:	aa                   	stos   %al,%es:(%rdi)
    61ee:	aa                   	stos   %al,%es:(%rdi)
    61ef:	aa                   	stos   %al,%es:(%rdi)
    61f0:	aa                   	stos   %al,%es:(%rdi)
    61f1:	aa                   	stos   %al,%es:(%rdi)
    61f2:	aa                   	stos   %al,%es:(%rdi)
    61f3:	aa                   	stos   %al,%es:(%rdi)
    61f4:	aa                   	stos   %al,%es:(%rdi)
    61f5:	aa                   	stos   %al,%es:(%rdi)
    61f6:	aa                   	stos   %al,%es:(%rdi)
    61f7:	aa                   	stos   %al,%es:(%rdi)
    61f8:	aa                   	stos   %al,%es:(%rdi)
    61f9:	aa                   	stos   %al,%es:(%rdi)
    61fa:	aa                   	stos   %al,%es:(%rdi)
    61fb:	aa                   	stos   %al,%es:(%rdi)
    61fc:	aa                   	stos   %al,%es:(%rdi)
    61fd:	aa                   	stos   %al,%es:(%rdi)
    61fe:	aa                   	stos   %al,%es:(%rdi)
    61ff:	aa                   	stos   %al,%es:(%rdi)
    6200:	aa                   	stos   %al,%es:(%rdi)
    6201:	aa                   	stos   %al,%es:(%rdi)
    6202:	aa                   	stos   %al,%es:(%rdi)
    6203:	aa                   	stos   %al,%es:(%rdi)
    6204:	aa                   	stos   %al,%es:(%rdi)
    6205:	aa                   	stos   %al,%es:(%rdi)
    6206:	aa                   	stos   %al,%es:(%rdi)
    6207:	aa                   	stos   %al,%es:(%rdi)
    6208:	aa                   	stos   %al,%es:(%rdi)
    6209:	aa                   	stos   %al,%es:(%rdi)
    620a:	aa                   	stos   %al,%es:(%rdi)
    620b:	aa                   	stos   %al,%es:(%rdi)
    620c:	aa                   	stos   %al,%es:(%rdi)
    620d:	aa                   	stos   %al,%es:(%rdi)
    620e:	aa                   	stos   %al,%es:(%rdi)
    620f:	aa                   	stos   %al,%es:(%rdi)
    6210:	aa                   	stos   %al,%es:(%rdi)
    6211:	aa                   	stos   %al,%es:(%rdi)
    6212:	aa                   	stos   %al,%es:(%rdi)
    6213:	aa                   	stos   %al,%es:(%rdi)
    6214:	aa                   	stos   %al,%es:(%rdi)
    6215:	aa                   	stos   %al,%es:(%rdi)
    6216:	aa                   	stos   %al,%es:(%rdi)
    6217:	aa                   	stos   %al,%es:(%rdi)
    6218:	aa                   	stos   %al,%es:(%rdi)
    6219:	aa                   	stos   %al,%es:(%rdi)
    621a:	aa                   	stos   %al,%es:(%rdi)
    621b:	aa                   	stos   %al,%es:(%rdi)
    621c:	aa                   	stos   %al,%es:(%rdi)
    621d:	aa                   	stos   %al,%es:(%rdi)
    621e:	aa                   	stos   %al,%es:(%rdi)
    621f:	aa                   	stos   %al,%es:(%rdi)
    6220:	aa                   	stos   %al,%es:(%rdi)
    6221:	aa                   	stos   %al,%es:(%rdi)
    6222:	aa                   	stos   %al,%es:(%rdi)
    6223:	aa                   	stos   %al,%es:(%rdi)
    6224:	aa                   	stos   %al,%es:(%rdi)
    6225:	aa                   	stos   %al,%es:(%rdi)
    6226:	aa                   	stos   %al,%es:(%rdi)
    6227:	aa                   	stos   %al,%es:(%rdi)
    6228:	aa                   	stos   %al,%es:(%rdi)
    6229:	aa                   	stos   %al,%es:(%rdi)
    622a:	aa                   	stos   %al,%es:(%rdi)
    622b:	aa                   	stos   %al,%es:(%rdi)
    622c:	aa                   	stos   %al,%es:(%rdi)
    622d:	aa                   	stos   %al,%es:(%rdi)
    622e:	aa                   	stos   %al,%es:(%rdi)
    622f:	aa                   	stos   %al,%es:(%rdi)
    6230:	aa                   	stos   %al,%es:(%rdi)
    6231:	aa                   	stos   %al,%es:(%rdi)
    6232:	aa                   	stos   %al,%es:(%rdi)
    6233:	aa                   	stos   %al,%es:(%rdi)
    6234:	aa                   	stos   %al,%es:(%rdi)
    6235:	aa                   	stos   %al,%es:(%rdi)
    6236:	aa                   	stos   %al,%es:(%rdi)
    6237:	aa                   	stos   %al,%es:(%rdi)
    6238:	aa                   	stos   %al,%es:(%rdi)
    6239:	aa                   	stos   %al,%es:(%rdi)
    623a:	aa                   	stos   %al,%es:(%rdi)
    623b:	aa                   	stos   %al,%es:(%rdi)
    623c:	aa                   	stos   %al,%es:(%rdi)
    623d:	aa                   	stos   %al,%es:(%rdi)
    623e:	aa                   	stos   %al,%es:(%rdi)
    623f:	aa                   	stos   %al,%es:(%rdi)
    6240:	aa                   	stos   %al,%es:(%rdi)
    6241:	aa                   	stos   %al,%es:(%rdi)
    6242:	aa                   	stos   %al,%es:(%rdi)
    6243:	aa                   	stos   %al,%es:(%rdi)
    6244:	aa                   	stos   %al,%es:(%rdi)
    6245:	aa                   	stos   %al,%es:(%rdi)
    6246:	aa                   	stos   %al,%es:(%rdi)
    6247:	aa                   	stos   %al,%es:(%rdi)
    6248:	aa                   	stos   %al,%es:(%rdi)
    6249:	aa                   	stos   %al,%es:(%rdi)
    624a:	aa                   	stos   %al,%es:(%rdi)
    624b:	aa                   	stos   %al,%es:(%rdi)
    624c:	aa                   	stos   %al,%es:(%rdi)
    624d:	aa                   	stos   %al,%es:(%rdi)
    624e:	aa                   	stos   %al,%es:(%rdi)
    624f:	aa                   	stos   %al,%es:(%rdi)
    6250:	aa                   	stos   %al,%es:(%rdi)
    6251:	aa                   	stos   %al,%es:(%rdi)
    6252:	aa                   	stos   %al,%es:(%rdi)
    6253:	aa                   	stos   %al,%es:(%rdi)
    6254:	aa                   	stos   %al,%es:(%rdi)
    6255:	aa                   	stos   %al,%es:(%rdi)
    6256:	aa                   	stos   %al,%es:(%rdi)
    6257:	aa                   	stos   %al,%es:(%rdi)
    6258:	aa                   	stos   %al,%es:(%rdi)
    6259:	aa                   	stos   %al,%es:(%rdi)
    625a:	aa                   	stos   %al,%es:(%rdi)
    625b:	aa                   	stos   %al,%es:(%rdi)
    625c:	aa                   	stos   %al,%es:(%rdi)
    625d:	aa                   	stos   %al,%es:(%rdi)
    625e:	aa                   	stos   %al,%es:(%rdi)
    625f:	aa                   	stos   %al,%es:(%rdi)
    6260:	aa                   	stos   %al,%es:(%rdi)
    6261:	aa                   	stos   %al,%es:(%rdi)
    6262:	aa                   	stos   %al,%es:(%rdi)
    6263:	aa                   	stos   %al,%es:(%rdi)
    6264:	aa                   	stos   %al,%es:(%rdi)
    6265:	aa                   	stos   %al,%es:(%rdi)
    6266:	aa                   	stos   %al,%es:(%rdi)
    6267:	aa                   	stos   %al,%es:(%rdi)
    6268:	aa                   	stos   %al,%es:(%rdi)
    6269:	aa                   	stos   %al,%es:(%rdi)
    626a:	aa                   	stos   %al,%es:(%rdi)
    626b:	aa                   	stos   %al,%es:(%rdi)
    626c:	aa                   	stos   %al,%es:(%rdi)
    626d:	aa                   	stos   %al,%es:(%rdi)
    626e:	aa                   	stos   %al,%es:(%rdi)
    626f:	aa                   	stos   %al,%es:(%rdi)
    6270:	aa                   	stos   %al,%es:(%rdi)
    6271:	aa                   	stos   %al,%es:(%rdi)
    6272:	aa                   	stos   %al,%es:(%rdi)
    6273:	aa                   	stos   %al,%es:(%rdi)
    6274:	aa                   	stos   %al,%es:(%rdi)
    6275:	aa                   	stos   %al,%es:(%rdi)
    6276:	aa                   	stos   %al,%es:(%rdi)
    6277:	aa                   	stos   %al,%es:(%rdi)
    6278:	aa                   	stos   %al,%es:(%rdi)
    6279:	aa                   	stos   %al,%es:(%rdi)
    627a:	aa                   	stos   %al,%es:(%rdi)
    627b:	aa                   	stos   %al,%es:(%rdi)
    627c:	aa                   	stos   %al,%es:(%rdi)
    627d:	aa                   	stos   %al,%es:(%rdi)
    627e:	aa                   	stos   %al,%es:(%rdi)
    627f:	aa                   	stos   %al,%es:(%rdi)
    6280:	aa                   	stos   %al,%es:(%rdi)
    6281:	aa                   	stos   %al,%es:(%rdi)
    6282:	aa                   	stos   %al,%es:(%rdi)
    6283:	aa                   	stos   %al,%es:(%rdi)
    6284:	aa                   	stos   %al,%es:(%rdi)
    6285:	aa                   	stos   %al,%es:(%rdi)
    6286:	aa                   	stos   %al,%es:(%rdi)
    6287:	aa                   	stos   %al,%es:(%rdi)
    6288:	aa                   	stos   %al,%es:(%rdi)
    6289:	aa                   	stos   %al,%es:(%rdi)
    628a:	aa                   	stos   %al,%es:(%rdi)
    628b:	aa                   	stos   %al,%es:(%rdi)
    628c:	aa                   	stos   %al,%es:(%rdi)
    628d:	aa                   	stos   %al,%es:(%rdi)
    628e:	aa                   	stos   %al,%es:(%rdi)
    628f:	aa                   	stos   %al,%es:(%rdi)
    6290:	aa                   	stos   %al,%es:(%rdi)
    6291:	aa                   	stos   %al,%es:(%rdi)
    6292:	aa                   	stos   %al,%es:(%rdi)
    6293:	aa                   	stos   %al,%es:(%rdi)
    6294:	aa                   	stos   %al,%es:(%rdi)
    6295:	aa                   	stos   %al,%es:(%rdi)
    6296:	aa                   	stos   %al,%es:(%rdi)
    6297:	aa                   	stos   %al,%es:(%rdi)
    6298:	aa                   	stos   %al,%es:(%rdi)
    6299:	aa                   	stos   %al,%es:(%rdi)
    629a:	aa                   	stos   %al,%es:(%rdi)
    629b:	aa                   	stos   %al,%es:(%rdi)
    629c:	aa                   	stos   %al,%es:(%rdi)
    629d:	aa                   	stos   %al,%es:(%rdi)
    629e:	aa                   	stos   %al,%es:(%rdi)
    629f:	aa                   	stos   %al,%es:(%rdi)
    62a0:	aa                   	stos   %al,%es:(%rdi)
    62a1:	aa                   	stos   %al,%es:(%rdi)
    62a2:	aa                   	stos   %al,%es:(%rdi)
    62a3:	aa                   	stos   %al,%es:(%rdi)
    62a4:	aa                   	stos   %al,%es:(%rdi)
    62a5:	aa                   	stos   %al,%es:(%rdi)
    62a6:	aa                   	stos   %al,%es:(%rdi)
    62a7:	aa                   	stos   %al,%es:(%rdi)
    62a8:	aa                   	stos   %al,%es:(%rdi)
    62a9:	aa                   	stos   %al,%es:(%rdi)
    62aa:	aa                   	stos   %al,%es:(%rdi)
    62ab:	aa                   	stos   %al,%es:(%rdi)
    62ac:	aa                   	stos   %al,%es:(%rdi)
    62ad:	aa                   	stos   %al,%es:(%rdi)
    62ae:	aa                   	stos   %al,%es:(%rdi)
    62af:	aa                   	stos   %al,%es:(%rdi)
    62b0:	aa                   	stos   %al,%es:(%rdi)
    62b1:	aa                   	stos   %al,%es:(%rdi)
    62b2:	aa                   	stos   %al,%es:(%rdi)
    62b3:	aa                   	stos   %al,%es:(%rdi)
    62b4:	aa                   	stos   %al,%es:(%rdi)
    62b5:	aa                   	stos   %al,%es:(%rdi)
    62b6:	aa                   	stos   %al,%es:(%rdi)
    62b7:	aa                   	stos   %al,%es:(%rdi)
    62b8:	aa                   	stos   %al,%es:(%rdi)
    62b9:	aa                   	stos   %al,%es:(%rdi)
    62ba:	aa                   	stos   %al,%es:(%rdi)
    62bb:	aa                   	stos   %al,%es:(%rdi)
    62bc:	aa                   	stos   %al,%es:(%rdi)
    62bd:	aa                   	stos   %al,%es:(%rdi)
    62be:	aa                   	stos   %al,%es:(%rdi)
    62bf:	aa                   	stos   %al,%es:(%rdi)
    62c0:	aa                   	stos   %al,%es:(%rdi)
    62c1:	aa                   	stos   %al,%es:(%rdi)
    62c2:	aa                   	stos   %al,%es:(%rdi)
    62c3:	aa                   	stos   %al,%es:(%rdi)
    62c4:	aa                   	stos   %al,%es:(%rdi)
    62c5:	aa                   	stos   %al,%es:(%rdi)
    62c6:	aa                   	stos   %al,%es:(%rdi)
    62c7:	aa                   	stos   %al,%es:(%rdi)
    62c8:	aa                   	stos   %al,%es:(%rdi)
    62c9:	aa                   	stos   %al,%es:(%rdi)
    62ca:	aa                   	stos   %al,%es:(%rdi)
    62cb:	aa                   	stos   %al,%es:(%rdi)
    62cc:	aa                   	stos   %al,%es:(%rdi)
    62cd:	aa                   	stos   %al,%es:(%rdi)
    62ce:	aa                   	stos   %al,%es:(%rdi)
    62cf:	aa                   	stos   %al,%es:(%rdi)
    62d0:	aa                   	stos   %al,%es:(%rdi)
    62d1:	aa                   	stos   %al,%es:(%rdi)
    62d2:	aa                   	stos   %al,%es:(%rdi)
    62d3:	aa                   	stos   %al,%es:(%rdi)
    62d4:	aa                   	stos   %al,%es:(%rdi)
    62d5:	aa                   	stos   %al,%es:(%rdi)
    62d6:	aa                   	stos   %al,%es:(%rdi)
    62d7:	aa                   	stos   %al,%es:(%rdi)
    62d8:	aa                   	stos   %al,%es:(%rdi)
    62d9:	aa                   	stos   %al,%es:(%rdi)
    62da:	aa                   	stos   %al,%es:(%rdi)
    62db:	aa                   	stos   %al,%es:(%rdi)
    62dc:	aa                   	stos   %al,%es:(%rdi)
    62dd:	aa                   	stos   %al,%es:(%rdi)
    62de:	aa                   	stos   %al,%es:(%rdi)
    62df:	aa                   	stos   %al,%es:(%rdi)
    62e0:	aa                   	stos   %al,%es:(%rdi)
    62e1:	aa                   	stos   %al,%es:(%rdi)
    62e2:	aa                   	stos   %al,%es:(%rdi)
    62e3:	aa                   	stos   %al,%es:(%rdi)
    62e4:	aa                   	stos   %al,%es:(%rdi)
    62e5:	aa                   	stos   %al,%es:(%rdi)
    62e6:	aa                   	stos   %al,%es:(%rdi)
    62e7:	aa                   	stos   %al,%es:(%rdi)
    62e8:	aa                   	stos   %al,%es:(%rdi)
    62e9:	aa                   	stos   %al,%es:(%rdi)
    62ea:	aa                   	stos   %al,%es:(%rdi)
    62eb:	aa                   	stos   %al,%es:(%rdi)
    62ec:	aa                   	stos   %al,%es:(%rdi)
    62ed:	aa                   	stos   %al,%es:(%rdi)
    62ee:	aa                   	stos   %al,%es:(%rdi)
    62ef:	aa                   	stos   %al,%es:(%rdi)
    62f0:	aa                   	stos   %al,%es:(%rdi)
    62f1:	aa                   	stos   %al,%es:(%rdi)
    62f2:	aa                   	stos   %al,%es:(%rdi)
    62f3:	aa                   	stos   %al,%es:(%rdi)
    62f4:	aa                   	stos   %al,%es:(%rdi)
    62f5:	aa                   	stos   %al,%es:(%rdi)
    62f6:	aa                   	stos   %al,%es:(%rdi)
    62f7:	aa                   	stos   %al,%es:(%rdi)
    62f8:	aa                   	stos   %al,%es:(%rdi)
    62f9:	aa                   	stos   %al,%es:(%rdi)
    62fa:	aa                   	stos   %al,%es:(%rdi)
    62fb:	aa                   	stos   %al,%es:(%rdi)
    62fc:	aa                   	stos   %al,%es:(%rdi)
    62fd:	aa                   	stos   %al,%es:(%rdi)
    62fe:	aa                   	stos   %al,%es:(%rdi)
    62ff:	aa                   	stos   %al,%es:(%rdi)
    6300:	aa                   	stos   %al,%es:(%rdi)
    6301:	aa                   	stos   %al,%es:(%rdi)
    6302:	aa                   	stos   %al,%es:(%rdi)
    6303:	aa                   	stos   %al,%es:(%rdi)
    6304:	aa                   	stos   %al,%es:(%rdi)
    6305:	aa                   	stos   %al,%es:(%rdi)
    6306:	aa                   	stos   %al,%es:(%rdi)
    6307:	aa                   	stos   %al,%es:(%rdi)
    6308:	aa                   	stos   %al,%es:(%rdi)
    6309:	aa                   	stos   %al,%es:(%rdi)
    630a:	aa                   	stos   %al,%es:(%rdi)
    630b:	aa                   	stos   %al,%es:(%rdi)
    630c:	aa                   	stos   %al,%es:(%rdi)
    630d:	aa                   	stos   %al,%es:(%rdi)
    630e:	aa                   	stos   %al,%es:(%rdi)
    630f:	aa                   	stos   %al,%es:(%rdi)
    6310:	aa                   	stos   %al,%es:(%rdi)
    6311:	aa                   	stos   %al,%es:(%rdi)
    6312:	aa                   	stos   %al,%es:(%rdi)
    6313:	aa                   	stos   %al,%es:(%rdi)
    6314:	aa                   	stos   %al,%es:(%rdi)
    6315:	aa                   	stos   %al,%es:(%rdi)
    6316:	aa                   	stos   %al,%es:(%rdi)
    6317:	aa                   	stos   %al,%es:(%rdi)
    6318:	aa                   	stos   %al,%es:(%rdi)
    6319:	aa                   	stos   %al,%es:(%rdi)
    631a:	aa                   	stos   %al,%es:(%rdi)
    631b:	aa                   	stos   %al,%es:(%rdi)
    631c:	aa                   	stos   %al,%es:(%rdi)
    631d:	aa                   	stos   %al,%es:(%rdi)
    631e:	aa                   	stos   %al,%es:(%rdi)
    631f:	aa                   	stos   %al,%es:(%rdi)
    6320:	aa                   	stos   %al,%es:(%rdi)
    6321:	aa                   	stos   %al,%es:(%rdi)
    6322:	aa                   	stos   %al,%es:(%rdi)
    6323:	aa                   	stos   %al,%es:(%rdi)
    6324:	aa                   	stos   %al,%es:(%rdi)
    6325:	aa                   	stos   %al,%es:(%rdi)
    6326:	aa                   	stos   %al,%es:(%rdi)
    6327:	aa                   	stos   %al,%es:(%rdi)
    6328:	aa                   	stos   %al,%es:(%rdi)
    6329:	aa                   	stos   %al,%es:(%rdi)
    632a:	aa                   	stos   %al,%es:(%rdi)
    632b:	aa                   	stos   %al,%es:(%rdi)
    632c:	aa                   	stos   %al,%es:(%rdi)
    632d:	aa                   	stos   %al,%es:(%rdi)
    632e:	aa                   	stos   %al,%es:(%rdi)
    632f:	aa                   	stos   %al,%es:(%rdi)
    6330:	aa                   	stos   %al,%es:(%rdi)
    6331:	aa                   	stos   %al,%es:(%rdi)
    6332:	aa                   	stos   %al,%es:(%rdi)
    6333:	aa                   	stos   %al,%es:(%rdi)
    6334:	aa                   	stos   %al,%es:(%rdi)
    6335:	aa                   	stos   %al,%es:(%rdi)
    6336:	aa                   	stos   %al,%es:(%rdi)
    6337:	aa                   	stos   %al,%es:(%rdi)
    6338:	aa                   	stos   %al,%es:(%rdi)
    6339:	aa                   	stos   %al,%es:(%rdi)
    633a:	aa                   	stos   %al,%es:(%rdi)
    633b:	aa                   	stos   %al,%es:(%rdi)
    633c:	aa                   	stos   %al,%es:(%rdi)
    633d:	aa                   	stos   %al,%es:(%rdi)
    633e:	aa                   	stos   %al,%es:(%rdi)
    633f:	aa                   	stos   %al,%es:(%rdi)
    6340:	aa                   	stos   %al,%es:(%rdi)
    6341:	aa                   	stos   %al,%es:(%rdi)
    6342:	aa                   	stos   %al,%es:(%rdi)
    6343:	aa                   	stos   %al,%es:(%rdi)
    6344:	aa                   	stos   %al,%es:(%rdi)
    6345:	aa                   	stos   %al,%es:(%rdi)
    6346:	aa                   	stos   %al,%es:(%rdi)
    6347:	aa                   	stos   %al,%es:(%rdi)
    6348:	aa                   	stos   %al,%es:(%rdi)
    6349:	aa                   	stos   %al,%es:(%rdi)
    634a:	aa                   	stos   %al,%es:(%rdi)
    634b:	aa                   	stos   %al,%es:(%rdi)
    634c:	aa                   	stos   %al,%es:(%rdi)
    634d:	aa                   	stos   %al,%es:(%rdi)
    634e:	aa                   	stos   %al,%es:(%rdi)
    634f:	aa                   	stos   %al,%es:(%rdi)
    6350:	aa                   	stos   %al,%es:(%rdi)
    6351:	aa                   	stos   %al,%es:(%rdi)
    6352:	aa                   	stos   %al,%es:(%rdi)
    6353:	aa                   	stos   %al,%es:(%rdi)
    6354:	aa                   	stos   %al,%es:(%rdi)
    6355:	aa                   	stos   %al,%es:(%rdi)
    6356:	aa                   	stos   %al,%es:(%rdi)
    6357:	aa                   	stos   %al,%es:(%rdi)
    6358:	aa                   	stos   %al,%es:(%rdi)
    6359:	aa                   	stos   %al,%es:(%rdi)
    635a:	aa                   	stos   %al,%es:(%rdi)
    635b:	aa                   	stos   %al,%es:(%rdi)
    635c:	aa                   	stos   %al,%es:(%rdi)
    635d:	aa                   	stos   %al,%es:(%rdi)
    635e:	aa                   	stos   %al,%es:(%rdi)
    635f:	aa                   	stos   %al,%es:(%rdi)
    6360:	aa                   	stos   %al,%es:(%rdi)
    6361:	aa                   	stos   %al,%es:(%rdi)
    6362:	aa                   	stos   %al,%es:(%rdi)
    6363:	aa                   	stos   %al,%es:(%rdi)
    6364:	aa                   	stos   %al,%es:(%rdi)
    6365:	aa                   	stos   %al,%es:(%rdi)
    6366:	aa                   	stos   %al,%es:(%rdi)
    6367:	aa                   	stos   %al,%es:(%rdi)
    6368:	aa                   	stos   %al,%es:(%rdi)
    6369:	aa                   	stos   %al,%es:(%rdi)
    636a:	aa                   	stos   %al,%es:(%rdi)
    636b:	aa                   	stos   %al,%es:(%rdi)
    636c:	aa                   	stos   %al,%es:(%rdi)
    636d:	aa                   	stos   %al,%es:(%rdi)
    636e:	aa                   	stos   %al,%es:(%rdi)
    636f:	aa                   	stos   %al,%es:(%rdi)
    6370:	aa                   	stos   %al,%es:(%rdi)
    6371:	aa                   	stos   %al,%es:(%rdi)
    6372:	aa                   	stos   %al,%es:(%rdi)
    6373:	aa                   	stos   %al,%es:(%rdi)
    6374:	aa                   	stos   %al,%es:(%rdi)
    6375:	aa                   	stos   %al,%es:(%rdi)
    6376:	aa                   	stos   %al,%es:(%rdi)
    6377:	aa                   	stos   %al,%es:(%rdi)
    6378:	aa                   	stos   %al,%es:(%rdi)
    6379:	aa                   	stos   %al,%es:(%rdi)
    637a:	aa                   	stos   %al,%es:(%rdi)
    637b:	aa                   	stos   %al,%es:(%rdi)
    637c:	aa                   	stos   %al,%es:(%rdi)
    637d:	aa                   	stos   %al,%es:(%rdi)
    637e:	aa                   	stos   %al,%es:(%rdi)
    637f:	aa                   	stos   %al,%es:(%rdi)
    6380:	aa                   	stos   %al,%es:(%rdi)
    6381:	aa                   	stos   %al,%es:(%rdi)
    6382:	aa                   	stos   %al,%es:(%rdi)
    6383:	aa                   	stos   %al,%es:(%rdi)
    6384:	aa                   	stos   %al,%es:(%rdi)
    6385:	aa                   	stos   %al,%es:(%rdi)
    6386:	aa                   	stos   %al,%es:(%rdi)
    6387:	aa                   	stos   %al,%es:(%rdi)
    6388:	aa                   	stos   %al,%es:(%rdi)
    6389:	aa                   	stos   %al,%es:(%rdi)
    638a:	aa                   	stos   %al,%es:(%rdi)
    638b:	aa                   	stos   %al,%es:(%rdi)
    638c:	aa                   	stos   %al,%es:(%rdi)
    638d:	aa                   	stos   %al,%es:(%rdi)
    638e:	aa                   	stos   %al,%es:(%rdi)
    638f:	aa                   	stos   %al,%es:(%rdi)
    6390:	aa                   	stos   %al,%es:(%rdi)
    6391:	aa                   	stos   %al,%es:(%rdi)
    6392:	aa                   	stos   %al,%es:(%rdi)
    6393:	aa                   	stos   %al,%es:(%rdi)
    6394:	aa                   	stos   %al,%es:(%rdi)
    6395:	aa                   	stos   %al,%es:(%rdi)
    6396:	aa                   	stos   %al,%es:(%rdi)
    6397:	aa                   	stos   %al,%es:(%rdi)
    6398:	aa                   	stos   %al,%es:(%rdi)
    6399:	aa                   	stos   %al,%es:(%rdi)
    639a:	aa                   	stos   %al,%es:(%rdi)
    639b:	aa                   	stos   %al,%es:(%rdi)
    639c:	aa                   	stos   %al,%es:(%rdi)
    639d:	aa                   	stos   %al,%es:(%rdi)
    639e:	aa                   	stos   %al,%es:(%rdi)
    639f:	aa                   	stos   %al,%es:(%rdi)
    63a0:	aa                   	stos   %al,%es:(%rdi)
    63a1:	aa                   	stos   %al,%es:(%rdi)
    63a2:	aa                   	stos   %al,%es:(%rdi)
    63a3:	aa                   	stos   %al,%es:(%rdi)
    63a4:	aa                   	stos   %al,%es:(%rdi)
    63a5:	aa                   	stos   %al,%es:(%rdi)
    63a6:	aa                   	stos   %al,%es:(%rdi)
    63a7:	aa                   	stos   %al,%es:(%rdi)
    63a8:	aa                   	stos   %al,%es:(%rdi)
    63a9:	aa                   	stos   %al,%es:(%rdi)
    63aa:	aa                   	stos   %al,%es:(%rdi)
    63ab:	aa                   	stos   %al,%es:(%rdi)
    63ac:	aa                   	stos   %al,%es:(%rdi)
    63ad:	aa                   	stos   %al,%es:(%rdi)
    63ae:	aa                   	stos   %al,%es:(%rdi)
    63af:	aa                   	stos   %al,%es:(%rdi)
    63b0:	aa                   	stos   %al,%es:(%rdi)
    63b1:	aa                   	stos   %al,%es:(%rdi)
    63b2:	aa                   	stos   %al,%es:(%rdi)
    63b3:	aa                   	stos   %al,%es:(%rdi)
    63b4:	aa                   	stos   %al,%es:(%rdi)
    63b5:	aa                   	stos   %al,%es:(%rdi)
    63b6:	aa                   	stos   %al,%es:(%rdi)
    63b7:	aa                   	stos   %al,%es:(%rdi)
    63b8:	aa                   	stos   %al,%es:(%rdi)
    63b9:	aa                   	stos   %al,%es:(%rdi)
    63ba:	aa                   	stos   %al,%es:(%rdi)
    63bb:	aa                   	stos   %al,%es:(%rdi)
    63bc:	aa                   	stos   %al,%es:(%rdi)
    63bd:	aa                   	stos   %al,%es:(%rdi)
    63be:	aa                   	stos   %al,%es:(%rdi)
    63bf:	aa                   	stos   %al,%es:(%rdi)
    63c0:	aa                   	stos   %al,%es:(%rdi)
    63c1:	aa                   	stos   %al,%es:(%rdi)
    63c2:	aa                   	stos   %al,%es:(%rdi)
    63c3:	aa                   	stos   %al,%es:(%rdi)
    63c4:	aa                   	stos   %al,%es:(%rdi)
    63c5:	aa                   	stos   %al,%es:(%rdi)
    63c6:	aa                   	stos   %al,%es:(%rdi)
    63c7:	aa                   	stos   %al,%es:(%rdi)
    63c8:	aa                   	stos   %al,%es:(%rdi)
    63c9:	aa                   	stos   %al,%es:(%rdi)
    63ca:	aa                   	stos   %al,%es:(%rdi)
    63cb:	aa                   	stos   %al,%es:(%rdi)
    63cc:	aa                   	stos   %al,%es:(%rdi)
    63cd:	aa                   	stos   %al,%es:(%rdi)
    63ce:	aa                   	stos   %al,%es:(%rdi)
    63cf:	aa                   	stos   %al,%es:(%rdi)
    63d0:	aa                   	stos   %al,%es:(%rdi)
    63d1:	aa                   	stos   %al,%es:(%rdi)
    63d2:	aa                   	stos   %al,%es:(%rdi)
    63d3:	aa                   	stos   %al,%es:(%rdi)
    63d4:	aa                   	stos   %al,%es:(%rdi)
    63d5:	aa                   	stos   %al,%es:(%rdi)
    63d6:	aa                   	stos   %al,%es:(%rdi)
    63d7:	aa                   	stos   %al,%es:(%rdi)
    63d8:	aa                   	stos   %al,%es:(%rdi)
    63d9:	aa                   	stos   %al,%es:(%rdi)
    63da:	aa                   	stos   %al,%es:(%rdi)
    63db:	aa                   	stos   %al,%es:(%rdi)
    63dc:	aa                   	stos   %al,%es:(%rdi)
    63dd:	aa                   	stos   %al,%es:(%rdi)
    63de:	aa                   	stos   %al,%es:(%rdi)
    63df:	aa                   	stos   %al,%es:(%rdi)
    63e0:	aa                   	stos   %al,%es:(%rdi)
    63e1:	aa                   	stos   %al,%es:(%rdi)
    63e2:	aa                   	stos   %al,%es:(%rdi)
    63e3:	aa                   	stos   %al,%es:(%rdi)
    63e4:	aa                   	stos   %al,%es:(%rdi)
    63e5:	aa                   	stos   %al,%es:(%rdi)
    63e6:	aa                   	stos   %al,%es:(%rdi)
    63e7:	aa                   	stos   %al,%es:(%rdi)
    63e8:	aa                   	stos   %al,%es:(%rdi)
    63e9:	aa                   	stos   %al,%es:(%rdi)
    63ea:	aa                   	stos   %al,%es:(%rdi)
    63eb:	aa                   	stos   %al,%es:(%rdi)
    63ec:	aa                   	stos   %al,%es:(%rdi)
    63ed:	aa                   	stos   %al,%es:(%rdi)
    63ee:	aa                   	stos   %al,%es:(%rdi)
    63ef:	aa                   	stos   %al,%es:(%rdi)
    63f0:	aa                   	stos   %al,%es:(%rdi)
    63f1:	aa                   	stos   %al,%es:(%rdi)
    63f2:	aa                   	stos   %al,%es:(%rdi)
    63f3:	aa                   	stos   %al,%es:(%rdi)
    63f4:	aa                   	stos   %al,%es:(%rdi)
    63f5:	aa                   	stos   %al,%es:(%rdi)
    63f6:	aa                   	stos   %al,%es:(%rdi)
    63f7:	aa                   	stos   %al,%es:(%rdi)
    63f8:	aa                   	stos   %al,%es:(%rdi)
    63f9:	aa                   	stos   %al,%es:(%rdi)
    63fa:	aa                   	stos   %al,%es:(%rdi)
    63fb:	aa                   	stos   %al,%es:(%rdi)
    63fc:	aa                   	stos   %al,%es:(%rdi)
    63fd:	aa                   	stos   %al,%es:(%rdi)
    63fe:	aa                   	stos   %al,%es:(%rdi)
    63ff:	aa                   	stos   %al,%es:(%rdi)
    6400:	aa                   	stos   %al,%es:(%rdi)
    6401:	aa                   	stos   %al,%es:(%rdi)
    6402:	aa                   	stos   %al,%es:(%rdi)
    6403:	aa                   	stos   %al,%es:(%rdi)
    6404:	aa                   	stos   %al,%es:(%rdi)
    6405:	aa                   	stos   %al,%es:(%rdi)
    6406:	aa                   	stos   %al,%es:(%rdi)
    6407:	aa                   	stos   %al,%es:(%rdi)
    6408:	aa                   	stos   %al,%es:(%rdi)
    6409:	aa                   	stos   %al,%es:(%rdi)
    640a:	aa                   	stos   %al,%es:(%rdi)
    640b:	aa                   	stos   %al,%es:(%rdi)
    640c:	aa                   	stos   %al,%es:(%rdi)
    640d:	aa                   	stos   %al,%es:(%rdi)
    640e:	aa                   	stos   %al,%es:(%rdi)
    640f:	aa                   	stos   %al,%es:(%rdi)
    6410:	aa                   	stos   %al,%es:(%rdi)
    6411:	aa                   	stos   %al,%es:(%rdi)
    6412:	aa                   	stos   %al,%es:(%rdi)
    6413:	aa                   	stos   %al,%es:(%rdi)
    6414:	aa                   	stos   %al,%es:(%rdi)
    6415:	aa                   	stos   %al,%es:(%rdi)
    6416:	aa                   	stos   %al,%es:(%rdi)
    6417:	aa                   	stos   %al,%es:(%rdi)
    6418:	aa                   	stos   %al,%es:(%rdi)
    6419:	aa                   	stos   %al,%es:(%rdi)
    641a:	aa                   	stos   %al,%es:(%rdi)
    641b:	aa                   	stos   %al,%es:(%rdi)
    641c:	aa                   	stos   %al,%es:(%rdi)
    641d:	aa                   	stos   %al,%es:(%rdi)
    641e:	aa                   	stos   %al,%es:(%rdi)
    641f:	aa                   	stos   %al,%es:(%rdi)
    6420:	aa                   	stos   %al,%es:(%rdi)
    6421:	aa                   	stos   %al,%es:(%rdi)
    6422:	aa                   	stos   %al,%es:(%rdi)
    6423:	aa                   	stos   %al,%es:(%rdi)
    6424:	aa                   	stos   %al,%es:(%rdi)
    6425:	aa                   	stos   %al,%es:(%rdi)
    6426:	aa                   	stos   %al,%es:(%rdi)
    6427:	aa                   	stos   %al,%es:(%rdi)
    6428:	aa                   	stos   %al,%es:(%rdi)
    6429:	aa                   	stos   %al,%es:(%rdi)
    642a:	aa                   	stos   %al,%es:(%rdi)
    642b:	aa                   	stos   %al,%es:(%rdi)
    642c:	aa                   	stos   %al,%es:(%rdi)
    642d:	aa                   	stos   %al,%es:(%rdi)
    642e:	aa                   	stos   %al,%es:(%rdi)
    642f:	aa                   	stos   %al,%es:(%rdi)
    6430:	aa                   	stos   %al,%es:(%rdi)
    6431:	aa                   	stos   %al,%es:(%rdi)
    6432:	aa                   	stos   %al,%es:(%rdi)
    6433:	aa                   	stos   %al,%es:(%rdi)
    6434:	aa                   	stos   %al,%es:(%rdi)
    6435:	aa                   	stos   %al,%es:(%rdi)
    6436:	aa                   	stos   %al,%es:(%rdi)
    6437:	aa                   	stos   %al,%es:(%rdi)
    6438:	aa                   	stos   %al,%es:(%rdi)
    6439:	aa                   	stos   %al,%es:(%rdi)
    643a:	aa                   	stos   %al,%es:(%rdi)
    643b:	aa                   	stos   %al,%es:(%rdi)
    643c:	aa                   	stos   %al,%es:(%rdi)
    643d:	aa                   	stos   %al,%es:(%rdi)
    643e:	aa                   	stos   %al,%es:(%rdi)
    643f:	aa                   	stos   %al,%es:(%rdi)
    6440:	aa                   	stos   %al,%es:(%rdi)
    6441:	aa                   	stos   %al,%es:(%rdi)
    6442:	aa                   	stos   %al,%es:(%rdi)
    6443:	aa                   	stos   %al,%es:(%rdi)
    6444:	aa                   	stos   %al,%es:(%rdi)
    6445:	aa                   	stos   %al,%es:(%rdi)
    6446:	aa                   	stos   %al,%es:(%rdi)
    6447:	aa                   	stos   %al,%es:(%rdi)
    6448:	aa                   	stos   %al,%es:(%rdi)
    6449:	aa                   	stos   %al,%es:(%rdi)
    644a:	aa                   	stos   %al,%es:(%rdi)
    644b:	aa                   	stos   %al,%es:(%rdi)
    644c:	aa                   	stos   %al,%es:(%rdi)
    644d:	aa                   	stos   %al,%es:(%rdi)
    644e:	aa                   	stos   %al,%es:(%rdi)
    644f:	aa                   	stos   %al,%es:(%rdi)
    6450:	aa                   	stos   %al,%es:(%rdi)
    6451:	aa                   	stos   %al,%es:(%rdi)
    6452:	aa                   	stos   %al,%es:(%rdi)
    6453:	aa                   	stos   %al,%es:(%rdi)
    6454:	aa                   	stos   %al,%es:(%rdi)
    6455:	aa                   	stos   %al,%es:(%rdi)
    6456:	aa                   	stos   %al,%es:(%rdi)
    6457:	aa                   	stos   %al,%es:(%rdi)
    6458:	aa                   	stos   %al,%es:(%rdi)
    6459:	aa                   	stos   %al,%es:(%rdi)
    645a:	aa                   	stos   %al,%es:(%rdi)
    645b:	aa                   	stos   %al,%es:(%rdi)
    645c:	aa                   	stos   %al,%es:(%rdi)
    645d:	aa                   	stos   %al,%es:(%rdi)
    645e:	aa                   	stos   %al,%es:(%rdi)
    645f:	aa                   	stos   %al,%es:(%rdi)
    6460:	aa                   	stos   %al,%es:(%rdi)
    6461:	aa                   	stos   %al,%es:(%rdi)
    6462:	aa                   	stos   %al,%es:(%rdi)
    6463:	aa                   	stos   %al,%es:(%rdi)
    6464:	aa                   	stos   %al,%es:(%rdi)
    6465:	aa                   	stos   %al,%es:(%rdi)
    6466:	aa                   	stos   %al,%es:(%rdi)
    6467:	aa                   	stos   %al,%es:(%rdi)
    6468:	aa                   	stos   %al,%es:(%rdi)
    6469:	aa                   	stos   %al,%es:(%rdi)
    646a:	aa                   	stos   %al,%es:(%rdi)
    646b:	aa                   	stos   %al,%es:(%rdi)
    646c:	aa                   	stos   %al,%es:(%rdi)
    646d:	aa                   	stos   %al,%es:(%rdi)
    646e:	aa                   	stos   %al,%es:(%rdi)
    646f:	aa                   	stos   %al,%es:(%rdi)
    6470:	aa                   	stos   %al,%es:(%rdi)
    6471:	aa                   	stos   %al,%es:(%rdi)
    6472:	aa                   	stos   %al,%es:(%rdi)
    6473:	aa                   	stos   %al,%es:(%rdi)
    6474:	aa                   	stos   %al,%es:(%rdi)
    6475:	aa                   	stos   %al,%es:(%rdi)
    6476:	aa                   	stos   %al,%es:(%rdi)
    6477:	aa                   	stos   %al,%es:(%rdi)
    6478:	aa                   	stos   %al,%es:(%rdi)
    6479:	aa                   	stos   %al,%es:(%rdi)
    647a:	aa                   	stos   %al,%es:(%rdi)
    647b:	aa                   	stos   %al,%es:(%rdi)
    647c:	aa                   	stos   %al,%es:(%rdi)
    647d:	aa                   	stos   %al,%es:(%rdi)
    647e:	aa                   	stos   %al,%es:(%rdi)
    647f:	aa                   	stos   %al,%es:(%rdi)
    6480:	aa                   	stos   %al,%es:(%rdi)
    6481:	aa                   	stos   %al,%es:(%rdi)
    6482:	aa                   	stos   %al,%es:(%rdi)
    6483:	aa                   	stos   %al,%es:(%rdi)
    6484:	aa                   	stos   %al,%es:(%rdi)
    6485:	aa                   	stos   %al,%es:(%rdi)
    6486:	aa                   	stos   %al,%es:(%rdi)
    6487:	aa                   	stos   %al,%es:(%rdi)
    6488:	aa                   	stos   %al,%es:(%rdi)
    6489:	aa                   	stos   %al,%es:(%rdi)
    648a:	aa                   	stos   %al,%es:(%rdi)
    648b:	aa                   	stos   %al,%es:(%rdi)
    648c:	aa                   	stos   %al,%es:(%rdi)
    648d:	aa                   	stos   %al,%es:(%rdi)
    648e:	aa                   	stos   %al,%es:(%rdi)
    648f:	aa                   	stos   %al,%es:(%rdi)
    6490:	aa                   	stos   %al,%es:(%rdi)
    6491:	aa                   	stos   %al,%es:(%rdi)
    6492:	aa                   	stos   %al,%es:(%rdi)
    6493:	aa                   	stos   %al,%es:(%rdi)
    6494:	aa                   	stos   %al,%es:(%rdi)
    6495:	aa                   	stos   %al,%es:(%rdi)
    6496:	aa                   	stos   %al,%es:(%rdi)
    6497:	aa                   	stos   %al,%es:(%rdi)
    6498:	aa                   	stos   %al,%es:(%rdi)
    6499:	aa                   	stos   %al,%es:(%rdi)
    649a:	aa                   	stos   %al,%es:(%rdi)
    649b:	aa                   	stos   %al,%es:(%rdi)
    649c:	aa                   	stos   %al,%es:(%rdi)
    649d:	aa                   	stos   %al,%es:(%rdi)
    649e:	aa                   	stos   %al,%es:(%rdi)
    649f:	aa                   	stos   %al,%es:(%rdi)
    64a0:	aa                   	stos   %al,%es:(%rdi)
    64a1:	aa                   	stos   %al,%es:(%rdi)
    64a2:	aa                   	stos   %al,%es:(%rdi)
    64a3:	aa                   	stos   %al,%es:(%rdi)
    64a4:	aa                   	stos   %al,%es:(%rdi)
    64a5:	aa                   	stos   %al,%es:(%rdi)
    64a6:	aa                   	stos   %al,%es:(%rdi)
    64a7:	aa                   	stos   %al,%es:(%rdi)
    64a8:	aa                   	stos   %al,%es:(%rdi)
    64a9:	aa                   	stos   %al,%es:(%rdi)
    64aa:	aa                   	stos   %al,%es:(%rdi)
    64ab:	aa                   	stos   %al,%es:(%rdi)
    64ac:	aa                   	stos   %al,%es:(%rdi)
    64ad:	aa                   	stos   %al,%es:(%rdi)
    64ae:	aa                   	stos   %al,%es:(%rdi)
    64af:	aa                   	stos   %al,%es:(%rdi)
    64b0:	aa                   	stos   %al,%es:(%rdi)
    64b1:	aa                   	stos   %al,%es:(%rdi)
    64b2:	aa                   	stos   %al,%es:(%rdi)
    64b3:	aa                   	stos   %al,%es:(%rdi)
    64b4:	aa                   	stos   %al,%es:(%rdi)
    64b5:	aa                   	stos   %al,%es:(%rdi)
    64b6:	aa                   	stos   %al,%es:(%rdi)
    64b7:	aa                   	stos   %al,%es:(%rdi)
    64b8:	aa                   	stos   %al,%es:(%rdi)
    64b9:	aa                   	stos   %al,%es:(%rdi)
    64ba:	aa                   	stos   %al,%es:(%rdi)
    64bb:	aa                   	stos   %al,%es:(%rdi)
    64bc:	aa                   	stos   %al,%es:(%rdi)
    64bd:	aa                   	stos   %al,%es:(%rdi)
    64be:	aa                   	stos   %al,%es:(%rdi)
    64bf:	aa                   	stos   %al,%es:(%rdi)
    64c0:	aa                   	stos   %al,%es:(%rdi)
    64c1:	aa                   	stos   %al,%es:(%rdi)
    64c2:	aa                   	stos   %al,%es:(%rdi)
    64c3:	aa                   	stos   %al,%es:(%rdi)
    64c4:	aa                   	stos   %al,%es:(%rdi)
    64c5:	aa                   	stos   %al,%es:(%rdi)
    64c6:	aa                   	stos   %al,%es:(%rdi)
    64c7:	aa                   	stos   %al,%es:(%rdi)
    64c8:	aa                   	stos   %al,%es:(%rdi)
    64c9:	aa                   	stos   %al,%es:(%rdi)
    64ca:	aa                   	stos   %al,%es:(%rdi)
    64cb:	aa                   	stos   %al,%es:(%rdi)
    64cc:	aa                   	stos   %al,%es:(%rdi)
    64cd:	aa                   	stos   %al,%es:(%rdi)
    64ce:	aa                   	stos   %al,%es:(%rdi)
    64cf:	aa                   	stos   %al,%es:(%rdi)
    64d0:	aa                   	stos   %al,%es:(%rdi)
    64d1:	aa                   	stos   %al,%es:(%rdi)
    64d2:	aa                   	stos   %al,%es:(%rdi)
    64d3:	aa                   	stos   %al,%es:(%rdi)
    64d4:	aa                   	stos   %al,%es:(%rdi)
    64d5:	aa                   	stos   %al,%es:(%rdi)
    64d6:	aa                   	stos   %al,%es:(%rdi)
    64d7:	aa                   	stos   %al,%es:(%rdi)
    64d8:	aa                   	stos   %al,%es:(%rdi)
    64d9:	aa                   	stos   %al,%es:(%rdi)
    64da:	aa                   	stos   %al,%es:(%rdi)
    64db:	aa                   	stos   %al,%es:(%rdi)
    64dc:	aa                   	stos   %al,%es:(%rdi)
    64dd:	aa                   	stos   %al,%es:(%rdi)
    64de:	aa                   	stos   %al,%es:(%rdi)
    64df:	aa                   	stos   %al,%es:(%rdi)
    64e0:	aa                   	stos   %al,%es:(%rdi)
    64e1:	aa                   	stos   %al,%es:(%rdi)
    64e2:	aa                   	stos   %al,%es:(%rdi)
    64e3:	aa                   	stos   %al,%es:(%rdi)
    64e4:	aa                   	stos   %al,%es:(%rdi)
    64e5:	aa                   	stos   %al,%es:(%rdi)
    64e6:	aa                   	stos   %al,%es:(%rdi)
    64e7:	aa                   	stos   %al,%es:(%rdi)
    64e8:	aa                   	stos   %al,%es:(%rdi)
    64e9:	aa                   	stos   %al,%es:(%rdi)
    64ea:	aa                   	stos   %al,%es:(%rdi)
    64eb:	aa                   	stos   %al,%es:(%rdi)
    64ec:	aa                   	stos   %al,%es:(%rdi)
    64ed:	aa                   	stos   %al,%es:(%rdi)
    64ee:	aa                   	stos   %al,%es:(%rdi)
    64ef:	aa                   	stos   %al,%es:(%rdi)
    64f0:	aa                   	stos   %al,%es:(%rdi)
    64f1:	aa                   	stos   %al,%es:(%rdi)
    64f2:	aa                   	stos   %al,%es:(%rdi)
    64f3:	aa                   	stos   %al,%es:(%rdi)
    64f4:	aa                   	stos   %al,%es:(%rdi)
    64f5:	aa                   	stos   %al,%es:(%rdi)
    64f6:	aa                   	stos   %al,%es:(%rdi)
    64f7:	aa                   	stos   %al,%es:(%rdi)
    64f8:	aa                   	stos   %al,%es:(%rdi)
    64f9:	aa                   	stos   %al,%es:(%rdi)
    64fa:	aa                   	stos   %al,%es:(%rdi)
    64fb:	aa                   	stos   %al,%es:(%rdi)
    64fc:	aa                   	stos   %al,%es:(%rdi)
    64fd:	aa                   	stos   %al,%es:(%rdi)
    64fe:	aa                   	stos   %al,%es:(%rdi)
    64ff:	aa                   	stos   %al,%es:(%rdi)
    6500:	aa                   	stos   %al,%es:(%rdi)
    6501:	aa                   	stos   %al,%es:(%rdi)
    6502:	aa                   	stos   %al,%es:(%rdi)
    6503:	aa                   	stos   %al,%es:(%rdi)
    6504:	aa                   	stos   %al,%es:(%rdi)
    6505:	aa                   	stos   %al,%es:(%rdi)
    6506:	aa                   	stos   %al,%es:(%rdi)
    6507:	aa                   	stos   %al,%es:(%rdi)
    6508:	aa                   	stos   %al,%es:(%rdi)
    6509:	aa                   	stos   %al,%es:(%rdi)
    650a:	aa                   	stos   %al,%es:(%rdi)
    650b:	aa                   	stos   %al,%es:(%rdi)
    650c:	aa                   	stos   %al,%es:(%rdi)
    650d:	aa                   	stos   %al,%es:(%rdi)
    650e:	aa                   	stos   %al,%es:(%rdi)
    650f:	aa                   	stos   %al,%es:(%rdi)
    6510:	aa                   	stos   %al,%es:(%rdi)
    6511:	aa                   	stos   %al,%es:(%rdi)
    6512:	aa                   	stos   %al,%es:(%rdi)
    6513:	aa                   	stos   %al,%es:(%rdi)
    6514:	aa                   	stos   %al,%es:(%rdi)
    6515:	aa                   	stos   %al,%es:(%rdi)
    6516:	aa                   	stos   %al,%es:(%rdi)
    6517:	aa                   	stos   %al,%es:(%rdi)
    6518:	aa                   	stos   %al,%es:(%rdi)
    6519:	aa                   	stos   %al,%es:(%rdi)
    651a:	aa                   	stos   %al,%es:(%rdi)
    651b:	aa                   	stos   %al,%es:(%rdi)
    651c:	aa                   	stos   %al,%es:(%rdi)
    651d:	aa                   	stos   %al,%es:(%rdi)
    651e:	aa                   	stos   %al,%es:(%rdi)
    651f:	aa                   	stos   %al,%es:(%rdi)
    6520:	aa                   	stos   %al,%es:(%rdi)
    6521:	aa                   	stos   %al,%es:(%rdi)
    6522:	aa                   	stos   %al,%es:(%rdi)
    6523:	aa                   	stos   %al,%es:(%rdi)
    6524:	aa                   	stos   %al,%es:(%rdi)
    6525:	aa                   	stos   %al,%es:(%rdi)
    6526:	aa                   	stos   %al,%es:(%rdi)
    6527:	aa                   	stos   %al,%es:(%rdi)
    6528:	aa                   	stos   %al,%es:(%rdi)
    6529:	aa                   	stos   %al,%es:(%rdi)
    652a:	aa                   	stos   %al,%es:(%rdi)
    652b:	aa                   	stos   %al,%es:(%rdi)
    652c:	aa                   	stos   %al,%es:(%rdi)
    652d:	aa                   	stos   %al,%es:(%rdi)
    652e:	aa                   	stos   %al,%es:(%rdi)
    652f:	aa                   	stos   %al,%es:(%rdi)
    6530:	aa                   	stos   %al,%es:(%rdi)
    6531:	aa                   	stos   %al,%es:(%rdi)
    6532:	aa                   	stos   %al,%es:(%rdi)
    6533:	aa                   	stos   %al,%es:(%rdi)
    6534:	aa                   	stos   %al,%es:(%rdi)
    6535:	aa                   	stos   %al,%es:(%rdi)
    6536:	aa                   	stos   %al,%es:(%rdi)
    6537:	aa                   	stos   %al,%es:(%rdi)
    6538:	aa                   	stos   %al,%es:(%rdi)
    6539:	aa                   	stos   %al,%es:(%rdi)
    653a:	aa                   	stos   %al,%es:(%rdi)
    653b:	aa                   	stos   %al,%es:(%rdi)
    653c:	aa                   	stos   %al,%es:(%rdi)
    653d:	aa                   	stos   %al,%es:(%rdi)
    653e:	aa                   	stos   %al,%es:(%rdi)
    653f:	aa                   	stos   %al,%es:(%rdi)
    6540:	aa                   	stos   %al,%es:(%rdi)
    6541:	aa                   	stos   %al,%es:(%rdi)
    6542:	aa                   	stos   %al,%es:(%rdi)
    6543:	aa                   	stos   %al,%es:(%rdi)
    6544:	aa                   	stos   %al,%es:(%rdi)
    6545:	aa                   	stos   %al,%es:(%rdi)
    6546:	aa                   	stos   %al,%es:(%rdi)
    6547:	aa                   	stos   %al,%es:(%rdi)
    6548:	aa                   	stos   %al,%es:(%rdi)
    6549:	aa                   	stos   %al,%es:(%rdi)
    654a:	aa                   	stos   %al,%es:(%rdi)
    654b:	aa                   	stos   %al,%es:(%rdi)
    654c:	aa                   	stos   %al,%es:(%rdi)
    654d:	aa                   	stos   %al,%es:(%rdi)
    654e:	aa                   	stos   %al,%es:(%rdi)
    654f:	aa                   	stos   %al,%es:(%rdi)
    6550:	aa                   	stos   %al,%es:(%rdi)
    6551:	aa                   	stos   %al,%es:(%rdi)
    6552:	aa                   	stos   %al,%es:(%rdi)
    6553:	aa                   	stos   %al,%es:(%rdi)
    6554:	aa                   	stos   %al,%es:(%rdi)
    6555:	aa                   	stos   %al,%es:(%rdi)
    6556:	aa                   	stos   %al,%es:(%rdi)
    6557:	aa                   	stos   %al,%es:(%rdi)
    6558:	aa                   	stos   %al,%es:(%rdi)
    6559:	aa                   	stos   %al,%es:(%rdi)
    655a:	aa                   	stos   %al,%es:(%rdi)
    655b:	aa                   	stos   %al,%es:(%rdi)
    655c:	aa                   	stos   %al,%es:(%rdi)
    655d:	aa                   	stos   %al,%es:(%rdi)
    655e:	aa                   	stos   %al,%es:(%rdi)
    655f:	aa                   	stos   %al,%es:(%rdi)
    6560:	aa                   	stos   %al,%es:(%rdi)
    6561:	aa                   	stos   %al,%es:(%rdi)
    6562:	aa                   	stos   %al,%es:(%rdi)
    6563:	aa                   	stos   %al,%es:(%rdi)
    6564:	aa                   	stos   %al,%es:(%rdi)
    6565:	aa                   	stos   %al,%es:(%rdi)
    6566:	aa                   	stos   %al,%es:(%rdi)
    6567:	aa                   	stos   %al,%es:(%rdi)
    6568:	aa                   	stos   %al,%es:(%rdi)
    6569:	aa                   	stos   %al,%es:(%rdi)
    656a:	aa                   	stos   %al,%es:(%rdi)
    656b:	aa                   	stos   %al,%es:(%rdi)
    656c:	aa                   	stos   %al,%es:(%rdi)
    656d:	aa                   	stos   %al,%es:(%rdi)
    656e:	aa                   	stos   %al,%es:(%rdi)
    656f:	aa                   	stos   %al,%es:(%rdi)
    6570:	aa                   	stos   %al,%es:(%rdi)
    6571:	aa                   	stos   %al,%es:(%rdi)
    6572:	aa                   	stos   %al,%es:(%rdi)
    6573:	aa                   	stos   %al,%es:(%rdi)
    6574:	aa                   	stos   %al,%es:(%rdi)
    6575:	aa                   	stos   %al,%es:(%rdi)
    6576:	aa                   	stos   %al,%es:(%rdi)
    6577:	aa                   	stos   %al,%es:(%rdi)
    6578:	aa                   	stos   %al,%es:(%rdi)
    6579:	aa                   	stos   %al,%es:(%rdi)
    657a:	aa                   	stos   %al,%es:(%rdi)
    657b:	aa                   	stos   %al,%es:(%rdi)
    657c:	aa                   	stos   %al,%es:(%rdi)
    657d:	aa                   	stos   %al,%es:(%rdi)
    657e:	aa                   	stos   %al,%es:(%rdi)
    657f:	aa                   	stos   %al,%es:(%rdi)
    6580:	aa                   	stos   %al,%es:(%rdi)
    6581:	aa                   	stos   %al,%es:(%rdi)
    6582:	aa                   	stos   %al,%es:(%rdi)
    6583:	aa                   	stos   %al,%es:(%rdi)
    6584:	aa                   	stos   %al,%es:(%rdi)
    6585:	aa                   	stos   %al,%es:(%rdi)
    6586:	aa                   	stos   %al,%es:(%rdi)
    6587:	aa                   	stos   %al,%es:(%rdi)
    6588:	aa                   	stos   %al,%es:(%rdi)
    6589:	aa                   	stos   %al,%es:(%rdi)
    658a:	aa                   	stos   %al,%es:(%rdi)
    658b:	aa                   	stos   %al,%es:(%rdi)
    658c:	aa                   	stos   %al,%es:(%rdi)
    658d:	aa                   	stos   %al,%es:(%rdi)
    658e:	aa                   	stos   %al,%es:(%rdi)
    658f:	aa                   	stos   %al,%es:(%rdi)
    6590:	aa                   	stos   %al,%es:(%rdi)
    6591:	aa                   	stos   %al,%es:(%rdi)
    6592:	aa                   	stos   %al,%es:(%rdi)
    6593:	aa                   	stos   %al,%es:(%rdi)
    6594:	aa                   	stos   %al,%es:(%rdi)
    6595:	aa                   	stos   %al,%es:(%rdi)
    6596:	aa                   	stos   %al,%es:(%rdi)
    6597:	aa                   	stos   %al,%es:(%rdi)
    6598:	aa                   	stos   %al,%es:(%rdi)
    6599:	aa                   	stos   %al,%es:(%rdi)
    659a:	aa                   	stos   %al,%es:(%rdi)
    659b:	aa                   	stos   %al,%es:(%rdi)
    659c:	aa                   	stos   %al,%es:(%rdi)
    659d:	aa                   	stos   %al,%es:(%rdi)
    659e:	aa                   	stos   %al,%es:(%rdi)
    659f:	aa                   	stos   %al,%es:(%rdi)
    65a0:	aa                   	stos   %al,%es:(%rdi)
    65a1:	aa                   	stos   %al,%es:(%rdi)
    65a2:	aa                   	stos   %al,%es:(%rdi)
    65a3:	aa                   	stos   %al,%es:(%rdi)
    65a4:	aa                   	stos   %al,%es:(%rdi)
    65a5:	aa                   	stos   %al,%es:(%rdi)
    65a6:	aa                   	stos   %al,%es:(%rdi)
    65a7:	aa                   	stos   %al,%es:(%rdi)
    65a8:	aa                   	stos   %al,%es:(%rdi)
    65a9:	aa                   	stos   %al,%es:(%rdi)
    65aa:	aa                   	stos   %al,%es:(%rdi)
    65ab:	aa                   	stos   %al,%es:(%rdi)
    65ac:	aa                   	stos   %al,%es:(%rdi)
    65ad:	aa                   	stos   %al,%es:(%rdi)
    65ae:	aa                   	stos   %al,%es:(%rdi)
    65af:	aa                   	stos   %al,%es:(%rdi)
    65b0:	aa                   	stos   %al,%es:(%rdi)
    65b1:	aa                   	stos   %al,%es:(%rdi)
    65b2:	aa                   	stos   %al,%es:(%rdi)
    65b3:	aa                   	stos   %al,%es:(%rdi)
    65b4:	aa                   	stos   %al,%es:(%rdi)
    65b5:	aa                   	stos   %al,%es:(%rdi)
    65b6:	aa                   	stos   %al,%es:(%rdi)
    65b7:	aa                   	stos   %al,%es:(%rdi)
    65b8:	aa                   	stos   %al,%es:(%rdi)
    65b9:	aa                   	stos   %al,%es:(%rdi)
    65ba:	aa                   	stos   %al,%es:(%rdi)
    65bb:	aa                   	stos   %al,%es:(%rdi)
    65bc:	aa                   	stos   %al,%es:(%rdi)
    65bd:	aa                   	stos   %al,%es:(%rdi)
    65be:	aa                   	stos   %al,%es:(%rdi)
    65bf:	aa                   	stos   %al,%es:(%rdi)
    65c0:	aa                   	stos   %al,%es:(%rdi)
    65c1:	aa                   	stos   %al,%es:(%rdi)
    65c2:	aa                   	stos   %al,%es:(%rdi)
    65c3:	aa                   	stos   %al,%es:(%rdi)
    65c4:	aa                   	stos   %al,%es:(%rdi)
    65c5:	aa                   	stos   %al,%es:(%rdi)
    65c6:	aa                   	stos   %al,%es:(%rdi)
    65c7:	aa                   	stos   %al,%es:(%rdi)
    65c8:	aa                   	stos   %al,%es:(%rdi)
    65c9:	aa                   	stos   %al,%es:(%rdi)
    65ca:	aa                   	stos   %al,%es:(%rdi)
    65cb:	aa                   	stos   %al,%es:(%rdi)
    65cc:	aa                   	stos   %al,%es:(%rdi)
    65cd:	aa                   	stos   %al,%es:(%rdi)
    65ce:	aa                   	stos   %al,%es:(%rdi)
    65cf:	aa                   	stos   %al,%es:(%rdi)
    65d0:	aa                   	stos   %al,%es:(%rdi)
    65d1:	aa                   	stos   %al,%es:(%rdi)
    65d2:	aa                   	stos   %al,%es:(%rdi)
    65d3:	aa                   	stos   %al,%es:(%rdi)
    65d4:	aa                   	stos   %al,%es:(%rdi)
    65d5:	aa                   	stos   %al,%es:(%rdi)
    65d6:	aa                   	stos   %al,%es:(%rdi)
    65d7:	aa                   	stos   %al,%es:(%rdi)
    65d8:	aa                   	stos   %al,%es:(%rdi)
    65d9:	aa                   	stos   %al,%es:(%rdi)
    65da:	aa                   	stos   %al,%es:(%rdi)
    65db:	aa                   	stos   %al,%es:(%rdi)
    65dc:	aa                   	stos   %al,%es:(%rdi)
    65dd:	aa                   	stos   %al,%es:(%rdi)
    65de:	aa                   	stos   %al,%es:(%rdi)
    65df:	aa                   	stos   %al,%es:(%rdi)
    65e0:	aa                   	stos   %al,%es:(%rdi)
    65e1:	aa                   	stos   %al,%es:(%rdi)
    65e2:	aa                   	stos   %al,%es:(%rdi)
    65e3:	aa                   	stos   %al,%es:(%rdi)
    65e4:	aa                   	stos   %al,%es:(%rdi)
    65e5:	aa                   	stos   %al,%es:(%rdi)
    65e6:	aa                   	stos   %al,%es:(%rdi)
    65e7:	aa                   	stos   %al,%es:(%rdi)
    65e8:	aa                   	stos   %al,%es:(%rdi)
    65e9:	aa                   	stos   %al,%es:(%rdi)
    65ea:	aa                   	stos   %al,%es:(%rdi)
    65eb:	aa                   	stos   %al,%es:(%rdi)
    65ec:	aa                   	stos   %al,%es:(%rdi)
    65ed:	aa                   	stos   %al,%es:(%rdi)
    65ee:	aa                   	stos   %al,%es:(%rdi)
    65ef:	aa                   	stos   %al,%es:(%rdi)
    65f0:	aa                   	stos   %al,%es:(%rdi)
    65f1:	aa                   	stos   %al,%es:(%rdi)
    65f2:	aa                   	stos   %al,%es:(%rdi)
    65f3:	aa                   	stos   %al,%es:(%rdi)
    65f4:	aa                   	stos   %al,%es:(%rdi)
    65f5:	aa                   	stos   %al,%es:(%rdi)
    65f6:	aa                   	stos   %al,%es:(%rdi)
    65f7:	aa                   	stos   %al,%es:(%rdi)
    65f8:	aa                   	stos   %al,%es:(%rdi)
    65f9:	aa                   	stos   %al,%es:(%rdi)
    65fa:	aa                   	stos   %al,%es:(%rdi)
    65fb:	aa                   	stos   %al,%es:(%rdi)
    65fc:	aa                   	stos   %al,%es:(%rdi)
    65fd:	aa                   	stos   %al,%es:(%rdi)
    65fe:	aa                   	stos   %al,%es:(%rdi)
    65ff:	aa                   	stos   %al,%es:(%rdi)
    6600:	aa                   	stos   %al,%es:(%rdi)
    6601:	aa                   	stos   %al,%es:(%rdi)
    6602:	aa                   	stos   %al,%es:(%rdi)
    6603:	aa                   	stos   %al,%es:(%rdi)
    6604:	aa                   	stos   %al,%es:(%rdi)
    6605:	aa                   	stos   %al,%es:(%rdi)
    6606:	aa                   	stos   %al,%es:(%rdi)
    6607:	aa                   	stos   %al,%es:(%rdi)
    6608:	aa                   	stos   %al,%es:(%rdi)
    6609:	aa                   	stos   %al,%es:(%rdi)
    660a:	aa                   	stos   %al,%es:(%rdi)
    660b:	aa                   	stos   %al,%es:(%rdi)
    660c:	aa                   	stos   %al,%es:(%rdi)
    660d:	aa                   	stos   %al,%es:(%rdi)
    660e:	aa                   	stos   %al,%es:(%rdi)
    660f:	aa                   	stos   %al,%es:(%rdi)
    6610:	aa                   	stos   %al,%es:(%rdi)
    6611:	aa                   	stos   %al,%es:(%rdi)
    6612:	aa                   	stos   %al,%es:(%rdi)
    6613:	aa                   	stos   %al,%es:(%rdi)
    6614:	aa                   	stos   %al,%es:(%rdi)
    6615:	aa                   	stos   %al,%es:(%rdi)
    6616:	aa                   	stos   %al,%es:(%rdi)
    6617:	aa                   	stos   %al,%es:(%rdi)
    6618:	aa                   	stos   %al,%es:(%rdi)
    6619:	aa                   	stos   %al,%es:(%rdi)
    661a:	aa                   	stos   %al,%es:(%rdi)
    661b:	aa                   	stos   %al,%es:(%rdi)
    661c:	aa                   	stos   %al,%es:(%rdi)
    661d:	aa                   	stos   %al,%es:(%rdi)
    661e:	aa                   	stos   %al,%es:(%rdi)
    661f:	aa                   	stos   %al,%es:(%rdi)
    6620:	aa                   	stos   %al,%es:(%rdi)
    6621:	aa                   	stos   %al,%es:(%rdi)
    6622:	aa                   	stos   %al,%es:(%rdi)
    6623:	aa                   	stos   %al,%es:(%rdi)
    6624:	aa                   	stos   %al,%es:(%rdi)
    6625:	aa                   	stos   %al,%es:(%rdi)
    6626:	aa                   	stos   %al,%es:(%rdi)
    6627:	aa                   	stos   %al,%es:(%rdi)
    6628:	aa                   	stos   %al,%es:(%rdi)
    6629:	aa                   	stos   %al,%es:(%rdi)
    662a:	aa                   	stos   %al,%es:(%rdi)
    662b:	aa                   	stos   %al,%es:(%rdi)
    662c:	aa                   	stos   %al,%es:(%rdi)
    662d:	aa                   	stos   %al,%es:(%rdi)
    662e:	aa                   	stos   %al,%es:(%rdi)
    662f:	aa                   	stos   %al,%es:(%rdi)
    6630:	aa                   	stos   %al,%es:(%rdi)
    6631:	aa                   	stos   %al,%es:(%rdi)
    6632:	aa                   	stos   %al,%es:(%rdi)
    6633:	aa                   	stos   %al,%es:(%rdi)
    6634:	aa                   	stos   %al,%es:(%rdi)
    6635:	aa                   	stos   %al,%es:(%rdi)
    6636:	aa                   	stos   %al,%es:(%rdi)
    6637:	aa                   	stos   %al,%es:(%rdi)
    6638:	aa                   	stos   %al,%es:(%rdi)
    6639:	aa                   	stos   %al,%es:(%rdi)
    663a:	aa                   	stos   %al,%es:(%rdi)
    663b:	aa                   	stos   %al,%es:(%rdi)
    663c:	aa                   	stos   %al,%es:(%rdi)
    663d:	aa                   	stos   %al,%es:(%rdi)
    663e:	aa                   	stos   %al,%es:(%rdi)
    663f:	aa                   	stos   %al,%es:(%rdi)
    6640:	aa                   	stos   %al,%es:(%rdi)
    6641:	aa                   	stos   %al,%es:(%rdi)
    6642:	aa                   	stos   %al,%es:(%rdi)
    6643:	aa                   	stos   %al,%es:(%rdi)
    6644:	aa                   	stos   %al,%es:(%rdi)
    6645:	aa                   	stos   %al,%es:(%rdi)
    6646:	aa                   	stos   %al,%es:(%rdi)
    6647:	aa                   	stos   %al,%es:(%rdi)
    6648:	aa                   	stos   %al,%es:(%rdi)
    6649:	aa                   	stos   %al,%es:(%rdi)
    664a:	aa                   	stos   %al,%es:(%rdi)
    664b:	aa                   	stos   %al,%es:(%rdi)
    664c:	aa                   	stos   %al,%es:(%rdi)
    664d:	aa                   	stos   %al,%es:(%rdi)
    664e:	aa                   	stos   %al,%es:(%rdi)
    664f:	aa                   	stos   %al,%es:(%rdi)
    6650:	aa                   	stos   %al,%es:(%rdi)
    6651:	aa                   	stos   %al,%es:(%rdi)
    6652:	aa                   	stos   %al,%es:(%rdi)
    6653:	aa                   	stos   %al,%es:(%rdi)
    6654:	aa                   	stos   %al,%es:(%rdi)
    6655:	aa                   	stos   %al,%es:(%rdi)
    6656:	aa                   	stos   %al,%es:(%rdi)
    6657:	aa                   	stos   %al,%es:(%rdi)
    6658:	aa                   	stos   %al,%es:(%rdi)
    6659:	aa                   	stos   %al,%es:(%rdi)
    665a:	aa                   	stos   %al,%es:(%rdi)
    665b:	aa                   	stos   %al,%es:(%rdi)
    665c:	aa                   	stos   %al,%es:(%rdi)
    665d:	aa                   	stos   %al,%es:(%rdi)
    665e:	aa                   	stos   %al,%es:(%rdi)
    665f:	aa                   	stos   %al,%es:(%rdi)
    6660:	aa                   	stos   %al,%es:(%rdi)
    6661:	aa                   	stos   %al,%es:(%rdi)
    6662:	aa                   	stos   %al,%es:(%rdi)
    6663:	aa                   	stos   %al,%es:(%rdi)
    6664:	aa                   	stos   %al,%es:(%rdi)
    6665:	aa                   	stos   %al,%es:(%rdi)
    6666:	aa                   	stos   %al,%es:(%rdi)
    6667:	aa                   	stos   %al,%es:(%rdi)
    6668:	aa                   	stos   %al,%es:(%rdi)
    6669:	aa                   	stos   %al,%es:(%rdi)
    666a:	aa                   	stos   %al,%es:(%rdi)
    666b:	aa                   	stos   %al,%es:(%rdi)
    666c:	aa                   	stos   %al,%es:(%rdi)
    666d:	aa                   	stos   %al,%es:(%rdi)
    666e:	aa                   	stos   %al,%es:(%rdi)
    666f:	aa                   	stos   %al,%es:(%rdi)
    6670:	aa                   	stos   %al,%es:(%rdi)
    6671:	aa                   	stos   %al,%es:(%rdi)
    6672:	aa                   	stos   %al,%es:(%rdi)
    6673:	aa                   	stos   %al,%es:(%rdi)
    6674:	aa                   	stos   %al,%es:(%rdi)
    6675:	aa                   	stos   %al,%es:(%rdi)
    6676:	aa                   	stos   %al,%es:(%rdi)
    6677:	aa                   	stos   %al,%es:(%rdi)
    6678:	aa                   	stos   %al,%es:(%rdi)
    6679:	aa                   	stos   %al,%es:(%rdi)
    667a:	aa                   	stos   %al,%es:(%rdi)
    667b:	aa                   	stos   %al,%es:(%rdi)
    667c:	aa                   	stos   %al,%es:(%rdi)
    667d:	aa                   	stos   %al,%es:(%rdi)
    667e:	aa                   	stos   %al,%es:(%rdi)
    667f:	aa                   	stos   %al,%es:(%rdi)
    6680:	aa                   	stos   %al,%es:(%rdi)
    6681:	aa                   	stos   %al,%es:(%rdi)
    6682:	aa                   	stos   %al,%es:(%rdi)
    6683:	aa                   	stos   %al,%es:(%rdi)
    6684:	aa                   	stos   %al,%es:(%rdi)
    6685:	aa                   	stos   %al,%es:(%rdi)
    6686:	aa                   	stos   %al,%es:(%rdi)
    6687:	aa                   	stos   %al,%es:(%rdi)
    6688:	aa                   	stos   %al,%es:(%rdi)
    6689:	aa                   	stos   %al,%es:(%rdi)
    668a:	aa                   	stos   %al,%es:(%rdi)
    668b:	aa                   	stos   %al,%es:(%rdi)
    668c:	aa                   	stos   %al,%es:(%rdi)
    668d:	aa                   	stos   %al,%es:(%rdi)
    668e:	aa                   	stos   %al,%es:(%rdi)
    668f:	aa                   	stos   %al,%es:(%rdi)
    6690:	aa                   	stos   %al,%es:(%rdi)
    6691:	aa                   	stos   %al,%es:(%rdi)
    6692:	aa                   	stos   %al,%es:(%rdi)
    6693:	aa                   	stos   %al,%es:(%rdi)
    6694:	aa                   	stos   %al,%es:(%rdi)
    6695:	aa                   	stos   %al,%es:(%rdi)
    6696:	aa                   	stos   %al,%es:(%rdi)
    6697:	aa                   	stos   %al,%es:(%rdi)
    6698:	aa                   	stos   %al,%es:(%rdi)
    6699:	aa                   	stos   %al,%es:(%rdi)
    669a:	aa                   	stos   %al,%es:(%rdi)
    669b:	aa                   	stos   %al,%es:(%rdi)
    669c:	aa                   	stos   %al,%es:(%rdi)
    669d:	aa                   	stos   %al,%es:(%rdi)
    669e:	aa                   	stos   %al,%es:(%rdi)
    669f:	aa                   	stos   %al,%es:(%rdi)
    66a0:	aa                   	stos   %al,%es:(%rdi)
    66a1:	aa                   	stos   %al,%es:(%rdi)
    66a2:	aa                   	stos   %al,%es:(%rdi)
    66a3:	aa                   	stos   %al,%es:(%rdi)
    66a4:	aa                   	stos   %al,%es:(%rdi)
    66a5:	aa                   	stos   %al,%es:(%rdi)
    66a6:	aa                   	stos   %al,%es:(%rdi)
    66a7:	aa                   	stos   %al,%es:(%rdi)
    66a8:	aa                   	stos   %al,%es:(%rdi)
    66a9:	aa                   	stos   %al,%es:(%rdi)
    66aa:	aa                   	stos   %al,%es:(%rdi)
    66ab:	aa                   	stos   %al,%es:(%rdi)
    66ac:	aa                   	stos   %al,%es:(%rdi)
    66ad:	aa                   	stos   %al,%es:(%rdi)
    66ae:	aa                   	stos   %al,%es:(%rdi)
    66af:	aa                   	stos   %al,%es:(%rdi)
    66b0:	aa                   	stos   %al,%es:(%rdi)
    66b1:	aa                   	stos   %al,%es:(%rdi)
    66b2:	aa                   	stos   %al,%es:(%rdi)
    66b3:	aa                   	stos   %al,%es:(%rdi)
    66b4:	aa                   	stos   %al,%es:(%rdi)
    66b5:	aa                   	stos   %al,%es:(%rdi)
    66b6:	aa                   	stos   %al,%es:(%rdi)
    66b7:	aa                   	stos   %al,%es:(%rdi)
    66b8:	aa                   	stos   %al,%es:(%rdi)
    66b9:	aa                   	stos   %al,%es:(%rdi)
    66ba:	aa                   	stos   %al,%es:(%rdi)
    66bb:	aa                   	stos   %al,%es:(%rdi)
    66bc:	aa                   	stos   %al,%es:(%rdi)
    66bd:	aa                   	stos   %al,%es:(%rdi)
    66be:	aa                   	stos   %al,%es:(%rdi)
    66bf:	aa                   	stos   %al,%es:(%rdi)
    66c0:	aa                   	stos   %al,%es:(%rdi)
    66c1:	aa                   	stos   %al,%es:(%rdi)
    66c2:	aa                   	stos   %al,%es:(%rdi)
    66c3:	aa                   	stos   %al,%es:(%rdi)
    66c4:	aa                   	stos   %al,%es:(%rdi)
    66c5:	aa                   	stos   %al,%es:(%rdi)
    66c6:	aa                   	stos   %al,%es:(%rdi)
    66c7:	aa                   	stos   %al,%es:(%rdi)
    66c8:	aa                   	stos   %al,%es:(%rdi)
    66c9:	aa                   	stos   %al,%es:(%rdi)
    66ca:	aa                   	stos   %al,%es:(%rdi)
    66cb:	aa                   	stos   %al,%es:(%rdi)
    66cc:	aa                   	stos   %al,%es:(%rdi)
    66cd:	aa                   	stos   %al,%es:(%rdi)
    66ce:	aa                   	stos   %al,%es:(%rdi)
    66cf:	aa                   	stos   %al,%es:(%rdi)
    66d0:	aa                   	stos   %al,%es:(%rdi)
    66d1:	aa                   	stos   %al,%es:(%rdi)
    66d2:	aa                   	stos   %al,%es:(%rdi)
    66d3:	aa                   	stos   %al,%es:(%rdi)
    66d4:	aa                   	stos   %al,%es:(%rdi)
    66d5:	aa                   	stos   %al,%es:(%rdi)
    66d6:	aa                   	stos   %al,%es:(%rdi)
    66d7:	aa                   	stos   %al,%es:(%rdi)
    66d8:	aa                   	stos   %al,%es:(%rdi)
    66d9:	aa                   	stos   %al,%es:(%rdi)
    66da:	aa                   	stos   %al,%es:(%rdi)
    66db:	aa                   	stos   %al,%es:(%rdi)
    66dc:	aa                   	stos   %al,%es:(%rdi)
    66dd:	aa                   	stos   %al,%es:(%rdi)
    66de:	aa                   	stos   %al,%es:(%rdi)
    66df:	aa                   	stos   %al,%es:(%rdi)
    66e0:	aa                   	stos   %al,%es:(%rdi)
    66e1:	aa                   	stos   %al,%es:(%rdi)
    66e2:	aa                   	stos   %al,%es:(%rdi)
    66e3:	aa                   	stos   %al,%es:(%rdi)
    66e4:	aa                   	stos   %al,%es:(%rdi)
    66e5:	aa                   	stos   %al,%es:(%rdi)
    66e6:	aa                   	stos   %al,%es:(%rdi)
    66e7:	aa                   	stos   %al,%es:(%rdi)
    66e8:	aa                   	stos   %al,%es:(%rdi)
    66e9:	aa                   	stos   %al,%es:(%rdi)
    66ea:	aa                   	stos   %al,%es:(%rdi)
    66eb:	aa                   	stos   %al,%es:(%rdi)
    66ec:	aa                   	stos   %al,%es:(%rdi)
    66ed:	aa                   	stos   %al,%es:(%rdi)
    66ee:	aa                   	stos   %al,%es:(%rdi)
    66ef:	aa                   	stos   %al,%es:(%rdi)
    66f0:	aa                   	stos   %al,%es:(%rdi)
    66f1:	aa                   	stos   %al,%es:(%rdi)
    66f2:	aa                   	stos   %al,%es:(%rdi)
    66f3:	aa                   	stos   %al,%es:(%rdi)
    66f4:	aa                   	stos   %al,%es:(%rdi)
    66f5:	aa                   	stos   %al,%es:(%rdi)
    66f6:	aa                   	stos   %al,%es:(%rdi)
    66f7:	aa                   	stos   %al,%es:(%rdi)
    66f8:	aa                   	stos   %al,%es:(%rdi)
    66f9:	aa                   	stos   %al,%es:(%rdi)
    66fa:	aa                   	stos   %al,%es:(%rdi)
    66fb:	aa                   	stos   %al,%es:(%rdi)
    66fc:	aa                   	stos   %al,%es:(%rdi)
    66fd:	aa                   	stos   %al,%es:(%rdi)
    66fe:	aa                   	stos   %al,%es:(%rdi)
    66ff:	aa                   	stos   %al,%es:(%rdi)
    6700:	aa                   	stos   %al,%es:(%rdi)
    6701:	aa                   	stos   %al,%es:(%rdi)
    6702:	aa                   	stos   %al,%es:(%rdi)
    6703:	aa                   	stos   %al,%es:(%rdi)
    6704:	aa                   	stos   %al,%es:(%rdi)
    6705:	aa                   	stos   %al,%es:(%rdi)
    6706:	aa                   	stos   %al,%es:(%rdi)
    6707:	aa                   	stos   %al,%es:(%rdi)
    6708:	aa                   	stos   %al,%es:(%rdi)
    6709:	aa                   	stos   %al,%es:(%rdi)
    670a:	aa                   	stos   %al,%es:(%rdi)
    670b:	aa                   	stos   %al,%es:(%rdi)
    670c:	aa                   	stos   %al,%es:(%rdi)
    670d:	aa                   	stos   %al,%es:(%rdi)
    670e:	aa                   	stos   %al,%es:(%rdi)
    670f:	aa                   	stos   %al,%es:(%rdi)
    6710:	aa                   	stos   %al,%es:(%rdi)
    6711:	aa                   	stos   %al,%es:(%rdi)
    6712:	aa                   	stos   %al,%es:(%rdi)
    6713:	aa                   	stos   %al,%es:(%rdi)
    6714:	aa                   	stos   %al,%es:(%rdi)
    6715:	aa                   	stos   %al,%es:(%rdi)
    6716:	aa                   	stos   %al,%es:(%rdi)
    6717:	aa                   	stos   %al,%es:(%rdi)
    6718:	aa                   	stos   %al,%es:(%rdi)
    6719:	aa                   	stos   %al,%es:(%rdi)
    671a:	aa                   	stos   %al,%es:(%rdi)
    671b:	aa                   	stos   %al,%es:(%rdi)
    671c:	aa                   	stos   %al,%es:(%rdi)
    671d:	aa                   	stos   %al,%es:(%rdi)
    671e:	aa                   	stos   %al,%es:(%rdi)
    671f:	aa                   	stos   %al,%es:(%rdi)
    6720:	aa                   	stos   %al,%es:(%rdi)
    6721:	aa                   	stos   %al,%es:(%rdi)
    6722:	aa                   	stos   %al,%es:(%rdi)
    6723:	aa                   	stos   %al,%es:(%rdi)
    6724:	aa                   	stos   %al,%es:(%rdi)
    6725:	aa                   	stos   %al,%es:(%rdi)
    6726:	aa                   	stos   %al,%es:(%rdi)
    6727:	aa                   	stos   %al,%es:(%rdi)
    6728:	aa                   	stos   %al,%es:(%rdi)
    6729:	aa                   	stos   %al,%es:(%rdi)
    672a:	aa                   	stos   %al,%es:(%rdi)
    672b:	aa                   	stos   %al,%es:(%rdi)
    672c:	aa                   	stos   %al,%es:(%rdi)
    672d:	aa                   	stos   %al,%es:(%rdi)
    672e:	aa                   	stos   %al,%es:(%rdi)
    672f:	aa                   	stos   %al,%es:(%rdi)
    6730:	aa                   	stos   %al,%es:(%rdi)
    6731:	aa                   	stos   %al,%es:(%rdi)
    6732:	aa                   	stos   %al,%es:(%rdi)
    6733:	aa                   	stos   %al,%es:(%rdi)
    6734:	aa                   	stos   %al,%es:(%rdi)
    6735:	aa                   	stos   %al,%es:(%rdi)
    6736:	aa                   	stos   %al,%es:(%rdi)
    6737:	aa                   	stos   %al,%es:(%rdi)
    6738:	aa                   	stos   %al,%es:(%rdi)
    6739:	aa                   	stos   %al,%es:(%rdi)
    673a:	aa                   	stos   %al,%es:(%rdi)
    673b:	aa                   	stos   %al,%es:(%rdi)
    673c:	aa                   	stos   %al,%es:(%rdi)
    673d:	aa                   	stos   %al,%es:(%rdi)
    673e:	aa                   	stos   %al,%es:(%rdi)
    673f:	aa                   	stos   %al,%es:(%rdi)
    6740:	aa                   	stos   %al,%es:(%rdi)
    6741:	aa                   	stos   %al,%es:(%rdi)
    6742:	aa                   	stos   %al,%es:(%rdi)
    6743:	aa                   	stos   %al,%es:(%rdi)
    6744:	aa                   	stos   %al,%es:(%rdi)
    6745:	aa                   	stos   %al,%es:(%rdi)
    6746:	aa                   	stos   %al,%es:(%rdi)
    6747:	aa                   	stos   %al,%es:(%rdi)
    6748:	aa                   	stos   %al,%es:(%rdi)
    6749:	aa                   	stos   %al,%es:(%rdi)
    674a:	aa                   	stos   %al,%es:(%rdi)
    674b:	aa                   	stos   %al,%es:(%rdi)
    674c:	aa                   	stos   %al,%es:(%rdi)
    674d:	aa                   	stos   %al,%es:(%rdi)
    674e:	aa                   	stos   %al,%es:(%rdi)
    674f:	aa                   	stos   %al,%es:(%rdi)
    6750:	aa                   	stos   %al,%es:(%rdi)
    6751:	aa                   	stos   %al,%es:(%rdi)
    6752:	aa                   	stos   %al,%es:(%rdi)
    6753:	aa                   	stos   %al,%es:(%rdi)
    6754:	aa                   	stos   %al,%es:(%rdi)
    6755:	aa                   	stos   %al,%es:(%rdi)
    6756:	aa                   	stos   %al,%es:(%rdi)
    6757:	aa                   	stos   %al,%es:(%rdi)
    6758:	aa                   	stos   %al,%es:(%rdi)
    6759:	aa                   	stos   %al,%es:(%rdi)
    675a:	aa                   	stos   %al,%es:(%rdi)
    675b:	aa                   	stos   %al,%es:(%rdi)
    675c:	aa                   	stos   %al,%es:(%rdi)
    675d:	aa                   	stos   %al,%es:(%rdi)
    675e:	aa                   	stos   %al,%es:(%rdi)
    675f:	aa                   	stos   %al,%es:(%rdi)
    6760:	aa                   	stos   %al,%es:(%rdi)
    6761:	aa                   	stos   %al,%es:(%rdi)
    6762:	aa                   	stos   %al,%es:(%rdi)
    6763:	aa                   	stos   %al,%es:(%rdi)
    6764:	aa                   	stos   %al,%es:(%rdi)
    6765:	aa                   	stos   %al,%es:(%rdi)
    6766:	aa                   	stos   %al,%es:(%rdi)
    6767:	aa                   	stos   %al,%es:(%rdi)
    6768:	aa                   	stos   %al,%es:(%rdi)
    6769:	aa                   	stos   %al,%es:(%rdi)
    676a:	aa                   	stos   %al,%es:(%rdi)
    676b:	aa                   	stos   %al,%es:(%rdi)
    676c:	aa                   	stos   %al,%es:(%rdi)
    676d:	aa                   	stos   %al,%es:(%rdi)
    676e:	aa                   	stos   %al,%es:(%rdi)
    676f:	aa                   	stos   %al,%es:(%rdi)
    6770:	aa                   	stos   %al,%es:(%rdi)
    6771:	aa                   	stos   %al,%es:(%rdi)
    6772:	aa                   	stos   %al,%es:(%rdi)
    6773:	aa                   	stos   %al,%es:(%rdi)
    6774:	aa                   	stos   %al,%es:(%rdi)
    6775:	aa                   	stos   %al,%es:(%rdi)
    6776:	aa                   	stos   %al,%es:(%rdi)
    6777:	aa                   	stos   %al,%es:(%rdi)
    6778:	aa                   	stos   %al,%es:(%rdi)
    6779:	aa                   	stos   %al,%es:(%rdi)
    677a:	aa                   	stos   %al,%es:(%rdi)
    677b:	aa                   	stos   %al,%es:(%rdi)
    677c:	aa                   	stos   %al,%es:(%rdi)
    677d:	aa                   	stos   %al,%es:(%rdi)
    677e:	aa                   	stos   %al,%es:(%rdi)
    677f:	aa                   	stos   %al,%es:(%rdi)
    6780:	aa                   	stos   %al,%es:(%rdi)
    6781:	aa                   	stos   %al,%es:(%rdi)
    6782:	aa                   	stos   %al,%es:(%rdi)
    6783:	aa                   	stos   %al,%es:(%rdi)
    6784:	aa                   	stos   %al,%es:(%rdi)
    6785:	aa                   	stos   %al,%es:(%rdi)
    6786:	aa                   	stos   %al,%es:(%rdi)
    6787:	aa                   	stos   %al,%es:(%rdi)
    6788:	aa                   	stos   %al,%es:(%rdi)
    6789:	aa                   	stos   %al,%es:(%rdi)
    678a:	aa                   	stos   %al,%es:(%rdi)
    678b:	aa                   	stos   %al,%es:(%rdi)
    678c:	aa                   	stos   %al,%es:(%rdi)
    678d:	aa                   	stos   %al,%es:(%rdi)
    678e:	aa                   	stos   %al,%es:(%rdi)
    678f:	aa                   	stos   %al,%es:(%rdi)
    6790:	aa                   	stos   %al,%es:(%rdi)
    6791:	aa                   	stos   %al,%es:(%rdi)
    6792:	aa                   	stos   %al,%es:(%rdi)
    6793:	aa                   	stos   %al,%es:(%rdi)
    6794:	aa                   	stos   %al,%es:(%rdi)
    6795:	aa                   	stos   %al,%es:(%rdi)
    6796:	aa                   	stos   %al,%es:(%rdi)
    6797:	aa                   	stos   %al,%es:(%rdi)
    6798:	aa                   	stos   %al,%es:(%rdi)
    6799:	aa                   	stos   %al,%es:(%rdi)
    679a:	aa                   	stos   %al,%es:(%rdi)
    679b:	aa                   	stos   %al,%es:(%rdi)
    679c:	aa                   	stos   %al,%es:(%rdi)
    679d:	aa                   	stos   %al,%es:(%rdi)
    679e:	aa                   	stos   %al,%es:(%rdi)
    679f:	aa                   	stos   %al,%es:(%rdi)
    67a0:	aa                   	stos   %al,%es:(%rdi)
    67a1:	aa                   	stos   %al,%es:(%rdi)
    67a2:	aa                   	stos   %al,%es:(%rdi)
    67a3:	aa                   	stos   %al,%es:(%rdi)
    67a4:	aa                   	stos   %al,%es:(%rdi)
    67a5:	aa                   	stos   %al,%es:(%rdi)
    67a6:	aa                   	stos   %al,%es:(%rdi)
    67a7:	aa                   	stos   %al,%es:(%rdi)
    67a8:	aa                   	stos   %al,%es:(%rdi)
    67a9:	aa                   	stos   %al,%es:(%rdi)
    67aa:	aa                   	stos   %al,%es:(%rdi)
    67ab:	aa                   	stos   %al,%es:(%rdi)
    67ac:	aa                   	stos   %al,%es:(%rdi)
    67ad:	aa                   	stos   %al,%es:(%rdi)
    67ae:	aa                   	stos   %al,%es:(%rdi)
    67af:	aa                   	stos   %al,%es:(%rdi)
    67b0:	aa                   	stos   %al,%es:(%rdi)
    67b1:	aa                   	stos   %al,%es:(%rdi)
    67b2:	aa                   	stos   %al,%es:(%rdi)
    67b3:	aa                   	stos   %al,%es:(%rdi)
    67b4:	aa                   	stos   %al,%es:(%rdi)
    67b5:	aa                   	stos   %al,%es:(%rdi)
    67b6:	aa                   	stos   %al,%es:(%rdi)
    67b7:	aa                   	stos   %al,%es:(%rdi)
    67b8:	aa                   	stos   %al,%es:(%rdi)
    67b9:	aa                   	stos   %al,%es:(%rdi)
    67ba:	aa                   	stos   %al,%es:(%rdi)
    67bb:	aa                   	stos   %al,%es:(%rdi)
    67bc:	aa                   	stos   %al,%es:(%rdi)
    67bd:	aa                   	stos   %al,%es:(%rdi)
    67be:	aa                   	stos   %al,%es:(%rdi)
    67bf:	aa                   	stos   %al,%es:(%rdi)
    67c0:	aa                   	stos   %al,%es:(%rdi)
    67c1:	aa                   	stos   %al,%es:(%rdi)
    67c2:	aa                   	stos   %al,%es:(%rdi)
    67c3:	aa                   	stos   %al,%es:(%rdi)
    67c4:	aa                   	stos   %al,%es:(%rdi)
    67c5:	aa                   	stos   %al,%es:(%rdi)
    67c6:	aa                   	stos   %al,%es:(%rdi)
    67c7:	aa                   	stos   %al,%es:(%rdi)
    67c8:	aa                   	stos   %al,%es:(%rdi)
    67c9:	aa                   	stos   %al,%es:(%rdi)
    67ca:	aa                   	stos   %al,%es:(%rdi)
    67cb:	aa                   	stos   %al,%es:(%rdi)
    67cc:	aa                   	stos   %al,%es:(%rdi)
    67cd:	aa                   	stos   %al,%es:(%rdi)
    67ce:	aa                   	stos   %al,%es:(%rdi)
    67cf:	aa                   	stos   %al,%es:(%rdi)
    67d0:	aa                   	stos   %al,%es:(%rdi)
    67d1:	aa                   	stos   %al,%es:(%rdi)
    67d2:	aa                   	stos   %al,%es:(%rdi)
    67d3:	aa                   	stos   %al,%es:(%rdi)
    67d4:	aa                   	stos   %al,%es:(%rdi)
    67d5:	aa                   	stos   %al,%es:(%rdi)
    67d6:	aa                   	stos   %al,%es:(%rdi)
    67d7:	aa                   	stos   %al,%es:(%rdi)
    67d8:	aa                   	stos   %al,%es:(%rdi)
    67d9:	aa                   	stos   %al,%es:(%rdi)
    67da:	aa                   	stos   %al,%es:(%rdi)
    67db:	aa                   	stos   %al,%es:(%rdi)
    67dc:	aa                   	stos   %al,%es:(%rdi)
    67dd:	aa                   	stos   %al,%es:(%rdi)
    67de:	aa                   	stos   %al,%es:(%rdi)
    67df:	aa                   	stos   %al,%es:(%rdi)
    67e0:	aa                   	stos   %al,%es:(%rdi)
    67e1:	aa                   	stos   %al,%es:(%rdi)
    67e2:	aa                   	stos   %al,%es:(%rdi)
    67e3:	aa                   	stos   %al,%es:(%rdi)
    67e4:	aa                   	stos   %al,%es:(%rdi)
    67e5:	aa                   	stos   %al,%es:(%rdi)
    67e6:	aa                   	stos   %al,%es:(%rdi)
    67e7:	aa                   	stos   %al,%es:(%rdi)
    67e8:	aa                   	stos   %al,%es:(%rdi)
    67e9:	aa                   	stos   %al,%es:(%rdi)
    67ea:	aa                   	stos   %al,%es:(%rdi)
    67eb:	aa                   	stos   %al,%es:(%rdi)
    67ec:	aa                   	stos   %al,%es:(%rdi)
    67ed:	aa                   	stos   %al,%es:(%rdi)
    67ee:	aa                   	stos   %al,%es:(%rdi)
    67ef:	aa                   	stos   %al,%es:(%rdi)
    67f0:	aa                   	stos   %al,%es:(%rdi)
    67f1:	aa                   	stos   %al,%es:(%rdi)
    67f2:	aa                   	stos   %al,%es:(%rdi)
    67f3:	aa                   	stos   %al,%es:(%rdi)
    67f4:	aa                   	stos   %al,%es:(%rdi)
    67f5:	aa                   	stos   %al,%es:(%rdi)
    67f6:	aa                   	stos   %al,%es:(%rdi)
    67f7:	aa                   	stos   %al,%es:(%rdi)
    67f8:	aa                   	stos   %al,%es:(%rdi)
    67f9:	aa                   	stos   %al,%es:(%rdi)
    67fa:	aa                   	stos   %al,%es:(%rdi)
    67fb:	aa                   	stos   %al,%es:(%rdi)
    67fc:	aa                   	stos   %al,%es:(%rdi)
    67fd:	aa                   	stos   %al,%es:(%rdi)
    67fe:	aa                   	stos   %al,%es:(%rdi)
    67ff:	aa                   	stos   %al,%es:(%rdi)
    6800:	aa                   	stos   %al,%es:(%rdi)
    6801:	aa                   	stos   %al,%es:(%rdi)
    6802:	aa                   	stos   %al,%es:(%rdi)
    6803:	aa                   	stos   %al,%es:(%rdi)
    6804:	aa                   	stos   %al,%es:(%rdi)
    6805:	aa                   	stos   %al,%es:(%rdi)
    6806:	aa                   	stos   %al,%es:(%rdi)
    6807:	aa                   	stos   %al,%es:(%rdi)
    6808:	aa                   	stos   %al,%es:(%rdi)
    6809:	aa                   	stos   %al,%es:(%rdi)
    680a:	aa                   	stos   %al,%es:(%rdi)
    680b:	aa                   	stos   %al,%es:(%rdi)
    680c:	aa                   	stos   %al,%es:(%rdi)
    680d:	aa                   	stos   %al,%es:(%rdi)
    680e:	aa                   	stos   %al,%es:(%rdi)
    680f:	aa                   	stos   %al,%es:(%rdi)
    6810:	aa                   	stos   %al,%es:(%rdi)
    6811:	aa                   	stos   %al,%es:(%rdi)
    6812:	aa                   	stos   %al,%es:(%rdi)
    6813:	aa                   	stos   %al,%es:(%rdi)
    6814:	aa                   	stos   %al,%es:(%rdi)
    6815:	aa                   	stos   %al,%es:(%rdi)
    6816:	aa                   	stos   %al,%es:(%rdi)
    6817:	aa                   	stos   %al,%es:(%rdi)
    6818:	aa                   	stos   %al,%es:(%rdi)
    6819:	aa                   	stos   %al,%es:(%rdi)
    681a:	aa                   	stos   %al,%es:(%rdi)
    681b:	aa                   	stos   %al,%es:(%rdi)
    681c:	aa                   	stos   %al,%es:(%rdi)
    681d:	aa                   	stos   %al,%es:(%rdi)
    681e:	aa                   	stos   %al,%es:(%rdi)
    681f:	aa                   	stos   %al,%es:(%rdi)
    6820:	aa                   	stos   %al,%es:(%rdi)
    6821:	aa                   	stos   %al,%es:(%rdi)
    6822:	aa                   	stos   %al,%es:(%rdi)
    6823:	aa                   	stos   %al,%es:(%rdi)
    6824:	aa                   	stos   %al,%es:(%rdi)
    6825:	aa                   	stos   %al,%es:(%rdi)
    6826:	aa                   	stos   %al,%es:(%rdi)
    6827:	aa                   	stos   %al,%es:(%rdi)
    6828:	aa                   	stos   %al,%es:(%rdi)
    6829:	aa                   	stos   %al,%es:(%rdi)
    682a:	aa                   	stos   %al,%es:(%rdi)
    682b:	aa                   	stos   %al,%es:(%rdi)
    682c:	aa                   	stos   %al,%es:(%rdi)
    682d:	aa                   	stos   %al,%es:(%rdi)
    682e:	aa                   	stos   %al,%es:(%rdi)
    682f:	aa                   	stos   %al,%es:(%rdi)
    6830:	aa                   	stos   %al,%es:(%rdi)
    6831:	aa                   	stos   %al,%es:(%rdi)
    6832:	aa                   	stos   %al,%es:(%rdi)
    6833:	aa                   	stos   %al,%es:(%rdi)
    6834:	aa                   	stos   %al,%es:(%rdi)
    6835:	aa                   	stos   %al,%es:(%rdi)
    6836:	aa                   	stos   %al,%es:(%rdi)
    6837:	aa                   	stos   %al,%es:(%rdi)
    6838:	aa                   	stos   %al,%es:(%rdi)
    6839:	aa                   	stos   %al,%es:(%rdi)
    683a:	aa                   	stos   %al,%es:(%rdi)
    683b:	aa                   	stos   %al,%es:(%rdi)
    683c:	aa                   	stos   %al,%es:(%rdi)
    683d:	aa                   	stos   %al,%es:(%rdi)
    683e:	aa                   	stos   %al,%es:(%rdi)
    683f:	aa                   	stos   %al,%es:(%rdi)
    6840:	aa                   	stos   %al,%es:(%rdi)
    6841:	aa                   	stos   %al,%es:(%rdi)
    6842:	aa                   	stos   %al,%es:(%rdi)
    6843:	aa                   	stos   %al,%es:(%rdi)
    6844:	aa                   	stos   %al,%es:(%rdi)
    6845:	aa                   	stos   %al,%es:(%rdi)
    6846:	aa                   	stos   %al,%es:(%rdi)
    6847:	aa                   	stos   %al,%es:(%rdi)
    6848:	aa                   	stos   %al,%es:(%rdi)
    6849:	aa                   	stos   %al,%es:(%rdi)
    684a:	aa                   	stos   %al,%es:(%rdi)
    684b:	aa                   	stos   %al,%es:(%rdi)
    684c:	aa                   	stos   %al,%es:(%rdi)
    684d:	aa                   	stos   %al,%es:(%rdi)
    684e:	aa                   	stos   %al,%es:(%rdi)
    684f:	aa                   	stos   %al,%es:(%rdi)
    6850:	aa                   	stos   %al,%es:(%rdi)
    6851:	aa                   	stos   %al,%es:(%rdi)
    6852:	aa                   	stos   %al,%es:(%rdi)
    6853:	aa                   	stos   %al,%es:(%rdi)
    6854:	aa                   	stos   %al,%es:(%rdi)
    6855:	aa                   	stos   %al,%es:(%rdi)
    6856:	aa                   	stos   %al,%es:(%rdi)
    6857:	aa                   	stos   %al,%es:(%rdi)
    6858:	aa                   	stos   %al,%es:(%rdi)
    6859:	aa                   	stos   %al,%es:(%rdi)
    685a:	aa                   	stos   %al,%es:(%rdi)
    685b:	aa                   	stos   %al,%es:(%rdi)
    685c:	aa                   	stos   %al,%es:(%rdi)
    685d:	aa                   	stos   %al,%es:(%rdi)
    685e:	aa                   	stos   %al,%es:(%rdi)
    685f:	aa                   	stos   %al,%es:(%rdi)
    6860:	aa                   	stos   %al,%es:(%rdi)
    6861:	aa                   	stos   %al,%es:(%rdi)
    6862:	aa                   	stos   %al,%es:(%rdi)
    6863:	aa                   	stos   %al,%es:(%rdi)
    6864:	aa                   	stos   %al,%es:(%rdi)
    6865:	aa                   	stos   %al,%es:(%rdi)
    6866:	aa                   	stos   %al,%es:(%rdi)
    6867:	aa                   	stos   %al,%es:(%rdi)
    6868:	aa                   	stos   %al,%es:(%rdi)
    6869:	aa                   	stos   %al,%es:(%rdi)
    686a:	aa                   	stos   %al,%es:(%rdi)
    686b:	aa                   	stos   %al,%es:(%rdi)
    686c:	aa                   	stos   %al,%es:(%rdi)
    686d:	aa                   	stos   %al,%es:(%rdi)
    686e:	aa                   	stos   %al,%es:(%rdi)
    686f:	aa                   	stos   %al,%es:(%rdi)
    6870:	aa                   	stos   %al,%es:(%rdi)
    6871:	aa                   	stos   %al,%es:(%rdi)
    6872:	aa                   	stos   %al,%es:(%rdi)
    6873:	aa                   	stos   %al,%es:(%rdi)
    6874:	aa                   	stos   %al,%es:(%rdi)
    6875:	aa                   	stos   %al,%es:(%rdi)
    6876:	aa                   	stos   %al,%es:(%rdi)
    6877:	aa                   	stos   %al,%es:(%rdi)
    6878:	aa                   	stos   %al,%es:(%rdi)
    6879:	aa                   	stos   %al,%es:(%rdi)
    687a:	aa                   	stos   %al,%es:(%rdi)
    687b:	aa                   	stos   %al,%es:(%rdi)
    687c:	aa                   	stos   %al,%es:(%rdi)
    687d:	aa                   	stos   %al,%es:(%rdi)
    687e:	aa                   	stos   %al,%es:(%rdi)
    687f:	aa                   	stos   %al,%es:(%rdi)
    6880:	aa                   	stos   %al,%es:(%rdi)
    6881:	aa                   	stos   %al,%es:(%rdi)
    6882:	aa                   	stos   %al,%es:(%rdi)
    6883:	aa                   	stos   %al,%es:(%rdi)
    6884:	aa                   	stos   %al,%es:(%rdi)
    6885:	aa                   	stos   %al,%es:(%rdi)
    6886:	aa                   	stos   %al,%es:(%rdi)
    6887:	aa                   	stos   %al,%es:(%rdi)
    6888:	aa                   	stos   %al,%es:(%rdi)
    6889:	aa                   	stos   %al,%es:(%rdi)
    688a:	aa                   	stos   %al,%es:(%rdi)
    688b:	aa                   	stos   %al,%es:(%rdi)
    688c:	aa                   	stos   %al,%es:(%rdi)
    688d:	aa                   	stos   %al,%es:(%rdi)
    688e:	aa                   	stos   %al,%es:(%rdi)
    688f:	aa                   	stos   %al,%es:(%rdi)
    6890:	aa                   	stos   %al,%es:(%rdi)
    6891:	aa                   	stos   %al,%es:(%rdi)
    6892:	aa                   	stos   %al,%es:(%rdi)
    6893:	aa                   	stos   %al,%es:(%rdi)
    6894:	aa                   	stos   %al,%es:(%rdi)
    6895:	aa                   	stos   %al,%es:(%rdi)
    6896:	aa                   	stos   %al,%es:(%rdi)
    6897:	aa                   	stos   %al,%es:(%rdi)
    6898:	aa                   	stos   %al,%es:(%rdi)
    6899:	aa                   	stos   %al,%es:(%rdi)
    689a:	aa                   	stos   %al,%es:(%rdi)
    689b:	aa                   	stos   %al,%es:(%rdi)
    689c:	aa                   	stos   %al,%es:(%rdi)
    689d:	aa                   	stos   %al,%es:(%rdi)
    689e:	aa                   	stos   %al,%es:(%rdi)
    689f:	aa                   	stos   %al,%es:(%rdi)
    68a0:	aa                   	stos   %al,%es:(%rdi)
    68a1:	aa                   	stos   %al,%es:(%rdi)
    68a2:	aa                   	stos   %al,%es:(%rdi)
    68a3:	aa                   	stos   %al,%es:(%rdi)
    68a4:	aa                   	stos   %al,%es:(%rdi)
    68a5:	aa                   	stos   %al,%es:(%rdi)
    68a6:	aa                   	stos   %al,%es:(%rdi)
    68a7:	aa                   	stos   %al,%es:(%rdi)
    68a8:	aa                   	stos   %al,%es:(%rdi)
    68a9:	aa                   	stos   %al,%es:(%rdi)
    68aa:	aa                   	stos   %al,%es:(%rdi)
    68ab:	aa                   	stos   %al,%es:(%rdi)
    68ac:	aa                   	stos   %al,%es:(%rdi)
    68ad:	aa                   	stos   %al,%es:(%rdi)
    68ae:	aa                   	stos   %al,%es:(%rdi)
    68af:	aa                   	stos   %al,%es:(%rdi)
    68b0:	aa                   	stos   %al,%es:(%rdi)
    68b1:	aa                   	stos   %al,%es:(%rdi)
    68b2:	aa                   	stos   %al,%es:(%rdi)
    68b3:	aa                   	stos   %al,%es:(%rdi)
    68b4:	aa                   	stos   %al,%es:(%rdi)
    68b5:	aa                   	stos   %al,%es:(%rdi)
    68b6:	aa                   	stos   %al,%es:(%rdi)
    68b7:	aa                   	stos   %al,%es:(%rdi)
    68b8:	aa                   	stos   %al,%es:(%rdi)
    68b9:	aa                   	stos   %al,%es:(%rdi)
    68ba:	aa                   	stos   %al,%es:(%rdi)
    68bb:	aa                   	stos   %al,%es:(%rdi)
    68bc:	aa                   	stos   %al,%es:(%rdi)
    68bd:	aa                   	stos   %al,%es:(%rdi)
    68be:	aa                   	stos   %al,%es:(%rdi)
    68bf:	aa                   	stos   %al,%es:(%rdi)
    68c0:	aa                   	stos   %al,%es:(%rdi)
    68c1:	aa                   	stos   %al,%es:(%rdi)
    68c2:	aa                   	stos   %al,%es:(%rdi)
    68c3:	aa                   	stos   %al,%es:(%rdi)
    68c4:	aa                   	stos   %al,%es:(%rdi)
    68c5:	aa                   	stos   %al,%es:(%rdi)
    68c6:	aa                   	stos   %al,%es:(%rdi)
    68c7:	aa                   	stos   %al,%es:(%rdi)
    68c8:	aa                   	stos   %al,%es:(%rdi)
    68c9:	aa                   	stos   %al,%es:(%rdi)
    68ca:	aa                   	stos   %al,%es:(%rdi)
    68cb:	aa                   	stos   %al,%es:(%rdi)
    68cc:	aa                   	stos   %al,%es:(%rdi)
    68cd:	aa                   	stos   %al,%es:(%rdi)
    68ce:	aa                   	stos   %al,%es:(%rdi)
    68cf:	aa                   	stos   %al,%es:(%rdi)
    68d0:	aa                   	stos   %al,%es:(%rdi)
    68d1:	aa                   	stos   %al,%es:(%rdi)
    68d2:	aa                   	stos   %al,%es:(%rdi)
    68d3:	aa                   	stos   %al,%es:(%rdi)
    68d4:	aa                   	stos   %al,%es:(%rdi)
    68d5:	aa                   	stos   %al,%es:(%rdi)
    68d6:	aa                   	stos   %al,%es:(%rdi)
    68d7:	aa                   	stos   %al,%es:(%rdi)
    68d8:	aa                   	stos   %al,%es:(%rdi)
    68d9:	aa                   	stos   %al,%es:(%rdi)
    68da:	aa                   	stos   %al,%es:(%rdi)
    68db:	aa                   	stos   %al,%es:(%rdi)
    68dc:	aa                   	stos   %al,%es:(%rdi)
    68dd:	aa                   	stos   %al,%es:(%rdi)
    68de:	aa                   	stos   %al,%es:(%rdi)
    68df:	aa                   	stos   %al,%es:(%rdi)
    68e0:	aa                   	stos   %al,%es:(%rdi)
    68e1:	aa                   	stos   %al,%es:(%rdi)
    68e2:	aa                   	stos   %al,%es:(%rdi)
    68e3:	aa                   	stos   %al,%es:(%rdi)
    68e4:	aa                   	stos   %al,%es:(%rdi)
    68e5:	aa                   	stos   %al,%es:(%rdi)
    68e6:	aa                   	stos   %al,%es:(%rdi)
    68e7:	aa                   	stos   %al,%es:(%rdi)
    68e8:	aa                   	stos   %al,%es:(%rdi)
    68e9:	aa                   	stos   %al,%es:(%rdi)
    68ea:	aa                   	stos   %al,%es:(%rdi)
    68eb:	aa                   	stos   %al,%es:(%rdi)
    68ec:	aa                   	stos   %al,%es:(%rdi)
    68ed:	aa                   	stos   %al,%es:(%rdi)
    68ee:	aa                   	stos   %al,%es:(%rdi)
    68ef:	aa                   	stos   %al,%es:(%rdi)
    68f0:	aa                   	stos   %al,%es:(%rdi)
    68f1:	aa                   	stos   %al,%es:(%rdi)
    68f2:	aa                   	stos   %al,%es:(%rdi)
    68f3:	aa                   	stos   %al,%es:(%rdi)
    68f4:	aa                   	stos   %al,%es:(%rdi)
    68f5:	aa                   	stos   %al,%es:(%rdi)
    68f6:	aa                   	stos   %al,%es:(%rdi)
    68f7:	aa                   	stos   %al,%es:(%rdi)
    68f8:	aa                   	stos   %al,%es:(%rdi)
    68f9:	aa                   	stos   %al,%es:(%rdi)
    68fa:	aa                   	stos   %al,%es:(%rdi)
    68fb:	aa                   	stos   %al,%es:(%rdi)
    68fc:	aa                   	stos   %al,%es:(%rdi)
    68fd:	aa                   	stos   %al,%es:(%rdi)
    68fe:	aa                   	stos   %al,%es:(%rdi)
    68ff:	aa                   	stos   %al,%es:(%rdi)
    6900:	aa                   	stos   %al,%es:(%rdi)
    6901:	aa                   	stos   %al,%es:(%rdi)
    6902:	aa                   	stos   %al,%es:(%rdi)
    6903:	aa                   	stos   %al,%es:(%rdi)
    6904:	aa                   	stos   %al,%es:(%rdi)
    6905:	aa                   	stos   %al,%es:(%rdi)
    6906:	aa                   	stos   %al,%es:(%rdi)
    6907:	aa                   	stos   %al,%es:(%rdi)
    6908:	aa                   	stos   %al,%es:(%rdi)
    6909:	aa                   	stos   %al,%es:(%rdi)
    690a:	aa                   	stos   %al,%es:(%rdi)
    690b:	aa                   	stos   %al,%es:(%rdi)
    690c:	aa                   	stos   %al,%es:(%rdi)
    690d:	aa                   	stos   %al,%es:(%rdi)
    690e:	aa                   	stos   %al,%es:(%rdi)
    690f:	aa                   	stos   %al,%es:(%rdi)
    6910:	aa                   	stos   %al,%es:(%rdi)
    6911:	aa                   	stos   %al,%es:(%rdi)
    6912:	aa                   	stos   %al,%es:(%rdi)
    6913:	aa                   	stos   %al,%es:(%rdi)
    6914:	aa                   	stos   %al,%es:(%rdi)
    6915:	aa                   	stos   %al,%es:(%rdi)
    6916:	aa                   	stos   %al,%es:(%rdi)
    6917:	aa                   	stos   %al,%es:(%rdi)
    6918:	aa                   	stos   %al,%es:(%rdi)
    6919:	aa                   	stos   %al,%es:(%rdi)
    691a:	aa                   	stos   %al,%es:(%rdi)
    691b:	aa                   	stos   %al,%es:(%rdi)
    691c:	aa                   	stos   %al,%es:(%rdi)
    691d:	aa                   	stos   %al,%es:(%rdi)
    691e:	aa                   	stos   %al,%es:(%rdi)
    691f:	aa                   	stos   %al,%es:(%rdi)
    6920:	aa                   	stos   %al,%es:(%rdi)
    6921:	aa                   	stos   %al,%es:(%rdi)
    6922:	aa                   	stos   %al,%es:(%rdi)
    6923:	aa                   	stos   %al,%es:(%rdi)
    6924:	aa                   	stos   %al,%es:(%rdi)
    6925:	aa                   	stos   %al,%es:(%rdi)
    6926:	aa                   	stos   %al,%es:(%rdi)
    6927:	aa                   	stos   %al,%es:(%rdi)
    6928:	aa                   	stos   %al,%es:(%rdi)
    6929:	aa                   	stos   %al,%es:(%rdi)
    692a:	aa                   	stos   %al,%es:(%rdi)
    692b:	aa                   	stos   %al,%es:(%rdi)
    692c:	aa                   	stos   %al,%es:(%rdi)
    692d:	aa                   	stos   %al,%es:(%rdi)
    692e:	aa                   	stos   %al,%es:(%rdi)
    692f:	aa                   	stos   %al,%es:(%rdi)
    6930:	aa                   	stos   %al,%es:(%rdi)
    6931:	aa                   	stos   %al,%es:(%rdi)
    6932:	aa                   	stos   %al,%es:(%rdi)
    6933:	aa                   	stos   %al,%es:(%rdi)
    6934:	aa                   	stos   %al,%es:(%rdi)
    6935:	aa                   	stos   %al,%es:(%rdi)
    6936:	aa                   	stos   %al,%es:(%rdi)
    6937:	aa                   	stos   %al,%es:(%rdi)
    6938:	aa                   	stos   %al,%es:(%rdi)
    6939:	aa                   	stos   %al,%es:(%rdi)
    693a:	aa                   	stos   %al,%es:(%rdi)
    693b:	aa                   	stos   %al,%es:(%rdi)
    693c:	aa                   	stos   %al,%es:(%rdi)
    693d:	aa                   	stos   %al,%es:(%rdi)
    693e:	aa                   	stos   %al,%es:(%rdi)
    693f:	aa                   	stos   %al,%es:(%rdi)
    6940:	aa                   	stos   %al,%es:(%rdi)
    6941:	aa                   	stos   %al,%es:(%rdi)
    6942:	aa                   	stos   %al,%es:(%rdi)
    6943:	aa                   	stos   %al,%es:(%rdi)
    6944:	aa                   	stos   %al,%es:(%rdi)
    6945:	aa                   	stos   %al,%es:(%rdi)
    6946:	aa                   	stos   %al,%es:(%rdi)
    6947:	aa                   	stos   %al,%es:(%rdi)
    6948:	aa                   	stos   %al,%es:(%rdi)
    6949:	aa                   	stos   %al,%es:(%rdi)
    694a:	aa                   	stos   %al,%es:(%rdi)
    694b:	aa                   	stos   %al,%es:(%rdi)
    694c:	aa                   	stos   %al,%es:(%rdi)
    694d:	aa                   	stos   %al,%es:(%rdi)
    694e:	aa                   	stos   %al,%es:(%rdi)
    694f:	aa                   	stos   %al,%es:(%rdi)
    6950:	aa                   	stos   %al,%es:(%rdi)
    6951:	aa                   	stos   %al,%es:(%rdi)
    6952:	aa                   	stos   %al,%es:(%rdi)
    6953:	aa                   	stos   %al,%es:(%rdi)
    6954:	aa                   	stos   %al,%es:(%rdi)
    6955:	aa                   	stos   %al,%es:(%rdi)
    6956:	aa                   	stos   %al,%es:(%rdi)
    6957:	aa                   	stos   %al,%es:(%rdi)
    6958:	aa                   	stos   %al,%es:(%rdi)
    6959:	aa                   	stos   %al,%es:(%rdi)
    695a:	aa                   	stos   %al,%es:(%rdi)
    695b:	aa                   	stos   %al,%es:(%rdi)
    695c:	aa                   	stos   %al,%es:(%rdi)
    695d:	aa                   	stos   %al,%es:(%rdi)
    695e:	aa                   	stos   %al,%es:(%rdi)
    695f:	aa                   	stos   %al,%es:(%rdi)
    6960:	aa                   	stos   %al,%es:(%rdi)
    6961:	aa                   	stos   %al,%es:(%rdi)
    6962:	aa                   	stos   %al,%es:(%rdi)
    6963:	aa                   	stos   %al,%es:(%rdi)
    6964:	aa                   	stos   %al,%es:(%rdi)
    6965:	aa                   	stos   %al,%es:(%rdi)
    6966:	aa                   	stos   %al,%es:(%rdi)
    6967:	aa                   	stos   %al,%es:(%rdi)
    6968:	aa                   	stos   %al,%es:(%rdi)
    6969:	aa                   	stos   %al,%es:(%rdi)
    696a:	aa                   	stos   %al,%es:(%rdi)
    696b:	aa                   	stos   %al,%es:(%rdi)
    696c:	aa                   	stos   %al,%es:(%rdi)
    696d:	aa                   	stos   %al,%es:(%rdi)
    696e:	aa                   	stos   %al,%es:(%rdi)
    696f:	aa                   	stos   %al,%es:(%rdi)
    6970:	aa                   	stos   %al,%es:(%rdi)
    6971:	aa                   	stos   %al,%es:(%rdi)
    6972:	aa                   	stos   %al,%es:(%rdi)
    6973:	aa                   	stos   %al,%es:(%rdi)
    6974:	aa                   	stos   %al,%es:(%rdi)
    6975:	aa                   	stos   %al,%es:(%rdi)
    6976:	aa                   	stos   %al,%es:(%rdi)
    6977:	aa                   	stos   %al,%es:(%rdi)
    6978:	aa                   	stos   %al,%es:(%rdi)
    6979:	aa                   	stos   %al,%es:(%rdi)
    697a:	aa                   	stos   %al,%es:(%rdi)
    697b:	aa                   	stos   %al,%es:(%rdi)
    697c:	aa                   	stos   %al,%es:(%rdi)
    697d:	aa                   	stos   %al,%es:(%rdi)
    697e:	aa                   	stos   %al,%es:(%rdi)
    697f:	aa                   	stos   %al,%es:(%rdi)
    6980:	aa                   	stos   %al,%es:(%rdi)
    6981:	aa                   	stos   %al,%es:(%rdi)
    6982:	aa                   	stos   %al,%es:(%rdi)
    6983:	aa                   	stos   %al,%es:(%rdi)
    6984:	aa                   	stos   %al,%es:(%rdi)
    6985:	aa                   	stos   %al,%es:(%rdi)
    6986:	aa                   	stos   %al,%es:(%rdi)
    6987:	aa                   	stos   %al,%es:(%rdi)
    6988:	aa                   	stos   %al,%es:(%rdi)
    6989:	aa                   	stos   %al,%es:(%rdi)
    698a:	aa                   	stos   %al,%es:(%rdi)
    698b:	aa                   	stos   %al,%es:(%rdi)
    698c:	aa                   	stos   %al,%es:(%rdi)
    698d:	aa                   	stos   %al,%es:(%rdi)
    698e:	aa                   	stos   %al,%es:(%rdi)
    698f:	aa                   	stos   %al,%es:(%rdi)
    6990:	aa                   	stos   %al,%es:(%rdi)
    6991:	aa                   	stos   %al,%es:(%rdi)
    6992:	aa                   	stos   %al,%es:(%rdi)
    6993:	aa                   	stos   %al,%es:(%rdi)
    6994:	aa                   	stos   %al,%es:(%rdi)
    6995:	aa                   	stos   %al,%es:(%rdi)
    6996:	aa                   	stos   %al,%es:(%rdi)
    6997:	aa                   	stos   %al,%es:(%rdi)
    6998:	aa                   	stos   %al,%es:(%rdi)
    6999:	aa                   	stos   %al,%es:(%rdi)
    699a:	aa                   	stos   %al,%es:(%rdi)
    699b:	aa                   	stos   %al,%es:(%rdi)
    699c:	aa                   	stos   %al,%es:(%rdi)
    699d:	aa                   	stos   %al,%es:(%rdi)
    699e:	aa                   	stos   %al,%es:(%rdi)
    699f:	aa                   	stos   %al,%es:(%rdi)
    69a0:	aa                   	stos   %al,%es:(%rdi)
    69a1:	aa                   	stos   %al,%es:(%rdi)
    69a2:	aa                   	stos   %al,%es:(%rdi)
    69a3:	aa                   	stos   %al,%es:(%rdi)
    69a4:	aa                   	stos   %al,%es:(%rdi)
    69a5:	aa                   	stos   %al,%es:(%rdi)
    69a6:	aa                   	stos   %al,%es:(%rdi)
    69a7:	aa                   	stos   %al,%es:(%rdi)
    69a8:	aa                   	stos   %al,%es:(%rdi)
    69a9:	aa                   	stos   %al,%es:(%rdi)
    69aa:	aa                   	stos   %al,%es:(%rdi)
    69ab:	aa                   	stos   %al,%es:(%rdi)
    69ac:	aa                   	stos   %al,%es:(%rdi)
    69ad:	aa                   	stos   %al,%es:(%rdi)
    69ae:	aa                   	stos   %al,%es:(%rdi)
    69af:	aa                   	stos   %al,%es:(%rdi)
    69b0:	aa                   	stos   %al,%es:(%rdi)
    69b1:	aa                   	stos   %al,%es:(%rdi)
    69b2:	aa                   	stos   %al,%es:(%rdi)
    69b3:	aa                   	stos   %al,%es:(%rdi)
    69b4:	aa                   	stos   %al,%es:(%rdi)
    69b5:	aa                   	stos   %al,%es:(%rdi)
    69b6:	aa                   	stos   %al,%es:(%rdi)
    69b7:	aa                   	stos   %al,%es:(%rdi)
    69b8:	aa                   	stos   %al,%es:(%rdi)
    69b9:	aa                   	stos   %al,%es:(%rdi)
    69ba:	aa                   	stos   %al,%es:(%rdi)
    69bb:	aa                   	stos   %al,%es:(%rdi)
    69bc:	aa                   	stos   %al,%es:(%rdi)
    69bd:	aa                   	stos   %al,%es:(%rdi)
    69be:	aa                   	stos   %al,%es:(%rdi)
    69bf:	aa                   	stos   %al,%es:(%rdi)
    69c0:	aa                   	stos   %al,%es:(%rdi)
    69c1:	aa                   	stos   %al,%es:(%rdi)
    69c2:	aa                   	stos   %al,%es:(%rdi)
    69c3:	aa                   	stos   %al,%es:(%rdi)
    69c4:	aa                   	stos   %al,%es:(%rdi)
    69c5:	aa                   	stos   %al,%es:(%rdi)
    69c6:	aa                   	stos   %al,%es:(%rdi)
    69c7:	aa                   	stos   %al,%es:(%rdi)
    69c8:	aa                   	stos   %al,%es:(%rdi)
    69c9:	aa                   	stos   %al,%es:(%rdi)
    69ca:	aa                   	stos   %al,%es:(%rdi)
    69cb:	aa                   	stos   %al,%es:(%rdi)
    69cc:	aa                   	stos   %al,%es:(%rdi)
    69cd:	aa                   	stos   %al,%es:(%rdi)
    69ce:	aa                   	stos   %al,%es:(%rdi)
    69cf:	aa                   	stos   %al,%es:(%rdi)
    69d0:	aa                   	stos   %al,%es:(%rdi)
    69d1:	aa                   	stos   %al,%es:(%rdi)
    69d2:	aa                   	stos   %al,%es:(%rdi)
    69d3:	aa                   	stos   %al,%es:(%rdi)
    69d4:	aa                   	stos   %al,%es:(%rdi)
    69d5:	aa                   	stos   %al,%es:(%rdi)
    69d6:	aa                   	stos   %al,%es:(%rdi)
    69d7:	aa                   	stos   %al,%es:(%rdi)
    69d8:	aa                   	stos   %al,%es:(%rdi)
    69d9:	aa                   	stos   %al,%es:(%rdi)
    69da:	aa                   	stos   %al,%es:(%rdi)
    69db:	aa                   	stos   %al,%es:(%rdi)
    69dc:	aa                   	stos   %al,%es:(%rdi)
    69dd:	aa                   	stos   %al,%es:(%rdi)
    69de:	aa                   	stos   %al,%es:(%rdi)
    69df:	aa                   	stos   %al,%es:(%rdi)
    69e0:	aa                   	stos   %al,%es:(%rdi)
    69e1:	aa                   	stos   %al,%es:(%rdi)
    69e2:	aa                   	stos   %al,%es:(%rdi)
    69e3:	aa                   	stos   %al,%es:(%rdi)
    69e4:	aa                   	stos   %al,%es:(%rdi)
    69e5:	aa                   	stos   %al,%es:(%rdi)
    69e6:	aa                   	stos   %al,%es:(%rdi)
    69e7:	aa                   	stos   %al,%es:(%rdi)
    69e8:	aa                   	stos   %al,%es:(%rdi)
    69e9:	aa                   	stos   %al,%es:(%rdi)
    69ea:	aa                   	stos   %al,%es:(%rdi)
    69eb:	aa                   	stos   %al,%es:(%rdi)
    69ec:	aa                   	stos   %al,%es:(%rdi)
    69ed:	aa                   	stos   %al,%es:(%rdi)
    69ee:	aa                   	stos   %al,%es:(%rdi)
    69ef:	aa                   	stos   %al,%es:(%rdi)
    69f0:	aa                   	stos   %al,%es:(%rdi)
    69f1:	aa                   	stos   %al,%es:(%rdi)
    69f2:	aa                   	stos   %al,%es:(%rdi)
    69f3:	aa                   	stos   %al,%es:(%rdi)
    69f4:	aa                   	stos   %al,%es:(%rdi)
    69f5:	aa                   	stos   %al,%es:(%rdi)
    69f6:	aa                   	stos   %al,%es:(%rdi)
    69f7:	aa                   	stos   %al,%es:(%rdi)
    69f8:	aa                   	stos   %al,%es:(%rdi)
    69f9:	aa                   	stos   %al,%es:(%rdi)
    69fa:	aa                   	stos   %al,%es:(%rdi)
    69fb:	aa                   	stos   %al,%es:(%rdi)
    69fc:	aa                   	stos   %al,%es:(%rdi)
    69fd:	aa                   	stos   %al,%es:(%rdi)
    69fe:	aa                   	stos   %al,%es:(%rdi)
    69ff:	aa                   	stos   %al,%es:(%rdi)
    6a00:	aa                   	stos   %al,%es:(%rdi)
    6a01:	aa                   	stos   %al,%es:(%rdi)
    6a02:	aa                   	stos   %al,%es:(%rdi)
    6a03:	aa                   	stos   %al,%es:(%rdi)
    6a04:	aa                   	stos   %al,%es:(%rdi)
    6a05:	aa                   	stos   %al,%es:(%rdi)
    6a06:	aa                   	stos   %al,%es:(%rdi)
    6a07:	aa                   	stos   %al,%es:(%rdi)
    6a08:	aa                   	stos   %al,%es:(%rdi)
    6a09:	aa                   	stos   %al,%es:(%rdi)
    6a0a:	aa                   	stos   %al,%es:(%rdi)
    6a0b:	aa                   	stos   %al,%es:(%rdi)
    6a0c:	aa                   	stos   %al,%es:(%rdi)
    6a0d:	aa                   	stos   %al,%es:(%rdi)
    6a0e:	aa                   	stos   %al,%es:(%rdi)
    6a0f:	aa                   	stos   %al,%es:(%rdi)
    6a10:	aa                   	stos   %al,%es:(%rdi)
    6a11:	aa                   	stos   %al,%es:(%rdi)
    6a12:	aa                   	stos   %al,%es:(%rdi)
    6a13:	aa                   	stos   %al,%es:(%rdi)
    6a14:	aa                   	stos   %al,%es:(%rdi)
    6a15:	aa                   	stos   %al,%es:(%rdi)
    6a16:	aa                   	stos   %al,%es:(%rdi)
    6a17:	aa                   	stos   %al,%es:(%rdi)
    6a18:	aa                   	stos   %al,%es:(%rdi)
    6a19:	aa                   	stos   %al,%es:(%rdi)
    6a1a:	aa                   	stos   %al,%es:(%rdi)
    6a1b:	aa                   	stos   %al,%es:(%rdi)
    6a1c:	aa                   	stos   %al,%es:(%rdi)
    6a1d:	aa                   	stos   %al,%es:(%rdi)
    6a1e:	aa                   	stos   %al,%es:(%rdi)
    6a1f:	aa                   	stos   %al,%es:(%rdi)
    6a20:	aa                   	stos   %al,%es:(%rdi)
    6a21:	aa                   	stos   %al,%es:(%rdi)
    6a22:	aa                   	stos   %al,%es:(%rdi)
    6a23:	aa                   	stos   %al,%es:(%rdi)
    6a24:	aa                   	stos   %al,%es:(%rdi)
    6a25:	aa                   	stos   %al,%es:(%rdi)
    6a26:	aa                   	stos   %al,%es:(%rdi)
    6a27:	aa                   	stos   %al,%es:(%rdi)
    6a28:	aa                   	stos   %al,%es:(%rdi)
    6a29:	aa                   	stos   %al,%es:(%rdi)
    6a2a:	aa                   	stos   %al,%es:(%rdi)
    6a2b:	aa                   	stos   %al,%es:(%rdi)
    6a2c:	aa                   	stos   %al,%es:(%rdi)
    6a2d:	aa                   	stos   %al,%es:(%rdi)
    6a2e:	aa                   	stos   %al,%es:(%rdi)
    6a2f:	aa                   	stos   %al,%es:(%rdi)
    6a30:	aa                   	stos   %al,%es:(%rdi)
    6a31:	aa                   	stos   %al,%es:(%rdi)
    6a32:	aa                   	stos   %al,%es:(%rdi)
    6a33:	aa                   	stos   %al,%es:(%rdi)
    6a34:	aa                   	stos   %al,%es:(%rdi)
    6a35:	aa                   	stos   %al,%es:(%rdi)
    6a36:	aa                   	stos   %al,%es:(%rdi)
    6a37:	aa                   	stos   %al,%es:(%rdi)
    6a38:	aa                   	stos   %al,%es:(%rdi)
    6a39:	aa                   	stos   %al,%es:(%rdi)
    6a3a:	aa                   	stos   %al,%es:(%rdi)
    6a3b:	aa                   	stos   %al,%es:(%rdi)
    6a3c:	aa                   	stos   %al,%es:(%rdi)
    6a3d:	aa                   	stos   %al,%es:(%rdi)
    6a3e:	aa                   	stos   %al,%es:(%rdi)
    6a3f:	aa                   	stos   %al,%es:(%rdi)
    6a40:	aa                   	stos   %al,%es:(%rdi)
    6a41:	aa                   	stos   %al,%es:(%rdi)
    6a42:	aa                   	stos   %al,%es:(%rdi)
    6a43:	aa                   	stos   %al,%es:(%rdi)
    6a44:	aa                   	stos   %al,%es:(%rdi)
    6a45:	aa                   	stos   %al,%es:(%rdi)
    6a46:	aa                   	stos   %al,%es:(%rdi)
    6a47:	aa                   	stos   %al,%es:(%rdi)
    6a48:	aa                   	stos   %al,%es:(%rdi)
    6a49:	aa                   	stos   %al,%es:(%rdi)
    6a4a:	aa                   	stos   %al,%es:(%rdi)
    6a4b:	aa                   	stos   %al,%es:(%rdi)
    6a4c:	aa                   	stos   %al,%es:(%rdi)
    6a4d:	aa                   	stos   %al,%es:(%rdi)
    6a4e:	aa                   	stos   %al,%es:(%rdi)
    6a4f:	aa                   	stos   %al,%es:(%rdi)
    6a50:	aa                   	stos   %al,%es:(%rdi)
    6a51:	aa                   	stos   %al,%es:(%rdi)
    6a52:	aa                   	stos   %al,%es:(%rdi)
    6a53:	aa                   	stos   %al,%es:(%rdi)
    6a54:	aa                   	stos   %al,%es:(%rdi)
    6a55:	aa                   	stos   %al,%es:(%rdi)
    6a56:	aa                   	stos   %al,%es:(%rdi)
    6a57:	aa                   	stos   %al,%es:(%rdi)
    6a58:	aa                   	stos   %al,%es:(%rdi)
    6a59:	aa                   	stos   %al,%es:(%rdi)
    6a5a:	aa                   	stos   %al,%es:(%rdi)
    6a5b:	aa                   	stos   %al,%es:(%rdi)
    6a5c:	aa                   	stos   %al,%es:(%rdi)
    6a5d:	aa                   	stos   %al,%es:(%rdi)
    6a5e:	aa                   	stos   %al,%es:(%rdi)
    6a5f:	aa                   	stos   %al,%es:(%rdi)
    6a60:	aa                   	stos   %al,%es:(%rdi)
    6a61:	aa                   	stos   %al,%es:(%rdi)
    6a62:	aa                   	stos   %al,%es:(%rdi)
    6a63:	aa                   	stos   %al,%es:(%rdi)
    6a64:	aa                   	stos   %al,%es:(%rdi)
    6a65:	aa                   	stos   %al,%es:(%rdi)
    6a66:	aa                   	stos   %al,%es:(%rdi)
    6a67:	aa                   	stos   %al,%es:(%rdi)
    6a68:	aa                   	stos   %al,%es:(%rdi)
    6a69:	aa                   	stos   %al,%es:(%rdi)
    6a6a:	aa                   	stos   %al,%es:(%rdi)
    6a6b:	aa                   	stos   %al,%es:(%rdi)
    6a6c:	aa                   	stos   %al,%es:(%rdi)
    6a6d:	aa                   	stos   %al,%es:(%rdi)
    6a6e:	aa                   	stos   %al,%es:(%rdi)
    6a6f:	aa                   	stos   %al,%es:(%rdi)
    6a70:	aa                   	stos   %al,%es:(%rdi)
    6a71:	aa                   	stos   %al,%es:(%rdi)
    6a72:	aa                   	stos   %al,%es:(%rdi)
    6a73:	aa                   	stos   %al,%es:(%rdi)
    6a74:	aa                   	stos   %al,%es:(%rdi)
    6a75:	aa                   	stos   %al,%es:(%rdi)
    6a76:	aa                   	stos   %al,%es:(%rdi)
    6a77:	aa                   	stos   %al,%es:(%rdi)
    6a78:	aa                   	stos   %al,%es:(%rdi)
    6a79:	aa                   	stos   %al,%es:(%rdi)
    6a7a:	aa                   	stos   %al,%es:(%rdi)
    6a7b:	aa                   	stos   %al,%es:(%rdi)
    6a7c:	aa                   	stos   %al,%es:(%rdi)
    6a7d:	aa                   	stos   %al,%es:(%rdi)
    6a7e:	aa                   	stos   %al,%es:(%rdi)
    6a7f:	aa                   	stos   %al,%es:(%rdi)
    6a80:	aa                   	stos   %al,%es:(%rdi)
    6a81:	aa                   	stos   %al,%es:(%rdi)
    6a82:	aa                   	stos   %al,%es:(%rdi)
    6a83:	aa                   	stos   %al,%es:(%rdi)
    6a84:	aa                   	stos   %al,%es:(%rdi)
    6a85:	aa                   	stos   %al,%es:(%rdi)
    6a86:	aa                   	stos   %al,%es:(%rdi)
    6a87:	aa                   	stos   %al,%es:(%rdi)
    6a88:	aa                   	stos   %al,%es:(%rdi)
    6a89:	aa                   	stos   %al,%es:(%rdi)
    6a8a:	aa                   	stos   %al,%es:(%rdi)
    6a8b:	aa                   	stos   %al,%es:(%rdi)
    6a8c:	aa                   	stos   %al,%es:(%rdi)
    6a8d:	aa                   	stos   %al,%es:(%rdi)
    6a8e:	aa                   	stos   %al,%es:(%rdi)
    6a8f:	aa                   	stos   %al,%es:(%rdi)
    6a90:	aa                   	stos   %al,%es:(%rdi)
    6a91:	aa                   	stos   %al,%es:(%rdi)
    6a92:	aa                   	stos   %al,%es:(%rdi)
    6a93:	aa                   	stos   %al,%es:(%rdi)
    6a94:	aa                   	stos   %al,%es:(%rdi)
    6a95:	aa                   	stos   %al,%es:(%rdi)
    6a96:	aa                   	stos   %al,%es:(%rdi)
    6a97:	aa                   	stos   %al,%es:(%rdi)
    6a98:	aa                   	stos   %al,%es:(%rdi)
    6a99:	aa                   	stos   %al,%es:(%rdi)
    6a9a:	aa                   	stos   %al,%es:(%rdi)
    6a9b:	aa                   	stos   %al,%es:(%rdi)
    6a9c:	aa                   	stos   %al,%es:(%rdi)
    6a9d:	aa                   	stos   %al,%es:(%rdi)
    6a9e:	aa                   	stos   %al,%es:(%rdi)
    6a9f:	aa                   	stos   %al,%es:(%rdi)
    6aa0:	aa                   	stos   %al,%es:(%rdi)
    6aa1:	aa                   	stos   %al,%es:(%rdi)
    6aa2:	aa                   	stos   %al,%es:(%rdi)
    6aa3:	aa                   	stos   %al,%es:(%rdi)
    6aa4:	aa                   	stos   %al,%es:(%rdi)
    6aa5:	aa                   	stos   %al,%es:(%rdi)
    6aa6:	aa                   	stos   %al,%es:(%rdi)
    6aa7:	aa                   	stos   %al,%es:(%rdi)
    6aa8:	aa                   	stos   %al,%es:(%rdi)
    6aa9:	aa                   	stos   %al,%es:(%rdi)
    6aaa:	aa                   	stos   %al,%es:(%rdi)
    6aab:	aa                   	stos   %al,%es:(%rdi)
    6aac:	aa                   	stos   %al,%es:(%rdi)
    6aad:	aa                   	stos   %al,%es:(%rdi)
    6aae:	aa                   	stos   %al,%es:(%rdi)
    6aaf:	aa                   	stos   %al,%es:(%rdi)
    6ab0:	aa                   	stos   %al,%es:(%rdi)
    6ab1:	aa                   	stos   %al,%es:(%rdi)
    6ab2:	aa                   	stos   %al,%es:(%rdi)
    6ab3:	aa                   	stos   %al,%es:(%rdi)
    6ab4:	aa                   	stos   %al,%es:(%rdi)
    6ab5:	aa                   	stos   %al,%es:(%rdi)
    6ab6:	aa                   	stos   %al,%es:(%rdi)
    6ab7:	aa                   	stos   %al,%es:(%rdi)
    6ab8:	aa                   	stos   %al,%es:(%rdi)
    6ab9:	aa                   	stos   %al,%es:(%rdi)
    6aba:	aa                   	stos   %al,%es:(%rdi)
    6abb:	aa                   	stos   %al,%es:(%rdi)
    6abc:	aa                   	stos   %al,%es:(%rdi)
    6abd:	aa                   	stos   %al,%es:(%rdi)
    6abe:	aa                   	stos   %al,%es:(%rdi)
    6abf:	aa                   	stos   %al,%es:(%rdi)
    6ac0:	aa                   	stos   %al,%es:(%rdi)
    6ac1:	aa                   	stos   %al,%es:(%rdi)
    6ac2:	aa                   	stos   %al,%es:(%rdi)
    6ac3:	aa                   	stos   %al,%es:(%rdi)
    6ac4:	aa                   	stos   %al,%es:(%rdi)
    6ac5:	aa                   	stos   %al,%es:(%rdi)
    6ac6:	aa                   	stos   %al,%es:(%rdi)
    6ac7:	aa                   	stos   %al,%es:(%rdi)
    6ac8:	aa                   	stos   %al,%es:(%rdi)
    6ac9:	aa                   	stos   %al,%es:(%rdi)
    6aca:	aa                   	stos   %al,%es:(%rdi)
    6acb:	aa                   	stos   %al,%es:(%rdi)
    6acc:	aa                   	stos   %al,%es:(%rdi)
    6acd:	aa                   	stos   %al,%es:(%rdi)
    6ace:	aa                   	stos   %al,%es:(%rdi)
    6acf:	aa                   	stos   %al,%es:(%rdi)
    6ad0:	aa                   	stos   %al,%es:(%rdi)
    6ad1:	aa                   	stos   %al,%es:(%rdi)
    6ad2:	aa                   	stos   %al,%es:(%rdi)
    6ad3:	aa                   	stos   %al,%es:(%rdi)
    6ad4:	aa                   	stos   %al,%es:(%rdi)
    6ad5:	aa                   	stos   %al,%es:(%rdi)
    6ad6:	aa                   	stos   %al,%es:(%rdi)
    6ad7:	aa                   	stos   %al,%es:(%rdi)
    6ad8:	aa                   	stos   %al,%es:(%rdi)
    6ad9:	aa                   	stos   %al,%es:(%rdi)
    6ada:	aa                   	stos   %al,%es:(%rdi)
    6adb:	aa                   	stos   %al,%es:(%rdi)
    6adc:	aa                   	stos   %al,%es:(%rdi)
    6add:	aa                   	stos   %al,%es:(%rdi)
    6ade:	aa                   	stos   %al,%es:(%rdi)
    6adf:	aa                   	stos   %al,%es:(%rdi)
    6ae0:	aa                   	stos   %al,%es:(%rdi)
    6ae1:	aa                   	stos   %al,%es:(%rdi)
    6ae2:	aa                   	stos   %al,%es:(%rdi)
    6ae3:	aa                   	stos   %al,%es:(%rdi)
    6ae4:	aa                   	stos   %al,%es:(%rdi)
    6ae5:	aa                   	stos   %al,%es:(%rdi)
    6ae6:	aa                   	stos   %al,%es:(%rdi)
    6ae7:	aa                   	stos   %al,%es:(%rdi)
    6ae8:	aa                   	stos   %al,%es:(%rdi)
    6ae9:	aa                   	stos   %al,%es:(%rdi)
    6aea:	aa                   	stos   %al,%es:(%rdi)
    6aeb:	aa                   	stos   %al,%es:(%rdi)
    6aec:	aa                   	stos   %al,%es:(%rdi)
    6aed:	aa                   	stos   %al,%es:(%rdi)
    6aee:	aa                   	stos   %al,%es:(%rdi)
    6aef:	aa                   	stos   %al,%es:(%rdi)
    6af0:	aa                   	stos   %al,%es:(%rdi)
    6af1:	aa                   	stos   %al,%es:(%rdi)
    6af2:	aa                   	stos   %al,%es:(%rdi)
    6af3:	aa                   	stos   %al,%es:(%rdi)
    6af4:	aa                   	stos   %al,%es:(%rdi)
    6af5:	aa                   	stos   %al,%es:(%rdi)
    6af6:	aa                   	stos   %al,%es:(%rdi)
    6af7:	aa                   	stos   %al,%es:(%rdi)
    6af8:	aa                   	stos   %al,%es:(%rdi)
    6af9:	aa                   	stos   %al,%es:(%rdi)
    6afa:	aa                   	stos   %al,%es:(%rdi)
    6afb:	aa                   	stos   %al,%es:(%rdi)
    6afc:	aa                   	stos   %al,%es:(%rdi)
    6afd:	aa                   	stos   %al,%es:(%rdi)
    6afe:	aa                   	stos   %al,%es:(%rdi)
    6aff:	aa                   	stos   %al,%es:(%rdi)
    6b00:	aa                   	stos   %al,%es:(%rdi)
    6b01:	aa                   	stos   %al,%es:(%rdi)
    6b02:	aa                   	stos   %al,%es:(%rdi)
    6b03:	aa                   	stos   %al,%es:(%rdi)
    6b04:	aa                   	stos   %al,%es:(%rdi)
    6b05:	aa                   	stos   %al,%es:(%rdi)
    6b06:	aa                   	stos   %al,%es:(%rdi)
    6b07:	aa                   	stos   %al,%es:(%rdi)
    6b08:	aa                   	stos   %al,%es:(%rdi)
    6b09:	aa                   	stos   %al,%es:(%rdi)
    6b0a:	aa                   	stos   %al,%es:(%rdi)
    6b0b:	aa                   	stos   %al,%es:(%rdi)
    6b0c:	aa                   	stos   %al,%es:(%rdi)
    6b0d:	aa                   	stos   %al,%es:(%rdi)
    6b0e:	aa                   	stos   %al,%es:(%rdi)
    6b0f:	aa                   	stos   %al,%es:(%rdi)
    6b10:	aa                   	stos   %al,%es:(%rdi)
    6b11:	aa                   	stos   %al,%es:(%rdi)
    6b12:	aa                   	stos   %al,%es:(%rdi)
    6b13:	aa                   	stos   %al,%es:(%rdi)
    6b14:	aa                   	stos   %al,%es:(%rdi)
    6b15:	aa                   	stos   %al,%es:(%rdi)
    6b16:	aa                   	stos   %al,%es:(%rdi)
    6b17:	aa                   	stos   %al,%es:(%rdi)
    6b18:	aa                   	stos   %al,%es:(%rdi)
    6b19:	aa                   	stos   %al,%es:(%rdi)
    6b1a:	aa                   	stos   %al,%es:(%rdi)
    6b1b:	aa                   	stos   %al,%es:(%rdi)
    6b1c:	aa                   	stos   %al,%es:(%rdi)
    6b1d:	aa                   	stos   %al,%es:(%rdi)
    6b1e:	aa                   	stos   %al,%es:(%rdi)
    6b1f:	aa                   	stos   %al,%es:(%rdi)
    6b20:	aa                   	stos   %al,%es:(%rdi)
    6b21:	aa                   	stos   %al,%es:(%rdi)
    6b22:	aa                   	stos   %al,%es:(%rdi)
    6b23:	aa                   	stos   %al,%es:(%rdi)
    6b24:	aa                   	stos   %al,%es:(%rdi)
    6b25:	aa                   	stos   %al,%es:(%rdi)
    6b26:	aa                   	stos   %al,%es:(%rdi)
    6b27:	aa                   	stos   %al,%es:(%rdi)
    6b28:	aa                   	stos   %al,%es:(%rdi)
    6b29:	aa                   	stos   %al,%es:(%rdi)
    6b2a:	aa                   	stos   %al,%es:(%rdi)
    6b2b:	aa                   	stos   %al,%es:(%rdi)
    6b2c:	aa                   	stos   %al,%es:(%rdi)
    6b2d:	aa                   	stos   %al,%es:(%rdi)
    6b2e:	aa                   	stos   %al,%es:(%rdi)
    6b2f:	aa                   	stos   %al,%es:(%rdi)
    6b30:	aa                   	stos   %al,%es:(%rdi)
    6b31:	aa                   	stos   %al,%es:(%rdi)
    6b32:	aa                   	stos   %al,%es:(%rdi)
    6b33:	aa                   	stos   %al,%es:(%rdi)
    6b34:	aa                   	stos   %al,%es:(%rdi)
    6b35:	aa                   	stos   %al,%es:(%rdi)
    6b36:	aa                   	stos   %al,%es:(%rdi)
    6b37:	aa                   	stos   %al,%es:(%rdi)
    6b38:	aa                   	stos   %al,%es:(%rdi)
    6b39:	aa                   	stos   %al,%es:(%rdi)
    6b3a:	aa                   	stos   %al,%es:(%rdi)
    6b3b:	aa                   	stos   %al,%es:(%rdi)
    6b3c:	aa                   	stos   %al,%es:(%rdi)
    6b3d:	aa                   	stos   %al,%es:(%rdi)
    6b3e:	aa                   	stos   %al,%es:(%rdi)
    6b3f:	aa                   	stos   %al,%es:(%rdi)
    6b40:	aa                   	stos   %al,%es:(%rdi)
    6b41:	aa                   	stos   %al,%es:(%rdi)
    6b42:	aa                   	stos   %al,%es:(%rdi)
    6b43:	aa                   	stos   %al,%es:(%rdi)
    6b44:	aa                   	stos   %al,%es:(%rdi)
    6b45:	aa                   	stos   %al,%es:(%rdi)
    6b46:	aa                   	stos   %al,%es:(%rdi)
    6b47:	aa                   	stos   %al,%es:(%rdi)
    6b48:	aa                   	stos   %al,%es:(%rdi)
    6b49:	aa                   	stos   %al,%es:(%rdi)
    6b4a:	aa                   	stos   %al,%es:(%rdi)
    6b4b:	aa                   	stos   %al,%es:(%rdi)
    6b4c:	aa                   	stos   %al,%es:(%rdi)
    6b4d:	aa                   	stos   %al,%es:(%rdi)
    6b4e:	aa                   	stos   %al,%es:(%rdi)
    6b4f:	aa                   	stos   %al,%es:(%rdi)
    6b50:	aa                   	stos   %al,%es:(%rdi)
    6b51:	aa                   	stos   %al,%es:(%rdi)
    6b52:	aa                   	stos   %al,%es:(%rdi)
    6b53:	aa                   	stos   %al,%es:(%rdi)
    6b54:	aa                   	stos   %al,%es:(%rdi)
    6b55:	aa                   	stos   %al,%es:(%rdi)
    6b56:	aa                   	stos   %al,%es:(%rdi)
    6b57:	aa                   	stos   %al,%es:(%rdi)
    6b58:	aa                   	stos   %al,%es:(%rdi)
    6b59:	aa                   	stos   %al,%es:(%rdi)
    6b5a:	aa                   	stos   %al,%es:(%rdi)
    6b5b:	aa                   	stos   %al,%es:(%rdi)
    6b5c:	aa                   	stos   %al,%es:(%rdi)
    6b5d:	aa                   	stos   %al,%es:(%rdi)
    6b5e:	aa                   	stos   %al,%es:(%rdi)
    6b5f:	aa                   	stos   %al,%es:(%rdi)
    6b60:	aa                   	stos   %al,%es:(%rdi)
    6b61:	aa                   	stos   %al,%es:(%rdi)
    6b62:	aa                   	stos   %al,%es:(%rdi)
    6b63:	aa                   	stos   %al,%es:(%rdi)
    6b64:	aa                   	stos   %al,%es:(%rdi)
    6b65:	aa                   	stos   %al,%es:(%rdi)
    6b66:	aa                   	stos   %al,%es:(%rdi)
    6b67:	aa                   	stos   %al,%es:(%rdi)
    6b68:	aa                   	stos   %al,%es:(%rdi)
    6b69:	aa                   	stos   %al,%es:(%rdi)
    6b6a:	aa                   	stos   %al,%es:(%rdi)
    6b6b:	aa                   	stos   %al,%es:(%rdi)
    6b6c:	aa                   	stos   %al,%es:(%rdi)
    6b6d:	aa                   	stos   %al,%es:(%rdi)
    6b6e:	aa                   	stos   %al,%es:(%rdi)
    6b6f:	aa                   	stos   %al,%es:(%rdi)
    6b70:	aa                   	stos   %al,%es:(%rdi)
    6b71:	aa                   	stos   %al,%es:(%rdi)
    6b72:	aa                   	stos   %al,%es:(%rdi)
    6b73:	aa                   	stos   %al,%es:(%rdi)
    6b74:	aa                   	stos   %al,%es:(%rdi)
    6b75:	aa                   	stos   %al,%es:(%rdi)
    6b76:	aa                   	stos   %al,%es:(%rdi)
    6b77:	aa                   	stos   %al,%es:(%rdi)
    6b78:	aa                   	stos   %al,%es:(%rdi)
    6b79:	aa                   	stos   %al,%es:(%rdi)
    6b7a:	aa                   	stos   %al,%es:(%rdi)
    6b7b:	aa                   	stos   %al,%es:(%rdi)
    6b7c:	aa                   	stos   %al,%es:(%rdi)
    6b7d:	aa                   	stos   %al,%es:(%rdi)
    6b7e:	aa                   	stos   %al,%es:(%rdi)
    6b7f:	aa                   	stos   %al,%es:(%rdi)
    6b80:	aa                   	stos   %al,%es:(%rdi)
    6b81:	aa                   	stos   %al,%es:(%rdi)
    6b82:	aa                   	stos   %al,%es:(%rdi)
    6b83:	aa                   	stos   %al,%es:(%rdi)
    6b84:	aa                   	stos   %al,%es:(%rdi)
    6b85:	aa                   	stos   %al,%es:(%rdi)
    6b86:	aa                   	stos   %al,%es:(%rdi)
    6b87:	aa                   	stos   %al,%es:(%rdi)
    6b88:	aa                   	stos   %al,%es:(%rdi)
    6b89:	aa                   	stos   %al,%es:(%rdi)
    6b8a:	aa                   	stos   %al,%es:(%rdi)
    6b8b:	aa                   	stos   %al,%es:(%rdi)
    6b8c:	aa                   	stos   %al,%es:(%rdi)
    6b8d:	aa                   	stos   %al,%es:(%rdi)
    6b8e:	aa                   	stos   %al,%es:(%rdi)
    6b8f:	aa                   	stos   %al,%es:(%rdi)
    6b90:	aa                   	stos   %al,%es:(%rdi)
    6b91:	aa                   	stos   %al,%es:(%rdi)
    6b92:	aa                   	stos   %al,%es:(%rdi)
    6b93:	aa                   	stos   %al,%es:(%rdi)
    6b94:	aa                   	stos   %al,%es:(%rdi)
    6b95:	aa                   	stos   %al,%es:(%rdi)
    6b96:	aa                   	stos   %al,%es:(%rdi)
    6b97:	aa                   	stos   %al,%es:(%rdi)
    6b98:	aa                   	stos   %al,%es:(%rdi)
    6b99:	aa                   	stos   %al,%es:(%rdi)
    6b9a:	aa                   	stos   %al,%es:(%rdi)
    6b9b:	aa                   	stos   %al,%es:(%rdi)
    6b9c:	aa                   	stos   %al,%es:(%rdi)
    6b9d:	aa                   	stos   %al,%es:(%rdi)
    6b9e:	aa                   	stos   %al,%es:(%rdi)
    6b9f:	aa                   	stos   %al,%es:(%rdi)
    6ba0:	aa                   	stos   %al,%es:(%rdi)
    6ba1:	aa                   	stos   %al,%es:(%rdi)
    6ba2:	aa                   	stos   %al,%es:(%rdi)
    6ba3:	aa                   	stos   %al,%es:(%rdi)
    6ba4:	aa                   	stos   %al,%es:(%rdi)
    6ba5:	aa                   	stos   %al,%es:(%rdi)
    6ba6:	aa                   	stos   %al,%es:(%rdi)
    6ba7:	aa                   	stos   %al,%es:(%rdi)
    6ba8:	aa                   	stos   %al,%es:(%rdi)
    6ba9:	aa                   	stos   %al,%es:(%rdi)
    6baa:	aa                   	stos   %al,%es:(%rdi)
    6bab:	aa                   	stos   %al,%es:(%rdi)
    6bac:	aa                   	stos   %al,%es:(%rdi)
    6bad:	aa                   	stos   %al,%es:(%rdi)
    6bae:	aa                   	stos   %al,%es:(%rdi)
    6baf:	aa                   	stos   %al,%es:(%rdi)
    6bb0:	aa                   	stos   %al,%es:(%rdi)
    6bb1:	aa                   	stos   %al,%es:(%rdi)
    6bb2:	aa                   	stos   %al,%es:(%rdi)
    6bb3:	aa                   	stos   %al,%es:(%rdi)
    6bb4:	aa                   	stos   %al,%es:(%rdi)
    6bb5:	aa                   	stos   %al,%es:(%rdi)
    6bb6:	aa                   	stos   %al,%es:(%rdi)
    6bb7:	aa                   	stos   %al,%es:(%rdi)
    6bb8:	aa                   	stos   %al,%es:(%rdi)
    6bb9:	aa                   	stos   %al,%es:(%rdi)
    6bba:	aa                   	stos   %al,%es:(%rdi)
    6bbb:	aa                   	stos   %al,%es:(%rdi)
    6bbc:	aa                   	stos   %al,%es:(%rdi)
    6bbd:	aa                   	stos   %al,%es:(%rdi)
    6bbe:	aa                   	stos   %al,%es:(%rdi)
    6bbf:	aa                   	stos   %al,%es:(%rdi)
    6bc0:	aa                   	stos   %al,%es:(%rdi)
    6bc1:	aa                   	stos   %al,%es:(%rdi)
    6bc2:	aa                   	stos   %al,%es:(%rdi)
    6bc3:	aa                   	stos   %al,%es:(%rdi)
    6bc4:	aa                   	stos   %al,%es:(%rdi)
    6bc5:	aa                   	stos   %al,%es:(%rdi)
    6bc6:	aa                   	stos   %al,%es:(%rdi)
    6bc7:	aa                   	stos   %al,%es:(%rdi)
    6bc8:	aa                   	stos   %al,%es:(%rdi)
    6bc9:	aa                   	stos   %al,%es:(%rdi)
    6bca:	aa                   	stos   %al,%es:(%rdi)
    6bcb:	aa                   	stos   %al,%es:(%rdi)
    6bcc:	aa                   	stos   %al,%es:(%rdi)
    6bcd:	aa                   	stos   %al,%es:(%rdi)
    6bce:	aa                   	stos   %al,%es:(%rdi)
    6bcf:	aa                   	stos   %al,%es:(%rdi)
    6bd0:	aa                   	stos   %al,%es:(%rdi)
    6bd1:	aa                   	stos   %al,%es:(%rdi)
    6bd2:	aa                   	stos   %al,%es:(%rdi)
    6bd3:	aa                   	stos   %al,%es:(%rdi)
    6bd4:	aa                   	stos   %al,%es:(%rdi)
    6bd5:	aa                   	stos   %al,%es:(%rdi)
    6bd6:	aa                   	stos   %al,%es:(%rdi)
    6bd7:	aa                   	stos   %al,%es:(%rdi)
    6bd8:	aa                   	stos   %al,%es:(%rdi)
    6bd9:	aa                   	stos   %al,%es:(%rdi)
    6bda:	aa                   	stos   %al,%es:(%rdi)
    6bdb:	aa                   	stos   %al,%es:(%rdi)
    6bdc:	aa                   	stos   %al,%es:(%rdi)
    6bdd:	aa                   	stos   %al,%es:(%rdi)
    6bde:	aa                   	stos   %al,%es:(%rdi)
    6bdf:	aa                   	stos   %al,%es:(%rdi)
    6be0:	aa                   	stos   %al,%es:(%rdi)
    6be1:	aa                   	stos   %al,%es:(%rdi)
    6be2:	aa                   	stos   %al,%es:(%rdi)
    6be3:	aa                   	stos   %al,%es:(%rdi)
    6be4:	aa                   	stos   %al,%es:(%rdi)
    6be5:	aa                   	stos   %al,%es:(%rdi)
    6be6:	aa                   	stos   %al,%es:(%rdi)
    6be7:	aa                   	stos   %al,%es:(%rdi)
    6be8:	aa                   	stos   %al,%es:(%rdi)
    6be9:	aa                   	stos   %al,%es:(%rdi)
    6bea:	aa                   	stos   %al,%es:(%rdi)
    6beb:	aa                   	stos   %al,%es:(%rdi)
    6bec:	aa                   	stos   %al,%es:(%rdi)
    6bed:	aa                   	stos   %al,%es:(%rdi)
    6bee:	aa                   	stos   %al,%es:(%rdi)
    6bef:	aa                   	stos   %al,%es:(%rdi)
    6bf0:	aa                   	stos   %al,%es:(%rdi)
    6bf1:	aa                   	stos   %al,%es:(%rdi)
    6bf2:	aa                   	stos   %al,%es:(%rdi)
    6bf3:	aa                   	stos   %al,%es:(%rdi)
    6bf4:	aa                   	stos   %al,%es:(%rdi)
    6bf5:	aa                   	stos   %al,%es:(%rdi)
    6bf6:	aa                   	stos   %al,%es:(%rdi)
    6bf7:	aa                   	stos   %al,%es:(%rdi)
    6bf8:	aa                   	stos   %al,%es:(%rdi)
    6bf9:	aa                   	stos   %al,%es:(%rdi)
    6bfa:	aa                   	stos   %al,%es:(%rdi)
    6bfb:	aa                   	stos   %al,%es:(%rdi)
    6bfc:	aa                   	stos   %al,%es:(%rdi)
    6bfd:	aa                   	stos   %al,%es:(%rdi)
    6bfe:	aa                   	stos   %al,%es:(%rdi)
    6bff:	aa                   	stos   %al,%es:(%rdi)
    6c00:	aa                   	stos   %al,%es:(%rdi)
    6c01:	aa                   	stos   %al,%es:(%rdi)
    6c02:	aa                   	stos   %al,%es:(%rdi)
    6c03:	aa                   	stos   %al,%es:(%rdi)
    6c04:	aa                   	stos   %al,%es:(%rdi)
    6c05:	aa                   	stos   %al,%es:(%rdi)
    6c06:	aa                   	stos   %al,%es:(%rdi)
    6c07:	aa                   	stos   %al,%es:(%rdi)
    6c08:	aa                   	stos   %al,%es:(%rdi)
    6c09:	aa                   	stos   %al,%es:(%rdi)
    6c0a:	aa                   	stos   %al,%es:(%rdi)
    6c0b:	aa                   	stos   %al,%es:(%rdi)
    6c0c:	aa                   	stos   %al,%es:(%rdi)
    6c0d:	aa                   	stos   %al,%es:(%rdi)
    6c0e:	aa                   	stos   %al,%es:(%rdi)
    6c0f:	aa                   	stos   %al,%es:(%rdi)
    6c10:	aa                   	stos   %al,%es:(%rdi)
    6c11:	aa                   	stos   %al,%es:(%rdi)
    6c12:	aa                   	stos   %al,%es:(%rdi)
    6c13:	aa                   	stos   %al,%es:(%rdi)
    6c14:	aa                   	stos   %al,%es:(%rdi)
    6c15:	aa                   	stos   %al,%es:(%rdi)
    6c16:	aa                   	stos   %al,%es:(%rdi)
    6c17:	aa                   	stos   %al,%es:(%rdi)
    6c18:	aa                   	stos   %al,%es:(%rdi)
    6c19:	aa                   	stos   %al,%es:(%rdi)
    6c1a:	aa                   	stos   %al,%es:(%rdi)
    6c1b:	aa                   	stos   %al,%es:(%rdi)
    6c1c:	aa                   	stos   %al,%es:(%rdi)
    6c1d:	aa                   	stos   %al,%es:(%rdi)
    6c1e:	aa                   	stos   %al,%es:(%rdi)
    6c1f:	aa                   	stos   %al,%es:(%rdi)
    6c20:	aa                   	stos   %al,%es:(%rdi)
    6c21:	aa                   	stos   %al,%es:(%rdi)
    6c22:	aa                   	stos   %al,%es:(%rdi)
    6c23:	aa                   	stos   %al,%es:(%rdi)
    6c24:	aa                   	stos   %al,%es:(%rdi)
    6c25:	aa                   	stos   %al,%es:(%rdi)
    6c26:	aa                   	stos   %al,%es:(%rdi)
    6c27:	aa                   	stos   %al,%es:(%rdi)
    6c28:	aa                   	stos   %al,%es:(%rdi)
    6c29:	aa                   	stos   %al,%es:(%rdi)
    6c2a:	aa                   	stos   %al,%es:(%rdi)
    6c2b:	aa                   	stos   %al,%es:(%rdi)
    6c2c:	aa                   	stos   %al,%es:(%rdi)
    6c2d:	aa                   	stos   %al,%es:(%rdi)
    6c2e:	aa                   	stos   %al,%es:(%rdi)
    6c2f:	aa                   	stos   %al,%es:(%rdi)
    6c30:	aa                   	stos   %al,%es:(%rdi)
    6c31:	aa                   	stos   %al,%es:(%rdi)
    6c32:	aa                   	stos   %al,%es:(%rdi)
    6c33:	aa                   	stos   %al,%es:(%rdi)
    6c34:	aa                   	stos   %al,%es:(%rdi)
    6c35:	aa                   	stos   %al,%es:(%rdi)
    6c36:	aa                   	stos   %al,%es:(%rdi)
    6c37:	aa                   	stos   %al,%es:(%rdi)
    6c38:	aa                   	stos   %al,%es:(%rdi)
    6c39:	aa                   	stos   %al,%es:(%rdi)
    6c3a:	aa                   	stos   %al,%es:(%rdi)
    6c3b:	aa                   	stos   %al,%es:(%rdi)
    6c3c:	aa                   	stos   %al,%es:(%rdi)
    6c3d:	aa                   	stos   %al,%es:(%rdi)
    6c3e:	aa                   	stos   %al,%es:(%rdi)
    6c3f:	aa                   	stos   %al,%es:(%rdi)
    6c40:	aa                   	stos   %al,%es:(%rdi)
    6c41:	aa                   	stos   %al,%es:(%rdi)
    6c42:	aa                   	stos   %al,%es:(%rdi)
    6c43:	aa                   	stos   %al,%es:(%rdi)
    6c44:	aa                   	stos   %al,%es:(%rdi)
    6c45:	aa                   	stos   %al,%es:(%rdi)
    6c46:	aa                   	stos   %al,%es:(%rdi)
    6c47:	aa                   	stos   %al,%es:(%rdi)
    6c48:	aa                   	stos   %al,%es:(%rdi)
    6c49:	aa                   	stos   %al,%es:(%rdi)
    6c4a:	aa                   	stos   %al,%es:(%rdi)
    6c4b:	aa                   	stos   %al,%es:(%rdi)
    6c4c:	aa                   	stos   %al,%es:(%rdi)
    6c4d:	aa                   	stos   %al,%es:(%rdi)
    6c4e:	aa                   	stos   %al,%es:(%rdi)
    6c4f:	aa                   	stos   %al,%es:(%rdi)
    6c50:	aa                   	stos   %al,%es:(%rdi)
    6c51:	aa                   	stos   %al,%es:(%rdi)
    6c52:	aa                   	stos   %al,%es:(%rdi)
    6c53:	aa                   	stos   %al,%es:(%rdi)
    6c54:	aa                   	stos   %al,%es:(%rdi)
    6c55:	aa                   	stos   %al,%es:(%rdi)
    6c56:	aa                   	stos   %al,%es:(%rdi)
    6c57:	aa                   	stos   %al,%es:(%rdi)
    6c58:	aa                   	stos   %al,%es:(%rdi)
    6c59:	aa                   	stos   %al,%es:(%rdi)
    6c5a:	aa                   	stos   %al,%es:(%rdi)
    6c5b:	aa                   	stos   %al,%es:(%rdi)
    6c5c:	aa                   	stos   %al,%es:(%rdi)
    6c5d:	aa                   	stos   %al,%es:(%rdi)
    6c5e:	aa                   	stos   %al,%es:(%rdi)
    6c5f:	aa                   	stos   %al,%es:(%rdi)
    6c60:	aa                   	stos   %al,%es:(%rdi)
    6c61:	aa                   	stos   %al,%es:(%rdi)
    6c62:	aa                   	stos   %al,%es:(%rdi)
    6c63:	aa                   	stos   %al,%es:(%rdi)
    6c64:	aa                   	stos   %al,%es:(%rdi)
    6c65:	aa                   	stos   %al,%es:(%rdi)
    6c66:	aa                   	stos   %al,%es:(%rdi)
    6c67:	aa                   	stos   %al,%es:(%rdi)
    6c68:	aa                   	stos   %al,%es:(%rdi)
    6c69:	aa                   	stos   %al,%es:(%rdi)
    6c6a:	aa                   	stos   %al,%es:(%rdi)
    6c6b:	aa                   	stos   %al,%es:(%rdi)
    6c6c:	aa                   	stos   %al,%es:(%rdi)
    6c6d:	aa                   	stos   %al,%es:(%rdi)
    6c6e:	aa                   	stos   %al,%es:(%rdi)
    6c6f:	aa                   	stos   %al,%es:(%rdi)
    6c70:	aa                   	stos   %al,%es:(%rdi)
    6c71:	aa                   	stos   %al,%es:(%rdi)
    6c72:	aa                   	stos   %al,%es:(%rdi)
    6c73:	aa                   	stos   %al,%es:(%rdi)
    6c74:	aa                   	stos   %al,%es:(%rdi)
    6c75:	aa                   	stos   %al,%es:(%rdi)
    6c76:	aa                   	stos   %al,%es:(%rdi)
    6c77:	aa                   	stos   %al,%es:(%rdi)
    6c78:	aa                   	stos   %al,%es:(%rdi)
    6c79:	aa                   	stos   %al,%es:(%rdi)
    6c7a:	aa                   	stos   %al,%es:(%rdi)
    6c7b:	aa                   	stos   %al,%es:(%rdi)
    6c7c:	aa                   	stos   %al,%es:(%rdi)
    6c7d:	aa                   	stos   %al,%es:(%rdi)
    6c7e:	aa                   	stos   %al,%es:(%rdi)
    6c7f:	aa                   	stos   %al,%es:(%rdi)
    6c80:	aa                   	stos   %al,%es:(%rdi)
    6c81:	aa                   	stos   %al,%es:(%rdi)
    6c82:	aa                   	stos   %al,%es:(%rdi)
    6c83:	aa                   	stos   %al,%es:(%rdi)
    6c84:	aa                   	stos   %al,%es:(%rdi)
    6c85:	aa                   	stos   %al,%es:(%rdi)
    6c86:	aa                   	stos   %al,%es:(%rdi)
    6c87:	aa                   	stos   %al,%es:(%rdi)
    6c88:	aa                   	stos   %al,%es:(%rdi)
    6c89:	aa                   	stos   %al,%es:(%rdi)
    6c8a:	aa                   	stos   %al,%es:(%rdi)
    6c8b:	aa                   	stos   %al,%es:(%rdi)
    6c8c:	aa                   	stos   %al,%es:(%rdi)
    6c8d:	aa                   	stos   %al,%es:(%rdi)
    6c8e:	aa                   	stos   %al,%es:(%rdi)
    6c8f:	aa                   	stos   %al,%es:(%rdi)
    6c90:	aa                   	stos   %al,%es:(%rdi)
    6c91:	aa                   	stos   %al,%es:(%rdi)
    6c92:	aa                   	stos   %al,%es:(%rdi)
    6c93:	aa                   	stos   %al,%es:(%rdi)
    6c94:	aa                   	stos   %al,%es:(%rdi)
    6c95:	aa                   	stos   %al,%es:(%rdi)
    6c96:	aa                   	stos   %al,%es:(%rdi)
    6c97:	aa                   	stos   %al,%es:(%rdi)
    6c98:	aa                   	stos   %al,%es:(%rdi)
    6c99:	aa                   	stos   %al,%es:(%rdi)
    6c9a:	aa                   	stos   %al,%es:(%rdi)
    6c9b:	aa                   	stos   %al,%es:(%rdi)
    6c9c:	aa                   	stos   %al,%es:(%rdi)
    6c9d:	aa                   	stos   %al,%es:(%rdi)
    6c9e:	aa                   	stos   %al,%es:(%rdi)
    6c9f:	aa                   	stos   %al,%es:(%rdi)
    6ca0:	aa                   	stos   %al,%es:(%rdi)
    6ca1:	aa                   	stos   %al,%es:(%rdi)
    6ca2:	aa                   	stos   %al,%es:(%rdi)
    6ca3:	aa                   	stos   %al,%es:(%rdi)
    6ca4:	aa                   	stos   %al,%es:(%rdi)
    6ca5:	aa                   	stos   %al,%es:(%rdi)
    6ca6:	aa                   	stos   %al,%es:(%rdi)
    6ca7:	aa                   	stos   %al,%es:(%rdi)
    6ca8:	aa                   	stos   %al,%es:(%rdi)
    6ca9:	aa                   	stos   %al,%es:(%rdi)
    6caa:	aa                   	stos   %al,%es:(%rdi)
    6cab:	aa                   	stos   %al,%es:(%rdi)
    6cac:	aa                   	stos   %al,%es:(%rdi)
    6cad:	aa                   	stos   %al,%es:(%rdi)
    6cae:	aa                   	stos   %al,%es:(%rdi)
    6caf:	aa                   	stos   %al,%es:(%rdi)
    6cb0:	aa                   	stos   %al,%es:(%rdi)
    6cb1:	aa                   	stos   %al,%es:(%rdi)
    6cb2:	aa                   	stos   %al,%es:(%rdi)
    6cb3:	aa                   	stos   %al,%es:(%rdi)
    6cb4:	aa                   	stos   %al,%es:(%rdi)
    6cb5:	aa                   	stos   %al,%es:(%rdi)
    6cb6:	aa                   	stos   %al,%es:(%rdi)
    6cb7:	aa                   	stos   %al,%es:(%rdi)
    6cb8:	aa                   	stos   %al,%es:(%rdi)
    6cb9:	aa                   	stos   %al,%es:(%rdi)
    6cba:	aa                   	stos   %al,%es:(%rdi)
    6cbb:	aa                   	stos   %al,%es:(%rdi)
    6cbc:	aa                   	stos   %al,%es:(%rdi)
    6cbd:	aa                   	stos   %al,%es:(%rdi)
    6cbe:	aa                   	stos   %al,%es:(%rdi)
    6cbf:	aa                   	stos   %al,%es:(%rdi)
    6cc0:	aa                   	stos   %al,%es:(%rdi)
    6cc1:	aa                   	stos   %al,%es:(%rdi)
    6cc2:	aa                   	stos   %al,%es:(%rdi)
    6cc3:	aa                   	stos   %al,%es:(%rdi)
    6cc4:	aa                   	stos   %al,%es:(%rdi)
    6cc5:	aa                   	stos   %al,%es:(%rdi)
    6cc6:	aa                   	stos   %al,%es:(%rdi)
    6cc7:	aa                   	stos   %al,%es:(%rdi)
    6cc8:	aa                   	stos   %al,%es:(%rdi)
    6cc9:	aa                   	stos   %al,%es:(%rdi)
    6cca:	aa                   	stos   %al,%es:(%rdi)
    6ccb:	aa                   	stos   %al,%es:(%rdi)
    6ccc:	aa                   	stos   %al,%es:(%rdi)
    6ccd:	aa                   	stos   %al,%es:(%rdi)
    6cce:	aa                   	stos   %al,%es:(%rdi)
    6ccf:	aa                   	stos   %al,%es:(%rdi)
    6cd0:	aa                   	stos   %al,%es:(%rdi)
    6cd1:	aa                   	stos   %al,%es:(%rdi)
    6cd2:	aa                   	stos   %al,%es:(%rdi)
    6cd3:	aa                   	stos   %al,%es:(%rdi)
    6cd4:	aa                   	stos   %al,%es:(%rdi)
    6cd5:	aa                   	stos   %al,%es:(%rdi)
    6cd6:	aa                   	stos   %al,%es:(%rdi)
    6cd7:	aa                   	stos   %al,%es:(%rdi)
    6cd8:	aa                   	stos   %al,%es:(%rdi)
    6cd9:	aa                   	stos   %al,%es:(%rdi)
    6cda:	aa                   	stos   %al,%es:(%rdi)
    6cdb:	aa                   	stos   %al,%es:(%rdi)
    6cdc:	aa                   	stos   %al,%es:(%rdi)
    6cdd:	aa                   	stos   %al,%es:(%rdi)
    6cde:	aa                   	stos   %al,%es:(%rdi)
    6cdf:	aa                   	stos   %al,%es:(%rdi)
    6ce0:	aa                   	stos   %al,%es:(%rdi)
    6ce1:	aa                   	stos   %al,%es:(%rdi)
    6ce2:	aa                   	stos   %al,%es:(%rdi)
    6ce3:	aa                   	stos   %al,%es:(%rdi)
    6ce4:	aa                   	stos   %al,%es:(%rdi)
    6ce5:	aa                   	stos   %al,%es:(%rdi)
    6ce6:	aa                   	stos   %al,%es:(%rdi)
    6ce7:	aa                   	stos   %al,%es:(%rdi)
    6ce8:	aa                   	stos   %al,%es:(%rdi)
    6ce9:	aa                   	stos   %al,%es:(%rdi)
    6cea:	aa                   	stos   %al,%es:(%rdi)
    6ceb:	aa                   	stos   %al,%es:(%rdi)
    6cec:	aa                   	stos   %al,%es:(%rdi)
    6ced:	aa                   	stos   %al,%es:(%rdi)
    6cee:	aa                   	stos   %al,%es:(%rdi)
    6cef:	aa                   	stos   %al,%es:(%rdi)
    6cf0:	aa                   	stos   %al,%es:(%rdi)
    6cf1:	aa                   	stos   %al,%es:(%rdi)
    6cf2:	aa                   	stos   %al,%es:(%rdi)
    6cf3:	aa                   	stos   %al,%es:(%rdi)
    6cf4:	aa                   	stos   %al,%es:(%rdi)
    6cf5:	aa                   	stos   %al,%es:(%rdi)
    6cf6:	aa                   	stos   %al,%es:(%rdi)
    6cf7:	aa                   	stos   %al,%es:(%rdi)
    6cf8:	aa                   	stos   %al,%es:(%rdi)
    6cf9:	aa                   	stos   %al,%es:(%rdi)
    6cfa:	aa                   	stos   %al,%es:(%rdi)
    6cfb:	aa                   	stos   %al,%es:(%rdi)
    6cfc:	aa                   	stos   %al,%es:(%rdi)
    6cfd:	aa                   	stos   %al,%es:(%rdi)
    6cfe:	aa                   	stos   %al,%es:(%rdi)
    6cff:	aa                   	stos   %al,%es:(%rdi)
    6d00:	aa                   	stos   %al,%es:(%rdi)
    6d01:	aa                   	stos   %al,%es:(%rdi)
    6d02:	aa                   	stos   %al,%es:(%rdi)
    6d03:	aa                   	stos   %al,%es:(%rdi)
    6d04:	aa                   	stos   %al,%es:(%rdi)
    6d05:	aa                   	stos   %al,%es:(%rdi)
    6d06:	aa                   	stos   %al,%es:(%rdi)
    6d07:	aa                   	stos   %al,%es:(%rdi)
    6d08:	aa                   	stos   %al,%es:(%rdi)
    6d09:	aa                   	stos   %al,%es:(%rdi)
    6d0a:	aa                   	stos   %al,%es:(%rdi)
    6d0b:	aa                   	stos   %al,%es:(%rdi)
    6d0c:	aa                   	stos   %al,%es:(%rdi)
    6d0d:	aa                   	stos   %al,%es:(%rdi)
    6d0e:	aa                   	stos   %al,%es:(%rdi)
    6d0f:	aa                   	stos   %al,%es:(%rdi)
    6d10:	aa                   	stos   %al,%es:(%rdi)
    6d11:	aa                   	stos   %al,%es:(%rdi)
    6d12:	aa                   	stos   %al,%es:(%rdi)
    6d13:	aa                   	stos   %al,%es:(%rdi)
    6d14:	aa                   	stos   %al,%es:(%rdi)
    6d15:	aa                   	stos   %al,%es:(%rdi)
    6d16:	aa                   	stos   %al,%es:(%rdi)
    6d17:	aa                   	stos   %al,%es:(%rdi)
    6d18:	aa                   	stos   %al,%es:(%rdi)
    6d19:	aa                   	stos   %al,%es:(%rdi)
    6d1a:	aa                   	stos   %al,%es:(%rdi)
    6d1b:	aa                   	stos   %al,%es:(%rdi)
    6d1c:	aa                   	stos   %al,%es:(%rdi)
    6d1d:	aa                   	stos   %al,%es:(%rdi)
    6d1e:	aa                   	stos   %al,%es:(%rdi)
    6d1f:	aa                   	stos   %al,%es:(%rdi)
    6d20:	aa                   	stos   %al,%es:(%rdi)
    6d21:	aa                   	stos   %al,%es:(%rdi)
    6d22:	aa                   	stos   %al,%es:(%rdi)
    6d23:	aa                   	stos   %al,%es:(%rdi)
    6d24:	aa                   	stos   %al,%es:(%rdi)
    6d25:	aa                   	stos   %al,%es:(%rdi)
    6d26:	aa                   	stos   %al,%es:(%rdi)
    6d27:	aa                   	stos   %al,%es:(%rdi)
    6d28:	aa                   	stos   %al,%es:(%rdi)
    6d29:	aa                   	stos   %al,%es:(%rdi)
    6d2a:	aa                   	stos   %al,%es:(%rdi)
    6d2b:	aa                   	stos   %al,%es:(%rdi)
    6d2c:	aa                   	stos   %al,%es:(%rdi)
    6d2d:	aa                   	stos   %al,%es:(%rdi)
    6d2e:	aa                   	stos   %al,%es:(%rdi)
    6d2f:	aa                   	stos   %al,%es:(%rdi)
    6d30:	aa                   	stos   %al,%es:(%rdi)
    6d31:	aa                   	stos   %al,%es:(%rdi)
    6d32:	aa                   	stos   %al,%es:(%rdi)
    6d33:	aa                   	stos   %al,%es:(%rdi)
    6d34:	aa                   	stos   %al,%es:(%rdi)
    6d35:	aa                   	stos   %al,%es:(%rdi)
    6d36:	aa                   	stos   %al,%es:(%rdi)
    6d37:	aa                   	stos   %al,%es:(%rdi)
    6d38:	aa                   	stos   %al,%es:(%rdi)
    6d39:	aa                   	stos   %al,%es:(%rdi)
    6d3a:	aa                   	stos   %al,%es:(%rdi)
    6d3b:	aa                   	stos   %al,%es:(%rdi)
    6d3c:	aa                   	stos   %al,%es:(%rdi)
    6d3d:	aa                   	stos   %al,%es:(%rdi)
    6d3e:	aa                   	stos   %al,%es:(%rdi)
    6d3f:	aa                   	stos   %al,%es:(%rdi)
    6d40:	aa                   	stos   %al,%es:(%rdi)
    6d41:	aa                   	stos   %al,%es:(%rdi)
    6d42:	aa                   	stos   %al,%es:(%rdi)
    6d43:	aa                   	stos   %al,%es:(%rdi)
    6d44:	aa                   	stos   %al,%es:(%rdi)
    6d45:	aa                   	stos   %al,%es:(%rdi)
    6d46:	aa                   	stos   %al,%es:(%rdi)
    6d47:	aa                   	stos   %al,%es:(%rdi)
    6d48:	aa                   	stos   %al,%es:(%rdi)
    6d49:	aa                   	stos   %al,%es:(%rdi)
    6d4a:	aa                   	stos   %al,%es:(%rdi)
    6d4b:	aa                   	stos   %al,%es:(%rdi)
    6d4c:	aa                   	stos   %al,%es:(%rdi)
    6d4d:	aa                   	stos   %al,%es:(%rdi)
    6d4e:	aa                   	stos   %al,%es:(%rdi)
    6d4f:	aa                   	stos   %al,%es:(%rdi)
    6d50:	aa                   	stos   %al,%es:(%rdi)
    6d51:	aa                   	stos   %al,%es:(%rdi)
    6d52:	aa                   	stos   %al,%es:(%rdi)
    6d53:	aa                   	stos   %al,%es:(%rdi)
    6d54:	aa                   	stos   %al,%es:(%rdi)
    6d55:	aa                   	stos   %al,%es:(%rdi)
    6d56:	aa                   	stos   %al,%es:(%rdi)
    6d57:	aa                   	stos   %al,%es:(%rdi)
    6d58:	aa                   	stos   %al,%es:(%rdi)
    6d59:	aa                   	stos   %al,%es:(%rdi)
    6d5a:	aa                   	stos   %al,%es:(%rdi)
    6d5b:	aa                   	stos   %al,%es:(%rdi)
    6d5c:	aa                   	stos   %al,%es:(%rdi)
    6d5d:	aa                   	stos   %al,%es:(%rdi)
    6d5e:	aa                   	stos   %al,%es:(%rdi)
    6d5f:	aa                   	stos   %al,%es:(%rdi)
    6d60:	aa                   	stos   %al,%es:(%rdi)
    6d61:	aa                   	stos   %al,%es:(%rdi)
    6d62:	aa                   	stos   %al,%es:(%rdi)
    6d63:	aa                   	stos   %al,%es:(%rdi)
    6d64:	aa                   	stos   %al,%es:(%rdi)
    6d65:	aa                   	stos   %al,%es:(%rdi)
    6d66:	aa                   	stos   %al,%es:(%rdi)
    6d67:	aa                   	stos   %al,%es:(%rdi)
    6d68:	aa                   	stos   %al,%es:(%rdi)
    6d69:	aa                   	stos   %al,%es:(%rdi)
    6d6a:	aa                   	stos   %al,%es:(%rdi)
    6d6b:	aa                   	stos   %al,%es:(%rdi)
    6d6c:	aa                   	stos   %al,%es:(%rdi)
    6d6d:	aa                   	stos   %al,%es:(%rdi)
    6d6e:	aa                   	stos   %al,%es:(%rdi)
    6d6f:	aa                   	stos   %al,%es:(%rdi)
    6d70:	aa                   	stos   %al,%es:(%rdi)
    6d71:	aa                   	stos   %al,%es:(%rdi)
    6d72:	aa                   	stos   %al,%es:(%rdi)
    6d73:	aa                   	stos   %al,%es:(%rdi)
    6d74:	aa                   	stos   %al,%es:(%rdi)
    6d75:	aa                   	stos   %al,%es:(%rdi)
    6d76:	aa                   	stos   %al,%es:(%rdi)
    6d77:	aa                   	stos   %al,%es:(%rdi)
    6d78:	aa                   	stos   %al,%es:(%rdi)
    6d79:	aa                   	stos   %al,%es:(%rdi)
    6d7a:	aa                   	stos   %al,%es:(%rdi)
    6d7b:	aa                   	stos   %al,%es:(%rdi)
    6d7c:	aa                   	stos   %al,%es:(%rdi)
    6d7d:	aa                   	stos   %al,%es:(%rdi)
    6d7e:	aa                   	stos   %al,%es:(%rdi)
    6d7f:	aa                   	stos   %al,%es:(%rdi)
    6d80:	aa                   	stos   %al,%es:(%rdi)
    6d81:	aa                   	stos   %al,%es:(%rdi)
    6d82:	aa                   	stos   %al,%es:(%rdi)
    6d83:	aa                   	stos   %al,%es:(%rdi)
    6d84:	aa                   	stos   %al,%es:(%rdi)
    6d85:	aa                   	stos   %al,%es:(%rdi)
    6d86:	aa                   	stos   %al,%es:(%rdi)
    6d87:	aa                   	stos   %al,%es:(%rdi)
    6d88:	aa                   	stos   %al,%es:(%rdi)
    6d89:	aa                   	stos   %al,%es:(%rdi)
    6d8a:	aa                   	stos   %al,%es:(%rdi)
    6d8b:	aa                   	stos   %al,%es:(%rdi)
    6d8c:	aa                   	stos   %al,%es:(%rdi)
    6d8d:	aa                   	stos   %al,%es:(%rdi)
    6d8e:	aa                   	stos   %al,%es:(%rdi)
    6d8f:	aa                   	stos   %al,%es:(%rdi)
    6d90:	aa                   	stos   %al,%es:(%rdi)
    6d91:	aa                   	stos   %al,%es:(%rdi)
    6d92:	aa                   	stos   %al,%es:(%rdi)
    6d93:	aa                   	stos   %al,%es:(%rdi)
    6d94:	aa                   	stos   %al,%es:(%rdi)
    6d95:	aa                   	stos   %al,%es:(%rdi)
    6d96:	aa                   	stos   %al,%es:(%rdi)
    6d97:	aa                   	stos   %al,%es:(%rdi)
    6d98:	aa                   	stos   %al,%es:(%rdi)
    6d99:	aa                   	stos   %al,%es:(%rdi)
    6d9a:	aa                   	stos   %al,%es:(%rdi)
    6d9b:	aa                   	stos   %al,%es:(%rdi)
    6d9c:	aa                   	stos   %al,%es:(%rdi)
    6d9d:	aa                   	stos   %al,%es:(%rdi)
    6d9e:	aa                   	stos   %al,%es:(%rdi)
    6d9f:	aa                   	stos   %al,%es:(%rdi)
    6da0:	aa                   	stos   %al,%es:(%rdi)
    6da1:	aa                   	stos   %al,%es:(%rdi)
    6da2:	aa                   	stos   %al,%es:(%rdi)
    6da3:	aa                   	stos   %al,%es:(%rdi)
    6da4:	aa                   	stos   %al,%es:(%rdi)
    6da5:	aa                   	stos   %al,%es:(%rdi)
    6da6:	aa                   	stos   %al,%es:(%rdi)
    6da7:	aa                   	stos   %al,%es:(%rdi)
    6da8:	aa                   	stos   %al,%es:(%rdi)
    6da9:	aa                   	stos   %al,%es:(%rdi)
    6daa:	aa                   	stos   %al,%es:(%rdi)
    6dab:	aa                   	stos   %al,%es:(%rdi)
    6dac:	aa                   	stos   %al,%es:(%rdi)
    6dad:	aa                   	stos   %al,%es:(%rdi)
    6dae:	aa                   	stos   %al,%es:(%rdi)
    6daf:	aa                   	stos   %al,%es:(%rdi)
    6db0:	aa                   	stos   %al,%es:(%rdi)
    6db1:	aa                   	stos   %al,%es:(%rdi)
    6db2:	aa                   	stos   %al,%es:(%rdi)
    6db3:	aa                   	stos   %al,%es:(%rdi)
    6db4:	aa                   	stos   %al,%es:(%rdi)
    6db5:	aa                   	stos   %al,%es:(%rdi)
    6db6:	aa                   	stos   %al,%es:(%rdi)
    6db7:	aa                   	stos   %al,%es:(%rdi)
    6db8:	aa                   	stos   %al,%es:(%rdi)
    6db9:	aa                   	stos   %al,%es:(%rdi)
    6dba:	aa                   	stos   %al,%es:(%rdi)
    6dbb:	aa                   	stos   %al,%es:(%rdi)
    6dbc:	aa                   	stos   %al,%es:(%rdi)
    6dbd:	aa                   	stos   %al,%es:(%rdi)
    6dbe:	aa                   	stos   %al,%es:(%rdi)
    6dbf:	aa                   	stos   %al,%es:(%rdi)
    6dc0:	aa                   	stos   %al,%es:(%rdi)
    6dc1:	aa                   	stos   %al,%es:(%rdi)
    6dc2:	aa                   	stos   %al,%es:(%rdi)
    6dc3:	aa                   	stos   %al,%es:(%rdi)
    6dc4:	aa                   	stos   %al,%es:(%rdi)
    6dc5:	aa                   	stos   %al,%es:(%rdi)
    6dc6:	aa                   	stos   %al,%es:(%rdi)
    6dc7:	aa                   	stos   %al,%es:(%rdi)
    6dc8:	aa                   	stos   %al,%es:(%rdi)
    6dc9:	aa                   	stos   %al,%es:(%rdi)
    6dca:	aa                   	stos   %al,%es:(%rdi)
    6dcb:	aa                   	stos   %al,%es:(%rdi)
    6dcc:	aa                   	stos   %al,%es:(%rdi)
    6dcd:	aa                   	stos   %al,%es:(%rdi)
    6dce:	aa                   	stos   %al,%es:(%rdi)
    6dcf:	aa                   	stos   %al,%es:(%rdi)
    6dd0:	aa                   	stos   %al,%es:(%rdi)
    6dd1:	aa                   	stos   %al,%es:(%rdi)
    6dd2:	aa                   	stos   %al,%es:(%rdi)
    6dd3:	aa                   	stos   %al,%es:(%rdi)
    6dd4:	aa                   	stos   %al,%es:(%rdi)
    6dd5:	aa                   	stos   %al,%es:(%rdi)
    6dd6:	aa                   	stos   %al,%es:(%rdi)
    6dd7:	aa                   	stos   %al,%es:(%rdi)
    6dd8:	aa                   	stos   %al,%es:(%rdi)
    6dd9:	aa                   	stos   %al,%es:(%rdi)
    6dda:	aa                   	stos   %al,%es:(%rdi)
    6ddb:	aa                   	stos   %al,%es:(%rdi)
    6ddc:	aa                   	stos   %al,%es:(%rdi)
    6ddd:	aa                   	stos   %al,%es:(%rdi)
    6dde:	aa                   	stos   %al,%es:(%rdi)
    6ddf:	aa                   	stos   %al,%es:(%rdi)
    6de0:	aa                   	stos   %al,%es:(%rdi)
    6de1:	aa                   	stos   %al,%es:(%rdi)
    6de2:	aa                   	stos   %al,%es:(%rdi)
    6de3:	aa                   	stos   %al,%es:(%rdi)
    6de4:	aa                   	stos   %al,%es:(%rdi)
    6de5:	aa                   	stos   %al,%es:(%rdi)
    6de6:	aa                   	stos   %al,%es:(%rdi)
    6de7:	aa                   	stos   %al,%es:(%rdi)
    6de8:	aa                   	stos   %al,%es:(%rdi)
    6de9:	aa                   	stos   %al,%es:(%rdi)
    6dea:	aa                   	stos   %al,%es:(%rdi)
    6deb:	aa                   	stos   %al,%es:(%rdi)
    6dec:	aa                   	stos   %al,%es:(%rdi)
    6ded:	aa                   	stos   %al,%es:(%rdi)
    6dee:	aa                   	stos   %al,%es:(%rdi)
    6def:	aa                   	stos   %al,%es:(%rdi)
    6df0:	aa                   	stos   %al,%es:(%rdi)
    6df1:	aa                   	stos   %al,%es:(%rdi)
    6df2:	aa                   	stos   %al,%es:(%rdi)
    6df3:	aa                   	stos   %al,%es:(%rdi)
    6df4:	aa                   	stos   %al,%es:(%rdi)
    6df5:	aa                   	stos   %al,%es:(%rdi)
    6df6:	aa                   	stos   %al,%es:(%rdi)
    6df7:	aa                   	stos   %al,%es:(%rdi)
    6df8:	aa                   	stos   %al,%es:(%rdi)
    6df9:	aa                   	stos   %al,%es:(%rdi)
    6dfa:	aa                   	stos   %al,%es:(%rdi)
    6dfb:	aa                   	stos   %al,%es:(%rdi)
    6dfc:	aa                   	stos   %al,%es:(%rdi)
    6dfd:	aa                   	stos   %al,%es:(%rdi)
    6dfe:	aa                   	stos   %al,%es:(%rdi)
    6dff:	aa                   	stos   %al,%es:(%rdi)
    6e00:	aa                   	stos   %al,%es:(%rdi)
    6e01:	aa                   	stos   %al,%es:(%rdi)
    6e02:	aa                   	stos   %al,%es:(%rdi)
    6e03:	aa                   	stos   %al,%es:(%rdi)
    6e04:	aa                   	stos   %al,%es:(%rdi)
    6e05:	aa                   	stos   %al,%es:(%rdi)
    6e06:	aa                   	stos   %al,%es:(%rdi)
    6e07:	aa                   	stos   %al,%es:(%rdi)
    6e08:	aa                   	stos   %al,%es:(%rdi)
    6e09:	aa                   	stos   %al,%es:(%rdi)
    6e0a:	aa                   	stos   %al,%es:(%rdi)
    6e0b:	aa                   	stos   %al,%es:(%rdi)
    6e0c:	aa                   	stos   %al,%es:(%rdi)
    6e0d:	aa                   	stos   %al,%es:(%rdi)
    6e0e:	aa                   	stos   %al,%es:(%rdi)
    6e0f:	aa                   	stos   %al,%es:(%rdi)
    6e10:	aa                   	stos   %al,%es:(%rdi)
    6e11:	aa                   	stos   %al,%es:(%rdi)
    6e12:	aa                   	stos   %al,%es:(%rdi)
    6e13:	aa                   	stos   %al,%es:(%rdi)
    6e14:	aa                   	stos   %al,%es:(%rdi)
    6e15:	aa                   	stos   %al,%es:(%rdi)
    6e16:	aa                   	stos   %al,%es:(%rdi)
    6e17:	aa                   	stos   %al,%es:(%rdi)
    6e18:	aa                   	stos   %al,%es:(%rdi)
    6e19:	aa                   	stos   %al,%es:(%rdi)
    6e1a:	aa                   	stos   %al,%es:(%rdi)
    6e1b:	aa                   	stos   %al,%es:(%rdi)
    6e1c:	aa                   	stos   %al,%es:(%rdi)
    6e1d:	aa                   	stos   %al,%es:(%rdi)
    6e1e:	aa                   	stos   %al,%es:(%rdi)
    6e1f:	aa                   	stos   %al,%es:(%rdi)
    6e20:	aa                   	stos   %al,%es:(%rdi)
    6e21:	aa                   	stos   %al,%es:(%rdi)
    6e22:	aa                   	stos   %al,%es:(%rdi)
    6e23:	aa                   	stos   %al,%es:(%rdi)
    6e24:	aa                   	stos   %al,%es:(%rdi)
    6e25:	aa                   	stos   %al,%es:(%rdi)
    6e26:	aa                   	stos   %al,%es:(%rdi)
    6e27:	aa                   	stos   %al,%es:(%rdi)
    6e28:	aa                   	stos   %al,%es:(%rdi)
    6e29:	aa                   	stos   %al,%es:(%rdi)
    6e2a:	aa                   	stos   %al,%es:(%rdi)
    6e2b:	aa                   	stos   %al,%es:(%rdi)
    6e2c:	aa                   	stos   %al,%es:(%rdi)
    6e2d:	aa                   	stos   %al,%es:(%rdi)
    6e2e:	aa                   	stos   %al,%es:(%rdi)
    6e2f:	aa                   	stos   %al,%es:(%rdi)
    6e30:	aa                   	stos   %al,%es:(%rdi)
    6e31:	aa                   	stos   %al,%es:(%rdi)
    6e32:	aa                   	stos   %al,%es:(%rdi)
    6e33:	aa                   	stos   %al,%es:(%rdi)
    6e34:	aa                   	stos   %al,%es:(%rdi)
    6e35:	aa                   	stos   %al,%es:(%rdi)
    6e36:	aa                   	stos   %al,%es:(%rdi)
    6e37:	aa                   	stos   %al,%es:(%rdi)
    6e38:	aa                   	stos   %al,%es:(%rdi)
    6e39:	aa                   	stos   %al,%es:(%rdi)
    6e3a:	aa                   	stos   %al,%es:(%rdi)
    6e3b:	aa                   	stos   %al,%es:(%rdi)
    6e3c:	aa                   	stos   %al,%es:(%rdi)
    6e3d:	aa                   	stos   %al,%es:(%rdi)
    6e3e:	aa                   	stos   %al,%es:(%rdi)
    6e3f:	aa                   	stos   %al,%es:(%rdi)
    6e40:	aa                   	stos   %al,%es:(%rdi)
    6e41:	aa                   	stos   %al,%es:(%rdi)
    6e42:	aa                   	stos   %al,%es:(%rdi)
    6e43:	aa                   	stos   %al,%es:(%rdi)
    6e44:	aa                   	stos   %al,%es:(%rdi)
    6e45:	aa                   	stos   %al,%es:(%rdi)
    6e46:	aa                   	stos   %al,%es:(%rdi)
    6e47:	aa                   	stos   %al,%es:(%rdi)
    6e48:	aa                   	stos   %al,%es:(%rdi)
    6e49:	aa                   	stos   %al,%es:(%rdi)
    6e4a:	aa                   	stos   %al,%es:(%rdi)
    6e4b:	aa                   	stos   %al,%es:(%rdi)
    6e4c:	aa                   	stos   %al,%es:(%rdi)
    6e4d:	aa                   	stos   %al,%es:(%rdi)
    6e4e:	aa                   	stos   %al,%es:(%rdi)
    6e4f:	aa                   	stos   %al,%es:(%rdi)
    6e50:	aa                   	stos   %al,%es:(%rdi)
    6e51:	aa                   	stos   %al,%es:(%rdi)
    6e52:	aa                   	stos   %al,%es:(%rdi)
    6e53:	aa                   	stos   %al,%es:(%rdi)
    6e54:	aa                   	stos   %al,%es:(%rdi)
    6e55:	aa                   	stos   %al,%es:(%rdi)
    6e56:	aa                   	stos   %al,%es:(%rdi)
    6e57:	aa                   	stos   %al,%es:(%rdi)
    6e58:	aa                   	stos   %al,%es:(%rdi)
    6e59:	aa                   	stos   %al,%es:(%rdi)
    6e5a:	aa                   	stos   %al,%es:(%rdi)
    6e5b:	aa                   	stos   %al,%es:(%rdi)
    6e5c:	aa                   	stos   %al,%es:(%rdi)
    6e5d:	aa                   	stos   %al,%es:(%rdi)
    6e5e:	aa                   	stos   %al,%es:(%rdi)
    6e5f:	aa                   	stos   %al,%es:(%rdi)
    6e60:	aa                   	stos   %al,%es:(%rdi)
    6e61:	aa                   	stos   %al,%es:(%rdi)
    6e62:	aa                   	stos   %al,%es:(%rdi)
    6e63:	aa                   	stos   %al,%es:(%rdi)
    6e64:	aa                   	stos   %al,%es:(%rdi)
    6e65:	aa                   	stos   %al,%es:(%rdi)
    6e66:	aa                   	stos   %al,%es:(%rdi)
    6e67:	aa                   	stos   %al,%es:(%rdi)
    6e68:	aa                   	stos   %al,%es:(%rdi)
    6e69:	aa                   	stos   %al,%es:(%rdi)
    6e6a:	aa                   	stos   %al,%es:(%rdi)
    6e6b:	aa                   	stos   %al,%es:(%rdi)
    6e6c:	aa                   	stos   %al,%es:(%rdi)
    6e6d:	aa                   	stos   %al,%es:(%rdi)
    6e6e:	aa                   	stos   %al,%es:(%rdi)
    6e6f:	aa                   	stos   %al,%es:(%rdi)
    6e70:	aa                   	stos   %al,%es:(%rdi)
    6e71:	aa                   	stos   %al,%es:(%rdi)
    6e72:	aa                   	stos   %al,%es:(%rdi)
    6e73:	aa                   	stos   %al,%es:(%rdi)
    6e74:	aa                   	stos   %al,%es:(%rdi)
    6e75:	aa                   	stos   %al,%es:(%rdi)
    6e76:	aa                   	stos   %al,%es:(%rdi)
    6e77:	aa                   	stos   %al,%es:(%rdi)
    6e78:	aa                   	stos   %al,%es:(%rdi)
    6e79:	aa                   	stos   %al,%es:(%rdi)
    6e7a:	aa                   	stos   %al,%es:(%rdi)
    6e7b:	aa                   	stos   %al,%es:(%rdi)
    6e7c:	aa                   	stos   %al,%es:(%rdi)
    6e7d:	aa                   	stos   %al,%es:(%rdi)
    6e7e:	aa                   	stos   %al,%es:(%rdi)
    6e7f:	aa                   	stos   %al,%es:(%rdi)
    6e80:	aa                   	stos   %al,%es:(%rdi)
    6e81:	aa                   	stos   %al,%es:(%rdi)
    6e82:	aa                   	stos   %al,%es:(%rdi)
    6e83:	aa                   	stos   %al,%es:(%rdi)
    6e84:	aa                   	stos   %al,%es:(%rdi)
    6e85:	aa                   	stos   %al,%es:(%rdi)
    6e86:	aa                   	stos   %al,%es:(%rdi)
    6e87:	aa                   	stos   %al,%es:(%rdi)
    6e88:	aa                   	stos   %al,%es:(%rdi)
    6e89:	aa                   	stos   %al,%es:(%rdi)
    6e8a:	aa                   	stos   %al,%es:(%rdi)
    6e8b:	aa                   	stos   %al,%es:(%rdi)
    6e8c:	aa                   	stos   %al,%es:(%rdi)
    6e8d:	aa                   	stos   %al,%es:(%rdi)
    6e8e:	aa                   	stos   %al,%es:(%rdi)
    6e8f:	aa                   	stos   %al,%es:(%rdi)
    6e90:	aa                   	stos   %al,%es:(%rdi)
    6e91:	aa                   	stos   %al,%es:(%rdi)
    6e92:	aa                   	stos   %al,%es:(%rdi)
    6e93:	aa                   	stos   %al,%es:(%rdi)
    6e94:	aa                   	stos   %al,%es:(%rdi)
    6e95:	aa                   	stos   %al,%es:(%rdi)
    6e96:	aa                   	stos   %al,%es:(%rdi)
    6e97:	aa                   	stos   %al,%es:(%rdi)
    6e98:	aa                   	stos   %al,%es:(%rdi)
    6e99:	aa                   	stos   %al,%es:(%rdi)
    6e9a:	aa                   	stos   %al,%es:(%rdi)
    6e9b:	aa                   	stos   %al,%es:(%rdi)
    6e9c:	aa                   	stos   %al,%es:(%rdi)
    6e9d:	aa                   	stos   %al,%es:(%rdi)
    6e9e:	aa                   	stos   %al,%es:(%rdi)
    6e9f:	aa                   	stos   %al,%es:(%rdi)
    6ea0:	aa                   	stos   %al,%es:(%rdi)
    6ea1:	aa                   	stos   %al,%es:(%rdi)
    6ea2:	aa                   	stos   %al,%es:(%rdi)
    6ea3:	aa                   	stos   %al,%es:(%rdi)
    6ea4:	aa                   	stos   %al,%es:(%rdi)
    6ea5:	aa                   	stos   %al,%es:(%rdi)
    6ea6:	aa                   	stos   %al,%es:(%rdi)
    6ea7:	aa                   	stos   %al,%es:(%rdi)
    6ea8:	aa                   	stos   %al,%es:(%rdi)
    6ea9:	aa                   	stos   %al,%es:(%rdi)
    6eaa:	aa                   	stos   %al,%es:(%rdi)
    6eab:	aa                   	stos   %al,%es:(%rdi)
    6eac:	aa                   	stos   %al,%es:(%rdi)
    6ead:	aa                   	stos   %al,%es:(%rdi)
    6eae:	aa                   	stos   %al,%es:(%rdi)
    6eaf:	aa                   	stos   %al,%es:(%rdi)
    6eb0:	aa                   	stos   %al,%es:(%rdi)
    6eb1:	aa                   	stos   %al,%es:(%rdi)
    6eb2:	aa                   	stos   %al,%es:(%rdi)
    6eb3:	aa                   	stos   %al,%es:(%rdi)
    6eb4:	aa                   	stos   %al,%es:(%rdi)
    6eb5:	aa                   	stos   %al,%es:(%rdi)
    6eb6:	aa                   	stos   %al,%es:(%rdi)
    6eb7:	aa                   	stos   %al,%es:(%rdi)
    6eb8:	aa                   	stos   %al,%es:(%rdi)
    6eb9:	aa                   	stos   %al,%es:(%rdi)
    6eba:	aa                   	stos   %al,%es:(%rdi)
    6ebb:	aa                   	stos   %al,%es:(%rdi)
    6ebc:	aa                   	stos   %al,%es:(%rdi)
    6ebd:	aa                   	stos   %al,%es:(%rdi)
    6ebe:	aa                   	stos   %al,%es:(%rdi)
    6ebf:	aa                   	stos   %al,%es:(%rdi)
    6ec0:	aa                   	stos   %al,%es:(%rdi)
    6ec1:	aa                   	stos   %al,%es:(%rdi)
    6ec2:	aa                   	stos   %al,%es:(%rdi)
    6ec3:	aa                   	stos   %al,%es:(%rdi)
    6ec4:	aa                   	stos   %al,%es:(%rdi)
    6ec5:	aa                   	stos   %al,%es:(%rdi)
    6ec6:	aa                   	stos   %al,%es:(%rdi)
    6ec7:	aa                   	stos   %al,%es:(%rdi)
    6ec8:	aa                   	stos   %al,%es:(%rdi)
    6ec9:	aa                   	stos   %al,%es:(%rdi)
    6eca:	aa                   	stos   %al,%es:(%rdi)
    6ecb:	aa                   	stos   %al,%es:(%rdi)
    6ecc:	aa                   	stos   %al,%es:(%rdi)
    6ecd:	aa                   	stos   %al,%es:(%rdi)
    6ece:	aa                   	stos   %al,%es:(%rdi)
    6ecf:	aa                   	stos   %al,%es:(%rdi)
    6ed0:	aa                   	stos   %al,%es:(%rdi)
    6ed1:	aa                   	stos   %al,%es:(%rdi)
    6ed2:	aa                   	stos   %al,%es:(%rdi)
    6ed3:	aa                   	stos   %al,%es:(%rdi)
    6ed4:	aa                   	stos   %al,%es:(%rdi)
    6ed5:	aa                   	stos   %al,%es:(%rdi)
    6ed6:	aa                   	stos   %al,%es:(%rdi)
    6ed7:	aa                   	stos   %al,%es:(%rdi)
    6ed8:	aa                   	stos   %al,%es:(%rdi)
    6ed9:	aa                   	stos   %al,%es:(%rdi)
    6eda:	aa                   	stos   %al,%es:(%rdi)
    6edb:	aa                   	stos   %al,%es:(%rdi)
    6edc:	aa                   	stos   %al,%es:(%rdi)
    6edd:	aa                   	stos   %al,%es:(%rdi)
    6ede:	aa                   	stos   %al,%es:(%rdi)
    6edf:	aa                   	stos   %al,%es:(%rdi)
    6ee0:	aa                   	stos   %al,%es:(%rdi)
    6ee1:	aa                   	stos   %al,%es:(%rdi)
    6ee2:	aa                   	stos   %al,%es:(%rdi)
    6ee3:	aa                   	stos   %al,%es:(%rdi)
    6ee4:	aa                   	stos   %al,%es:(%rdi)
    6ee5:	aa                   	stos   %al,%es:(%rdi)
    6ee6:	aa                   	stos   %al,%es:(%rdi)
    6ee7:	aa                   	stos   %al,%es:(%rdi)
    6ee8:	aa                   	stos   %al,%es:(%rdi)
    6ee9:	aa                   	stos   %al,%es:(%rdi)
    6eea:	aa                   	stos   %al,%es:(%rdi)
    6eeb:	aa                   	stos   %al,%es:(%rdi)
    6eec:	aa                   	stos   %al,%es:(%rdi)
    6eed:	aa                   	stos   %al,%es:(%rdi)
    6eee:	aa                   	stos   %al,%es:(%rdi)
    6eef:	aa                   	stos   %al,%es:(%rdi)
    6ef0:	aa                   	stos   %al,%es:(%rdi)
    6ef1:	aa                   	stos   %al,%es:(%rdi)
    6ef2:	aa                   	stos   %al,%es:(%rdi)
    6ef3:	aa                   	stos   %al,%es:(%rdi)
    6ef4:	aa                   	stos   %al,%es:(%rdi)
    6ef5:	aa                   	stos   %al,%es:(%rdi)
    6ef6:	aa                   	stos   %al,%es:(%rdi)
    6ef7:	aa                   	stos   %al,%es:(%rdi)
    6ef8:	aa                   	stos   %al,%es:(%rdi)
    6ef9:	aa                   	stos   %al,%es:(%rdi)
    6efa:	aa                   	stos   %al,%es:(%rdi)
    6efb:	aa                   	stos   %al,%es:(%rdi)
    6efc:	aa                   	stos   %al,%es:(%rdi)
    6efd:	aa                   	stos   %al,%es:(%rdi)
    6efe:	aa                   	stos   %al,%es:(%rdi)
    6eff:	aa                   	stos   %al,%es:(%rdi)
    6f00:	aa                   	stos   %al,%es:(%rdi)
    6f01:	aa                   	stos   %al,%es:(%rdi)
    6f02:	aa                   	stos   %al,%es:(%rdi)
    6f03:	aa                   	stos   %al,%es:(%rdi)
    6f04:	aa                   	stos   %al,%es:(%rdi)
    6f05:	aa                   	stos   %al,%es:(%rdi)
    6f06:	aa                   	stos   %al,%es:(%rdi)
    6f07:	aa                   	stos   %al,%es:(%rdi)
    6f08:	aa                   	stos   %al,%es:(%rdi)
    6f09:	aa                   	stos   %al,%es:(%rdi)
    6f0a:	aa                   	stos   %al,%es:(%rdi)
    6f0b:	aa                   	stos   %al,%es:(%rdi)
    6f0c:	aa                   	stos   %al,%es:(%rdi)
    6f0d:	aa                   	stos   %al,%es:(%rdi)
    6f0e:	aa                   	stos   %al,%es:(%rdi)
    6f0f:	aa                   	stos   %al,%es:(%rdi)
    6f10:	aa                   	stos   %al,%es:(%rdi)
    6f11:	aa                   	stos   %al,%es:(%rdi)
    6f12:	aa                   	stos   %al,%es:(%rdi)
    6f13:	aa                   	stos   %al,%es:(%rdi)
    6f14:	aa                   	stos   %al,%es:(%rdi)
    6f15:	aa                   	stos   %al,%es:(%rdi)
    6f16:	aa                   	stos   %al,%es:(%rdi)
    6f17:	aa                   	stos   %al,%es:(%rdi)
    6f18:	aa                   	stos   %al,%es:(%rdi)
    6f19:	aa                   	stos   %al,%es:(%rdi)
    6f1a:	aa                   	stos   %al,%es:(%rdi)
    6f1b:	aa                   	stos   %al,%es:(%rdi)
    6f1c:	aa                   	stos   %al,%es:(%rdi)
    6f1d:	aa                   	stos   %al,%es:(%rdi)
    6f1e:	aa                   	stos   %al,%es:(%rdi)
    6f1f:	aa                   	stos   %al,%es:(%rdi)
    6f20:	aa                   	stos   %al,%es:(%rdi)
    6f21:	aa                   	stos   %al,%es:(%rdi)
    6f22:	aa                   	stos   %al,%es:(%rdi)
    6f23:	aa                   	stos   %al,%es:(%rdi)
    6f24:	aa                   	stos   %al,%es:(%rdi)
    6f25:	aa                   	stos   %al,%es:(%rdi)
    6f26:	aa                   	stos   %al,%es:(%rdi)
    6f27:	aa                   	stos   %al,%es:(%rdi)
    6f28:	aa                   	stos   %al,%es:(%rdi)
    6f29:	aa                   	stos   %al,%es:(%rdi)
    6f2a:	aa                   	stos   %al,%es:(%rdi)
    6f2b:	aa                   	stos   %al,%es:(%rdi)
    6f2c:	aa                   	stos   %al,%es:(%rdi)
    6f2d:	aa                   	stos   %al,%es:(%rdi)
    6f2e:	aa                   	stos   %al,%es:(%rdi)
    6f2f:	aa                   	stos   %al,%es:(%rdi)
    6f30:	aa                   	stos   %al,%es:(%rdi)
    6f31:	aa                   	stos   %al,%es:(%rdi)
    6f32:	aa                   	stos   %al,%es:(%rdi)
    6f33:	aa                   	stos   %al,%es:(%rdi)
    6f34:	aa                   	stos   %al,%es:(%rdi)
    6f35:	aa                   	stos   %al,%es:(%rdi)
    6f36:	aa                   	stos   %al,%es:(%rdi)
    6f37:	aa                   	stos   %al,%es:(%rdi)
    6f38:	aa                   	stos   %al,%es:(%rdi)
    6f39:	aa                   	stos   %al,%es:(%rdi)
    6f3a:	aa                   	stos   %al,%es:(%rdi)
    6f3b:	aa                   	stos   %al,%es:(%rdi)
    6f3c:	aa                   	stos   %al,%es:(%rdi)
    6f3d:	aa                   	stos   %al,%es:(%rdi)
    6f3e:	aa                   	stos   %al,%es:(%rdi)
    6f3f:	aa                   	stos   %al,%es:(%rdi)
    6f40:	aa                   	stos   %al,%es:(%rdi)
    6f41:	aa                   	stos   %al,%es:(%rdi)
    6f42:	aa                   	stos   %al,%es:(%rdi)
    6f43:	aa                   	stos   %al,%es:(%rdi)
    6f44:	aa                   	stos   %al,%es:(%rdi)
    6f45:	aa                   	stos   %al,%es:(%rdi)
    6f46:	aa                   	stos   %al,%es:(%rdi)
    6f47:	aa                   	stos   %al,%es:(%rdi)
    6f48:	aa                   	stos   %al,%es:(%rdi)
    6f49:	aa                   	stos   %al,%es:(%rdi)
    6f4a:	aa                   	stos   %al,%es:(%rdi)
    6f4b:	aa                   	stos   %al,%es:(%rdi)
    6f4c:	aa                   	stos   %al,%es:(%rdi)
    6f4d:	aa                   	stos   %al,%es:(%rdi)
    6f4e:	aa                   	stos   %al,%es:(%rdi)
    6f4f:	aa                   	stos   %al,%es:(%rdi)
    6f50:	aa                   	stos   %al,%es:(%rdi)
    6f51:	aa                   	stos   %al,%es:(%rdi)
    6f52:	aa                   	stos   %al,%es:(%rdi)
    6f53:	aa                   	stos   %al,%es:(%rdi)
    6f54:	aa                   	stos   %al,%es:(%rdi)
    6f55:	aa                   	stos   %al,%es:(%rdi)
    6f56:	aa                   	stos   %al,%es:(%rdi)
    6f57:	aa                   	stos   %al,%es:(%rdi)
    6f58:	aa                   	stos   %al,%es:(%rdi)
    6f59:	aa                   	stos   %al,%es:(%rdi)
    6f5a:	aa                   	stos   %al,%es:(%rdi)
    6f5b:	aa                   	stos   %al,%es:(%rdi)
    6f5c:	aa                   	stos   %al,%es:(%rdi)
    6f5d:	aa                   	stos   %al,%es:(%rdi)
    6f5e:	aa                   	stos   %al,%es:(%rdi)
    6f5f:	aa                   	stos   %al,%es:(%rdi)
    6f60:	aa                   	stos   %al,%es:(%rdi)
    6f61:	aa                   	stos   %al,%es:(%rdi)
    6f62:	aa                   	stos   %al,%es:(%rdi)
    6f63:	aa                   	stos   %al,%es:(%rdi)
    6f64:	aa                   	stos   %al,%es:(%rdi)
    6f65:	aa                   	stos   %al,%es:(%rdi)
    6f66:	aa                   	stos   %al,%es:(%rdi)
    6f67:	aa                   	stos   %al,%es:(%rdi)
    6f68:	aa                   	stos   %al,%es:(%rdi)
    6f69:	aa                   	stos   %al,%es:(%rdi)
    6f6a:	aa                   	stos   %al,%es:(%rdi)
    6f6b:	aa                   	stos   %al,%es:(%rdi)
    6f6c:	aa                   	stos   %al,%es:(%rdi)
    6f6d:	aa                   	stos   %al,%es:(%rdi)
    6f6e:	aa                   	stos   %al,%es:(%rdi)
    6f6f:	aa                   	stos   %al,%es:(%rdi)
    6f70:	aa                   	stos   %al,%es:(%rdi)
    6f71:	aa                   	stos   %al,%es:(%rdi)
    6f72:	aa                   	stos   %al,%es:(%rdi)
    6f73:	aa                   	stos   %al,%es:(%rdi)
    6f74:	aa                   	stos   %al,%es:(%rdi)
    6f75:	aa                   	stos   %al,%es:(%rdi)
    6f76:	aa                   	stos   %al,%es:(%rdi)
    6f77:	aa                   	stos   %al,%es:(%rdi)
    6f78:	aa                   	stos   %al,%es:(%rdi)
    6f79:	aa                   	stos   %al,%es:(%rdi)
    6f7a:	aa                   	stos   %al,%es:(%rdi)
    6f7b:	aa                   	stos   %al,%es:(%rdi)
    6f7c:	aa                   	stos   %al,%es:(%rdi)
    6f7d:	aa                   	stos   %al,%es:(%rdi)
    6f7e:	aa                   	stos   %al,%es:(%rdi)
    6f7f:	aa                   	stos   %al,%es:(%rdi)
    6f80:	aa                   	stos   %al,%es:(%rdi)
    6f81:	aa                   	stos   %al,%es:(%rdi)
    6f82:	aa                   	stos   %al,%es:(%rdi)
    6f83:	aa                   	stos   %al,%es:(%rdi)
    6f84:	aa                   	stos   %al,%es:(%rdi)
    6f85:	aa                   	stos   %al,%es:(%rdi)
    6f86:	aa                   	stos   %al,%es:(%rdi)
    6f87:	aa                   	stos   %al,%es:(%rdi)
    6f88:	aa                   	stos   %al,%es:(%rdi)
    6f89:	aa                   	stos   %al,%es:(%rdi)
    6f8a:	aa                   	stos   %al,%es:(%rdi)
    6f8b:	aa                   	stos   %al,%es:(%rdi)
    6f8c:	aa                   	stos   %al,%es:(%rdi)
    6f8d:	aa                   	stos   %al,%es:(%rdi)
    6f8e:	aa                   	stos   %al,%es:(%rdi)
    6f8f:	aa                   	stos   %al,%es:(%rdi)
    6f90:	aa                   	stos   %al,%es:(%rdi)
    6f91:	aa                   	stos   %al,%es:(%rdi)
    6f92:	aa                   	stos   %al,%es:(%rdi)
    6f93:	aa                   	stos   %al,%es:(%rdi)
    6f94:	aa                   	stos   %al,%es:(%rdi)
    6f95:	aa                   	stos   %al,%es:(%rdi)
    6f96:	aa                   	stos   %al,%es:(%rdi)
    6f97:	aa                   	stos   %al,%es:(%rdi)
    6f98:	aa                   	stos   %al,%es:(%rdi)
    6f99:	aa                   	stos   %al,%es:(%rdi)
    6f9a:	aa                   	stos   %al,%es:(%rdi)
    6f9b:	aa                   	stos   %al,%es:(%rdi)
    6f9c:	aa                   	stos   %al,%es:(%rdi)
    6f9d:	aa                   	stos   %al,%es:(%rdi)
    6f9e:	aa                   	stos   %al,%es:(%rdi)
    6f9f:	aa                   	stos   %al,%es:(%rdi)
    6fa0:	aa                   	stos   %al,%es:(%rdi)
    6fa1:	aa                   	stos   %al,%es:(%rdi)
    6fa2:	aa                   	stos   %al,%es:(%rdi)
    6fa3:	aa                   	stos   %al,%es:(%rdi)
    6fa4:	aa                   	stos   %al,%es:(%rdi)
    6fa5:	aa                   	stos   %al,%es:(%rdi)
    6fa6:	aa                   	stos   %al,%es:(%rdi)
    6fa7:	aa                   	stos   %al,%es:(%rdi)
    6fa8:	aa                   	stos   %al,%es:(%rdi)
    6fa9:	aa                   	stos   %al,%es:(%rdi)
    6faa:	aa                   	stos   %al,%es:(%rdi)
    6fab:	aa                   	stos   %al,%es:(%rdi)
    6fac:	aa                   	stos   %al,%es:(%rdi)
    6fad:	aa                   	stos   %al,%es:(%rdi)
    6fae:	aa                   	stos   %al,%es:(%rdi)
    6faf:	aa                   	stos   %al,%es:(%rdi)
    6fb0:	aa                   	stos   %al,%es:(%rdi)
    6fb1:	aa                   	stos   %al,%es:(%rdi)
    6fb2:	aa                   	stos   %al,%es:(%rdi)
    6fb3:	aa                   	stos   %al,%es:(%rdi)
    6fb4:	aa                   	stos   %al,%es:(%rdi)
    6fb5:	aa                   	stos   %al,%es:(%rdi)
    6fb6:	aa                   	stos   %al,%es:(%rdi)
    6fb7:	aa                   	stos   %al,%es:(%rdi)
    6fb8:	aa                   	stos   %al,%es:(%rdi)
    6fb9:	aa                   	stos   %al,%es:(%rdi)
    6fba:	aa                   	stos   %al,%es:(%rdi)
    6fbb:	aa                   	stos   %al,%es:(%rdi)
    6fbc:	aa                   	stos   %al,%es:(%rdi)
    6fbd:	aa                   	stos   %al,%es:(%rdi)
    6fbe:	aa                   	stos   %al,%es:(%rdi)
    6fbf:	aa                   	stos   %al,%es:(%rdi)
    6fc0:	aa                   	stos   %al,%es:(%rdi)
    6fc1:	aa                   	stos   %al,%es:(%rdi)
    6fc2:	aa                   	stos   %al,%es:(%rdi)
    6fc3:	aa                   	stos   %al,%es:(%rdi)
    6fc4:	aa                   	stos   %al,%es:(%rdi)
    6fc5:	aa                   	stos   %al,%es:(%rdi)
    6fc6:	aa                   	stos   %al,%es:(%rdi)
    6fc7:	aa                   	stos   %al,%es:(%rdi)
    6fc8:	aa                   	stos   %al,%es:(%rdi)
    6fc9:	aa                   	stos   %al,%es:(%rdi)
    6fca:	aa                   	stos   %al,%es:(%rdi)
    6fcb:	aa                   	stos   %al,%es:(%rdi)
    6fcc:	aa                   	stos   %al,%es:(%rdi)
    6fcd:	aa                   	stos   %al,%es:(%rdi)
    6fce:	aa                   	stos   %al,%es:(%rdi)
    6fcf:	aa                   	stos   %al,%es:(%rdi)
    6fd0:	aa                   	stos   %al,%es:(%rdi)
    6fd1:	aa                   	stos   %al,%es:(%rdi)
    6fd2:	aa                   	stos   %al,%es:(%rdi)
    6fd3:	aa                   	stos   %al,%es:(%rdi)
    6fd4:	aa                   	stos   %al,%es:(%rdi)
    6fd5:	aa                   	stos   %al,%es:(%rdi)
    6fd6:	aa                   	stos   %al,%es:(%rdi)
    6fd7:	aa                   	stos   %al,%es:(%rdi)
    6fd8:	aa                   	stos   %al,%es:(%rdi)
    6fd9:	aa                   	stos   %al,%es:(%rdi)
    6fda:	aa                   	stos   %al,%es:(%rdi)
    6fdb:	aa                   	stos   %al,%es:(%rdi)
    6fdc:	aa                   	stos   %al,%es:(%rdi)
    6fdd:	aa                   	stos   %al,%es:(%rdi)
    6fde:	aa                   	stos   %al,%es:(%rdi)
    6fdf:	aa                   	stos   %al,%es:(%rdi)
    6fe0:	aa                   	stos   %al,%es:(%rdi)
    6fe1:	aa                   	stos   %al,%es:(%rdi)
    6fe2:	aa                   	stos   %al,%es:(%rdi)
    6fe3:	aa                   	stos   %al,%es:(%rdi)
    6fe4:	aa                   	stos   %al,%es:(%rdi)
    6fe5:	aa                   	stos   %al,%es:(%rdi)
    6fe6:	aa                   	stos   %al,%es:(%rdi)
    6fe7:	aa                   	stos   %al,%es:(%rdi)
    6fe8:	aa                   	stos   %al,%es:(%rdi)
    6fe9:	aa                   	stos   %al,%es:(%rdi)
    6fea:	aa                   	stos   %al,%es:(%rdi)
    6feb:	aa                   	stos   %al,%es:(%rdi)
    6fec:	aa                   	stos   %al,%es:(%rdi)
    6fed:	aa                   	stos   %al,%es:(%rdi)
    6fee:	aa                   	stos   %al,%es:(%rdi)
    6fef:	aa                   	stos   %al,%es:(%rdi)
    6ff0:	aa                   	stos   %al,%es:(%rdi)
    6ff1:	aa                   	stos   %al,%es:(%rdi)
    6ff2:	aa                   	stos   %al,%es:(%rdi)
    6ff3:	aa                   	stos   %al,%es:(%rdi)
    6ff4:	aa                   	stos   %al,%es:(%rdi)
    6ff5:	aa                   	stos   %al,%es:(%rdi)
    6ff6:	aa                   	stos   %al,%es:(%rdi)
    6ff7:	aa                   	stos   %al,%es:(%rdi)
    6ff8:	aa                   	stos   %al,%es:(%rdi)
    6ff9:	aa                   	stos   %al,%es:(%rdi)
    6ffa:	aa                   	stos   %al,%es:(%rdi)
    6ffb:	aa                   	stos   %al,%es:(%rdi)
    6ffc:	aa                   	stos   %al,%es:(%rdi)
    6ffd:	aa                   	stos   %al,%es:(%rdi)
    6ffe:	aa                   	stos   %al,%es:(%rdi)
    6fff:	aa                   	stos   %al,%es:(%rdi)

0000000000007000 <z_x86_nmi_stack1>:
    7000:	aa                   	stos   %al,%es:(%rdi)
    7001:	aa                   	stos   %al,%es:(%rdi)
    7002:	aa                   	stos   %al,%es:(%rdi)
    7003:	aa                   	stos   %al,%es:(%rdi)
    7004:	aa                   	stos   %al,%es:(%rdi)
    7005:	aa                   	stos   %al,%es:(%rdi)
    7006:	aa                   	stos   %al,%es:(%rdi)
    7007:	aa                   	stos   %al,%es:(%rdi)
    7008:	aa                   	stos   %al,%es:(%rdi)
    7009:	aa                   	stos   %al,%es:(%rdi)
    700a:	aa                   	stos   %al,%es:(%rdi)
    700b:	aa                   	stos   %al,%es:(%rdi)
    700c:	aa                   	stos   %al,%es:(%rdi)
    700d:	aa                   	stos   %al,%es:(%rdi)
    700e:	aa                   	stos   %al,%es:(%rdi)
    700f:	aa                   	stos   %al,%es:(%rdi)
    7010:	aa                   	stos   %al,%es:(%rdi)
    7011:	aa                   	stos   %al,%es:(%rdi)
    7012:	aa                   	stos   %al,%es:(%rdi)
    7013:	aa                   	stos   %al,%es:(%rdi)
    7014:	aa                   	stos   %al,%es:(%rdi)
    7015:	aa                   	stos   %al,%es:(%rdi)
    7016:	aa                   	stos   %al,%es:(%rdi)
    7017:	aa                   	stos   %al,%es:(%rdi)
    7018:	aa                   	stos   %al,%es:(%rdi)
    7019:	aa                   	stos   %al,%es:(%rdi)
    701a:	aa                   	stos   %al,%es:(%rdi)
    701b:	aa                   	stos   %al,%es:(%rdi)
    701c:	aa                   	stos   %al,%es:(%rdi)
    701d:	aa                   	stos   %al,%es:(%rdi)
    701e:	aa                   	stos   %al,%es:(%rdi)
    701f:	aa                   	stos   %al,%es:(%rdi)
    7020:	aa                   	stos   %al,%es:(%rdi)
    7021:	aa                   	stos   %al,%es:(%rdi)
    7022:	aa                   	stos   %al,%es:(%rdi)
    7023:	aa                   	stos   %al,%es:(%rdi)
    7024:	aa                   	stos   %al,%es:(%rdi)
    7025:	aa                   	stos   %al,%es:(%rdi)
    7026:	aa                   	stos   %al,%es:(%rdi)
    7027:	aa                   	stos   %al,%es:(%rdi)
    7028:	aa                   	stos   %al,%es:(%rdi)
    7029:	aa                   	stos   %al,%es:(%rdi)
    702a:	aa                   	stos   %al,%es:(%rdi)
    702b:	aa                   	stos   %al,%es:(%rdi)
    702c:	aa                   	stos   %al,%es:(%rdi)
    702d:	aa                   	stos   %al,%es:(%rdi)
    702e:	aa                   	stos   %al,%es:(%rdi)
    702f:	aa                   	stos   %al,%es:(%rdi)
    7030:	aa                   	stos   %al,%es:(%rdi)
    7031:	aa                   	stos   %al,%es:(%rdi)
    7032:	aa                   	stos   %al,%es:(%rdi)
    7033:	aa                   	stos   %al,%es:(%rdi)
    7034:	aa                   	stos   %al,%es:(%rdi)
    7035:	aa                   	stos   %al,%es:(%rdi)
    7036:	aa                   	stos   %al,%es:(%rdi)
    7037:	aa                   	stos   %al,%es:(%rdi)
    7038:	aa                   	stos   %al,%es:(%rdi)
    7039:	aa                   	stos   %al,%es:(%rdi)
    703a:	aa                   	stos   %al,%es:(%rdi)
    703b:	aa                   	stos   %al,%es:(%rdi)
    703c:	aa                   	stos   %al,%es:(%rdi)
    703d:	aa                   	stos   %al,%es:(%rdi)
    703e:	aa                   	stos   %al,%es:(%rdi)
    703f:	aa                   	stos   %al,%es:(%rdi)
    7040:	aa                   	stos   %al,%es:(%rdi)
    7041:	aa                   	stos   %al,%es:(%rdi)
    7042:	aa                   	stos   %al,%es:(%rdi)
    7043:	aa                   	stos   %al,%es:(%rdi)
    7044:	aa                   	stos   %al,%es:(%rdi)
    7045:	aa                   	stos   %al,%es:(%rdi)
    7046:	aa                   	stos   %al,%es:(%rdi)
    7047:	aa                   	stos   %al,%es:(%rdi)
    7048:	aa                   	stos   %al,%es:(%rdi)
    7049:	aa                   	stos   %al,%es:(%rdi)
    704a:	aa                   	stos   %al,%es:(%rdi)
    704b:	aa                   	stos   %al,%es:(%rdi)
    704c:	aa                   	stos   %al,%es:(%rdi)
    704d:	aa                   	stos   %al,%es:(%rdi)
    704e:	aa                   	stos   %al,%es:(%rdi)
    704f:	aa                   	stos   %al,%es:(%rdi)
    7050:	aa                   	stos   %al,%es:(%rdi)
    7051:	aa                   	stos   %al,%es:(%rdi)
    7052:	aa                   	stos   %al,%es:(%rdi)
    7053:	aa                   	stos   %al,%es:(%rdi)
    7054:	aa                   	stos   %al,%es:(%rdi)
    7055:	aa                   	stos   %al,%es:(%rdi)
    7056:	aa                   	stos   %al,%es:(%rdi)
    7057:	aa                   	stos   %al,%es:(%rdi)
    7058:	aa                   	stos   %al,%es:(%rdi)
    7059:	aa                   	stos   %al,%es:(%rdi)
    705a:	aa                   	stos   %al,%es:(%rdi)
    705b:	aa                   	stos   %al,%es:(%rdi)
    705c:	aa                   	stos   %al,%es:(%rdi)
    705d:	aa                   	stos   %al,%es:(%rdi)
    705e:	aa                   	stos   %al,%es:(%rdi)
    705f:	aa                   	stos   %al,%es:(%rdi)
    7060:	aa                   	stos   %al,%es:(%rdi)
    7061:	aa                   	stos   %al,%es:(%rdi)
    7062:	aa                   	stos   %al,%es:(%rdi)
    7063:	aa                   	stos   %al,%es:(%rdi)
    7064:	aa                   	stos   %al,%es:(%rdi)
    7065:	aa                   	stos   %al,%es:(%rdi)
    7066:	aa                   	stos   %al,%es:(%rdi)
    7067:	aa                   	stos   %al,%es:(%rdi)
    7068:	aa                   	stos   %al,%es:(%rdi)
    7069:	aa                   	stos   %al,%es:(%rdi)
    706a:	aa                   	stos   %al,%es:(%rdi)
    706b:	aa                   	stos   %al,%es:(%rdi)
    706c:	aa                   	stos   %al,%es:(%rdi)
    706d:	aa                   	stos   %al,%es:(%rdi)
    706e:	aa                   	stos   %al,%es:(%rdi)
    706f:	aa                   	stos   %al,%es:(%rdi)
    7070:	aa                   	stos   %al,%es:(%rdi)
    7071:	aa                   	stos   %al,%es:(%rdi)
    7072:	aa                   	stos   %al,%es:(%rdi)
    7073:	aa                   	stos   %al,%es:(%rdi)
    7074:	aa                   	stos   %al,%es:(%rdi)
    7075:	aa                   	stos   %al,%es:(%rdi)
    7076:	aa                   	stos   %al,%es:(%rdi)
    7077:	aa                   	stos   %al,%es:(%rdi)
    7078:	aa                   	stos   %al,%es:(%rdi)
    7079:	aa                   	stos   %al,%es:(%rdi)
    707a:	aa                   	stos   %al,%es:(%rdi)
    707b:	aa                   	stos   %al,%es:(%rdi)
    707c:	aa                   	stos   %al,%es:(%rdi)
    707d:	aa                   	stos   %al,%es:(%rdi)
    707e:	aa                   	stos   %al,%es:(%rdi)
    707f:	aa                   	stos   %al,%es:(%rdi)
    7080:	aa                   	stos   %al,%es:(%rdi)
    7081:	aa                   	stos   %al,%es:(%rdi)
    7082:	aa                   	stos   %al,%es:(%rdi)
    7083:	aa                   	stos   %al,%es:(%rdi)
    7084:	aa                   	stos   %al,%es:(%rdi)
    7085:	aa                   	stos   %al,%es:(%rdi)
    7086:	aa                   	stos   %al,%es:(%rdi)
    7087:	aa                   	stos   %al,%es:(%rdi)
    7088:	aa                   	stos   %al,%es:(%rdi)
    7089:	aa                   	stos   %al,%es:(%rdi)
    708a:	aa                   	stos   %al,%es:(%rdi)
    708b:	aa                   	stos   %al,%es:(%rdi)
    708c:	aa                   	stos   %al,%es:(%rdi)
    708d:	aa                   	stos   %al,%es:(%rdi)
    708e:	aa                   	stos   %al,%es:(%rdi)
    708f:	aa                   	stos   %al,%es:(%rdi)
    7090:	aa                   	stos   %al,%es:(%rdi)
    7091:	aa                   	stos   %al,%es:(%rdi)
    7092:	aa                   	stos   %al,%es:(%rdi)
    7093:	aa                   	stos   %al,%es:(%rdi)
    7094:	aa                   	stos   %al,%es:(%rdi)
    7095:	aa                   	stos   %al,%es:(%rdi)
    7096:	aa                   	stos   %al,%es:(%rdi)
    7097:	aa                   	stos   %al,%es:(%rdi)
    7098:	aa                   	stos   %al,%es:(%rdi)
    7099:	aa                   	stos   %al,%es:(%rdi)
    709a:	aa                   	stos   %al,%es:(%rdi)
    709b:	aa                   	stos   %al,%es:(%rdi)
    709c:	aa                   	stos   %al,%es:(%rdi)
    709d:	aa                   	stos   %al,%es:(%rdi)
    709e:	aa                   	stos   %al,%es:(%rdi)
    709f:	aa                   	stos   %al,%es:(%rdi)
    70a0:	aa                   	stos   %al,%es:(%rdi)
    70a1:	aa                   	stos   %al,%es:(%rdi)
    70a2:	aa                   	stos   %al,%es:(%rdi)
    70a3:	aa                   	stos   %al,%es:(%rdi)
    70a4:	aa                   	stos   %al,%es:(%rdi)
    70a5:	aa                   	stos   %al,%es:(%rdi)
    70a6:	aa                   	stos   %al,%es:(%rdi)
    70a7:	aa                   	stos   %al,%es:(%rdi)
    70a8:	aa                   	stos   %al,%es:(%rdi)
    70a9:	aa                   	stos   %al,%es:(%rdi)
    70aa:	aa                   	stos   %al,%es:(%rdi)
    70ab:	aa                   	stos   %al,%es:(%rdi)
    70ac:	aa                   	stos   %al,%es:(%rdi)
    70ad:	aa                   	stos   %al,%es:(%rdi)
    70ae:	aa                   	stos   %al,%es:(%rdi)
    70af:	aa                   	stos   %al,%es:(%rdi)
    70b0:	aa                   	stos   %al,%es:(%rdi)
    70b1:	aa                   	stos   %al,%es:(%rdi)
    70b2:	aa                   	stos   %al,%es:(%rdi)
    70b3:	aa                   	stos   %al,%es:(%rdi)
    70b4:	aa                   	stos   %al,%es:(%rdi)
    70b5:	aa                   	stos   %al,%es:(%rdi)
    70b6:	aa                   	stos   %al,%es:(%rdi)
    70b7:	aa                   	stos   %al,%es:(%rdi)
    70b8:	aa                   	stos   %al,%es:(%rdi)
    70b9:	aa                   	stos   %al,%es:(%rdi)
    70ba:	aa                   	stos   %al,%es:(%rdi)
    70bb:	aa                   	stos   %al,%es:(%rdi)
    70bc:	aa                   	stos   %al,%es:(%rdi)
    70bd:	aa                   	stos   %al,%es:(%rdi)
    70be:	aa                   	stos   %al,%es:(%rdi)
    70bf:	aa                   	stos   %al,%es:(%rdi)
    70c0:	aa                   	stos   %al,%es:(%rdi)
    70c1:	aa                   	stos   %al,%es:(%rdi)
    70c2:	aa                   	stos   %al,%es:(%rdi)
    70c3:	aa                   	stos   %al,%es:(%rdi)
    70c4:	aa                   	stos   %al,%es:(%rdi)
    70c5:	aa                   	stos   %al,%es:(%rdi)
    70c6:	aa                   	stos   %al,%es:(%rdi)
    70c7:	aa                   	stos   %al,%es:(%rdi)
    70c8:	aa                   	stos   %al,%es:(%rdi)
    70c9:	aa                   	stos   %al,%es:(%rdi)
    70ca:	aa                   	stos   %al,%es:(%rdi)
    70cb:	aa                   	stos   %al,%es:(%rdi)
    70cc:	aa                   	stos   %al,%es:(%rdi)
    70cd:	aa                   	stos   %al,%es:(%rdi)
    70ce:	aa                   	stos   %al,%es:(%rdi)
    70cf:	aa                   	stos   %al,%es:(%rdi)
    70d0:	aa                   	stos   %al,%es:(%rdi)
    70d1:	aa                   	stos   %al,%es:(%rdi)
    70d2:	aa                   	stos   %al,%es:(%rdi)
    70d3:	aa                   	stos   %al,%es:(%rdi)
    70d4:	aa                   	stos   %al,%es:(%rdi)
    70d5:	aa                   	stos   %al,%es:(%rdi)
    70d6:	aa                   	stos   %al,%es:(%rdi)
    70d7:	aa                   	stos   %al,%es:(%rdi)
    70d8:	aa                   	stos   %al,%es:(%rdi)
    70d9:	aa                   	stos   %al,%es:(%rdi)
    70da:	aa                   	stos   %al,%es:(%rdi)
    70db:	aa                   	stos   %al,%es:(%rdi)
    70dc:	aa                   	stos   %al,%es:(%rdi)
    70dd:	aa                   	stos   %al,%es:(%rdi)
    70de:	aa                   	stos   %al,%es:(%rdi)
    70df:	aa                   	stos   %al,%es:(%rdi)
    70e0:	aa                   	stos   %al,%es:(%rdi)
    70e1:	aa                   	stos   %al,%es:(%rdi)
    70e2:	aa                   	stos   %al,%es:(%rdi)
    70e3:	aa                   	stos   %al,%es:(%rdi)
    70e4:	aa                   	stos   %al,%es:(%rdi)
    70e5:	aa                   	stos   %al,%es:(%rdi)
    70e6:	aa                   	stos   %al,%es:(%rdi)
    70e7:	aa                   	stos   %al,%es:(%rdi)
    70e8:	aa                   	stos   %al,%es:(%rdi)
    70e9:	aa                   	stos   %al,%es:(%rdi)
    70ea:	aa                   	stos   %al,%es:(%rdi)
    70eb:	aa                   	stos   %al,%es:(%rdi)
    70ec:	aa                   	stos   %al,%es:(%rdi)
    70ed:	aa                   	stos   %al,%es:(%rdi)
    70ee:	aa                   	stos   %al,%es:(%rdi)
    70ef:	aa                   	stos   %al,%es:(%rdi)
    70f0:	aa                   	stos   %al,%es:(%rdi)
    70f1:	aa                   	stos   %al,%es:(%rdi)
    70f2:	aa                   	stos   %al,%es:(%rdi)
    70f3:	aa                   	stos   %al,%es:(%rdi)
    70f4:	aa                   	stos   %al,%es:(%rdi)
    70f5:	aa                   	stos   %al,%es:(%rdi)
    70f6:	aa                   	stos   %al,%es:(%rdi)
    70f7:	aa                   	stos   %al,%es:(%rdi)
    70f8:	aa                   	stos   %al,%es:(%rdi)
    70f9:	aa                   	stos   %al,%es:(%rdi)
    70fa:	aa                   	stos   %al,%es:(%rdi)
    70fb:	aa                   	stos   %al,%es:(%rdi)
    70fc:	aa                   	stos   %al,%es:(%rdi)
    70fd:	aa                   	stos   %al,%es:(%rdi)
    70fe:	aa                   	stos   %al,%es:(%rdi)
    70ff:	aa                   	stos   %al,%es:(%rdi)
    7100:	aa                   	stos   %al,%es:(%rdi)
    7101:	aa                   	stos   %al,%es:(%rdi)
    7102:	aa                   	stos   %al,%es:(%rdi)
    7103:	aa                   	stos   %al,%es:(%rdi)
    7104:	aa                   	stos   %al,%es:(%rdi)
    7105:	aa                   	stos   %al,%es:(%rdi)
    7106:	aa                   	stos   %al,%es:(%rdi)
    7107:	aa                   	stos   %al,%es:(%rdi)
    7108:	aa                   	stos   %al,%es:(%rdi)
    7109:	aa                   	stos   %al,%es:(%rdi)
    710a:	aa                   	stos   %al,%es:(%rdi)
    710b:	aa                   	stos   %al,%es:(%rdi)
    710c:	aa                   	stos   %al,%es:(%rdi)
    710d:	aa                   	stos   %al,%es:(%rdi)
    710e:	aa                   	stos   %al,%es:(%rdi)
    710f:	aa                   	stos   %al,%es:(%rdi)
    7110:	aa                   	stos   %al,%es:(%rdi)
    7111:	aa                   	stos   %al,%es:(%rdi)
    7112:	aa                   	stos   %al,%es:(%rdi)
    7113:	aa                   	stos   %al,%es:(%rdi)
    7114:	aa                   	stos   %al,%es:(%rdi)
    7115:	aa                   	stos   %al,%es:(%rdi)
    7116:	aa                   	stos   %al,%es:(%rdi)
    7117:	aa                   	stos   %al,%es:(%rdi)
    7118:	aa                   	stos   %al,%es:(%rdi)
    7119:	aa                   	stos   %al,%es:(%rdi)
    711a:	aa                   	stos   %al,%es:(%rdi)
    711b:	aa                   	stos   %al,%es:(%rdi)
    711c:	aa                   	stos   %al,%es:(%rdi)
    711d:	aa                   	stos   %al,%es:(%rdi)
    711e:	aa                   	stos   %al,%es:(%rdi)
    711f:	aa                   	stos   %al,%es:(%rdi)
    7120:	aa                   	stos   %al,%es:(%rdi)
    7121:	aa                   	stos   %al,%es:(%rdi)
    7122:	aa                   	stos   %al,%es:(%rdi)
    7123:	aa                   	stos   %al,%es:(%rdi)
    7124:	aa                   	stos   %al,%es:(%rdi)
    7125:	aa                   	stos   %al,%es:(%rdi)
    7126:	aa                   	stos   %al,%es:(%rdi)
    7127:	aa                   	stos   %al,%es:(%rdi)
    7128:	aa                   	stos   %al,%es:(%rdi)
    7129:	aa                   	stos   %al,%es:(%rdi)
    712a:	aa                   	stos   %al,%es:(%rdi)
    712b:	aa                   	stos   %al,%es:(%rdi)
    712c:	aa                   	stos   %al,%es:(%rdi)
    712d:	aa                   	stos   %al,%es:(%rdi)
    712e:	aa                   	stos   %al,%es:(%rdi)
    712f:	aa                   	stos   %al,%es:(%rdi)
    7130:	aa                   	stos   %al,%es:(%rdi)
    7131:	aa                   	stos   %al,%es:(%rdi)
    7132:	aa                   	stos   %al,%es:(%rdi)
    7133:	aa                   	stos   %al,%es:(%rdi)
    7134:	aa                   	stos   %al,%es:(%rdi)
    7135:	aa                   	stos   %al,%es:(%rdi)
    7136:	aa                   	stos   %al,%es:(%rdi)
    7137:	aa                   	stos   %al,%es:(%rdi)
    7138:	aa                   	stos   %al,%es:(%rdi)
    7139:	aa                   	stos   %al,%es:(%rdi)
    713a:	aa                   	stos   %al,%es:(%rdi)
    713b:	aa                   	stos   %al,%es:(%rdi)
    713c:	aa                   	stos   %al,%es:(%rdi)
    713d:	aa                   	stos   %al,%es:(%rdi)
    713e:	aa                   	stos   %al,%es:(%rdi)
    713f:	aa                   	stos   %al,%es:(%rdi)
    7140:	aa                   	stos   %al,%es:(%rdi)
    7141:	aa                   	stos   %al,%es:(%rdi)
    7142:	aa                   	stos   %al,%es:(%rdi)
    7143:	aa                   	stos   %al,%es:(%rdi)
    7144:	aa                   	stos   %al,%es:(%rdi)
    7145:	aa                   	stos   %al,%es:(%rdi)
    7146:	aa                   	stos   %al,%es:(%rdi)
    7147:	aa                   	stos   %al,%es:(%rdi)
    7148:	aa                   	stos   %al,%es:(%rdi)
    7149:	aa                   	stos   %al,%es:(%rdi)
    714a:	aa                   	stos   %al,%es:(%rdi)
    714b:	aa                   	stos   %al,%es:(%rdi)
    714c:	aa                   	stos   %al,%es:(%rdi)
    714d:	aa                   	stos   %al,%es:(%rdi)
    714e:	aa                   	stos   %al,%es:(%rdi)
    714f:	aa                   	stos   %al,%es:(%rdi)
    7150:	aa                   	stos   %al,%es:(%rdi)
    7151:	aa                   	stos   %al,%es:(%rdi)
    7152:	aa                   	stos   %al,%es:(%rdi)
    7153:	aa                   	stos   %al,%es:(%rdi)
    7154:	aa                   	stos   %al,%es:(%rdi)
    7155:	aa                   	stos   %al,%es:(%rdi)
    7156:	aa                   	stos   %al,%es:(%rdi)
    7157:	aa                   	stos   %al,%es:(%rdi)
    7158:	aa                   	stos   %al,%es:(%rdi)
    7159:	aa                   	stos   %al,%es:(%rdi)
    715a:	aa                   	stos   %al,%es:(%rdi)
    715b:	aa                   	stos   %al,%es:(%rdi)
    715c:	aa                   	stos   %al,%es:(%rdi)
    715d:	aa                   	stos   %al,%es:(%rdi)
    715e:	aa                   	stos   %al,%es:(%rdi)
    715f:	aa                   	stos   %al,%es:(%rdi)
    7160:	aa                   	stos   %al,%es:(%rdi)
    7161:	aa                   	stos   %al,%es:(%rdi)
    7162:	aa                   	stos   %al,%es:(%rdi)
    7163:	aa                   	stos   %al,%es:(%rdi)
    7164:	aa                   	stos   %al,%es:(%rdi)
    7165:	aa                   	stos   %al,%es:(%rdi)
    7166:	aa                   	stos   %al,%es:(%rdi)
    7167:	aa                   	stos   %al,%es:(%rdi)
    7168:	aa                   	stos   %al,%es:(%rdi)
    7169:	aa                   	stos   %al,%es:(%rdi)
    716a:	aa                   	stos   %al,%es:(%rdi)
    716b:	aa                   	stos   %al,%es:(%rdi)
    716c:	aa                   	stos   %al,%es:(%rdi)
    716d:	aa                   	stos   %al,%es:(%rdi)
    716e:	aa                   	stos   %al,%es:(%rdi)
    716f:	aa                   	stos   %al,%es:(%rdi)
    7170:	aa                   	stos   %al,%es:(%rdi)
    7171:	aa                   	stos   %al,%es:(%rdi)
    7172:	aa                   	stos   %al,%es:(%rdi)
    7173:	aa                   	stos   %al,%es:(%rdi)
    7174:	aa                   	stos   %al,%es:(%rdi)
    7175:	aa                   	stos   %al,%es:(%rdi)
    7176:	aa                   	stos   %al,%es:(%rdi)
    7177:	aa                   	stos   %al,%es:(%rdi)
    7178:	aa                   	stos   %al,%es:(%rdi)
    7179:	aa                   	stos   %al,%es:(%rdi)
    717a:	aa                   	stos   %al,%es:(%rdi)
    717b:	aa                   	stos   %al,%es:(%rdi)
    717c:	aa                   	stos   %al,%es:(%rdi)
    717d:	aa                   	stos   %al,%es:(%rdi)
    717e:	aa                   	stos   %al,%es:(%rdi)
    717f:	aa                   	stos   %al,%es:(%rdi)
    7180:	aa                   	stos   %al,%es:(%rdi)
    7181:	aa                   	stos   %al,%es:(%rdi)
    7182:	aa                   	stos   %al,%es:(%rdi)
    7183:	aa                   	stos   %al,%es:(%rdi)
    7184:	aa                   	stos   %al,%es:(%rdi)
    7185:	aa                   	stos   %al,%es:(%rdi)
    7186:	aa                   	stos   %al,%es:(%rdi)
    7187:	aa                   	stos   %al,%es:(%rdi)
    7188:	aa                   	stos   %al,%es:(%rdi)
    7189:	aa                   	stos   %al,%es:(%rdi)
    718a:	aa                   	stos   %al,%es:(%rdi)
    718b:	aa                   	stos   %al,%es:(%rdi)
    718c:	aa                   	stos   %al,%es:(%rdi)
    718d:	aa                   	stos   %al,%es:(%rdi)
    718e:	aa                   	stos   %al,%es:(%rdi)
    718f:	aa                   	stos   %al,%es:(%rdi)
    7190:	aa                   	stos   %al,%es:(%rdi)
    7191:	aa                   	stos   %al,%es:(%rdi)
    7192:	aa                   	stos   %al,%es:(%rdi)
    7193:	aa                   	stos   %al,%es:(%rdi)
    7194:	aa                   	stos   %al,%es:(%rdi)
    7195:	aa                   	stos   %al,%es:(%rdi)
    7196:	aa                   	stos   %al,%es:(%rdi)
    7197:	aa                   	stos   %al,%es:(%rdi)
    7198:	aa                   	stos   %al,%es:(%rdi)
    7199:	aa                   	stos   %al,%es:(%rdi)
    719a:	aa                   	stos   %al,%es:(%rdi)
    719b:	aa                   	stos   %al,%es:(%rdi)
    719c:	aa                   	stos   %al,%es:(%rdi)
    719d:	aa                   	stos   %al,%es:(%rdi)
    719e:	aa                   	stos   %al,%es:(%rdi)
    719f:	aa                   	stos   %al,%es:(%rdi)
    71a0:	aa                   	stos   %al,%es:(%rdi)
    71a1:	aa                   	stos   %al,%es:(%rdi)
    71a2:	aa                   	stos   %al,%es:(%rdi)
    71a3:	aa                   	stos   %al,%es:(%rdi)
    71a4:	aa                   	stos   %al,%es:(%rdi)
    71a5:	aa                   	stos   %al,%es:(%rdi)
    71a6:	aa                   	stos   %al,%es:(%rdi)
    71a7:	aa                   	stos   %al,%es:(%rdi)
    71a8:	aa                   	stos   %al,%es:(%rdi)
    71a9:	aa                   	stos   %al,%es:(%rdi)
    71aa:	aa                   	stos   %al,%es:(%rdi)
    71ab:	aa                   	stos   %al,%es:(%rdi)
    71ac:	aa                   	stos   %al,%es:(%rdi)
    71ad:	aa                   	stos   %al,%es:(%rdi)
    71ae:	aa                   	stos   %al,%es:(%rdi)
    71af:	aa                   	stos   %al,%es:(%rdi)
    71b0:	aa                   	stos   %al,%es:(%rdi)
    71b1:	aa                   	stos   %al,%es:(%rdi)
    71b2:	aa                   	stos   %al,%es:(%rdi)
    71b3:	aa                   	stos   %al,%es:(%rdi)
    71b4:	aa                   	stos   %al,%es:(%rdi)
    71b5:	aa                   	stos   %al,%es:(%rdi)
    71b6:	aa                   	stos   %al,%es:(%rdi)
    71b7:	aa                   	stos   %al,%es:(%rdi)
    71b8:	aa                   	stos   %al,%es:(%rdi)
    71b9:	aa                   	stos   %al,%es:(%rdi)
    71ba:	aa                   	stos   %al,%es:(%rdi)
    71bb:	aa                   	stos   %al,%es:(%rdi)
    71bc:	aa                   	stos   %al,%es:(%rdi)
    71bd:	aa                   	stos   %al,%es:(%rdi)
    71be:	aa                   	stos   %al,%es:(%rdi)
    71bf:	aa                   	stos   %al,%es:(%rdi)
    71c0:	aa                   	stos   %al,%es:(%rdi)
    71c1:	aa                   	stos   %al,%es:(%rdi)
    71c2:	aa                   	stos   %al,%es:(%rdi)
    71c3:	aa                   	stos   %al,%es:(%rdi)
    71c4:	aa                   	stos   %al,%es:(%rdi)
    71c5:	aa                   	stos   %al,%es:(%rdi)
    71c6:	aa                   	stos   %al,%es:(%rdi)
    71c7:	aa                   	stos   %al,%es:(%rdi)
    71c8:	aa                   	stos   %al,%es:(%rdi)
    71c9:	aa                   	stos   %al,%es:(%rdi)
    71ca:	aa                   	stos   %al,%es:(%rdi)
    71cb:	aa                   	stos   %al,%es:(%rdi)
    71cc:	aa                   	stos   %al,%es:(%rdi)
    71cd:	aa                   	stos   %al,%es:(%rdi)
    71ce:	aa                   	stos   %al,%es:(%rdi)
    71cf:	aa                   	stos   %al,%es:(%rdi)
    71d0:	aa                   	stos   %al,%es:(%rdi)
    71d1:	aa                   	stos   %al,%es:(%rdi)
    71d2:	aa                   	stos   %al,%es:(%rdi)
    71d3:	aa                   	stos   %al,%es:(%rdi)
    71d4:	aa                   	stos   %al,%es:(%rdi)
    71d5:	aa                   	stos   %al,%es:(%rdi)
    71d6:	aa                   	stos   %al,%es:(%rdi)
    71d7:	aa                   	stos   %al,%es:(%rdi)
    71d8:	aa                   	stos   %al,%es:(%rdi)
    71d9:	aa                   	stos   %al,%es:(%rdi)
    71da:	aa                   	stos   %al,%es:(%rdi)
    71db:	aa                   	stos   %al,%es:(%rdi)
    71dc:	aa                   	stos   %al,%es:(%rdi)
    71dd:	aa                   	stos   %al,%es:(%rdi)
    71de:	aa                   	stos   %al,%es:(%rdi)
    71df:	aa                   	stos   %al,%es:(%rdi)
    71e0:	aa                   	stos   %al,%es:(%rdi)
    71e1:	aa                   	stos   %al,%es:(%rdi)
    71e2:	aa                   	stos   %al,%es:(%rdi)
    71e3:	aa                   	stos   %al,%es:(%rdi)
    71e4:	aa                   	stos   %al,%es:(%rdi)
    71e5:	aa                   	stos   %al,%es:(%rdi)
    71e6:	aa                   	stos   %al,%es:(%rdi)
    71e7:	aa                   	stos   %al,%es:(%rdi)
    71e8:	aa                   	stos   %al,%es:(%rdi)
    71e9:	aa                   	stos   %al,%es:(%rdi)
    71ea:	aa                   	stos   %al,%es:(%rdi)
    71eb:	aa                   	stos   %al,%es:(%rdi)
    71ec:	aa                   	stos   %al,%es:(%rdi)
    71ed:	aa                   	stos   %al,%es:(%rdi)
    71ee:	aa                   	stos   %al,%es:(%rdi)
    71ef:	aa                   	stos   %al,%es:(%rdi)
    71f0:	aa                   	stos   %al,%es:(%rdi)
    71f1:	aa                   	stos   %al,%es:(%rdi)
    71f2:	aa                   	stos   %al,%es:(%rdi)
    71f3:	aa                   	stos   %al,%es:(%rdi)
    71f4:	aa                   	stos   %al,%es:(%rdi)
    71f5:	aa                   	stos   %al,%es:(%rdi)
    71f6:	aa                   	stos   %al,%es:(%rdi)
    71f7:	aa                   	stos   %al,%es:(%rdi)
    71f8:	aa                   	stos   %al,%es:(%rdi)
    71f9:	aa                   	stos   %al,%es:(%rdi)
    71fa:	aa                   	stos   %al,%es:(%rdi)
    71fb:	aa                   	stos   %al,%es:(%rdi)
    71fc:	aa                   	stos   %al,%es:(%rdi)
    71fd:	aa                   	stos   %al,%es:(%rdi)
    71fe:	aa                   	stos   %al,%es:(%rdi)
    71ff:	aa                   	stos   %al,%es:(%rdi)
    7200:	aa                   	stos   %al,%es:(%rdi)
    7201:	aa                   	stos   %al,%es:(%rdi)
    7202:	aa                   	stos   %al,%es:(%rdi)
    7203:	aa                   	stos   %al,%es:(%rdi)
    7204:	aa                   	stos   %al,%es:(%rdi)
    7205:	aa                   	stos   %al,%es:(%rdi)
    7206:	aa                   	stos   %al,%es:(%rdi)
    7207:	aa                   	stos   %al,%es:(%rdi)
    7208:	aa                   	stos   %al,%es:(%rdi)
    7209:	aa                   	stos   %al,%es:(%rdi)
    720a:	aa                   	stos   %al,%es:(%rdi)
    720b:	aa                   	stos   %al,%es:(%rdi)
    720c:	aa                   	stos   %al,%es:(%rdi)
    720d:	aa                   	stos   %al,%es:(%rdi)
    720e:	aa                   	stos   %al,%es:(%rdi)
    720f:	aa                   	stos   %al,%es:(%rdi)
    7210:	aa                   	stos   %al,%es:(%rdi)
    7211:	aa                   	stos   %al,%es:(%rdi)
    7212:	aa                   	stos   %al,%es:(%rdi)
    7213:	aa                   	stos   %al,%es:(%rdi)
    7214:	aa                   	stos   %al,%es:(%rdi)
    7215:	aa                   	stos   %al,%es:(%rdi)
    7216:	aa                   	stos   %al,%es:(%rdi)
    7217:	aa                   	stos   %al,%es:(%rdi)
    7218:	aa                   	stos   %al,%es:(%rdi)
    7219:	aa                   	stos   %al,%es:(%rdi)
    721a:	aa                   	stos   %al,%es:(%rdi)
    721b:	aa                   	stos   %al,%es:(%rdi)
    721c:	aa                   	stos   %al,%es:(%rdi)
    721d:	aa                   	stos   %al,%es:(%rdi)
    721e:	aa                   	stos   %al,%es:(%rdi)
    721f:	aa                   	stos   %al,%es:(%rdi)
    7220:	aa                   	stos   %al,%es:(%rdi)
    7221:	aa                   	stos   %al,%es:(%rdi)
    7222:	aa                   	stos   %al,%es:(%rdi)
    7223:	aa                   	stos   %al,%es:(%rdi)
    7224:	aa                   	stos   %al,%es:(%rdi)
    7225:	aa                   	stos   %al,%es:(%rdi)
    7226:	aa                   	stos   %al,%es:(%rdi)
    7227:	aa                   	stos   %al,%es:(%rdi)
    7228:	aa                   	stos   %al,%es:(%rdi)
    7229:	aa                   	stos   %al,%es:(%rdi)
    722a:	aa                   	stos   %al,%es:(%rdi)
    722b:	aa                   	stos   %al,%es:(%rdi)
    722c:	aa                   	stos   %al,%es:(%rdi)
    722d:	aa                   	stos   %al,%es:(%rdi)
    722e:	aa                   	stos   %al,%es:(%rdi)
    722f:	aa                   	stos   %al,%es:(%rdi)
    7230:	aa                   	stos   %al,%es:(%rdi)
    7231:	aa                   	stos   %al,%es:(%rdi)
    7232:	aa                   	stos   %al,%es:(%rdi)
    7233:	aa                   	stos   %al,%es:(%rdi)
    7234:	aa                   	stos   %al,%es:(%rdi)
    7235:	aa                   	stos   %al,%es:(%rdi)
    7236:	aa                   	stos   %al,%es:(%rdi)
    7237:	aa                   	stos   %al,%es:(%rdi)
    7238:	aa                   	stos   %al,%es:(%rdi)
    7239:	aa                   	stos   %al,%es:(%rdi)
    723a:	aa                   	stos   %al,%es:(%rdi)
    723b:	aa                   	stos   %al,%es:(%rdi)
    723c:	aa                   	stos   %al,%es:(%rdi)
    723d:	aa                   	stos   %al,%es:(%rdi)
    723e:	aa                   	stos   %al,%es:(%rdi)
    723f:	aa                   	stos   %al,%es:(%rdi)
    7240:	aa                   	stos   %al,%es:(%rdi)
    7241:	aa                   	stos   %al,%es:(%rdi)
    7242:	aa                   	stos   %al,%es:(%rdi)
    7243:	aa                   	stos   %al,%es:(%rdi)
    7244:	aa                   	stos   %al,%es:(%rdi)
    7245:	aa                   	stos   %al,%es:(%rdi)
    7246:	aa                   	stos   %al,%es:(%rdi)
    7247:	aa                   	stos   %al,%es:(%rdi)
    7248:	aa                   	stos   %al,%es:(%rdi)
    7249:	aa                   	stos   %al,%es:(%rdi)
    724a:	aa                   	stos   %al,%es:(%rdi)
    724b:	aa                   	stos   %al,%es:(%rdi)
    724c:	aa                   	stos   %al,%es:(%rdi)
    724d:	aa                   	stos   %al,%es:(%rdi)
    724e:	aa                   	stos   %al,%es:(%rdi)
    724f:	aa                   	stos   %al,%es:(%rdi)
    7250:	aa                   	stos   %al,%es:(%rdi)
    7251:	aa                   	stos   %al,%es:(%rdi)
    7252:	aa                   	stos   %al,%es:(%rdi)
    7253:	aa                   	stos   %al,%es:(%rdi)
    7254:	aa                   	stos   %al,%es:(%rdi)
    7255:	aa                   	stos   %al,%es:(%rdi)
    7256:	aa                   	stos   %al,%es:(%rdi)
    7257:	aa                   	stos   %al,%es:(%rdi)
    7258:	aa                   	stos   %al,%es:(%rdi)
    7259:	aa                   	stos   %al,%es:(%rdi)
    725a:	aa                   	stos   %al,%es:(%rdi)
    725b:	aa                   	stos   %al,%es:(%rdi)
    725c:	aa                   	stos   %al,%es:(%rdi)
    725d:	aa                   	stos   %al,%es:(%rdi)
    725e:	aa                   	stos   %al,%es:(%rdi)
    725f:	aa                   	stos   %al,%es:(%rdi)
    7260:	aa                   	stos   %al,%es:(%rdi)
    7261:	aa                   	stos   %al,%es:(%rdi)
    7262:	aa                   	stos   %al,%es:(%rdi)
    7263:	aa                   	stos   %al,%es:(%rdi)
    7264:	aa                   	stos   %al,%es:(%rdi)
    7265:	aa                   	stos   %al,%es:(%rdi)
    7266:	aa                   	stos   %al,%es:(%rdi)
    7267:	aa                   	stos   %al,%es:(%rdi)
    7268:	aa                   	stos   %al,%es:(%rdi)
    7269:	aa                   	stos   %al,%es:(%rdi)
    726a:	aa                   	stos   %al,%es:(%rdi)
    726b:	aa                   	stos   %al,%es:(%rdi)
    726c:	aa                   	stos   %al,%es:(%rdi)
    726d:	aa                   	stos   %al,%es:(%rdi)
    726e:	aa                   	stos   %al,%es:(%rdi)
    726f:	aa                   	stos   %al,%es:(%rdi)
    7270:	aa                   	stos   %al,%es:(%rdi)
    7271:	aa                   	stos   %al,%es:(%rdi)
    7272:	aa                   	stos   %al,%es:(%rdi)
    7273:	aa                   	stos   %al,%es:(%rdi)
    7274:	aa                   	stos   %al,%es:(%rdi)
    7275:	aa                   	stos   %al,%es:(%rdi)
    7276:	aa                   	stos   %al,%es:(%rdi)
    7277:	aa                   	stos   %al,%es:(%rdi)
    7278:	aa                   	stos   %al,%es:(%rdi)
    7279:	aa                   	stos   %al,%es:(%rdi)
    727a:	aa                   	stos   %al,%es:(%rdi)
    727b:	aa                   	stos   %al,%es:(%rdi)
    727c:	aa                   	stos   %al,%es:(%rdi)
    727d:	aa                   	stos   %al,%es:(%rdi)
    727e:	aa                   	stos   %al,%es:(%rdi)
    727f:	aa                   	stos   %al,%es:(%rdi)
    7280:	aa                   	stos   %al,%es:(%rdi)
    7281:	aa                   	stos   %al,%es:(%rdi)
    7282:	aa                   	stos   %al,%es:(%rdi)
    7283:	aa                   	stos   %al,%es:(%rdi)
    7284:	aa                   	stos   %al,%es:(%rdi)
    7285:	aa                   	stos   %al,%es:(%rdi)
    7286:	aa                   	stos   %al,%es:(%rdi)
    7287:	aa                   	stos   %al,%es:(%rdi)
    7288:	aa                   	stos   %al,%es:(%rdi)
    7289:	aa                   	stos   %al,%es:(%rdi)
    728a:	aa                   	stos   %al,%es:(%rdi)
    728b:	aa                   	stos   %al,%es:(%rdi)
    728c:	aa                   	stos   %al,%es:(%rdi)
    728d:	aa                   	stos   %al,%es:(%rdi)
    728e:	aa                   	stos   %al,%es:(%rdi)
    728f:	aa                   	stos   %al,%es:(%rdi)
    7290:	aa                   	stos   %al,%es:(%rdi)
    7291:	aa                   	stos   %al,%es:(%rdi)
    7292:	aa                   	stos   %al,%es:(%rdi)
    7293:	aa                   	stos   %al,%es:(%rdi)
    7294:	aa                   	stos   %al,%es:(%rdi)
    7295:	aa                   	stos   %al,%es:(%rdi)
    7296:	aa                   	stos   %al,%es:(%rdi)
    7297:	aa                   	stos   %al,%es:(%rdi)
    7298:	aa                   	stos   %al,%es:(%rdi)
    7299:	aa                   	stos   %al,%es:(%rdi)
    729a:	aa                   	stos   %al,%es:(%rdi)
    729b:	aa                   	stos   %al,%es:(%rdi)
    729c:	aa                   	stos   %al,%es:(%rdi)
    729d:	aa                   	stos   %al,%es:(%rdi)
    729e:	aa                   	stos   %al,%es:(%rdi)
    729f:	aa                   	stos   %al,%es:(%rdi)
    72a0:	aa                   	stos   %al,%es:(%rdi)
    72a1:	aa                   	stos   %al,%es:(%rdi)
    72a2:	aa                   	stos   %al,%es:(%rdi)
    72a3:	aa                   	stos   %al,%es:(%rdi)
    72a4:	aa                   	stos   %al,%es:(%rdi)
    72a5:	aa                   	stos   %al,%es:(%rdi)
    72a6:	aa                   	stos   %al,%es:(%rdi)
    72a7:	aa                   	stos   %al,%es:(%rdi)
    72a8:	aa                   	stos   %al,%es:(%rdi)
    72a9:	aa                   	stos   %al,%es:(%rdi)
    72aa:	aa                   	stos   %al,%es:(%rdi)
    72ab:	aa                   	stos   %al,%es:(%rdi)
    72ac:	aa                   	stos   %al,%es:(%rdi)
    72ad:	aa                   	stos   %al,%es:(%rdi)
    72ae:	aa                   	stos   %al,%es:(%rdi)
    72af:	aa                   	stos   %al,%es:(%rdi)
    72b0:	aa                   	stos   %al,%es:(%rdi)
    72b1:	aa                   	stos   %al,%es:(%rdi)
    72b2:	aa                   	stos   %al,%es:(%rdi)
    72b3:	aa                   	stos   %al,%es:(%rdi)
    72b4:	aa                   	stos   %al,%es:(%rdi)
    72b5:	aa                   	stos   %al,%es:(%rdi)
    72b6:	aa                   	stos   %al,%es:(%rdi)
    72b7:	aa                   	stos   %al,%es:(%rdi)
    72b8:	aa                   	stos   %al,%es:(%rdi)
    72b9:	aa                   	stos   %al,%es:(%rdi)
    72ba:	aa                   	stos   %al,%es:(%rdi)
    72bb:	aa                   	stos   %al,%es:(%rdi)
    72bc:	aa                   	stos   %al,%es:(%rdi)
    72bd:	aa                   	stos   %al,%es:(%rdi)
    72be:	aa                   	stos   %al,%es:(%rdi)
    72bf:	aa                   	stos   %al,%es:(%rdi)
    72c0:	aa                   	stos   %al,%es:(%rdi)
    72c1:	aa                   	stos   %al,%es:(%rdi)
    72c2:	aa                   	stos   %al,%es:(%rdi)
    72c3:	aa                   	stos   %al,%es:(%rdi)
    72c4:	aa                   	stos   %al,%es:(%rdi)
    72c5:	aa                   	stos   %al,%es:(%rdi)
    72c6:	aa                   	stos   %al,%es:(%rdi)
    72c7:	aa                   	stos   %al,%es:(%rdi)
    72c8:	aa                   	stos   %al,%es:(%rdi)
    72c9:	aa                   	stos   %al,%es:(%rdi)
    72ca:	aa                   	stos   %al,%es:(%rdi)
    72cb:	aa                   	stos   %al,%es:(%rdi)
    72cc:	aa                   	stos   %al,%es:(%rdi)
    72cd:	aa                   	stos   %al,%es:(%rdi)
    72ce:	aa                   	stos   %al,%es:(%rdi)
    72cf:	aa                   	stos   %al,%es:(%rdi)
    72d0:	aa                   	stos   %al,%es:(%rdi)
    72d1:	aa                   	stos   %al,%es:(%rdi)
    72d2:	aa                   	stos   %al,%es:(%rdi)
    72d3:	aa                   	stos   %al,%es:(%rdi)
    72d4:	aa                   	stos   %al,%es:(%rdi)
    72d5:	aa                   	stos   %al,%es:(%rdi)
    72d6:	aa                   	stos   %al,%es:(%rdi)
    72d7:	aa                   	stos   %al,%es:(%rdi)
    72d8:	aa                   	stos   %al,%es:(%rdi)
    72d9:	aa                   	stos   %al,%es:(%rdi)
    72da:	aa                   	stos   %al,%es:(%rdi)
    72db:	aa                   	stos   %al,%es:(%rdi)
    72dc:	aa                   	stos   %al,%es:(%rdi)
    72dd:	aa                   	stos   %al,%es:(%rdi)
    72de:	aa                   	stos   %al,%es:(%rdi)
    72df:	aa                   	stos   %al,%es:(%rdi)
    72e0:	aa                   	stos   %al,%es:(%rdi)
    72e1:	aa                   	stos   %al,%es:(%rdi)
    72e2:	aa                   	stos   %al,%es:(%rdi)
    72e3:	aa                   	stos   %al,%es:(%rdi)
    72e4:	aa                   	stos   %al,%es:(%rdi)
    72e5:	aa                   	stos   %al,%es:(%rdi)
    72e6:	aa                   	stos   %al,%es:(%rdi)
    72e7:	aa                   	stos   %al,%es:(%rdi)
    72e8:	aa                   	stos   %al,%es:(%rdi)
    72e9:	aa                   	stos   %al,%es:(%rdi)
    72ea:	aa                   	stos   %al,%es:(%rdi)
    72eb:	aa                   	stos   %al,%es:(%rdi)
    72ec:	aa                   	stos   %al,%es:(%rdi)
    72ed:	aa                   	stos   %al,%es:(%rdi)
    72ee:	aa                   	stos   %al,%es:(%rdi)
    72ef:	aa                   	stos   %al,%es:(%rdi)
    72f0:	aa                   	stos   %al,%es:(%rdi)
    72f1:	aa                   	stos   %al,%es:(%rdi)
    72f2:	aa                   	stos   %al,%es:(%rdi)
    72f3:	aa                   	stos   %al,%es:(%rdi)
    72f4:	aa                   	stos   %al,%es:(%rdi)
    72f5:	aa                   	stos   %al,%es:(%rdi)
    72f6:	aa                   	stos   %al,%es:(%rdi)
    72f7:	aa                   	stos   %al,%es:(%rdi)
    72f8:	aa                   	stos   %al,%es:(%rdi)
    72f9:	aa                   	stos   %al,%es:(%rdi)
    72fa:	aa                   	stos   %al,%es:(%rdi)
    72fb:	aa                   	stos   %al,%es:(%rdi)
    72fc:	aa                   	stos   %al,%es:(%rdi)
    72fd:	aa                   	stos   %al,%es:(%rdi)
    72fe:	aa                   	stos   %al,%es:(%rdi)
    72ff:	aa                   	stos   %al,%es:(%rdi)
    7300:	aa                   	stos   %al,%es:(%rdi)
    7301:	aa                   	stos   %al,%es:(%rdi)
    7302:	aa                   	stos   %al,%es:(%rdi)
    7303:	aa                   	stos   %al,%es:(%rdi)
    7304:	aa                   	stos   %al,%es:(%rdi)
    7305:	aa                   	stos   %al,%es:(%rdi)
    7306:	aa                   	stos   %al,%es:(%rdi)
    7307:	aa                   	stos   %al,%es:(%rdi)
    7308:	aa                   	stos   %al,%es:(%rdi)
    7309:	aa                   	stos   %al,%es:(%rdi)
    730a:	aa                   	stos   %al,%es:(%rdi)
    730b:	aa                   	stos   %al,%es:(%rdi)
    730c:	aa                   	stos   %al,%es:(%rdi)
    730d:	aa                   	stos   %al,%es:(%rdi)
    730e:	aa                   	stos   %al,%es:(%rdi)
    730f:	aa                   	stos   %al,%es:(%rdi)
    7310:	aa                   	stos   %al,%es:(%rdi)
    7311:	aa                   	stos   %al,%es:(%rdi)
    7312:	aa                   	stos   %al,%es:(%rdi)
    7313:	aa                   	stos   %al,%es:(%rdi)
    7314:	aa                   	stos   %al,%es:(%rdi)
    7315:	aa                   	stos   %al,%es:(%rdi)
    7316:	aa                   	stos   %al,%es:(%rdi)
    7317:	aa                   	stos   %al,%es:(%rdi)
    7318:	aa                   	stos   %al,%es:(%rdi)
    7319:	aa                   	stos   %al,%es:(%rdi)
    731a:	aa                   	stos   %al,%es:(%rdi)
    731b:	aa                   	stos   %al,%es:(%rdi)
    731c:	aa                   	stos   %al,%es:(%rdi)
    731d:	aa                   	stos   %al,%es:(%rdi)
    731e:	aa                   	stos   %al,%es:(%rdi)
    731f:	aa                   	stos   %al,%es:(%rdi)
    7320:	aa                   	stos   %al,%es:(%rdi)
    7321:	aa                   	stos   %al,%es:(%rdi)
    7322:	aa                   	stos   %al,%es:(%rdi)
    7323:	aa                   	stos   %al,%es:(%rdi)
    7324:	aa                   	stos   %al,%es:(%rdi)
    7325:	aa                   	stos   %al,%es:(%rdi)
    7326:	aa                   	stos   %al,%es:(%rdi)
    7327:	aa                   	stos   %al,%es:(%rdi)
    7328:	aa                   	stos   %al,%es:(%rdi)
    7329:	aa                   	stos   %al,%es:(%rdi)
    732a:	aa                   	stos   %al,%es:(%rdi)
    732b:	aa                   	stos   %al,%es:(%rdi)
    732c:	aa                   	stos   %al,%es:(%rdi)
    732d:	aa                   	stos   %al,%es:(%rdi)
    732e:	aa                   	stos   %al,%es:(%rdi)
    732f:	aa                   	stos   %al,%es:(%rdi)
    7330:	aa                   	stos   %al,%es:(%rdi)
    7331:	aa                   	stos   %al,%es:(%rdi)
    7332:	aa                   	stos   %al,%es:(%rdi)
    7333:	aa                   	stos   %al,%es:(%rdi)
    7334:	aa                   	stos   %al,%es:(%rdi)
    7335:	aa                   	stos   %al,%es:(%rdi)
    7336:	aa                   	stos   %al,%es:(%rdi)
    7337:	aa                   	stos   %al,%es:(%rdi)
    7338:	aa                   	stos   %al,%es:(%rdi)
    7339:	aa                   	stos   %al,%es:(%rdi)
    733a:	aa                   	stos   %al,%es:(%rdi)
    733b:	aa                   	stos   %al,%es:(%rdi)
    733c:	aa                   	stos   %al,%es:(%rdi)
    733d:	aa                   	stos   %al,%es:(%rdi)
    733e:	aa                   	stos   %al,%es:(%rdi)
    733f:	aa                   	stos   %al,%es:(%rdi)
    7340:	aa                   	stos   %al,%es:(%rdi)
    7341:	aa                   	stos   %al,%es:(%rdi)
    7342:	aa                   	stos   %al,%es:(%rdi)
    7343:	aa                   	stos   %al,%es:(%rdi)
    7344:	aa                   	stos   %al,%es:(%rdi)
    7345:	aa                   	stos   %al,%es:(%rdi)
    7346:	aa                   	stos   %al,%es:(%rdi)
    7347:	aa                   	stos   %al,%es:(%rdi)
    7348:	aa                   	stos   %al,%es:(%rdi)
    7349:	aa                   	stos   %al,%es:(%rdi)
    734a:	aa                   	stos   %al,%es:(%rdi)
    734b:	aa                   	stos   %al,%es:(%rdi)
    734c:	aa                   	stos   %al,%es:(%rdi)
    734d:	aa                   	stos   %al,%es:(%rdi)
    734e:	aa                   	stos   %al,%es:(%rdi)
    734f:	aa                   	stos   %al,%es:(%rdi)
    7350:	aa                   	stos   %al,%es:(%rdi)
    7351:	aa                   	stos   %al,%es:(%rdi)
    7352:	aa                   	stos   %al,%es:(%rdi)
    7353:	aa                   	stos   %al,%es:(%rdi)
    7354:	aa                   	stos   %al,%es:(%rdi)
    7355:	aa                   	stos   %al,%es:(%rdi)
    7356:	aa                   	stos   %al,%es:(%rdi)
    7357:	aa                   	stos   %al,%es:(%rdi)
    7358:	aa                   	stos   %al,%es:(%rdi)
    7359:	aa                   	stos   %al,%es:(%rdi)
    735a:	aa                   	stos   %al,%es:(%rdi)
    735b:	aa                   	stos   %al,%es:(%rdi)
    735c:	aa                   	stos   %al,%es:(%rdi)
    735d:	aa                   	stos   %al,%es:(%rdi)
    735e:	aa                   	stos   %al,%es:(%rdi)
    735f:	aa                   	stos   %al,%es:(%rdi)
    7360:	aa                   	stos   %al,%es:(%rdi)
    7361:	aa                   	stos   %al,%es:(%rdi)
    7362:	aa                   	stos   %al,%es:(%rdi)
    7363:	aa                   	stos   %al,%es:(%rdi)
    7364:	aa                   	stos   %al,%es:(%rdi)
    7365:	aa                   	stos   %al,%es:(%rdi)
    7366:	aa                   	stos   %al,%es:(%rdi)
    7367:	aa                   	stos   %al,%es:(%rdi)
    7368:	aa                   	stos   %al,%es:(%rdi)
    7369:	aa                   	stos   %al,%es:(%rdi)
    736a:	aa                   	stos   %al,%es:(%rdi)
    736b:	aa                   	stos   %al,%es:(%rdi)
    736c:	aa                   	stos   %al,%es:(%rdi)
    736d:	aa                   	stos   %al,%es:(%rdi)
    736e:	aa                   	stos   %al,%es:(%rdi)
    736f:	aa                   	stos   %al,%es:(%rdi)
    7370:	aa                   	stos   %al,%es:(%rdi)
    7371:	aa                   	stos   %al,%es:(%rdi)
    7372:	aa                   	stos   %al,%es:(%rdi)
    7373:	aa                   	stos   %al,%es:(%rdi)
    7374:	aa                   	stos   %al,%es:(%rdi)
    7375:	aa                   	stos   %al,%es:(%rdi)
    7376:	aa                   	stos   %al,%es:(%rdi)
    7377:	aa                   	stos   %al,%es:(%rdi)
    7378:	aa                   	stos   %al,%es:(%rdi)
    7379:	aa                   	stos   %al,%es:(%rdi)
    737a:	aa                   	stos   %al,%es:(%rdi)
    737b:	aa                   	stos   %al,%es:(%rdi)
    737c:	aa                   	stos   %al,%es:(%rdi)
    737d:	aa                   	stos   %al,%es:(%rdi)
    737e:	aa                   	stos   %al,%es:(%rdi)
    737f:	aa                   	stos   %al,%es:(%rdi)
    7380:	aa                   	stos   %al,%es:(%rdi)
    7381:	aa                   	stos   %al,%es:(%rdi)
    7382:	aa                   	stos   %al,%es:(%rdi)
    7383:	aa                   	stos   %al,%es:(%rdi)
    7384:	aa                   	stos   %al,%es:(%rdi)
    7385:	aa                   	stos   %al,%es:(%rdi)
    7386:	aa                   	stos   %al,%es:(%rdi)
    7387:	aa                   	stos   %al,%es:(%rdi)
    7388:	aa                   	stos   %al,%es:(%rdi)
    7389:	aa                   	stos   %al,%es:(%rdi)
    738a:	aa                   	stos   %al,%es:(%rdi)
    738b:	aa                   	stos   %al,%es:(%rdi)
    738c:	aa                   	stos   %al,%es:(%rdi)
    738d:	aa                   	stos   %al,%es:(%rdi)
    738e:	aa                   	stos   %al,%es:(%rdi)
    738f:	aa                   	stos   %al,%es:(%rdi)
    7390:	aa                   	stos   %al,%es:(%rdi)
    7391:	aa                   	stos   %al,%es:(%rdi)
    7392:	aa                   	stos   %al,%es:(%rdi)
    7393:	aa                   	stos   %al,%es:(%rdi)
    7394:	aa                   	stos   %al,%es:(%rdi)
    7395:	aa                   	stos   %al,%es:(%rdi)
    7396:	aa                   	stos   %al,%es:(%rdi)
    7397:	aa                   	stos   %al,%es:(%rdi)
    7398:	aa                   	stos   %al,%es:(%rdi)
    7399:	aa                   	stos   %al,%es:(%rdi)
    739a:	aa                   	stos   %al,%es:(%rdi)
    739b:	aa                   	stos   %al,%es:(%rdi)
    739c:	aa                   	stos   %al,%es:(%rdi)
    739d:	aa                   	stos   %al,%es:(%rdi)
    739e:	aa                   	stos   %al,%es:(%rdi)
    739f:	aa                   	stos   %al,%es:(%rdi)
    73a0:	aa                   	stos   %al,%es:(%rdi)
    73a1:	aa                   	stos   %al,%es:(%rdi)
    73a2:	aa                   	stos   %al,%es:(%rdi)
    73a3:	aa                   	stos   %al,%es:(%rdi)
    73a4:	aa                   	stos   %al,%es:(%rdi)
    73a5:	aa                   	stos   %al,%es:(%rdi)
    73a6:	aa                   	stos   %al,%es:(%rdi)
    73a7:	aa                   	stos   %al,%es:(%rdi)
    73a8:	aa                   	stos   %al,%es:(%rdi)
    73a9:	aa                   	stos   %al,%es:(%rdi)
    73aa:	aa                   	stos   %al,%es:(%rdi)
    73ab:	aa                   	stos   %al,%es:(%rdi)
    73ac:	aa                   	stos   %al,%es:(%rdi)
    73ad:	aa                   	stos   %al,%es:(%rdi)
    73ae:	aa                   	stos   %al,%es:(%rdi)
    73af:	aa                   	stos   %al,%es:(%rdi)
    73b0:	aa                   	stos   %al,%es:(%rdi)
    73b1:	aa                   	stos   %al,%es:(%rdi)
    73b2:	aa                   	stos   %al,%es:(%rdi)
    73b3:	aa                   	stos   %al,%es:(%rdi)
    73b4:	aa                   	stos   %al,%es:(%rdi)
    73b5:	aa                   	stos   %al,%es:(%rdi)
    73b6:	aa                   	stos   %al,%es:(%rdi)
    73b7:	aa                   	stos   %al,%es:(%rdi)
    73b8:	aa                   	stos   %al,%es:(%rdi)
    73b9:	aa                   	stos   %al,%es:(%rdi)
    73ba:	aa                   	stos   %al,%es:(%rdi)
    73bb:	aa                   	stos   %al,%es:(%rdi)
    73bc:	aa                   	stos   %al,%es:(%rdi)
    73bd:	aa                   	stos   %al,%es:(%rdi)
    73be:	aa                   	stos   %al,%es:(%rdi)
    73bf:	aa                   	stos   %al,%es:(%rdi)
    73c0:	aa                   	stos   %al,%es:(%rdi)
    73c1:	aa                   	stos   %al,%es:(%rdi)
    73c2:	aa                   	stos   %al,%es:(%rdi)
    73c3:	aa                   	stos   %al,%es:(%rdi)
    73c4:	aa                   	stos   %al,%es:(%rdi)
    73c5:	aa                   	stos   %al,%es:(%rdi)
    73c6:	aa                   	stos   %al,%es:(%rdi)
    73c7:	aa                   	stos   %al,%es:(%rdi)
    73c8:	aa                   	stos   %al,%es:(%rdi)
    73c9:	aa                   	stos   %al,%es:(%rdi)
    73ca:	aa                   	stos   %al,%es:(%rdi)
    73cb:	aa                   	stos   %al,%es:(%rdi)
    73cc:	aa                   	stos   %al,%es:(%rdi)
    73cd:	aa                   	stos   %al,%es:(%rdi)
    73ce:	aa                   	stos   %al,%es:(%rdi)
    73cf:	aa                   	stos   %al,%es:(%rdi)
    73d0:	aa                   	stos   %al,%es:(%rdi)
    73d1:	aa                   	stos   %al,%es:(%rdi)
    73d2:	aa                   	stos   %al,%es:(%rdi)
    73d3:	aa                   	stos   %al,%es:(%rdi)
    73d4:	aa                   	stos   %al,%es:(%rdi)
    73d5:	aa                   	stos   %al,%es:(%rdi)
    73d6:	aa                   	stos   %al,%es:(%rdi)
    73d7:	aa                   	stos   %al,%es:(%rdi)
    73d8:	aa                   	stos   %al,%es:(%rdi)
    73d9:	aa                   	stos   %al,%es:(%rdi)
    73da:	aa                   	stos   %al,%es:(%rdi)
    73db:	aa                   	stos   %al,%es:(%rdi)
    73dc:	aa                   	stos   %al,%es:(%rdi)
    73dd:	aa                   	stos   %al,%es:(%rdi)
    73de:	aa                   	stos   %al,%es:(%rdi)
    73df:	aa                   	stos   %al,%es:(%rdi)
    73e0:	aa                   	stos   %al,%es:(%rdi)
    73e1:	aa                   	stos   %al,%es:(%rdi)
    73e2:	aa                   	stos   %al,%es:(%rdi)
    73e3:	aa                   	stos   %al,%es:(%rdi)
    73e4:	aa                   	stos   %al,%es:(%rdi)
    73e5:	aa                   	stos   %al,%es:(%rdi)
    73e6:	aa                   	stos   %al,%es:(%rdi)
    73e7:	aa                   	stos   %al,%es:(%rdi)
    73e8:	aa                   	stos   %al,%es:(%rdi)
    73e9:	aa                   	stos   %al,%es:(%rdi)
    73ea:	aa                   	stos   %al,%es:(%rdi)
    73eb:	aa                   	stos   %al,%es:(%rdi)
    73ec:	aa                   	stos   %al,%es:(%rdi)
    73ed:	aa                   	stos   %al,%es:(%rdi)
    73ee:	aa                   	stos   %al,%es:(%rdi)
    73ef:	aa                   	stos   %al,%es:(%rdi)
    73f0:	aa                   	stos   %al,%es:(%rdi)
    73f1:	aa                   	stos   %al,%es:(%rdi)
    73f2:	aa                   	stos   %al,%es:(%rdi)
    73f3:	aa                   	stos   %al,%es:(%rdi)
    73f4:	aa                   	stos   %al,%es:(%rdi)
    73f5:	aa                   	stos   %al,%es:(%rdi)
    73f6:	aa                   	stos   %al,%es:(%rdi)
    73f7:	aa                   	stos   %al,%es:(%rdi)
    73f8:	aa                   	stos   %al,%es:(%rdi)
    73f9:	aa                   	stos   %al,%es:(%rdi)
    73fa:	aa                   	stos   %al,%es:(%rdi)
    73fb:	aa                   	stos   %al,%es:(%rdi)
    73fc:	aa                   	stos   %al,%es:(%rdi)
    73fd:	aa                   	stos   %al,%es:(%rdi)
    73fe:	aa                   	stos   %al,%es:(%rdi)
    73ff:	aa                   	stos   %al,%es:(%rdi)
    7400:	aa                   	stos   %al,%es:(%rdi)
    7401:	aa                   	stos   %al,%es:(%rdi)
    7402:	aa                   	stos   %al,%es:(%rdi)
    7403:	aa                   	stos   %al,%es:(%rdi)
    7404:	aa                   	stos   %al,%es:(%rdi)
    7405:	aa                   	stos   %al,%es:(%rdi)
    7406:	aa                   	stos   %al,%es:(%rdi)
    7407:	aa                   	stos   %al,%es:(%rdi)
    7408:	aa                   	stos   %al,%es:(%rdi)
    7409:	aa                   	stos   %al,%es:(%rdi)
    740a:	aa                   	stos   %al,%es:(%rdi)
    740b:	aa                   	stos   %al,%es:(%rdi)
    740c:	aa                   	stos   %al,%es:(%rdi)
    740d:	aa                   	stos   %al,%es:(%rdi)
    740e:	aa                   	stos   %al,%es:(%rdi)
    740f:	aa                   	stos   %al,%es:(%rdi)
    7410:	aa                   	stos   %al,%es:(%rdi)
    7411:	aa                   	stos   %al,%es:(%rdi)
    7412:	aa                   	stos   %al,%es:(%rdi)
    7413:	aa                   	stos   %al,%es:(%rdi)
    7414:	aa                   	stos   %al,%es:(%rdi)
    7415:	aa                   	stos   %al,%es:(%rdi)
    7416:	aa                   	stos   %al,%es:(%rdi)
    7417:	aa                   	stos   %al,%es:(%rdi)
    7418:	aa                   	stos   %al,%es:(%rdi)
    7419:	aa                   	stos   %al,%es:(%rdi)
    741a:	aa                   	stos   %al,%es:(%rdi)
    741b:	aa                   	stos   %al,%es:(%rdi)
    741c:	aa                   	stos   %al,%es:(%rdi)
    741d:	aa                   	stos   %al,%es:(%rdi)
    741e:	aa                   	stos   %al,%es:(%rdi)
    741f:	aa                   	stos   %al,%es:(%rdi)
    7420:	aa                   	stos   %al,%es:(%rdi)
    7421:	aa                   	stos   %al,%es:(%rdi)
    7422:	aa                   	stos   %al,%es:(%rdi)
    7423:	aa                   	stos   %al,%es:(%rdi)
    7424:	aa                   	stos   %al,%es:(%rdi)
    7425:	aa                   	stos   %al,%es:(%rdi)
    7426:	aa                   	stos   %al,%es:(%rdi)
    7427:	aa                   	stos   %al,%es:(%rdi)
    7428:	aa                   	stos   %al,%es:(%rdi)
    7429:	aa                   	stos   %al,%es:(%rdi)
    742a:	aa                   	stos   %al,%es:(%rdi)
    742b:	aa                   	stos   %al,%es:(%rdi)
    742c:	aa                   	stos   %al,%es:(%rdi)
    742d:	aa                   	stos   %al,%es:(%rdi)
    742e:	aa                   	stos   %al,%es:(%rdi)
    742f:	aa                   	stos   %al,%es:(%rdi)
    7430:	aa                   	stos   %al,%es:(%rdi)
    7431:	aa                   	stos   %al,%es:(%rdi)
    7432:	aa                   	stos   %al,%es:(%rdi)
    7433:	aa                   	stos   %al,%es:(%rdi)
    7434:	aa                   	stos   %al,%es:(%rdi)
    7435:	aa                   	stos   %al,%es:(%rdi)
    7436:	aa                   	stos   %al,%es:(%rdi)
    7437:	aa                   	stos   %al,%es:(%rdi)
    7438:	aa                   	stos   %al,%es:(%rdi)
    7439:	aa                   	stos   %al,%es:(%rdi)
    743a:	aa                   	stos   %al,%es:(%rdi)
    743b:	aa                   	stos   %al,%es:(%rdi)
    743c:	aa                   	stos   %al,%es:(%rdi)
    743d:	aa                   	stos   %al,%es:(%rdi)
    743e:	aa                   	stos   %al,%es:(%rdi)
    743f:	aa                   	stos   %al,%es:(%rdi)
    7440:	aa                   	stos   %al,%es:(%rdi)
    7441:	aa                   	stos   %al,%es:(%rdi)
    7442:	aa                   	stos   %al,%es:(%rdi)
    7443:	aa                   	stos   %al,%es:(%rdi)
    7444:	aa                   	stos   %al,%es:(%rdi)
    7445:	aa                   	stos   %al,%es:(%rdi)
    7446:	aa                   	stos   %al,%es:(%rdi)
    7447:	aa                   	stos   %al,%es:(%rdi)
    7448:	aa                   	stos   %al,%es:(%rdi)
    7449:	aa                   	stos   %al,%es:(%rdi)
    744a:	aa                   	stos   %al,%es:(%rdi)
    744b:	aa                   	stos   %al,%es:(%rdi)
    744c:	aa                   	stos   %al,%es:(%rdi)
    744d:	aa                   	stos   %al,%es:(%rdi)
    744e:	aa                   	stos   %al,%es:(%rdi)
    744f:	aa                   	stos   %al,%es:(%rdi)
    7450:	aa                   	stos   %al,%es:(%rdi)
    7451:	aa                   	stos   %al,%es:(%rdi)
    7452:	aa                   	stos   %al,%es:(%rdi)
    7453:	aa                   	stos   %al,%es:(%rdi)
    7454:	aa                   	stos   %al,%es:(%rdi)
    7455:	aa                   	stos   %al,%es:(%rdi)
    7456:	aa                   	stos   %al,%es:(%rdi)
    7457:	aa                   	stos   %al,%es:(%rdi)
    7458:	aa                   	stos   %al,%es:(%rdi)
    7459:	aa                   	stos   %al,%es:(%rdi)
    745a:	aa                   	stos   %al,%es:(%rdi)
    745b:	aa                   	stos   %al,%es:(%rdi)
    745c:	aa                   	stos   %al,%es:(%rdi)
    745d:	aa                   	stos   %al,%es:(%rdi)
    745e:	aa                   	stos   %al,%es:(%rdi)
    745f:	aa                   	stos   %al,%es:(%rdi)
    7460:	aa                   	stos   %al,%es:(%rdi)
    7461:	aa                   	stos   %al,%es:(%rdi)
    7462:	aa                   	stos   %al,%es:(%rdi)
    7463:	aa                   	stos   %al,%es:(%rdi)
    7464:	aa                   	stos   %al,%es:(%rdi)
    7465:	aa                   	stos   %al,%es:(%rdi)
    7466:	aa                   	stos   %al,%es:(%rdi)
    7467:	aa                   	stos   %al,%es:(%rdi)
    7468:	aa                   	stos   %al,%es:(%rdi)
    7469:	aa                   	stos   %al,%es:(%rdi)
    746a:	aa                   	stos   %al,%es:(%rdi)
    746b:	aa                   	stos   %al,%es:(%rdi)
    746c:	aa                   	stos   %al,%es:(%rdi)
    746d:	aa                   	stos   %al,%es:(%rdi)
    746e:	aa                   	stos   %al,%es:(%rdi)
    746f:	aa                   	stos   %al,%es:(%rdi)
    7470:	aa                   	stos   %al,%es:(%rdi)
    7471:	aa                   	stos   %al,%es:(%rdi)
    7472:	aa                   	stos   %al,%es:(%rdi)
    7473:	aa                   	stos   %al,%es:(%rdi)
    7474:	aa                   	stos   %al,%es:(%rdi)
    7475:	aa                   	stos   %al,%es:(%rdi)
    7476:	aa                   	stos   %al,%es:(%rdi)
    7477:	aa                   	stos   %al,%es:(%rdi)
    7478:	aa                   	stos   %al,%es:(%rdi)
    7479:	aa                   	stos   %al,%es:(%rdi)
    747a:	aa                   	stos   %al,%es:(%rdi)
    747b:	aa                   	stos   %al,%es:(%rdi)
    747c:	aa                   	stos   %al,%es:(%rdi)
    747d:	aa                   	stos   %al,%es:(%rdi)
    747e:	aa                   	stos   %al,%es:(%rdi)
    747f:	aa                   	stos   %al,%es:(%rdi)
    7480:	aa                   	stos   %al,%es:(%rdi)
    7481:	aa                   	stos   %al,%es:(%rdi)
    7482:	aa                   	stos   %al,%es:(%rdi)
    7483:	aa                   	stos   %al,%es:(%rdi)
    7484:	aa                   	stos   %al,%es:(%rdi)
    7485:	aa                   	stos   %al,%es:(%rdi)
    7486:	aa                   	stos   %al,%es:(%rdi)
    7487:	aa                   	stos   %al,%es:(%rdi)
    7488:	aa                   	stos   %al,%es:(%rdi)
    7489:	aa                   	stos   %al,%es:(%rdi)
    748a:	aa                   	stos   %al,%es:(%rdi)
    748b:	aa                   	stos   %al,%es:(%rdi)
    748c:	aa                   	stos   %al,%es:(%rdi)
    748d:	aa                   	stos   %al,%es:(%rdi)
    748e:	aa                   	stos   %al,%es:(%rdi)
    748f:	aa                   	stos   %al,%es:(%rdi)
    7490:	aa                   	stos   %al,%es:(%rdi)
    7491:	aa                   	stos   %al,%es:(%rdi)
    7492:	aa                   	stos   %al,%es:(%rdi)
    7493:	aa                   	stos   %al,%es:(%rdi)
    7494:	aa                   	stos   %al,%es:(%rdi)
    7495:	aa                   	stos   %al,%es:(%rdi)
    7496:	aa                   	stos   %al,%es:(%rdi)
    7497:	aa                   	stos   %al,%es:(%rdi)
    7498:	aa                   	stos   %al,%es:(%rdi)
    7499:	aa                   	stos   %al,%es:(%rdi)
    749a:	aa                   	stos   %al,%es:(%rdi)
    749b:	aa                   	stos   %al,%es:(%rdi)
    749c:	aa                   	stos   %al,%es:(%rdi)
    749d:	aa                   	stos   %al,%es:(%rdi)
    749e:	aa                   	stos   %al,%es:(%rdi)
    749f:	aa                   	stos   %al,%es:(%rdi)
    74a0:	aa                   	stos   %al,%es:(%rdi)
    74a1:	aa                   	stos   %al,%es:(%rdi)
    74a2:	aa                   	stos   %al,%es:(%rdi)
    74a3:	aa                   	stos   %al,%es:(%rdi)
    74a4:	aa                   	stos   %al,%es:(%rdi)
    74a5:	aa                   	stos   %al,%es:(%rdi)
    74a6:	aa                   	stos   %al,%es:(%rdi)
    74a7:	aa                   	stos   %al,%es:(%rdi)
    74a8:	aa                   	stos   %al,%es:(%rdi)
    74a9:	aa                   	stos   %al,%es:(%rdi)
    74aa:	aa                   	stos   %al,%es:(%rdi)
    74ab:	aa                   	stos   %al,%es:(%rdi)
    74ac:	aa                   	stos   %al,%es:(%rdi)
    74ad:	aa                   	stos   %al,%es:(%rdi)
    74ae:	aa                   	stos   %al,%es:(%rdi)
    74af:	aa                   	stos   %al,%es:(%rdi)
    74b0:	aa                   	stos   %al,%es:(%rdi)
    74b1:	aa                   	stos   %al,%es:(%rdi)
    74b2:	aa                   	stos   %al,%es:(%rdi)
    74b3:	aa                   	stos   %al,%es:(%rdi)
    74b4:	aa                   	stos   %al,%es:(%rdi)
    74b5:	aa                   	stos   %al,%es:(%rdi)
    74b6:	aa                   	stos   %al,%es:(%rdi)
    74b7:	aa                   	stos   %al,%es:(%rdi)
    74b8:	aa                   	stos   %al,%es:(%rdi)
    74b9:	aa                   	stos   %al,%es:(%rdi)
    74ba:	aa                   	stos   %al,%es:(%rdi)
    74bb:	aa                   	stos   %al,%es:(%rdi)
    74bc:	aa                   	stos   %al,%es:(%rdi)
    74bd:	aa                   	stos   %al,%es:(%rdi)
    74be:	aa                   	stos   %al,%es:(%rdi)
    74bf:	aa                   	stos   %al,%es:(%rdi)
    74c0:	aa                   	stos   %al,%es:(%rdi)
    74c1:	aa                   	stos   %al,%es:(%rdi)
    74c2:	aa                   	stos   %al,%es:(%rdi)
    74c3:	aa                   	stos   %al,%es:(%rdi)
    74c4:	aa                   	stos   %al,%es:(%rdi)
    74c5:	aa                   	stos   %al,%es:(%rdi)
    74c6:	aa                   	stos   %al,%es:(%rdi)
    74c7:	aa                   	stos   %al,%es:(%rdi)
    74c8:	aa                   	stos   %al,%es:(%rdi)
    74c9:	aa                   	stos   %al,%es:(%rdi)
    74ca:	aa                   	stos   %al,%es:(%rdi)
    74cb:	aa                   	stos   %al,%es:(%rdi)
    74cc:	aa                   	stos   %al,%es:(%rdi)
    74cd:	aa                   	stos   %al,%es:(%rdi)
    74ce:	aa                   	stos   %al,%es:(%rdi)
    74cf:	aa                   	stos   %al,%es:(%rdi)
    74d0:	aa                   	stos   %al,%es:(%rdi)
    74d1:	aa                   	stos   %al,%es:(%rdi)
    74d2:	aa                   	stos   %al,%es:(%rdi)
    74d3:	aa                   	stos   %al,%es:(%rdi)
    74d4:	aa                   	stos   %al,%es:(%rdi)
    74d5:	aa                   	stos   %al,%es:(%rdi)
    74d6:	aa                   	stos   %al,%es:(%rdi)
    74d7:	aa                   	stos   %al,%es:(%rdi)
    74d8:	aa                   	stos   %al,%es:(%rdi)
    74d9:	aa                   	stos   %al,%es:(%rdi)
    74da:	aa                   	stos   %al,%es:(%rdi)
    74db:	aa                   	stos   %al,%es:(%rdi)
    74dc:	aa                   	stos   %al,%es:(%rdi)
    74dd:	aa                   	stos   %al,%es:(%rdi)
    74de:	aa                   	stos   %al,%es:(%rdi)
    74df:	aa                   	stos   %al,%es:(%rdi)
    74e0:	aa                   	stos   %al,%es:(%rdi)
    74e1:	aa                   	stos   %al,%es:(%rdi)
    74e2:	aa                   	stos   %al,%es:(%rdi)
    74e3:	aa                   	stos   %al,%es:(%rdi)
    74e4:	aa                   	stos   %al,%es:(%rdi)
    74e5:	aa                   	stos   %al,%es:(%rdi)
    74e6:	aa                   	stos   %al,%es:(%rdi)
    74e7:	aa                   	stos   %al,%es:(%rdi)
    74e8:	aa                   	stos   %al,%es:(%rdi)
    74e9:	aa                   	stos   %al,%es:(%rdi)
    74ea:	aa                   	stos   %al,%es:(%rdi)
    74eb:	aa                   	stos   %al,%es:(%rdi)
    74ec:	aa                   	stos   %al,%es:(%rdi)
    74ed:	aa                   	stos   %al,%es:(%rdi)
    74ee:	aa                   	stos   %al,%es:(%rdi)
    74ef:	aa                   	stos   %al,%es:(%rdi)
    74f0:	aa                   	stos   %al,%es:(%rdi)
    74f1:	aa                   	stos   %al,%es:(%rdi)
    74f2:	aa                   	stos   %al,%es:(%rdi)
    74f3:	aa                   	stos   %al,%es:(%rdi)
    74f4:	aa                   	stos   %al,%es:(%rdi)
    74f5:	aa                   	stos   %al,%es:(%rdi)
    74f6:	aa                   	stos   %al,%es:(%rdi)
    74f7:	aa                   	stos   %al,%es:(%rdi)
    74f8:	aa                   	stos   %al,%es:(%rdi)
    74f9:	aa                   	stos   %al,%es:(%rdi)
    74fa:	aa                   	stos   %al,%es:(%rdi)
    74fb:	aa                   	stos   %al,%es:(%rdi)
    74fc:	aa                   	stos   %al,%es:(%rdi)
    74fd:	aa                   	stos   %al,%es:(%rdi)
    74fe:	aa                   	stos   %al,%es:(%rdi)
    74ff:	aa                   	stos   %al,%es:(%rdi)
    7500:	aa                   	stos   %al,%es:(%rdi)
    7501:	aa                   	stos   %al,%es:(%rdi)
    7502:	aa                   	stos   %al,%es:(%rdi)
    7503:	aa                   	stos   %al,%es:(%rdi)
    7504:	aa                   	stos   %al,%es:(%rdi)
    7505:	aa                   	stos   %al,%es:(%rdi)
    7506:	aa                   	stos   %al,%es:(%rdi)
    7507:	aa                   	stos   %al,%es:(%rdi)
    7508:	aa                   	stos   %al,%es:(%rdi)
    7509:	aa                   	stos   %al,%es:(%rdi)
    750a:	aa                   	stos   %al,%es:(%rdi)
    750b:	aa                   	stos   %al,%es:(%rdi)
    750c:	aa                   	stos   %al,%es:(%rdi)
    750d:	aa                   	stos   %al,%es:(%rdi)
    750e:	aa                   	stos   %al,%es:(%rdi)
    750f:	aa                   	stos   %al,%es:(%rdi)
    7510:	aa                   	stos   %al,%es:(%rdi)
    7511:	aa                   	stos   %al,%es:(%rdi)
    7512:	aa                   	stos   %al,%es:(%rdi)
    7513:	aa                   	stos   %al,%es:(%rdi)
    7514:	aa                   	stos   %al,%es:(%rdi)
    7515:	aa                   	stos   %al,%es:(%rdi)
    7516:	aa                   	stos   %al,%es:(%rdi)
    7517:	aa                   	stos   %al,%es:(%rdi)
    7518:	aa                   	stos   %al,%es:(%rdi)
    7519:	aa                   	stos   %al,%es:(%rdi)
    751a:	aa                   	stos   %al,%es:(%rdi)
    751b:	aa                   	stos   %al,%es:(%rdi)
    751c:	aa                   	stos   %al,%es:(%rdi)
    751d:	aa                   	stos   %al,%es:(%rdi)
    751e:	aa                   	stos   %al,%es:(%rdi)
    751f:	aa                   	stos   %al,%es:(%rdi)
    7520:	aa                   	stos   %al,%es:(%rdi)
    7521:	aa                   	stos   %al,%es:(%rdi)
    7522:	aa                   	stos   %al,%es:(%rdi)
    7523:	aa                   	stos   %al,%es:(%rdi)
    7524:	aa                   	stos   %al,%es:(%rdi)
    7525:	aa                   	stos   %al,%es:(%rdi)
    7526:	aa                   	stos   %al,%es:(%rdi)
    7527:	aa                   	stos   %al,%es:(%rdi)
    7528:	aa                   	stos   %al,%es:(%rdi)
    7529:	aa                   	stos   %al,%es:(%rdi)
    752a:	aa                   	stos   %al,%es:(%rdi)
    752b:	aa                   	stos   %al,%es:(%rdi)
    752c:	aa                   	stos   %al,%es:(%rdi)
    752d:	aa                   	stos   %al,%es:(%rdi)
    752e:	aa                   	stos   %al,%es:(%rdi)
    752f:	aa                   	stos   %al,%es:(%rdi)
    7530:	aa                   	stos   %al,%es:(%rdi)
    7531:	aa                   	stos   %al,%es:(%rdi)
    7532:	aa                   	stos   %al,%es:(%rdi)
    7533:	aa                   	stos   %al,%es:(%rdi)
    7534:	aa                   	stos   %al,%es:(%rdi)
    7535:	aa                   	stos   %al,%es:(%rdi)
    7536:	aa                   	stos   %al,%es:(%rdi)
    7537:	aa                   	stos   %al,%es:(%rdi)
    7538:	aa                   	stos   %al,%es:(%rdi)
    7539:	aa                   	stos   %al,%es:(%rdi)
    753a:	aa                   	stos   %al,%es:(%rdi)
    753b:	aa                   	stos   %al,%es:(%rdi)
    753c:	aa                   	stos   %al,%es:(%rdi)
    753d:	aa                   	stos   %al,%es:(%rdi)
    753e:	aa                   	stos   %al,%es:(%rdi)
    753f:	aa                   	stos   %al,%es:(%rdi)
    7540:	aa                   	stos   %al,%es:(%rdi)
    7541:	aa                   	stos   %al,%es:(%rdi)
    7542:	aa                   	stos   %al,%es:(%rdi)
    7543:	aa                   	stos   %al,%es:(%rdi)
    7544:	aa                   	stos   %al,%es:(%rdi)
    7545:	aa                   	stos   %al,%es:(%rdi)
    7546:	aa                   	stos   %al,%es:(%rdi)
    7547:	aa                   	stos   %al,%es:(%rdi)
    7548:	aa                   	stos   %al,%es:(%rdi)
    7549:	aa                   	stos   %al,%es:(%rdi)
    754a:	aa                   	stos   %al,%es:(%rdi)
    754b:	aa                   	stos   %al,%es:(%rdi)
    754c:	aa                   	stos   %al,%es:(%rdi)
    754d:	aa                   	stos   %al,%es:(%rdi)
    754e:	aa                   	stos   %al,%es:(%rdi)
    754f:	aa                   	stos   %al,%es:(%rdi)
    7550:	aa                   	stos   %al,%es:(%rdi)
    7551:	aa                   	stos   %al,%es:(%rdi)
    7552:	aa                   	stos   %al,%es:(%rdi)
    7553:	aa                   	stos   %al,%es:(%rdi)
    7554:	aa                   	stos   %al,%es:(%rdi)
    7555:	aa                   	stos   %al,%es:(%rdi)
    7556:	aa                   	stos   %al,%es:(%rdi)
    7557:	aa                   	stos   %al,%es:(%rdi)
    7558:	aa                   	stos   %al,%es:(%rdi)
    7559:	aa                   	stos   %al,%es:(%rdi)
    755a:	aa                   	stos   %al,%es:(%rdi)
    755b:	aa                   	stos   %al,%es:(%rdi)
    755c:	aa                   	stos   %al,%es:(%rdi)
    755d:	aa                   	stos   %al,%es:(%rdi)
    755e:	aa                   	stos   %al,%es:(%rdi)
    755f:	aa                   	stos   %al,%es:(%rdi)
    7560:	aa                   	stos   %al,%es:(%rdi)
    7561:	aa                   	stos   %al,%es:(%rdi)
    7562:	aa                   	stos   %al,%es:(%rdi)
    7563:	aa                   	stos   %al,%es:(%rdi)
    7564:	aa                   	stos   %al,%es:(%rdi)
    7565:	aa                   	stos   %al,%es:(%rdi)
    7566:	aa                   	stos   %al,%es:(%rdi)
    7567:	aa                   	stos   %al,%es:(%rdi)
    7568:	aa                   	stos   %al,%es:(%rdi)
    7569:	aa                   	stos   %al,%es:(%rdi)
    756a:	aa                   	stos   %al,%es:(%rdi)
    756b:	aa                   	stos   %al,%es:(%rdi)
    756c:	aa                   	stos   %al,%es:(%rdi)
    756d:	aa                   	stos   %al,%es:(%rdi)
    756e:	aa                   	stos   %al,%es:(%rdi)
    756f:	aa                   	stos   %al,%es:(%rdi)
    7570:	aa                   	stos   %al,%es:(%rdi)
    7571:	aa                   	stos   %al,%es:(%rdi)
    7572:	aa                   	stos   %al,%es:(%rdi)
    7573:	aa                   	stos   %al,%es:(%rdi)
    7574:	aa                   	stos   %al,%es:(%rdi)
    7575:	aa                   	stos   %al,%es:(%rdi)
    7576:	aa                   	stos   %al,%es:(%rdi)
    7577:	aa                   	stos   %al,%es:(%rdi)
    7578:	aa                   	stos   %al,%es:(%rdi)
    7579:	aa                   	stos   %al,%es:(%rdi)
    757a:	aa                   	stos   %al,%es:(%rdi)
    757b:	aa                   	stos   %al,%es:(%rdi)
    757c:	aa                   	stos   %al,%es:(%rdi)
    757d:	aa                   	stos   %al,%es:(%rdi)
    757e:	aa                   	stos   %al,%es:(%rdi)
    757f:	aa                   	stos   %al,%es:(%rdi)
    7580:	aa                   	stos   %al,%es:(%rdi)
    7581:	aa                   	stos   %al,%es:(%rdi)
    7582:	aa                   	stos   %al,%es:(%rdi)
    7583:	aa                   	stos   %al,%es:(%rdi)
    7584:	aa                   	stos   %al,%es:(%rdi)
    7585:	aa                   	stos   %al,%es:(%rdi)
    7586:	aa                   	stos   %al,%es:(%rdi)
    7587:	aa                   	stos   %al,%es:(%rdi)
    7588:	aa                   	stos   %al,%es:(%rdi)
    7589:	aa                   	stos   %al,%es:(%rdi)
    758a:	aa                   	stos   %al,%es:(%rdi)
    758b:	aa                   	stos   %al,%es:(%rdi)
    758c:	aa                   	stos   %al,%es:(%rdi)
    758d:	aa                   	stos   %al,%es:(%rdi)
    758e:	aa                   	stos   %al,%es:(%rdi)
    758f:	aa                   	stos   %al,%es:(%rdi)
    7590:	aa                   	stos   %al,%es:(%rdi)
    7591:	aa                   	stos   %al,%es:(%rdi)
    7592:	aa                   	stos   %al,%es:(%rdi)
    7593:	aa                   	stos   %al,%es:(%rdi)
    7594:	aa                   	stos   %al,%es:(%rdi)
    7595:	aa                   	stos   %al,%es:(%rdi)
    7596:	aa                   	stos   %al,%es:(%rdi)
    7597:	aa                   	stos   %al,%es:(%rdi)
    7598:	aa                   	stos   %al,%es:(%rdi)
    7599:	aa                   	stos   %al,%es:(%rdi)
    759a:	aa                   	stos   %al,%es:(%rdi)
    759b:	aa                   	stos   %al,%es:(%rdi)
    759c:	aa                   	stos   %al,%es:(%rdi)
    759d:	aa                   	stos   %al,%es:(%rdi)
    759e:	aa                   	stos   %al,%es:(%rdi)
    759f:	aa                   	stos   %al,%es:(%rdi)
    75a0:	aa                   	stos   %al,%es:(%rdi)
    75a1:	aa                   	stos   %al,%es:(%rdi)
    75a2:	aa                   	stos   %al,%es:(%rdi)
    75a3:	aa                   	stos   %al,%es:(%rdi)
    75a4:	aa                   	stos   %al,%es:(%rdi)
    75a5:	aa                   	stos   %al,%es:(%rdi)
    75a6:	aa                   	stos   %al,%es:(%rdi)
    75a7:	aa                   	stos   %al,%es:(%rdi)
    75a8:	aa                   	stos   %al,%es:(%rdi)
    75a9:	aa                   	stos   %al,%es:(%rdi)
    75aa:	aa                   	stos   %al,%es:(%rdi)
    75ab:	aa                   	stos   %al,%es:(%rdi)
    75ac:	aa                   	stos   %al,%es:(%rdi)
    75ad:	aa                   	stos   %al,%es:(%rdi)
    75ae:	aa                   	stos   %al,%es:(%rdi)
    75af:	aa                   	stos   %al,%es:(%rdi)
    75b0:	aa                   	stos   %al,%es:(%rdi)
    75b1:	aa                   	stos   %al,%es:(%rdi)
    75b2:	aa                   	stos   %al,%es:(%rdi)
    75b3:	aa                   	stos   %al,%es:(%rdi)
    75b4:	aa                   	stos   %al,%es:(%rdi)
    75b5:	aa                   	stos   %al,%es:(%rdi)
    75b6:	aa                   	stos   %al,%es:(%rdi)
    75b7:	aa                   	stos   %al,%es:(%rdi)
    75b8:	aa                   	stos   %al,%es:(%rdi)
    75b9:	aa                   	stos   %al,%es:(%rdi)
    75ba:	aa                   	stos   %al,%es:(%rdi)
    75bb:	aa                   	stos   %al,%es:(%rdi)
    75bc:	aa                   	stos   %al,%es:(%rdi)
    75bd:	aa                   	stos   %al,%es:(%rdi)
    75be:	aa                   	stos   %al,%es:(%rdi)
    75bf:	aa                   	stos   %al,%es:(%rdi)
    75c0:	aa                   	stos   %al,%es:(%rdi)
    75c1:	aa                   	stos   %al,%es:(%rdi)
    75c2:	aa                   	stos   %al,%es:(%rdi)
    75c3:	aa                   	stos   %al,%es:(%rdi)
    75c4:	aa                   	stos   %al,%es:(%rdi)
    75c5:	aa                   	stos   %al,%es:(%rdi)
    75c6:	aa                   	stos   %al,%es:(%rdi)
    75c7:	aa                   	stos   %al,%es:(%rdi)
    75c8:	aa                   	stos   %al,%es:(%rdi)
    75c9:	aa                   	stos   %al,%es:(%rdi)
    75ca:	aa                   	stos   %al,%es:(%rdi)
    75cb:	aa                   	stos   %al,%es:(%rdi)
    75cc:	aa                   	stos   %al,%es:(%rdi)
    75cd:	aa                   	stos   %al,%es:(%rdi)
    75ce:	aa                   	stos   %al,%es:(%rdi)
    75cf:	aa                   	stos   %al,%es:(%rdi)
    75d0:	aa                   	stos   %al,%es:(%rdi)
    75d1:	aa                   	stos   %al,%es:(%rdi)
    75d2:	aa                   	stos   %al,%es:(%rdi)
    75d3:	aa                   	stos   %al,%es:(%rdi)
    75d4:	aa                   	stos   %al,%es:(%rdi)
    75d5:	aa                   	stos   %al,%es:(%rdi)
    75d6:	aa                   	stos   %al,%es:(%rdi)
    75d7:	aa                   	stos   %al,%es:(%rdi)
    75d8:	aa                   	stos   %al,%es:(%rdi)
    75d9:	aa                   	stos   %al,%es:(%rdi)
    75da:	aa                   	stos   %al,%es:(%rdi)
    75db:	aa                   	stos   %al,%es:(%rdi)
    75dc:	aa                   	stos   %al,%es:(%rdi)
    75dd:	aa                   	stos   %al,%es:(%rdi)
    75de:	aa                   	stos   %al,%es:(%rdi)
    75df:	aa                   	stos   %al,%es:(%rdi)
    75e0:	aa                   	stos   %al,%es:(%rdi)
    75e1:	aa                   	stos   %al,%es:(%rdi)
    75e2:	aa                   	stos   %al,%es:(%rdi)
    75e3:	aa                   	stos   %al,%es:(%rdi)
    75e4:	aa                   	stos   %al,%es:(%rdi)
    75e5:	aa                   	stos   %al,%es:(%rdi)
    75e6:	aa                   	stos   %al,%es:(%rdi)
    75e7:	aa                   	stos   %al,%es:(%rdi)
    75e8:	aa                   	stos   %al,%es:(%rdi)
    75e9:	aa                   	stos   %al,%es:(%rdi)
    75ea:	aa                   	stos   %al,%es:(%rdi)
    75eb:	aa                   	stos   %al,%es:(%rdi)
    75ec:	aa                   	stos   %al,%es:(%rdi)
    75ed:	aa                   	stos   %al,%es:(%rdi)
    75ee:	aa                   	stos   %al,%es:(%rdi)
    75ef:	aa                   	stos   %al,%es:(%rdi)
    75f0:	aa                   	stos   %al,%es:(%rdi)
    75f1:	aa                   	stos   %al,%es:(%rdi)
    75f2:	aa                   	stos   %al,%es:(%rdi)
    75f3:	aa                   	stos   %al,%es:(%rdi)
    75f4:	aa                   	stos   %al,%es:(%rdi)
    75f5:	aa                   	stos   %al,%es:(%rdi)
    75f6:	aa                   	stos   %al,%es:(%rdi)
    75f7:	aa                   	stos   %al,%es:(%rdi)
    75f8:	aa                   	stos   %al,%es:(%rdi)
    75f9:	aa                   	stos   %al,%es:(%rdi)
    75fa:	aa                   	stos   %al,%es:(%rdi)
    75fb:	aa                   	stos   %al,%es:(%rdi)
    75fc:	aa                   	stos   %al,%es:(%rdi)
    75fd:	aa                   	stos   %al,%es:(%rdi)
    75fe:	aa                   	stos   %al,%es:(%rdi)
    75ff:	aa                   	stos   %al,%es:(%rdi)
    7600:	aa                   	stos   %al,%es:(%rdi)
    7601:	aa                   	stos   %al,%es:(%rdi)
    7602:	aa                   	stos   %al,%es:(%rdi)
    7603:	aa                   	stos   %al,%es:(%rdi)
    7604:	aa                   	stos   %al,%es:(%rdi)
    7605:	aa                   	stos   %al,%es:(%rdi)
    7606:	aa                   	stos   %al,%es:(%rdi)
    7607:	aa                   	stos   %al,%es:(%rdi)
    7608:	aa                   	stos   %al,%es:(%rdi)
    7609:	aa                   	stos   %al,%es:(%rdi)
    760a:	aa                   	stos   %al,%es:(%rdi)
    760b:	aa                   	stos   %al,%es:(%rdi)
    760c:	aa                   	stos   %al,%es:(%rdi)
    760d:	aa                   	stos   %al,%es:(%rdi)
    760e:	aa                   	stos   %al,%es:(%rdi)
    760f:	aa                   	stos   %al,%es:(%rdi)
    7610:	aa                   	stos   %al,%es:(%rdi)
    7611:	aa                   	stos   %al,%es:(%rdi)
    7612:	aa                   	stos   %al,%es:(%rdi)
    7613:	aa                   	stos   %al,%es:(%rdi)
    7614:	aa                   	stos   %al,%es:(%rdi)
    7615:	aa                   	stos   %al,%es:(%rdi)
    7616:	aa                   	stos   %al,%es:(%rdi)
    7617:	aa                   	stos   %al,%es:(%rdi)
    7618:	aa                   	stos   %al,%es:(%rdi)
    7619:	aa                   	stos   %al,%es:(%rdi)
    761a:	aa                   	stos   %al,%es:(%rdi)
    761b:	aa                   	stos   %al,%es:(%rdi)
    761c:	aa                   	stos   %al,%es:(%rdi)
    761d:	aa                   	stos   %al,%es:(%rdi)
    761e:	aa                   	stos   %al,%es:(%rdi)
    761f:	aa                   	stos   %al,%es:(%rdi)
    7620:	aa                   	stos   %al,%es:(%rdi)
    7621:	aa                   	stos   %al,%es:(%rdi)
    7622:	aa                   	stos   %al,%es:(%rdi)
    7623:	aa                   	stos   %al,%es:(%rdi)
    7624:	aa                   	stos   %al,%es:(%rdi)
    7625:	aa                   	stos   %al,%es:(%rdi)
    7626:	aa                   	stos   %al,%es:(%rdi)
    7627:	aa                   	stos   %al,%es:(%rdi)
    7628:	aa                   	stos   %al,%es:(%rdi)
    7629:	aa                   	stos   %al,%es:(%rdi)
    762a:	aa                   	stos   %al,%es:(%rdi)
    762b:	aa                   	stos   %al,%es:(%rdi)
    762c:	aa                   	stos   %al,%es:(%rdi)
    762d:	aa                   	stos   %al,%es:(%rdi)
    762e:	aa                   	stos   %al,%es:(%rdi)
    762f:	aa                   	stos   %al,%es:(%rdi)
    7630:	aa                   	stos   %al,%es:(%rdi)
    7631:	aa                   	stos   %al,%es:(%rdi)
    7632:	aa                   	stos   %al,%es:(%rdi)
    7633:	aa                   	stos   %al,%es:(%rdi)
    7634:	aa                   	stos   %al,%es:(%rdi)
    7635:	aa                   	stos   %al,%es:(%rdi)
    7636:	aa                   	stos   %al,%es:(%rdi)
    7637:	aa                   	stos   %al,%es:(%rdi)
    7638:	aa                   	stos   %al,%es:(%rdi)
    7639:	aa                   	stos   %al,%es:(%rdi)
    763a:	aa                   	stos   %al,%es:(%rdi)
    763b:	aa                   	stos   %al,%es:(%rdi)
    763c:	aa                   	stos   %al,%es:(%rdi)
    763d:	aa                   	stos   %al,%es:(%rdi)
    763e:	aa                   	stos   %al,%es:(%rdi)
    763f:	aa                   	stos   %al,%es:(%rdi)
    7640:	aa                   	stos   %al,%es:(%rdi)
    7641:	aa                   	stos   %al,%es:(%rdi)
    7642:	aa                   	stos   %al,%es:(%rdi)
    7643:	aa                   	stos   %al,%es:(%rdi)
    7644:	aa                   	stos   %al,%es:(%rdi)
    7645:	aa                   	stos   %al,%es:(%rdi)
    7646:	aa                   	stos   %al,%es:(%rdi)
    7647:	aa                   	stos   %al,%es:(%rdi)
    7648:	aa                   	stos   %al,%es:(%rdi)
    7649:	aa                   	stos   %al,%es:(%rdi)
    764a:	aa                   	stos   %al,%es:(%rdi)
    764b:	aa                   	stos   %al,%es:(%rdi)
    764c:	aa                   	stos   %al,%es:(%rdi)
    764d:	aa                   	stos   %al,%es:(%rdi)
    764e:	aa                   	stos   %al,%es:(%rdi)
    764f:	aa                   	stos   %al,%es:(%rdi)
    7650:	aa                   	stos   %al,%es:(%rdi)
    7651:	aa                   	stos   %al,%es:(%rdi)
    7652:	aa                   	stos   %al,%es:(%rdi)
    7653:	aa                   	stos   %al,%es:(%rdi)
    7654:	aa                   	stos   %al,%es:(%rdi)
    7655:	aa                   	stos   %al,%es:(%rdi)
    7656:	aa                   	stos   %al,%es:(%rdi)
    7657:	aa                   	stos   %al,%es:(%rdi)
    7658:	aa                   	stos   %al,%es:(%rdi)
    7659:	aa                   	stos   %al,%es:(%rdi)
    765a:	aa                   	stos   %al,%es:(%rdi)
    765b:	aa                   	stos   %al,%es:(%rdi)
    765c:	aa                   	stos   %al,%es:(%rdi)
    765d:	aa                   	stos   %al,%es:(%rdi)
    765e:	aa                   	stos   %al,%es:(%rdi)
    765f:	aa                   	stos   %al,%es:(%rdi)
    7660:	aa                   	stos   %al,%es:(%rdi)
    7661:	aa                   	stos   %al,%es:(%rdi)
    7662:	aa                   	stos   %al,%es:(%rdi)
    7663:	aa                   	stos   %al,%es:(%rdi)
    7664:	aa                   	stos   %al,%es:(%rdi)
    7665:	aa                   	stos   %al,%es:(%rdi)
    7666:	aa                   	stos   %al,%es:(%rdi)
    7667:	aa                   	stos   %al,%es:(%rdi)
    7668:	aa                   	stos   %al,%es:(%rdi)
    7669:	aa                   	stos   %al,%es:(%rdi)
    766a:	aa                   	stos   %al,%es:(%rdi)
    766b:	aa                   	stos   %al,%es:(%rdi)
    766c:	aa                   	stos   %al,%es:(%rdi)
    766d:	aa                   	stos   %al,%es:(%rdi)
    766e:	aa                   	stos   %al,%es:(%rdi)
    766f:	aa                   	stos   %al,%es:(%rdi)
    7670:	aa                   	stos   %al,%es:(%rdi)
    7671:	aa                   	stos   %al,%es:(%rdi)
    7672:	aa                   	stos   %al,%es:(%rdi)
    7673:	aa                   	stos   %al,%es:(%rdi)
    7674:	aa                   	stos   %al,%es:(%rdi)
    7675:	aa                   	stos   %al,%es:(%rdi)
    7676:	aa                   	stos   %al,%es:(%rdi)
    7677:	aa                   	stos   %al,%es:(%rdi)
    7678:	aa                   	stos   %al,%es:(%rdi)
    7679:	aa                   	stos   %al,%es:(%rdi)
    767a:	aa                   	stos   %al,%es:(%rdi)
    767b:	aa                   	stos   %al,%es:(%rdi)
    767c:	aa                   	stos   %al,%es:(%rdi)
    767d:	aa                   	stos   %al,%es:(%rdi)
    767e:	aa                   	stos   %al,%es:(%rdi)
    767f:	aa                   	stos   %al,%es:(%rdi)
    7680:	aa                   	stos   %al,%es:(%rdi)
    7681:	aa                   	stos   %al,%es:(%rdi)
    7682:	aa                   	stos   %al,%es:(%rdi)
    7683:	aa                   	stos   %al,%es:(%rdi)
    7684:	aa                   	stos   %al,%es:(%rdi)
    7685:	aa                   	stos   %al,%es:(%rdi)
    7686:	aa                   	stos   %al,%es:(%rdi)
    7687:	aa                   	stos   %al,%es:(%rdi)
    7688:	aa                   	stos   %al,%es:(%rdi)
    7689:	aa                   	stos   %al,%es:(%rdi)
    768a:	aa                   	stos   %al,%es:(%rdi)
    768b:	aa                   	stos   %al,%es:(%rdi)
    768c:	aa                   	stos   %al,%es:(%rdi)
    768d:	aa                   	stos   %al,%es:(%rdi)
    768e:	aa                   	stos   %al,%es:(%rdi)
    768f:	aa                   	stos   %al,%es:(%rdi)
    7690:	aa                   	stos   %al,%es:(%rdi)
    7691:	aa                   	stos   %al,%es:(%rdi)
    7692:	aa                   	stos   %al,%es:(%rdi)
    7693:	aa                   	stos   %al,%es:(%rdi)
    7694:	aa                   	stos   %al,%es:(%rdi)
    7695:	aa                   	stos   %al,%es:(%rdi)
    7696:	aa                   	stos   %al,%es:(%rdi)
    7697:	aa                   	stos   %al,%es:(%rdi)
    7698:	aa                   	stos   %al,%es:(%rdi)
    7699:	aa                   	stos   %al,%es:(%rdi)
    769a:	aa                   	stos   %al,%es:(%rdi)
    769b:	aa                   	stos   %al,%es:(%rdi)
    769c:	aa                   	stos   %al,%es:(%rdi)
    769d:	aa                   	stos   %al,%es:(%rdi)
    769e:	aa                   	stos   %al,%es:(%rdi)
    769f:	aa                   	stos   %al,%es:(%rdi)
    76a0:	aa                   	stos   %al,%es:(%rdi)
    76a1:	aa                   	stos   %al,%es:(%rdi)
    76a2:	aa                   	stos   %al,%es:(%rdi)
    76a3:	aa                   	stos   %al,%es:(%rdi)
    76a4:	aa                   	stos   %al,%es:(%rdi)
    76a5:	aa                   	stos   %al,%es:(%rdi)
    76a6:	aa                   	stos   %al,%es:(%rdi)
    76a7:	aa                   	stos   %al,%es:(%rdi)
    76a8:	aa                   	stos   %al,%es:(%rdi)
    76a9:	aa                   	stos   %al,%es:(%rdi)
    76aa:	aa                   	stos   %al,%es:(%rdi)
    76ab:	aa                   	stos   %al,%es:(%rdi)
    76ac:	aa                   	stos   %al,%es:(%rdi)
    76ad:	aa                   	stos   %al,%es:(%rdi)
    76ae:	aa                   	stos   %al,%es:(%rdi)
    76af:	aa                   	stos   %al,%es:(%rdi)
    76b0:	aa                   	stos   %al,%es:(%rdi)
    76b1:	aa                   	stos   %al,%es:(%rdi)
    76b2:	aa                   	stos   %al,%es:(%rdi)
    76b3:	aa                   	stos   %al,%es:(%rdi)
    76b4:	aa                   	stos   %al,%es:(%rdi)
    76b5:	aa                   	stos   %al,%es:(%rdi)
    76b6:	aa                   	stos   %al,%es:(%rdi)
    76b7:	aa                   	stos   %al,%es:(%rdi)
    76b8:	aa                   	stos   %al,%es:(%rdi)
    76b9:	aa                   	stos   %al,%es:(%rdi)
    76ba:	aa                   	stos   %al,%es:(%rdi)
    76bb:	aa                   	stos   %al,%es:(%rdi)
    76bc:	aa                   	stos   %al,%es:(%rdi)
    76bd:	aa                   	stos   %al,%es:(%rdi)
    76be:	aa                   	stos   %al,%es:(%rdi)
    76bf:	aa                   	stos   %al,%es:(%rdi)
    76c0:	aa                   	stos   %al,%es:(%rdi)
    76c1:	aa                   	stos   %al,%es:(%rdi)
    76c2:	aa                   	stos   %al,%es:(%rdi)
    76c3:	aa                   	stos   %al,%es:(%rdi)
    76c4:	aa                   	stos   %al,%es:(%rdi)
    76c5:	aa                   	stos   %al,%es:(%rdi)
    76c6:	aa                   	stos   %al,%es:(%rdi)
    76c7:	aa                   	stos   %al,%es:(%rdi)
    76c8:	aa                   	stos   %al,%es:(%rdi)
    76c9:	aa                   	stos   %al,%es:(%rdi)
    76ca:	aa                   	stos   %al,%es:(%rdi)
    76cb:	aa                   	stos   %al,%es:(%rdi)
    76cc:	aa                   	stos   %al,%es:(%rdi)
    76cd:	aa                   	stos   %al,%es:(%rdi)
    76ce:	aa                   	stos   %al,%es:(%rdi)
    76cf:	aa                   	stos   %al,%es:(%rdi)
    76d0:	aa                   	stos   %al,%es:(%rdi)
    76d1:	aa                   	stos   %al,%es:(%rdi)
    76d2:	aa                   	stos   %al,%es:(%rdi)
    76d3:	aa                   	stos   %al,%es:(%rdi)
    76d4:	aa                   	stos   %al,%es:(%rdi)
    76d5:	aa                   	stos   %al,%es:(%rdi)
    76d6:	aa                   	stos   %al,%es:(%rdi)
    76d7:	aa                   	stos   %al,%es:(%rdi)
    76d8:	aa                   	stos   %al,%es:(%rdi)
    76d9:	aa                   	stos   %al,%es:(%rdi)
    76da:	aa                   	stos   %al,%es:(%rdi)
    76db:	aa                   	stos   %al,%es:(%rdi)
    76dc:	aa                   	stos   %al,%es:(%rdi)
    76dd:	aa                   	stos   %al,%es:(%rdi)
    76de:	aa                   	stos   %al,%es:(%rdi)
    76df:	aa                   	stos   %al,%es:(%rdi)
    76e0:	aa                   	stos   %al,%es:(%rdi)
    76e1:	aa                   	stos   %al,%es:(%rdi)
    76e2:	aa                   	stos   %al,%es:(%rdi)
    76e3:	aa                   	stos   %al,%es:(%rdi)
    76e4:	aa                   	stos   %al,%es:(%rdi)
    76e5:	aa                   	stos   %al,%es:(%rdi)
    76e6:	aa                   	stos   %al,%es:(%rdi)
    76e7:	aa                   	stos   %al,%es:(%rdi)
    76e8:	aa                   	stos   %al,%es:(%rdi)
    76e9:	aa                   	stos   %al,%es:(%rdi)
    76ea:	aa                   	stos   %al,%es:(%rdi)
    76eb:	aa                   	stos   %al,%es:(%rdi)
    76ec:	aa                   	stos   %al,%es:(%rdi)
    76ed:	aa                   	stos   %al,%es:(%rdi)
    76ee:	aa                   	stos   %al,%es:(%rdi)
    76ef:	aa                   	stos   %al,%es:(%rdi)
    76f0:	aa                   	stos   %al,%es:(%rdi)
    76f1:	aa                   	stos   %al,%es:(%rdi)
    76f2:	aa                   	stos   %al,%es:(%rdi)
    76f3:	aa                   	stos   %al,%es:(%rdi)
    76f4:	aa                   	stos   %al,%es:(%rdi)
    76f5:	aa                   	stos   %al,%es:(%rdi)
    76f6:	aa                   	stos   %al,%es:(%rdi)
    76f7:	aa                   	stos   %al,%es:(%rdi)
    76f8:	aa                   	stos   %al,%es:(%rdi)
    76f9:	aa                   	stos   %al,%es:(%rdi)
    76fa:	aa                   	stos   %al,%es:(%rdi)
    76fb:	aa                   	stos   %al,%es:(%rdi)
    76fc:	aa                   	stos   %al,%es:(%rdi)
    76fd:	aa                   	stos   %al,%es:(%rdi)
    76fe:	aa                   	stos   %al,%es:(%rdi)
    76ff:	aa                   	stos   %al,%es:(%rdi)
    7700:	aa                   	stos   %al,%es:(%rdi)
    7701:	aa                   	stos   %al,%es:(%rdi)
    7702:	aa                   	stos   %al,%es:(%rdi)
    7703:	aa                   	stos   %al,%es:(%rdi)
    7704:	aa                   	stos   %al,%es:(%rdi)
    7705:	aa                   	stos   %al,%es:(%rdi)
    7706:	aa                   	stos   %al,%es:(%rdi)
    7707:	aa                   	stos   %al,%es:(%rdi)
    7708:	aa                   	stos   %al,%es:(%rdi)
    7709:	aa                   	stos   %al,%es:(%rdi)
    770a:	aa                   	stos   %al,%es:(%rdi)
    770b:	aa                   	stos   %al,%es:(%rdi)
    770c:	aa                   	stos   %al,%es:(%rdi)
    770d:	aa                   	stos   %al,%es:(%rdi)
    770e:	aa                   	stos   %al,%es:(%rdi)
    770f:	aa                   	stos   %al,%es:(%rdi)
    7710:	aa                   	stos   %al,%es:(%rdi)
    7711:	aa                   	stos   %al,%es:(%rdi)
    7712:	aa                   	stos   %al,%es:(%rdi)
    7713:	aa                   	stos   %al,%es:(%rdi)
    7714:	aa                   	stos   %al,%es:(%rdi)
    7715:	aa                   	stos   %al,%es:(%rdi)
    7716:	aa                   	stos   %al,%es:(%rdi)
    7717:	aa                   	stos   %al,%es:(%rdi)
    7718:	aa                   	stos   %al,%es:(%rdi)
    7719:	aa                   	stos   %al,%es:(%rdi)
    771a:	aa                   	stos   %al,%es:(%rdi)
    771b:	aa                   	stos   %al,%es:(%rdi)
    771c:	aa                   	stos   %al,%es:(%rdi)
    771d:	aa                   	stos   %al,%es:(%rdi)
    771e:	aa                   	stos   %al,%es:(%rdi)
    771f:	aa                   	stos   %al,%es:(%rdi)
    7720:	aa                   	stos   %al,%es:(%rdi)
    7721:	aa                   	stos   %al,%es:(%rdi)
    7722:	aa                   	stos   %al,%es:(%rdi)
    7723:	aa                   	stos   %al,%es:(%rdi)
    7724:	aa                   	stos   %al,%es:(%rdi)
    7725:	aa                   	stos   %al,%es:(%rdi)
    7726:	aa                   	stos   %al,%es:(%rdi)
    7727:	aa                   	stos   %al,%es:(%rdi)
    7728:	aa                   	stos   %al,%es:(%rdi)
    7729:	aa                   	stos   %al,%es:(%rdi)
    772a:	aa                   	stos   %al,%es:(%rdi)
    772b:	aa                   	stos   %al,%es:(%rdi)
    772c:	aa                   	stos   %al,%es:(%rdi)
    772d:	aa                   	stos   %al,%es:(%rdi)
    772e:	aa                   	stos   %al,%es:(%rdi)
    772f:	aa                   	stos   %al,%es:(%rdi)
    7730:	aa                   	stos   %al,%es:(%rdi)
    7731:	aa                   	stos   %al,%es:(%rdi)
    7732:	aa                   	stos   %al,%es:(%rdi)
    7733:	aa                   	stos   %al,%es:(%rdi)
    7734:	aa                   	stos   %al,%es:(%rdi)
    7735:	aa                   	stos   %al,%es:(%rdi)
    7736:	aa                   	stos   %al,%es:(%rdi)
    7737:	aa                   	stos   %al,%es:(%rdi)
    7738:	aa                   	stos   %al,%es:(%rdi)
    7739:	aa                   	stos   %al,%es:(%rdi)
    773a:	aa                   	stos   %al,%es:(%rdi)
    773b:	aa                   	stos   %al,%es:(%rdi)
    773c:	aa                   	stos   %al,%es:(%rdi)
    773d:	aa                   	stos   %al,%es:(%rdi)
    773e:	aa                   	stos   %al,%es:(%rdi)
    773f:	aa                   	stos   %al,%es:(%rdi)
    7740:	aa                   	stos   %al,%es:(%rdi)
    7741:	aa                   	stos   %al,%es:(%rdi)
    7742:	aa                   	stos   %al,%es:(%rdi)
    7743:	aa                   	stos   %al,%es:(%rdi)
    7744:	aa                   	stos   %al,%es:(%rdi)
    7745:	aa                   	stos   %al,%es:(%rdi)
    7746:	aa                   	stos   %al,%es:(%rdi)
    7747:	aa                   	stos   %al,%es:(%rdi)
    7748:	aa                   	stos   %al,%es:(%rdi)
    7749:	aa                   	stos   %al,%es:(%rdi)
    774a:	aa                   	stos   %al,%es:(%rdi)
    774b:	aa                   	stos   %al,%es:(%rdi)
    774c:	aa                   	stos   %al,%es:(%rdi)
    774d:	aa                   	stos   %al,%es:(%rdi)
    774e:	aa                   	stos   %al,%es:(%rdi)
    774f:	aa                   	stos   %al,%es:(%rdi)
    7750:	aa                   	stos   %al,%es:(%rdi)
    7751:	aa                   	stos   %al,%es:(%rdi)
    7752:	aa                   	stos   %al,%es:(%rdi)
    7753:	aa                   	stos   %al,%es:(%rdi)
    7754:	aa                   	stos   %al,%es:(%rdi)
    7755:	aa                   	stos   %al,%es:(%rdi)
    7756:	aa                   	stos   %al,%es:(%rdi)
    7757:	aa                   	stos   %al,%es:(%rdi)
    7758:	aa                   	stos   %al,%es:(%rdi)
    7759:	aa                   	stos   %al,%es:(%rdi)
    775a:	aa                   	stos   %al,%es:(%rdi)
    775b:	aa                   	stos   %al,%es:(%rdi)
    775c:	aa                   	stos   %al,%es:(%rdi)
    775d:	aa                   	stos   %al,%es:(%rdi)
    775e:	aa                   	stos   %al,%es:(%rdi)
    775f:	aa                   	stos   %al,%es:(%rdi)
    7760:	aa                   	stos   %al,%es:(%rdi)
    7761:	aa                   	stos   %al,%es:(%rdi)
    7762:	aa                   	stos   %al,%es:(%rdi)
    7763:	aa                   	stos   %al,%es:(%rdi)
    7764:	aa                   	stos   %al,%es:(%rdi)
    7765:	aa                   	stos   %al,%es:(%rdi)
    7766:	aa                   	stos   %al,%es:(%rdi)
    7767:	aa                   	stos   %al,%es:(%rdi)
    7768:	aa                   	stos   %al,%es:(%rdi)
    7769:	aa                   	stos   %al,%es:(%rdi)
    776a:	aa                   	stos   %al,%es:(%rdi)
    776b:	aa                   	stos   %al,%es:(%rdi)
    776c:	aa                   	stos   %al,%es:(%rdi)
    776d:	aa                   	stos   %al,%es:(%rdi)
    776e:	aa                   	stos   %al,%es:(%rdi)
    776f:	aa                   	stos   %al,%es:(%rdi)
    7770:	aa                   	stos   %al,%es:(%rdi)
    7771:	aa                   	stos   %al,%es:(%rdi)
    7772:	aa                   	stos   %al,%es:(%rdi)
    7773:	aa                   	stos   %al,%es:(%rdi)
    7774:	aa                   	stos   %al,%es:(%rdi)
    7775:	aa                   	stos   %al,%es:(%rdi)
    7776:	aa                   	stos   %al,%es:(%rdi)
    7777:	aa                   	stos   %al,%es:(%rdi)
    7778:	aa                   	stos   %al,%es:(%rdi)
    7779:	aa                   	stos   %al,%es:(%rdi)
    777a:	aa                   	stos   %al,%es:(%rdi)
    777b:	aa                   	stos   %al,%es:(%rdi)
    777c:	aa                   	stos   %al,%es:(%rdi)
    777d:	aa                   	stos   %al,%es:(%rdi)
    777e:	aa                   	stos   %al,%es:(%rdi)
    777f:	aa                   	stos   %al,%es:(%rdi)
    7780:	aa                   	stos   %al,%es:(%rdi)
    7781:	aa                   	stos   %al,%es:(%rdi)
    7782:	aa                   	stos   %al,%es:(%rdi)
    7783:	aa                   	stos   %al,%es:(%rdi)
    7784:	aa                   	stos   %al,%es:(%rdi)
    7785:	aa                   	stos   %al,%es:(%rdi)
    7786:	aa                   	stos   %al,%es:(%rdi)
    7787:	aa                   	stos   %al,%es:(%rdi)
    7788:	aa                   	stos   %al,%es:(%rdi)
    7789:	aa                   	stos   %al,%es:(%rdi)
    778a:	aa                   	stos   %al,%es:(%rdi)
    778b:	aa                   	stos   %al,%es:(%rdi)
    778c:	aa                   	stos   %al,%es:(%rdi)
    778d:	aa                   	stos   %al,%es:(%rdi)
    778e:	aa                   	stos   %al,%es:(%rdi)
    778f:	aa                   	stos   %al,%es:(%rdi)
    7790:	aa                   	stos   %al,%es:(%rdi)
    7791:	aa                   	stos   %al,%es:(%rdi)
    7792:	aa                   	stos   %al,%es:(%rdi)
    7793:	aa                   	stos   %al,%es:(%rdi)
    7794:	aa                   	stos   %al,%es:(%rdi)
    7795:	aa                   	stos   %al,%es:(%rdi)
    7796:	aa                   	stos   %al,%es:(%rdi)
    7797:	aa                   	stos   %al,%es:(%rdi)
    7798:	aa                   	stos   %al,%es:(%rdi)
    7799:	aa                   	stos   %al,%es:(%rdi)
    779a:	aa                   	stos   %al,%es:(%rdi)
    779b:	aa                   	stos   %al,%es:(%rdi)
    779c:	aa                   	stos   %al,%es:(%rdi)
    779d:	aa                   	stos   %al,%es:(%rdi)
    779e:	aa                   	stos   %al,%es:(%rdi)
    779f:	aa                   	stos   %al,%es:(%rdi)
    77a0:	aa                   	stos   %al,%es:(%rdi)
    77a1:	aa                   	stos   %al,%es:(%rdi)
    77a2:	aa                   	stos   %al,%es:(%rdi)
    77a3:	aa                   	stos   %al,%es:(%rdi)
    77a4:	aa                   	stos   %al,%es:(%rdi)
    77a5:	aa                   	stos   %al,%es:(%rdi)
    77a6:	aa                   	stos   %al,%es:(%rdi)
    77a7:	aa                   	stos   %al,%es:(%rdi)
    77a8:	aa                   	stos   %al,%es:(%rdi)
    77a9:	aa                   	stos   %al,%es:(%rdi)
    77aa:	aa                   	stos   %al,%es:(%rdi)
    77ab:	aa                   	stos   %al,%es:(%rdi)
    77ac:	aa                   	stos   %al,%es:(%rdi)
    77ad:	aa                   	stos   %al,%es:(%rdi)
    77ae:	aa                   	stos   %al,%es:(%rdi)
    77af:	aa                   	stos   %al,%es:(%rdi)
    77b0:	aa                   	stos   %al,%es:(%rdi)
    77b1:	aa                   	stos   %al,%es:(%rdi)
    77b2:	aa                   	stos   %al,%es:(%rdi)
    77b3:	aa                   	stos   %al,%es:(%rdi)
    77b4:	aa                   	stos   %al,%es:(%rdi)
    77b5:	aa                   	stos   %al,%es:(%rdi)
    77b6:	aa                   	stos   %al,%es:(%rdi)
    77b7:	aa                   	stos   %al,%es:(%rdi)
    77b8:	aa                   	stos   %al,%es:(%rdi)
    77b9:	aa                   	stos   %al,%es:(%rdi)
    77ba:	aa                   	stos   %al,%es:(%rdi)
    77bb:	aa                   	stos   %al,%es:(%rdi)
    77bc:	aa                   	stos   %al,%es:(%rdi)
    77bd:	aa                   	stos   %al,%es:(%rdi)
    77be:	aa                   	stos   %al,%es:(%rdi)
    77bf:	aa                   	stos   %al,%es:(%rdi)
    77c0:	aa                   	stos   %al,%es:(%rdi)
    77c1:	aa                   	stos   %al,%es:(%rdi)
    77c2:	aa                   	stos   %al,%es:(%rdi)
    77c3:	aa                   	stos   %al,%es:(%rdi)
    77c4:	aa                   	stos   %al,%es:(%rdi)
    77c5:	aa                   	stos   %al,%es:(%rdi)
    77c6:	aa                   	stos   %al,%es:(%rdi)
    77c7:	aa                   	stos   %al,%es:(%rdi)
    77c8:	aa                   	stos   %al,%es:(%rdi)
    77c9:	aa                   	stos   %al,%es:(%rdi)
    77ca:	aa                   	stos   %al,%es:(%rdi)
    77cb:	aa                   	stos   %al,%es:(%rdi)
    77cc:	aa                   	stos   %al,%es:(%rdi)
    77cd:	aa                   	stos   %al,%es:(%rdi)
    77ce:	aa                   	stos   %al,%es:(%rdi)
    77cf:	aa                   	stos   %al,%es:(%rdi)
    77d0:	aa                   	stos   %al,%es:(%rdi)
    77d1:	aa                   	stos   %al,%es:(%rdi)
    77d2:	aa                   	stos   %al,%es:(%rdi)
    77d3:	aa                   	stos   %al,%es:(%rdi)
    77d4:	aa                   	stos   %al,%es:(%rdi)
    77d5:	aa                   	stos   %al,%es:(%rdi)
    77d6:	aa                   	stos   %al,%es:(%rdi)
    77d7:	aa                   	stos   %al,%es:(%rdi)
    77d8:	aa                   	stos   %al,%es:(%rdi)
    77d9:	aa                   	stos   %al,%es:(%rdi)
    77da:	aa                   	stos   %al,%es:(%rdi)
    77db:	aa                   	stos   %al,%es:(%rdi)
    77dc:	aa                   	stos   %al,%es:(%rdi)
    77dd:	aa                   	stos   %al,%es:(%rdi)
    77de:	aa                   	stos   %al,%es:(%rdi)
    77df:	aa                   	stos   %al,%es:(%rdi)
    77e0:	aa                   	stos   %al,%es:(%rdi)
    77e1:	aa                   	stos   %al,%es:(%rdi)
    77e2:	aa                   	stos   %al,%es:(%rdi)
    77e3:	aa                   	stos   %al,%es:(%rdi)
    77e4:	aa                   	stos   %al,%es:(%rdi)
    77e5:	aa                   	stos   %al,%es:(%rdi)
    77e6:	aa                   	stos   %al,%es:(%rdi)
    77e7:	aa                   	stos   %al,%es:(%rdi)
    77e8:	aa                   	stos   %al,%es:(%rdi)
    77e9:	aa                   	stos   %al,%es:(%rdi)
    77ea:	aa                   	stos   %al,%es:(%rdi)
    77eb:	aa                   	stos   %al,%es:(%rdi)
    77ec:	aa                   	stos   %al,%es:(%rdi)
    77ed:	aa                   	stos   %al,%es:(%rdi)
    77ee:	aa                   	stos   %al,%es:(%rdi)
    77ef:	aa                   	stos   %al,%es:(%rdi)
    77f0:	aa                   	stos   %al,%es:(%rdi)
    77f1:	aa                   	stos   %al,%es:(%rdi)
    77f2:	aa                   	stos   %al,%es:(%rdi)
    77f3:	aa                   	stos   %al,%es:(%rdi)
    77f4:	aa                   	stos   %al,%es:(%rdi)
    77f5:	aa                   	stos   %al,%es:(%rdi)
    77f6:	aa                   	stos   %al,%es:(%rdi)
    77f7:	aa                   	stos   %al,%es:(%rdi)
    77f8:	aa                   	stos   %al,%es:(%rdi)
    77f9:	aa                   	stos   %al,%es:(%rdi)
    77fa:	aa                   	stos   %al,%es:(%rdi)
    77fb:	aa                   	stos   %al,%es:(%rdi)
    77fc:	aa                   	stos   %al,%es:(%rdi)
    77fd:	aa                   	stos   %al,%es:(%rdi)
    77fe:	aa                   	stos   %al,%es:(%rdi)
    77ff:	aa                   	stos   %al,%es:(%rdi)
    7800:	aa                   	stos   %al,%es:(%rdi)
    7801:	aa                   	stos   %al,%es:(%rdi)
    7802:	aa                   	stos   %al,%es:(%rdi)
    7803:	aa                   	stos   %al,%es:(%rdi)
    7804:	aa                   	stos   %al,%es:(%rdi)
    7805:	aa                   	stos   %al,%es:(%rdi)
    7806:	aa                   	stos   %al,%es:(%rdi)
    7807:	aa                   	stos   %al,%es:(%rdi)
    7808:	aa                   	stos   %al,%es:(%rdi)
    7809:	aa                   	stos   %al,%es:(%rdi)
    780a:	aa                   	stos   %al,%es:(%rdi)
    780b:	aa                   	stos   %al,%es:(%rdi)
    780c:	aa                   	stos   %al,%es:(%rdi)
    780d:	aa                   	stos   %al,%es:(%rdi)
    780e:	aa                   	stos   %al,%es:(%rdi)
    780f:	aa                   	stos   %al,%es:(%rdi)
    7810:	aa                   	stos   %al,%es:(%rdi)
    7811:	aa                   	stos   %al,%es:(%rdi)
    7812:	aa                   	stos   %al,%es:(%rdi)
    7813:	aa                   	stos   %al,%es:(%rdi)
    7814:	aa                   	stos   %al,%es:(%rdi)
    7815:	aa                   	stos   %al,%es:(%rdi)
    7816:	aa                   	stos   %al,%es:(%rdi)
    7817:	aa                   	stos   %al,%es:(%rdi)
    7818:	aa                   	stos   %al,%es:(%rdi)
    7819:	aa                   	stos   %al,%es:(%rdi)
    781a:	aa                   	stos   %al,%es:(%rdi)
    781b:	aa                   	stos   %al,%es:(%rdi)
    781c:	aa                   	stos   %al,%es:(%rdi)
    781d:	aa                   	stos   %al,%es:(%rdi)
    781e:	aa                   	stos   %al,%es:(%rdi)
    781f:	aa                   	stos   %al,%es:(%rdi)
    7820:	aa                   	stos   %al,%es:(%rdi)
    7821:	aa                   	stos   %al,%es:(%rdi)
    7822:	aa                   	stos   %al,%es:(%rdi)
    7823:	aa                   	stos   %al,%es:(%rdi)
    7824:	aa                   	stos   %al,%es:(%rdi)
    7825:	aa                   	stos   %al,%es:(%rdi)
    7826:	aa                   	stos   %al,%es:(%rdi)
    7827:	aa                   	stos   %al,%es:(%rdi)
    7828:	aa                   	stos   %al,%es:(%rdi)
    7829:	aa                   	stos   %al,%es:(%rdi)
    782a:	aa                   	stos   %al,%es:(%rdi)
    782b:	aa                   	stos   %al,%es:(%rdi)
    782c:	aa                   	stos   %al,%es:(%rdi)
    782d:	aa                   	stos   %al,%es:(%rdi)
    782e:	aa                   	stos   %al,%es:(%rdi)
    782f:	aa                   	stos   %al,%es:(%rdi)
    7830:	aa                   	stos   %al,%es:(%rdi)
    7831:	aa                   	stos   %al,%es:(%rdi)
    7832:	aa                   	stos   %al,%es:(%rdi)
    7833:	aa                   	stos   %al,%es:(%rdi)
    7834:	aa                   	stos   %al,%es:(%rdi)
    7835:	aa                   	stos   %al,%es:(%rdi)
    7836:	aa                   	stos   %al,%es:(%rdi)
    7837:	aa                   	stos   %al,%es:(%rdi)
    7838:	aa                   	stos   %al,%es:(%rdi)
    7839:	aa                   	stos   %al,%es:(%rdi)
    783a:	aa                   	stos   %al,%es:(%rdi)
    783b:	aa                   	stos   %al,%es:(%rdi)
    783c:	aa                   	stos   %al,%es:(%rdi)
    783d:	aa                   	stos   %al,%es:(%rdi)
    783e:	aa                   	stos   %al,%es:(%rdi)
    783f:	aa                   	stos   %al,%es:(%rdi)
    7840:	aa                   	stos   %al,%es:(%rdi)
    7841:	aa                   	stos   %al,%es:(%rdi)
    7842:	aa                   	stos   %al,%es:(%rdi)
    7843:	aa                   	stos   %al,%es:(%rdi)
    7844:	aa                   	stos   %al,%es:(%rdi)
    7845:	aa                   	stos   %al,%es:(%rdi)
    7846:	aa                   	stos   %al,%es:(%rdi)
    7847:	aa                   	stos   %al,%es:(%rdi)
    7848:	aa                   	stos   %al,%es:(%rdi)
    7849:	aa                   	stos   %al,%es:(%rdi)
    784a:	aa                   	stos   %al,%es:(%rdi)
    784b:	aa                   	stos   %al,%es:(%rdi)
    784c:	aa                   	stos   %al,%es:(%rdi)
    784d:	aa                   	stos   %al,%es:(%rdi)
    784e:	aa                   	stos   %al,%es:(%rdi)
    784f:	aa                   	stos   %al,%es:(%rdi)
    7850:	aa                   	stos   %al,%es:(%rdi)
    7851:	aa                   	stos   %al,%es:(%rdi)
    7852:	aa                   	stos   %al,%es:(%rdi)
    7853:	aa                   	stos   %al,%es:(%rdi)
    7854:	aa                   	stos   %al,%es:(%rdi)
    7855:	aa                   	stos   %al,%es:(%rdi)
    7856:	aa                   	stos   %al,%es:(%rdi)
    7857:	aa                   	stos   %al,%es:(%rdi)
    7858:	aa                   	stos   %al,%es:(%rdi)
    7859:	aa                   	stos   %al,%es:(%rdi)
    785a:	aa                   	stos   %al,%es:(%rdi)
    785b:	aa                   	stos   %al,%es:(%rdi)
    785c:	aa                   	stos   %al,%es:(%rdi)
    785d:	aa                   	stos   %al,%es:(%rdi)
    785e:	aa                   	stos   %al,%es:(%rdi)
    785f:	aa                   	stos   %al,%es:(%rdi)
    7860:	aa                   	stos   %al,%es:(%rdi)
    7861:	aa                   	stos   %al,%es:(%rdi)
    7862:	aa                   	stos   %al,%es:(%rdi)
    7863:	aa                   	stos   %al,%es:(%rdi)
    7864:	aa                   	stos   %al,%es:(%rdi)
    7865:	aa                   	stos   %al,%es:(%rdi)
    7866:	aa                   	stos   %al,%es:(%rdi)
    7867:	aa                   	stos   %al,%es:(%rdi)
    7868:	aa                   	stos   %al,%es:(%rdi)
    7869:	aa                   	stos   %al,%es:(%rdi)
    786a:	aa                   	stos   %al,%es:(%rdi)
    786b:	aa                   	stos   %al,%es:(%rdi)
    786c:	aa                   	stos   %al,%es:(%rdi)
    786d:	aa                   	stos   %al,%es:(%rdi)
    786e:	aa                   	stos   %al,%es:(%rdi)
    786f:	aa                   	stos   %al,%es:(%rdi)
    7870:	aa                   	stos   %al,%es:(%rdi)
    7871:	aa                   	stos   %al,%es:(%rdi)
    7872:	aa                   	stos   %al,%es:(%rdi)
    7873:	aa                   	stos   %al,%es:(%rdi)
    7874:	aa                   	stos   %al,%es:(%rdi)
    7875:	aa                   	stos   %al,%es:(%rdi)
    7876:	aa                   	stos   %al,%es:(%rdi)
    7877:	aa                   	stos   %al,%es:(%rdi)
    7878:	aa                   	stos   %al,%es:(%rdi)
    7879:	aa                   	stos   %al,%es:(%rdi)
    787a:	aa                   	stos   %al,%es:(%rdi)
    787b:	aa                   	stos   %al,%es:(%rdi)
    787c:	aa                   	stos   %al,%es:(%rdi)
    787d:	aa                   	stos   %al,%es:(%rdi)
    787e:	aa                   	stos   %al,%es:(%rdi)
    787f:	aa                   	stos   %al,%es:(%rdi)
    7880:	aa                   	stos   %al,%es:(%rdi)
    7881:	aa                   	stos   %al,%es:(%rdi)
    7882:	aa                   	stos   %al,%es:(%rdi)
    7883:	aa                   	stos   %al,%es:(%rdi)
    7884:	aa                   	stos   %al,%es:(%rdi)
    7885:	aa                   	stos   %al,%es:(%rdi)
    7886:	aa                   	stos   %al,%es:(%rdi)
    7887:	aa                   	stos   %al,%es:(%rdi)
    7888:	aa                   	stos   %al,%es:(%rdi)
    7889:	aa                   	stos   %al,%es:(%rdi)
    788a:	aa                   	stos   %al,%es:(%rdi)
    788b:	aa                   	stos   %al,%es:(%rdi)
    788c:	aa                   	stos   %al,%es:(%rdi)
    788d:	aa                   	stos   %al,%es:(%rdi)
    788e:	aa                   	stos   %al,%es:(%rdi)
    788f:	aa                   	stos   %al,%es:(%rdi)
    7890:	aa                   	stos   %al,%es:(%rdi)
    7891:	aa                   	stos   %al,%es:(%rdi)
    7892:	aa                   	stos   %al,%es:(%rdi)
    7893:	aa                   	stos   %al,%es:(%rdi)
    7894:	aa                   	stos   %al,%es:(%rdi)
    7895:	aa                   	stos   %al,%es:(%rdi)
    7896:	aa                   	stos   %al,%es:(%rdi)
    7897:	aa                   	stos   %al,%es:(%rdi)
    7898:	aa                   	stos   %al,%es:(%rdi)
    7899:	aa                   	stos   %al,%es:(%rdi)
    789a:	aa                   	stos   %al,%es:(%rdi)
    789b:	aa                   	stos   %al,%es:(%rdi)
    789c:	aa                   	stos   %al,%es:(%rdi)
    789d:	aa                   	stos   %al,%es:(%rdi)
    789e:	aa                   	stos   %al,%es:(%rdi)
    789f:	aa                   	stos   %al,%es:(%rdi)
    78a0:	aa                   	stos   %al,%es:(%rdi)
    78a1:	aa                   	stos   %al,%es:(%rdi)
    78a2:	aa                   	stos   %al,%es:(%rdi)
    78a3:	aa                   	stos   %al,%es:(%rdi)
    78a4:	aa                   	stos   %al,%es:(%rdi)
    78a5:	aa                   	stos   %al,%es:(%rdi)
    78a6:	aa                   	stos   %al,%es:(%rdi)
    78a7:	aa                   	stos   %al,%es:(%rdi)
    78a8:	aa                   	stos   %al,%es:(%rdi)
    78a9:	aa                   	stos   %al,%es:(%rdi)
    78aa:	aa                   	stos   %al,%es:(%rdi)
    78ab:	aa                   	stos   %al,%es:(%rdi)
    78ac:	aa                   	stos   %al,%es:(%rdi)
    78ad:	aa                   	stos   %al,%es:(%rdi)
    78ae:	aa                   	stos   %al,%es:(%rdi)
    78af:	aa                   	stos   %al,%es:(%rdi)
    78b0:	aa                   	stos   %al,%es:(%rdi)
    78b1:	aa                   	stos   %al,%es:(%rdi)
    78b2:	aa                   	stos   %al,%es:(%rdi)
    78b3:	aa                   	stos   %al,%es:(%rdi)
    78b4:	aa                   	stos   %al,%es:(%rdi)
    78b5:	aa                   	stos   %al,%es:(%rdi)
    78b6:	aa                   	stos   %al,%es:(%rdi)
    78b7:	aa                   	stos   %al,%es:(%rdi)
    78b8:	aa                   	stos   %al,%es:(%rdi)
    78b9:	aa                   	stos   %al,%es:(%rdi)
    78ba:	aa                   	stos   %al,%es:(%rdi)
    78bb:	aa                   	stos   %al,%es:(%rdi)
    78bc:	aa                   	stos   %al,%es:(%rdi)
    78bd:	aa                   	stos   %al,%es:(%rdi)
    78be:	aa                   	stos   %al,%es:(%rdi)
    78bf:	aa                   	stos   %al,%es:(%rdi)
    78c0:	aa                   	stos   %al,%es:(%rdi)
    78c1:	aa                   	stos   %al,%es:(%rdi)
    78c2:	aa                   	stos   %al,%es:(%rdi)
    78c3:	aa                   	stos   %al,%es:(%rdi)
    78c4:	aa                   	stos   %al,%es:(%rdi)
    78c5:	aa                   	stos   %al,%es:(%rdi)
    78c6:	aa                   	stos   %al,%es:(%rdi)
    78c7:	aa                   	stos   %al,%es:(%rdi)
    78c8:	aa                   	stos   %al,%es:(%rdi)
    78c9:	aa                   	stos   %al,%es:(%rdi)
    78ca:	aa                   	stos   %al,%es:(%rdi)
    78cb:	aa                   	stos   %al,%es:(%rdi)
    78cc:	aa                   	stos   %al,%es:(%rdi)
    78cd:	aa                   	stos   %al,%es:(%rdi)
    78ce:	aa                   	stos   %al,%es:(%rdi)
    78cf:	aa                   	stos   %al,%es:(%rdi)
    78d0:	aa                   	stos   %al,%es:(%rdi)
    78d1:	aa                   	stos   %al,%es:(%rdi)
    78d2:	aa                   	stos   %al,%es:(%rdi)
    78d3:	aa                   	stos   %al,%es:(%rdi)
    78d4:	aa                   	stos   %al,%es:(%rdi)
    78d5:	aa                   	stos   %al,%es:(%rdi)
    78d6:	aa                   	stos   %al,%es:(%rdi)
    78d7:	aa                   	stos   %al,%es:(%rdi)
    78d8:	aa                   	stos   %al,%es:(%rdi)
    78d9:	aa                   	stos   %al,%es:(%rdi)
    78da:	aa                   	stos   %al,%es:(%rdi)
    78db:	aa                   	stos   %al,%es:(%rdi)
    78dc:	aa                   	stos   %al,%es:(%rdi)
    78dd:	aa                   	stos   %al,%es:(%rdi)
    78de:	aa                   	stos   %al,%es:(%rdi)
    78df:	aa                   	stos   %al,%es:(%rdi)
    78e0:	aa                   	stos   %al,%es:(%rdi)
    78e1:	aa                   	stos   %al,%es:(%rdi)
    78e2:	aa                   	stos   %al,%es:(%rdi)
    78e3:	aa                   	stos   %al,%es:(%rdi)
    78e4:	aa                   	stos   %al,%es:(%rdi)
    78e5:	aa                   	stos   %al,%es:(%rdi)
    78e6:	aa                   	stos   %al,%es:(%rdi)
    78e7:	aa                   	stos   %al,%es:(%rdi)
    78e8:	aa                   	stos   %al,%es:(%rdi)
    78e9:	aa                   	stos   %al,%es:(%rdi)
    78ea:	aa                   	stos   %al,%es:(%rdi)
    78eb:	aa                   	stos   %al,%es:(%rdi)
    78ec:	aa                   	stos   %al,%es:(%rdi)
    78ed:	aa                   	stos   %al,%es:(%rdi)
    78ee:	aa                   	stos   %al,%es:(%rdi)
    78ef:	aa                   	stos   %al,%es:(%rdi)
    78f0:	aa                   	stos   %al,%es:(%rdi)
    78f1:	aa                   	stos   %al,%es:(%rdi)
    78f2:	aa                   	stos   %al,%es:(%rdi)
    78f3:	aa                   	stos   %al,%es:(%rdi)
    78f4:	aa                   	stos   %al,%es:(%rdi)
    78f5:	aa                   	stos   %al,%es:(%rdi)
    78f6:	aa                   	stos   %al,%es:(%rdi)
    78f7:	aa                   	stos   %al,%es:(%rdi)
    78f8:	aa                   	stos   %al,%es:(%rdi)
    78f9:	aa                   	stos   %al,%es:(%rdi)
    78fa:	aa                   	stos   %al,%es:(%rdi)
    78fb:	aa                   	stos   %al,%es:(%rdi)
    78fc:	aa                   	stos   %al,%es:(%rdi)
    78fd:	aa                   	stos   %al,%es:(%rdi)
    78fe:	aa                   	stos   %al,%es:(%rdi)
    78ff:	aa                   	stos   %al,%es:(%rdi)
    7900:	aa                   	stos   %al,%es:(%rdi)
    7901:	aa                   	stos   %al,%es:(%rdi)
    7902:	aa                   	stos   %al,%es:(%rdi)
    7903:	aa                   	stos   %al,%es:(%rdi)
    7904:	aa                   	stos   %al,%es:(%rdi)
    7905:	aa                   	stos   %al,%es:(%rdi)
    7906:	aa                   	stos   %al,%es:(%rdi)
    7907:	aa                   	stos   %al,%es:(%rdi)
    7908:	aa                   	stos   %al,%es:(%rdi)
    7909:	aa                   	stos   %al,%es:(%rdi)
    790a:	aa                   	stos   %al,%es:(%rdi)
    790b:	aa                   	stos   %al,%es:(%rdi)
    790c:	aa                   	stos   %al,%es:(%rdi)
    790d:	aa                   	stos   %al,%es:(%rdi)
    790e:	aa                   	stos   %al,%es:(%rdi)
    790f:	aa                   	stos   %al,%es:(%rdi)
    7910:	aa                   	stos   %al,%es:(%rdi)
    7911:	aa                   	stos   %al,%es:(%rdi)
    7912:	aa                   	stos   %al,%es:(%rdi)
    7913:	aa                   	stos   %al,%es:(%rdi)
    7914:	aa                   	stos   %al,%es:(%rdi)
    7915:	aa                   	stos   %al,%es:(%rdi)
    7916:	aa                   	stos   %al,%es:(%rdi)
    7917:	aa                   	stos   %al,%es:(%rdi)
    7918:	aa                   	stos   %al,%es:(%rdi)
    7919:	aa                   	stos   %al,%es:(%rdi)
    791a:	aa                   	stos   %al,%es:(%rdi)
    791b:	aa                   	stos   %al,%es:(%rdi)
    791c:	aa                   	stos   %al,%es:(%rdi)
    791d:	aa                   	stos   %al,%es:(%rdi)
    791e:	aa                   	stos   %al,%es:(%rdi)
    791f:	aa                   	stos   %al,%es:(%rdi)
    7920:	aa                   	stos   %al,%es:(%rdi)
    7921:	aa                   	stos   %al,%es:(%rdi)
    7922:	aa                   	stos   %al,%es:(%rdi)
    7923:	aa                   	stos   %al,%es:(%rdi)
    7924:	aa                   	stos   %al,%es:(%rdi)
    7925:	aa                   	stos   %al,%es:(%rdi)
    7926:	aa                   	stos   %al,%es:(%rdi)
    7927:	aa                   	stos   %al,%es:(%rdi)
    7928:	aa                   	stos   %al,%es:(%rdi)
    7929:	aa                   	stos   %al,%es:(%rdi)
    792a:	aa                   	stos   %al,%es:(%rdi)
    792b:	aa                   	stos   %al,%es:(%rdi)
    792c:	aa                   	stos   %al,%es:(%rdi)
    792d:	aa                   	stos   %al,%es:(%rdi)
    792e:	aa                   	stos   %al,%es:(%rdi)
    792f:	aa                   	stos   %al,%es:(%rdi)
    7930:	aa                   	stos   %al,%es:(%rdi)
    7931:	aa                   	stos   %al,%es:(%rdi)
    7932:	aa                   	stos   %al,%es:(%rdi)
    7933:	aa                   	stos   %al,%es:(%rdi)
    7934:	aa                   	stos   %al,%es:(%rdi)
    7935:	aa                   	stos   %al,%es:(%rdi)
    7936:	aa                   	stos   %al,%es:(%rdi)
    7937:	aa                   	stos   %al,%es:(%rdi)
    7938:	aa                   	stos   %al,%es:(%rdi)
    7939:	aa                   	stos   %al,%es:(%rdi)
    793a:	aa                   	stos   %al,%es:(%rdi)
    793b:	aa                   	stos   %al,%es:(%rdi)
    793c:	aa                   	stos   %al,%es:(%rdi)
    793d:	aa                   	stos   %al,%es:(%rdi)
    793e:	aa                   	stos   %al,%es:(%rdi)
    793f:	aa                   	stos   %al,%es:(%rdi)
    7940:	aa                   	stos   %al,%es:(%rdi)
    7941:	aa                   	stos   %al,%es:(%rdi)
    7942:	aa                   	stos   %al,%es:(%rdi)
    7943:	aa                   	stos   %al,%es:(%rdi)
    7944:	aa                   	stos   %al,%es:(%rdi)
    7945:	aa                   	stos   %al,%es:(%rdi)
    7946:	aa                   	stos   %al,%es:(%rdi)
    7947:	aa                   	stos   %al,%es:(%rdi)
    7948:	aa                   	stos   %al,%es:(%rdi)
    7949:	aa                   	stos   %al,%es:(%rdi)
    794a:	aa                   	stos   %al,%es:(%rdi)
    794b:	aa                   	stos   %al,%es:(%rdi)
    794c:	aa                   	stos   %al,%es:(%rdi)
    794d:	aa                   	stos   %al,%es:(%rdi)
    794e:	aa                   	stos   %al,%es:(%rdi)
    794f:	aa                   	stos   %al,%es:(%rdi)
    7950:	aa                   	stos   %al,%es:(%rdi)
    7951:	aa                   	stos   %al,%es:(%rdi)
    7952:	aa                   	stos   %al,%es:(%rdi)
    7953:	aa                   	stos   %al,%es:(%rdi)
    7954:	aa                   	stos   %al,%es:(%rdi)
    7955:	aa                   	stos   %al,%es:(%rdi)
    7956:	aa                   	stos   %al,%es:(%rdi)
    7957:	aa                   	stos   %al,%es:(%rdi)
    7958:	aa                   	stos   %al,%es:(%rdi)
    7959:	aa                   	stos   %al,%es:(%rdi)
    795a:	aa                   	stos   %al,%es:(%rdi)
    795b:	aa                   	stos   %al,%es:(%rdi)
    795c:	aa                   	stos   %al,%es:(%rdi)
    795d:	aa                   	stos   %al,%es:(%rdi)
    795e:	aa                   	stos   %al,%es:(%rdi)
    795f:	aa                   	stos   %al,%es:(%rdi)
    7960:	aa                   	stos   %al,%es:(%rdi)
    7961:	aa                   	stos   %al,%es:(%rdi)
    7962:	aa                   	stos   %al,%es:(%rdi)
    7963:	aa                   	stos   %al,%es:(%rdi)
    7964:	aa                   	stos   %al,%es:(%rdi)
    7965:	aa                   	stos   %al,%es:(%rdi)
    7966:	aa                   	stos   %al,%es:(%rdi)
    7967:	aa                   	stos   %al,%es:(%rdi)
    7968:	aa                   	stos   %al,%es:(%rdi)
    7969:	aa                   	stos   %al,%es:(%rdi)
    796a:	aa                   	stos   %al,%es:(%rdi)
    796b:	aa                   	stos   %al,%es:(%rdi)
    796c:	aa                   	stos   %al,%es:(%rdi)
    796d:	aa                   	stos   %al,%es:(%rdi)
    796e:	aa                   	stos   %al,%es:(%rdi)
    796f:	aa                   	stos   %al,%es:(%rdi)
    7970:	aa                   	stos   %al,%es:(%rdi)
    7971:	aa                   	stos   %al,%es:(%rdi)
    7972:	aa                   	stos   %al,%es:(%rdi)
    7973:	aa                   	stos   %al,%es:(%rdi)
    7974:	aa                   	stos   %al,%es:(%rdi)
    7975:	aa                   	stos   %al,%es:(%rdi)
    7976:	aa                   	stos   %al,%es:(%rdi)
    7977:	aa                   	stos   %al,%es:(%rdi)
    7978:	aa                   	stos   %al,%es:(%rdi)
    7979:	aa                   	stos   %al,%es:(%rdi)
    797a:	aa                   	stos   %al,%es:(%rdi)
    797b:	aa                   	stos   %al,%es:(%rdi)
    797c:	aa                   	stos   %al,%es:(%rdi)
    797d:	aa                   	stos   %al,%es:(%rdi)
    797e:	aa                   	stos   %al,%es:(%rdi)
    797f:	aa                   	stos   %al,%es:(%rdi)
    7980:	aa                   	stos   %al,%es:(%rdi)
    7981:	aa                   	stos   %al,%es:(%rdi)
    7982:	aa                   	stos   %al,%es:(%rdi)
    7983:	aa                   	stos   %al,%es:(%rdi)
    7984:	aa                   	stos   %al,%es:(%rdi)
    7985:	aa                   	stos   %al,%es:(%rdi)
    7986:	aa                   	stos   %al,%es:(%rdi)
    7987:	aa                   	stos   %al,%es:(%rdi)
    7988:	aa                   	stos   %al,%es:(%rdi)
    7989:	aa                   	stos   %al,%es:(%rdi)
    798a:	aa                   	stos   %al,%es:(%rdi)
    798b:	aa                   	stos   %al,%es:(%rdi)
    798c:	aa                   	stos   %al,%es:(%rdi)
    798d:	aa                   	stos   %al,%es:(%rdi)
    798e:	aa                   	stos   %al,%es:(%rdi)
    798f:	aa                   	stos   %al,%es:(%rdi)
    7990:	aa                   	stos   %al,%es:(%rdi)
    7991:	aa                   	stos   %al,%es:(%rdi)
    7992:	aa                   	stos   %al,%es:(%rdi)
    7993:	aa                   	stos   %al,%es:(%rdi)
    7994:	aa                   	stos   %al,%es:(%rdi)
    7995:	aa                   	stos   %al,%es:(%rdi)
    7996:	aa                   	stos   %al,%es:(%rdi)
    7997:	aa                   	stos   %al,%es:(%rdi)
    7998:	aa                   	stos   %al,%es:(%rdi)
    7999:	aa                   	stos   %al,%es:(%rdi)
    799a:	aa                   	stos   %al,%es:(%rdi)
    799b:	aa                   	stos   %al,%es:(%rdi)
    799c:	aa                   	stos   %al,%es:(%rdi)
    799d:	aa                   	stos   %al,%es:(%rdi)
    799e:	aa                   	stos   %al,%es:(%rdi)
    799f:	aa                   	stos   %al,%es:(%rdi)
    79a0:	aa                   	stos   %al,%es:(%rdi)
    79a1:	aa                   	stos   %al,%es:(%rdi)
    79a2:	aa                   	stos   %al,%es:(%rdi)
    79a3:	aa                   	stos   %al,%es:(%rdi)
    79a4:	aa                   	stos   %al,%es:(%rdi)
    79a5:	aa                   	stos   %al,%es:(%rdi)
    79a6:	aa                   	stos   %al,%es:(%rdi)
    79a7:	aa                   	stos   %al,%es:(%rdi)
    79a8:	aa                   	stos   %al,%es:(%rdi)
    79a9:	aa                   	stos   %al,%es:(%rdi)
    79aa:	aa                   	stos   %al,%es:(%rdi)
    79ab:	aa                   	stos   %al,%es:(%rdi)
    79ac:	aa                   	stos   %al,%es:(%rdi)
    79ad:	aa                   	stos   %al,%es:(%rdi)
    79ae:	aa                   	stos   %al,%es:(%rdi)
    79af:	aa                   	stos   %al,%es:(%rdi)
    79b0:	aa                   	stos   %al,%es:(%rdi)
    79b1:	aa                   	stos   %al,%es:(%rdi)
    79b2:	aa                   	stos   %al,%es:(%rdi)
    79b3:	aa                   	stos   %al,%es:(%rdi)
    79b4:	aa                   	stos   %al,%es:(%rdi)
    79b5:	aa                   	stos   %al,%es:(%rdi)
    79b6:	aa                   	stos   %al,%es:(%rdi)
    79b7:	aa                   	stos   %al,%es:(%rdi)
    79b8:	aa                   	stos   %al,%es:(%rdi)
    79b9:	aa                   	stos   %al,%es:(%rdi)
    79ba:	aa                   	stos   %al,%es:(%rdi)
    79bb:	aa                   	stos   %al,%es:(%rdi)
    79bc:	aa                   	stos   %al,%es:(%rdi)
    79bd:	aa                   	stos   %al,%es:(%rdi)
    79be:	aa                   	stos   %al,%es:(%rdi)
    79bf:	aa                   	stos   %al,%es:(%rdi)
    79c0:	aa                   	stos   %al,%es:(%rdi)
    79c1:	aa                   	stos   %al,%es:(%rdi)
    79c2:	aa                   	stos   %al,%es:(%rdi)
    79c3:	aa                   	stos   %al,%es:(%rdi)
    79c4:	aa                   	stos   %al,%es:(%rdi)
    79c5:	aa                   	stos   %al,%es:(%rdi)
    79c6:	aa                   	stos   %al,%es:(%rdi)
    79c7:	aa                   	stos   %al,%es:(%rdi)
    79c8:	aa                   	stos   %al,%es:(%rdi)
    79c9:	aa                   	stos   %al,%es:(%rdi)
    79ca:	aa                   	stos   %al,%es:(%rdi)
    79cb:	aa                   	stos   %al,%es:(%rdi)
    79cc:	aa                   	stos   %al,%es:(%rdi)
    79cd:	aa                   	stos   %al,%es:(%rdi)
    79ce:	aa                   	stos   %al,%es:(%rdi)
    79cf:	aa                   	stos   %al,%es:(%rdi)
    79d0:	aa                   	stos   %al,%es:(%rdi)
    79d1:	aa                   	stos   %al,%es:(%rdi)
    79d2:	aa                   	stos   %al,%es:(%rdi)
    79d3:	aa                   	stos   %al,%es:(%rdi)
    79d4:	aa                   	stos   %al,%es:(%rdi)
    79d5:	aa                   	stos   %al,%es:(%rdi)
    79d6:	aa                   	stos   %al,%es:(%rdi)
    79d7:	aa                   	stos   %al,%es:(%rdi)
    79d8:	aa                   	stos   %al,%es:(%rdi)
    79d9:	aa                   	stos   %al,%es:(%rdi)
    79da:	aa                   	stos   %al,%es:(%rdi)
    79db:	aa                   	stos   %al,%es:(%rdi)
    79dc:	aa                   	stos   %al,%es:(%rdi)
    79dd:	aa                   	stos   %al,%es:(%rdi)
    79de:	aa                   	stos   %al,%es:(%rdi)
    79df:	aa                   	stos   %al,%es:(%rdi)
    79e0:	aa                   	stos   %al,%es:(%rdi)
    79e1:	aa                   	stos   %al,%es:(%rdi)
    79e2:	aa                   	stos   %al,%es:(%rdi)
    79e3:	aa                   	stos   %al,%es:(%rdi)
    79e4:	aa                   	stos   %al,%es:(%rdi)
    79e5:	aa                   	stos   %al,%es:(%rdi)
    79e6:	aa                   	stos   %al,%es:(%rdi)
    79e7:	aa                   	stos   %al,%es:(%rdi)
    79e8:	aa                   	stos   %al,%es:(%rdi)
    79e9:	aa                   	stos   %al,%es:(%rdi)
    79ea:	aa                   	stos   %al,%es:(%rdi)
    79eb:	aa                   	stos   %al,%es:(%rdi)
    79ec:	aa                   	stos   %al,%es:(%rdi)
    79ed:	aa                   	stos   %al,%es:(%rdi)
    79ee:	aa                   	stos   %al,%es:(%rdi)
    79ef:	aa                   	stos   %al,%es:(%rdi)
    79f0:	aa                   	stos   %al,%es:(%rdi)
    79f1:	aa                   	stos   %al,%es:(%rdi)
    79f2:	aa                   	stos   %al,%es:(%rdi)
    79f3:	aa                   	stos   %al,%es:(%rdi)
    79f4:	aa                   	stos   %al,%es:(%rdi)
    79f5:	aa                   	stos   %al,%es:(%rdi)
    79f6:	aa                   	stos   %al,%es:(%rdi)
    79f7:	aa                   	stos   %al,%es:(%rdi)
    79f8:	aa                   	stos   %al,%es:(%rdi)
    79f9:	aa                   	stos   %al,%es:(%rdi)
    79fa:	aa                   	stos   %al,%es:(%rdi)
    79fb:	aa                   	stos   %al,%es:(%rdi)
    79fc:	aa                   	stos   %al,%es:(%rdi)
    79fd:	aa                   	stos   %al,%es:(%rdi)
    79fe:	aa                   	stos   %al,%es:(%rdi)
    79ff:	aa                   	stos   %al,%es:(%rdi)
    7a00:	aa                   	stos   %al,%es:(%rdi)
    7a01:	aa                   	stos   %al,%es:(%rdi)
    7a02:	aa                   	stos   %al,%es:(%rdi)
    7a03:	aa                   	stos   %al,%es:(%rdi)
    7a04:	aa                   	stos   %al,%es:(%rdi)
    7a05:	aa                   	stos   %al,%es:(%rdi)
    7a06:	aa                   	stos   %al,%es:(%rdi)
    7a07:	aa                   	stos   %al,%es:(%rdi)
    7a08:	aa                   	stos   %al,%es:(%rdi)
    7a09:	aa                   	stos   %al,%es:(%rdi)
    7a0a:	aa                   	stos   %al,%es:(%rdi)
    7a0b:	aa                   	stos   %al,%es:(%rdi)
    7a0c:	aa                   	stos   %al,%es:(%rdi)
    7a0d:	aa                   	stos   %al,%es:(%rdi)
    7a0e:	aa                   	stos   %al,%es:(%rdi)
    7a0f:	aa                   	stos   %al,%es:(%rdi)
    7a10:	aa                   	stos   %al,%es:(%rdi)
    7a11:	aa                   	stos   %al,%es:(%rdi)
    7a12:	aa                   	stos   %al,%es:(%rdi)
    7a13:	aa                   	stos   %al,%es:(%rdi)
    7a14:	aa                   	stos   %al,%es:(%rdi)
    7a15:	aa                   	stos   %al,%es:(%rdi)
    7a16:	aa                   	stos   %al,%es:(%rdi)
    7a17:	aa                   	stos   %al,%es:(%rdi)
    7a18:	aa                   	stos   %al,%es:(%rdi)
    7a19:	aa                   	stos   %al,%es:(%rdi)
    7a1a:	aa                   	stos   %al,%es:(%rdi)
    7a1b:	aa                   	stos   %al,%es:(%rdi)
    7a1c:	aa                   	stos   %al,%es:(%rdi)
    7a1d:	aa                   	stos   %al,%es:(%rdi)
    7a1e:	aa                   	stos   %al,%es:(%rdi)
    7a1f:	aa                   	stos   %al,%es:(%rdi)
    7a20:	aa                   	stos   %al,%es:(%rdi)
    7a21:	aa                   	stos   %al,%es:(%rdi)
    7a22:	aa                   	stos   %al,%es:(%rdi)
    7a23:	aa                   	stos   %al,%es:(%rdi)
    7a24:	aa                   	stos   %al,%es:(%rdi)
    7a25:	aa                   	stos   %al,%es:(%rdi)
    7a26:	aa                   	stos   %al,%es:(%rdi)
    7a27:	aa                   	stos   %al,%es:(%rdi)
    7a28:	aa                   	stos   %al,%es:(%rdi)
    7a29:	aa                   	stos   %al,%es:(%rdi)
    7a2a:	aa                   	stos   %al,%es:(%rdi)
    7a2b:	aa                   	stos   %al,%es:(%rdi)
    7a2c:	aa                   	stos   %al,%es:(%rdi)
    7a2d:	aa                   	stos   %al,%es:(%rdi)
    7a2e:	aa                   	stos   %al,%es:(%rdi)
    7a2f:	aa                   	stos   %al,%es:(%rdi)
    7a30:	aa                   	stos   %al,%es:(%rdi)
    7a31:	aa                   	stos   %al,%es:(%rdi)
    7a32:	aa                   	stos   %al,%es:(%rdi)
    7a33:	aa                   	stos   %al,%es:(%rdi)
    7a34:	aa                   	stos   %al,%es:(%rdi)
    7a35:	aa                   	stos   %al,%es:(%rdi)
    7a36:	aa                   	stos   %al,%es:(%rdi)
    7a37:	aa                   	stos   %al,%es:(%rdi)
    7a38:	aa                   	stos   %al,%es:(%rdi)
    7a39:	aa                   	stos   %al,%es:(%rdi)
    7a3a:	aa                   	stos   %al,%es:(%rdi)
    7a3b:	aa                   	stos   %al,%es:(%rdi)
    7a3c:	aa                   	stos   %al,%es:(%rdi)
    7a3d:	aa                   	stos   %al,%es:(%rdi)
    7a3e:	aa                   	stos   %al,%es:(%rdi)
    7a3f:	aa                   	stos   %al,%es:(%rdi)
    7a40:	aa                   	stos   %al,%es:(%rdi)
    7a41:	aa                   	stos   %al,%es:(%rdi)
    7a42:	aa                   	stos   %al,%es:(%rdi)
    7a43:	aa                   	stos   %al,%es:(%rdi)
    7a44:	aa                   	stos   %al,%es:(%rdi)
    7a45:	aa                   	stos   %al,%es:(%rdi)
    7a46:	aa                   	stos   %al,%es:(%rdi)
    7a47:	aa                   	stos   %al,%es:(%rdi)
    7a48:	aa                   	stos   %al,%es:(%rdi)
    7a49:	aa                   	stos   %al,%es:(%rdi)
    7a4a:	aa                   	stos   %al,%es:(%rdi)
    7a4b:	aa                   	stos   %al,%es:(%rdi)
    7a4c:	aa                   	stos   %al,%es:(%rdi)
    7a4d:	aa                   	stos   %al,%es:(%rdi)
    7a4e:	aa                   	stos   %al,%es:(%rdi)
    7a4f:	aa                   	stos   %al,%es:(%rdi)
    7a50:	aa                   	stos   %al,%es:(%rdi)
    7a51:	aa                   	stos   %al,%es:(%rdi)
    7a52:	aa                   	stos   %al,%es:(%rdi)
    7a53:	aa                   	stos   %al,%es:(%rdi)
    7a54:	aa                   	stos   %al,%es:(%rdi)
    7a55:	aa                   	stos   %al,%es:(%rdi)
    7a56:	aa                   	stos   %al,%es:(%rdi)
    7a57:	aa                   	stos   %al,%es:(%rdi)
    7a58:	aa                   	stos   %al,%es:(%rdi)
    7a59:	aa                   	stos   %al,%es:(%rdi)
    7a5a:	aa                   	stos   %al,%es:(%rdi)
    7a5b:	aa                   	stos   %al,%es:(%rdi)
    7a5c:	aa                   	stos   %al,%es:(%rdi)
    7a5d:	aa                   	stos   %al,%es:(%rdi)
    7a5e:	aa                   	stos   %al,%es:(%rdi)
    7a5f:	aa                   	stos   %al,%es:(%rdi)
    7a60:	aa                   	stos   %al,%es:(%rdi)
    7a61:	aa                   	stos   %al,%es:(%rdi)
    7a62:	aa                   	stos   %al,%es:(%rdi)
    7a63:	aa                   	stos   %al,%es:(%rdi)
    7a64:	aa                   	stos   %al,%es:(%rdi)
    7a65:	aa                   	stos   %al,%es:(%rdi)
    7a66:	aa                   	stos   %al,%es:(%rdi)
    7a67:	aa                   	stos   %al,%es:(%rdi)
    7a68:	aa                   	stos   %al,%es:(%rdi)
    7a69:	aa                   	stos   %al,%es:(%rdi)
    7a6a:	aa                   	stos   %al,%es:(%rdi)
    7a6b:	aa                   	stos   %al,%es:(%rdi)
    7a6c:	aa                   	stos   %al,%es:(%rdi)
    7a6d:	aa                   	stos   %al,%es:(%rdi)
    7a6e:	aa                   	stos   %al,%es:(%rdi)
    7a6f:	aa                   	stos   %al,%es:(%rdi)
    7a70:	aa                   	stos   %al,%es:(%rdi)
    7a71:	aa                   	stos   %al,%es:(%rdi)
    7a72:	aa                   	stos   %al,%es:(%rdi)
    7a73:	aa                   	stos   %al,%es:(%rdi)
    7a74:	aa                   	stos   %al,%es:(%rdi)
    7a75:	aa                   	stos   %al,%es:(%rdi)
    7a76:	aa                   	stos   %al,%es:(%rdi)
    7a77:	aa                   	stos   %al,%es:(%rdi)
    7a78:	aa                   	stos   %al,%es:(%rdi)
    7a79:	aa                   	stos   %al,%es:(%rdi)
    7a7a:	aa                   	stos   %al,%es:(%rdi)
    7a7b:	aa                   	stos   %al,%es:(%rdi)
    7a7c:	aa                   	stos   %al,%es:(%rdi)
    7a7d:	aa                   	stos   %al,%es:(%rdi)
    7a7e:	aa                   	stos   %al,%es:(%rdi)
    7a7f:	aa                   	stos   %al,%es:(%rdi)
    7a80:	aa                   	stos   %al,%es:(%rdi)
    7a81:	aa                   	stos   %al,%es:(%rdi)
    7a82:	aa                   	stos   %al,%es:(%rdi)
    7a83:	aa                   	stos   %al,%es:(%rdi)
    7a84:	aa                   	stos   %al,%es:(%rdi)
    7a85:	aa                   	stos   %al,%es:(%rdi)
    7a86:	aa                   	stos   %al,%es:(%rdi)
    7a87:	aa                   	stos   %al,%es:(%rdi)
    7a88:	aa                   	stos   %al,%es:(%rdi)
    7a89:	aa                   	stos   %al,%es:(%rdi)
    7a8a:	aa                   	stos   %al,%es:(%rdi)
    7a8b:	aa                   	stos   %al,%es:(%rdi)
    7a8c:	aa                   	stos   %al,%es:(%rdi)
    7a8d:	aa                   	stos   %al,%es:(%rdi)
    7a8e:	aa                   	stos   %al,%es:(%rdi)
    7a8f:	aa                   	stos   %al,%es:(%rdi)
    7a90:	aa                   	stos   %al,%es:(%rdi)
    7a91:	aa                   	stos   %al,%es:(%rdi)
    7a92:	aa                   	stos   %al,%es:(%rdi)
    7a93:	aa                   	stos   %al,%es:(%rdi)
    7a94:	aa                   	stos   %al,%es:(%rdi)
    7a95:	aa                   	stos   %al,%es:(%rdi)
    7a96:	aa                   	stos   %al,%es:(%rdi)
    7a97:	aa                   	stos   %al,%es:(%rdi)
    7a98:	aa                   	stos   %al,%es:(%rdi)
    7a99:	aa                   	stos   %al,%es:(%rdi)
    7a9a:	aa                   	stos   %al,%es:(%rdi)
    7a9b:	aa                   	stos   %al,%es:(%rdi)
    7a9c:	aa                   	stos   %al,%es:(%rdi)
    7a9d:	aa                   	stos   %al,%es:(%rdi)
    7a9e:	aa                   	stos   %al,%es:(%rdi)
    7a9f:	aa                   	stos   %al,%es:(%rdi)
    7aa0:	aa                   	stos   %al,%es:(%rdi)
    7aa1:	aa                   	stos   %al,%es:(%rdi)
    7aa2:	aa                   	stos   %al,%es:(%rdi)
    7aa3:	aa                   	stos   %al,%es:(%rdi)
    7aa4:	aa                   	stos   %al,%es:(%rdi)
    7aa5:	aa                   	stos   %al,%es:(%rdi)
    7aa6:	aa                   	stos   %al,%es:(%rdi)
    7aa7:	aa                   	stos   %al,%es:(%rdi)
    7aa8:	aa                   	stos   %al,%es:(%rdi)
    7aa9:	aa                   	stos   %al,%es:(%rdi)
    7aaa:	aa                   	stos   %al,%es:(%rdi)
    7aab:	aa                   	stos   %al,%es:(%rdi)
    7aac:	aa                   	stos   %al,%es:(%rdi)
    7aad:	aa                   	stos   %al,%es:(%rdi)
    7aae:	aa                   	stos   %al,%es:(%rdi)
    7aaf:	aa                   	stos   %al,%es:(%rdi)
    7ab0:	aa                   	stos   %al,%es:(%rdi)
    7ab1:	aa                   	stos   %al,%es:(%rdi)
    7ab2:	aa                   	stos   %al,%es:(%rdi)
    7ab3:	aa                   	stos   %al,%es:(%rdi)
    7ab4:	aa                   	stos   %al,%es:(%rdi)
    7ab5:	aa                   	stos   %al,%es:(%rdi)
    7ab6:	aa                   	stos   %al,%es:(%rdi)
    7ab7:	aa                   	stos   %al,%es:(%rdi)
    7ab8:	aa                   	stos   %al,%es:(%rdi)
    7ab9:	aa                   	stos   %al,%es:(%rdi)
    7aba:	aa                   	stos   %al,%es:(%rdi)
    7abb:	aa                   	stos   %al,%es:(%rdi)
    7abc:	aa                   	stos   %al,%es:(%rdi)
    7abd:	aa                   	stos   %al,%es:(%rdi)
    7abe:	aa                   	stos   %al,%es:(%rdi)
    7abf:	aa                   	stos   %al,%es:(%rdi)
    7ac0:	aa                   	stos   %al,%es:(%rdi)
    7ac1:	aa                   	stos   %al,%es:(%rdi)
    7ac2:	aa                   	stos   %al,%es:(%rdi)
    7ac3:	aa                   	stos   %al,%es:(%rdi)
    7ac4:	aa                   	stos   %al,%es:(%rdi)
    7ac5:	aa                   	stos   %al,%es:(%rdi)
    7ac6:	aa                   	stos   %al,%es:(%rdi)
    7ac7:	aa                   	stos   %al,%es:(%rdi)
    7ac8:	aa                   	stos   %al,%es:(%rdi)
    7ac9:	aa                   	stos   %al,%es:(%rdi)
    7aca:	aa                   	stos   %al,%es:(%rdi)
    7acb:	aa                   	stos   %al,%es:(%rdi)
    7acc:	aa                   	stos   %al,%es:(%rdi)
    7acd:	aa                   	stos   %al,%es:(%rdi)
    7ace:	aa                   	stos   %al,%es:(%rdi)
    7acf:	aa                   	stos   %al,%es:(%rdi)
    7ad0:	aa                   	stos   %al,%es:(%rdi)
    7ad1:	aa                   	stos   %al,%es:(%rdi)
    7ad2:	aa                   	stos   %al,%es:(%rdi)
    7ad3:	aa                   	stos   %al,%es:(%rdi)
    7ad4:	aa                   	stos   %al,%es:(%rdi)
    7ad5:	aa                   	stos   %al,%es:(%rdi)
    7ad6:	aa                   	stos   %al,%es:(%rdi)
    7ad7:	aa                   	stos   %al,%es:(%rdi)
    7ad8:	aa                   	stos   %al,%es:(%rdi)
    7ad9:	aa                   	stos   %al,%es:(%rdi)
    7ada:	aa                   	stos   %al,%es:(%rdi)
    7adb:	aa                   	stos   %al,%es:(%rdi)
    7adc:	aa                   	stos   %al,%es:(%rdi)
    7add:	aa                   	stos   %al,%es:(%rdi)
    7ade:	aa                   	stos   %al,%es:(%rdi)
    7adf:	aa                   	stos   %al,%es:(%rdi)
    7ae0:	aa                   	stos   %al,%es:(%rdi)
    7ae1:	aa                   	stos   %al,%es:(%rdi)
    7ae2:	aa                   	stos   %al,%es:(%rdi)
    7ae3:	aa                   	stos   %al,%es:(%rdi)
    7ae4:	aa                   	stos   %al,%es:(%rdi)
    7ae5:	aa                   	stos   %al,%es:(%rdi)
    7ae6:	aa                   	stos   %al,%es:(%rdi)
    7ae7:	aa                   	stos   %al,%es:(%rdi)
    7ae8:	aa                   	stos   %al,%es:(%rdi)
    7ae9:	aa                   	stos   %al,%es:(%rdi)
    7aea:	aa                   	stos   %al,%es:(%rdi)
    7aeb:	aa                   	stos   %al,%es:(%rdi)
    7aec:	aa                   	stos   %al,%es:(%rdi)
    7aed:	aa                   	stos   %al,%es:(%rdi)
    7aee:	aa                   	stos   %al,%es:(%rdi)
    7aef:	aa                   	stos   %al,%es:(%rdi)
    7af0:	aa                   	stos   %al,%es:(%rdi)
    7af1:	aa                   	stos   %al,%es:(%rdi)
    7af2:	aa                   	stos   %al,%es:(%rdi)
    7af3:	aa                   	stos   %al,%es:(%rdi)
    7af4:	aa                   	stos   %al,%es:(%rdi)
    7af5:	aa                   	stos   %al,%es:(%rdi)
    7af6:	aa                   	stos   %al,%es:(%rdi)
    7af7:	aa                   	stos   %al,%es:(%rdi)
    7af8:	aa                   	stos   %al,%es:(%rdi)
    7af9:	aa                   	stos   %al,%es:(%rdi)
    7afa:	aa                   	stos   %al,%es:(%rdi)
    7afb:	aa                   	stos   %al,%es:(%rdi)
    7afc:	aa                   	stos   %al,%es:(%rdi)
    7afd:	aa                   	stos   %al,%es:(%rdi)
    7afe:	aa                   	stos   %al,%es:(%rdi)
    7aff:	aa                   	stos   %al,%es:(%rdi)
    7b00:	aa                   	stos   %al,%es:(%rdi)
    7b01:	aa                   	stos   %al,%es:(%rdi)
    7b02:	aa                   	stos   %al,%es:(%rdi)
    7b03:	aa                   	stos   %al,%es:(%rdi)
    7b04:	aa                   	stos   %al,%es:(%rdi)
    7b05:	aa                   	stos   %al,%es:(%rdi)
    7b06:	aa                   	stos   %al,%es:(%rdi)
    7b07:	aa                   	stos   %al,%es:(%rdi)
    7b08:	aa                   	stos   %al,%es:(%rdi)
    7b09:	aa                   	stos   %al,%es:(%rdi)
    7b0a:	aa                   	stos   %al,%es:(%rdi)
    7b0b:	aa                   	stos   %al,%es:(%rdi)
    7b0c:	aa                   	stos   %al,%es:(%rdi)
    7b0d:	aa                   	stos   %al,%es:(%rdi)
    7b0e:	aa                   	stos   %al,%es:(%rdi)
    7b0f:	aa                   	stos   %al,%es:(%rdi)
    7b10:	aa                   	stos   %al,%es:(%rdi)
    7b11:	aa                   	stos   %al,%es:(%rdi)
    7b12:	aa                   	stos   %al,%es:(%rdi)
    7b13:	aa                   	stos   %al,%es:(%rdi)
    7b14:	aa                   	stos   %al,%es:(%rdi)
    7b15:	aa                   	stos   %al,%es:(%rdi)
    7b16:	aa                   	stos   %al,%es:(%rdi)
    7b17:	aa                   	stos   %al,%es:(%rdi)
    7b18:	aa                   	stos   %al,%es:(%rdi)
    7b19:	aa                   	stos   %al,%es:(%rdi)
    7b1a:	aa                   	stos   %al,%es:(%rdi)
    7b1b:	aa                   	stos   %al,%es:(%rdi)
    7b1c:	aa                   	stos   %al,%es:(%rdi)
    7b1d:	aa                   	stos   %al,%es:(%rdi)
    7b1e:	aa                   	stos   %al,%es:(%rdi)
    7b1f:	aa                   	stos   %al,%es:(%rdi)
    7b20:	aa                   	stos   %al,%es:(%rdi)
    7b21:	aa                   	stos   %al,%es:(%rdi)
    7b22:	aa                   	stos   %al,%es:(%rdi)
    7b23:	aa                   	stos   %al,%es:(%rdi)
    7b24:	aa                   	stos   %al,%es:(%rdi)
    7b25:	aa                   	stos   %al,%es:(%rdi)
    7b26:	aa                   	stos   %al,%es:(%rdi)
    7b27:	aa                   	stos   %al,%es:(%rdi)
    7b28:	aa                   	stos   %al,%es:(%rdi)
    7b29:	aa                   	stos   %al,%es:(%rdi)
    7b2a:	aa                   	stos   %al,%es:(%rdi)
    7b2b:	aa                   	stos   %al,%es:(%rdi)
    7b2c:	aa                   	stos   %al,%es:(%rdi)
    7b2d:	aa                   	stos   %al,%es:(%rdi)
    7b2e:	aa                   	stos   %al,%es:(%rdi)
    7b2f:	aa                   	stos   %al,%es:(%rdi)
    7b30:	aa                   	stos   %al,%es:(%rdi)
    7b31:	aa                   	stos   %al,%es:(%rdi)
    7b32:	aa                   	stos   %al,%es:(%rdi)
    7b33:	aa                   	stos   %al,%es:(%rdi)
    7b34:	aa                   	stos   %al,%es:(%rdi)
    7b35:	aa                   	stos   %al,%es:(%rdi)
    7b36:	aa                   	stos   %al,%es:(%rdi)
    7b37:	aa                   	stos   %al,%es:(%rdi)
    7b38:	aa                   	stos   %al,%es:(%rdi)
    7b39:	aa                   	stos   %al,%es:(%rdi)
    7b3a:	aa                   	stos   %al,%es:(%rdi)
    7b3b:	aa                   	stos   %al,%es:(%rdi)
    7b3c:	aa                   	stos   %al,%es:(%rdi)
    7b3d:	aa                   	stos   %al,%es:(%rdi)
    7b3e:	aa                   	stos   %al,%es:(%rdi)
    7b3f:	aa                   	stos   %al,%es:(%rdi)
    7b40:	aa                   	stos   %al,%es:(%rdi)
    7b41:	aa                   	stos   %al,%es:(%rdi)
    7b42:	aa                   	stos   %al,%es:(%rdi)
    7b43:	aa                   	stos   %al,%es:(%rdi)
    7b44:	aa                   	stos   %al,%es:(%rdi)
    7b45:	aa                   	stos   %al,%es:(%rdi)
    7b46:	aa                   	stos   %al,%es:(%rdi)
    7b47:	aa                   	stos   %al,%es:(%rdi)
    7b48:	aa                   	stos   %al,%es:(%rdi)
    7b49:	aa                   	stos   %al,%es:(%rdi)
    7b4a:	aa                   	stos   %al,%es:(%rdi)
    7b4b:	aa                   	stos   %al,%es:(%rdi)
    7b4c:	aa                   	stos   %al,%es:(%rdi)
    7b4d:	aa                   	stos   %al,%es:(%rdi)
    7b4e:	aa                   	stos   %al,%es:(%rdi)
    7b4f:	aa                   	stos   %al,%es:(%rdi)
    7b50:	aa                   	stos   %al,%es:(%rdi)
    7b51:	aa                   	stos   %al,%es:(%rdi)
    7b52:	aa                   	stos   %al,%es:(%rdi)
    7b53:	aa                   	stos   %al,%es:(%rdi)
    7b54:	aa                   	stos   %al,%es:(%rdi)
    7b55:	aa                   	stos   %al,%es:(%rdi)
    7b56:	aa                   	stos   %al,%es:(%rdi)
    7b57:	aa                   	stos   %al,%es:(%rdi)
    7b58:	aa                   	stos   %al,%es:(%rdi)
    7b59:	aa                   	stos   %al,%es:(%rdi)
    7b5a:	aa                   	stos   %al,%es:(%rdi)
    7b5b:	aa                   	stos   %al,%es:(%rdi)
    7b5c:	aa                   	stos   %al,%es:(%rdi)
    7b5d:	aa                   	stos   %al,%es:(%rdi)
    7b5e:	aa                   	stos   %al,%es:(%rdi)
    7b5f:	aa                   	stos   %al,%es:(%rdi)
    7b60:	aa                   	stos   %al,%es:(%rdi)
    7b61:	aa                   	stos   %al,%es:(%rdi)
    7b62:	aa                   	stos   %al,%es:(%rdi)
    7b63:	aa                   	stos   %al,%es:(%rdi)
    7b64:	aa                   	stos   %al,%es:(%rdi)
    7b65:	aa                   	stos   %al,%es:(%rdi)
    7b66:	aa                   	stos   %al,%es:(%rdi)
    7b67:	aa                   	stos   %al,%es:(%rdi)
    7b68:	aa                   	stos   %al,%es:(%rdi)
    7b69:	aa                   	stos   %al,%es:(%rdi)
    7b6a:	aa                   	stos   %al,%es:(%rdi)
    7b6b:	aa                   	stos   %al,%es:(%rdi)
    7b6c:	aa                   	stos   %al,%es:(%rdi)
    7b6d:	aa                   	stos   %al,%es:(%rdi)
    7b6e:	aa                   	stos   %al,%es:(%rdi)
    7b6f:	aa                   	stos   %al,%es:(%rdi)
    7b70:	aa                   	stos   %al,%es:(%rdi)
    7b71:	aa                   	stos   %al,%es:(%rdi)
    7b72:	aa                   	stos   %al,%es:(%rdi)
    7b73:	aa                   	stos   %al,%es:(%rdi)
    7b74:	aa                   	stos   %al,%es:(%rdi)
    7b75:	aa                   	stos   %al,%es:(%rdi)
    7b76:	aa                   	stos   %al,%es:(%rdi)
    7b77:	aa                   	stos   %al,%es:(%rdi)
    7b78:	aa                   	stos   %al,%es:(%rdi)
    7b79:	aa                   	stos   %al,%es:(%rdi)
    7b7a:	aa                   	stos   %al,%es:(%rdi)
    7b7b:	aa                   	stos   %al,%es:(%rdi)
    7b7c:	aa                   	stos   %al,%es:(%rdi)
    7b7d:	aa                   	stos   %al,%es:(%rdi)
    7b7e:	aa                   	stos   %al,%es:(%rdi)
    7b7f:	aa                   	stos   %al,%es:(%rdi)
    7b80:	aa                   	stos   %al,%es:(%rdi)
    7b81:	aa                   	stos   %al,%es:(%rdi)
    7b82:	aa                   	stos   %al,%es:(%rdi)
    7b83:	aa                   	stos   %al,%es:(%rdi)
    7b84:	aa                   	stos   %al,%es:(%rdi)
    7b85:	aa                   	stos   %al,%es:(%rdi)
    7b86:	aa                   	stos   %al,%es:(%rdi)
    7b87:	aa                   	stos   %al,%es:(%rdi)
    7b88:	aa                   	stos   %al,%es:(%rdi)
    7b89:	aa                   	stos   %al,%es:(%rdi)
    7b8a:	aa                   	stos   %al,%es:(%rdi)
    7b8b:	aa                   	stos   %al,%es:(%rdi)
    7b8c:	aa                   	stos   %al,%es:(%rdi)
    7b8d:	aa                   	stos   %al,%es:(%rdi)
    7b8e:	aa                   	stos   %al,%es:(%rdi)
    7b8f:	aa                   	stos   %al,%es:(%rdi)
    7b90:	aa                   	stos   %al,%es:(%rdi)
    7b91:	aa                   	stos   %al,%es:(%rdi)
    7b92:	aa                   	stos   %al,%es:(%rdi)
    7b93:	aa                   	stos   %al,%es:(%rdi)
    7b94:	aa                   	stos   %al,%es:(%rdi)
    7b95:	aa                   	stos   %al,%es:(%rdi)
    7b96:	aa                   	stos   %al,%es:(%rdi)
    7b97:	aa                   	stos   %al,%es:(%rdi)
    7b98:	aa                   	stos   %al,%es:(%rdi)
    7b99:	aa                   	stos   %al,%es:(%rdi)
    7b9a:	aa                   	stos   %al,%es:(%rdi)
    7b9b:	aa                   	stos   %al,%es:(%rdi)
    7b9c:	aa                   	stos   %al,%es:(%rdi)
    7b9d:	aa                   	stos   %al,%es:(%rdi)
    7b9e:	aa                   	stos   %al,%es:(%rdi)
    7b9f:	aa                   	stos   %al,%es:(%rdi)
    7ba0:	aa                   	stos   %al,%es:(%rdi)
    7ba1:	aa                   	stos   %al,%es:(%rdi)
    7ba2:	aa                   	stos   %al,%es:(%rdi)
    7ba3:	aa                   	stos   %al,%es:(%rdi)
    7ba4:	aa                   	stos   %al,%es:(%rdi)
    7ba5:	aa                   	stos   %al,%es:(%rdi)
    7ba6:	aa                   	stos   %al,%es:(%rdi)
    7ba7:	aa                   	stos   %al,%es:(%rdi)
    7ba8:	aa                   	stos   %al,%es:(%rdi)
    7ba9:	aa                   	stos   %al,%es:(%rdi)
    7baa:	aa                   	stos   %al,%es:(%rdi)
    7bab:	aa                   	stos   %al,%es:(%rdi)
    7bac:	aa                   	stos   %al,%es:(%rdi)
    7bad:	aa                   	stos   %al,%es:(%rdi)
    7bae:	aa                   	stos   %al,%es:(%rdi)
    7baf:	aa                   	stos   %al,%es:(%rdi)
    7bb0:	aa                   	stos   %al,%es:(%rdi)
    7bb1:	aa                   	stos   %al,%es:(%rdi)
    7bb2:	aa                   	stos   %al,%es:(%rdi)
    7bb3:	aa                   	stos   %al,%es:(%rdi)
    7bb4:	aa                   	stos   %al,%es:(%rdi)
    7bb5:	aa                   	stos   %al,%es:(%rdi)
    7bb6:	aa                   	stos   %al,%es:(%rdi)
    7bb7:	aa                   	stos   %al,%es:(%rdi)
    7bb8:	aa                   	stos   %al,%es:(%rdi)
    7bb9:	aa                   	stos   %al,%es:(%rdi)
    7bba:	aa                   	stos   %al,%es:(%rdi)
    7bbb:	aa                   	stos   %al,%es:(%rdi)
    7bbc:	aa                   	stos   %al,%es:(%rdi)
    7bbd:	aa                   	stos   %al,%es:(%rdi)
    7bbe:	aa                   	stos   %al,%es:(%rdi)
    7bbf:	aa                   	stos   %al,%es:(%rdi)
    7bc0:	aa                   	stos   %al,%es:(%rdi)
    7bc1:	aa                   	stos   %al,%es:(%rdi)
    7bc2:	aa                   	stos   %al,%es:(%rdi)
    7bc3:	aa                   	stos   %al,%es:(%rdi)
    7bc4:	aa                   	stos   %al,%es:(%rdi)
    7bc5:	aa                   	stos   %al,%es:(%rdi)
    7bc6:	aa                   	stos   %al,%es:(%rdi)
    7bc7:	aa                   	stos   %al,%es:(%rdi)
    7bc8:	aa                   	stos   %al,%es:(%rdi)
    7bc9:	aa                   	stos   %al,%es:(%rdi)
    7bca:	aa                   	stos   %al,%es:(%rdi)
    7bcb:	aa                   	stos   %al,%es:(%rdi)
    7bcc:	aa                   	stos   %al,%es:(%rdi)
    7bcd:	aa                   	stos   %al,%es:(%rdi)
    7bce:	aa                   	stos   %al,%es:(%rdi)
    7bcf:	aa                   	stos   %al,%es:(%rdi)
    7bd0:	aa                   	stos   %al,%es:(%rdi)
    7bd1:	aa                   	stos   %al,%es:(%rdi)
    7bd2:	aa                   	stos   %al,%es:(%rdi)
    7bd3:	aa                   	stos   %al,%es:(%rdi)
    7bd4:	aa                   	stos   %al,%es:(%rdi)
    7bd5:	aa                   	stos   %al,%es:(%rdi)
    7bd6:	aa                   	stos   %al,%es:(%rdi)
    7bd7:	aa                   	stos   %al,%es:(%rdi)
    7bd8:	aa                   	stos   %al,%es:(%rdi)
    7bd9:	aa                   	stos   %al,%es:(%rdi)
    7bda:	aa                   	stos   %al,%es:(%rdi)
    7bdb:	aa                   	stos   %al,%es:(%rdi)
    7bdc:	aa                   	stos   %al,%es:(%rdi)
    7bdd:	aa                   	stos   %al,%es:(%rdi)
    7bde:	aa                   	stos   %al,%es:(%rdi)
    7bdf:	aa                   	stos   %al,%es:(%rdi)
    7be0:	aa                   	stos   %al,%es:(%rdi)
    7be1:	aa                   	stos   %al,%es:(%rdi)
    7be2:	aa                   	stos   %al,%es:(%rdi)
    7be3:	aa                   	stos   %al,%es:(%rdi)
    7be4:	aa                   	stos   %al,%es:(%rdi)
    7be5:	aa                   	stos   %al,%es:(%rdi)
    7be6:	aa                   	stos   %al,%es:(%rdi)
    7be7:	aa                   	stos   %al,%es:(%rdi)
    7be8:	aa                   	stos   %al,%es:(%rdi)
    7be9:	aa                   	stos   %al,%es:(%rdi)
    7bea:	aa                   	stos   %al,%es:(%rdi)
    7beb:	aa                   	stos   %al,%es:(%rdi)
    7bec:	aa                   	stos   %al,%es:(%rdi)
    7bed:	aa                   	stos   %al,%es:(%rdi)
    7bee:	aa                   	stos   %al,%es:(%rdi)
    7bef:	aa                   	stos   %al,%es:(%rdi)
    7bf0:	aa                   	stos   %al,%es:(%rdi)
    7bf1:	aa                   	stos   %al,%es:(%rdi)
    7bf2:	aa                   	stos   %al,%es:(%rdi)
    7bf3:	aa                   	stos   %al,%es:(%rdi)
    7bf4:	aa                   	stos   %al,%es:(%rdi)
    7bf5:	aa                   	stos   %al,%es:(%rdi)
    7bf6:	aa                   	stos   %al,%es:(%rdi)
    7bf7:	aa                   	stos   %al,%es:(%rdi)
    7bf8:	aa                   	stos   %al,%es:(%rdi)
    7bf9:	aa                   	stos   %al,%es:(%rdi)
    7bfa:	aa                   	stos   %al,%es:(%rdi)
    7bfb:	aa                   	stos   %al,%es:(%rdi)
    7bfc:	aa                   	stos   %al,%es:(%rdi)
    7bfd:	aa                   	stos   %al,%es:(%rdi)
    7bfe:	aa                   	stos   %al,%es:(%rdi)
    7bff:	aa                   	stos   %al,%es:(%rdi)
    7c00:	aa                   	stos   %al,%es:(%rdi)
    7c01:	aa                   	stos   %al,%es:(%rdi)
    7c02:	aa                   	stos   %al,%es:(%rdi)
    7c03:	aa                   	stos   %al,%es:(%rdi)
    7c04:	aa                   	stos   %al,%es:(%rdi)
    7c05:	aa                   	stos   %al,%es:(%rdi)
    7c06:	aa                   	stos   %al,%es:(%rdi)
    7c07:	aa                   	stos   %al,%es:(%rdi)
    7c08:	aa                   	stos   %al,%es:(%rdi)
    7c09:	aa                   	stos   %al,%es:(%rdi)
    7c0a:	aa                   	stos   %al,%es:(%rdi)
    7c0b:	aa                   	stos   %al,%es:(%rdi)
    7c0c:	aa                   	stos   %al,%es:(%rdi)
    7c0d:	aa                   	stos   %al,%es:(%rdi)
    7c0e:	aa                   	stos   %al,%es:(%rdi)
    7c0f:	aa                   	stos   %al,%es:(%rdi)
    7c10:	aa                   	stos   %al,%es:(%rdi)
    7c11:	aa                   	stos   %al,%es:(%rdi)
    7c12:	aa                   	stos   %al,%es:(%rdi)
    7c13:	aa                   	stos   %al,%es:(%rdi)
    7c14:	aa                   	stos   %al,%es:(%rdi)
    7c15:	aa                   	stos   %al,%es:(%rdi)
    7c16:	aa                   	stos   %al,%es:(%rdi)
    7c17:	aa                   	stos   %al,%es:(%rdi)
    7c18:	aa                   	stos   %al,%es:(%rdi)
    7c19:	aa                   	stos   %al,%es:(%rdi)
    7c1a:	aa                   	stos   %al,%es:(%rdi)
    7c1b:	aa                   	stos   %al,%es:(%rdi)
    7c1c:	aa                   	stos   %al,%es:(%rdi)
    7c1d:	aa                   	stos   %al,%es:(%rdi)
    7c1e:	aa                   	stos   %al,%es:(%rdi)
    7c1f:	aa                   	stos   %al,%es:(%rdi)
    7c20:	aa                   	stos   %al,%es:(%rdi)
    7c21:	aa                   	stos   %al,%es:(%rdi)
    7c22:	aa                   	stos   %al,%es:(%rdi)
    7c23:	aa                   	stos   %al,%es:(%rdi)
    7c24:	aa                   	stos   %al,%es:(%rdi)
    7c25:	aa                   	stos   %al,%es:(%rdi)
    7c26:	aa                   	stos   %al,%es:(%rdi)
    7c27:	aa                   	stos   %al,%es:(%rdi)
    7c28:	aa                   	stos   %al,%es:(%rdi)
    7c29:	aa                   	stos   %al,%es:(%rdi)
    7c2a:	aa                   	stos   %al,%es:(%rdi)
    7c2b:	aa                   	stos   %al,%es:(%rdi)
    7c2c:	aa                   	stos   %al,%es:(%rdi)
    7c2d:	aa                   	stos   %al,%es:(%rdi)
    7c2e:	aa                   	stos   %al,%es:(%rdi)
    7c2f:	aa                   	stos   %al,%es:(%rdi)
    7c30:	aa                   	stos   %al,%es:(%rdi)
    7c31:	aa                   	stos   %al,%es:(%rdi)
    7c32:	aa                   	stos   %al,%es:(%rdi)
    7c33:	aa                   	stos   %al,%es:(%rdi)
    7c34:	aa                   	stos   %al,%es:(%rdi)
    7c35:	aa                   	stos   %al,%es:(%rdi)
    7c36:	aa                   	stos   %al,%es:(%rdi)
    7c37:	aa                   	stos   %al,%es:(%rdi)
    7c38:	aa                   	stos   %al,%es:(%rdi)
    7c39:	aa                   	stos   %al,%es:(%rdi)
    7c3a:	aa                   	stos   %al,%es:(%rdi)
    7c3b:	aa                   	stos   %al,%es:(%rdi)
    7c3c:	aa                   	stos   %al,%es:(%rdi)
    7c3d:	aa                   	stos   %al,%es:(%rdi)
    7c3e:	aa                   	stos   %al,%es:(%rdi)
    7c3f:	aa                   	stos   %al,%es:(%rdi)
    7c40:	aa                   	stos   %al,%es:(%rdi)
    7c41:	aa                   	stos   %al,%es:(%rdi)
    7c42:	aa                   	stos   %al,%es:(%rdi)
    7c43:	aa                   	stos   %al,%es:(%rdi)
    7c44:	aa                   	stos   %al,%es:(%rdi)
    7c45:	aa                   	stos   %al,%es:(%rdi)
    7c46:	aa                   	stos   %al,%es:(%rdi)
    7c47:	aa                   	stos   %al,%es:(%rdi)
    7c48:	aa                   	stos   %al,%es:(%rdi)
    7c49:	aa                   	stos   %al,%es:(%rdi)
    7c4a:	aa                   	stos   %al,%es:(%rdi)
    7c4b:	aa                   	stos   %al,%es:(%rdi)
    7c4c:	aa                   	stos   %al,%es:(%rdi)
    7c4d:	aa                   	stos   %al,%es:(%rdi)
    7c4e:	aa                   	stos   %al,%es:(%rdi)
    7c4f:	aa                   	stos   %al,%es:(%rdi)
    7c50:	aa                   	stos   %al,%es:(%rdi)
    7c51:	aa                   	stos   %al,%es:(%rdi)
    7c52:	aa                   	stos   %al,%es:(%rdi)
    7c53:	aa                   	stos   %al,%es:(%rdi)
    7c54:	aa                   	stos   %al,%es:(%rdi)
    7c55:	aa                   	stos   %al,%es:(%rdi)
    7c56:	aa                   	stos   %al,%es:(%rdi)
    7c57:	aa                   	stos   %al,%es:(%rdi)
    7c58:	aa                   	stos   %al,%es:(%rdi)
    7c59:	aa                   	stos   %al,%es:(%rdi)
    7c5a:	aa                   	stos   %al,%es:(%rdi)
    7c5b:	aa                   	stos   %al,%es:(%rdi)
    7c5c:	aa                   	stos   %al,%es:(%rdi)
    7c5d:	aa                   	stos   %al,%es:(%rdi)
    7c5e:	aa                   	stos   %al,%es:(%rdi)
    7c5f:	aa                   	stos   %al,%es:(%rdi)
    7c60:	aa                   	stos   %al,%es:(%rdi)
    7c61:	aa                   	stos   %al,%es:(%rdi)
    7c62:	aa                   	stos   %al,%es:(%rdi)
    7c63:	aa                   	stos   %al,%es:(%rdi)
    7c64:	aa                   	stos   %al,%es:(%rdi)
    7c65:	aa                   	stos   %al,%es:(%rdi)
    7c66:	aa                   	stos   %al,%es:(%rdi)
    7c67:	aa                   	stos   %al,%es:(%rdi)
    7c68:	aa                   	stos   %al,%es:(%rdi)
    7c69:	aa                   	stos   %al,%es:(%rdi)
    7c6a:	aa                   	stos   %al,%es:(%rdi)
    7c6b:	aa                   	stos   %al,%es:(%rdi)
    7c6c:	aa                   	stos   %al,%es:(%rdi)
    7c6d:	aa                   	stos   %al,%es:(%rdi)
    7c6e:	aa                   	stos   %al,%es:(%rdi)
    7c6f:	aa                   	stos   %al,%es:(%rdi)
    7c70:	aa                   	stos   %al,%es:(%rdi)
    7c71:	aa                   	stos   %al,%es:(%rdi)
    7c72:	aa                   	stos   %al,%es:(%rdi)
    7c73:	aa                   	stos   %al,%es:(%rdi)
    7c74:	aa                   	stos   %al,%es:(%rdi)
    7c75:	aa                   	stos   %al,%es:(%rdi)
    7c76:	aa                   	stos   %al,%es:(%rdi)
    7c77:	aa                   	stos   %al,%es:(%rdi)
    7c78:	aa                   	stos   %al,%es:(%rdi)
    7c79:	aa                   	stos   %al,%es:(%rdi)
    7c7a:	aa                   	stos   %al,%es:(%rdi)
    7c7b:	aa                   	stos   %al,%es:(%rdi)
    7c7c:	aa                   	stos   %al,%es:(%rdi)
    7c7d:	aa                   	stos   %al,%es:(%rdi)
    7c7e:	aa                   	stos   %al,%es:(%rdi)
    7c7f:	aa                   	stos   %al,%es:(%rdi)
    7c80:	aa                   	stos   %al,%es:(%rdi)
    7c81:	aa                   	stos   %al,%es:(%rdi)
    7c82:	aa                   	stos   %al,%es:(%rdi)
    7c83:	aa                   	stos   %al,%es:(%rdi)
    7c84:	aa                   	stos   %al,%es:(%rdi)
    7c85:	aa                   	stos   %al,%es:(%rdi)
    7c86:	aa                   	stos   %al,%es:(%rdi)
    7c87:	aa                   	stos   %al,%es:(%rdi)
    7c88:	aa                   	stos   %al,%es:(%rdi)
    7c89:	aa                   	stos   %al,%es:(%rdi)
    7c8a:	aa                   	stos   %al,%es:(%rdi)
    7c8b:	aa                   	stos   %al,%es:(%rdi)
    7c8c:	aa                   	stos   %al,%es:(%rdi)
    7c8d:	aa                   	stos   %al,%es:(%rdi)
    7c8e:	aa                   	stos   %al,%es:(%rdi)
    7c8f:	aa                   	stos   %al,%es:(%rdi)
    7c90:	aa                   	stos   %al,%es:(%rdi)
    7c91:	aa                   	stos   %al,%es:(%rdi)
    7c92:	aa                   	stos   %al,%es:(%rdi)
    7c93:	aa                   	stos   %al,%es:(%rdi)
    7c94:	aa                   	stos   %al,%es:(%rdi)
    7c95:	aa                   	stos   %al,%es:(%rdi)
    7c96:	aa                   	stos   %al,%es:(%rdi)
    7c97:	aa                   	stos   %al,%es:(%rdi)
    7c98:	aa                   	stos   %al,%es:(%rdi)
    7c99:	aa                   	stos   %al,%es:(%rdi)
    7c9a:	aa                   	stos   %al,%es:(%rdi)
    7c9b:	aa                   	stos   %al,%es:(%rdi)
    7c9c:	aa                   	stos   %al,%es:(%rdi)
    7c9d:	aa                   	stos   %al,%es:(%rdi)
    7c9e:	aa                   	stos   %al,%es:(%rdi)
    7c9f:	aa                   	stos   %al,%es:(%rdi)
    7ca0:	aa                   	stos   %al,%es:(%rdi)
    7ca1:	aa                   	stos   %al,%es:(%rdi)
    7ca2:	aa                   	stos   %al,%es:(%rdi)
    7ca3:	aa                   	stos   %al,%es:(%rdi)
    7ca4:	aa                   	stos   %al,%es:(%rdi)
    7ca5:	aa                   	stos   %al,%es:(%rdi)
    7ca6:	aa                   	stos   %al,%es:(%rdi)
    7ca7:	aa                   	stos   %al,%es:(%rdi)
    7ca8:	aa                   	stos   %al,%es:(%rdi)
    7ca9:	aa                   	stos   %al,%es:(%rdi)
    7caa:	aa                   	stos   %al,%es:(%rdi)
    7cab:	aa                   	stos   %al,%es:(%rdi)
    7cac:	aa                   	stos   %al,%es:(%rdi)
    7cad:	aa                   	stos   %al,%es:(%rdi)
    7cae:	aa                   	stos   %al,%es:(%rdi)
    7caf:	aa                   	stos   %al,%es:(%rdi)
    7cb0:	aa                   	stos   %al,%es:(%rdi)
    7cb1:	aa                   	stos   %al,%es:(%rdi)
    7cb2:	aa                   	stos   %al,%es:(%rdi)
    7cb3:	aa                   	stos   %al,%es:(%rdi)
    7cb4:	aa                   	stos   %al,%es:(%rdi)
    7cb5:	aa                   	stos   %al,%es:(%rdi)
    7cb6:	aa                   	stos   %al,%es:(%rdi)
    7cb7:	aa                   	stos   %al,%es:(%rdi)
    7cb8:	aa                   	stos   %al,%es:(%rdi)
    7cb9:	aa                   	stos   %al,%es:(%rdi)
    7cba:	aa                   	stos   %al,%es:(%rdi)
    7cbb:	aa                   	stos   %al,%es:(%rdi)
    7cbc:	aa                   	stos   %al,%es:(%rdi)
    7cbd:	aa                   	stos   %al,%es:(%rdi)
    7cbe:	aa                   	stos   %al,%es:(%rdi)
    7cbf:	aa                   	stos   %al,%es:(%rdi)
    7cc0:	aa                   	stos   %al,%es:(%rdi)
    7cc1:	aa                   	stos   %al,%es:(%rdi)
    7cc2:	aa                   	stos   %al,%es:(%rdi)
    7cc3:	aa                   	stos   %al,%es:(%rdi)
    7cc4:	aa                   	stos   %al,%es:(%rdi)
    7cc5:	aa                   	stos   %al,%es:(%rdi)
    7cc6:	aa                   	stos   %al,%es:(%rdi)
    7cc7:	aa                   	stos   %al,%es:(%rdi)
    7cc8:	aa                   	stos   %al,%es:(%rdi)
    7cc9:	aa                   	stos   %al,%es:(%rdi)
    7cca:	aa                   	stos   %al,%es:(%rdi)
    7ccb:	aa                   	stos   %al,%es:(%rdi)
    7ccc:	aa                   	stos   %al,%es:(%rdi)
    7ccd:	aa                   	stos   %al,%es:(%rdi)
    7cce:	aa                   	stos   %al,%es:(%rdi)
    7ccf:	aa                   	stos   %al,%es:(%rdi)
    7cd0:	aa                   	stos   %al,%es:(%rdi)
    7cd1:	aa                   	stos   %al,%es:(%rdi)
    7cd2:	aa                   	stos   %al,%es:(%rdi)
    7cd3:	aa                   	stos   %al,%es:(%rdi)
    7cd4:	aa                   	stos   %al,%es:(%rdi)
    7cd5:	aa                   	stos   %al,%es:(%rdi)
    7cd6:	aa                   	stos   %al,%es:(%rdi)
    7cd7:	aa                   	stos   %al,%es:(%rdi)
    7cd8:	aa                   	stos   %al,%es:(%rdi)
    7cd9:	aa                   	stos   %al,%es:(%rdi)
    7cda:	aa                   	stos   %al,%es:(%rdi)
    7cdb:	aa                   	stos   %al,%es:(%rdi)
    7cdc:	aa                   	stos   %al,%es:(%rdi)
    7cdd:	aa                   	stos   %al,%es:(%rdi)
    7cde:	aa                   	stos   %al,%es:(%rdi)
    7cdf:	aa                   	stos   %al,%es:(%rdi)
    7ce0:	aa                   	stos   %al,%es:(%rdi)
    7ce1:	aa                   	stos   %al,%es:(%rdi)
    7ce2:	aa                   	stos   %al,%es:(%rdi)
    7ce3:	aa                   	stos   %al,%es:(%rdi)
    7ce4:	aa                   	stos   %al,%es:(%rdi)
    7ce5:	aa                   	stos   %al,%es:(%rdi)
    7ce6:	aa                   	stos   %al,%es:(%rdi)
    7ce7:	aa                   	stos   %al,%es:(%rdi)
    7ce8:	aa                   	stos   %al,%es:(%rdi)
    7ce9:	aa                   	stos   %al,%es:(%rdi)
    7cea:	aa                   	stos   %al,%es:(%rdi)
    7ceb:	aa                   	stos   %al,%es:(%rdi)
    7cec:	aa                   	stos   %al,%es:(%rdi)
    7ced:	aa                   	stos   %al,%es:(%rdi)
    7cee:	aa                   	stos   %al,%es:(%rdi)
    7cef:	aa                   	stos   %al,%es:(%rdi)
    7cf0:	aa                   	stos   %al,%es:(%rdi)
    7cf1:	aa                   	stos   %al,%es:(%rdi)
    7cf2:	aa                   	stos   %al,%es:(%rdi)
    7cf3:	aa                   	stos   %al,%es:(%rdi)
    7cf4:	aa                   	stos   %al,%es:(%rdi)
    7cf5:	aa                   	stos   %al,%es:(%rdi)
    7cf6:	aa                   	stos   %al,%es:(%rdi)
    7cf7:	aa                   	stos   %al,%es:(%rdi)
    7cf8:	aa                   	stos   %al,%es:(%rdi)
    7cf9:	aa                   	stos   %al,%es:(%rdi)
    7cfa:	aa                   	stos   %al,%es:(%rdi)
    7cfb:	aa                   	stos   %al,%es:(%rdi)
    7cfc:	aa                   	stos   %al,%es:(%rdi)
    7cfd:	aa                   	stos   %al,%es:(%rdi)
    7cfe:	aa                   	stos   %al,%es:(%rdi)
    7cff:	aa                   	stos   %al,%es:(%rdi)
    7d00:	aa                   	stos   %al,%es:(%rdi)
    7d01:	aa                   	stos   %al,%es:(%rdi)
    7d02:	aa                   	stos   %al,%es:(%rdi)
    7d03:	aa                   	stos   %al,%es:(%rdi)
    7d04:	aa                   	stos   %al,%es:(%rdi)
    7d05:	aa                   	stos   %al,%es:(%rdi)
    7d06:	aa                   	stos   %al,%es:(%rdi)
    7d07:	aa                   	stos   %al,%es:(%rdi)
    7d08:	aa                   	stos   %al,%es:(%rdi)
    7d09:	aa                   	stos   %al,%es:(%rdi)
    7d0a:	aa                   	stos   %al,%es:(%rdi)
    7d0b:	aa                   	stos   %al,%es:(%rdi)
    7d0c:	aa                   	stos   %al,%es:(%rdi)
    7d0d:	aa                   	stos   %al,%es:(%rdi)
    7d0e:	aa                   	stos   %al,%es:(%rdi)
    7d0f:	aa                   	stos   %al,%es:(%rdi)
    7d10:	aa                   	stos   %al,%es:(%rdi)
    7d11:	aa                   	stos   %al,%es:(%rdi)
    7d12:	aa                   	stos   %al,%es:(%rdi)
    7d13:	aa                   	stos   %al,%es:(%rdi)
    7d14:	aa                   	stos   %al,%es:(%rdi)
    7d15:	aa                   	stos   %al,%es:(%rdi)
    7d16:	aa                   	stos   %al,%es:(%rdi)
    7d17:	aa                   	stos   %al,%es:(%rdi)
    7d18:	aa                   	stos   %al,%es:(%rdi)
    7d19:	aa                   	stos   %al,%es:(%rdi)
    7d1a:	aa                   	stos   %al,%es:(%rdi)
    7d1b:	aa                   	stos   %al,%es:(%rdi)
    7d1c:	aa                   	stos   %al,%es:(%rdi)
    7d1d:	aa                   	stos   %al,%es:(%rdi)
    7d1e:	aa                   	stos   %al,%es:(%rdi)
    7d1f:	aa                   	stos   %al,%es:(%rdi)
    7d20:	aa                   	stos   %al,%es:(%rdi)
    7d21:	aa                   	stos   %al,%es:(%rdi)
    7d22:	aa                   	stos   %al,%es:(%rdi)
    7d23:	aa                   	stos   %al,%es:(%rdi)
    7d24:	aa                   	stos   %al,%es:(%rdi)
    7d25:	aa                   	stos   %al,%es:(%rdi)
    7d26:	aa                   	stos   %al,%es:(%rdi)
    7d27:	aa                   	stos   %al,%es:(%rdi)
    7d28:	aa                   	stos   %al,%es:(%rdi)
    7d29:	aa                   	stos   %al,%es:(%rdi)
    7d2a:	aa                   	stos   %al,%es:(%rdi)
    7d2b:	aa                   	stos   %al,%es:(%rdi)
    7d2c:	aa                   	stos   %al,%es:(%rdi)
    7d2d:	aa                   	stos   %al,%es:(%rdi)
    7d2e:	aa                   	stos   %al,%es:(%rdi)
    7d2f:	aa                   	stos   %al,%es:(%rdi)
    7d30:	aa                   	stos   %al,%es:(%rdi)
    7d31:	aa                   	stos   %al,%es:(%rdi)
    7d32:	aa                   	stos   %al,%es:(%rdi)
    7d33:	aa                   	stos   %al,%es:(%rdi)
    7d34:	aa                   	stos   %al,%es:(%rdi)
    7d35:	aa                   	stos   %al,%es:(%rdi)
    7d36:	aa                   	stos   %al,%es:(%rdi)
    7d37:	aa                   	stos   %al,%es:(%rdi)
    7d38:	aa                   	stos   %al,%es:(%rdi)
    7d39:	aa                   	stos   %al,%es:(%rdi)
    7d3a:	aa                   	stos   %al,%es:(%rdi)
    7d3b:	aa                   	stos   %al,%es:(%rdi)
    7d3c:	aa                   	stos   %al,%es:(%rdi)
    7d3d:	aa                   	stos   %al,%es:(%rdi)
    7d3e:	aa                   	stos   %al,%es:(%rdi)
    7d3f:	aa                   	stos   %al,%es:(%rdi)
    7d40:	aa                   	stos   %al,%es:(%rdi)
    7d41:	aa                   	stos   %al,%es:(%rdi)
    7d42:	aa                   	stos   %al,%es:(%rdi)
    7d43:	aa                   	stos   %al,%es:(%rdi)
    7d44:	aa                   	stos   %al,%es:(%rdi)
    7d45:	aa                   	stos   %al,%es:(%rdi)
    7d46:	aa                   	stos   %al,%es:(%rdi)
    7d47:	aa                   	stos   %al,%es:(%rdi)
    7d48:	aa                   	stos   %al,%es:(%rdi)
    7d49:	aa                   	stos   %al,%es:(%rdi)
    7d4a:	aa                   	stos   %al,%es:(%rdi)
    7d4b:	aa                   	stos   %al,%es:(%rdi)
    7d4c:	aa                   	stos   %al,%es:(%rdi)
    7d4d:	aa                   	stos   %al,%es:(%rdi)
    7d4e:	aa                   	stos   %al,%es:(%rdi)
    7d4f:	aa                   	stos   %al,%es:(%rdi)
    7d50:	aa                   	stos   %al,%es:(%rdi)
    7d51:	aa                   	stos   %al,%es:(%rdi)
    7d52:	aa                   	stos   %al,%es:(%rdi)
    7d53:	aa                   	stos   %al,%es:(%rdi)
    7d54:	aa                   	stos   %al,%es:(%rdi)
    7d55:	aa                   	stos   %al,%es:(%rdi)
    7d56:	aa                   	stos   %al,%es:(%rdi)
    7d57:	aa                   	stos   %al,%es:(%rdi)
    7d58:	aa                   	stos   %al,%es:(%rdi)
    7d59:	aa                   	stos   %al,%es:(%rdi)
    7d5a:	aa                   	stos   %al,%es:(%rdi)
    7d5b:	aa                   	stos   %al,%es:(%rdi)
    7d5c:	aa                   	stos   %al,%es:(%rdi)
    7d5d:	aa                   	stos   %al,%es:(%rdi)
    7d5e:	aa                   	stos   %al,%es:(%rdi)
    7d5f:	aa                   	stos   %al,%es:(%rdi)
    7d60:	aa                   	stos   %al,%es:(%rdi)
    7d61:	aa                   	stos   %al,%es:(%rdi)
    7d62:	aa                   	stos   %al,%es:(%rdi)
    7d63:	aa                   	stos   %al,%es:(%rdi)
    7d64:	aa                   	stos   %al,%es:(%rdi)
    7d65:	aa                   	stos   %al,%es:(%rdi)
    7d66:	aa                   	stos   %al,%es:(%rdi)
    7d67:	aa                   	stos   %al,%es:(%rdi)
    7d68:	aa                   	stos   %al,%es:(%rdi)
    7d69:	aa                   	stos   %al,%es:(%rdi)
    7d6a:	aa                   	stos   %al,%es:(%rdi)
    7d6b:	aa                   	stos   %al,%es:(%rdi)
    7d6c:	aa                   	stos   %al,%es:(%rdi)
    7d6d:	aa                   	stos   %al,%es:(%rdi)
    7d6e:	aa                   	stos   %al,%es:(%rdi)
    7d6f:	aa                   	stos   %al,%es:(%rdi)
    7d70:	aa                   	stos   %al,%es:(%rdi)
    7d71:	aa                   	stos   %al,%es:(%rdi)
    7d72:	aa                   	stos   %al,%es:(%rdi)
    7d73:	aa                   	stos   %al,%es:(%rdi)
    7d74:	aa                   	stos   %al,%es:(%rdi)
    7d75:	aa                   	stos   %al,%es:(%rdi)
    7d76:	aa                   	stos   %al,%es:(%rdi)
    7d77:	aa                   	stos   %al,%es:(%rdi)
    7d78:	aa                   	stos   %al,%es:(%rdi)
    7d79:	aa                   	stos   %al,%es:(%rdi)
    7d7a:	aa                   	stos   %al,%es:(%rdi)
    7d7b:	aa                   	stos   %al,%es:(%rdi)
    7d7c:	aa                   	stos   %al,%es:(%rdi)
    7d7d:	aa                   	stos   %al,%es:(%rdi)
    7d7e:	aa                   	stos   %al,%es:(%rdi)
    7d7f:	aa                   	stos   %al,%es:(%rdi)
    7d80:	aa                   	stos   %al,%es:(%rdi)
    7d81:	aa                   	stos   %al,%es:(%rdi)
    7d82:	aa                   	stos   %al,%es:(%rdi)
    7d83:	aa                   	stos   %al,%es:(%rdi)
    7d84:	aa                   	stos   %al,%es:(%rdi)
    7d85:	aa                   	stos   %al,%es:(%rdi)
    7d86:	aa                   	stos   %al,%es:(%rdi)
    7d87:	aa                   	stos   %al,%es:(%rdi)
    7d88:	aa                   	stos   %al,%es:(%rdi)
    7d89:	aa                   	stos   %al,%es:(%rdi)
    7d8a:	aa                   	stos   %al,%es:(%rdi)
    7d8b:	aa                   	stos   %al,%es:(%rdi)
    7d8c:	aa                   	stos   %al,%es:(%rdi)
    7d8d:	aa                   	stos   %al,%es:(%rdi)
    7d8e:	aa                   	stos   %al,%es:(%rdi)
    7d8f:	aa                   	stos   %al,%es:(%rdi)
    7d90:	aa                   	stos   %al,%es:(%rdi)
    7d91:	aa                   	stos   %al,%es:(%rdi)
    7d92:	aa                   	stos   %al,%es:(%rdi)
    7d93:	aa                   	stos   %al,%es:(%rdi)
    7d94:	aa                   	stos   %al,%es:(%rdi)
    7d95:	aa                   	stos   %al,%es:(%rdi)
    7d96:	aa                   	stos   %al,%es:(%rdi)
    7d97:	aa                   	stos   %al,%es:(%rdi)
    7d98:	aa                   	stos   %al,%es:(%rdi)
    7d99:	aa                   	stos   %al,%es:(%rdi)
    7d9a:	aa                   	stos   %al,%es:(%rdi)
    7d9b:	aa                   	stos   %al,%es:(%rdi)
    7d9c:	aa                   	stos   %al,%es:(%rdi)
    7d9d:	aa                   	stos   %al,%es:(%rdi)
    7d9e:	aa                   	stos   %al,%es:(%rdi)
    7d9f:	aa                   	stos   %al,%es:(%rdi)
    7da0:	aa                   	stos   %al,%es:(%rdi)
    7da1:	aa                   	stos   %al,%es:(%rdi)
    7da2:	aa                   	stos   %al,%es:(%rdi)
    7da3:	aa                   	stos   %al,%es:(%rdi)
    7da4:	aa                   	stos   %al,%es:(%rdi)
    7da5:	aa                   	stos   %al,%es:(%rdi)
    7da6:	aa                   	stos   %al,%es:(%rdi)
    7da7:	aa                   	stos   %al,%es:(%rdi)
    7da8:	aa                   	stos   %al,%es:(%rdi)
    7da9:	aa                   	stos   %al,%es:(%rdi)
    7daa:	aa                   	stos   %al,%es:(%rdi)
    7dab:	aa                   	stos   %al,%es:(%rdi)
    7dac:	aa                   	stos   %al,%es:(%rdi)
    7dad:	aa                   	stos   %al,%es:(%rdi)
    7dae:	aa                   	stos   %al,%es:(%rdi)
    7daf:	aa                   	stos   %al,%es:(%rdi)
    7db0:	aa                   	stos   %al,%es:(%rdi)
    7db1:	aa                   	stos   %al,%es:(%rdi)
    7db2:	aa                   	stos   %al,%es:(%rdi)
    7db3:	aa                   	stos   %al,%es:(%rdi)
    7db4:	aa                   	stos   %al,%es:(%rdi)
    7db5:	aa                   	stos   %al,%es:(%rdi)
    7db6:	aa                   	stos   %al,%es:(%rdi)
    7db7:	aa                   	stos   %al,%es:(%rdi)
    7db8:	aa                   	stos   %al,%es:(%rdi)
    7db9:	aa                   	stos   %al,%es:(%rdi)
    7dba:	aa                   	stos   %al,%es:(%rdi)
    7dbb:	aa                   	stos   %al,%es:(%rdi)
    7dbc:	aa                   	stos   %al,%es:(%rdi)
    7dbd:	aa                   	stos   %al,%es:(%rdi)
    7dbe:	aa                   	stos   %al,%es:(%rdi)
    7dbf:	aa                   	stos   %al,%es:(%rdi)
    7dc0:	aa                   	stos   %al,%es:(%rdi)
    7dc1:	aa                   	stos   %al,%es:(%rdi)
    7dc2:	aa                   	stos   %al,%es:(%rdi)
    7dc3:	aa                   	stos   %al,%es:(%rdi)
    7dc4:	aa                   	stos   %al,%es:(%rdi)
    7dc5:	aa                   	stos   %al,%es:(%rdi)
    7dc6:	aa                   	stos   %al,%es:(%rdi)
    7dc7:	aa                   	stos   %al,%es:(%rdi)
    7dc8:	aa                   	stos   %al,%es:(%rdi)
    7dc9:	aa                   	stos   %al,%es:(%rdi)
    7dca:	aa                   	stos   %al,%es:(%rdi)
    7dcb:	aa                   	stos   %al,%es:(%rdi)
    7dcc:	aa                   	stos   %al,%es:(%rdi)
    7dcd:	aa                   	stos   %al,%es:(%rdi)
    7dce:	aa                   	stos   %al,%es:(%rdi)
    7dcf:	aa                   	stos   %al,%es:(%rdi)
    7dd0:	aa                   	stos   %al,%es:(%rdi)
    7dd1:	aa                   	stos   %al,%es:(%rdi)
    7dd2:	aa                   	stos   %al,%es:(%rdi)
    7dd3:	aa                   	stos   %al,%es:(%rdi)
    7dd4:	aa                   	stos   %al,%es:(%rdi)
    7dd5:	aa                   	stos   %al,%es:(%rdi)
    7dd6:	aa                   	stos   %al,%es:(%rdi)
    7dd7:	aa                   	stos   %al,%es:(%rdi)
    7dd8:	aa                   	stos   %al,%es:(%rdi)
    7dd9:	aa                   	stos   %al,%es:(%rdi)
    7dda:	aa                   	stos   %al,%es:(%rdi)
    7ddb:	aa                   	stos   %al,%es:(%rdi)
    7ddc:	aa                   	stos   %al,%es:(%rdi)
    7ddd:	aa                   	stos   %al,%es:(%rdi)
    7dde:	aa                   	stos   %al,%es:(%rdi)
    7ddf:	aa                   	stos   %al,%es:(%rdi)
    7de0:	aa                   	stos   %al,%es:(%rdi)
    7de1:	aa                   	stos   %al,%es:(%rdi)
    7de2:	aa                   	stos   %al,%es:(%rdi)
    7de3:	aa                   	stos   %al,%es:(%rdi)
    7de4:	aa                   	stos   %al,%es:(%rdi)
    7de5:	aa                   	stos   %al,%es:(%rdi)
    7de6:	aa                   	stos   %al,%es:(%rdi)
    7de7:	aa                   	stos   %al,%es:(%rdi)
    7de8:	aa                   	stos   %al,%es:(%rdi)
    7de9:	aa                   	stos   %al,%es:(%rdi)
    7dea:	aa                   	stos   %al,%es:(%rdi)
    7deb:	aa                   	stos   %al,%es:(%rdi)
    7dec:	aa                   	stos   %al,%es:(%rdi)
    7ded:	aa                   	stos   %al,%es:(%rdi)
    7dee:	aa                   	stos   %al,%es:(%rdi)
    7def:	aa                   	stos   %al,%es:(%rdi)
    7df0:	aa                   	stos   %al,%es:(%rdi)
    7df1:	aa                   	stos   %al,%es:(%rdi)
    7df2:	aa                   	stos   %al,%es:(%rdi)
    7df3:	aa                   	stos   %al,%es:(%rdi)
    7df4:	aa                   	stos   %al,%es:(%rdi)
    7df5:	aa                   	stos   %al,%es:(%rdi)
    7df6:	aa                   	stos   %al,%es:(%rdi)
    7df7:	aa                   	stos   %al,%es:(%rdi)
    7df8:	aa                   	stos   %al,%es:(%rdi)
    7df9:	aa                   	stos   %al,%es:(%rdi)
    7dfa:	aa                   	stos   %al,%es:(%rdi)
    7dfb:	aa                   	stos   %al,%es:(%rdi)
    7dfc:	aa                   	stos   %al,%es:(%rdi)
    7dfd:	aa                   	stos   %al,%es:(%rdi)
    7dfe:	aa                   	stos   %al,%es:(%rdi)
    7dff:	aa                   	stos   %al,%es:(%rdi)
    7e00:	aa                   	stos   %al,%es:(%rdi)
    7e01:	aa                   	stos   %al,%es:(%rdi)
    7e02:	aa                   	stos   %al,%es:(%rdi)
    7e03:	aa                   	stos   %al,%es:(%rdi)
    7e04:	aa                   	stos   %al,%es:(%rdi)
    7e05:	aa                   	stos   %al,%es:(%rdi)
    7e06:	aa                   	stos   %al,%es:(%rdi)
    7e07:	aa                   	stos   %al,%es:(%rdi)
    7e08:	aa                   	stos   %al,%es:(%rdi)
    7e09:	aa                   	stos   %al,%es:(%rdi)
    7e0a:	aa                   	stos   %al,%es:(%rdi)
    7e0b:	aa                   	stos   %al,%es:(%rdi)
    7e0c:	aa                   	stos   %al,%es:(%rdi)
    7e0d:	aa                   	stos   %al,%es:(%rdi)
    7e0e:	aa                   	stos   %al,%es:(%rdi)
    7e0f:	aa                   	stos   %al,%es:(%rdi)
    7e10:	aa                   	stos   %al,%es:(%rdi)
    7e11:	aa                   	stos   %al,%es:(%rdi)
    7e12:	aa                   	stos   %al,%es:(%rdi)
    7e13:	aa                   	stos   %al,%es:(%rdi)
    7e14:	aa                   	stos   %al,%es:(%rdi)
    7e15:	aa                   	stos   %al,%es:(%rdi)
    7e16:	aa                   	stos   %al,%es:(%rdi)
    7e17:	aa                   	stos   %al,%es:(%rdi)
    7e18:	aa                   	stos   %al,%es:(%rdi)
    7e19:	aa                   	stos   %al,%es:(%rdi)
    7e1a:	aa                   	stos   %al,%es:(%rdi)
    7e1b:	aa                   	stos   %al,%es:(%rdi)
    7e1c:	aa                   	stos   %al,%es:(%rdi)
    7e1d:	aa                   	stos   %al,%es:(%rdi)
    7e1e:	aa                   	stos   %al,%es:(%rdi)
    7e1f:	aa                   	stos   %al,%es:(%rdi)
    7e20:	aa                   	stos   %al,%es:(%rdi)
    7e21:	aa                   	stos   %al,%es:(%rdi)
    7e22:	aa                   	stos   %al,%es:(%rdi)
    7e23:	aa                   	stos   %al,%es:(%rdi)
    7e24:	aa                   	stos   %al,%es:(%rdi)
    7e25:	aa                   	stos   %al,%es:(%rdi)
    7e26:	aa                   	stos   %al,%es:(%rdi)
    7e27:	aa                   	stos   %al,%es:(%rdi)
    7e28:	aa                   	stos   %al,%es:(%rdi)
    7e29:	aa                   	stos   %al,%es:(%rdi)
    7e2a:	aa                   	stos   %al,%es:(%rdi)
    7e2b:	aa                   	stos   %al,%es:(%rdi)
    7e2c:	aa                   	stos   %al,%es:(%rdi)
    7e2d:	aa                   	stos   %al,%es:(%rdi)
    7e2e:	aa                   	stos   %al,%es:(%rdi)
    7e2f:	aa                   	stos   %al,%es:(%rdi)
    7e30:	aa                   	stos   %al,%es:(%rdi)
    7e31:	aa                   	stos   %al,%es:(%rdi)
    7e32:	aa                   	stos   %al,%es:(%rdi)
    7e33:	aa                   	stos   %al,%es:(%rdi)
    7e34:	aa                   	stos   %al,%es:(%rdi)
    7e35:	aa                   	stos   %al,%es:(%rdi)
    7e36:	aa                   	stos   %al,%es:(%rdi)
    7e37:	aa                   	stos   %al,%es:(%rdi)
    7e38:	aa                   	stos   %al,%es:(%rdi)
    7e39:	aa                   	stos   %al,%es:(%rdi)
    7e3a:	aa                   	stos   %al,%es:(%rdi)
    7e3b:	aa                   	stos   %al,%es:(%rdi)
    7e3c:	aa                   	stos   %al,%es:(%rdi)
    7e3d:	aa                   	stos   %al,%es:(%rdi)
    7e3e:	aa                   	stos   %al,%es:(%rdi)
    7e3f:	aa                   	stos   %al,%es:(%rdi)
    7e40:	aa                   	stos   %al,%es:(%rdi)
    7e41:	aa                   	stos   %al,%es:(%rdi)
    7e42:	aa                   	stos   %al,%es:(%rdi)
    7e43:	aa                   	stos   %al,%es:(%rdi)
    7e44:	aa                   	stos   %al,%es:(%rdi)
    7e45:	aa                   	stos   %al,%es:(%rdi)
    7e46:	aa                   	stos   %al,%es:(%rdi)
    7e47:	aa                   	stos   %al,%es:(%rdi)
    7e48:	aa                   	stos   %al,%es:(%rdi)
    7e49:	aa                   	stos   %al,%es:(%rdi)
    7e4a:	aa                   	stos   %al,%es:(%rdi)
    7e4b:	aa                   	stos   %al,%es:(%rdi)
    7e4c:	aa                   	stos   %al,%es:(%rdi)
    7e4d:	aa                   	stos   %al,%es:(%rdi)
    7e4e:	aa                   	stos   %al,%es:(%rdi)
    7e4f:	aa                   	stos   %al,%es:(%rdi)
    7e50:	aa                   	stos   %al,%es:(%rdi)
    7e51:	aa                   	stos   %al,%es:(%rdi)
    7e52:	aa                   	stos   %al,%es:(%rdi)
    7e53:	aa                   	stos   %al,%es:(%rdi)
    7e54:	aa                   	stos   %al,%es:(%rdi)
    7e55:	aa                   	stos   %al,%es:(%rdi)
    7e56:	aa                   	stos   %al,%es:(%rdi)
    7e57:	aa                   	stos   %al,%es:(%rdi)
    7e58:	aa                   	stos   %al,%es:(%rdi)
    7e59:	aa                   	stos   %al,%es:(%rdi)
    7e5a:	aa                   	stos   %al,%es:(%rdi)
    7e5b:	aa                   	stos   %al,%es:(%rdi)
    7e5c:	aa                   	stos   %al,%es:(%rdi)
    7e5d:	aa                   	stos   %al,%es:(%rdi)
    7e5e:	aa                   	stos   %al,%es:(%rdi)
    7e5f:	aa                   	stos   %al,%es:(%rdi)
    7e60:	aa                   	stos   %al,%es:(%rdi)
    7e61:	aa                   	stos   %al,%es:(%rdi)
    7e62:	aa                   	stos   %al,%es:(%rdi)
    7e63:	aa                   	stos   %al,%es:(%rdi)
    7e64:	aa                   	stos   %al,%es:(%rdi)
    7e65:	aa                   	stos   %al,%es:(%rdi)
    7e66:	aa                   	stos   %al,%es:(%rdi)
    7e67:	aa                   	stos   %al,%es:(%rdi)
    7e68:	aa                   	stos   %al,%es:(%rdi)
    7e69:	aa                   	stos   %al,%es:(%rdi)
    7e6a:	aa                   	stos   %al,%es:(%rdi)
    7e6b:	aa                   	stos   %al,%es:(%rdi)
    7e6c:	aa                   	stos   %al,%es:(%rdi)
    7e6d:	aa                   	stos   %al,%es:(%rdi)
    7e6e:	aa                   	stos   %al,%es:(%rdi)
    7e6f:	aa                   	stos   %al,%es:(%rdi)
    7e70:	aa                   	stos   %al,%es:(%rdi)
    7e71:	aa                   	stos   %al,%es:(%rdi)
    7e72:	aa                   	stos   %al,%es:(%rdi)
    7e73:	aa                   	stos   %al,%es:(%rdi)
    7e74:	aa                   	stos   %al,%es:(%rdi)
    7e75:	aa                   	stos   %al,%es:(%rdi)
    7e76:	aa                   	stos   %al,%es:(%rdi)
    7e77:	aa                   	stos   %al,%es:(%rdi)
    7e78:	aa                   	stos   %al,%es:(%rdi)
    7e79:	aa                   	stos   %al,%es:(%rdi)
    7e7a:	aa                   	stos   %al,%es:(%rdi)
    7e7b:	aa                   	stos   %al,%es:(%rdi)
    7e7c:	aa                   	stos   %al,%es:(%rdi)
    7e7d:	aa                   	stos   %al,%es:(%rdi)
    7e7e:	aa                   	stos   %al,%es:(%rdi)
    7e7f:	aa                   	stos   %al,%es:(%rdi)
    7e80:	aa                   	stos   %al,%es:(%rdi)
    7e81:	aa                   	stos   %al,%es:(%rdi)
    7e82:	aa                   	stos   %al,%es:(%rdi)
    7e83:	aa                   	stos   %al,%es:(%rdi)
    7e84:	aa                   	stos   %al,%es:(%rdi)
    7e85:	aa                   	stos   %al,%es:(%rdi)
    7e86:	aa                   	stos   %al,%es:(%rdi)
    7e87:	aa                   	stos   %al,%es:(%rdi)
    7e88:	aa                   	stos   %al,%es:(%rdi)
    7e89:	aa                   	stos   %al,%es:(%rdi)
    7e8a:	aa                   	stos   %al,%es:(%rdi)
    7e8b:	aa                   	stos   %al,%es:(%rdi)
    7e8c:	aa                   	stos   %al,%es:(%rdi)
    7e8d:	aa                   	stos   %al,%es:(%rdi)
    7e8e:	aa                   	stos   %al,%es:(%rdi)
    7e8f:	aa                   	stos   %al,%es:(%rdi)
    7e90:	aa                   	stos   %al,%es:(%rdi)
    7e91:	aa                   	stos   %al,%es:(%rdi)
    7e92:	aa                   	stos   %al,%es:(%rdi)
    7e93:	aa                   	stos   %al,%es:(%rdi)
    7e94:	aa                   	stos   %al,%es:(%rdi)
    7e95:	aa                   	stos   %al,%es:(%rdi)
    7e96:	aa                   	stos   %al,%es:(%rdi)
    7e97:	aa                   	stos   %al,%es:(%rdi)
    7e98:	aa                   	stos   %al,%es:(%rdi)
    7e99:	aa                   	stos   %al,%es:(%rdi)
    7e9a:	aa                   	stos   %al,%es:(%rdi)
    7e9b:	aa                   	stos   %al,%es:(%rdi)
    7e9c:	aa                   	stos   %al,%es:(%rdi)
    7e9d:	aa                   	stos   %al,%es:(%rdi)
    7e9e:	aa                   	stos   %al,%es:(%rdi)
    7e9f:	aa                   	stos   %al,%es:(%rdi)
    7ea0:	aa                   	stos   %al,%es:(%rdi)
    7ea1:	aa                   	stos   %al,%es:(%rdi)
    7ea2:	aa                   	stos   %al,%es:(%rdi)
    7ea3:	aa                   	stos   %al,%es:(%rdi)
    7ea4:	aa                   	stos   %al,%es:(%rdi)
    7ea5:	aa                   	stos   %al,%es:(%rdi)
    7ea6:	aa                   	stos   %al,%es:(%rdi)
    7ea7:	aa                   	stos   %al,%es:(%rdi)
    7ea8:	aa                   	stos   %al,%es:(%rdi)
    7ea9:	aa                   	stos   %al,%es:(%rdi)
    7eaa:	aa                   	stos   %al,%es:(%rdi)
    7eab:	aa                   	stos   %al,%es:(%rdi)
    7eac:	aa                   	stos   %al,%es:(%rdi)
    7ead:	aa                   	stos   %al,%es:(%rdi)
    7eae:	aa                   	stos   %al,%es:(%rdi)
    7eaf:	aa                   	stos   %al,%es:(%rdi)
    7eb0:	aa                   	stos   %al,%es:(%rdi)
    7eb1:	aa                   	stos   %al,%es:(%rdi)
    7eb2:	aa                   	stos   %al,%es:(%rdi)
    7eb3:	aa                   	stos   %al,%es:(%rdi)
    7eb4:	aa                   	stos   %al,%es:(%rdi)
    7eb5:	aa                   	stos   %al,%es:(%rdi)
    7eb6:	aa                   	stos   %al,%es:(%rdi)
    7eb7:	aa                   	stos   %al,%es:(%rdi)
    7eb8:	aa                   	stos   %al,%es:(%rdi)
    7eb9:	aa                   	stos   %al,%es:(%rdi)
    7eba:	aa                   	stos   %al,%es:(%rdi)
    7ebb:	aa                   	stos   %al,%es:(%rdi)
    7ebc:	aa                   	stos   %al,%es:(%rdi)
    7ebd:	aa                   	stos   %al,%es:(%rdi)
    7ebe:	aa                   	stos   %al,%es:(%rdi)
    7ebf:	aa                   	stos   %al,%es:(%rdi)
    7ec0:	aa                   	stos   %al,%es:(%rdi)
    7ec1:	aa                   	stos   %al,%es:(%rdi)
    7ec2:	aa                   	stos   %al,%es:(%rdi)
    7ec3:	aa                   	stos   %al,%es:(%rdi)
    7ec4:	aa                   	stos   %al,%es:(%rdi)
    7ec5:	aa                   	stos   %al,%es:(%rdi)
    7ec6:	aa                   	stos   %al,%es:(%rdi)
    7ec7:	aa                   	stos   %al,%es:(%rdi)
    7ec8:	aa                   	stos   %al,%es:(%rdi)
    7ec9:	aa                   	stos   %al,%es:(%rdi)
    7eca:	aa                   	stos   %al,%es:(%rdi)
    7ecb:	aa                   	stos   %al,%es:(%rdi)
    7ecc:	aa                   	stos   %al,%es:(%rdi)
    7ecd:	aa                   	stos   %al,%es:(%rdi)
    7ece:	aa                   	stos   %al,%es:(%rdi)
    7ecf:	aa                   	stos   %al,%es:(%rdi)
    7ed0:	aa                   	stos   %al,%es:(%rdi)
    7ed1:	aa                   	stos   %al,%es:(%rdi)
    7ed2:	aa                   	stos   %al,%es:(%rdi)
    7ed3:	aa                   	stos   %al,%es:(%rdi)
    7ed4:	aa                   	stos   %al,%es:(%rdi)
    7ed5:	aa                   	stos   %al,%es:(%rdi)
    7ed6:	aa                   	stos   %al,%es:(%rdi)
    7ed7:	aa                   	stos   %al,%es:(%rdi)
    7ed8:	aa                   	stos   %al,%es:(%rdi)
    7ed9:	aa                   	stos   %al,%es:(%rdi)
    7eda:	aa                   	stos   %al,%es:(%rdi)
    7edb:	aa                   	stos   %al,%es:(%rdi)
    7edc:	aa                   	stos   %al,%es:(%rdi)
    7edd:	aa                   	stos   %al,%es:(%rdi)
    7ede:	aa                   	stos   %al,%es:(%rdi)
    7edf:	aa                   	stos   %al,%es:(%rdi)
    7ee0:	aa                   	stos   %al,%es:(%rdi)
    7ee1:	aa                   	stos   %al,%es:(%rdi)
    7ee2:	aa                   	stos   %al,%es:(%rdi)
    7ee3:	aa                   	stos   %al,%es:(%rdi)
    7ee4:	aa                   	stos   %al,%es:(%rdi)
    7ee5:	aa                   	stos   %al,%es:(%rdi)
    7ee6:	aa                   	stos   %al,%es:(%rdi)
    7ee7:	aa                   	stos   %al,%es:(%rdi)
    7ee8:	aa                   	stos   %al,%es:(%rdi)
    7ee9:	aa                   	stos   %al,%es:(%rdi)
    7eea:	aa                   	stos   %al,%es:(%rdi)
    7eeb:	aa                   	stos   %al,%es:(%rdi)
    7eec:	aa                   	stos   %al,%es:(%rdi)
    7eed:	aa                   	stos   %al,%es:(%rdi)
    7eee:	aa                   	stos   %al,%es:(%rdi)
    7eef:	aa                   	stos   %al,%es:(%rdi)
    7ef0:	aa                   	stos   %al,%es:(%rdi)
    7ef1:	aa                   	stos   %al,%es:(%rdi)
    7ef2:	aa                   	stos   %al,%es:(%rdi)
    7ef3:	aa                   	stos   %al,%es:(%rdi)
    7ef4:	aa                   	stos   %al,%es:(%rdi)
    7ef5:	aa                   	stos   %al,%es:(%rdi)
    7ef6:	aa                   	stos   %al,%es:(%rdi)
    7ef7:	aa                   	stos   %al,%es:(%rdi)
    7ef8:	aa                   	stos   %al,%es:(%rdi)
    7ef9:	aa                   	stos   %al,%es:(%rdi)
    7efa:	aa                   	stos   %al,%es:(%rdi)
    7efb:	aa                   	stos   %al,%es:(%rdi)
    7efc:	aa                   	stos   %al,%es:(%rdi)
    7efd:	aa                   	stos   %al,%es:(%rdi)
    7efe:	aa                   	stos   %al,%es:(%rdi)
    7eff:	aa                   	stos   %al,%es:(%rdi)
    7f00:	aa                   	stos   %al,%es:(%rdi)
    7f01:	aa                   	stos   %al,%es:(%rdi)
    7f02:	aa                   	stos   %al,%es:(%rdi)
    7f03:	aa                   	stos   %al,%es:(%rdi)
    7f04:	aa                   	stos   %al,%es:(%rdi)
    7f05:	aa                   	stos   %al,%es:(%rdi)
    7f06:	aa                   	stos   %al,%es:(%rdi)
    7f07:	aa                   	stos   %al,%es:(%rdi)
    7f08:	aa                   	stos   %al,%es:(%rdi)
    7f09:	aa                   	stos   %al,%es:(%rdi)
    7f0a:	aa                   	stos   %al,%es:(%rdi)
    7f0b:	aa                   	stos   %al,%es:(%rdi)
    7f0c:	aa                   	stos   %al,%es:(%rdi)
    7f0d:	aa                   	stos   %al,%es:(%rdi)
    7f0e:	aa                   	stos   %al,%es:(%rdi)
    7f0f:	aa                   	stos   %al,%es:(%rdi)
    7f10:	aa                   	stos   %al,%es:(%rdi)
    7f11:	aa                   	stos   %al,%es:(%rdi)
    7f12:	aa                   	stos   %al,%es:(%rdi)
    7f13:	aa                   	stos   %al,%es:(%rdi)
    7f14:	aa                   	stos   %al,%es:(%rdi)
    7f15:	aa                   	stos   %al,%es:(%rdi)
    7f16:	aa                   	stos   %al,%es:(%rdi)
    7f17:	aa                   	stos   %al,%es:(%rdi)
    7f18:	aa                   	stos   %al,%es:(%rdi)
    7f19:	aa                   	stos   %al,%es:(%rdi)
    7f1a:	aa                   	stos   %al,%es:(%rdi)
    7f1b:	aa                   	stos   %al,%es:(%rdi)
    7f1c:	aa                   	stos   %al,%es:(%rdi)
    7f1d:	aa                   	stos   %al,%es:(%rdi)
    7f1e:	aa                   	stos   %al,%es:(%rdi)
    7f1f:	aa                   	stos   %al,%es:(%rdi)
    7f20:	aa                   	stos   %al,%es:(%rdi)
    7f21:	aa                   	stos   %al,%es:(%rdi)
    7f22:	aa                   	stos   %al,%es:(%rdi)
    7f23:	aa                   	stos   %al,%es:(%rdi)
    7f24:	aa                   	stos   %al,%es:(%rdi)
    7f25:	aa                   	stos   %al,%es:(%rdi)
    7f26:	aa                   	stos   %al,%es:(%rdi)
    7f27:	aa                   	stos   %al,%es:(%rdi)
    7f28:	aa                   	stos   %al,%es:(%rdi)
    7f29:	aa                   	stos   %al,%es:(%rdi)
    7f2a:	aa                   	stos   %al,%es:(%rdi)
    7f2b:	aa                   	stos   %al,%es:(%rdi)
    7f2c:	aa                   	stos   %al,%es:(%rdi)
    7f2d:	aa                   	stos   %al,%es:(%rdi)
    7f2e:	aa                   	stos   %al,%es:(%rdi)
    7f2f:	aa                   	stos   %al,%es:(%rdi)
    7f30:	aa                   	stos   %al,%es:(%rdi)
    7f31:	aa                   	stos   %al,%es:(%rdi)
    7f32:	aa                   	stos   %al,%es:(%rdi)
    7f33:	aa                   	stos   %al,%es:(%rdi)
    7f34:	aa                   	stos   %al,%es:(%rdi)
    7f35:	aa                   	stos   %al,%es:(%rdi)
    7f36:	aa                   	stos   %al,%es:(%rdi)
    7f37:	aa                   	stos   %al,%es:(%rdi)
    7f38:	aa                   	stos   %al,%es:(%rdi)
    7f39:	aa                   	stos   %al,%es:(%rdi)
    7f3a:	aa                   	stos   %al,%es:(%rdi)
    7f3b:	aa                   	stos   %al,%es:(%rdi)
    7f3c:	aa                   	stos   %al,%es:(%rdi)
    7f3d:	aa                   	stos   %al,%es:(%rdi)
    7f3e:	aa                   	stos   %al,%es:(%rdi)
    7f3f:	aa                   	stos   %al,%es:(%rdi)
    7f40:	aa                   	stos   %al,%es:(%rdi)
    7f41:	aa                   	stos   %al,%es:(%rdi)
    7f42:	aa                   	stos   %al,%es:(%rdi)
    7f43:	aa                   	stos   %al,%es:(%rdi)
    7f44:	aa                   	stos   %al,%es:(%rdi)
    7f45:	aa                   	stos   %al,%es:(%rdi)
    7f46:	aa                   	stos   %al,%es:(%rdi)
    7f47:	aa                   	stos   %al,%es:(%rdi)
    7f48:	aa                   	stos   %al,%es:(%rdi)
    7f49:	aa                   	stos   %al,%es:(%rdi)
    7f4a:	aa                   	stos   %al,%es:(%rdi)
    7f4b:	aa                   	stos   %al,%es:(%rdi)
    7f4c:	aa                   	stos   %al,%es:(%rdi)
    7f4d:	aa                   	stos   %al,%es:(%rdi)
    7f4e:	aa                   	stos   %al,%es:(%rdi)
    7f4f:	aa                   	stos   %al,%es:(%rdi)
    7f50:	aa                   	stos   %al,%es:(%rdi)
    7f51:	aa                   	stos   %al,%es:(%rdi)
    7f52:	aa                   	stos   %al,%es:(%rdi)
    7f53:	aa                   	stos   %al,%es:(%rdi)
    7f54:	aa                   	stos   %al,%es:(%rdi)
    7f55:	aa                   	stos   %al,%es:(%rdi)
    7f56:	aa                   	stos   %al,%es:(%rdi)
    7f57:	aa                   	stos   %al,%es:(%rdi)
    7f58:	aa                   	stos   %al,%es:(%rdi)
    7f59:	aa                   	stos   %al,%es:(%rdi)
    7f5a:	aa                   	stos   %al,%es:(%rdi)
    7f5b:	aa                   	stos   %al,%es:(%rdi)
    7f5c:	aa                   	stos   %al,%es:(%rdi)
    7f5d:	aa                   	stos   %al,%es:(%rdi)
    7f5e:	aa                   	stos   %al,%es:(%rdi)
    7f5f:	aa                   	stos   %al,%es:(%rdi)
    7f60:	aa                   	stos   %al,%es:(%rdi)
    7f61:	aa                   	stos   %al,%es:(%rdi)
    7f62:	aa                   	stos   %al,%es:(%rdi)
    7f63:	aa                   	stos   %al,%es:(%rdi)
    7f64:	aa                   	stos   %al,%es:(%rdi)
    7f65:	aa                   	stos   %al,%es:(%rdi)
    7f66:	aa                   	stos   %al,%es:(%rdi)
    7f67:	aa                   	stos   %al,%es:(%rdi)
    7f68:	aa                   	stos   %al,%es:(%rdi)
    7f69:	aa                   	stos   %al,%es:(%rdi)
    7f6a:	aa                   	stos   %al,%es:(%rdi)
    7f6b:	aa                   	stos   %al,%es:(%rdi)
    7f6c:	aa                   	stos   %al,%es:(%rdi)
    7f6d:	aa                   	stos   %al,%es:(%rdi)
    7f6e:	aa                   	stos   %al,%es:(%rdi)
    7f6f:	aa                   	stos   %al,%es:(%rdi)
    7f70:	aa                   	stos   %al,%es:(%rdi)
    7f71:	aa                   	stos   %al,%es:(%rdi)
    7f72:	aa                   	stos   %al,%es:(%rdi)
    7f73:	aa                   	stos   %al,%es:(%rdi)
    7f74:	aa                   	stos   %al,%es:(%rdi)
    7f75:	aa                   	stos   %al,%es:(%rdi)
    7f76:	aa                   	stos   %al,%es:(%rdi)
    7f77:	aa                   	stos   %al,%es:(%rdi)
    7f78:	aa                   	stos   %al,%es:(%rdi)
    7f79:	aa                   	stos   %al,%es:(%rdi)
    7f7a:	aa                   	stos   %al,%es:(%rdi)
    7f7b:	aa                   	stos   %al,%es:(%rdi)
    7f7c:	aa                   	stos   %al,%es:(%rdi)
    7f7d:	aa                   	stos   %al,%es:(%rdi)
    7f7e:	aa                   	stos   %al,%es:(%rdi)
    7f7f:	aa                   	stos   %al,%es:(%rdi)
    7f80:	aa                   	stos   %al,%es:(%rdi)
    7f81:	aa                   	stos   %al,%es:(%rdi)
    7f82:	aa                   	stos   %al,%es:(%rdi)
    7f83:	aa                   	stos   %al,%es:(%rdi)
    7f84:	aa                   	stos   %al,%es:(%rdi)
    7f85:	aa                   	stos   %al,%es:(%rdi)
    7f86:	aa                   	stos   %al,%es:(%rdi)
    7f87:	aa                   	stos   %al,%es:(%rdi)
    7f88:	aa                   	stos   %al,%es:(%rdi)
    7f89:	aa                   	stos   %al,%es:(%rdi)
    7f8a:	aa                   	stos   %al,%es:(%rdi)
    7f8b:	aa                   	stos   %al,%es:(%rdi)
    7f8c:	aa                   	stos   %al,%es:(%rdi)
    7f8d:	aa                   	stos   %al,%es:(%rdi)
    7f8e:	aa                   	stos   %al,%es:(%rdi)
    7f8f:	aa                   	stos   %al,%es:(%rdi)
    7f90:	aa                   	stos   %al,%es:(%rdi)
    7f91:	aa                   	stos   %al,%es:(%rdi)
    7f92:	aa                   	stos   %al,%es:(%rdi)
    7f93:	aa                   	stos   %al,%es:(%rdi)
    7f94:	aa                   	stos   %al,%es:(%rdi)
    7f95:	aa                   	stos   %al,%es:(%rdi)
    7f96:	aa                   	stos   %al,%es:(%rdi)
    7f97:	aa                   	stos   %al,%es:(%rdi)
    7f98:	aa                   	stos   %al,%es:(%rdi)
    7f99:	aa                   	stos   %al,%es:(%rdi)
    7f9a:	aa                   	stos   %al,%es:(%rdi)
    7f9b:	aa                   	stos   %al,%es:(%rdi)
    7f9c:	aa                   	stos   %al,%es:(%rdi)
    7f9d:	aa                   	stos   %al,%es:(%rdi)
    7f9e:	aa                   	stos   %al,%es:(%rdi)
    7f9f:	aa                   	stos   %al,%es:(%rdi)
    7fa0:	aa                   	stos   %al,%es:(%rdi)
    7fa1:	aa                   	stos   %al,%es:(%rdi)
    7fa2:	aa                   	stos   %al,%es:(%rdi)
    7fa3:	aa                   	stos   %al,%es:(%rdi)
    7fa4:	aa                   	stos   %al,%es:(%rdi)
    7fa5:	aa                   	stos   %al,%es:(%rdi)
    7fa6:	aa                   	stos   %al,%es:(%rdi)
    7fa7:	aa                   	stos   %al,%es:(%rdi)
    7fa8:	aa                   	stos   %al,%es:(%rdi)
    7fa9:	aa                   	stos   %al,%es:(%rdi)
    7faa:	aa                   	stos   %al,%es:(%rdi)
    7fab:	aa                   	stos   %al,%es:(%rdi)
    7fac:	aa                   	stos   %al,%es:(%rdi)
    7fad:	aa                   	stos   %al,%es:(%rdi)
    7fae:	aa                   	stos   %al,%es:(%rdi)
    7faf:	aa                   	stos   %al,%es:(%rdi)
    7fb0:	aa                   	stos   %al,%es:(%rdi)
    7fb1:	aa                   	stos   %al,%es:(%rdi)
    7fb2:	aa                   	stos   %al,%es:(%rdi)
    7fb3:	aa                   	stos   %al,%es:(%rdi)
    7fb4:	aa                   	stos   %al,%es:(%rdi)
    7fb5:	aa                   	stos   %al,%es:(%rdi)
    7fb6:	aa                   	stos   %al,%es:(%rdi)
    7fb7:	aa                   	stos   %al,%es:(%rdi)
    7fb8:	aa                   	stos   %al,%es:(%rdi)
    7fb9:	aa                   	stos   %al,%es:(%rdi)
    7fba:	aa                   	stos   %al,%es:(%rdi)
    7fbb:	aa                   	stos   %al,%es:(%rdi)
    7fbc:	aa                   	stos   %al,%es:(%rdi)
    7fbd:	aa                   	stos   %al,%es:(%rdi)
    7fbe:	aa                   	stos   %al,%es:(%rdi)
    7fbf:	aa                   	stos   %al,%es:(%rdi)
    7fc0:	aa                   	stos   %al,%es:(%rdi)
    7fc1:	aa                   	stos   %al,%es:(%rdi)
    7fc2:	aa                   	stos   %al,%es:(%rdi)
    7fc3:	aa                   	stos   %al,%es:(%rdi)
    7fc4:	aa                   	stos   %al,%es:(%rdi)
    7fc5:	aa                   	stos   %al,%es:(%rdi)
    7fc6:	aa                   	stos   %al,%es:(%rdi)
    7fc7:	aa                   	stos   %al,%es:(%rdi)
    7fc8:	aa                   	stos   %al,%es:(%rdi)
    7fc9:	aa                   	stos   %al,%es:(%rdi)
    7fca:	aa                   	stos   %al,%es:(%rdi)
    7fcb:	aa                   	stos   %al,%es:(%rdi)
    7fcc:	aa                   	stos   %al,%es:(%rdi)
    7fcd:	aa                   	stos   %al,%es:(%rdi)
    7fce:	aa                   	stos   %al,%es:(%rdi)
    7fcf:	aa                   	stos   %al,%es:(%rdi)
    7fd0:	aa                   	stos   %al,%es:(%rdi)
    7fd1:	aa                   	stos   %al,%es:(%rdi)
    7fd2:	aa                   	stos   %al,%es:(%rdi)
    7fd3:	aa                   	stos   %al,%es:(%rdi)
    7fd4:	aa                   	stos   %al,%es:(%rdi)
    7fd5:	aa                   	stos   %al,%es:(%rdi)
    7fd6:	aa                   	stos   %al,%es:(%rdi)
    7fd7:	aa                   	stos   %al,%es:(%rdi)
    7fd8:	aa                   	stos   %al,%es:(%rdi)
    7fd9:	aa                   	stos   %al,%es:(%rdi)
    7fda:	aa                   	stos   %al,%es:(%rdi)
    7fdb:	aa                   	stos   %al,%es:(%rdi)
    7fdc:	aa                   	stos   %al,%es:(%rdi)
    7fdd:	aa                   	stos   %al,%es:(%rdi)
    7fde:	aa                   	stos   %al,%es:(%rdi)
    7fdf:	aa                   	stos   %al,%es:(%rdi)
    7fe0:	aa                   	stos   %al,%es:(%rdi)
    7fe1:	aa                   	stos   %al,%es:(%rdi)
    7fe2:	aa                   	stos   %al,%es:(%rdi)
    7fe3:	aa                   	stos   %al,%es:(%rdi)
    7fe4:	aa                   	stos   %al,%es:(%rdi)
    7fe5:	aa                   	stos   %al,%es:(%rdi)
    7fe6:	aa                   	stos   %al,%es:(%rdi)
    7fe7:	aa                   	stos   %al,%es:(%rdi)
    7fe8:	aa                   	stos   %al,%es:(%rdi)
    7fe9:	aa                   	stos   %al,%es:(%rdi)
    7fea:	aa                   	stos   %al,%es:(%rdi)
    7feb:	aa                   	stos   %al,%es:(%rdi)
    7fec:	aa                   	stos   %al,%es:(%rdi)
    7fed:	aa                   	stos   %al,%es:(%rdi)
    7fee:	aa                   	stos   %al,%es:(%rdi)
    7fef:	aa                   	stos   %al,%es:(%rdi)
    7ff0:	aa                   	stos   %al,%es:(%rdi)
    7ff1:	aa                   	stos   %al,%es:(%rdi)
    7ff2:	aa                   	stos   %al,%es:(%rdi)
    7ff3:	aa                   	stos   %al,%es:(%rdi)
    7ff4:	aa                   	stos   %al,%es:(%rdi)
    7ff5:	aa                   	stos   %al,%es:(%rdi)
    7ff6:	aa                   	stos   %al,%es:(%rdi)
    7ff7:	aa                   	stos   %al,%es:(%rdi)
    7ff8:	aa                   	stos   %al,%es:(%rdi)
    7ff9:	aa                   	stos   %al,%es:(%rdi)
    7ffa:	aa                   	stos   %al,%es:(%rdi)
    7ffb:	aa                   	stos   %al,%es:(%rdi)
    7ffc:	aa                   	stos   %al,%es:(%rdi)
    7ffd:	aa                   	stos   %al,%es:(%rdi)
    7ffe:	aa                   	stos   %al,%es:(%rdi)
    7fff:	aa                   	stos   %al,%es:(%rdi)

0000000000008000 <x86_cpu_boot_arg>:
	...
    8010:	66 2e 0f 1f 84 00 00 00 00 00 66 0f 1f 44 00 00     f.........f..D..

0000000000008020 <tss1>:
	...
    806c:	00 80 00 00 00 00 00 00 00 70 00 00 00 00 00 00     .........p......
	...
    8084:	00 00 ff ff 28 3b 12 00 00 00 00 00 00 00 00 00     ....(;..........
	...

00000000000080a0 <tss0>:
	...
    80ec:	00 60 00 00 00 00 00 00 00 50 00 00 00 00 00 00     .`.......P......
	...
    8104:	00 00 ff ff 00 3b 12 00 00 00 00 00                 .....;......

0000000000008110 <gdt>:
	...
    8118:	ff                   	(bad)  
    8119:	ff 00                	incl   (%rax)
    811b:	00 00                	add    %al,(%rax)
    811d:	9a                   	(bad)  
    811e:	cf                   	iret   
    811f:	00 ff                	add    %bh,%bh
    8121:	ff 00                	incl   (%rax)
    8123:	00 00                	add    %al,(%rax)
    8125:	92                   	xchg   %eax,%edx
    8126:	cf                   	iret   
    8127:	00 00                	add    %al,(%rax)
    8129:	00 00                	add    %al,(%rax)
    812b:	00 00                	add    %al,(%rax)
    812d:	98                   	cwtl   
    812e:	20 00                	and    %al,(%rax)
    8130:	00 00                	add    %al,(%rax)
    8132:	00 00                	add    %al,(%rax)
    8134:	00 92 00 00 ff ff    	add    %dl,-0x10000(%rdx)
    813a:	00 00                	add    %al,(%rax)
    813c:	00 fa                	add    %bh,%dl
    813e:	cf                   	iret   
    813f:	00 00                	add    %al,(%rax)
    8141:	00 00                	add    %al,(%rax)
    8143:	00 00                	add    %al,(%rax)
    8145:	f2 00 00             	repnz add %al,(%rax)
    8148:	00 00                	add    %al,(%rax)
    814a:	00 00                	add    %al,(%rax)
    814c:	00 f8                	add    %bh,%al
    814e:	20 00                	and    %al,(%rax)
    8150:	6f                   	outsl  %ds:(%rsi),(%dx)
    8151:	00 a0 80 00 89 00    	add    %ah,0x890080(%rax)
	...
    815f:	00 6f 00             	add    %ch,0x0(%rdi)
    8162:	20 80 00 89 00 00    	and    %al,0x8900(%rax)
	...

0000000000008170 <gdt48>:
    8170:	5f                   	pop    %rdi
    8171:	00 10                	add    %dl,(%rax)
    8173:	81                   	.byte 0x81
	...

0000000000008176 <gdt80>:
    8176:	5f                   	pop    %rdi
    8177:	00 10                	add    %dl,(%rax)
    8179:	81 00 00 00 00 00    	addl   $0x0,(%rax)
    817f:	00 66 2e             	add    %ah,0x2e(%rsi)
    8182:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    8189:	00 
    818a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8191:	00 00 00 
    8194:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    819b:	00 00 00 
    819e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    81a5:	00 00 00 
    81a8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    81af:	00 00 00 
    81b2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    81b9:	00 00 00 
    81bc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    81c3:	00 00 00 
    81c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    81cd:	00 00 00 
    81d0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    81d7:	00 00 00 
    81da:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    81e1:	00 00 00 
    81e4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    81eb:	00 00 00 
    81ee:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    81f5:	00 00 00 
    81f8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    81ff:	00 00 00 
    8202:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8209:	00 00 00 
    820c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8213:	00 00 00 
    8216:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    821d:	00 00 00 
    8220:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8227:	00 00 00 
    822a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8231:	00 00 00 
    8234:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    823b:	00 00 00 
    823e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8245:	00 00 00 
    8248:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    824f:	00 00 00 
    8252:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8259:	00 00 00 
    825c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8263:	00 00 00 
    8266:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    826d:	00 00 00 
    8270:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8277:	00 00 00 
    827a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8281:	00 00 00 
    8284:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    828b:	00 00 00 
    828e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8295:	00 00 00 
    8298:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    829f:	00 00 00 
    82a2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    82a9:	00 00 00 
    82ac:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    82b3:	00 00 00 
    82b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    82bd:	00 00 00 
    82c0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    82c7:	00 00 00 
    82ca:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    82d1:	00 00 00 
    82d4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    82db:	00 00 00 
    82de:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    82e5:	00 00 00 
    82e8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    82ef:	00 00 00 
    82f2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    82f9:	00 00 00 
    82fc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8303:	00 00 00 
    8306:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    830d:	00 00 00 
    8310:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8317:	00 00 00 
    831a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8321:	00 00 00 
    8324:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    832b:	00 00 00 
    832e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8335:	00 00 00 
    8338:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    833f:	00 00 00 
    8342:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8349:	00 00 00 
    834c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8353:	00 00 00 
    8356:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    835d:	00 00 00 
    8360:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8367:	00 00 00 
    836a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8371:	00 00 00 
    8374:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    837b:	00 00 00 
    837e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8385:	00 00 00 
    8388:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    838f:	00 00 00 
    8392:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8399:	00 00 00 
    839c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    83a3:	00 00 00 
    83a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    83ad:	00 00 00 
    83b0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    83b7:	00 00 00 
    83ba:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    83c1:	00 00 00 
    83c4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    83cb:	00 00 00 
    83ce:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    83d5:	00 00 00 
    83d8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    83df:	00 00 00 
    83e2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    83e9:	00 00 00 
    83ec:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    83f3:	00 00 00 
    83f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    83fd:	00 00 00 
    8400:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8407:	00 00 00 
    840a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8411:	00 00 00 
    8414:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    841b:	00 00 00 
    841e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8425:	00 00 00 
    8428:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    842f:	00 00 00 
    8432:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8439:	00 00 00 
    843c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8443:	00 00 00 
    8446:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    844d:	00 00 00 
    8450:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8457:	00 00 00 
    845a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8461:	00 00 00 
    8464:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    846b:	00 00 00 
    846e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8475:	00 00 00 
    8478:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    847f:	00 00 00 
    8482:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8489:	00 00 00 
    848c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8493:	00 00 00 
    8496:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    849d:	00 00 00 
    84a0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    84a7:	00 00 00 
    84aa:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    84b1:	00 00 00 
    84b4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    84bb:	00 00 00 
    84be:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    84c5:	00 00 00 
    84c8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    84cf:	00 00 00 
    84d2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    84d9:	00 00 00 
    84dc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    84e3:	00 00 00 
    84e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    84ed:	00 00 00 
    84f0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    84f7:	00 00 00 
    84fa:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8501:	00 00 00 
    8504:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    850b:	00 00 00 
    850e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8515:	00 00 00 
    8518:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    851f:	00 00 00 
    8522:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8529:	00 00 00 
    852c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8533:	00 00 00 
    8536:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    853d:	00 00 00 
    8540:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8547:	00 00 00 
    854a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8551:	00 00 00 
    8554:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    855b:	00 00 00 
    855e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8565:	00 00 00 
    8568:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    856f:	00 00 00 
    8572:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8579:	00 00 00 
    857c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8583:	00 00 00 
    8586:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    858d:	00 00 00 
    8590:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8597:	00 00 00 
    859a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    85a1:	00 00 00 
    85a4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    85ab:	00 00 00 
    85ae:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    85b5:	00 00 00 
    85b8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    85bf:	00 00 00 
    85c2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    85c9:	00 00 00 
    85cc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    85d3:	00 00 00 
    85d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    85dd:	00 00 00 
    85e0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    85e7:	00 00 00 
    85ea:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    85f1:	00 00 00 
    85f4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    85fb:	00 00 00 
    85fe:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8605:	00 00 00 
    8608:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    860f:	00 00 00 
    8612:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8619:	00 00 00 
    861c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8623:	00 00 00 
    8626:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    862d:	00 00 00 
    8630:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8637:	00 00 00 
    863a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8641:	00 00 00 
    8644:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    864b:	00 00 00 
    864e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8655:	00 00 00 
    8658:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    865f:	00 00 00 
    8662:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8669:	00 00 00 
    866c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8673:	00 00 00 
    8676:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    867d:	00 00 00 
    8680:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8687:	00 00 00 
    868a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8691:	00 00 00 
    8694:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    869b:	00 00 00 
    869e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    86a5:	00 00 00 
    86a8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    86af:	00 00 00 
    86b2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    86b9:	00 00 00 
    86bc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    86c3:	00 00 00 
    86c6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    86cd:	00 00 00 
    86d0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    86d7:	00 00 00 
    86da:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    86e1:	00 00 00 
    86e4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    86eb:	00 00 00 
    86ee:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    86f5:	00 00 00 
    86f8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    86ff:	00 00 00 
    8702:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8709:	00 00 00 
    870c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8713:	00 00 00 
    8716:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    871d:	00 00 00 
    8720:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8727:	00 00 00 
    872a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8731:	00 00 00 
    8734:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    873b:	00 00 00 
    873e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8745:	00 00 00 
    8748:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    874f:	00 00 00 
    8752:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8759:	00 00 00 
    875c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8763:	00 00 00 
    8766:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    876d:	00 00 00 
    8770:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8777:	00 00 00 
    877a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8781:	00 00 00 
    8784:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    878b:	00 00 00 
    878e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8795:	00 00 00 
    8798:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    879f:	00 00 00 
    87a2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    87a9:	00 00 00 
    87ac:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    87b3:	00 00 00 
    87b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    87bd:	00 00 00 
    87c0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    87c7:	00 00 00 
    87ca:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    87d1:	00 00 00 
    87d4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    87db:	00 00 00 
    87de:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    87e5:	00 00 00 
    87e8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    87ef:	00 00 00 
    87f2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    87f9:	00 00 00 
    87fc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8803:	00 00 00 
    8806:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    880d:	00 00 00 
    8810:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8817:	00 00 00 
    881a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8821:	00 00 00 
    8824:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    882b:	00 00 00 
    882e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8835:	00 00 00 
    8838:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    883f:	00 00 00 
    8842:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8849:	00 00 00 
    884c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8853:	00 00 00 
    8856:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    885d:	00 00 00 
    8860:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8867:	00 00 00 
    886a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8871:	00 00 00 
    8874:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    887b:	00 00 00 
    887e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8885:	00 00 00 
    8888:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    888f:	00 00 00 
    8892:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8899:	00 00 00 
    889c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    88a3:	00 00 00 
    88a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    88ad:	00 00 00 
    88b0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    88b7:	00 00 00 
    88ba:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    88c1:	00 00 00 
    88c4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    88cb:	00 00 00 
    88ce:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    88d5:	00 00 00 
    88d8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    88df:	00 00 00 
    88e2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    88e9:	00 00 00 
    88ec:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    88f3:	00 00 00 
    88f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    88fd:	00 00 00 
    8900:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8907:	00 00 00 
    890a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8911:	00 00 00 
    8914:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    891b:	00 00 00 
    891e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8925:	00 00 00 
    8928:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    892f:	00 00 00 
    8932:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8939:	00 00 00 
    893c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8943:	00 00 00 
    8946:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    894d:	00 00 00 
    8950:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8957:	00 00 00 
    895a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8961:	00 00 00 
    8964:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    896b:	00 00 00 
    896e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8975:	00 00 00 
    8978:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    897f:	00 00 00 
    8982:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8989:	00 00 00 
    898c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8993:	00 00 00 
    8996:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    899d:	00 00 00 
    89a0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    89a7:	00 00 00 
    89aa:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    89b1:	00 00 00 
    89b4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    89bb:	00 00 00 
    89be:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    89c5:	00 00 00 
    89c8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    89cf:	00 00 00 
    89d2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    89d9:	00 00 00 
    89dc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    89e3:	00 00 00 
    89e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    89ed:	00 00 00 
    89f0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    89f7:	00 00 00 
    89fa:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8a01:	00 00 00 
    8a04:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8a0b:	00 00 00 
    8a0e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8a15:	00 00 00 
    8a18:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8a1f:	00 00 00 
    8a22:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8a29:	00 00 00 
    8a2c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8a33:	00 00 00 
    8a36:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8a3d:	00 00 00 
    8a40:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8a47:	00 00 00 
    8a4a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8a51:	00 00 00 
    8a54:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8a5b:	00 00 00 
    8a5e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8a65:	00 00 00 
    8a68:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8a6f:	00 00 00 
    8a72:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8a79:	00 00 00 
    8a7c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8a83:	00 00 00 
    8a86:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8a8d:	00 00 00 
    8a90:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8a97:	00 00 00 
    8a9a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8aa1:	00 00 00 
    8aa4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8aab:	00 00 00 
    8aae:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ab5:	00 00 00 
    8ab8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8abf:	00 00 00 
    8ac2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ac9:	00 00 00 
    8acc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ad3:	00 00 00 
    8ad6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8add:	00 00 00 
    8ae0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ae7:	00 00 00 
    8aea:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8af1:	00 00 00 
    8af4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8afb:	00 00 00 
    8afe:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b05:	00 00 00 
    8b08:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b0f:	00 00 00 
    8b12:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b19:	00 00 00 
    8b1c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b23:	00 00 00 
    8b26:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b2d:	00 00 00 
    8b30:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b37:	00 00 00 
    8b3a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b41:	00 00 00 
    8b44:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b4b:	00 00 00 
    8b4e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b55:	00 00 00 
    8b58:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b5f:	00 00 00 
    8b62:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b69:	00 00 00 
    8b6c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b73:	00 00 00 
    8b76:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b7d:	00 00 00 
    8b80:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b87:	00 00 00 
    8b8a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b91:	00 00 00 
    8b94:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8b9b:	00 00 00 
    8b9e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ba5:	00 00 00 
    8ba8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8baf:	00 00 00 
    8bb2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8bb9:	00 00 00 
    8bbc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8bc3:	00 00 00 
    8bc6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8bcd:	00 00 00 
    8bd0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8bd7:	00 00 00 
    8bda:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8be1:	00 00 00 
    8be4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8beb:	00 00 00 
    8bee:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8bf5:	00 00 00 
    8bf8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8bff:	00 00 00 
    8c02:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8c09:	00 00 00 
    8c0c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8c13:	00 00 00 
    8c16:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8c1d:	00 00 00 
    8c20:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8c27:	00 00 00 
    8c2a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8c31:	00 00 00 
    8c34:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8c3b:	00 00 00 
    8c3e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8c45:	00 00 00 
    8c48:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8c4f:	00 00 00 
    8c52:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8c59:	00 00 00 
    8c5c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8c63:	00 00 00 
    8c66:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8c6d:	00 00 00 
    8c70:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8c77:	00 00 00 
    8c7a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8c81:	00 00 00 
    8c84:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8c8b:	00 00 00 
    8c8e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8c95:	00 00 00 
    8c98:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8c9f:	00 00 00 
    8ca2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ca9:	00 00 00 
    8cac:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8cb3:	00 00 00 
    8cb6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8cbd:	00 00 00 
    8cc0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8cc7:	00 00 00 
    8cca:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8cd1:	00 00 00 
    8cd4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8cdb:	00 00 00 
    8cde:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ce5:	00 00 00 
    8ce8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8cef:	00 00 00 
    8cf2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8cf9:	00 00 00 
    8cfc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8d03:	00 00 00 
    8d06:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8d0d:	00 00 00 
    8d10:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8d17:	00 00 00 
    8d1a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8d21:	00 00 00 
    8d24:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8d2b:	00 00 00 
    8d2e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8d35:	00 00 00 
    8d38:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8d3f:	00 00 00 
    8d42:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8d49:	00 00 00 
    8d4c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8d53:	00 00 00 
    8d56:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8d5d:	00 00 00 
    8d60:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8d67:	00 00 00 
    8d6a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8d71:	00 00 00 
    8d74:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8d7b:	00 00 00 
    8d7e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8d85:	00 00 00 
    8d88:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8d8f:	00 00 00 
    8d92:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8d99:	00 00 00 
    8d9c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8da3:	00 00 00 
    8da6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8dad:	00 00 00 
    8db0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8db7:	00 00 00 
    8dba:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8dc1:	00 00 00 
    8dc4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8dcb:	00 00 00 
    8dce:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8dd5:	00 00 00 
    8dd8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ddf:	00 00 00 
    8de2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8de9:	00 00 00 
    8dec:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8df3:	00 00 00 
    8df6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8dfd:	00 00 00 
    8e00:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8e07:	00 00 00 
    8e0a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8e11:	00 00 00 
    8e14:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8e1b:	00 00 00 
    8e1e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8e25:	00 00 00 
    8e28:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8e2f:	00 00 00 
    8e32:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8e39:	00 00 00 
    8e3c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8e43:	00 00 00 
    8e46:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8e4d:	00 00 00 
    8e50:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8e57:	00 00 00 
    8e5a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8e61:	00 00 00 
    8e64:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8e6b:	00 00 00 
    8e6e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8e75:	00 00 00 
    8e78:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8e7f:	00 00 00 
    8e82:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8e89:	00 00 00 
    8e8c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8e93:	00 00 00 
    8e96:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8e9d:	00 00 00 
    8ea0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ea7:	00 00 00 
    8eaa:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8eb1:	00 00 00 
    8eb4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ebb:	00 00 00 
    8ebe:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ec5:	00 00 00 
    8ec8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ecf:	00 00 00 
    8ed2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ed9:	00 00 00 
    8edc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ee3:	00 00 00 
    8ee6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8eed:	00 00 00 
    8ef0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ef7:	00 00 00 
    8efa:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8f01:	00 00 00 
    8f04:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8f0b:	00 00 00 
    8f0e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8f15:	00 00 00 
    8f18:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8f1f:	00 00 00 
    8f22:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8f29:	00 00 00 
    8f2c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8f33:	00 00 00 
    8f36:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8f3d:	00 00 00 
    8f40:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8f47:	00 00 00 
    8f4a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8f51:	00 00 00 
    8f54:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8f5b:	00 00 00 
    8f5e:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8f65:	00 00 00 
    8f68:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8f6f:	00 00 00 
    8f72:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8f79:	00 00 00 
    8f7c:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8f83:	00 00 00 
    8f86:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8f8d:	00 00 00 
    8f90:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8f97:	00 00 00 
    8f9a:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8fa1:	00 00 00 
    8fa4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8fab:	00 00 00 
    8fae:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8fb5:	00 00 00 
    8fb8:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8fbf:	00 00 00 
    8fc2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8fc9:	00 00 00 
    8fcc:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8fd3:	00 00 00 
    8fd6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8fdd:	00 00 00 
    8fe0:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8fe7:	00 00 00 
    8fea:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ff1:	00 00 00 
    8ff4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    8ffb:	00 00 00 
    8ffe:	66 90                	xchg   %ax,%ax

Disassembly of section text:

0000000000100000 <__rom_region_start>:
  100000:	48 89 f8             	mov    %rdi,%rax
  100003:	48 83 fa 10          	cmp    $0x10,%rdx
  100007:	0f 82 fa 00 00 00    	jb     100107 <byte_copy>
  10000d:	49 89 f8             	mov    %rdi,%r8
  100010:	49 83 e0 07          	and    $0x7,%r8
  100014:	74 0f                	je     100025 <quadword_aligned>
  100016:	48 c7 c1 08 00 00 00 	mov    $0x8,%rcx
  10001d:	4c 29 c1             	sub    %r8,%rcx
  100020:	48 29 ca             	sub    %rcx,%rdx
  100023:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)

0000000000100025 <quadword_aligned>:
  100025:	48 81 fa 00 01 00 00 	cmp    $0x100,%rdx
  10002c:	0f 82 db 00 00 00    	jb     10010d <quadword_copy>
  100032:	50                   	push   %rax
  100033:	41 54                	push   %r12
  100035:	41 55                	push   %r13
  100037:	41 56                	push   %r14
  100039:	48 89 d1             	mov    %rdx,%rcx
  10003c:	48 c1 e9 07          	shr    $0x7,%rcx

0000000000100040 <loop>:
  100040:	0f 18 86 00 03 00 00 	prefetchnta 0x300(%rsi)
  100047:	0f 18 86 40 03 00 00 	prefetchnta 0x340(%rsi)
  10004e:	48 8b 06             	mov    (%rsi),%rax
  100051:	4c 8b 46 08          	mov    0x8(%rsi),%r8
  100055:	4c 8b 4e 10          	mov    0x10(%rsi),%r9
  100059:	4c 8b 56 18          	mov    0x18(%rsi),%r10
  10005d:	4c 8b 5e 20          	mov    0x20(%rsi),%r11
  100061:	4c 8b 66 28          	mov    0x28(%rsi),%r12
  100065:	4c 8b 6e 30          	mov    0x30(%rsi),%r13
  100069:	4c 8b 76 38          	mov    0x38(%rsi),%r14
  10006d:	48 0f c3 07          	movnti %rax,(%rdi)
  100071:	4c 0f c3 47 08       	movnti %r8,0x8(%rdi)
  100076:	4c 0f c3 4f 10       	movnti %r9,0x10(%rdi)
  10007b:	4c 0f c3 57 18       	movnti %r10,0x18(%rdi)
  100080:	4c 0f c3 5f 20       	movnti %r11,0x20(%rdi)
  100085:	4c 0f c3 67 28       	movnti %r12,0x28(%rdi)
  10008a:	4c 0f c3 6f 30       	movnti %r13,0x30(%rdi)
  10008f:	4c 0f c3 77 38       	movnti %r14,0x38(%rdi)
  100094:	48 8b 46 40          	mov    0x40(%rsi),%rax
  100098:	4c 8b 46 48          	mov    0x48(%rsi),%r8
  10009c:	4c 8b 4e 50          	mov    0x50(%rsi),%r9
  1000a0:	4c 8b 56 58          	mov    0x58(%rsi),%r10
  1000a4:	4c 8b 5e 60          	mov    0x60(%rsi),%r11
  1000a8:	4c 8b 66 68          	mov    0x68(%rsi),%r12
  1000ac:	4c 8b 6e 70          	mov    0x70(%rsi),%r13
  1000b0:	4c 8b 76 78          	mov    0x78(%rsi),%r14
  1000b4:	48 0f c3 47 40       	movnti %rax,0x40(%rdi)
  1000b9:	4c 0f c3 47 48       	movnti %r8,0x48(%rdi)
  1000be:	4c 0f c3 4f 50       	movnti %r9,0x50(%rdi)
  1000c3:	4c 0f c3 57 58       	movnti %r10,0x58(%rdi)
  1000c8:	4c 0f c3 5f 60       	movnti %r11,0x60(%rdi)
  1000cd:	4c 0f c3 67 68       	movnti %r12,0x68(%rdi)
  1000d2:	4c 0f c3 6f 70       	movnti %r13,0x70(%rdi)
  1000d7:	4c 0f c3 77 78       	movnti %r14,0x78(%rdi)
  1000dc:	48 8d b6 80 00 00 00 	lea    0x80(%rsi),%rsi
  1000e3:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
  1000ea:	48 ff c9             	dec    %rcx
  1000ed:	0f 85 4d ff ff ff    	jne    100040 <loop>
  1000f3:	0f ae f8             	sfence 
  1000f6:	48 89 d1             	mov    %rdx,%rcx
  1000f9:	48 83 e1 7f          	and    $0x7f,%rcx
  1000fd:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  1000ff:	41 5e                	pop    %r14
  100101:	41 5d                	pop    %r13
  100103:	41 5c                	pop    %r12
  100105:	58                   	pop    %rax
  100106:	c3                   	ret    

0000000000100107 <byte_copy>:
  100107:	48 89 d1             	mov    %rdx,%rcx
  10010a:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  10010c:	c3                   	ret    

000000000010010d <quadword_copy>:
  10010d:	48 89 d1             	mov    %rdx,%rcx
  100110:	48 c1 e9 03          	shr    $0x3,%rcx
  100114:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  10011b:	00 00 00 00 
  10011f:	90                   	nop
  100120:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  100123:	48 89 d1             	mov    %rdx,%rcx
  100126:	48 83 e1 07          	and    $0x7,%rcx
  10012a:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  10012c:	c3                   	ret    
  10012d:	0f 1f 00             	nopl   (%rax)

0000000000100130 <memset>:
  100130:	49 89 f9             	mov    %rdi,%r9
  100133:	48 89 f0             	mov    %rsi,%rax
  100136:	48 89 d1             	mov    %rdx,%rcx
  100139:	48 83 fa 10          	cmp    $0x10,%rdx
  10013d:	0f 82 a8 00 00 00    	jb     1001eb <byte_set>
  100143:	49 89 f8             	mov    %rdi,%r8
  100146:	49 83 e0 07          	and    $0x7,%r8
  10014a:	74 12                	je     10015e <quadword_aligned>
  10014c:	48 c7 c1 08 00 00 00 	mov    $0x8,%rcx
  100153:	4c 29 c1             	sub    %r8,%rcx
  100156:	48 29 ca             	sub    %rcx,%rdx
  100159:	f3 aa                	rep stos %al,%es:(%rdi)
  10015b:	48 89 d1             	mov    %rdx,%rcx

000000000010015e <quadword_aligned>:
  10015e:	49 b8 01 01 01 01 01 	movabs $0x101010101010101,%r8
  100165:	01 01 01 
  100168:	40 0f b6 c6          	movzbl %sil,%eax
  10016c:	49 0f af c0          	imul   %r8,%rax
  100170:	48 81 fa 00 01 00 00 	cmp    $0x100,%rdx
  100177:	72 78                	jb     1001f1 <quadword_set>
  100179:	48 c1 e9 07          	shr    $0x7,%rcx
  10017d:	0f 1f 00             	nopl   (%rax)

0000000000100180 <loop>:
  100180:	48 0f c3 07          	movnti %rax,(%rdi)
  100184:	48 0f c3 47 08       	movnti %rax,0x8(%rdi)
  100189:	48 0f c3 47 10       	movnti %rax,0x10(%rdi)
  10018e:	48 0f c3 47 18       	movnti %rax,0x18(%rdi)
  100193:	48 0f c3 47 20       	movnti %rax,0x20(%rdi)
  100198:	48 0f c3 47 28       	movnti %rax,0x28(%rdi)
  10019d:	48 0f c3 47 30       	movnti %rax,0x30(%rdi)
  1001a2:	48 0f c3 47 38       	movnti %rax,0x38(%rdi)
  1001a7:	48 0f c3 47 40       	movnti %rax,0x40(%rdi)
  1001ac:	48 0f c3 47 48       	movnti %rax,0x48(%rdi)
  1001b1:	48 0f c3 47 50       	movnti %rax,0x50(%rdi)
  1001b6:	48 0f c3 47 58       	movnti %rax,0x58(%rdi)
  1001bb:	48 0f c3 47 60       	movnti %rax,0x60(%rdi)
  1001c0:	48 0f c3 47 68       	movnti %rax,0x68(%rdi)
  1001c5:	48 0f c3 47 70       	movnti %rax,0x70(%rdi)
  1001ca:	48 0f c3 47 78       	movnti %rax,0x78(%rdi)
  1001cf:	48 8d bf 80 00 00 00 	lea    0x80(%rdi),%rdi
  1001d6:	48 ff c9             	dec    %rcx
  1001d9:	75 a5                	jne    100180 <loop>
  1001db:	0f ae f8             	sfence 
  1001de:	48 89 d1             	mov    %rdx,%rcx
  1001e1:	48 83 e1 7f          	and    $0x7f,%rcx
  1001e5:	f3 aa                	rep stos %al,%es:(%rdi)
  1001e7:	4c 89 c8             	mov    %r9,%rax
  1001ea:	c3                   	ret    

00000000001001eb <byte_set>:
  1001eb:	f3 aa                	rep stos %al,%es:(%rdi)
  1001ed:	4c 89 c8             	mov    %r9,%rax
  1001f0:	c3                   	ret    

00000000001001f1 <quadword_set>:
  1001f1:	48 c1 e9 03          	shr    $0x3,%rcx
  1001f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  1001fc:	00 00 00 00 
  100200:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  100203:	48 89 d1             	mov    %rdx,%rcx
  100206:	48 83 e1 07          	and    $0x7,%rcx
  10020a:	f3 aa                	rep stos %al,%es:(%rdi)
  10020c:	4c 89 c8             	mov    %r9,%rax
  10020f:	c3                   	ret    

0000000000100210 <read_uleb128>:
  100210:	48 89 f8             	mov    %rdi,%rax
  100213:	31 d2                	xor    %edx,%edx
  100215:	31 c9                	xor    %ecx,%ecx
  100217:	44 8a 00             	mov    (%rax),%r8b
  10021a:	48 ff c0             	inc    %rax
  10021d:	4c 89 c7             	mov    %r8,%rdi
  100220:	83 e7 7f             	and    $0x7f,%edi
  100223:	48 d3 e7             	shl    %cl,%rdi
  100226:	83 c1 07             	add    $0x7,%ecx
  100229:	48 09 fa             	or     %rdi,%rdx
  10022c:	45 84 c0             	test   %r8b,%r8b
  10022f:	78 e6                	js     100217 <read_uleb128+0x7>
  100231:	48 89 16             	mov    %rdx,(%rsi)
  100234:	c3                   	ret    

0000000000100235 <read_sleb128>:
  100235:	48 89 f8             	mov    %rdi,%rax
  100238:	31 d2                	xor    %edx,%edx
  10023a:	31 c9                	xor    %ecx,%ecx
  10023c:	40 8a 38             	mov    (%rax),%dil
  10023f:	48 ff c0             	inc    %rax
  100242:	49 89 f8             	mov    %rdi,%r8
  100245:	41 83 e0 7f          	and    $0x7f,%r8d
  100249:	49 d3 e0             	shl    %cl,%r8
  10024c:	83 c1 07             	add    $0x7,%ecx
  10024f:	4c 09 c2             	or     %r8,%rdx
  100252:	40 84 ff             	test   %dil,%dil
  100255:	78 e5                	js     10023c <read_sleb128+0x7>
  100257:	83 f9 3f             	cmp    $0x3f,%ecx
  10025a:	77 10                	ja     10026c <read_sleb128+0x37>
  10025c:	40 80 e7 40          	and    $0x40,%dil
  100260:	74 0a                	je     10026c <read_sleb128+0x37>
  100262:	48 83 cf ff          	or     $0xffffffffffffffff,%rdi
  100266:	48 d3 e7             	shl    %cl,%rdi
  100269:	48 09 fa             	or     %rdi,%rdx
  10026c:	48 89 16             	mov    %rdx,(%rsi)
  10026f:	c3                   	ret    

0000000000100270 <_Unwind_GetGRPtr>:
  100270:	f6 87 c7 00 00 00 40 	testb  $0x40,0xc7(%rdi)
  100277:	48 63 f6             	movslq %esi,%rsi
  10027a:	74 0f                	je     10028b <_Unwind_GetGRPtr+0x1b>
  10027c:	80 bc 37 d8 00 00 00 	cmpb   $0x0,0xd8(%rdi,%rsi,1)
  100283:	00 
  100284:	74 05                	je     10028b <_Unwind_GetGRPtr+0x1b>
  100286:	48 8d 04 f7          	lea    (%rdi,%rsi,8),%rax
  10028a:	c3                   	ret    
  10028b:	48 8b 04 f7          	mov    (%rdi,%rsi,8),%rax
  10028f:	c3                   	ret    

0000000000100290 <_Unwind_SetGRPtr>:
  100290:	f6 87 c7 00 00 00 40 	testb  $0x40,0xc7(%rdi)
  100297:	48 63 f6             	movslq %esi,%rsi
  10029a:	74 08                	je     1002a4 <_Unwind_SetGRPtr+0x14>
  10029c:	c6 84 37 d8 00 00 00 	movb   $0x0,0xd8(%rdi,%rsi,1)
  1002a3:	00 
  1002a4:	48 89 14 f7          	mov    %rdx,(%rdi,%rsi,8)
  1002a8:	c3                   	ret    

00000000001002a9 <_Unwind_SetGRValue>:
  1002a9:	48 63 f6             	movslq %esi,%rsi
  1002ac:	80 be 00 20 12 00 08 	cmpb   $0x8,0x122000(%rsi)
  1002b3:	76 09                	jbe    1002be <_Unwind_SetGRValue+0x15>
  1002b5:	55                   	push   %rbp
  1002b6:	48 89 e5             	mov    %rsp,%rbp
  1002b9:	e8 06 1b 01 00       	call   111dc4 <abort>
  1002be:	c6 84 37 d8 00 00 00 	movb   $0x1,0xd8(%rdi,%rsi,1)
  1002c5:	01 
  1002c6:	48 89 14 f7          	mov    %rdx,(%rdi,%rsi,8)
  1002ca:	c3                   	ret    

00000000001002cb <read_encoded_value>:
  1002cb:	55                   	push   %rbp
  1002cc:	48 89 e5             	mov    %rsp,%rbp
  1002cf:	41 54                	push   %r12
  1002d1:	53                   	push   %rbx
  1002d2:	48 83 ec 10          	sub    $0x10,%rsp
  1002d6:	40 80 fe ff          	cmp    $0xff,%sil
  1002da:	74 55                	je     100331 <read_encoded_value+0x66>
  1002dc:	89 f3                	mov    %esi,%ebx
  1002de:	41 89 f3             	mov    %esi,%r11d
  1002e1:	49 89 d1             	mov    %rdx,%r9
  1002e4:	49 89 ca             	mov    %rcx,%r10
  1002e7:	83 e3 70             	and    $0x70,%ebx
  1002ea:	80 fb 30             	cmp    $0x30,%bl
  1002ed:	74 26                	je     100315 <read_encoded_value+0x4a>
  1002ef:	77 0c                	ja     1002fd <read_encoded_value+0x32>
  1002f1:	80 fb 20             	cmp    $0x20,%bl
  1002f4:	74 16                	je     10030c <read_encoded_value+0x41>
  1002f6:	77 39                	ja     100331 <read_encoded_value+0x66>
  1002f8:	45 31 e4             	xor    %r12d,%r12d
  1002fb:	eb 39                	jmp    100336 <read_encoded_value+0x6b>
  1002fd:	80 fb 40             	cmp    $0x40,%bl
  100300:	74 1c                	je     10031e <read_encoded_value+0x53>
  100302:	45 31 e4             	xor    %r12d,%r12d
  100305:	80 fb 50             	cmp    $0x50,%bl
  100308:	74 2c                	je     100336 <read_encoded_value+0x6b>
  10030a:	eb 25                	jmp    100331 <read_encoded_value+0x66>
  10030c:	4c 8b a7 a8 00 00 00 	mov    0xa8(%rdi),%r12
  100313:	eb 21                	jmp    100336 <read_encoded_value+0x6b>
  100315:	4c 8b a7 b0 00 00 00 	mov    0xb0(%rdi),%r12
  10031c:	eb 18                	jmp    100336 <read_encoded_value+0x6b>
  10031e:	4c 8b a7 b8 00 00 00 	mov    0xb8(%rdi),%r12
  100325:	eb 0f                	jmp    100336 <read_encoded_value+0x6b>
  100327:	44 89 d8             	mov    %r11d,%eax
  10032a:	83 e0 0f             	and    $0xf,%eax
  10032d:	3c 0c                	cmp    $0xc,%al
  10032f:	76 1c                	jbe    10034d <read_encoded_value+0x82>
  100331:	e8 8e 1a 01 00       	call   111dc4 <abort>
  100336:	41 80 fb 50          	cmp    $0x50,%r11b
  10033a:	75 eb                	jne    100327 <read_encoded_value+0x5c>
  10033c:	49 8d 41 07          	lea    0x7(%r9),%rax
  100340:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
  100344:	48 8b 10             	mov    (%rax),%rdx
  100347:	48 83 c0 08          	add    $0x8,%rax
  10034b:	eb 66                	jmp    1003b3 <read_encoded_value+0xe8>
  10034d:	0f b6 c0             	movzbl %al,%eax
  100350:	ff 24 c5 00 c3 11 00 	jmp    *0x11c300(,%rax,8)
  100357:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  10035b:	4c 89 cf             	mov    %r9,%rdi
  10035e:	e8 ad fe ff ff       	call   100210 <read_uleb128>
  100363:	eb 0c                	jmp    100371 <read_encoded_value+0xa6>
  100365:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  100369:	4c 89 cf             	mov    %r9,%rdi
  10036c:	e8 c4 fe ff ff       	call   100235 <read_sleb128>
  100371:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  100375:	eb 25                	jmp    10039c <read_encoded_value+0xd1>
  100377:	41 0f b7 11          	movzwl (%r9),%edx
  10037b:	eb 09                	jmp    100386 <read_encoded_value+0xbb>
  10037d:	41 8b 11             	mov    (%r9),%edx
  100380:	eb 0d                	jmp    10038f <read_encoded_value+0xc4>
  100382:	49 0f bf 11          	movswq (%r9),%rdx
  100386:	49 8d 41 02          	lea    0x2(%r9),%rax
  10038a:	eb 10                	jmp    10039c <read_encoded_value+0xd1>
  10038c:	49 63 11             	movslq (%r9),%rdx
  10038f:	49 8d 41 04          	lea    0x4(%r9),%rax
  100393:	eb 07                	jmp    10039c <read_encoded_value+0xd1>
  100395:	49 8b 11             	mov    (%r9),%rdx
  100398:	49 8d 41 08          	lea    0x8(%r9),%rax
  10039c:	48 85 d2             	test   %rdx,%rdx
  10039f:	74 12                	je     1003b3 <read_encoded_value+0xe8>
  1003a1:	80 fb 10             	cmp    $0x10,%bl
  1003a4:	4d 0f 44 e1          	cmove  %r9,%r12
  1003a8:	4c 01 e2             	add    %r12,%rdx
  1003ab:	45 84 db             	test   %r11b,%r11b
  1003ae:	79 03                	jns    1003b3 <read_encoded_value+0xe8>
  1003b0:	48 8b 12             	mov    (%rdx),%rdx
  1003b3:	49 89 12             	mov    %rdx,(%r10)
  1003b6:	5a                   	pop    %rdx
  1003b7:	59                   	pop    %rcx
  1003b8:	5b                   	pop    %rbx
  1003b9:	41 5c                	pop    %r12
  1003bb:	5d                   	pop    %rbp
  1003bc:	c3                   	ret    

00000000001003bd <execute_cfa_program>:
  1003bd:	55                   	push   %rbp
  1003be:	48 89 e5             	mov    %rsp,%rbp
  1003c1:	41 56                	push   %r14
  1003c3:	49 89 f6             	mov    %rsi,%r14
  1003c6:	31 f6                	xor    %esi,%esi
  1003c8:	41 55                	push   %r13
  1003ca:	45 31 ed             	xor    %r13d,%r13d
  1003cd:	41 54                	push   %r12
  1003cf:	49 89 d4             	mov    %rdx,%r12
  1003d2:	53                   	push   %rbx
  1003d3:	48 89 cb             	mov    %rcx,%rbx
  1003d6:	48 83 ec 20          	sub    $0x20,%rsp
  1003da:	48 89 b1 20 01 00 00 	mov    %rsi,0x120(%rcx)
  1003e1:	4c 39 f7             	cmp    %r14,%rdi
  1003e4:	0f 83 e3 04 00 00    	jae    1008cd <execute_cfa_program+0x510>
  1003ea:	49 8b 84 24 c0 00 00 	mov    0xc0(%r12),%rax
  1003f1:	00 
  1003f2:	48 8b 8b 48 01 00 00 	mov    0x148(%rbx),%rcx
  1003f9:	48 c1 e8 3f          	shr    $0x3f,%rax
  1003fd:	49 03 84 24 98 00 00 	add    0x98(%r12),%rax
  100404:	00 
  100405:	48 39 c1             	cmp    %rax,%rcx
  100408:	0f 83 bf 04 00 00    	jae    1008cd <execute_cfa_program+0x510>
  10040e:	0f b6 07             	movzbl (%rdi),%eax
  100411:	48 8d 57 01          	lea    0x1(%rdi),%rdx
  100415:	89 c6                	mov    %eax,%esi
  100417:	83 e6 c0             	and    $0xffffffc0,%esi
  10041a:	40 80 fe 40          	cmp    $0x40,%sil
  10041e:	75 13                	jne    100433 <execute_cfa_program+0x76>
  100420:	83 e0 3f             	and    $0x3f,%eax
  100423:	48 0f af 83 60 01 00 	imul   0x160(%rbx),%rax
  10042a:	00 
  10042b:	48 01 c8             	add    %rcx,%rax
  10042e:	e9 84 00 00 00       	jmp    1004b7 <execute_cfa_program+0xfa>
  100433:	40 80 fe 80          	cmp    $0x80,%sil
  100437:	75 3f                	jne    100478 <execute_cfa_program+0xbb>
  100439:	49 89 c1             	mov    %rax,%r9
  10043c:	41 89 c2             	mov    %eax,%r10d
  10043f:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  100443:	48 89 d7             	mov    %rdx,%rdi
  100446:	41 83 e1 3f          	and    $0x3f,%r9d
  10044a:	41 83 e2 3f          	and    $0x3f,%r10d
  10044e:	4c 89 4d c8          	mov    %r9,-0x38(%rbp)
  100452:	e8 b9 fd ff ff       	call   100210 <read_uleb128>
  100457:	48 8b 8b 58 01 00 00 	mov    0x158(%rbx),%rcx
  10045e:	48 0f af 4d d0       	imul   -0x30(%rbp),%rcx
  100463:	48 89 c2             	mov    %rax,%rdx
  100466:	4c 89 c8             	mov    %r9,%rax
  100469:	41 80 fa 11          	cmp    $0x11,%r10b
  10046d:	0f 86 c4 02 00 00    	jbe    100737 <execute_cfa_program+0x37a>
  100473:	e9 4d 04 00 00       	jmp    1008c5 <execute_cfa_program+0x508>
  100478:	40 80 fe c0          	cmp    $0xc0,%sil
  10047c:	75 10                	jne    10048e <execute_cfa_program+0xd1>
  10047e:	89 c1                	mov    %eax,%ecx
  100480:	83 e0 3f             	and    $0x3f,%eax
  100483:	83 e1 3f             	and    $0x3f,%ecx
  100486:	80 f9 11             	cmp    $0x11,%cl
  100489:	e9 d4 00 00 00       	jmp    100562 <execute_cfa_program+0x1a5>
  10048e:	3c 2f                	cmp    $0x2f,%al
  100490:	0f 87 2a 04 00 00    	ja     1008c0 <execute_cfa_program+0x503>
  100496:	ff 24 c5 68 c3 11 00 	jmp    *0x11c368(,%rax,8)
  10049d:	0f b6 b3 70 01 00 00 	movzbl 0x170(%rbx),%esi
  1004a4:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  1004a8:	4c 89 e7             	mov    %r12,%rdi
  1004ab:	e8 1b fe ff ff       	call   1002cb <read_encoded_value>
  1004b0:	48 89 c2             	mov    %rax,%rdx
  1004b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1004b7:	48 89 83 48 01 00 00 	mov    %rax,0x148(%rbx)
  1004be:	e9 02 04 00 00       	jmp    1008c5 <execute_cfa_program+0x508>
  1004c3:	0f b6 47 01          	movzbl 0x1(%rdi),%eax
  1004c7:	48 0f af 83 60 01 00 	imul   0x160(%rbx),%rax
  1004ce:	00 
  1004cf:	48 8d 57 02          	lea    0x2(%rdi),%rdx
  1004d3:	48 01 c8             	add    %rcx,%rax
  1004d6:	48 89 83 48 01 00 00 	mov    %rax,0x148(%rbx)
  1004dd:	e9 e3 03 00 00       	jmp    1008c5 <execute_cfa_program+0x508>
  1004e2:	0f b7 47 01          	movzwl 0x1(%rdi),%eax
  1004e6:	48 0f af 83 60 01 00 	imul   0x160(%rbx),%rax
  1004ed:	00 
  1004ee:	48 8d 57 03          	lea    0x3(%rdi),%rdx
  1004f2:	48 01 c8             	add    %rcx,%rax
  1004f5:	48 89 83 48 01 00 00 	mov    %rax,0x148(%rbx)
  1004fc:	e9 c4 03 00 00       	jmp    1008c5 <execute_cfa_program+0x508>
  100501:	8b 47 01             	mov    0x1(%rdi),%eax
  100504:	48 0f af 83 60 01 00 	imul   0x160(%rbx),%rax
  10050b:	00 
  10050c:	48 8d 57 05          	lea    0x5(%rdi),%rdx
  100510:	48 01 c8             	add    %rcx,%rax
  100513:	48 89 83 48 01 00 00 	mov    %rax,0x148(%rbx)
  10051a:	e9 a6 03 00 00       	jmp    1008c5 <execute_cfa_program+0x508>
  10051f:	48 89 d7             	mov    %rdx,%rdi
  100522:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  100526:	e8 e5 fc ff ff       	call   100210 <read_uleb128>
  10052b:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  10052f:	48 89 c7             	mov    %rax,%rdi
  100532:	e8 d9 fc ff ff       	call   100210 <read_uleb128>
  100537:	48 8b 8b 58 01 00 00 	mov    0x158(%rbx),%rcx
  10053e:	48 0f af 4d d0       	imul   -0x30(%rbp),%rcx
  100543:	48 89 c2             	mov    %rax,%rdx
  100546:	e9 de 01 00 00       	jmp    100729 <execute_cfa_program+0x36c>
  10054b:	48 89 d7             	mov    %rdx,%rdi
  10054e:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  100552:	e8 b9 fc ff ff       	call   100210 <read_uleb128>
  100557:	48 89 c2             	mov    %rax,%rdx
  10055a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  10055e:	48 83 f8 11          	cmp    $0x11,%rax
  100562:	0f 87 5d 03 00 00    	ja     1008c5 <execute_cfa_program+0x508>
  100568:	48 c1 e0 04          	shl    $0x4,%rax
  10056c:	31 c9                	xor    %ecx,%ecx
  10056e:	89 4c 03 08          	mov    %ecx,0x8(%rbx,%rax,1)
  100572:	e9 4e 03 00 00       	jmp    1008c5 <execute_cfa_program+0x508>
  100577:	48 89 d7             	mov    %rdx,%rdi
  10057a:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  10057e:	e8 8d fc ff ff       	call   100210 <read_uleb128>
  100583:	48 89 c2             	mov    %rax,%rdx
  100586:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  10058a:	48 83 f8 11          	cmp    $0x11,%rax
  10058e:	0f 87 31 03 00 00    	ja     1008c5 <execute_cfa_program+0x508>
  100594:	48 c1 e0 04          	shl    $0x4,%rax
  100598:	c7 44 03 08 06 00 00 	movl   $0x6,0x8(%rbx,%rax,1)
  10059f:	00 
  1005a0:	e9 20 03 00 00       	jmp    1008c5 <execute_cfa_program+0x508>
  1005a5:	48 89 d7             	mov    %rdx,%rdi
  1005a8:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  1005ac:	e8 5f fc ff ff       	call   100210 <read_uleb128>
  1005b1:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  1005b5:	48 89 c7             	mov    %rax,%rdi
  1005b8:	e8 53 fc ff ff       	call   100210 <read_uleb128>
  1005bd:	48 89 c2             	mov    %rax,%rdx
  1005c0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1005c4:	48 83 f8 11          	cmp    $0x11,%rax
  1005c8:	0f 87 f7 02 00 00    	ja     1008c5 <execute_cfa_program+0x508>
  1005ce:	48 c1 e0 04          	shl    $0x4,%rax
  1005d2:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  1005d6:	48 01 d8             	add    %rbx,%rax
  1005d9:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%rax)
  1005e0:	48 89 08             	mov    %rcx,(%rax)
  1005e3:	e9 dd 02 00 00       	jmp    1008c5 <execute_cfa_program+0x508>
  1005e8:	4d 85 ed             	test   %r13,%r13
  1005eb:	74 0c                	je     1005f9 <execute_cfa_program+0x23c>
  1005ed:	4c 89 e8             	mov    %r13,%rax
  1005f0:	4d 8b ad 20 01 00 00 	mov    0x120(%r13),%r13
  1005f7:	eb 10                	jmp    100609 <execute_cfa_program+0x24c>
  1005f9:	48 81 ec 50 01 00 00 	sub    $0x150,%rsp
  100600:	48 8d 44 24 0f       	lea    0xf(%rsp),%rax
  100605:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  100609:	b9 52 00 00 00       	mov    $0x52,%ecx
  10060e:	48 89 c7             	mov    %rax,%rdi
  100611:	48 89 de             	mov    %rbx,%rsi
  100614:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  100616:	48 89 83 20 01 00 00 	mov    %rax,0x120(%rbx)
  10061d:	e9 a3 02 00 00       	jmp    1008c5 <execute_cfa_program+0x508>
  100622:	48 8b 83 20 01 00 00 	mov    0x120(%rbx),%rax
  100629:	b9 52 00 00 00       	mov    $0x52,%ecx
  10062e:	48 89 df             	mov    %rbx,%rdi
  100631:	48 89 c6             	mov    %rax,%rsi
  100634:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  100636:	4c 89 a8 20 01 00 00 	mov    %r13,0x120(%rax)
  10063d:	49 89 c5             	mov    %rax,%r13
  100640:	e9 80 02 00 00       	jmp    1008c5 <execute_cfa_program+0x508>
  100645:	48 89 d7             	mov    %rdx,%rdi
  100648:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  10064c:	e8 bf fb ff ff       	call   100210 <read_uleb128>
  100651:	48 89 c7             	mov    %rax,%rdi
  100654:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  100658:	48 89 83 30 01 00 00 	mov    %rax,0x130(%rbx)
  10065f:	e8 ac fb ff ff       	call   100210 <read_uleb128>
  100664:	48 89 c2             	mov    %rax,%rdx
  100667:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10066b:	48 89 83 28 01 00 00 	mov    %rax,0x128(%rbx)
  100672:	eb 1a                	jmp    10068e <execute_cfa_program+0x2d1>
  100674:	48 89 d7             	mov    %rdx,%rdi
  100677:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  10067b:	e8 90 fb ff ff       	call   100210 <read_uleb128>
  100680:	48 89 c2             	mov    %rax,%rdx
  100683:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  100687:	48 89 83 30 01 00 00 	mov    %rax,0x130(%rbx)
  10068e:	c7 83 40 01 00 00 01 	movl   $0x1,0x140(%rbx)
  100695:	00 00 00 
  100698:	e9 28 02 00 00       	jmp    1008c5 <execute_cfa_program+0x508>
  10069d:	48 89 d7             	mov    %rdx,%rdi
  1006a0:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  1006a4:	e8 67 fb ff ff       	call   100210 <read_uleb128>
  1006a9:	48 89 c2             	mov    %rax,%rdx
  1006ac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1006b0:	e9 ee 00 00 00       	jmp    1007a3 <execute_cfa_program+0x3e6>
  1006b5:	48 89 93 38 01 00 00 	mov    %rdx,0x138(%rbx)
  1006bc:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  1006c0:	48 89 d7             	mov    %rdx,%rdi
  1006c3:	c7 83 40 01 00 00 02 	movl   $0x2,0x140(%rbx)
  1006ca:	00 00 00 
  1006cd:	e9 7c 01 00 00       	jmp    10084e <execute_cfa_program+0x491>
  1006d2:	48 89 d7             	mov    %rdx,%rdi
  1006d5:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  1006d9:	e8 32 fb ff ff       	call   100210 <read_uleb128>
  1006de:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  1006e2:	48 89 c7             	mov    %rax,%rdi
  1006e5:	48 83 fa 11          	cmp    $0x11,%rdx
  1006e9:	0f 87 5b 01 00 00    	ja     10084a <execute_cfa_program+0x48d>
  1006ef:	48 c1 e2 04          	shl    $0x4,%rdx
  1006f3:	48 01 da             	add    %rbx,%rdx
  1006f6:	c7 42 08 03 00 00 00 	movl   $0x3,0x8(%rdx)
  1006fd:	e9 45 01 00 00       	jmp    100847 <execute_cfa_program+0x48a>
  100702:	48 89 d7             	mov    %rdx,%rdi
  100705:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  100709:	e8 02 fb ff ff       	call   100210 <read_uleb128>
  10070e:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  100712:	48 89 c7             	mov    %rax,%rdi
  100715:	e8 1b fb ff ff       	call   100235 <read_sleb128>
  10071a:	48 8b 8b 58 01 00 00 	mov    0x158(%rbx),%rcx
  100721:	48 0f af 4d d8       	imul   -0x28(%rbp),%rcx
  100726:	48 89 c2             	mov    %rax,%rdx
  100729:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  10072d:	48 83 f8 11          	cmp    $0x11,%rax
  100731:	0f 87 8e 01 00 00    	ja     1008c5 <execute_cfa_program+0x508>
  100737:	48 c1 e0 04          	shl    $0x4,%rax
  10073b:	48 01 d8             	add    %rbx,%rax
  10073e:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  100745:	e9 96 fe ff ff       	jmp    1005e0 <execute_cfa_program+0x223>
  10074a:	48 89 d7             	mov    %rdx,%rdi
  10074d:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  100751:	e8 ba fa ff ff       	call   100210 <read_uleb128>
  100756:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  10075a:	48 89 c7             	mov    %rax,%rdi
  10075d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  100761:	48 89 83 30 01 00 00 	mov    %rax,0x130(%rbx)
  100768:	e8 c8 fa ff ff       	call   100235 <read_sleb128>
  10076d:	c7 83 40 01 00 00 01 	movl   $0x1,0x140(%rbx)
  100774:	00 00 00 
  100777:	48 89 c2             	mov    %rax,%rdx
  10077a:	48 8b 83 58 01 00 00 	mov    0x158(%rbx),%rax
  100781:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  100786:	eb 1b                	jmp    1007a3 <execute_cfa_program+0x3e6>
  100788:	48 89 d7             	mov    %rdx,%rdi
  10078b:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  10078f:	e8 a1 fa ff ff       	call   100235 <read_sleb128>
  100794:	48 89 c2             	mov    %rax,%rdx
  100797:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10079b:	48 0f af 83 58 01 00 	imul   0x158(%rbx),%rax
  1007a2:	00 
  1007a3:	48 89 83 28 01 00 00 	mov    %rax,0x128(%rbx)
  1007aa:	e9 16 01 00 00       	jmp    1008c5 <execute_cfa_program+0x508>
  1007af:	48 89 d7             	mov    %rdx,%rdi
  1007b2:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  1007b6:	e8 55 fa ff ff       	call   100210 <read_uleb128>
  1007bb:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  1007bf:	48 89 c7             	mov    %rax,%rdi
  1007c2:	e8 49 fa ff ff       	call   100210 <read_uleb128>
  1007c7:	48 8b 8b 58 01 00 00 	mov    0x158(%rbx),%rcx
  1007ce:	48 0f af 4d d0       	imul   -0x30(%rbp),%rcx
  1007d3:	48 89 c2             	mov    %rax,%rdx
  1007d6:	eb 27                	jmp    1007ff <execute_cfa_program+0x442>
  1007d8:	48 89 d7             	mov    %rdx,%rdi
  1007db:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  1007df:	e8 2c fa ff ff       	call   100210 <read_uleb128>
  1007e4:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  1007e8:	48 89 c7             	mov    %rax,%rdi
  1007eb:	e8 45 fa ff ff       	call   100235 <read_sleb128>
  1007f0:	48 8b 8b 58 01 00 00 	mov    0x158(%rbx),%rcx
  1007f7:	48 0f af 4d d8       	imul   -0x28(%rbp),%rcx
  1007fc:	48 89 c2             	mov    %rax,%rdx
  1007ff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  100803:	48 83 f8 11          	cmp    $0x11,%rax
  100807:	0f 87 b8 00 00 00    	ja     1008c5 <execute_cfa_program+0x508>
  10080d:	48 c1 e0 04          	shl    $0x4,%rax
  100811:	48 01 d8             	add    %rbx,%rax
  100814:	c7 40 08 04 00 00 00 	movl   $0x4,0x8(%rax)
  10081b:	e9 c0 fd ff ff       	jmp    1005e0 <execute_cfa_program+0x223>
  100820:	48 89 d7             	mov    %rdx,%rdi
  100823:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  100827:	e8 e4 f9 ff ff       	call   100210 <read_uleb128>
  10082c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  100830:	48 89 c7             	mov    %rax,%rdi
  100833:	48 83 fa 11          	cmp    $0x11,%rdx
  100837:	77 11                	ja     10084a <execute_cfa_program+0x48d>
  100839:	48 c1 e2 04          	shl    $0x4,%rdx
  10083d:	48 01 da             	add    %rbx,%rdx
  100840:	c7 42 08 05 00 00 00 	movl   $0x5,0x8(%rdx)
  100847:	48 89 3a             	mov    %rdi,(%rdx)
  10084a:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  10084e:	e8 bd f9 ff ff       	call   100210 <read_uleb128>
  100853:	48 03 45 d0          	add    -0x30(%rbp),%rax
  100857:	48 89 c2             	mov    %rax,%rdx
  10085a:	eb 69                	jmp    1008c5 <execute_cfa_program+0x508>
  10085c:	48 89 d7             	mov    %rdx,%rdi
  10085f:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  100863:	e8 a8 f9 ff ff       	call   100210 <read_uleb128>
  100868:	48 89 c2             	mov    %rax,%rdx
  10086b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  10086f:	49 89 84 24 d0 00 00 	mov    %rax,0xd0(%r12)
  100876:	00 
  100877:	eb 4c                	jmp    1008c5 <execute_cfa_program+0x508>
  100879:	48 89 d7             	mov    %rdx,%rdi
  10087c:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  100880:	e8 8b f9 ff ff       	call   100210 <read_uleb128>
  100885:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  100889:	48 89 c7             	mov    %rax,%rdi
  10088c:	e8 7f f9 ff ff       	call   100210 <read_uleb128>
  100891:	48 8b 8b 58 01 00 00 	mov    0x158(%rbx),%rcx
  100898:	48 0f af 4d d0       	imul   -0x30(%rbp),%rcx
  10089d:	48 89 c2             	mov    %rax,%rdx
  1008a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1008a4:	48 83 f8 11          	cmp    $0x11,%rax
  1008a8:	77 1b                	ja     1008c5 <execute_cfa_program+0x508>
  1008aa:	48 c1 e0 04          	shl    $0x4,%rax
  1008ae:	48 f7 d9             	neg    %rcx
  1008b1:	48 01 d8             	add    %rbx,%rax
  1008b4:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  1008bb:	e9 20 fd ff ff       	jmp    1005e0 <execute_cfa_program+0x223>
  1008c0:	e8 ff 14 01 00       	call   111dc4 <abort>
  1008c5:	48 89 d7             	mov    %rdx,%rdi
  1008c8:	e9 14 fb ff ff       	jmp    1003e1 <execute_cfa_program+0x24>
  1008cd:	48 8d 65 e0          	lea    -0x20(%rbp),%rsp
  1008d1:	5b                   	pop    %rbx
  1008d2:	41 5c                	pop    %r12
  1008d4:	41 5d                	pop    %r13
  1008d6:	41 5e                	pop    %r14
  1008d8:	5d                   	pop    %rbp
  1008d9:	c3                   	ret    

00000000001008da <uw_frame_state_for>:
  1008da:	55                   	push   %rbp
  1008db:	31 c0                	xor    %eax,%eax
  1008dd:	b9 60 00 00 00       	mov    $0x60,%ecx
  1008e2:	48 89 e5             	mov    %rsp,%rbp
  1008e5:	41 57                	push   %r15
  1008e7:	41 56                	push   %r14
  1008e9:	41 55                	push   %r13
  1008eb:	41 54                	push   %r12
  1008ed:	49 89 fc             	mov    %rdi,%r12
  1008f0:	48 89 f7             	mov    %rsi,%rdi
  1008f3:	53                   	push   %rbx
  1008f4:	48 83 ec 38          	sub    $0x38,%rsp
  1008f8:	f3 ab                	rep stos %eax,%es:(%rdi)
  1008fa:	31 c0                	xor    %eax,%eax
  1008fc:	49 89 84 24 d0 00 00 	mov    %rax,0xd0(%r12)
  100903:	00 
  100904:	49 8b 94 24 98 00 00 	mov    0x98(%r12),%rdx
  10090b:	00 
  10090c:	49 89 84 24 a0 00 00 	mov    %rax,0xa0(%r12)
  100913:	00 
  100914:	48 85 d2             	test   %rdx,%rdx
  100917:	75 0a                	jne    100923 <uw_frame_state_for+0x49>
  100919:	b8 05 00 00 00       	mov    $0x5,%eax
  10091e:	e9 67 02 00 00       	jmp    100b8a <uw_frame_state_for+0x2b0>
  100923:	49 8b 84 24 c0 00 00 	mov    0xc0(%r12),%rax
  10092a:	00 
  10092b:	48 89 f3             	mov    %rsi,%rbx
  10092e:	49 8d b4 24 a8 00 00 	lea    0xa8(%r12),%rsi
  100935:	00 
  100936:	48 c1 e8 3f          	shr    $0x3f,%rax
  10093a:	48 8d 7c 02 ff       	lea    -0x1(%rdx,%rax,1),%rdi
  10093f:	e8 c7 21 00 00       	call   102b0b <_Unwind_Find_FDE>
  100944:	49 89 c7             	mov    %rax,%r15
  100947:	48 85 c0             	test   %rax,%rax
  10094a:	74 cd                	je     100919 <uw_frame_state_for+0x3f>
  10094c:	49 8b 84 24 b8 00 00 	mov    0xb8(%r12),%rax
  100953:	00 
  100954:	4d 8d 77 04          	lea    0x4(%r15),%r14
  100958:	48 89 83 48 01 00 00 	mov    %rax,0x148(%rbx)
  10095f:	49 63 47 04          	movslq 0x4(%r15),%rax
  100963:	49 29 c6             	sub    %rax,%r14
  100966:	4d 8d 6e 09          	lea    0x9(%r14),%r13
  10096a:	4c 89 ef             	mov    %r13,%rdi
  10096d:	e8 2e 3e 00 00       	call   1047a0 <strlen>
  100972:	41 80 7e 09 65       	cmpb   $0x65,0x9(%r14)
  100977:	49 8d 7c 05 01       	lea    0x1(%r13,%rax,1),%rdi
  10097c:	75 19                	jne    100997 <uw_frame_state_for+0xbd>
  10097e:	41 80 7e 0a 68       	cmpb   $0x68,0xa(%r14)
  100983:	75 12                	jne    100997 <uw_frame_state_for+0xbd>
  100985:	48 8b 07             	mov    (%rdi),%rax
  100988:	4d 8d 6e 0b          	lea    0xb(%r14),%r13
  10098c:	48 83 c7 08          	add    $0x8,%rdi
  100990:	48 89 83 78 01 00 00 	mov    %rax,0x178(%rbx)
  100997:	45 8a 4e 08          	mov    0x8(%r14),%r9b
  10099b:	41 80 f9 03          	cmp    $0x3,%r9b
  10099f:	76 19                	jbe    1009ba <uw_frame_state_for+0xe0>
  1009a1:	80 3f 08             	cmpb   $0x8,(%rdi)
  1009a4:	74 0a                	je     1009b0 <uw_frame_state_for+0xd6>
  1009a6:	b8 03 00 00 00       	mov    $0x3,%eax
  1009ab:	e9 da 01 00 00       	jmp    100b8a <uw_frame_state_for+0x2b0>
  1009b0:	80 7f 01 00          	cmpb   $0x0,0x1(%rdi)
  1009b4:	75 f0                	jne    1009a6 <uw_frame_state_for+0xcc>
  1009b6:	48 83 c7 02          	add    $0x2,%rdi
  1009ba:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
  1009be:	e8 4d f8 ff ff       	call   100210 <read_uleb128>
  1009c3:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  1009c7:	48 89 c7             	mov    %rax,%rdi
  1009ca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  1009ce:	48 89 83 60 01 00 00 	mov    %rax,0x160(%rbx)
  1009d5:	e8 5b f8 ff ff       	call   100235 <read_sleb128>
  1009da:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  1009de:	41 fe c9             	dec    %r9b
  1009e1:	48 89 93 58 01 00 00 	mov    %rdx,0x158(%rbx)
  1009e8:	75 09                	jne    1009f3 <uw_frame_state_for+0x119>
  1009ea:	48 8d 78 01          	lea    0x1(%rax),%rdi
  1009ee:	0f b6 00             	movzbl (%rax),%eax
  1009f1:	eb 13                	jmp    100a06 <uw_frame_state_for+0x12c>
  1009f3:	48 89 c7             	mov    %rax,%rdi
  1009f6:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
  1009fa:	e8 11 f8 ff ff       	call   100210 <read_uleb128>
  1009ff:	48 89 c7             	mov    %rax,%rdi
  100a02:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  100a06:	48 89 83 68 01 00 00 	mov    %rax,0x168(%rbx)
  100a0d:	45 31 c0             	xor    %r8d,%r8d
  100a10:	c6 83 71 01 00 00 ff 	movb   $0xff,0x171(%rbx)
  100a17:	41 80 7d 00 7a       	cmpb   $0x7a,0x0(%r13)
  100a1c:	75 29                	jne    100a47 <uw_frame_state_for+0x16d>
  100a1e:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
  100a22:	49 ff c5             	inc    %r13
  100a25:	e8 e6 f7 ff ff       	call   100210 <read_uleb128>
  100a2a:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  100a2e:	c6 83 72 01 00 00 01 	movb   $0x1,0x172(%rbx)
  100a35:	48 89 c7             	mov    %rax,%rdi
  100a38:	49 01 c0             	add    %rax,%r8
  100a3b:	eb 0a                	jmp    100a47 <uw_frame_state_for+0x16d>
  100a3d:	3c 50                	cmp    $0x50,%al
  100a3f:	74 3f                	je     100a80 <uw_frame_state_for+0x1a6>
  100a41:	77 1f                	ja     100a62 <uw_frame_state_for+0x188>
  100a43:	3c 42                	cmp    $0x42,%al
  100a45:	75 0d                	jne    100a54 <uw_frame_state_for+0x17a>
  100a47:	41 8a 45 00          	mov    0x0(%r13),%al
  100a4b:	49 ff c5             	inc    %r13
  100a4e:	84 c0                	test   %al,%al
  100a50:	75 eb                	jne    100a3d <uw_frame_state_for+0x163>
  100a52:	eb 57                	jmp    100aab <uw_frame_state_for+0x1d1>
  100a54:	3c 4c                	cmp    $0x4c,%al
  100a56:	75 5b                	jne    100ab3 <uw_frame_state_for+0x1d9>
  100a58:	8a 07                	mov    (%rdi),%al
  100a5a:	88 83 71 01 00 00    	mov    %al,0x171(%rbx)
  100a60:	eb 19                	jmp    100a7b <uw_frame_state_for+0x1a1>
  100a62:	3c 52                	cmp    $0x52,%al
  100a64:	74 0d                	je     100a73 <uw_frame_state_for+0x199>
  100a66:	3c 53                	cmp    $0x53,%al
  100a68:	75 49                	jne    100ab3 <uw_frame_state_for+0x1d9>
  100a6a:	c6 83 73 01 00 00 01 	movb   $0x1,0x173(%rbx)
  100a71:	eb d4                	jmp    100a47 <uw_frame_state_for+0x16d>
  100a73:	8a 07                	mov    (%rdi),%al
  100a75:	88 83 70 01 00 00    	mov    %al,0x170(%rbx)
  100a7b:	48 ff c7             	inc    %rdi
  100a7e:	eb c7                	jmp    100a47 <uw_frame_state_for+0x16d>
  100a80:	0f b6 37             	movzbl (%rdi),%esi
  100a83:	48 8d 57 01          	lea    0x1(%rdi),%rdx
  100a87:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
  100a8b:	4c 89 e7             	mov    %r12,%rdi
  100a8e:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  100a92:	e8 34 f8 ff ff       	call   1002cb <read_encoded_value>
  100a97:	4c 8b 45 a8          	mov    -0x58(%rbp),%r8
  100a9b:	48 89 c7             	mov    %rax,%rdi
  100a9e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  100aa2:	48 89 83 50 01 00 00 	mov    %rax,0x150(%rbx)
  100aa9:	eb 9c                	jmp    100a47 <uw_frame_state_for+0x16d>
  100aab:	4d 85 c0             	test   %r8,%r8
  100aae:	75 0c                	jne    100abc <uw_frame_state_for+0x1e2>
  100ab0:	49 89 f8             	mov    %rdi,%r8
  100ab3:	4d 85 c0             	test   %r8,%r8
  100ab6:	0f 84 ea fe ff ff    	je     1009a6 <uw_frame_state_for+0xcc>
  100abc:	41 8b 06             	mov    (%r14),%eax
  100abf:	48 89 d9             	mov    %rbx,%rcx
  100ac2:	4c 89 e2             	mov    %r12,%rdx
  100ac5:	4c 89 c7             	mov    %r8,%rdi
  100ac8:	49 8d 74 06 04       	lea    0x4(%r14,%rax,1),%rsi
  100acd:	e8 eb f8 ff ff       	call   1003bd <execute_cfa_program>
  100ad2:	8a 83 70 01 00 00    	mov    0x170(%rbx),%al
  100ad8:	3c ff                	cmp    $0xff,%al
  100ada:	74 29                	je     100b05 <uw_frame_state_for+0x22b>
  100adc:	83 e0 07             	and    $0x7,%eax
  100adf:	3c 02                	cmp    $0x2,%al
  100ae1:	74 26                	je     100b09 <uw_frame_state_for+0x22f>
  100ae3:	77 09                	ja     100aee <uw_frame_state_for+0x214>
  100ae5:	ba 08 00 00 00       	mov    $0x8,%edx
  100aea:	84 c0                	test   %al,%al
  100aec:	eb 10                	jmp    100afe <uw_frame_state_for+0x224>
  100aee:	ba 04 00 00 00       	mov    $0x4,%edx
  100af3:	3c 03                	cmp    $0x3,%al
  100af5:	74 17                	je     100b0e <uw_frame_state_for+0x234>
  100af7:	ba 08 00 00 00       	mov    $0x8,%edx
  100afc:	3c 04                	cmp    $0x4,%al
  100afe:	74 0e                	je     100b0e <uw_frame_state_for+0x234>
  100b00:	e8 bf 12 01 00       	call   111dc4 <abort>
  100b05:	31 d2                	xor    %edx,%edx
  100b07:	eb 05                	jmp    100b0e <uw_frame_state_for+0x234>
  100b09:	ba 02 00 00 00       	mov    $0x2,%edx
  100b0e:	8d 7c 12 08          	lea    0x8(%rdx,%rdx,1),%edi
  100b12:	4c 01 ff             	add    %r15,%rdi
  100b15:	80 bb 72 01 00 00 00 	cmpb   $0x0,0x172(%rbx)
  100b1c:	75 12                	jne    100b30 <uw_frame_state_for+0x256>
  100b1e:	0f b6 b3 71 01 00 00 	movzbl 0x171(%rbx),%esi
  100b25:	40 80 fe ff          	cmp    $0xff,%sil
  100b29:	74 4a                	je     100b75 <uw_frame_state_for+0x29b>
  100b2b:	45 31 ed             	xor    %r13d,%r13d
  100b2e:	eb 20                	jmp    100b50 <uw_frame_state_for+0x276>
  100b30:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  100b34:	e8 d7 f6 ff ff       	call   100210 <read_uleb128>
  100b39:	4c 8b 6d c8          	mov    -0x38(%rbp),%r13
  100b3d:	0f b6 b3 71 01 00 00 	movzbl 0x171(%rbx),%esi
  100b44:	48 89 c7             	mov    %rax,%rdi
  100b47:	49 01 c5             	add    %rax,%r13
  100b4a:	40 80 fe ff          	cmp    $0xff,%sil
  100b4e:	74 1e                	je     100b6e <uw_frame_state_for+0x294>
  100b50:	48 89 fa             	mov    %rdi,%rdx
  100b53:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
  100b57:	4c 89 e7             	mov    %r12,%rdi
  100b5a:	e8 6c f7 ff ff       	call   1002cb <read_encoded_value>
  100b5f:	48 89 c7             	mov    %rax,%rdi
  100b62:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  100b66:	49 89 84 24 a0 00 00 	mov    %rax,0xa0(%r12)
  100b6d:	00 
  100b6e:	4d 85 ed             	test   %r13,%r13
  100b71:	49 0f 45 fd          	cmovne %r13,%rdi
  100b75:	41 8b 07             	mov    (%r15),%eax
  100b78:	48 89 d9             	mov    %rbx,%rcx
  100b7b:	4c 89 e2             	mov    %r12,%rdx
  100b7e:	49 8d 74 07 04       	lea    0x4(%r15,%rax,1),%rsi
  100b83:	e8 35 f8 ff ff       	call   1003bd <execute_cfa_program>
  100b88:	31 c0                	xor    %eax,%eax
  100b8a:	48 83 c4 38          	add    $0x38,%rsp
  100b8e:	5b                   	pop    %rbx
  100b8f:	41 5c                	pop    %r12
  100b91:	41 5d                	pop    %r13
  100b93:	41 5e                	pop    %r14
  100b95:	41 5f                	pop    %r15
  100b97:	5d                   	pop    %rbp
  100b98:	c3                   	ret    

0000000000100b99 <_Unwind_SetSpColumn>:
  100b99:	80 3d 67 14 02 00 08 	cmpb   $0x8,0x21467(%rip)        # 122007 <dwarf_reg_size_table+0x7>
  100ba0:	75 0d                	jne    100baf <_Unwind_SetSpColumn+0x16>
  100ba2:	48 89 32             	mov    %rsi,(%rdx)
  100ba5:	be 07 00 00 00       	mov    $0x7,%esi
  100baa:	e9 e1 f6 ff ff       	jmp    100290 <_Unwind_SetGRPtr>
  100baf:	55                   	push   %rbp
  100bb0:	48 89 e5             	mov    %rsp,%rbp
  100bb3:	e8 0c 12 01 00       	call   111dc4 <abort>

0000000000100bb8 <_Unwind_GetGR>:
  100bb8:	83 fe 11             	cmp    $0x11,%esi
  100bbb:	7e 09                	jle    100bc6 <_Unwind_GetGR+0xe>
  100bbd:	55                   	push   %rbp
  100bbe:	48 89 e5             	mov    %rsp,%rbp
  100bc1:	e8 fe 11 01 00       	call   111dc4 <abort>
  100bc6:	48 63 f6             	movslq %esi,%rsi
  100bc9:	48 8b 04 f7          	mov    (%rdi,%rsi,8),%rax
  100bcd:	f6 87 c7 00 00 00 40 	testb  $0x40,0xc7(%rdi)
  100bd4:	74 0a                	je     100be0 <_Unwind_GetGR+0x28>
  100bd6:	80 bc 37 d8 00 00 00 	cmpb   $0x0,0xd8(%rdi,%rsi,1)
  100bdd:	00 
  100bde:	75 0c                	jne    100bec <_Unwind_GetGR+0x34>
  100be0:	80 be 00 20 12 00 08 	cmpb   $0x8,0x122000(%rsi)
  100be7:	75 d4                	jne    100bbd <_Unwind_GetGR+0x5>
  100be9:	48 8b 00             	mov    (%rax),%rax
  100bec:	c3                   	ret    

0000000000100bed <uw_install_context_1>:
  100bed:	55                   	push   %rbp
  100bee:	48 89 e5             	mov    %rsp,%rbp
  100bf1:	41 54                	push   %r12
  100bf3:	49 89 fc             	mov    %rdi,%r12
  100bf6:	53                   	push   %rbx
  100bf7:	48 89 f3             	mov    %rsi,%rbx
  100bfa:	be 07 00 00 00       	mov    $0x7,%esi
  100bff:	48 89 df             	mov    %rbx,%rdi
  100c02:	48 83 ec 10          	sub    $0x10,%rsp
  100c06:	e8 65 f6 ff ff       	call   100270 <_Unwind_GetGRPtr>
  100c0b:	48 85 c0             	test   %rax,%rax
  100c0e:	75 10                	jne    100c20 <uw_install_context_1+0x33>
  100c10:	48 8b b3 90 00 00 00 	mov    0x90(%rbx),%rsi
  100c17:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
  100c1b:	e8 79 ff ff ff       	call   100b99 <_Unwind_SetSpColumn>
  100c20:	31 c0                	xor    %eax,%eax
  100c22:	41 80 bc 04 d8 00 00 	cmpb   $0x0,0xd8(%r12,%rax,1)
  100c29:	00 00 
  100c2b:	49 8b 14 c4          	mov    (%r12,%rax,8),%rdx
  100c2f:	48 8b 34 c3          	mov    (%rbx,%rax,8),%rsi
  100c33:	74 05                	je     100c3a <uw_install_context_1+0x4d>
  100c35:	e8 8a 11 01 00       	call   111dc4 <abort>
  100c3a:	80 bc 03 d8 00 00 00 	cmpb   $0x0,0xd8(%rbx,%rax,1)
  100c41:	00 
  100c42:	74 13                	je     100c57 <uw_install_context_1+0x6a>
  100c44:	48 85 d2             	test   %rdx,%rdx
  100c47:	74 31                	je     100c7a <uw_install_context_1+0x8d>
  100c49:	80 b8 00 20 12 00 08 	cmpb   $0x8,0x122000(%rax)
  100c50:	75 e3                	jne    100c35 <uw_install_context_1+0x48>
  100c52:	48 89 32             	mov    %rsi,(%rdx)
  100c55:	eb 23                	jmp    100c7a <uw_install_context_1+0x8d>
  100c57:	48 85 f6             	test   %rsi,%rsi
  100c5a:	40 0f 95 c7          	setne  %dil
  100c5e:	48 85 d2             	test   %rdx,%rdx
  100c61:	0f 95 c1             	setne  %cl
  100c64:	40 84 cf             	test   %cl,%dil
  100c67:	74 11                	je     100c7a <uw_install_context_1+0x8d>
  100c69:	48 39 f2             	cmp    %rsi,%rdx
  100c6c:	74 0c                	je     100c7a <uw_install_context_1+0x8d>
  100c6e:	0f b6 88 00 20 12 00 	movzbl 0x122000(%rax),%ecx
  100c75:	48 89 d7             	mov    %rdx,%rdi
  100c78:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  100c7a:	48 ff c0             	inc    %rax
  100c7d:	48 83 f8 11          	cmp    $0x11,%rax
  100c81:	75 9f                	jne    100c22 <uw_install_context_1+0x35>
  100c83:	be 07 00 00 00       	mov    $0x7,%esi
  100c88:	4c 89 e7             	mov    %r12,%rdi
  100c8b:	e8 e0 f5 ff ff       	call   100270 <_Unwind_GetGRPtr>
  100c90:	48 89 c2             	mov    %rax,%rdx
  100c93:	31 c0                	xor    %eax,%eax
  100c95:	48 85 d2             	test   %rdx,%rdx
  100c98:	75 1c                	jne    100cb6 <uw_install_context_1+0xc9>
  100c9a:	be 07 00 00 00       	mov    $0x7,%esi
  100c9f:	48 89 df             	mov    %rbx,%rdi
  100ca2:	e8 11 ff ff ff       	call   100bb8 <_Unwind_GetGR>
  100ca7:	49 2b 84 24 90 00 00 	sub    0x90(%r12),%rax
  100cae:	00 
  100caf:	48 03 83 d0 00 00 00 	add    0xd0(%rbx),%rax
  100cb6:	5a                   	pop    %rdx
  100cb7:	59                   	pop    %rcx
  100cb8:	5b                   	pop    %rbx
  100cb9:	41 5c                	pop    %r12
  100cbb:	5d                   	pop    %rbp
  100cbc:	c3                   	ret    

0000000000100cbd <execute_stack_op>:
  100cbd:	55                   	push   %rbp
  100cbe:	48 89 f8             	mov    %rdi,%rax
  100cc1:	48 89 e5             	mov    %rsp,%rbp
  100cc4:	41 57                	push   %r15
  100cc6:	41 56                	push   %r14
  100cc8:	49 be 00 00 00 7c f6 	movabs $0xf67c000000,%r14
  100ccf:	00 00 00 
  100cd2:	41 55                	push   %r13
  100cd4:	49 89 f5             	mov    %rsi,%r13
  100cd7:	41 54                	push   %r12
  100cd9:	49 89 d4             	mov    %rdx,%r12
  100cdc:	53                   	push   %rbx
  100cdd:	bb 01 00 00 00       	mov    $0x1,%ebx
  100ce2:	48 81 ec 28 02 00 00 	sub    $0x228,%rsp
  100ce9:	48 89 8d d0 fd ff ff 	mov    %rcx,-0x230(%rbp)
  100cf0:	4c 39 e8             	cmp    %r13,%rax
  100cf3:	0f 83 bd 04 00 00    	jae    1011b6 <execute_stack_op+0x4f9>
  100cf9:	44 0f b6 08          	movzbl (%rax),%r9d
  100cfd:	4c 8d 78 01          	lea    0x1(%rax),%r15
  100d01:	44 89 ca             	mov    %r9d,%edx
  100d04:	41 80 f9 17          	cmp    $0x17,%r9b
  100d08:	77 20                	ja     100d2a <execute_stack_op+0x6d>
  100d0a:	41 80 f9 02          	cmp    $0x2,%r9b
  100d0e:	0f 86 5a 03 00 00    	jbe    10106e <execute_stack_op+0x3b1>
  100d14:	83 ea 03             	sub    $0x3,%edx
  100d17:	80 fa 14             	cmp    $0x14,%dl
  100d1a:	0f 87 4e 03 00 00    	ja     10106e <execute_stack_op+0x3b1>
  100d20:	0f b6 d2             	movzbl %dl,%edx
  100d23:	ff 24 d5 e8 c4 11 00 	jmp    *0x11c4e8(,%rdx,8)
  100d2a:	41 80 f9 6f          	cmp    $0x6f,%r9b
  100d2e:	77 6d                	ja     100d9d <execute_stack_op+0xe0>
  100d30:	41 80 f9 4f          	cmp    $0x4f,%r9b
  100d34:	0f 87 61 01 00 00    	ja     100e9b <execute_stack_op+0x1de>
  100d3a:	41 80 f9 28          	cmp    $0x28,%r9b
  100d3e:	77 44                	ja     100d84 <execute_stack_op+0xc7>
  100d40:	41 80 f9 18          	cmp    $0x18,%r9b
  100d44:	0f 84 24 03 00 00    	je     10106e <execute_stack_op+0x3b1>
  100d4a:	89 d1                	mov    %edx,%ecx
  100d4c:	be 01 00 00 00       	mov    $0x1,%esi
  100d51:	48 d3 e6             	shl    %cl,%rsi
  100d54:	48 89 f1             	mov    %rsi,%rcx
  100d57:	4c 85 f6             	test   %r14,%rsi
  100d5a:	0f 85 09 03 00 00    	jne    101069 <execute_stack_op+0x3ac>
  100d60:	be c1 04 00 00       	mov    $0x4c1,%esi
  100d65:	48 c1 e6 19          	shl    $0x19,%rsi
  100d69:	48 85 f1             	test   %rsi,%rcx
  100d6c:	8d 4b ff             	lea    -0x1(%rbx),%ecx
  100d6f:	0f 85 9b 02 00 00    	jne    101010 <execute_stack_op+0x353>
  100d75:	41 83 f9 28          	cmp    $0x28,%r9d
  100d79:	0f 84 d0 03 00 00    	je     10114f <execute_stack_op+0x492>
  100d7f:	e9 ea 02 00 00       	jmp    10106e <execute_stack_op+0x3b1>
  100d84:	41 80 f9 2f          	cmp    $0x2f,%r9b
  100d88:	0f 84 b5 03 00 00    	je     101143 <execute_stack_op+0x486>
  100d8e:	0f 86 d5 02 00 00    	jbe    101069 <execute_stack_op+0x3ac>
  100d94:	41 83 e9 30          	sub    $0x30,%r9d
  100d98:	e9 fb 03 00 00       	jmp    101198 <execute_stack_op+0x4db>
  100d9d:	41 80 f9 92          	cmp    $0x92,%r9b
  100da1:	0f 84 20 01 00 00    	je     100ec7 <execute_stack_op+0x20a>
  100da7:	77 31                	ja     100dda <execute_stack_op+0x11d>
  100da9:	41 80 f9 8f          	cmp    $0x8f,%r9b
  100dad:	0f 86 fc 00 00 00    	jbe    100eaf <execute_stack_op+0x1f2>
  100db3:	41 80 f9 90          	cmp    $0x90,%r9b
  100db7:	0f 85 b1 02 00 00    	jne    10106e <execute_stack_op+0x3b1>
  100dbd:	48 8d b5 b0 fd ff ff 	lea    -0x250(%rbp),%rsi
  100dc4:	4c 89 ff             	mov    %r15,%rdi
  100dc7:	e8 44 f4 ff ff       	call   100210 <read_uleb128>
  100dcc:	8b b5 b0 fd ff ff    	mov    -0x250(%rbp),%esi
  100dd2:	49 89 c7             	mov    %rax,%r15
  100dd5:	e9 c5 00 00 00       	jmp    100e9f <execute_stack_op+0x1e2>
  100dda:	41 80 f9 96          	cmp    $0x96,%r9b
  100dde:	0f 84 ca 03 00 00    	je     1011ae <execute_stack_op+0x4f1>
  100de4:	41 80 f9 f1          	cmp    $0xf1,%r9b
  100de8:	4c 8d 78 02          	lea    0x2(%rax),%r15
  100dec:	74 0f                	je     100dfd <execute_stack_op+0x140>
  100dee:	41 80 f9 94          	cmp    $0x94,%r9b
  100df2:	0f 84 fe 01 00 00    	je     100ff6 <execute_stack_op+0x339>
  100df8:	e9 71 02 00 00       	jmp    10106e <execute_stack_op+0x3b1>
  100dfd:	0f b6 70 01          	movzbl 0x1(%rax),%esi
  100e01:	48 8d 8d c8 fd ff ff 	lea    -0x238(%rbp),%rcx
  100e08:	4c 89 fa             	mov    %r15,%rdx
  100e0b:	4c 89 e7             	mov    %r12,%rdi
  100e0e:	e8 b8 f4 ff ff       	call   1002cb <read_encoded_value>
  100e13:	eb 77                	jmp    100e8c <execute_stack_op+0x1cf>
  100e15:	44 0f b6 48 01       	movzbl 0x1(%rax),%r9d
  100e1a:	eb 05                	jmp    100e21 <execute_stack_op+0x164>
  100e1c:	4c 0f be 48 01       	movsbq 0x1(%rax),%r9
  100e21:	4c 8d 78 02          	lea    0x2(%rax),%r15
  100e25:	e9 6e 03 00 00       	jmp    101198 <execute_stack_op+0x4db>
  100e2a:	44 0f b7 48 01       	movzwl 0x1(%rax),%r9d
  100e2f:	eb 05                	jmp    100e36 <execute_stack_op+0x179>
  100e31:	4c 0f bf 48 01       	movswq 0x1(%rax),%r9
  100e36:	4c 8d 78 03          	lea    0x3(%rax),%r15
  100e3a:	e9 59 03 00 00       	jmp    101198 <execute_stack_op+0x4db>
  100e3f:	44 8b 48 01          	mov    0x1(%rax),%r9d
  100e43:	eb 04                	jmp    100e49 <execute_stack_op+0x18c>
  100e45:	4c 63 48 01          	movslq 0x1(%rax),%r9
  100e49:	4c 8d 78 05          	lea    0x5(%rax),%r15
  100e4d:	e9 46 03 00 00       	jmp    101198 <execute_stack_op+0x4db>
  100e52:	4c 8b 48 01          	mov    0x1(%rax),%r9
  100e56:	4c 8d 78 09          	lea    0x9(%rax),%r15
  100e5a:	e9 39 03 00 00       	jmp    101198 <execute_stack_op+0x4db>
  100e5f:	4c 89 ff             	mov    %r15,%rdi
  100e62:	48 8d b5 b8 fd ff ff 	lea    -0x248(%rbp),%rsi
  100e69:	e8 a2 f3 ff ff       	call   100210 <read_uleb128>
  100e6e:	4c 8b 8d b8 fd ff ff 	mov    -0x248(%rbp),%r9
  100e75:	49 89 c7             	mov    %rax,%r15
  100e78:	e9 1b 03 00 00       	jmp    101198 <execute_stack_op+0x4db>
  100e7d:	48 8d b5 c8 fd ff ff 	lea    -0x238(%rbp),%rsi
  100e84:	4c 89 ff             	mov    %r15,%rdi
  100e87:	e8 a9 f3 ff ff       	call   100235 <read_sleb128>
  100e8c:	4c 8b 8d c8 fd ff ff 	mov    -0x238(%rbp),%r9
  100e93:	49 89 c7             	mov    %rax,%r15
  100e96:	e9 fd 02 00 00       	jmp    101198 <execute_stack_op+0x4db>
  100e9b:	41 8d 71 b0          	lea    -0x50(%r9),%esi
  100e9f:	4c 89 e7             	mov    %r12,%rdi
  100ea2:	e8 11 fd ff ff       	call   100bb8 <_Unwind_GetGR>
  100ea7:	49 89 c1             	mov    %rax,%r9
  100eaa:	e9 e9 02 00 00       	jmp    101198 <execute_stack_op+0x4db>
  100eaf:	48 8d b5 c0 fd ff ff 	lea    -0x240(%rbp),%rsi
  100eb6:	4c 89 ff             	mov    %r15,%rdi
  100eb9:	e8 77 f3 ff ff       	call   100235 <read_sleb128>
  100ebe:	41 8d 71 90          	lea    -0x70(%r9),%esi
  100ec2:	49 89 c7             	mov    %rax,%r15
  100ec5:	eb 27                	jmp    100eee <execute_stack_op+0x231>
  100ec7:	4c 89 ff             	mov    %r15,%rdi
  100eca:	48 8d b5 b0 fd ff ff 	lea    -0x250(%rbp),%rsi
  100ed1:	e8 3a f3 ff ff       	call   100210 <read_uleb128>
  100ed6:	48 8d b5 c0 fd ff ff 	lea    -0x240(%rbp),%rsi
  100edd:	48 89 c7             	mov    %rax,%rdi
  100ee0:	e8 50 f3 ff ff       	call   100235 <read_sleb128>
  100ee5:	8b b5 b0 fd ff ff    	mov    -0x250(%rbp),%esi
  100eeb:	49 89 c7             	mov    %rax,%r15
  100eee:	4c 89 e7             	mov    %r12,%rdi
  100ef1:	e8 c2 fc ff ff       	call   100bb8 <_Unwind_GetGR>
  100ef6:	48 03 85 c0 fd ff ff 	add    -0x240(%rbp),%rax
  100efd:	eb a8                	jmp    100ea7 <execute_stack_op+0x1ea>
  100eff:	85 db                	test   %ebx,%ebx
  100f01:	0f 84 67 01 00 00    	je     10106e <execute_stack_op+0x3b1>
  100f07:	8d 43 ff             	lea    -0x1(%rbx),%eax
  100f0a:	eb 36                	jmp    100f42 <execute_stack_op+0x285>
  100f0c:	85 db                	test   %ebx,%ebx
  100f0e:	0f 84 5a 01 00 00    	je     10106e <execute_stack_op+0x3b1>
  100f14:	ff cb                	dec    %ebx
  100f16:	e9 93 02 00 00       	jmp    1011ae <execute_stack_op+0x4f1>
  100f1b:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  100f1f:	4c 8d 78 02          	lea    0x2(%rax),%r15
  100f23:	8d 43 ff             	lea    -0x1(%rbx),%eax
  100f26:	48 98                	cltq   
  100f28:	48 39 c2             	cmp    %rax,%rdx
  100f2b:	0f 8d 3d 01 00 00    	jge    10106e <execute_stack_op+0x3b1>
  100f31:	48 29 d0             	sub    %rdx,%rax
  100f34:	eb 0e                	jmp    100f44 <execute_stack_op+0x287>
  100f36:	83 fb 01             	cmp    $0x1,%ebx
  100f39:	0f 8e 2f 01 00 00    	jle    10106e <execute_stack_op+0x3b1>
  100f3f:	8d 43 fe             	lea    -0x2(%rbx),%eax
  100f42:	48 98                	cltq   
  100f44:	4c 8b 8c c5 d0 fd ff 	mov    -0x230(%rbp,%rax,8),%r9
  100f4b:	ff 
  100f4c:	e9 47 02 00 00       	jmp    101198 <execute_stack_op+0x4db>
  100f51:	83 fb 01             	cmp    $0x1,%ebx
  100f54:	0f 8e 14 01 00 00    	jle    10106e <execute_stack_op+0x3b1>
  100f5a:	8d 53 ff             	lea    -0x1(%rbx),%edx
  100f5d:	8d 43 fe             	lea    -0x2(%rbx),%eax
  100f60:	48 63 d2             	movslq %edx,%rdx
  100f63:	48 98                	cltq   
  100f65:	48 8b 8c d5 d0 fd ff 	mov    -0x230(%rbp,%rdx,8),%rcx
  100f6c:	ff 
  100f6d:	48 8b b4 c5 d0 fd ff 	mov    -0x230(%rbp,%rax,8),%rsi
  100f74:	ff 
  100f75:	48 89 b4 d5 d0 fd ff 	mov    %rsi,-0x230(%rbp,%rdx,8)
  100f7c:	ff 
  100f7d:	48 89 8c c5 d0 fd ff 	mov    %rcx,-0x230(%rbp,%rax,8)
  100f84:	ff 
  100f85:	e9 24 02 00 00       	jmp    1011ae <execute_stack_op+0x4f1>
  100f8a:	83 fb 02             	cmp    $0x2,%ebx
  100f8d:	0f 8e db 00 00 00    	jle    10106e <execute_stack_op+0x3b1>
  100f93:	8d 4b ff             	lea    -0x1(%rbx),%ecx
  100f96:	8d 53 fe             	lea    -0x2(%rbx),%edx
  100f99:	8d 43 fd             	lea    -0x3(%rbx),%eax
  100f9c:	48 63 c9             	movslq %ecx,%rcx
  100f9f:	48 63 d2             	movslq %edx,%rdx
  100fa2:	48 98                	cltq   
  100fa4:	48 8b b4 cd d0 fd ff 	mov    -0x230(%rbp,%rcx,8),%rsi
  100fab:	ff 
  100fac:	4c 8b 84 d5 d0 fd ff 	mov    -0x230(%rbp,%rdx,8),%r8
  100fb3:	ff 
  100fb4:	48 8b bc c5 d0 fd ff 	mov    -0x230(%rbp,%rax,8),%rdi
  100fbb:	ff 
  100fbc:	4c 89 84 cd d0 fd ff 	mov    %r8,-0x230(%rbp,%rcx,8)
  100fc3:	ff 
  100fc4:	48 89 bc d5 d0 fd ff 	mov    %rdi,-0x230(%rbp,%rdx,8)
  100fcb:	ff 
  100fcc:	48 89 b4 c5 d0 fd ff 	mov    %rsi,-0x230(%rbp,%rax,8)
  100fd3:	ff 
  100fd4:	e9 d5 01 00 00       	jmp    1011ae <execute_stack_op+0x4f1>
  100fd9:	85 db                	test   %ebx,%ebx
  100fdb:	0f 84 8d 00 00 00    	je     10106e <execute_stack_op+0x3b1>
  100fe1:	ff cb                	dec    %ebx
  100fe3:	48 63 c3             	movslq %ebx,%rax
  100fe6:	48 8b 84 c5 d0 fd ff 	mov    -0x230(%rbp,%rax,8),%rax
  100fed:	ff 
  100fee:	4c 8b 08             	mov    (%rax),%r9
  100ff1:	e9 a2 01 00 00       	jmp    101198 <execute_stack_op+0x4db>
  100ff6:	85 db                	test   %ebx,%ebx
  100ff8:	74 74                	je     10106e <execute_stack_op+0x3b1>
  100ffa:	ff cb                	dec    %ebx
  100ffc:	8a 40 01             	mov    0x1(%rax),%al
  100fff:	48 63 d3             	movslq %ebx,%rdx
  101002:	48 8b 94 d5 d0 fd ff 	mov    -0x230(%rbp,%rdx,8),%rdx
  101009:	ff 
  10100a:	3c 04                	cmp    $0x4,%al
  10100c:	75 2b                	jne    101039 <execute_stack_op+0x37c>
  10100e:	eb 51                	jmp    101061 <execute_stack_op+0x3a4>
  101010:	85 db                	test   %ebx,%ebx
  101012:	74 5a                	je     10106e <execute_stack_op+0x3b1>
  101014:	48 63 c1             	movslq %ecx,%rax
  101017:	4c 8b 8c c5 d0 fd ff 	mov    -0x230(%rbp,%rax,8),%r9
  10101e:	ff 
  10101f:	48 89 c3             	mov    %rax,%rbx
  101022:	80 fa 20             	cmp    $0x20,%dl
  101025:	74 63                	je     10108a <execute_stack_op+0x3cd>
  101027:	0f 87 49 01 00 00    	ja     101176 <execute_stack_op+0x4b9>
  10102d:	80 fa 19             	cmp    $0x19,%dl
  101030:	74 41                	je     101073 <execute_stack_op+0x3b6>
  101032:	80 fa 1f             	cmp    $0x1f,%dl
  101035:	74 4b                	je     101082 <execute_stack_op+0x3c5>
  101037:	eb 35                	jmp    10106e <execute_stack_op+0x3b1>
  101039:	77 11                	ja     10104c <execute_stack_op+0x38f>
  10103b:	3c 01                	cmp    $0x1,%al
  10103d:	74 19                	je     101058 <execute_stack_op+0x39b>
  10103f:	3c 02                	cmp    $0x2,%al
  101041:	75 2b                	jne    10106e <execute_stack_op+0x3b1>
  101043:	44 0f b7 0a          	movzwl (%rdx),%r9d
  101047:	e9 4c 01 00 00       	jmp    101198 <execute_stack_op+0x4db>
  10104c:	3c 08                	cmp    $0x8,%al
  10104e:	75 1e                	jne    10106e <execute_stack_op+0x3b1>
  101050:	4c 8b 0a             	mov    (%rdx),%r9
  101053:	e9 40 01 00 00       	jmp    101198 <execute_stack_op+0x4db>
  101058:	44 0f b6 0a          	movzbl (%rdx),%r9d
  10105c:	e9 37 01 00 00       	jmp    101198 <execute_stack_op+0x4db>
  101061:	44 8b 0a             	mov    (%rdx),%r9d
  101064:	e9 2f 01 00 00       	jmp    101198 <execute_stack_op+0x4db>
  101069:	83 fb 01             	cmp    $0x1,%ebx
  10106c:	7f 24                	jg     101092 <execute_stack_op+0x3d5>
  10106e:	e8 51 0d 01 00       	call   111dc4 <abort>
  101073:	4c 89 c8             	mov    %r9,%rax
  101076:	48 f7 d8             	neg    %rax
  101079:	4c 0f 49 c8          	cmovns %rax,%r9
  10107d:	e9 16 01 00 00       	jmp    101198 <execute_stack_op+0x4db>
  101082:	49 f7 d9             	neg    %r9
  101085:	e9 0e 01 00 00       	jmp    101198 <execute_stack_op+0x4db>
  10108a:	49 f7 d1             	not    %r9
  10108d:	e9 06 01 00 00       	jmp    101198 <execute_stack_op+0x4db>
  101092:	8d 73 fe             	lea    -0x2(%rbx),%esi
  101095:	ff cb                	dec    %ebx
  101097:	83 ea 1a             	sub    $0x1a,%edx
  10109a:	48 63 c6             	movslq %esi,%rax
  10109d:	48 63 db             	movslq %ebx,%rbx
  1010a0:	4c 8b 8c c5 d0 fd ff 	mov    -0x230(%rbp,%rax,8),%r9
  1010a7:	ff 
  1010a8:	48 8b 8c dd d0 fd ff 	mov    -0x230(%rbp,%rbx,8),%rcx
  1010af:	ff 
  1010b0:	80 fa 14             	cmp    $0x14,%dl
  1010b3:	77 b9                	ja     10106e <execute_stack_op+0x3b1>
  1010b5:	0f b6 d2             	movzbl %dl,%edx
  1010b8:	ff 24 d5 90 c5 11 00 	jmp    *0x11c590(,%rdx,8)
  1010bf:	49 21 c9             	and    %rcx,%r9
  1010c2:	eb 7b                	jmp    10113f <execute_stack_op+0x482>
  1010c4:	4c 89 c8             	mov    %r9,%rax
  1010c7:	48 99                	cqto   
  1010c9:	48 f7 f9             	idiv   %rcx
  1010cc:	49 89 c1             	mov    %rax,%r9
  1010cf:	eb 6e                	jmp    10113f <execute_stack_op+0x482>
  1010d1:	49 29 c9             	sub    %rcx,%r9
  1010d4:	eb 69                	jmp    10113f <execute_stack_op+0x482>
  1010d6:	4c 89 c8             	mov    %r9,%rax
  1010d9:	31 d2                	xor    %edx,%edx
  1010db:	48 f7 f1             	div    %rcx
  1010de:	49 89 d1             	mov    %rdx,%r9
  1010e1:	eb 5c                	jmp    10113f <execute_stack_op+0x482>
  1010e3:	4c 0f af c9          	imul   %rcx,%r9
  1010e7:	eb 56                	jmp    10113f <execute_stack_op+0x482>
  1010e9:	49 09 c9             	or     %rcx,%r9
  1010ec:	eb 51                	jmp    10113f <execute_stack_op+0x482>
  1010ee:	49 01 c9             	add    %rcx,%r9
  1010f1:	eb 4c                	jmp    10113f <execute_stack_op+0x482>
  1010f3:	49 d3 e1             	shl    %cl,%r9
  1010f6:	eb 47                	jmp    10113f <execute_stack_op+0x482>
  1010f8:	49 d3 e9             	shr    %cl,%r9
  1010fb:	eb 42                	jmp    10113f <execute_stack_op+0x482>
  1010fd:	49 d3 f9             	sar    %cl,%r9
  101100:	eb 3d                	jmp    10113f <execute_stack_op+0x482>
  101102:	49 31 c9             	xor    %rcx,%r9
  101105:	eb 38                	jmp    10113f <execute_stack_op+0x482>
  101107:	49 39 c9             	cmp    %rcx,%r9
  10110a:	41 0f 9e c1          	setle  %r9b
  10110e:	eb 2b                	jmp    10113b <execute_stack_op+0x47e>
  101110:	49 39 c9             	cmp    %rcx,%r9
  101113:	41 0f 9d c1          	setge  %r9b
  101117:	eb 22                	jmp    10113b <execute_stack_op+0x47e>
  101119:	49 39 c9             	cmp    %rcx,%r9
  10111c:	41 0f 94 c1          	sete   %r9b
  101120:	eb 19                	jmp    10113b <execute_stack_op+0x47e>
  101122:	49 39 c9             	cmp    %rcx,%r9
  101125:	41 0f 9c c1          	setl   %r9b
  101129:	eb 10                	jmp    10113b <execute_stack_op+0x47e>
  10112b:	49 39 c9             	cmp    %rcx,%r9
  10112e:	41 0f 9f c1          	setg   %r9b
  101132:	eb 07                	jmp    10113b <execute_stack_op+0x47e>
  101134:	49 39 c9             	cmp    %rcx,%r9
  101137:	41 0f 95 c1          	setne  %r9b
  10113b:	45 0f b6 c9          	movzbl %r9b,%r9d
  10113f:	89 f3                	mov    %esi,%ebx
  101141:	eb 55                	jmp    101198 <execute_stack_op+0x4db>
  101143:	48 0f bf 50 01       	movswq 0x1(%rax),%rdx
  101148:	4c 8d 7c 10 03       	lea    0x3(%rax,%rdx,1),%r15
  10114d:	eb 5f                	jmp    1011ae <execute_stack_op+0x4f1>
  10114f:	85 db                	test   %ebx,%ebx
  101151:	0f 84 17 ff ff ff    	je     10106e <execute_stack_op+0x3b1>
  101157:	48 63 d1             	movslq %ecx,%rdx
  10115a:	4c 8d 78 03          	lea    0x3(%rax),%r15
  10115e:	48 83 bc d5 d0 fd ff 	cmpq   $0x0,-0x230(%rbp,%rdx,8)
  101165:	ff 00 
  101167:	48 89 d3             	mov    %rdx,%rbx
  10116a:	74 42                	je     1011ae <execute_stack_op+0x4f1>
  10116c:	48 0f bf 40 01       	movswq 0x1(%rax),%rax
  101171:	49 01 c7             	add    %rax,%r15
  101174:	eb 38                	jmp    1011ae <execute_stack_op+0x4f1>
  101176:	80 fa 23             	cmp    $0x23,%dl
  101179:	0f 85 ef fe ff ff    	jne    10106e <execute_stack_op+0x3b1>
  10117f:	4c 89 ff             	mov    %r15,%rdi
  101182:	48 8d b5 b8 fd ff ff 	lea    -0x248(%rbp),%rsi
  101189:	e8 82 f0 ff ff       	call   100210 <read_uleb128>
  10118e:	4c 03 8d b8 fd ff ff 	add    -0x248(%rbp),%r9
  101195:	49 89 c7             	mov    %rax,%r15
  101198:	83 fb 3f             	cmp    $0x3f,%ebx
  10119b:	0f 8f cd fe ff ff    	jg     10106e <execute_stack_op+0x3b1>
  1011a1:	48 63 c3             	movslq %ebx,%rax
  1011a4:	ff c3                	inc    %ebx
  1011a6:	4c 89 8c c5 d0 fd ff 	mov    %r9,-0x230(%rbp,%rax,8)
  1011ad:	ff 
  1011ae:	4c 89 f8             	mov    %r15,%rax
  1011b1:	e9 3a fb ff ff       	jmp    100cf0 <execute_stack_op+0x33>
  1011b6:	85 db                	test   %ebx,%ebx
  1011b8:	0f 84 b0 fe ff ff    	je     10106e <execute_stack_op+0x3b1>
  1011be:	ff cb                	dec    %ebx
  1011c0:	48 63 db             	movslq %ebx,%rbx
  1011c3:	48 8b 84 dd d0 fd ff 	mov    -0x230(%rbp,%rbx,8),%rax
  1011ca:	ff 
  1011cb:	48 81 c4 28 02 00 00 	add    $0x228,%rsp
  1011d2:	5b                   	pop    %rbx
  1011d3:	41 5c                	pop    %r12
  1011d5:	41 5d                	pop    %r13
  1011d7:	41 5e                	pop    %r14
  1011d9:	41 5f                	pop    %r15
  1011db:	5d                   	pop    %rbp
  1011dc:	c3                   	ret    

00000000001011dd <uw_update_context_1>:
  1011dd:	55                   	push   %rbp
  1011de:	b9 3c 00 00 00       	mov    $0x3c,%ecx
  1011e3:	48 89 e5             	mov    %rsp,%rbp
  1011e6:	41 57                	push   %r15
  1011e8:	41 56                	push   %r14
  1011ea:	41 55                	push   %r13
  1011ec:	49 89 f5             	mov    %rsi,%r13
  1011ef:	41 54                	push   %r12
  1011f1:	53                   	push   %rbx
  1011f2:	48 89 fb             	mov    %rdi,%rbx
  1011f5:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  1011fc:	48 89 de             	mov    %rbx,%rsi
  1011ff:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  101206:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  101208:	be 07 00 00 00       	mov    $0x7,%esi
  10120d:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  101214:	e8 57 f0 ff ff       	call   100270 <_Unwind_GetGRPtr>
  101219:	48 85 c0             	test   %rax,%rax
  10121c:	75 13                	jne    101231 <uw_update_context_1+0x54>
  10121e:	48 8b b3 90 00 00 00 	mov    0x90(%rbx),%rsi
  101225:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
  10122c:	e8 68 f9 ff ff       	call   100b99 <_Unwind_SetSpColumn>
  101231:	31 d2                	xor    %edx,%edx
  101233:	be 07 00 00 00       	mov    $0x7,%esi
  101238:	48 89 df             	mov    %rbx,%rdi
  10123b:	e8 50 f0 ff ff       	call   100290 <_Unwind_SetGRPtr>
  101240:	41 8b 85 40 01 00 00 	mov    0x140(%r13),%eax
  101247:	83 f8 01             	cmp    $0x1,%eax
  10124a:	74 35                	je     101281 <uw_update_context_1+0xa4>
  10124c:	83 f8 02             	cmp    $0x2,%eax
  10124f:	75 5c                	jne    1012ad <uw_update_context_1+0xd0>
  101251:	49 8b bd 38 01 00 00 	mov    0x138(%r13),%rdi
  101258:	48 8d b5 d8 fe ff ff 	lea    -0x128(%rbp),%rsi
  10125f:	e8 ac ef ff ff       	call   100210 <read_uleb128>
  101264:	48 8b b5 d8 fe ff ff 	mov    -0x128(%rbp),%rsi
  10126b:	31 c9                	xor    %ecx,%ecx
  10126d:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
  101274:	48 89 c7             	mov    %rax,%rdi
  101277:	48 01 c6             	add    %rax,%rsi
  10127a:	e8 3e fa ff ff       	call   100cbd <execute_stack_op>
  10127f:	eb 1a                	jmp    10129b <uw_update_context_1+0xbe>
  101281:	41 8b b5 30 01 00 00 	mov    0x130(%r13),%esi
  101288:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  10128f:	e8 24 f9 ff ff       	call   100bb8 <_Unwind_GetGR>
  101294:	49 03 85 28 01 00 00 	add    0x128(%r13),%rax
  10129b:	48 89 83 90 00 00 00 	mov    %rax,0x90(%rbx)
  1012a2:	49 89 c4             	mov    %rax,%r12
  1012a5:	4d 89 ef             	mov    %r13,%r15
  1012a8:	45 31 f6             	xor    %r14d,%r14d
  1012ab:	eb 2c                	jmp    1012d9 <uw_update_context_1+0xfc>
  1012ad:	e8 12 0b 01 00       	call   111dc4 <abort>
  1012b2:	e8 b9 ef ff ff       	call   100270 <_Unwind_GetGRPtr>
  1012b7:	8b b5 cc fe ff ff    	mov    -0x134(%rbp),%esi
  1012bd:	48 89 c2             	mov    %rax,%rdx
  1012c0:	48 89 df             	mov    %rbx,%rdi
  1012c3:	e8 c8 ef ff ff       	call   100290 <_Unwind_SetGRPtr>
  1012c8:	49 ff c6             	inc    %r14
  1012cb:	49 83 c7 10          	add    $0x10,%r15
  1012cf:	49 83 fe 12          	cmp    $0x12,%r14
  1012d3:	0f 84 c2 00 00 00    	je     10139b <uw_update_context_1+0x1be>
  1012d9:	41 8b 47 08          	mov    0x8(%r15),%eax
  1012dd:	ff c8                	dec    %eax
  1012df:	83 f8 04             	cmp    $0x4,%eax
  1012e2:	77 e4                	ja     1012c8 <uw_update_context_1+0xeb>
  1012e4:	ff 24 c5 38 c6 11 00 	jmp    *0x11c638(,%rax,8)
  1012eb:	49 8b 17             	mov    (%r15),%rdx
  1012ee:	4c 01 e2             	add    %r12,%rdx
  1012f1:	eb 5a                	jmp    10134d <uw_update_context_1+0x170>
  1012f3:	49 8b 07             	mov    (%r15),%rax
  1012f6:	44 89 b5 cc fe ff ff 	mov    %r14d,-0x134(%rbp)
  1012fd:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  101304:	89 c6                	mov    %eax,%esi
  101306:	48 98                	cltq   
  101308:	80 7c 05 b8 00       	cmpb   $0x0,-0x48(%rbp,%rax,1)
  10130d:	74 a3                	je     1012b2 <uw_update_context_1+0xd5>
  10130f:	e8 a4 f8 ff ff       	call   100bb8 <_Unwind_GetGR>
  101314:	8b b5 cc fe ff ff    	mov    -0x134(%rbp),%esi
  10131a:	48 89 c2             	mov    %rax,%rdx
  10131d:	eb 6f                	jmp    10138e <uw_update_context_1+0x1b1>
  10131f:	49 8b 3f             	mov    (%r15),%rdi
  101322:	48 8d b5 d8 fe ff ff 	lea    -0x128(%rbp),%rsi
  101329:	e8 e2 ee ff ff       	call   100210 <read_uleb128>
  10132e:	48 8b b5 d8 fe ff ff 	mov    -0x128(%rbp),%rsi
  101335:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
  10133c:	4c 89 e1             	mov    %r12,%rcx
  10133f:	48 89 c7             	mov    %rax,%rdi
  101342:	48 01 c6             	add    %rax,%rsi
  101345:	e8 73 f9 ff ff       	call   100cbd <execute_stack_op>
  10134a:	48 89 c2             	mov    %rax,%rdx
  10134d:	44 89 f6             	mov    %r14d,%esi
  101350:	e9 6b ff ff ff       	jmp    1012c0 <uw_update_context_1+0xe3>
  101355:	49 8b 17             	mov    (%r15),%rdx
  101358:	4c 01 e2             	add    %r12,%rdx
  10135b:	eb 2e                	jmp    10138b <uw_update_context_1+0x1ae>
  10135d:	49 8b 3f             	mov    (%r15),%rdi
  101360:	48 8d b5 d8 fe ff ff 	lea    -0x128(%rbp),%rsi
  101367:	e8 a4 ee ff ff       	call   100210 <read_uleb128>
  10136c:	48 8b b5 d8 fe ff ff 	mov    -0x128(%rbp),%rsi
  101373:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
  10137a:	4c 89 e1             	mov    %r12,%rcx
  10137d:	48 89 c7             	mov    %rax,%rdi
  101380:	48 01 c6             	add    %rax,%rsi
  101383:	e8 35 f9 ff ff       	call   100cbd <execute_stack_op>
  101388:	48 89 c2             	mov    %rax,%rdx
  10138b:	44 89 f6             	mov    %r14d,%esi
  10138e:	48 89 df             	mov    %rbx,%rdi
  101391:	e8 13 ef ff ff       	call   1002a9 <_Unwind_SetGRValue>
  101396:	e9 2d ff ff ff       	jmp    1012c8 <uw_update_context_1+0xeb>
  10139b:	48 8b 93 c0 00 00 00 	mov    0xc0(%rbx),%rdx
  1013a2:	48 89 d0             	mov    %rdx,%rax
  1013a5:	48 0f ba f0 3f       	btr    $0x3f,%rax
  1013aa:	41 80 bd 73 01 00 00 	cmpb   $0x0,0x173(%r13)
  1013b1:	00 
  1013b2:	74 08                	je     1013bc <uw_update_context_1+0x1df>
  1013b4:	48 89 d0             	mov    %rdx,%rax
  1013b7:	48 0f ba e8 3f       	bts    $0x3f,%rax
  1013bc:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
  1013c3:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  1013ca:	5b                   	pop    %rbx
  1013cb:	41 5c                	pop    %r12
  1013cd:	41 5d                	pop    %r13
  1013cf:	41 5e                	pop    %r14
  1013d1:	41 5f                	pop    %r15
  1013d3:	5d                   	pop    %rbp
  1013d4:	c3                   	ret    

00000000001013d5 <uw_init_context_1>:
  1013d5:	55                   	push   %rbp
  1013d6:	31 c0                	xor    %eax,%eax
  1013d8:	b9 3c 00 00 00       	mov    $0x3c,%ecx
  1013dd:	48 89 e5             	mov    %rsp,%rbp
  1013e0:	41 55                	push   %r13
  1013e2:	49 89 f5             	mov    %rsi,%r13
  1013e5:	41 54                	push   %r12
  1013e7:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
  1013ee:	49 89 d4             	mov    %rdx,%r12
  1013f1:	53                   	push   %rbx
  1013f2:	48 89 fb             	mov    %rdi,%rbx
  1013f5:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
  1013fc:	f3 ab                	rep stos %eax,%es:(%rdi)
  1013fe:	48 89 df             	mov    %rbx,%rdi
  101401:	48 8b 45 08          	mov    0x8(%rbp),%rax
  101405:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
  10140c:	b8 01 00 00 00       	mov    $0x1,%eax
  101411:	48 c1 e0 3e          	shl    $0x3e,%rax
  101415:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
  10141c:	e8 b9 f4 ff ff       	call   1008da <uw_frame_state_for>
  101421:	85 c0                	test   %eax,%eax
  101423:	74 05                	je     10142a <uw_init_context_1+0x55>
  101425:	e8 9a 09 01 00       	call   111dc4 <abort>
  10142a:	80 3d cf 0b 02 00 00 	cmpb   $0x0,0x20bcf(%rip)        # 122000 <dwarf_reg_size_table>
  101431:	75 77                	jne    1014aa <uw_init_context_1+0xd5>
  101433:	c6 05 c6 0b 02 00 08 	movb   $0x8,0x20bc6(%rip)        # 122000 <dwarf_reg_size_table>
  10143a:	c6 05 c0 0b 02 00 08 	movb   $0x8,0x20bc0(%rip)        # 122001 <dwarf_reg_size_table+0x1>
  101441:	c6 05 ba 0b 02 00 08 	movb   $0x8,0x20bba(%rip)        # 122002 <dwarf_reg_size_table+0x2>
  101448:	c6 05 b4 0b 02 00 08 	movb   $0x8,0x20bb4(%rip)        # 122003 <dwarf_reg_size_table+0x3>
  10144f:	c6 05 ae 0b 02 00 08 	movb   $0x8,0x20bae(%rip)        # 122004 <dwarf_reg_size_table+0x4>
  101456:	c6 05 a8 0b 02 00 08 	movb   $0x8,0x20ba8(%rip)        # 122005 <dwarf_reg_size_table+0x5>
  10145d:	c6 05 a2 0b 02 00 08 	movb   $0x8,0x20ba2(%rip)        # 122006 <dwarf_reg_size_table+0x6>
  101464:	c6 05 9c 0b 02 00 08 	movb   $0x8,0x20b9c(%rip)        # 122007 <dwarf_reg_size_table+0x7>
  10146b:	c6 05 96 0b 02 00 08 	movb   $0x8,0x20b96(%rip)        # 122008 <dwarf_reg_size_table+0x8>
  101472:	c6 05 90 0b 02 00 08 	movb   $0x8,0x20b90(%rip)        # 122009 <dwarf_reg_size_table+0x9>
  101479:	c6 05 8a 0b 02 00 08 	movb   $0x8,0x20b8a(%rip)        # 12200a <dwarf_reg_size_table+0xa>
  101480:	c6 05 84 0b 02 00 08 	movb   $0x8,0x20b84(%rip)        # 12200b <dwarf_reg_size_table+0xb>
  101487:	c6 05 7e 0b 02 00 08 	movb   $0x8,0x20b7e(%rip)        # 12200c <dwarf_reg_size_table+0xc>
  10148e:	c6 05 78 0b 02 00 08 	movb   $0x8,0x20b78(%rip)        # 12200d <dwarf_reg_size_table+0xd>
  101495:	c6 05 72 0b 02 00 08 	movb   $0x8,0x20b72(%rip)        # 12200e <dwarf_reg_size_table+0xe>
  10149c:	c6 05 6c 0b 02 00 08 	movb   $0x8,0x20b6c(%rip)        # 12200f <dwarf_reg_size_table+0xf>
  1014a3:	c6 05 66 0b 02 00 08 	movb   $0x8,0x20b66(%rip)        # 122010 <dwarf_reg_size_table+0x10>
  1014aa:	48 8d 95 58 fe ff ff 	lea    -0x1a8(%rbp),%rdx
  1014b1:	4c 89 ee             	mov    %r13,%rsi
  1014b4:	48 89 df             	mov    %rbx,%rdi
  1014b7:	e8 dd f6 ff ff       	call   100b99 <_Unwind_SetSpColumn>
  1014bc:	31 c0                	xor    %eax,%eax
  1014be:	48 89 df             	mov    %rbx,%rdi
  1014c1:	48 8d b5 60 fe ff ff 	lea    -0x1a0(%rbp),%rsi
  1014c8:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%rbp)
  1014cf:	48 c7 45 90 07 00 00 	movq   $0x7,-0x70(%rbp)
  1014d6:	00 
  1014d7:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  1014db:	e8 fd fc ff ff       	call   1011dd <uw_update_context_1>
  1014e0:	4c 89 a3 98 00 00 00 	mov    %r12,0x98(%rbx)
  1014e7:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
  1014ee:	5b                   	pop    %rbx
  1014ef:	41 5c                	pop    %r12
  1014f1:	41 5d                	pop    %r13
  1014f3:	5d                   	pop    %rbp
  1014f4:	c3                   	ret    

00000000001014f5 <uw_update_context>:
  1014f5:	55                   	push   %rbp
  1014f6:	48 89 e5             	mov    %rsp,%rbp
  1014f9:	41 54                	push   %r12
  1014fb:	49 89 f4             	mov    %rsi,%r12
  1014fe:	53                   	push   %rbx
  1014ff:	48 89 fb             	mov    %rdi,%rbx
  101502:	e8 d6 fc ff ff       	call   1011dd <uw_update_context_1>
  101507:	49 8b b4 24 68 01 00 	mov    0x168(%r12),%rsi
  10150e:	00 
  10150f:	31 c0                	xor    %eax,%eax
  101511:	48 89 f2             	mov    %rsi,%rdx
  101514:	48 c1 e2 04          	shl    $0x4,%rdx
  101518:	41 83 7c 14 08 06    	cmpl   $0x6,0x8(%r12,%rdx,1)
  10151e:	74 08                	je     101528 <uw_update_context+0x33>
  101520:	48 89 df             	mov    %rbx,%rdi
  101523:	e8 90 f6 ff ff       	call   100bb8 <_Unwind_GetGR>
  101528:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
  10152f:	5b                   	pop    %rbx
  101530:	41 5c                	pop    %r12
  101532:	5d                   	pop    %rbp
  101533:	c3                   	ret    

0000000000101534 <_Unwind_RaiseException_Phase2>:
  101534:	55                   	push   %rbp
  101535:	48 89 e5             	mov    %rsp,%rbp
  101538:	41 57                	push   %r15
  10153a:	41 56                	push   %r14
  10153c:	41 be 01 00 00 00    	mov    $0x1,%r14d
  101542:	41 55                	push   %r13
  101544:	49 89 d5             	mov    %rdx,%r13
  101547:	41 54                	push   %r12
  101549:	49 89 fc             	mov    %rdi,%r12
  10154c:	53                   	push   %rbx
  10154d:	48 89 f3             	mov    %rsi,%rbx
  101550:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
  101557:	48 8d b5 50 fe ff ff 	lea    -0x1b0(%rbp),%rsi
  10155e:	48 89 df             	mov    %rbx,%rdi
  101561:	e8 74 f3 ff ff       	call   1008da <uw_frame_state_for>
  101566:	48 8b 8b c0 00 00 00 	mov    0xc0(%rbx),%rcx
  10156d:	48 8b 93 90 00 00 00 	mov    0x90(%rbx),%rdx
  101574:	48 c1 e9 3f          	shr    $0x3f,%rcx
  101578:	48 29 ca             	sub    %rcx,%rdx
  10157b:	49 39 54 24 18       	cmp    %rdx,0x18(%r12)
  101580:	75 12                	jne    101594 <_Unwind_RaiseException_Phase2+0x60>
  101582:	85 c0                	test   %eax,%eax
  101584:	75 63                	jne    1015e9 <_Unwind_RaiseException_Phase2+0xb5>
  101586:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10158a:	48 85 c0             	test   %rax,%rax
  10158d:	75 17                	jne    1015a6 <_Unwind_RaiseException_Phase2+0x72>
  10158f:	e8 30 08 01 00       	call   111dc4 <abort>
  101594:	85 c0                	test   %eax,%eax
  101596:	75 51                	jne    1015e9 <_Unwind_RaiseException_Phase2+0xb5>
  101598:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10159c:	45 31 ff             	xor    %r15d,%r15d
  10159f:	48 85 c0             	test   %rax,%rax
  1015a2:	75 08                	jne    1015ac <_Unwind_RaiseException_Phase2+0x78>
  1015a4:	eb 2c                	jmp    1015d2 <_Unwind_RaiseException_Phase2+0x9e>
  1015a6:	41 bf 04 00 00 00    	mov    $0x4,%r15d
  1015ac:	44 89 fe             	mov    %r15d,%esi
  1015af:	49 8b 14 24          	mov    (%r12),%rdx
  1015b3:	49 89 d8             	mov    %rbx,%r8
  1015b6:	4c 89 e1             	mov    %r12,%rcx
  1015b9:	83 ce 02             	or     $0x2,%esi
  1015bc:	bf 01 00 00 00       	mov    $0x1,%edi
  1015c1:	ff d0                	call   *%rax
  1015c3:	83 f8 07             	cmp    $0x7,%eax
  1015c6:	74 28                	je     1015f0 <_Unwind_RaiseException_Phase2+0xbc>
  1015c8:	83 f8 08             	cmp    $0x8,%eax
  1015cb:	75 1c                	jne    1015e9 <_Unwind_RaiseException_Phase2+0xb5>
  1015cd:	45 85 ff             	test   %r15d,%r15d
  1015d0:	75 bd                	jne    10158f <_Unwind_RaiseException_Phase2+0x5b>
  1015d2:	48 8d b5 50 fe ff ff 	lea    -0x1b0(%rbp),%rsi
  1015d9:	48 89 df             	mov    %rbx,%rdi
  1015dc:	49 ff c6             	inc    %r14
  1015df:	e8 11 ff ff ff       	call   1014f5 <uw_update_context>
  1015e4:	e9 6e ff ff ff       	jmp    101557 <_Unwind_RaiseException_Phase2+0x23>
  1015e9:	b8 02 00 00 00       	mov    $0x2,%eax
  1015ee:	eb 04                	jmp    1015f4 <_Unwind_RaiseException_Phase2+0xc0>
  1015f0:	4d 89 75 00          	mov    %r14,0x0(%r13)
  1015f4:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  1015fb:	5b                   	pop    %rbx
  1015fc:	41 5c                	pop    %r12
  1015fe:	41 5d                	pop    %r13
  101600:	41 5e                	pop    %r14
  101602:	41 5f                	pop    %r15
  101604:	5d                   	pop    %rbp
  101605:	c3                   	ret    

0000000000101606 <_Unwind_ForcedUnwind_Phase2>:
  101606:	55                   	push   %rbp
  101607:	48 89 e5             	mov    %rsp,%rbp
  10160a:	41 57                	push   %r15
  10160c:	41 56                	push   %r14
  10160e:	41 be 01 00 00 00    	mov    $0x1,%r14d
  101614:	41 55                	push   %r13
  101616:	49 89 d5             	mov    %rdx,%r13
  101619:	41 54                	push   %r12
  10161b:	53                   	push   %rbx
  10161c:	48 89 fb             	mov    %rdi,%rbx
  10161f:	48 81 ec 98 01 00 00 	sub    $0x198,%rsp
  101626:	48 8b 47 18          	mov    0x18(%rdi),%rax
  10162a:	4c 8b 7f 10          	mov    0x10(%rdi),%r15
  10162e:	48 89 b5 48 fe ff ff 	mov    %rsi,-0x1b8(%rbp)
  101635:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  10163c:	48 8b bd 48 fe ff ff 	mov    -0x1b8(%rbp),%rdi
  101643:	48 8d b5 50 fe ff ff 	lea    -0x1b0(%rbp),%rsi
  10164a:	e8 8b f2 ff ff       	call   1008da <uw_frame_state_for>
  10164f:	41 89 c4             	mov    %eax,%r12d
  101652:	85 c0                	test   %eax,%eax
  101654:	74 15                	je     10166b <_Unwind_ForcedUnwind_Phase2+0x65>
  101656:	83 f8 05             	cmp    $0x5,%eax
  101659:	74 10                	je     10166b <_Unwind_ForcedUnwind_Phase2+0x65>
  10165b:	83 f8 04             	cmp    $0x4,%eax
  10165e:	0f 85 88 00 00 00    	jne    1016ec <_Unwind_ForcedUnwind_Phase2+0xe6>
  101664:	be 1a 00 00 00       	mov    $0x1a,%esi
  101669:	eb 11                	jmp    10167c <_Unwind_ForcedUnwind_Phase2+0x76>
  10166b:	41 83 fc 05          	cmp    $0x5,%r12d
  10166f:	be 0a 00 00 00       	mov    $0xa,%esi
  101674:	b8 1a 00 00 00       	mov    $0x1a,%eax
  101679:	0f 44 f0             	cmove  %eax,%esi
  10167c:	4c 8b 8d 40 fe ff ff 	mov    -0x1c0(%rbp),%r9
  101683:	48 8b 13             	mov    (%rbx),%rdx
  101686:	48 89 d9             	mov    %rbx,%rcx
  101689:	bf 01 00 00 00       	mov    $0x1,%edi
  10168e:	4c 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%r8
  101695:	41 ff d7             	call   *%r15
  101698:	85 c0                	test   %eax,%eax
  10169a:	75 50                	jne    1016ec <_Unwind_ForcedUnwind_Phase2+0xe6>
  10169c:	41 83 fc 05          	cmp    $0x5,%r12d
  1016a0:	74 52                	je     1016f4 <_Unwind_ForcedUnwind_Phase2+0xee>
  1016a2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  1016a6:	48 85 c0             	test   %rax,%rax
  1016a9:	75 1b                	jne    1016c6 <_Unwind_ForcedUnwind_Phase2+0xc0>
  1016ab:	48 8b bd 48 fe ff ff 	mov    -0x1b8(%rbp),%rdi
  1016b2:	48 8d b5 50 fe ff ff 	lea    -0x1b0(%rbp),%rsi
  1016b9:	49 ff c6             	inc    %r14
  1016bc:	e8 34 fe ff ff       	call   1014f5 <uw_update_context>
  1016c1:	e9 76 ff ff ff       	jmp    10163c <_Unwind_ForcedUnwind_Phase2+0x36>
  1016c6:	48 8b 13             	mov    (%rbx),%rdx
  1016c9:	48 89 d9             	mov    %rbx,%rcx
  1016cc:	be 0a 00 00 00       	mov    $0xa,%esi
  1016d1:	bf 01 00 00 00       	mov    $0x1,%edi
  1016d6:	4c 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%r8
  1016dd:	ff d0                	call   *%rax
  1016df:	41 89 c4             	mov    %eax,%r12d
  1016e2:	83 f8 07             	cmp    $0x7,%eax
  1016e5:	74 0d                	je     1016f4 <_Unwind_ForcedUnwind_Phase2+0xee>
  1016e7:	83 f8 08             	cmp    $0x8,%eax
  1016ea:	74 bf                	je     1016ab <_Unwind_ForcedUnwind_Phase2+0xa5>
  1016ec:	41 bc 02 00 00 00    	mov    $0x2,%r12d
  1016f2:	eb 04                	jmp    1016f8 <_Unwind_ForcedUnwind_Phase2+0xf2>
  1016f4:	4d 89 75 00          	mov    %r14,0x0(%r13)
  1016f8:	48 81 c4 98 01 00 00 	add    $0x198,%rsp
  1016ff:	44 89 e0             	mov    %r12d,%eax
  101702:	5b                   	pop    %rbx
  101703:	41 5c                	pop    %r12
  101705:	41 5d                	pop    %r13
  101707:	41 5e                	pop    %r14
  101709:	41 5f                	pop    %r15
  10170b:	5d                   	pop    %rbp
  10170c:	c3                   	ret    

000000000010170d <_Unwind_GetCFA>:
  10170d:	48 8b 87 90 00 00 00 	mov    0x90(%rdi),%rax
  101714:	c3                   	ret    

0000000000101715 <_Unwind_SetGR>:
  101715:	83 fe 11             	cmp    $0x11,%esi
  101718:	7e 09                	jle    101723 <_Unwind_SetGR+0xe>
  10171a:	55                   	push   %rbp
  10171b:	48 89 e5             	mov    %rsp,%rbp
  10171e:	e8 a1 06 01 00       	call   111dc4 <abort>
  101723:	48 63 f6             	movslq %esi,%rsi
  101726:	8a 8e 00 20 12 00    	mov    0x122000(%rsi),%cl
  10172c:	f6 87 c7 00 00 00 40 	testb  $0x40,0xc7(%rdi)
  101733:	74 0f                	je     101744 <_Unwind_SetGR+0x2f>
  101735:	80 bc 37 d8 00 00 00 	cmpb   $0x0,0xd8(%rdi,%rsi,1)
  10173c:	00 
  10173d:	74 05                	je     101744 <_Unwind_SetGR+0x2f>
  10173f:	48 89 14 f7          	mov    %rdx,(%rdi,%rsi,8)
  101743:	c3                   	ret    
  101744:	48 8b 04 f7          	mov    (%rdi,%rsi,8),%rax
  101748:	80 f9 08             	cmp    $0x8,%cl
  10174b:	75 cd                	jne    10171a <_Unwind_SetGR+0x5>
  10174d:	48 89 10             	mov    %rdx,(%rax)
  101750:	c3                   	ret    

0000000000101751 <_Unwind_GetIP>:
  101751:	48 8b 87 98 00 00 00 	mov    0x98(%rdi),%rax
  101758:	c3                   	ret    

0000000000101759 <_Unwind_GetIPInfo>:
  101759:	48 8b 87 c0 00 00 00 	mov    0xc0(%rdi),%rax
  101760:	48 c1 f8 3f          	sar    $0x3f,%rax
  101764:	83 e0 01             	and    $0x1,%eax
  101767:	89 06                	mov    %eax,(%rsi)
  101769:	48 8b 87 98 00 00 00 	mov    0x98(%rdi),%rax
  101770:	c3                   	ret    

0000000000101771 <_Unwind_SetIP>:
  101771:	48 89 b7 98 00 00 00 	mov    %rsi,0x98(%rdi)
  101778:	c3                   	ret    

0000000000101779 <_Unwind_GetLanguageSpecificData>:
  101779:	48 8b 87 a0 00 00 00 	mov    0xa0(%rdi),%rax
  101780:	c3                   	ret    

0000000000101781 <_Unwind_GetRegionStart>:
  101781:	48 8b 87 b8 00 00 00 	mov    0xb8(%rdi),%rax
  101788:	c3                   	ret    

0000000000101789 <_Unwind_FindEnclosingFunction>:
  101789:	55                   	push   %rbp
  10178a:	48 ff cf             	dec    %rdi
  10178d:	48 89 e5             	mov    %rsp,%rbp
  101790:	48 83 ec 20          	sub    $0x20,%rsp
  101794:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  101798:	e8 6e 13 00 00       	call   102b0b <_Unwind_Find_FDE>
  10179d:	48 85 c0             	test   %rax,%rax
  1017a0:	74 04                	je     1017a6 <_Unwind_FindEnclosingFunction+0x1d>
  1017a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1017a6:	c9                   	leave  
  1017a7:	c3                   	ret    

00000000001017a8 <_Unwind_GetDataRelBase>:
  1017a8:	48 8b 87 b0 00 00 00 	mov    0xb0(%rdi),%rax
  1017af:	c3                   	ret    

00000000001017b0 <_Unwind_GetTextRelBase>:
  1017b0:	48 8b 87 a8 00 00 00 	mov    0xa8(%rdi),%rax
  1017b7:	c3                   	ret    

00000000001017b8 <__frame_state_for>:
  1017b8:	55                   	push   %rbp
  1017b9:	31 c0                	xor    %eax,%eax
  1017bb:	49 89 f8             	mov    %rdi,%r8
  1017be:	b9 3c 00 00 00       	mov    $0x3c,%ecx
  1017c3:	49 ff c0             	inc    %r8
  1017c6:	48 89 e5             	mov    %rsp,%rbp
  1017c9:	53                   	push   %rbx
  1017ca:	48 89 f3             	mov    %rsi,%rbx
  1017cd:	48 8d 95 80 fd ff ff 	lea    -0x280(%rbp),%rdx
  1017d4:	48 8d b5 70 fe ff ff 	lea    -0x190(%rbp),%rsi
  1017db:	48 89 d7             	mov    %rdx,%rdi
  1017de:	48 81 ec 78 02 00 00 	sub    $0x278,%rsp
  1017e5:	f3 ab                	rep stos %eax,%es:(%rdi)
  1017e7:	b8 01 00 00 00       	mov    $0x1,%eax
  1017ec:	48 89 d7             	mov    %rdx,%rdi
  1017ef:	4c 89 85 18 fe ff ff 	mov    %r8,-0x1e8(%rbp)
  1017f6:	48 c1 e0 3e          	shl    $0x3e,%rax
  1017fa:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  101801:	e8 d4 f0 ff ff       	call   1008da <uw_frame_state_for>
  101806:	85 c0                	test   %eax,%eax
  101808:	75 70                	jne    10187a <__frame_state_for+0xc2>
  10180a:	83 7d b0 02          	cmpl   $0x2,-0x50(%rbp)
  10180e:	74 6a                	je     10187a <__frame_state_for+0xc2>
  101810:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  101817:	31 d2                	xor    %edx,%edx
  101819:	8b 70 08             	mov    0x8(%rax),%esi
  10181c:	40 88 b4 13 b4 00 00 	mov    %sil,0xb4(%rbx,%rdx,1)
  101823:	00 
  101824:	40 80 fe 01          	cmp    $0x1,%sil
  101828:	74 08                	je     101832 <__frame_state_for+0x7a>
  10182a:	31 c9                	xor    %ecx,%ecx
  10182c:	40 80 fe 02          	cmp    $0x2,%sil
  101830:	75 03                	jne    101835 <__frame_state_for+0x7d>
  101832:	48 8b 08             	mov    (%rax),%rcx
  101835:	48 89 4c d3 20       	mov    %rcx,0x20(%rbx,%rdx,8)
  10183a:	48 ff c2             	inc    %rdx
  10183d:	48 83 c0 10          	add    $0x10,%rax
  101841:	48 83 fa 12          	cmp    $0x12,%rdx
  101845:	75 d2                	jne    101819 <__frame_state_for+0x61>
  101847:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  10184b:	48 89 43 10          	mov    %rax,0x10(%rbx)
  10184f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  101853:	66 89 83 b0 00 00 00 	mov    %ax,0xb0(%rbx)
  10185a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  10185e:	66 89 83 b2 00 00 00 	mov    %ax,0xb2(%rbx)
  101865:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
  10186c:	48 89 43 18          	mov    %rax,0x18(%rbx)
  101870:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  101874:	48 89 43 08          	mov    %rax,0x8(%rbx)
  101878:	eb 02                	jmp    10187c <__frame_state_for+0xc4>
  10187a:	31 db                	xor    %ebx,%ebx
  10187c:	48 81 c4 78 02 00 00 	add    $0x278,%rsp
  101883:	48 89 d8             	mov    %rbx,%rax
  101886:	5b                   	pop    %rbx
  101887:	5d                   	pop    %rbp
  101888:	c3                   	ret    

0000000000101889 <_Unwind_DebugHook>:
  101889:	c3                   	ret    

000000000010188a <_Unwind_RaiseException>:
  10188a:	55                   	push   %rbp
  10188b:	48 89 e5             	mov    %rsp,%rbp
  10188e:	41 57                	push   %r15
  101890:	41 56                	push   %r14
  101892:	48 8d 75 10          	lea    0x10(%rbp),%rsi
  101896:	41 55                	push   %r13
  101898:	49 89 fd             	mov    %rdi,%r13
  10189b:	41 54                	push   %r12
  10189d:	4c 8d a5 60 fc ff ff 	lea    -0x3a0(%rbp),%r12
  1018a4:	53                   	push   %rbx
  1018a5:	4c 89 e7             	mov    %r12,%rdi
  1018a8:	48 8d 9d 50 fd ff ff 	lea    -0x2b0(%rbp),%rbx
  1018af:	52                   	push   %rdx
  1018b0:	50                   	push   %rax
  1018b1:	48 81 ec 68 03 00 00 	sub    $0x368,%rsp
  1018b8:	48 8b 55 08          	mov    0x8(%rbp),%rdx
  1018bc:	e8 14 fb ff ff       	call   1013d5 <uw_init_context_1>
  1018c1:	48 8d bd 50 fd ff ff 	lea    -0x2b0(%rbp),%rdi
  1018c8:	b9 3c 00 00 00       	mov    $0x3c,%ecx
  1018cd:	4c 89 e6             	mov    %r12,%rsi
  1018d0:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  1018d2:	48 8d b5 40 fe ff ff 	lea    -0x1c0(%rbp),%rsi
  1018d9:	48 89 df             	mov    %rbx,%rdi
  1018dc:	e8 f9 ef ff ff       	call   1008da <uw_frame_state_for>
  1018e1:	83 f8 05             	cmp    $0x5,%eax
  1018e4:	0f 84 dc 00 00 00    	je     1019c6 <_Unwind_RaiseException+0x13c>
  1018ea:	85 c0                	test   %eax,%eax
  1018ec:	74 0a                	je     1018f8 <_Unwind_RaiseException+0x6e>
  1018ee:	b8 03 00 00 00       	mov    $0x3,%eax
  1018f3:	e9 ce 00 00 00       	jmp    1019c6 <_Unwind_RaiseException+0x13c>
  1018f8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  1018fc:	48 85 c0             	test   %rax,%rax
  1018ff:	75 11                	jne    101912 <_Unwind_RaiseException+0x88>
  101901:	48 8d b5 40 fe ff ff 	lea    -0x1c0(%rbp),%rsi
  101908:	48 89 df             	mov    %rbx,%rdi
  10190b:	e8 e5 fb ff ff       	call   1014f5 <uw_update_context>
  101910:	eb c0                	jmp    1018d2 <_Unwind_RaiseException+0x48>
  101912:	49 8b 55 00          	mov    0x0(%r13),%rdx
  101916:	49 89 d8             	mov    %rbx,%r8
  101919:	4c 89 e9             	mov    %r13,%rcx
  10191c:	be 01 00 00 00       	mov    $0x1,%esi
  101921:	bf 01 00 00 00       	mov    $0x1,%edi
  101926:	ff d0                	call   *%rax
  101928:	83 f8 06             	cmp    $0x6,%eax
  10192b:	74 07                	je     101934 <_Unwind_RaiseException+0xaa>
  10192d:	83 f8 08             	cmp    $0x8,%eax
  101930:	74 cf                	je     101901 <_Unwind_RaiseException+0x77>
  101932:	eb ba                	jmp    1018ee <_Unwind_RaiseException+0x64>
  101934:	31 c0                	xor    %eax,%eax
  101936:	48 8b 95 10 fe ff ff 	mov    -0x1f0(%rbp),%rdx
  10193d:	48 89 df             	mov    %rbx,%rdi
  101940:	4c 89 e6             	mov    %r12,%rsi
  101943:	49 89 45 10          	mov    %rax,0x10(%r13)
  101947:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
  10194e:	b9 3c 00 00 00       	mov    $0x3c,%ecx
  101953:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  101955:	48 c1 ea 3f          	shr    $0x3f,%rdx
  101959:	48 89 de             	mov    %rbx,%rsi
  10195c:	4c 89 ef             	mov    %r13,%rdi
  10195f:	48 29 d0             	sub    %rdx,%rax
  101962:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
  101969:	49 89 45 18          	mov    %rax,0x18(%r13)
  10196d:	e8 c2 fb ff ff       	call   101534 <_Unwind_RaiseException_Phase2>
  101972:	83 f8 07             	cmp    $0x7,%eax
  101975:	75 4f                	jne    1019c6 <_Unwind_RaiseException+0x13c>
  101977:	48 89 de             	mov    %rbx,%rsi
  10197a:	4c 89 e7             	mov    %r12,%rdi
  10197d:	e8 6b f2 ff ff       	call   100bed <uw_install_context_1>
  101982:	48 8b b5 e8 fd ff ff 	mov    -0x218(%rbp),%rsi
  101989:	48 8b bd e0 fd ff ff 	mov    -0x220(%rbp),%rdi
  101990:	48 89 c1             	mov    %rax,%rcx
  101993:	e8 f1 fe ff ff       	call   101889 <_Unwind_DebugHook>
  101998:	48 8d 4c 0d 08       	lea    0x8(%rbp,%rcx,1),%rcx
  10199d:	48 89 74 05 08       	mov    %rsi,0x8(%rbp,%rax,1)
  1019a2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1019a6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  1019aa:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  1019ae:	4c 8b 65 e0          	mov    -0x20(%rbp),%r12
  1019b2:	4c 8b 6d e8          	mov    -0x18(%rbp),%r13
  1019b6:	4c 8b 75 f0          	mov    -0x10(%rbp),%r14
  1019ba:	4c 8b 7d f8          	mov    -0x8(%rbp),%r15
  1019be:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
  1019c2:	48 89 cc             	mov    %rcx,%rsp
  1019c5:	c3                   	ret    
  1019c6:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  1019ca:	4c 8b 65 e0          	mov    -0x20(%rbp),%r12
  1019ce:	4c 8b 6d e8          	mov    -0x18(%rbp),%r13
  1019d2:	4c 8b 75 f0          	mov    -0x10(%rbp),%r14
  1019d6:	4c 8b 7d f8          	mov    -0x8(%rbp),%r15
  1019da:	c9                   	leave  
  1019db:	c3                   	ret    

00000000001019dc <_Unwind_ForcedUnwind>:
  1019dc:	55                   	push   %rbp
  1019dd:	48 89 e5             	mov    %rsp,%rbp
  1019e0:	41 57                	push   %r15
  1019e2:	41 56                	push   %r14
  1019e4:	49 89 f6             	mov    %rsi,%r14
  1019e7:	48 8d 75 10          	lea    0x10(%rbp),%rsi
  1019eb:	41 55                	push   %r13
  1019ed:	49 89 d5             	mov    %rdx,%r13
  1019f0:	41 54                	push   %r12
  1019f2:	4c 8d a5 e0 fd ff ff 	lea    -0x220(%rbp),%r12
  1019f9:	53                   	push   %rbx
  1019fa:	48 89 fb             	mov    %rdi,%rbx
  1019fd:	4c 89 e7             	mov    %r12,%rdi
  101a00:	52                   	push   %rdx
  101a01:	50                   	push   %rax
  101a02:	48 81 ec f8 01 00 00 	sub    $0x1f8,%rsp
  101a09:	48 8b 55 08          	mov    0x8(%rbp),%rdx
  101a0d:	e8 c3 f9 ff ff       	call   1013d5 <uw_init_context_1>
  101a12:	4c 89 73 10          	mov    %r14,0x10(%rbx)
  101a16:	b9 3c 00 00 00       	mov    $0x3c,%ecx
  101a1b:	4c 89 e6             	mov    %r12,%rsi
  101a1e:	4c 89 6b 18          	mov    %r13,0x18(%rbx)
  101a22:	48 8d bd d0 fe ff ff 	lea    -0x130(%rbp),%rdi
  101a29:	48 8d 95 d8 fd ff ff 	lea    -0x228(%rbp),%rdx
  101a30:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  101a32:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
  101a39:	48 89 df             	mov    %rbx,%rdi
  101a3c:	e8 c5 fb ff ff       	call   101606 <_Unwind_ForcedUnwind_Phase2>
  101a41:	83 f8 07             	cmp    $0x7,%eax
  101a44:	75 53                	jne    101a99 <_Unwind_ForcedUnwind+0xbd>
  101a46:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
  101a4d:	4c 89 e7             	mov    %r12,%rdi
  101a50:	e8 98 f1 ff ff       	call   100bed <uw_install_context_1>
  101a55:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
  101a5c:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
  101a63:	48 89 c1             	mov    %rax,%rcx
  101a66:	e8 1e fe ff ff       	call   101889 <_Unwind_DebugHook>
  101a6b:	48 8d 4c 0d 08       	lea    0x8(%rbp,%rcx,1),%rcx
  101a70:	48 89 74 05 08       	mov    %rsi,0x8(%rbp,%rax,1)
  101a75:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  101a79:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  101a7d:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  101a81:	4c 8b 65 e0          	mov    -0x20(%rbp),%r12
  101a85:	4c 8b 6d e8          	mov    -0x18(%rbp),%r13
  101a89:	4c 8b 75 f0          	mov    -0x10(%rbp),%r14
  101a8d:	4c 8b 7d f8          	mov    -0x8(%rbp),%r15
  101a91:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
  101a95:	48 89 cc             	mov    %rcx,%rsp
  101a98:	c3                   	ret    
  101a99:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  101a9d:	4c 8b 65 e0          	mov    -0x20(%rbp),%r12
  101aa1:	4c 8b 6d e8          	mov    -0x18(%rbp),%r13
  101aa5:	4c 8b 75 f0          	mov    -0x10(%rbp),%r14
  101aa9:	4c 8b 7d f8          	mov    -0x8(%rbp),%r15
  101aad:	c9                   	leave  
  101aae:	c3                   	ret    

0000000000101aaf <_Unwind_Resume>:
  101aaf:	55                   	push   %rbp
  101ab0:	48 89 e5             	mov    %rsp,%rbp
  101ab3:	41 57                	push   %r15
  101ab5:	41 56                	push   %r14
  101ab7:	48 8d 75 10          	lea    0x10(%rbp),%rsi
  101abb:	41 55                	push   %r13
  101abd:	41 54                	push   %r12
  101abf:	4c 8d a5 e0 fd ff ff 	lea    -0x220(%rbp),%r12
  101ac6:	53                   	push   %rbx
  101ac7:	48 89 fb             	mov    %rdi,%rbx
  101aca:	4c 89 e7             	mov    %r12,%rdi
  101acd:	52                   	push   %rdx
  101ace:	50                   	push   %rax
  101acf:	48 81 ec f8 01 00 00 	sub    $0x1f8,%rsp
  101ad6:	48 8b 55 08          	mov    0x8(%rbp),%rdx
  101ada:	e8 f6 f8 ff ff       	call   1013d5 <uw_init_context_1>
  101adf:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
  101ae4:	b9 3c 00 00 00       	mov    $0x3c,%ecx
  101ae9:	4c 89 e6             	mov    %r12,%rsi
  101aec:	48 8d bd d0 fe ff ff 	lea    -0x130(%rbp),%rdi
  101af3:	48 8d 95 d8 fd ff ff 	lea    -0x228(%rbp),%rdx
  101afa:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  101afc:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
  101b03:	48 89 df             	mov    %rbx,%rdi
  101b06:	75 07                	jne    101b0f <_Unwind_Resume+0x60>
  101b08:	e8 27 fa ff ff       	call   101534 <_Unwind_RaiseException_Phase2>
  101b0d:	eb 05                	jmp    101b14 <_Unwind_Resume+0x65>
  101b0f:	e8 f2 fa ff ff       	call   101606 <_Unwind_ForcedUnwind_Phase2>
  101b14:	83 f8 07             	cmp    $0x7,%eax
  101b17:	74 05                	je     101b1e <_Unwind_Resume+0x6f>
  101b19:	e8 a6 02 01 00       	call   111dc4 <abort>
  101b1e:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
  101b25:	4c 89 e7             	mov    %r12,%rdi
  101b28:	e8 c0 f0 ff ff       	call   100bed <uw_install_context_1>
  101b2d:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  101b34:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
  101b3b:	48 89 c1             	mov    %rax,%rcx
  101b3e:	48 89 d6             	mov    %rdx,%rsi
  101b41:	48 8d 4c 0d 08       	lea    0x8(%rbp,%rcx,1),%rcx
  101b46:	e8 3e fd ff ff       	call   101889 <_Unwind_DebugHook>
  101b4b:	48 89 54 05 08       	mov    %rdx,0x8(%rbp,%rax,1)
  101b50:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  101b54:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  101b58:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  101b5c:	4c 8b 65 e0          	mov    -0x20(%rbp),%r12
  101b60:	4c 8b 6d e8          	mov    -0x18(%rbp),%r13
  101b64:	4c 8b 75 f0          	mov    -0x10(%rbp),%r14
  101b68:	4c 8b 7d f8          	mov    -0x8(%rbp),%r15
  101b6c:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
  101b70:	48 89 cc             	mov    %rcx,%rsp
  101b73:	c3                   	ret    

0000000000101b74 <_Unwind_Resume_or_Rethrow>:
  101b74:	55                   	push   %rbp
  101b75:	48 89 e5             	mov    %rsp,%rbp
  101b78:	41 57                	push   %r15
  101b7a:	41 56                	push   %r14
  101b7c:	41 55                	push   %r13
  101b7e:	41 54                	push   %r12
  101b80:	53                   	push   %rbx
  101b81:	48 89 fb             	mov    %rdi,%rbx
  101b84:	52                   	push   %rdx
  101b85:	50                   	push   %rax
  101b86:	48 81 ec f8 01 00 00 	sub    $0x1f8,%rsp
  101b8d:	48 83 7f 10 00       	cmpq   $0x0,0x10(%rdi)
  101b92:	0f 84 9b 00 00 00    	je     101c33 <_Unwind_Resume_or_Rethrow+0xbf>
  101b98:	48 8b 55 08          	mov    0x8(%rbp),%rdx
  101b9c:	4c 8d a5 e0 fd ff ff 	lea    -0x220(%rbp),%r12
  101ba3:	48 8d 75 10          	lea    0x10(%rbp),%rsi
  101ba7:	4c 89 e7             	mov    %r12,%rdi
  101baa:	e8 26 f8 ff ff       	call   1013d5 <uw_init_context_1>
  101baf:	48 8d bd d0 fe ff ff 	lea    -0x130(%rbp),%rdi
  101bb6:	4c 89 e6             	mov    %r12,%rsi
  101bb9:	b9 3c 00 00 00       	mov    $0x3c,%ecx
  101bbe:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  101bc0:	48 8d 95 d8 fd ff ff 	lea    -0x228(%rbp),%rdx
  101bc7:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
  101bce:	48 89 df             	mov    %rbx,%rdi
  101bd1:	e8 30 fa ff ff       	call   101606 <_Unwind_ForcedUnwind_Phase2>
  101bd6:	83 f8 07             	cmp    $0x7,%eax
  101bd9:	74 05                	je     101be0 <_Unwind_Resume_or_Rethrow+0x6c>
  101bdb:	e8 e4 01 01 00       	call   111dc4 <abort>
  101be0:	48 8d b5 d0 fe ff ff 	lea    -0x130(%rbp),%rsi
  101be7:	4c 89 e7             	mov    %r12,%rdi
  101bea:	e8 fe ef ff ff       	call   100bed <uw_install_context_1>
  101bef:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
  101bf6:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
  101bfd:	48 89 c1             	mov    %rax,%rcx
  101c00:	e8 84 fc ff ff       	call   101889 <_Unwind_DebugHook>
  101c05:	48 8d 4c 0d 08       	lea    0x8(%rbp,%rcx,1),%rcx
  101c0a:	48 89 74 05 08       	mov    %rsi,0x8(%rbp,%rax,1)
  101c0f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  101c13:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  101c17:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  101c1b:	4c 8b 65 e0          	mov    -0x20(%rbp),%r12
  101c1f:	4c 8b 6d e8          	mov    -0x18(%rbp),%r13
  101c23:	4c 8b 75 f0          	mov    -0x10(%rbp),%r14
  101c27:	4c 8b 7d f8          	mov    -0x8(%rbp),%r15
  101c2b:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
  101c2f:	48 89 cc             	mov    %rcx,%rsp
  101c32:	c3                   	ret    
  101c33:	e8 52 fc ff ff       	call   10188a <_Unwind_RaiseException>
  101c38:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  101c3c:	4c 8b 65 e0          	mov    -0x20(%rbp),%r12
  101c40:	4c 8b 6d e8          	mov    -0x18(%rbp),%r13
  101c44:	4c 8b 75 f0          	mov    -0x10(%rbp),%r14
  101c48:	4c 8b 7d f8          	mov    -0x8(%rbp),%r15
  101c4c:	c9                   	leave  
  101c4d:	c3                   	ret    

0000000000101c4e <_Unwind_DeleteException>:
  101c4e:	48 8b 47 08          	mov    0x8(%rdi),%rax
  101c52:	48 89 fe             	mov    %rdi,%rsi
  101c55:	48 85 c0             	test   %rax,%rax
  101c58:	74 07                	je     101c61 <_Unwind_DeleteException+0x13>
  101c5a:	bf 01 00 00 00       	mov    $0x1,%edi
  101c5f:	ff e0                	jmp    *%rax
  101c61:	c3                   	ret    

0000000000101c62 <_Unwind_Backtrace>:
  101c62:	55                   	push   %rbp
  101c63:	48 89 e5             	mov    %rsp,%rbp
  101c66:	41 57                	push   %r15
  101c68:	41 56                	push   %r14
  101c6a:	41 55                	push   %r13
  101c6c:	49 89 f5             	mov    %rsi,%r13
  101c6f:	48 8d 75 10          	lea    0x10(%rbp),%rsi
  101c73:	41 54                	push   %r12
  101c75:	49 89 fc             	mov    %rdi,%r12
  101c78:	48 8d bd 60 fd ff ff 	lea    -0x2a0(%rbp),%rdi
  101c7f:	53                   	push   %rbx
  101c80:	48 81 ec 78 02 00 00 	sub    $0x278,%rsp
  101c87:	48 8b 55 08          	mov    0x8(%rbp),%rdx
  101c8b:	e8 45 f7 ff ff       	call   1013d5 <uw_init_context_1>
  101c90:	48 8d b5 50 fe ff ff 	lea    -0x1b0(%rbp),%rsi
  101c97:	48 8d bd 60 fd ff ff 	lea    -0x2a0(%rbp),%rdi
  101c9e:	e8 37 ec ff ff       	call   1008da <uw_frame_state_for>
  101ca3:	89 c3                	mov    %eax,%ebx
  101ca5:	8d 40 fc             	lea    -0x4(%rax),%eax
  101ca8:	83 f8 01             	cmp    $0x1,%eax
  101cab:	76 04                	jbe    101cb1 <_Unwind_Backtrace+0x4f>
  101cad:	85 db                	test   %ebx,%ebx
  101caf:	75 2b                	jne    101cdc <_Unwind_Backtrace+0x7a>
  101cb1:	4c 89 ee             	mov    %r13,%rsi
  101cb4:	48 8d bd 60 fd ff ff 	lea    -0x2a0(%rbp),%rdi
  101cbb:	41 ff d4             	call   *%r12
  101cbe:	85 c0                	test   %eax,%eax
  101cc0:	75 1a                	jne    101cdc <_Unwind_Backtrace+0x7a>
  101cc2:	83 fb 05             	cmp    $0x5,%ebx
  101cc5:	74 1a                	je     101ce1 <_Unwind_Backtrace+0x7f>
  101cc7:	48 8d b5 50 fe ff ff 	lea    -0x1b0(%rbp),%rsi
  101cce:	48 8d bd 60 fd ff ff 	lea    -0x2a0(%rbp),%rdi
  101cd5:	e8 1b f8 ff ff       	call   1014f5 <uw_update_context>
  101cda:	eb b4                	jmp    101c90 <_Unwind_Backtrace+0x2e>
  101cdc:	bb 03 00 00 00       	mov    $0x3,%ebx
  101ce1:	48 81 c4 78 02 00 00 	add    $0x278,%rsp
  101ce8:	89 d8                	mov    %ebx,%eax
  101cea:	5b                   	pop    %rbx
  101ceb:	41 5c                	pop    %r12
  101ced:	41 5d                	pop    %r13
  101cef:	41 5e                	pop    %r14
  101cf1:	41 5f                	pop    %r15
  101cf3:	5d                   	pop    %rbp
  101cf4:	c3                   	ret    

0000000000101cf5 <read_uleb128>:
  101cf5:	48 89 f8             	mov    %rdi,%rax
  101cf8:	31 d2                	xor    %edx,%edx
  101cfa:	31 c9                	xor    %ecx,%ecx
  101cfc:	44 8a 00             	mov    (%rax),%r8b
  101cff:	48 ff c0             	inc    %rax
  101d02:	4c 89 c7             	mov    %r8,%rdi
  101d05:	83 e7 7f             	and    $0x7f,%edi
  101d08:	48 d3 e7             	shl    %cl,%rdi
  101d0b:	83 c1 07             	add    $0x7,%ecx
  101d0e:	48 09 fa             	or     %rdi,%rdx
  101d11:	45 84 c0             	test   %r8b,%r8b
  101d14:	78 e6                	js     101cfc <read_uleb128+0x7>
  101d16:	48 89 16             	mov    %rdx,(%rsi)
  101d19:	c3                   	ret    

0000000000101d1a <read_sleb128>:
  101d1a:	48 89 f8             	mov    %rdi,%rax
  101d1d:	31 d2                	xor    %edx,%edx
  101d1f:	31 c9                	xor    %ecx,%ecx
  101d21:	40 8a 38             	mov    (%rax),%dil
  101d24:	48 ff c0             	inc    %rax
  101d27:	49 89 f8             	mov    %rdi,%r8
  101d2a:	41 83 e0 7f          	and    $0x7f,%r8d
  101d2e:	49 d3 e0             	shl    %cl,%r8
  101d31:	83 c1 07             	add    $0x7,%ecx
  101d34:	4c 09 c2             	or     %r8,%rdx
  101d37:	40 84 ff             	test   %dil,%dil
  101d3a:	78 e5                	js     101d21 <read_sleb128+0x7>
  101d3c:	83 f9 3f             	cmp    $0x3f,%ecx
  101d3f:	77 10                	ja     101d51 <read_sleb128+0x37>
  101d41:	40 80 e7 40          	and    $0x40,%dil
  101d45:	74 0a                	je     101d51 <read_sleb128+0x37>
  101d47:	48 83 cf ff          	or     $0xffffffffffffffff,%rdi
  101d4b:	48 d3 e7             	shl    %cl,%rdi
  101d4e:	48 09 fa             	or     %rdi,%rdx
  101d51:	48 89 16             	mov    %rdx,(%rsi)
  101d54:	c3                   	ret    

0000000000101d55 <fde_unencoded_compare>:
  101d55:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  101d59:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  101d5d:	b8 01 00 00 00       	mov    $0x1,%eax
  101d62:	48 39 ca             	cmp    %rcx,%rdx
  101d65:	72 05                	jb     101d6c <fde_unencoded_compare+0x17>
  101d67:	48 39 d1             	cmp    %rdx,%rcx
  101d6a:	19 c0                	sbb    %eax,%eax
  101d6c:	c3                   	ret    

0000000000101d6d <frame_downheap>:
  101d6d:	55                   	push   %rbp
  101d6e:	48 89 e5             	mov    %rsp,%rbp
  101d71:	41 57                	push   %r15
  101d73:	49 89 f7             	mov    %rsi,%r15
  101d76:	41 56                	push   %r14
  101d78:	41 55                	push   %r13
  101d7a:	41 54                	push   %r12
  101d7c:	49 89 d4             	mov    %rdx,%r12
  101d7f:	53                   	push   %rbx
  101d80:	48 63 d9             	movslq %ecx,%rbx
  101d83:	44 8d 74 1b 01       	lea    0x1(%rbx,%rbx,1),%r14d
  101d88:	48 83 ec 18          	sub    $0x18,%rsp
  101d8c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  101d90:	44 89 45 c4          	mov    %r8d,-0x3c(%rbp)
  101d94:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  101d97:	41 39 c6             	cmp    %eax,%r14d
  101d9a:	7d 58                	jge    101df4 <frame_downheap+0x87>
  101d9c:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  101d9f:	45 8d 6e 01          	lea    0x1(%r14),%r13d
  101da3:	41 39 c5             	cmp    %eax,%r13d
  101da6:	7d 17                	jge    101dbf <frame_downheap+0x52>
  101da8:	49 63 c6             	movslq %r14d,%rax
  101dab:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  101daf:	49 8b 54 c4 08       	mov    0x8(%r12,%rax,8),%rdx
  101db4:	49 8b 34 c4          	mov    (%r12,%rax,8),%rsi
  101db8:	41 ff d7             	call   *%r15
  101dbb:	85 c0                	test   %eax,%eax
  101dbd:	78 03                	js     101dc2 <frame_downheap+0x55>
  101dbf:	45 89 f5             	mov    %r14d,%r13d
  101dc2:	49 63 c5             	movslq %r13d,%rax
  101dc5:	49 8d 1c dc          	lea    (%r12,%rbx,8),%rbx
  101dc9:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  101dcd:	4d 8d 34 c4          	lea    (%r12,%rax,8),%r14
  101dd1:	48 8b 33             	mov    (%rbx),%rsi
  101dd4:	49 8b 16             	mov    (%r14),%rdx
  101dd7:	41 ff d7             	call   *%r15
  101dda:	85 c0                	test   %eax,%eax
  101ddc:	79 16                	jns    101df4 <frame_downheap+0x87>
  101dde:	48 8b 03             	mov    (%rbx),%rax
  101de1:	49 8b 16             	mov    (%r14),%rdx
  101de4:	48 89 13             	mov    %rdx,(%rbx)
  101de7:	49 63 dd             	movslq %r13d,%rbx
  101dea:	49 89 06             	mov    %rax,(%r14)
  101ded:	47 8d 74 2d 01       	lea    0x1(%r13,%r13,1),%r14d
  101df2:	eb a0                	jmp    101d94 <frame_downheap+0x27>
  101df4:	48 83 c4 18          	add    $0x18,%rsp
  101df8:	5b                   	pop    %rbx
  101df9:	41 5c                	pop    %r12
  101dfb:	41 5d                	pop    %r13
  101dfd:	41 5e                	pop    %r14
  101dff:	41 5f                	pop    %r15
  101e01:	5d                   	pop    %rbp
  101e02:	c3                   	ret    

0000000000101e03 <frame_heapsort>:
  101e03:	55                   	push   %rbp
  101e04:	48 89 e5             	mov    %rsp,%rbp
  101e07:	41 57                	push   %r15
  101e09:	49 89 d7             	mov    %rdx,%r15
  101e0c:	41 56                	push   %r14
  101e0e:	4c 8d 72 10          	lea    0x10(%rdx),%r14
  101e12:	41 55                	push   %r13
  101e14:	49 89 f5             	mov    %rsi,%r13
  101e17:	41 54                	push   %r12
  101e19:	53                   	push   %rbx
  101e1a:	48 83 ec 18          	sub    $0x18,%rsp
  101e1e:	48 8b 5a 08          	mov    0x8(%rdx),%rbx
  101e22:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  101e26:	48 89 d8             	mov    %rbx,%rax
  101e29:	48 d1 e8             	shr    %rax
  101e2c:	44 8d 60 ff          	lea    -0x1(%rax),%r12d
  101e30:	45 85 e4             	test   %r12d,%r12d
  101e33:	78 1a                	js     101e4f <frame_heapsort+0x4c>
  101e35:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  101e39:	44 89 e1             	mov    %r12d,%ecx
  101e3c:	41 89 d8             	mov    %ebx,%r8d
  101e3f:	4c 89 f2             	mov    %r14,%rdx
  101e42:	4c 89 ee             	mov    %r13,%rsi
  101e45:	41 ff cc             	dec    %r12d
  101e48:	e8 20 ff ff ff       	call   101d6d <frame_downheap>
  101e4d:	eb e1                	jmp    101e30 <frame_heapsort+0x2d>
  101e4f:	ff cb                	dec    %ebx
  101e51:	48 63 db             	movslq %ebx,%rbx
  101e54:	85 db                	test   %ebx,%ebx
  101e56:	7e 2b                	jle    101e83 <frame_heapsort+0x80>
  101e58:	49 8b 54 df 10       	mov    0x10(%r15,%rbx,8),%rdx
  101e5d:	49 8b 47 10          	mov    0x10(%r15),%rax
  101e61:	41 89 d8             	mov    %ebx,%r8d
  101e64:	31 c9                	xor    %ecx,%ecx
  101e66:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  101e6a:	4c 89 ee             	mov    %r13,%rsi
  101e6d:	49 89 57 10          	mov    %rdx,0x10(%r15)
  101e71:	4c 89 f2             	mov    %r14,%rdx
  101e74:	49 89 44 df 10       	mov    %rax,0x10(%r15,%rbx,8)
  101e79:	48 ff cb             	dec    %rbx
  101e7c:	e8 ec fe ff ff       	call   101d6d <frame_downheap>
  101e81:	eb d1                	jmp    101e54 <frame_heapsort+0x51>
  101e83:	48 83 c4 18          	add    $0x18,%rsp
  101e87:	5b                   	pop    %rbx
  101e88:	41 5c                	pop    %r12
  101e8a:	41 5d                	pop    %r13
  101e8c:	41 5e                	pop    %r14
  101e8e:	41 5f                	pop    %r15
  101e90:	5d                   	pop    %rbp
  101e91:	c3                   	ret    

0000000000101e92 <size_of_encoded_value>:
  101e92:	40 80 ff ff          	cmp    $0xff,%dil
  101e96:	74 34                	je     101ecc <size_of_encoded_value+0x3a>
  101e98:	83 e7 07             	and    $0x7,%edi
  101e9b:	40 80 ff 02          	cmp    $0x2,%dil
  101e9f:	74 2e                	je     101ecf <size_of_encoded_value+0x3d>
  101ea1:	77 0a                	ja     101ead <size_of_encoded_value+0x1b>
  101ea3:	b8 08 00 00 00       	mov    $0x8,%eax
  101ea8:	40 84 ff             	test   %dil,%dil
  101eab:	eb 14                	jmp    101ec1 <size_of_encoded_value+0x2f>
  101ead:	b8 04 00 00 00       	mov    $0x4,%eax
  101eb2:	40 80 ff 03          	cmp    $0x3,%dil
  101eb6:	74 1c                	je     101ed4 <size_of_encoded_value+0x42>
  101eb8:	b8 08 00 00 00       	mov    $0x8,%eax
  101ebd:	40 80 ff 04          	cmp    $0x4,%dil
  101ec1:	74 11                	je     101ed4 <size_of_encoded_value+0x42>
  101ec3:	55                   	push   %rbp
  101ec4:	48 89 e5             	mov    %rsp,%rbp
  101ec7:	e8 f8 fe 00 00       	call   111dc4 <abort>
  101ecc:	31 c0                	xor    %eax,%eax
  101ece:	c3                   	ret    
  101ecf:	b8 02 00 00 00       	mov    $0x2,%eax
  101ed4:	c3                   	ret    

0000000000101ed5 <base_from_object>:
  101ed5:	40 80 ff ff          	cmp    $0xff,%dil
  101ed9:	74 2c                	je     101f07 <base_from_object+0x32>
  101edb:	83 e7 70             	and    $0x70,%edi
  101ede:	40 80 ff 20          	cmp    $0x20,%dil
  101ee2:	74 19                	je     101efd <base_from_object+0x28>
  101ee4:	76 21                	jbe    101f07 <base_from_object+0x32>
  101ee6:	40 80 ff 30          	cmp    $0x30,%dil
  101eea:	74 16                	je     101f02 <base_from_object+0x2d>
  101eec:	31 c0                	xor    %eax,%eax
  101eee:	40 80 ff 50          	cmp    $0x50,%dil
  101ef2:	74 15                	je     101f09 <base_from_object+0x34>
  101ef4:	55                   	push   %rbp
  101ef5:	48 89 e5             	mov    %rsp,%rbp
  101ef8:	e8 c7 fe 00 00       	call   111dc4 <abort>
  101efd:	48 8b 46 08          	mov    0x8(%rsi),%rax
  101f01:	c3                   	ret    
  101f02:	48 8b 46 10          	mov    0x10(%rsi),%rax
  101f06:	c3                   	ret    
  101f07:	31 c0                	xor    %eax,%eax
  101f09:	c3                   	ret    

0000000000101f0a <read_encoded_value_with_base>:
  101f0a:	49 89 d1             	mov    %rdx,%r9
  101f0d:	49 89 ca             	mov    %rcx,%r10
  101f10:	40 80 ff 50          	cmp    $0x50,%dil
  101f14:	75 13                	jne    101f29 <read_encoded_value_with_base+0x1f>
  101f16:	48 8d 42 07          	lea    0x7(%rdx),%rax
  101f1a:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
  101f1e:	48 8b 10             	mov    (%rax),%rdx
  101f21:	48 83 c0 08          	add    $0x8,%rax
  101f25:	48 89 11             	mov    %rdx,(%rcx)
  101f28:	c3                   	ret    
  101f29:	55                   	push   %rbp
  101f2a:	89 f8                	mov    %edi,%eax
  101f2c:	41 89 fb             	mov    %edi,%r11d
  101f2f:	83 e0 0f             	and    $0xf,%eax
  101f32:	48 89 e5             	mov    %rsp,%rbp
  101f35:	53                   	push   %rbx
  101f36:	48 83 ec 18          	sub    $0x18,%rsp
  101f3a:	3c 0c                	cmp    $0xc,%al
  101f3c:	77 52                	ja     101f90 <read_encoded_value_with_base+0x86>
  101f3e:	0f b6 c0             	movzbl %al,%eax
  101f41:	48 89 f3             	mov    %rsi,%rbx
  101f44:	ff 24 c5 60 c6 11 00 	jmp    *0x11c660(,%rax,8)
  101f4b:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  101f4f:	48 89 d7             	mov    %rdx,%rdi
  101f52:	e8 9e fd ff ff       	call   101cf5 <read_uleb128>
  101f57:	eb 0c                	jmp    101f65 <read_encoded_value_with_base+0x5b>
  101f59:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  101f5d:	48 89 d7             	mov    %rdx,%rdi
  101f60:	e8 b5 fd ff ff       	call   101d1a <read_sleb128>
  101f65:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  101f69:	eb 2a                	jmp    101f95 <read_encoded_value_with_base+0x8b>
  101f6b:	0f b7 12             	movzwl (%rdx),%edx
  101f6e:	eb 08                	jmp    101f78 <read_encoded_value_with_base+0x6e>
  101f70:	8b 12                	mov    (%rdx),%edx
  101f72:	eb 0d                	jmp    101f81 <read_encoded_value_with_base+0x77>
  101f74:	48 0f bf 12          	movswq (%rdx),%rdx
  101f78:	49 8d 41 02          	lea    0x2(%r9),%rax
  101f7c:	eb 17                	jmp    101f95 <read_encoded_value_with_base+0x8b>
  101f7e:	48 63 12             	movslq (%rdx),%rdx
  101f81:	49 8d 41 04          	lea    0x4(%r9),%rax
  101f85:	eb 0e                	jmp    101f95 <read_encoded_value_with_base+0x8b>
  101f87:	48 8b 12             	mov    (%rdx),%rdx
  101f8a:	49 8d 41 08          	lea    0x8(%r9),%rax
  101f8e:	eb 05                	jmp    101f95 <read_encoded_value_with_base+0x8b>
  101f90:	e8 2f fe 00 00       	call   111dc4 <abort>
  101f95:	48 85 d2             	test   %rdx,%rdx
  101f98:	74 18                	je     101fb2 <read_encoded_value_with_base+0xa8>
  101f9a:	44 89 d9             	mov    %r11d,%ecx
  101f9d:	83 e1 70             	and    $0x70,%ecx
  101fa0:	80 f9 10             	cmp    $0x10,%cl
  101fa3:	49 0f 44 d9          	cmove  %r9,%rbx
  101fa7:	48 01 da             	add    %rbx,%rdx
  101faa:	45 84 db             	test   %r11b,%r11b
  101fad:	79 03                	jns    101fb2 <read_encoded_value_with_base+0xa8>
  101faf:	48 8b 12             	mov    (%rdx),%rdx
  101fb2:	49 89 12             	mov    %rdx,(%r10)
  101fb5:	48 83 c4 18          	add    $0x18,%rsp
  101fb9:	5b                   	pop    %rbx
  101fba:	5d                   	pop    %rbp
  101fbb:	c3                   	ret    

0000000000101fbc <fde_single_encoding_compare>:
  101fbc:	55                   	push   %rbp
  101fbd:	48 89 e5             	mov    %rsp,%rbp
  101fc0:	41 56                	push   %r14
  101fc2:	41 55                	push   %r13
  101fc4:	49 89 f5             	mov    %rsi,%r13
  101fc7:	48 89 fe             	mov    %rdi,%rsi
  101fca:	41 54                	push   %r12
  101fcc:	49 89 d4             	mov    %rdx,%r12
  101fcf:	53                   	push   %rbx
  101fd0:	48 83 ec 10          	sub    $0x10,%rsp
  101fd4:	8b 5f 20             	mov    0x20(%rdi),%ebx
  101fd7:	66 c1 eb 03          	shr    $0x3,%bx
  101fdb:	0f b6 db             	movzbl %bl,%ebx
  101fde:	89 df                	mov    %ebx,%edi
  101fe0:	e8 f0 fe ff ff       	call   101ed5 <base_from_object>
  101fe5:	49 8d 55 08          	lea    0x8(%r13),%rdx
  101fe9:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  101fed:	89 df                	mov    %ebx,%edi
  101fef:	49 89 c6             	mov    %rax,%r14
  101ff2:	48 89 c6             	mov    %rax,%rsi
  101ff5:	e8 10 ff ff ff       	call   101f0a <read_encoded_value_with_base>
  101ffa:	49 8d 54 24 08       	lea    0x8(%r12),%rdx
  101fff:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  102003:	89 df                	mov    %ebx,%edi
  102005:	4c 89 f6             	mov    %r14,%rsi
  102008:	e8 fd fe ff ff       	call   101f0a <read_encoded_value_with_base>
  10200d:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  102011:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  102015:	b8 01 00 00 00       	mov    $0x1,%eax
  10201a:	48 39 ca             	cmp    %rcx,%rdx
  10201d:	72 05                	jb     102024 <fde_single_encoding_compare+0x68>
  10201f:	48 39 d1             	cmp    %rdx,%rcx
  102022:	19 c0                	sbb    %eax,%eax
  102024:	5a                   	pop    %rdx
  102025:	59                   	pop    %rcx
  102026:	5b                   	pop    %rbx
  102027:	41 5c                	pop    %r12
  102029:	41 5d                	pop    %r13
  10202b:	41 5e                	pop    %r14
  10202d:	5d                   	pop    %rbp
  10202e:	c3                   	ret    

000000000010202f <get_cie_encoding>:
  10202f:	55                   	push   %rbp
  102030:	48 89 e5             	mov    %rsp,%rbp
  102033:	41 54                	push   %r12
  102035:	4c 8d 67 09          	lea    0x9(%rdi),%r12
  102039:	53                   	push   %rbx
  10203a:	48 89 fb             	mov    %rdi,%rbx
  10203d:	4c 89 e7             	mov    %r12,%rdi
  102040:	48 83 ec 20          	sub    $0x20,%rsp
  102044:	e8 57 27 00 00       	call   1047a0 <strlen>
  102049:	44 8a 4b 08          	mov    0x8(%rbx),%r9b
  10204d:	49 8d 7c 04 01       	lea    0x1(%r12,%rax,1),%rdi
  102052:	41 80 f9 03          	cmp    $0x3,%r9b
  102056:	76 1c                	jbe    102074 <get_cie_encoding+0x45>
  102058:	80 3f 08             	cmpb   $0x8,(%rdi)
  10205b:	b8 ff 00 00 00       	mov    $0xff,%eax
  102060:	0f 85 8d 00 00 00    	jne    1020f3 <get_cie_encoding+0xc4>
  102066:	80 7f 01 00          	cmpb   $0x0,0x1(%rdi)
  10206a:	0f 85 83 00 00 00    	jne    1020f3 <get_cie_encoding+0xc4>
  102070:	48 83 c7 02          	add    $0x2,%rdi
  102074:	80 7b 09 7a          	cmpb   $0x7a,0x9(%rbx)
  102078:	74 04                	je     10207e <get_cie_encoding+0x4f>
  10207a:	31 c0                	xor    %eax,%eax
  10207c:	eb 75                	jmp    1020f3 <get_cie_encoding+0xc4>
  10207e:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  102082:	e8 6e fc ff ff       	call   101cf5 <read_uleb128>
  102087:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  10208b:	48 89 c7             	mov    %rax,%rdi
  10208e:	e8 87 fc ff ff       	call   101d1a <read_sleb128>
  102093:	41 fe c9             	dec    %r9b
  102096:	48 89 c7             	mov    %rax,%rdi
  102099:	75 05                	jne    1020a0 <get_cie_encoding+0x71>
  10209b:	48 ff c7             	inc    %rdi
  10209e:	eb 0c                	jmp    1020ac <get_cie_encoding+0x7d>
  1020a0:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  1020a4:	e8 4c fc ff ff       	call   101cf5 <read_uleb128>
  1020a9:	48 89 c7             	mov    %rax,%rdi
  1020ac:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  1020b0:	48 83 c3 0a          	add    $0xa,%rbx
  1020b4:	e8 3c fc ff ff       	call   101cf5 <read_uleb128>
  1020b9:	8a 13                	mov    (%rbx),%dl
  1020bb:	80 fa 52             	cmp    $0x52,%dl
  1020be:	75 05                	jne    1020c5 <get_cie_encoding+0x96>
  1020c0:	0f b6 00             	movzbl (%rax),%eax
  1020c3:	eb 2e                	jmp    1020f3 <get_cie_encoding+0xc4>
  1020c5:	80 fa 50             	cmp    $0x50,%dl
  1020c8:	75 17                	jne    1020e1 <get_cie_encoding+0xb2>
  1020ca:	40 8a 38             	mov    (%rax),%dil
  1020cd:	48 8d 50 01          	lea    0x1(%rax),%rdx
  1020d1:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  1020d5:	31 f6                	xor    %esi,%esi
  1020d7:	83 e7 7f             	and    $0x7f,%edi
  1020da:	e8 2b fe ff ff       	call   101f0a <read_encoded_value_with_base>
  1020df:	eb 0d                	jmp    1020ee <get_cie_encoding+0xbf>
  1020e1:	80 fa 4c             	cmp    $0x4c,%dl
  1020e4:	74 05                	je     1020eb <get_cie_encoding+0xbc>
  1020e6:	80 fa 42             	cmp    $0x42,%dl
  1020e9:	75 8f                	jne    10207a <get_cie_encoding+0x4b>
  1020eb:	48 ff c0             	inc    %rax
  1020ee:	48 ff c3             	inc    %rbx
  1020f1:	eb c6                	jmp    1020b9 <get_cie_encoding+0x8a>
  1020f3:	48 83 c4 20          	add    $0x20,%rsp
  1020f7:	5b                   	pop    %rbx
  1020f8:	41 5c                	pop    %r12
  1020fa:	5d                   	pop    %rbp
  1020fb:	c3                   	ret    

00000000001020fc <classify_object_over_fdes>:
  1020fc:	55                   	push   %rbp
  1020fd:	31 c0                	xor    %eax,%eax
  1020ff:	48 89 e5             	mov    %rsp,%rbp
  102102:	41 57                	push   %r15
  102104:	49 89 f7             	mov    %rsi,%r15
  102107:	31 f6                	xor    %esi,%esi
  102109:	41 56                	push   %r14
  10210b:	49 89 fe             	mov    %rdi,%r14
  10210e:	41 55                	push   %r13
  102110:	41 54                	push   %r12
  102112:	45 31 e4             	xor    %r12d,%r12d
  102115:	53                   	push   %rbx
  102116:	48 83 ec 38          	sub    $0x38,%rsp
  10211a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10211e:	31 c0                	xor    %eax,%eax
  102120:	45 8b 2f             	mov    (%r15),%r13d
  102123:	45 85 ed             	test   %r13d,%r13d
  102126:	0f 84 e5 00 00 00    	je     102211 <classify_object_over_fdes+0x115>
  10212c:	49 63 57 04          	movslq 0x4(%r15),%rdx
  102130:	85 d2                	test   %edx,%edx
  102132:	0f 84 c9 00 00 00    	je     102201 <classify_object_over_fdes+0x105>
  102138:	49 8d 5f 04          	lea    0x4(%r15),%rbx
  10213c:	48 29 d3             	sub    %rdx,%rbx
  10213f:	48 39 d8             	cmp    %rbx,%rax
  102142:	74 64                	je     1021a8 <classify_object_over_fdes+0xac>
  102144:	48 89 df             	mov    %rbx,%rdi
  102147:	e8 e3 fe ff ff       	call   10202f <get_cie_encoding>
  10214c:	41 89 c4             	mov    %eax,%r12d
  10214f:	3d ff 00 00 00       	cmp    $0xff,%eax
  102154:	75 0d                	jne    102163 <classify_object_over_fdes+0x67>
  102156:	48 c7 45 b8 ff ff ff 	movq   $0xffffffffffffffff,-0x48(%rbp)
  10215d:	ff 
  10215e:	e9 ae 00 00 00       	jmp    102211 <classify_object_over_fdes+0x115>
  102163:	4c 89 f6             	mov    %r14,%rsi
  102166:	0f b6 f8             	movzbl %al,%edi
  102169:	e8 67 fd ff ff       	call   101ed5 <base_from_object>
  10216e:	48 89 c6             	mov    %rax,%rsi
  102171:	41 8b 46 20          	mov    0x20(%r14),%eax
  102175:	89 c2                	mov    %eax,%edx
  102177:	66 81 e2 f8 07       	and    $0x7f8,%dx
  10217c:	66 81 fa f8 07       	cmp    $0x7f8,%dx
  102181:	75 14                	jne    102197 <classify_object_over_fdes+0x9b>
  102183:	41 0f b6 d4          	movzbl %r12b,%edx
  102187:	66 25 07 f8          	and    $0xf807,%ax
  10218b:	c1 e2 03             	shl    $0x3,%edx
  10218e:	09 d0                	or     %edx,%eax
  102190:	66 41 89 46 20       	mov    %ax,0x20(%r14)
  102195:	eb 11                	jmp    1021a8 <classify_object_over_fdes+0xac>
  102197:	66 c1 e8 03          	shr    $0x3,%ax
  10219b:	0f b6 c0             	movzbl %al,%eax
  10219e:	44 39 e0             	cmp    %r12d,%eax
  1021a1:	74 05                	je     1021a8 <classify_object_over_fdes+0xac>
  1021a3:	41 80 4e 20 04       	orb    $0x4,0x20(%r14)
  1021a8:	41 0f b6 fc          	movzbl %r12b,%edi
  1021ac:	49 8d 57 08          	lea    0x8(%r15),%rdx
  1021b0:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
  1021b4:	48 89 75 a8          	mov    %rsi,-0x58(%rbp)
  1021b8:	89 7d b4             	mov    %edi,-0x4c(%rbp)
  1021bb:	e8 4a fd ff ff       	call   101f0a <read_encoded_value_with_base>
  1021c0:	8b 7d b4             	mov    -0x4c(%rbp),%edi
  1021c3:	e8 ca fc ff ff       	call   101e92 <size_of_encoded_value>
  1021c8:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
  1021cc:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  1021d0:	83 f8 07             	cmp    $0x7,%eax
  1021d3:	77 12                	ja     1021e7 <classify_object_over_fdes+0xeb>
  1021d5:	8d 0c c5 00 00 00 00 	lea    0x0(,%rax,8),%ecx
  1021dc:	ba 01 00 00 00       	mov    $0x1,%edx
  1021e1:	48 d3 e2             	shl    %cl,%rdx
  1021e4:	48 ff ca             	dec    %rdx
  1021e7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1021eb:	48 85 d0             	test   %rdx,%rax
  1021ee:	74 0e                	je     1021fe <classify_object_over_fdes+0x102>
  1021f0:	48 ff 45 b8          	incq   -0x48(%rbp)
  1021f4:	49 3b 06             	cmp    (%r14),%rax
  1021f7:	73 0b                	jae    102204 <classify_object_over_fdes+0x108>
  1021f9:	49 89 06             	mov    %rax,(%r14)
  1021fc:	eb 06                	jmp    102204 <classify_object_over_fdes+0x108>
  1021fe:	48 89 d8             	mov    %rbx,%rax
  102201:	48 89 c3             	mov    %rax,%rbx
  102204:	4f 8d 7c 2f 04       	lea    0x4(%r15,%r13,1),%r15
  102209:	48 89 d8             	mov    %rbx,%rax
  10220c:	e9 0f ff ff ff       	jmp    102120 <classify_object_over_fdes+0x24>
  102211:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  102215:	48 83 c4 38          	add    $0x38,%rsp
  102219:	5b                   	pop    %rbx
  10221a:	41 5c                	pop    %r12
  10221c:	41 5d                	pop    %r13
  10221e:	41 5e                	pop    %r14
  102220:	41 5f                	pop    %r15
  102222:	5d                   	pop    %rbp
  102223:	c3                   	ret    

0000000000102224 <linear_search_fdes>:
  102224:	55                   	push   %rbp
  102225:	48 89 e5             	mov    %rsp,%rbp
  102228:	41 57                	push   %r15
  10222a:	49 89 f7             	mov    %rsi,%r15
  10222d:	48 89 fe             	mov    %rdi,%rsi
  102230:	41 56                	push   %r14
  102232:	41 55                	push   %r13
  102234:	41 54                	push   %r12
  102236:	49 89 fc             	mov    %rdi,%r12
  102239:	53                   	push   %rbx
  10223a:	48 83 ec 38          	sub    $0x38,%rsp
  10223e:	8b 5f 20             	mov    0x20(%rdi),%ebx
  102241:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  102245:	66 c1 eb 03          	shr    $0x3,%bx
  102249:	0f b6 db             	movzbl %bl,%ebx
  10224c:	89 df                	mov    %ebx,%edi
  10224e:	e8 82 fc ff ff       	call   101ed5 <base_from_object>
  102253:	49 89 c2             	mov    %rax,%r10
  102256:	31 c0                	xor    %eax,%eax
  102258:	45 8b 2f             	mov    (%r15),%r13d
  10225b:	45 85 ed             	test   %r13d,%r13d
  10225e:	0f 84 dc 00 00 00    	je     102340 <linear_search_fdes+0x11c>
  102264:	49 63 57 04          	movslq 0x4(%r15),%rdx
  102268:	49 89 c1             	mov    %rax,%r9
  10226b:	85 d2                	test   %edx,%edx
  10226d:	0f 84 c0 00 00 00    	je     102333 <linear_search_fdes+0x10f>
  102273:	41 f6 44 24 20 04    	testb  $0x4,0x20(%r12)
  102279:	74 2c                	je     1022a7 <linear_search_fdes+0x83>
  10227b:	4d 8d 4f 04          	lea    0x4(%r15),%r9
  10227f:	49 29 d1             	sub    %rdx,%r9
  102282:	4c 39 c8             	cmp    %r9,%rax
  102285:	74 20                	je     1022a7 <linear_search_fdes+0x83>
  102287:	4c 89 cf             	mov    %r9,%rdi
  10228a:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
  10228e:	e8 9c fd ff ff       	call   10202f <get_cie_encoding>
  102293:	4c 89 e6             	mov    %r12,%rsi
  102296:	0f b6 f8             	movzbl %al,%edi
  102299:	89 c3                	mov    %eax,%ebx
  10229b:	e8 35 fc ff ff       	call   101ed5 <base_from_object>
  1022a0:	4c 8b 4d b0          	mov    -0x50(%rbp),%r9
  1022a4:	49 89 c2             	mov    %rax,%r10
  1022a7:	85 db                	test   %ebx,%ebx
  1022a9:	75 25                	jne    1022d0 <linear_search_fdes+0xac>
  1022ab:	49 8b 47 08          	mov    0x8(%r15),%rax
  1022af:	49 8b 57 10          	mov    0x10(%r15),%rdx
  1022b3:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  1022b7:	48 85 c0             	test   %rax,%rax
  1022ba:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  1022be:	74 73                	je     102333 <linear_search_fdes+0x10f>
  1022c0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  1022c4:	48 2b 45 c0          	sub    -0x40(%rbp),%rax
  1022c8:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  1022cc:	73 65                	jae    102333 <linear_search_fdes+0x10f>
  1022ce:	eb 73                	jmp    102343 <linear_search_fdes+0x11f>
  1022d0:	44 0f b6 f3          	movzbl %bl,%r14d
  1022d4:	4c 89 d6             	mov    %r10,%rsi
  1022d7:	49 8d 57 08          	lea    0x8(%r15),%rdx
  1022db:	4c 89 4d a8          	mov    %r9,-0x58(%rbp)
  1022df:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  1022e3:	44 89 f7             	mov    %r14d,%edi
  1022e6:	4c 89 55 b0          	mov    %r10,-0x50(%rbp)
  1022ea:	e8 1b fc ff ff       	call   101f0a <read_encoded_value_with_base>
  1022ef:	89 df                	mov    %ebx,%edi
  1022f1:	31 f6                	xor    %esi,%esi
  1022f3:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
  1022f7:	48 89 c2             	mov    %rax,%rdx
  1022fa:	83 e7 0f             	and    $0xf,%edi
  1022fd:	e8 08 fc ff ff       	call   101f0a <read_encoded_value_with_base>
  102302:	44 89 f7             	mov    %r14d,%edi
  102305:	e8 88 fb ff ff       	call   101e92 <size_of_encoded_value>
  10230a:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
  10230e:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
  102312:	4c 8b 4d a8          	mov    -0x58(%rbp),%r9
  102316:	83 f8 07             	cmp    $0x7,%eax
  102319:	77 12                	ja     10232d <linear_search_fdes+0x109>
  10231b:	8d 0c c5 00 00 00 00 	lea    0x0(,%rax,8),%ecx
  102322:	ba 01 00 00 00       	mov    $0x1,%edx
  102327:	48 d3 e2             	shl    %cl,%rdx
  10232a:	48 ff ca             	dec    %rdx
  10232d:	48 23 55 c0          	and    -0x40(%rbp),%rdx
  102331:	eb 8b                	jmp    1022be <linear_search_fdes+0x9a>
  102333:	4f 8d 7c 2f 04       	lea    0x4(%r15,%r13,1),%r15
  102338:	4c 89 c8             	mov    %r9,%rax
  10233b:	e9 18 ff ff ff       	jmp    102258 <linear_search_fdes+0x34>
  102340:	45 31 ff             	xor    %r15d,%r15d
  102343:	48 83 c4 38          	add    $0x38,%rsp
  102347:	4c 89 f8             	mov    %r15,%rax
  10234a:	5b                   	pop    %rbx
  10234b:	41 5c                	pop    %r12
  10234d:	41 5d                	pop    %r13
  10234f:	41 5e                	pop    %r14
  102351:	41 5f                	pop    %r15
  102353:	5d                   	pop    %rbp
  102354:	c3                   	ret    

0000000000102355 <get_fde_encoding>:
  102355:	48 89 f8             	mov    %rdi,%rax
  102358:	48 8d 7f 04          	lea    0x4(%rdi),%rdi
  10235c:	48 63 40 04          	movslq 0x4(%rax),%rax
  102360:	48 29 c7             	sub    %rax,%rdi
  102363:	e9 c7 fc ff ff       	jmp    10202f <get_cie_encoding>

0000000000102368 <fde_mixed_encoding_compare>:
  102368:	55                   	push   %rbp
  102369:	48 89 e5             	mov    %rsp,%rbp
  10236c:	41 56                	push   %r14
  10236e:	41 55                	push   %r13
  102370:	49 89 fd             	mov    %rdi,%r13
  102373:	48 89 f7             	mov    %rsi,%rdi
  102376:	41 54                	push   %r12
  102378:	49 89 f4             	mov    %rsi,%r12
  10237b:	53                   	push   %rbx
  10237c:	48 89 d3             	mov    %rdx,%rbx
  10237f:	48 83 ec 10          	sub    $0x10,%rsp
  102383:	e8 cd ff ff ff       	call   102355 <get_fde_encoding>
  102388:	4c 89 ee             	mov    %r13,%rsi
  10238b:	44 0f b6 f0          	movzbl %al,%r14d
  10238f:	44 89 f7             	mov    %r14d,%edi
  102392:	e8 3e fb ff ff       	call   101ed5 <base_from_object>
  102397:	49 8d 54 24 08       	lea    0x8(%r12),%rdx
  10239c:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  1023a0:	44 89 f7             	mov    %r14d,%edi
  1023a3:	48 89 c6             	mov    %rax,%rsi
  1023a6:	e8 5f fb ff ff       	call   101f0a <read_encoded_value_with_base>
  1023ab:	48 89 df             	mov    %rbx,%rdi
  1023ae:	e8 a2 ff ff ff       	call   102355 <get_fde_encoding>
  1023b3:	4c 89 ee             	mov    %r13,%rsi
  1023b6:	44 0f b6 e0          	movzbl %al,%r12d
  1023ba:	44 89 e7             	mov    %r12d,%edi
  1023bd:	e8 13 fb ff ff       	call   101ed5 <base_from_object>
  1023c2:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  1023c6:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  1023ca:	44 89 e7             	mov    %r12d,%edi
  1023cd:	48 89 c6             	mov    %rax,%rsi
  1023d0:	e8 35 fb ff ff       	call   101f0a <read_encoded_value_with_base>
  1023d5:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  1023d9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  1023dd:	b8 01 00 00 00       	mov    $0x1,%eax
  1023e2:	48 39 ca             	cmp    %rcx,%rdx
  1023e5:	72 05                	jb     1023ec <fde_mixed_encoding_compare+0x84>
  1023e7:	48 39 d1             	cmp    %rdx,%rcx
  1023ea:	19 c0                	sbb    %eax,%eax
  1023ec:	5a                   	pop    %rdx
  1023ed:	59                   	pop    %rcx
  1023ee:	5b                   	pop    %rbx
  1023ef:	41 5c                	pop    %r12
  1023f1:	41 5d                	pop    %r13
  1023f3:	41 5e                	pop    %r14
  1023f5:	5d                   	pop    %rbp
  1023f6:	c3                   	ret    

00000000001023f7 <add_fdes>:
  1023f7:	55                   	push   %rbp
  1023f8:	48 89 e5             	mov    %rsp,%rbp
  1023fb:	41 57                	push   %r15
  1023fd:	41 56                	push   %r14
  1023ff:	41 55                	push   %r13
  102401:	49 89 fd             	mov    %rdi,%r13
  102404:	41 54                	push   %r12
  102406:	49 89 d4             	mov    %rdx,%r12
  102409:	53                   	push   %rbx
  10240a:	48 83 ec 38          	sub    $0x38,%rsp
  10240e:	8b 5f 20             	mov    0x20(%rdi),%ebx
  102411:	48 89 75 b8          	mov    %rsi,-0x48(%rbp)
  102415:	48 89 fe             	mov    %rdi,%rsi
  102418:	66 c1 eb 03          	shr    $0x3,%bx
  10241c:	0f b6 db             	movzbl %bl,%ebx
  10241f:	89 df                	mov    %ebx,%edi
  102421:	e8 af fa ff ff       	call   101ed5 <base_from_object>
  102426:	48 89 c6             	mov    %rax,%rsi
  102429:	31 c0                	xor    %eax,%eax
  10242b:	45 8b 34 24          	mov    (%r12),%r14d
  10242f:	45 85 f6             	test   %r14d,%r14d
  102432:	0f 84 ba 00 00 00    	je     1024f2 <add_fdes+0xfb>
  102438:	49 63 54 24 04       	movslq 0x4(%r12),%rdx
  10243d:	49 89 c7             	mov    %rax,%r15
  102440:	85 d2                	test   %edx,%edx
  102442:	0f 84 9d 00 00 00    	je     1024e5 <add_fdes+0xee>
  102448:	41 f6 45 20 04       	testb  $0x4,0x20(%r13)
  10244d:	74 28                	je     102477 <add_fdes+0x80>
  10244f:	4d 8d 44 24 04       	lea    0x4(%r12),%r8
  102454:	49 29 d0             	sub    %rdx,%r8
  102457:	4d 89 c7             	mov    %r8,%r15
  10245a:	4c 39 c0             	cmp    %r8,%rax
  10245d:	74 18                	je     102477 <add_fdes+0x80>
  10245f:	4c 89 c7             	mov    %r8,%rdi
  102462:	e8 c8 fb ff ff       	call   10202f <get_cie_encoding>
  102467:	4c 89 ee             	mov    %r13,%rsi
  10246a:	0f b6 f8             	movzbl %al,%edi
  10246d:	89 c3                	mov    %eax,%ebx
  10246f:	e8 61 fa ff ff       	call   101ed5 <base_from_object>
  102474:	48 89 c6             	mov    %rax,%rsi
  102477:	85 db                	test   %ebx,%ebx
  102479:	75 08                	jne    102483 <add_fdes+0x8c>
  10247b:	49 83 7c 24 08 00    	cmpq   $0x0,0x8(%r12)
  102481:	eb 43                	jmp    1024c6 <add_fdes+0xcf>
  102483:	0f b6 fb             	movzbl %bl,%edi
  102486:	49 8d 54 24 08       	lea    0x8(%r12),%rdx
  10248b:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
  10248f:	48 89 75 a8          	mov    %rsi,-0x58(%rbp)
  102493:	89 7d b4             	mov    %edi,-0x4c(%rbp)
  102496:	e8 6f fa ff ff       	call   101f0a <read_encoded_value_with_base>
  10249b:	8b 7d b4             	mov    -0x4c(%rbp),%edi
  10249e:	e8 ef f9 ff ff       	call   101e92 <size_of_encoded_value>
  1024a3:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
  1024a7:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  1024ab:	83 f8 07             	cmp    $0x7,%eax
  1024ae:	77 12                	ja     1024c2 <add_fdes+0xcb>
  1024b0:	8d 0c c5 00 00 00 00 	lea    0x0(,%rax,8),%ecx
  1024b7:	ba 01 00 00 00       	mov    $0x1,%edx
  1024bc:	48 d3 e2             	shl    %cl,%rdx
  1024bf:	48 ff ca             	dec    %rdx
  1024c2:	48 23 55 c8          	and    -0x38(%rbp),%rdx
  1024c6:	74 1d                	je     1024e5 <add_fdes+0xee>
  1024c8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  1024cc:	48 8b 00             	mov    (%rax),%rax
  1024cf:	48 85 c0             	test   %rax,%rax
  1024d2:	74 11                	je     1024e5 <add_fdes+0xee>
  1024d4:	48 8b 50 08          	mov    0x8(%rax),%rdx
  1024d8:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  1024dc:	48 89 48 08          	mov    %rcx,0x8(%rax)
  1024e0:	4c 89 64 d0 10       	mov    %r12,0x10(%rax,%rdx,8)
  1024e5:	4f 8d 64 34 04       	lea    0x4(%r12,%r14,1),%r12
  1024ea:	4c 89 f8             	mov    %r15,%rax
  1024ed:	e9 39 ff ff ff       	jmp    10242b <add_fdes+0x34>
  1024f2:	48 83 c4 38          	add    $0x38,%rsp
  1024f6:	5b                   	pop    %rbx
  1024f7:	41 5c                	pop    %r12
  1024f9:	41 5d                	pop    %r13
  1024fb:	41 5e                	pop    %r14
  1024fd:	41 5f                	pop    %r15
  1024ff:	5d                   	pop    %rbp
  102500:	c3                   	ret    

0000000000102501 <search_object>:
  102501:	55                   	push   %rbp
  102502:	48 89 e5             	mov    %rsp,%rbp
  102505:	41 57                	push   %r15
  102507:	41 56                	push   %r14
  102509:	41 55                	push   %r13
  10250b:	41 54                	push   %r12
  10250d:	53                   	push   %rbx
  10250e:	48 89 fb             	mov    %rdi,%rbx
  102511:	48 83 ec 58          	sub    $0x58,%rsp
  102515:	8a 47 20             	mov    0x20(%rdi),%al
  102518:	48 89 75 a8          	mov    %rsi,-0x58(%rbp)
  10251c:	a8 01                	test   $0x1,%al
  10251e:	74 14                	je     102534 <search_object+0x33>
  102520:	8a 43 20             	mov    0x20(%rbx),%al
  102523:	4c 8b 7b 18          	mov    0x18(%rbx),%r15
  102527:	a8 01                	test   $0x1,%al
  102529:	0f 85 bd 02 00 00    	jne    1027ec <search_object+0x2eb>
  10252f:	e9 22 04 00 00       	jmp    102956 <search_object+0x455>
  102534:	44 8b 67 20          	mov    0x20(%rdi),%r12d
  102538:	41 c1 ec 0b          	shr    $0xb,%r12d
  10253c:	4d 85 e4             	test   %r12,%r12
  10253f:	75 7c                	jne    1025bd <search_object+0xbc>
  102541:	4c 8b 77 18          	mov    0x18(%rdi),%r14
  102545:	a8 02                	test   $0x2,%al
  102547:	74 34                	je     10257d <search_object+0x7c>
  102549:	49 8b 36             	mov    (%r14),%rsi
  10254c:	48 85 f6             	test   %rsi,%rsi
  10254f:	74 3d                	je     10258e <search_object+0x8d>
  102551:	48 89 df             	mov    %rbx,%rdi
  102554:	e8 a3 fb ff ff       	call   1020fc <classify_object_over_fdes>
  102559:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  10255d:	75 15                	jne    102574 <search_object+0x73>
  10255f:	48 c7 43 20 f8 07 00 	movq   $0x7f8,0x20(%rbx)
  102566:	00 
  102567:	48 c7 43 18 c8 c6 11 	movq   $0x11c6c8,0x18(%rbx)
  10256e:	00 
  10256f:	e9 63 02 00 00       	jmp    1027d7 <search_object+0x2d6>
  102574:	49 01 c4             	add    %rax,%r12
  102577:	49 83 c6 08          	add    $0x8,%r14
  10257b:	eb cc                	jmp    102549 <search_object+0x48>
  10257d:	4c 89 f6             	mov    %r14,%rsi
  102580:	e8 77 fb ff ff       	call   1020fc <classify_object_over_fdes>
  102585:	49 89 c4             	mov    %rax,%r12
  102588:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  10258c:	74 d1                	je     10255f <search_object+0x5e>
  10258e:	8b 43 20             	mov    0x20(%rbx),%eax
  102591:	44 89 e2             	mov    %r12d,%edx
  102594:	c1 e2 0b             	shl    $0xb,%edx
  102597:	25 ff 07 00 00       	and    $0x7ff,%eax
  10259c:	09 d0                	or     %edx,%eax
  10259e:	89 43 20             	mov    %eax,0x20(%rbx)
  1025a1:	49 81 fc ff ff 1f 00 	cmp    $0x1fffff,%r12
  1025a8:	76 0a                	jbe    1025b4 <search_object+0xb3>
  1025aa:	25 ff 07 00 00       	and    $0x7ff,%eax
  1025af:	89 43 20             	mov    %eax,0x20(%rbx)
  1025b2:	eb 09                	jmp    1025bd <search_object+0xbc>
  1025b4:	4d 85 e4             	test   %r12,%r12
  1025b7:	0f 84 1a 02 00 00    	je     1027d7 <search_object+0x2d6>
  1025bd:	4e 8d 34 e5 10 00 00 	lea    0x10(,%r12,8),%r14
  1025c4:	00 
  1025c5:	4c 89 f7             	mov    %r14,%rdi
  1025c8:	e8 b3 0e 00 00       	call   103480 <malloc>
  1025cd:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  1025d1:	49 89 c5             	mov    %rax,%r13
  1025d4:	48 85 c0             	test   %rax,%rax
  1025d7:	0f 84 fa 01 00 00    	je     1027d7 <search_object+0x2d6>
  1025dd:	31 f6                	xor    %esi,%esi
  1025df:	4c 89 f7             	mov    %r14,%rdi
  1025e2:	48 89 70 08          	mov    %rsi,0x8(%rax)
  1025e6:	e8 95 0e 00 00       	call   103480 <malloc>
  1025eb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  1025ef:	49 89 c6             	mov    %rax,%r14
  1025f2:	48 85 c0             	test   %rax,%rax
  1025f5:	74 06                	je     1025fd <search_object+0xfc>
  1025f7:	31 c9                	xor    %ecx,%ecx
  1025f9:	48 89 48 08          	mov    %rcx,0x8(%rax)
  1025fd:	44 8a 7b 20          	mov    0x20(%rbx),%r15b
  102601:	48 8b 43 18          	mov    0x18(%rbx),%rax
  102605:	41 f6 c7 02          	test   $0x2,%r15b
  102609:	74 22                	je     10262d <search_object+0x12c>
  10260b:	48 8b 10             	mov    (%rax),%rdx
  10260e:	48 85 d2             	test   %rdx,%rdx
  102611:	74 29                	je     10263c <search_object+0x13b>
  102613:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  102617:	48 89 df             	mov    %rbx,%rdi
  10261a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10261e:	e8 d4 fd ff ff       	call   1023f7 <add_fdes>
  102623:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  102627:	48 83 c0 08          	add    $0x8,%rax
  10262b:	eb de                	jmp    10260b <search_object+0x10a>
  10262d:	48 89 c2             	mov    %rax,%rdx
  102630:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  102634:	48 89 df             	mov    %rbx,%rdi
  102637:	e8 bb fd ff ff       	call   1023f7 <add_fdes>
  10263c:	4d 39 65 08          	cmp    %r12,0x8(%r13)
  102640:	74 05                	je     102647 <search_object+0x146>
  102642:	e8 7d f7 00 00       	call   111dc4 <abort>
  102647:	41 80 e7 04          	and    $0x4,%r15b
  10264b:	48 c7 45 a0 68 23 10 	movq   $0x102368,-0x60(%rbp)
  102652:	00 
  102653:	75 18                	jne    10266d <search_object+0x16c>
  102655:	66 f7 43 20 f8 07    	testw  $0x7f8,0x20(%rbx)
  10265b:	ba bc 1f 10 00       	mov    $0x101fbc,%edx
  102660:	b8 55 1d 10 00       	mov    $0x101d55,%eax
  102665:	48 0f 45 c2          	cmovne %rdx,%rax
  102669:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  10266d:	4d 85 f6             	test   %r14,%r14
  102670:	0f 84 42 01 00 00    	je     1027b8 <search_object+0x2b7>
  102676:	4d 8d 4d 10          	lea    0x10(%r13),%r9
  10267a:	45 31 d2             	xor    %r10d,%r10d
  10267d:	41 bf 18 20 12 00    	mov    $0x122018,%r15d
  102683:	4d 89 cb             	mov    %r9,%r11
  102686:	49 81 ff 18 20 12 00 	cmp    $0x122018,%r15
  10268d:	74 45                	je     1026d4 <search_object+0x1d3>
  10268f:	49 8b 31             	mov    (%r9),%rsi
  102692:	49 8b 17             	mov    (%r15),%rdx
  102695:	4c 89 5d 88          	mov    %r11,-0x78(%rbp)
  102699:	48 89 df             	mov    %rbx,%rdi
  10269c:	4c 89 55 90          	mov    %r10,-0x70(%rbp)
  1026a0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  1026a4:	4c 89 4d 98          	mov    %r9,-0x68(%rbp)
  1026a8:	ff d0                	call   *%rax
  1026aa:	4c 8b 4d 98          	mov    -0x68(%rbp),%r9
  1026ae:	4c 8b 55 90          	mov    -0x70(%rbp),%r10
  1026b2:	85 c0                	test   %eax,%eax
  1026b4:	4c 8b 5d 88          	mov    -0x78(%rbp),%r11
  1026b8:	79 1a                	jns    1026d4 <search_object+0x1d3>
  1026ba:	4c 89 f8             	mov    %r15,%rax
  1026bd:	31 d2                	xor    %edx,%edx
  1026bf:	4c 29 d8             	sub    %r11,%rax
  1026c2:	48 c1 f8 03          	sar    $0x3,%rax
  1026c6:	48 83 c0 02          	add    $0x2,%rax
  1026ca:	4d 8b 3c c6          	mov    (%r14,%rax,8),%r15
  1026ce:	49 89 14 c6          	mov    %rdx,(%r14,%rax,8)
  1026d2:	eb b2                	jmp    102686 <search_object+0x185>
  1026d4:	4f 89 7c d6 10       	mov    %r15,0x10(%r14,%r10,8)
  1026d9:	49 ff c2             	inc    %r10
  1026dc:	4d 89 cf             	mov    %r9,%r15
  1026df:	49 83 c1 08          	add    $0x8,%r9
  1026e3:	4d 39 d4             	cmp    %r10,%r12
  1026e6:	75 9e                	jne    102686 <search_object+0x185>
  1026e8:	31 d2                	xor    %edx,%edx
  1026ea:	31 c0                	xor    %eax,%eax
  1026ec:	31 f6                	xor    %esi,%esi
  1026ee:	49 83 7c f6 10 00    	cmpq   $0x0,0x10(%r14,%rsi,8)
  1026f4:	49 8b 7c f5 10       	mov    0x10(%r13,%rsi,8),%rdi
  1026f9:	74 0a                	je     102705 <search_object+0x204>
  1026fb:	49 89 7c c5 10       	mov    %rdi,0x10(%r13,%rax,8)
  102700:	48 ff c0             	inc    %rax
  102703:	eb 08                	jmp    10270d <search_object+0x20c>
  102705:	49 89 7c d6 10       	mov    %rdi,0x10(%r14,%rdx,8)
  10270a:	48 ff c2             	inc    %rdx
  10270d:	48 ff c6             	inc    %rsi
  102710:	49 39 f4             	cmp    %rsi,%r12
  102713:	75 d9                	jne    1026ee <search_object+0x1ed>
  102715:	49 89 45 08          	mov    %rax,0x8(%r13)
  102719:	48 01 d0             	add    %rdx,%rax
  10271c:	49 89 56 08          	mov    %rdx,0x8(%r14)
  102720:	49 39 c4             	cmp    %rax,%r12
  102723:	0f 85 19 ff ff ff    	jne    102642 <search_object+0x141>
  102729:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  10272d:	4c 89 f2             	mov    %r14,%rdx
  102730:	48 89 df             	mov    %rbx,%rdi
  102733:	e8 cb f6 ff ff       	call   101e03 <frame_heapsort>
  102738:	4d 8b 66 08          	mov    0x8(%r14),%r12
  10273c:	4d 85 e4             	test   %r12,%r12
  10273f:	74 6d                	je     1027ae <search_object+0x2ad>
  102741:	4d 8b 7d 08          	mov    0x8(%r13),%r15
  102745:	4c 89 e0             	mov    %r12,%rax
  102748:	49 ff cc             	dec    %r12
  10274b:	49 8b 54 c6 08       	mov    0x8(%r14,%rax,8),%rdx
  102750:	4d 8d 54 c5 00       	lea    0x0(%r13,%rax,8),%r10
  102755:	4c 89 55 88          	mov    %r10,-0x78(%rbp)
  102759:	4d 85 ff             	test   %r15,%r15
  10275c:	74 39                	je     102797 <search_object+0x296>
  10275e:	4d 8d 4f ff          	lea    -0x1(%r15),%r9
  102762:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  102766:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10276a:	48 89 df             	mov    %rbx,%rdi
  10276d:	4c 89 4d 90          	mov    %r9,-0x70(%rbp)
  102771:	4b 8b 74 cd 10       	mov    0x10(%r13,%r9,8),%rsi
  102776:	ff d0                	call   *%rax
  102778:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  10277c:	4c 8b 4d 90          	mov    -0x70(%rbp),%r9
  102780:	85 c0                	test   %eax,%eax
  102782:	4c 8b 55 88          	mov    -0x78(%rbp),%r10
  102786:	7e 0f                	jle    102797 <search_object+0x296>
  102788:	4b 8b 44 cd 10       	mov    0x10(%r13,%r9,8),%rax
  10278d:	4d 89 cf             	mov    %r9,%r15
  102790:	4b 89 44 ca 10       	mov    %rax,0x10(%r10,%r9,8)
  102795:	eb be                	jmp    102755 <search_object+0x254>
  102797:	4b 8d 44 3c 02       	lea    0x2(%r12,%r15,1),%rax
  10279c:	49 89 54 c5 00       	mov    %rdx,0x0(%r13,%rax,8)
  1027a1:	4d 85 e4             	test   %r12,%r12
  1027a4:	75 9f                	jne    102745 <search_object+0x244>
  1027a6:	49 8b 46 08          	mov    0x8(%r14),%rax
  1027aa:	49 01 45 08          	add    %rax,0x8(%r13)
  1027ae:	4c 89 f7             	mov    %r14,%rdi
  1027b1:	e8 da 0c 00 00       	call   103490 <free>
  1027b6:	eb 0f                	jmp    1027c7 <search_object+0x2c6>
  1027b8:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  1027bc:	4c 89 ea             	mov    %r13,%rdx
  1027bf:	48 89 df             	mov    %rbx,%rdi
  1027c2:	e8 3c f6 ff ff       	call   101e03 <frame_heapsort>
  1027c7:	48 8b 43 18          	mov    0x18(%rbx),%rax
  1027cb:	80 4b 20 01          	orb    $0x1,0x20(%rbx)
  1027cf:	4c 89 6b 18          	mov    %r13,0x18(%rbx)
  1027d3:	49 89 45 00          	mov    %rax,0x0(%r13)
  1027d7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  1027db:	48 3b 03             	cmp    (%rbx),%rax
  1027de:	0f 83 3c fd ff ff    	jae    102520 <search_object+0x1f>
  1027e4:	45 31 e4             	xor    %r12d,%r12d
  1027e7:	e9 b1 01 00 00       	jmp    10299d <search_object+0x49c>
  1027ec:	a8 04                	test   $0x4,%al
  1027ee:	0f 84 8d 00 00 00    	je     102881 <search_object+0x380>
  1027f4:	4d 8b 4f 08          	mov    0x8(%r15),%r9
  1027f8:	45 31 d2             	xor    %r10d,%r10d
  1027fb:	4d 39 ca             	cmp    %r9,%r10
  1027fe:	73 e4                	jae    1027e4 <search_object+0x2e3>
  102800:	4f 8d 34 0a          	lea    (%r10,%r9,1),%r14
  102804:	4c 89 55 98          	mov    %r10,-0x68(%rbp)
  102808:	49 d1 ee             	shr    %r14
  10280b:	4c 89 4d 90          	mov    %r9,-0x70(%rbp)
  10280f:	4f 8b 64 f7 10       	mov    0x10(%r15,%r14,8),%r12
  102814:	4c 89 e7             	mov    %r12,%rdi
  102817:	e8 39 fb ff ff       	call   102355 <get_fde_encoding>
  10281c:	48 89 de             	mov    %rbx,%rsi
  10281f:	0f b6 f8             	movzbl %al,%edi
  102822:	41 89 c5             	mov    %eax,%r13d
  102825:	89 7d a0             	mov    %edi,-0x60(%rbp)
  102828:	e8 a8 f6 ff ff       	call   101ed5 <base_from_object>
  10282d:	8b 7d a0             	mov    -0x60(%rbp),%edi
  102830:	49 8d 54 24 08       	lea    0x8(%r12),%rdx
  102835:	48 8d 4d b8          	lea    -0x48(%rbp),%rcx
  102839:	48 89 c6             	mov    %rax,%rsi
  10283c:	e8 c9 f6 ff ff       	call   101f0a <read_encoded_value_with_base>
  102841:	44 89 ef             	mov    %r13d,%edi
  102844:	31 f6                	xor    %esi,%esi
  102846:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  10284a:	83 e7 0f             	and    $0xf,%edi
  10284d:	48 89 c2             	mov    %rax,%rdx
  102850:	e8 b5 f6 ff ff       	call   101f0a <read_encoded_value_with_base>
  102855:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  102859:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  10285d:	4c 8b 55 98          	mov    -0x68(%rbp),%r10
  102861:	72 16                	jb     102879 <search_object+0x378>
  102863:	48 03 45 c0          	add    -0x40(%rbp),%rax
  102867:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  10286b:	0f 82 2c 01 00 00    	jb     10299d <search_object+0x49c>
  102871:	4d 8d 56 01          	lea    0x1(%r14),%r10
  102875:	4c 8b 75 90          	mov    -0x70(%rbp),%r14
  102879:	4d 89 f1             	mov    %r14,%r9
  10287c:	e9 7a ff ff ff       	jmp    1027fb <search_object+0x2fa>
  102881:	44 8b 73 20          	mov    0x20(%rbx),%r14d
  102885:	66 41 f7 c6 f8 07    	test   $0x7f8,%r14w
  10288b:	75 40                	jne    1028cd <search_object+0x3cc>
  10288d:	49 8b 4f 08          	mov    0x8(%r15),%rcx
  102891:	31 f6                	xor    %esi,%esi
  102893:	48 39 ce             	cmp    %rcx,%rsi
  102896:	0f 83 48 ff ff ff    	jae    1027e4 <search_object+0x2e3>
  10289c:	48 8d 04 31          	lea    (%rcx,%rsi,1),%rax
  1028a0:	48 d1 e8             	shr    %rax
  1028a3:	4d 8b 64 c7 10       	mov    0x10(%r15,%rax,8),%r12
  1028a8:	49 8b 54 24 08       	mov    0x8(%r12),%rdx
  1028ad:	48 39 55 a8          	cmp    %rdx,-0x58(%rbp)
  1028b1:	72 15                	jb     1028c8 <search_object+0x3c7>
  1028b3:	49 03 54 24 10       	add    0x10(%r12),%rdx
  1028b8:	48 39 55 a8          	cmp    %rdx,-0x58(%rbp)
  1028bc:	0f 82 db 00 00 00    	jb     10299d <search_object+0x49c>
  1028c2:	48 8d 70 01          	lea    0x1(%rax),%rsi
  1028c6:	eb cb                	jmp    102893 <search_object+0x392>
  1028c8:	48 89 c1             	mov    %rax,%rcx
  1028cb:	eb c6                	jmp    102893 <search_object+0x392>
  1028cd:	66 41 c1 ee 03       	shr    $0x3,%r14w
  1028d2:	48 89 de             	mov    %rbx,%rsi
  1028d5:	45 0f b6 ee          	movzbl %r14b,%r13d
  1028d9:	44 88 75 a0          	mov    %r14b,-0x60(%rbp)
  1028dd:	45 31 f6             	xor    %r14d,%r14d
  1028e0:	44 89 ef             	mov    %r13d,%edi
  1028e3:	e8 ed f5 ff ff       	call   101ed5 <base_from_object>
  1028e8:	49 8b 5f 08          	mov    0x8(%r15),%rbx
  1028ec:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  1028f0:	49 39 de             	cmp    %rbx,%r14
  1028f3:	0f 83 eb fe ff ff    	jae    1027e4 <search_object+0x2e3>
  1028f9:	4d 8d 0c 1e          	lea    (%r14,%rbx,1),%r9
  1028fd:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
  102901:	48 8d 4d b8          	lea    -0x48(%rbp),%rcx
  102905:	44 89 ef             	mov    %r13d,%edi
  102908:	49 d1 e9             	shr    %r9
  10290b:	4f 8b 64 cf 10       	mov    0x10(%r15,%r9,8),%r12
  102910:	4c 89 4d 90          	mov    %r9,-0x70(%rbp)
  102914:	49 8d 54 24 08       	lea    0x8(%r12),%rdx
  102919:	e8 ec f5 ff ff       	call   101f0a <read_encoded_value_with_base>
  10291e:	8b 7d a0             	mov    -0x60(%rbp),%edi
  102921:	31 f6                	xor    %esi,%esi
  102923:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  102927:	48 89 c2             	mov    %rax,%rdx
  10292a:	83 e7 0f             	and    $0xf,%edi
  10292d:	e8 d8 f5 ff ff       	call   101f0a <read_encoded_value_with_base>
  102932:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  102936:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  10293a:	4c 8b 4d 90          	mov    -0x70(%rbp),%r9
  10293e:	72 11                	jb     102951 <search_object+0x450>
  102940:	48 03 45 c0          	add    -0x40(%rbp),%rax
  102944:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  102948:	72 53                	jb     10299d <search_object+0x49c>
  10294a:	4d 8d 71 01          	lea    0x1(%r9),%r14
  10294e:	49 89 d9             	mov    %rbx,%r9
  102951:	4c 89 cb             	mov    %r9,%rbx
  102954:	eb 9a                	jmp    1028f0 <search_object+0x3ef>
  102956:	a8 02                	test   $0x2,%al
  102958:	74 26                	je     102980 <search_object+0x47f>
  10295a:	49 8b 37             	mov    (%r15),%rsi
  10295d:	48 85 f6             	test   %rsi,%rsi
  102960:	0f 84 7e fe ff ff    	je     1027e4 <search_object+0x2e3>
  102966:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  10296a:	48 89 df             	mov    %rbx,%rdi
  10296d:	e8 b2 f8 ff ff       	call   102224 <linear_search_fdes>
  102972:	49 89 c4             	mov    %rax,%r12
  102975:	48 85 c0             	test   %rax,%rax
  102978:	75 23                	jne    10299d <search_object+0x49c>
  10297a:	49 83 c7 08          	add    $0x8,%r15
  10297e:	eb da                	jmp    10295a <search_object+0x459>
  102980:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  102984:	48 83 c4 58          	add    $0x58,%rsp
  102988:	4c 89 fe             	mov    %r15,%rsi
  10298b:	48 89 df             	mov    %rbx,%rdi
  10298e:	5b                   	pop    %rbx
  10298f:	41 5c                	pop    %r12
  102991:	41 5d                	pop    %r13
  102993:	41 5e                	pop    %r14
  102995:	41 5f                	pop    %r15
  102997:	5d                   	pop    %rbp
  102998:	e9 87 f8 ff ff       	jmp    102224 <linear_search_fdes>
  10299d:	48 83 c4 58          	add    $0x58,%rsp
  1029a1:	4c 89 e0             	mov    %r12,%rax
  1029a4:	5b                   	pop    %rbx
  1029a5:	41 5c                	pop    %r12
  1029a7:	41 5d                	pop    %r13
  1029a9:	41 5e                	pop    %r14
  1029ab:	41 5f                	pop    %r15
  1029ad:	5d                   	pop    %rbp
  1029ae:	c3                   	ret    

00000000001029af <__register_frame_info_bases>:
  1029af:	48 85 ff             	test   %rdi,%rdi
  1029b2:	74 32                	je     1029e6 <__register_frame_info_bases+0x37>
  1029b4:	83 3f 00             	cmpl   $0x0,(%rdi)
  1029b7:	74 2d                	je     1029e6 <__register_frame_info_bases+0x37>
  1029b9:	48 8b 05 68 f6 01 00 	mov    0x1f668(%rip),%rax        # 122028 <unseen_objects>
  1029c0:	48 c7 06 ff ff ff ff 	movq   $0xffffffffffffffff,(%rsi)
  1029c7:	48 89 56 08          	mov    %rdx,0x8(%rsi)
  1029cb:	48 89 4e 10          	mov    %rcx,0x10(%rsi)
  1029cf:	48 89 7e 18          	mov    %rdi,0x18(%rsi)
  1029d3:	48 c7 46 20 f8 07 00 	movq   $0x7f8,0x20(%rsi)
  1029da:	00 
  1029db:	48 89 46 28          	mov    %rax,0x28(%rsi)
  1029df:	48 89 35 42 f6 01 00 	mov    %rsi,0x1f642(%rip)        # 122028 <unseen_objects>
  1029e6:	c3                   	ret    

00000000001029e7 <__register_frame_info>:
  1029e7:	31 c9                	xor    %ecx,%ecx
  1029e9:	31 d2                	xor    %edx,%edx
  1029eb:	eb c2                	jmp    1029af <__register_frame_info_bases>

00000000001029ed <__register_frame>:
  1029ed:	83 3f 00             	cmpl   $0x0,(%rdi)
  1029f0:	74 1e                	je     102a10 <__register_frame+0x23>
  1029f2:	55                   	push   %rbp
  1029f3:	48 89 e5             	mov    %rsp,%rbp
  1029f6:	53                   	push   %rbx
  1029f7:	48 89 fb             	mov    %rdi,%rbx
  1029fa:	bf 30 00 00 00       	mov    $0x30,%edi
  1029ff:	50                   	push   %rax
  102a00:	e8 7b 0a 00 00       	call   103480 <malloc>
  102a05:	5a                   	pop    %rdx
  102a06:	48 89 df             	mov    %rbx,%rdi
  102a09:	5b                   	pop    %rbx
  102a0a:	48 89 c6             	mov    %rax,%rsi
  102a0d:	5d                   	pop    %rbp
  102a0e:	eb d7                	jmp    1029e7 <__register_frame_info>
  102a10:	c3                   	ret    

0000000000102a11 <__register_frame_info_table_bases>:
  102a11:	48 8b 05 10 f6 01 00 	mov    0x1f610(%rip),%rax        # 122028 <unseen_objects>
  102a18:	48 c7 06 ff ff ff ff 	movq   $0xffffffffffffffff,(%rsi)
  102a1f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
  102a23:	48 89 4e 10          	mov    %rcx,0x10(%rsi)
  102a27:	48 89 7e 18          	mov    %rdi,0x18(%rsi)
  102a2b:	48 c7 46 20 fa 07 00 	movq   $0x7fa,0x20(%rsi)
  102a32:	00 
  102a33:	48 89 46 28          	mov    %rax,0x28(%rsi)
  102a37:	48 89 35 ea f5 01 00 	mov    %rsi,0x1f5ea(%rip)        # 122028 <unseen_objects>
  102a3e:	c3                   	ret    

0000000000102a3f <__register_frame_info_table>:
  102a3f:	31 c9                	xor    %ecx,%ecx
  102a41:	31 d2                	xor    %edx,%edx
  102a43:	eb cc                	jmp    102a11 <__register_frame_info_table_bases>

0000000000102a45 <__register_frame_table>:
  102a45:	55                   	push   %rbp
  102a46:	48 89 e5             	mov    %rsp,%rbp
  102a49:	53                   	push   %rbx
  102a4a:	48 89 fb             	mov    %rdi,%rbx
  102a4d:	bf 30 00 00 00       	mov    $0x30,%edi
  102a52:	50                   	push   %rax
  102a53:	e8 28 0a 00 00       	call   103480 <malloc>
  102a58:	5a                   	pop    %rdx
  102a59:	48 89 df             	mov    %rbx,%rdi
  102a5c:	5b                   	pop    %rbx
  102a5d:	48 89 c6             	mov    %rax,%rsi
  102a60:	5d                   	pop    %rbp
  102a61:	eb dc                	jmp    102a3f <__register_frame_info_table>

0000000000102a63 <__deregister_frame_info_bases>:
  102a63:	55                   	push   %rbp
  102a64:	48 89 e5             	mov    %rsp,%rbp
  102a67:	53                   	push   %rbx
  102a68:	51                   	push   %rcx
  102a69:	48 85 ff             	test   %rdi,%rdi
  102a6c:	74 77                	je     102ae5 <__deregister_frame_info_bases+0x82>
  102a6e:	83 3f 00             	cmpl   $0x0,(%rdi)
  102a71:	74 72                	je     102ae5 <__deregister_frame_info_bases+0x82>
  102a73:	48 8b 1d ae f5 01 00 	mov    0x1f5ae(%rip),%rbx        # 122028 <unseen_objects>
  102a7a:	b8 28 20 12 00       	mov    $0x122028,%eax
  102a7f:	48 85 db             	test   %rbx,%rbx
  102a82:	74 13                	je     102a97 <__deregister_frame_info_bases+0x34>
  102a84:	48 8b 53 28          	mov    0x28(%rbx),%rdx
  102a88:	48 39 7b 18          	cmp    %rdi,0x18(%rbx)
  102a8c:	74 37                	je     102ac5 <__deregister_frame_info_bases+0x62>
  102a8e:	48 8d 43 28          	lea    0x28(%rbx),%rax
  102a92:	48 89 d3             	mov    %rdx,%rbx
  102a95:	eb e8                	jmp    102a7f <__deregister_frame_info_bases+0x1c>
  102a97:	48 8b 1d 82 f5 01 00 	mov    0x1f582(%rip),%rbx        # 122020 <seen_objects>
  102a9e:	b8 20 20 12 00       	mov    $0x122020,%eax
  102aa3:	eb 08                	jmp    102aad <__deregister_frame_info_bases+0x4a>
  102aa5:	48 8d 43 28          	lea    0x28(%rbx),%rax
  102aa9:	48 8b 5b 28          	mov    0x28(%rbx),%rbx
  102aad:	48 85 db             	test   %rbx,%rbx
  102ab0:	74 2e                	je     102ae0 <__deregister_frame_info_bases+0x7d>
  102ab2:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  102ab6:	f6 43 20 01          	testb  $0x1,0x20(%rbx)
  102aba:	75 0e                	jne    102aca <__deregister_frame_info_bases+0x67>
  102abc:	48 39 fa             	cmp    %rdi,%rdx
  102abf:	75 e4                	jne    102aa5 <__deregister_frame_info_bases+0x42>
  102ac1:	48 8b 53 28          	mov    0x28(%rbx),%rdx
  102ac5:	48 89 10             	mov    %rdx,(%rax)
  102ac8:	eb 1d                	jmp    102ae7 <__deregister_frame_info_bases+0x84>
  102aca:	48 3b 3a             	cmp    (%rdx),%rdi
  102acd:	75 d6                	jne    102aa5 <__deregister_frame_info_bases+0x42>
  102acf:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
  102ad3:	48 89 d7             	mov    %rdx,%rdi
  102ad6:	48 89 08             	mov    %rcx,(%rax)
  102ad9:	e8 b2 09 00 00       	call   103490 <free>
  102ade:	eb 07                	jmp    102ae7 <__deregister_frame_info_bases+0x84>
  102ae0:	e8 df f2 00 00       	call   111dc4 <abort>
  102ae5:	31 db                	xor    %ebx,%ebx
  102ae7:	48 89 d8             	mov    %rbx,%rax
  102aea:	5a                   	pop    %rdx
  102aeb:	5b                   	pop    %rbx
  102aec:	5d                   	pop    %rbp
  102aed:	c3                   	ret    

0000000000102aee <__deregister_frame_info>:
  102aee:	e9 70 ff ff ff       	jmp    102a63 <__deregister_frame_info_bases>

0000000000102af3 <__deregister_frame>:
  102af3:	83 3f 00             	cmpl   $0x0,(%rdi)
  102af6:	74 12                	je     102b0a <__deregister_frame+0x17>
  102af8:	55                   	push   %rbp
  102af9:	48 89 e5             	mov    %rsp,%rbp
  102afc:	e8 62 ff ff ff       	call   102a63 <__deregister_frame_info_bases>
  102b01:	5d                   	pop    %rbp
  102b02:	48 89 c7             	mov    %rax,%rdi
  102b05:	e9 86 09 00 00       	jmp    103490 <free>
  102b0a:	c3                   	ret    

0000000000102b0b <_Unwind_Find_FDE>:
  102b0b:	55                   	push   %rbp
  102b0c:	48 89 e5             	mov    %rsp,%rbp
  102b0f:	41 56                	push   %r14
  102b11:	49 89 f6             	mov    %rsi,%r14
  102b14:	41 55                	push   %r13
  102b16:	41 54                	push   %r12
  102b18:	49 89 fc             	mov    %rdi,%r12
  102b1b:	53                   	push   %rbx
  102b1c:	48 83 ec 10          	sub    $0x10,%rsp
  102b20:	48 8b 1d f9 f4 01 00 	mov    0x1f4f9(%rip),%rbx        # 122020 <seen_objects>
  102b27:	48 85 db             	test   %rbx,%rbx
  102b2a:	74 1b                	je     102b47 <_Unwind_Find_FDE+0x3c>
  102b2c:	4c 3b 23             	cmp    (%rbx),%r12
  102b2f:	72 10                	jb     102b41 <_Unwind_Find_FDE+0x36>
  102b31:	4c 89 e6             	mov    %r12,%rsi
  102b34:	48 89 df             	mov    %rbx,%rdi
  102b37:	e8 c5 f9 ff ff       	call   102501 <search_object>
  102b3c:	49 89 c5             	mov    %rax,%r13
  102b3f:	eb 47                	jmp    102b88 <_Unwind_Find_FDE+0x7d>
  102b41:	48 8b 5b 28          	mov    0x28(%rbx),%rbx
  102b45:	eb e0                	jmp    102b27 <_Unwind_Find_FDE+0x1c>
  102b47:	48 8b 1d da f4 01 00 	mov    0x1f4da(%rip),%rbx        # 122028 <unseen_objects>
  102b4e:	48 85 db             	test   %rbx,%rbx
  102b51:	0f 84 9e 00 00 00    	je     102bf5 <_Unwind_Find_FDE+0xea>
  102b57:	48 8b 43 28          	mov    0x28(%rbx),%rax
  102b5b:	4c 89 e6             	mov    %r12,%rsi
  102b5e:	48 89 df             	mov    %rbx,%rdi
  102b61:	48 89 05 c0 f4 01 00 	mov    %rax,0x1f4c0(%rip)        # 122028 <unseen_objects>
  102b68:	e8 94 f9 ff ff       	call   102501 <search_object>
  102b6d:	ba 20 20 12 00       	mov    $0x122020,%edx
  102b72:	49 89 c5             	mov    %rax,%r13
  102b75:	48 8b 05 a4 f4 01 00 	mov    0x1f4a4(%rip),%rax        # 122020 <seen_objects>
  102b7c:	48 85 c0             	test   %rax,%rax
  102b7f:	75 0e                	jne    102b8f <_Unwind_Find_FDE+0x84>
  102b81:	48 89 43 28          	mov    %rax,0x28(%rbx)
  102b85:	48 89 1a             	mov    %rbx,(%rdx)
  102b88:	4d 85 ed             	test   %r13,%r13
  102b8b:	74 ba                	je     102b47 <_Unwind_Find_FDE+0x3c>
  102b8d:	eb 12                	jmp    102ba1 <_Unwind_Find_FDE+0x96>
  102b8f:	48 8b 0b             	mov    (%rbx),%rcx
  102b92:	48 39 08             	cmp    %rcx,(%rax)
  102b95:	72 ea                	jb     102b81 <_Unwind_Find_FDE+0x76>
  102b97:	48 8d 50 28          	lea    0x28(%rax),%rdx
  102b9b:	48 8b 40 28          	mov    0x28(%rax),%rax
  102b9f:	eb db                	jmp    102b7c <_Unwind_Find_FDE+0x71>
  102ba1:	48 8b 43 08          	mov    0x8(%rbx),%rax
  102ba5:	49 89 06             	mov    %rax,(%r14)
  102ba8:	48 8b 43 10          	mov    0x10(%rbx),%rax
  102bac:	49 89 46 08          	mov    %rax,0x8(%r14)
  102bb0:	8b 43 20             	mov    0x20(%rbx),%eax
  102bb3:	66 c1 e8 03          	shr    $0x3,%ax
  102bb7:	0f b6 c0             	movzbl %al,%eax
  102bba:	f6 43 20 04          	testb  $0x4,0x20(%rbx)
  102bbe:	74 08                	je     102bc8 <_Unwind_Find_FDE+0xbd>
  102bc0:	4c 89 ef             	mov    %r13,%rdi
  102bc3:	e8 8d f7 ff ff       	call   102355 <get_fde_encoding>
  102bc8:	44 0f b6 e0          	movzbl %al,%r12d
  102bcc:	48 89 de             	mov    %rbx,%rsi
  102bcf:	4c 89 eb             	mov    %r13,%rbx
  102bd2:	44 89 e7             	mov    %r12d,%edi
  102bd5:	e8 fb f2 ff ff       	call   101ed5 <base_from_object>
  102bda:	49 8d 55 08          	lea    0x8(%r13),%rdx
  102bde:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  102be2:	44 89 e7             	mov    %r12d,%edi
  102be5:	48 89 c6             	mov    %rax,%rsi
  102be8:	e8 1d f3 ff ff       	call   101f0a <read_encoded_value_with_base>
  102bed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  102bf1:	49 89 46 10          	mov    %rax,0x10(%r14)
  102bf5:	5a                   	pop    %rdx
  102bf6:	48 89 d8             	mov    %rbx,%rax
  102bf9:	59                   	pop    %rcx
  102bfa:	5b                   	pop    %rbx
  102bfb:	41 5c                	pop    %r12
  102bfd:	41 5d                	pop    %r13
  102bff:	41 5e                	pop    %r14
  102c01:	5d                   	pop    %rbp
  102c02:	c3                   	ret    
  102c03:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  102c0a:	00 00 00 
  102c0d:	0f 1f 00             	nopl   (%rax)

0000000000102c10 <frexp>:
  102c10:	66 48 0f 7e c2       	movq   %xmm0,%rdx
  102c15:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
  102c1b:	48 89 d0             	mov    %rdx,%rax
  102c1e:	48 c1 e8 20          	shr    $0x20,%rax
  102c22:	89 c1                	mov    %eax,%ecx
  102c24:	81 e1 ff ff ff 7f    	and    $0x7fffffff,%ecx
  102c2a:	81 f9 ff ff ef 7f    	cmp    $0x7fefffff,%ecx
  102c30:	77 3a                	ja     102c6c <frexp+0x5c>
  102c32:	09 ca                	or     %ecx,%edx
  102c34:	74 36                	je     102c6c <frexp+0x5c>
  102c36:	a9 00 00 f0 7f       	test   $0x7ff00000,%eax
  102c3b:	74 33                	je     102c70 <frexp+0x60>
  102c3d:	89 c2                	mov    %eax,%edx
  102c3f:	31 c0                	xor    %eax,%eax
  102c41:	c1 f9 14             	sar    $0x14,%ecx
  102c44:	81 e2 ff ff 0f 80    	and    $0x800fffff,%edx
  102c4a:	8d 84 08 02 fc ff ff 	lea    -0x3fe(%rax,%rcx,1),%eax
  102c51:	81 ca 00 00 e0 3f    	or     $0x3fe00000,%edx
  102c57:	89 07                	mov    %eax,(%rdi)
  102c59:	66 48 0f 7e c0       	movq   %xmm0,%rax
  102c5e:	48 c1 e2 20          	shl    $0x20,%rdx
  102c62:	89 c0                	mov    %eax,%eax
  102c64:	48 09 d0             	or     %rdx,%rax
  102c67:	66 48 0f 6e c0       	movq   %rax,%xmm0
  102c6c:	c3                   	ret    
  102c6d:	0f 1f 00             	nopl   (%rax)
  102c70:	f2 0f 59 05 40 ac 01 	mulsd  0x1ac40(%rip),%xmm0        # 11d8b8 <_ZTVN10__cxxabiv117__class_type_infoE+0x58>
  102c77:	00 
  102c78:	b8 ca ff ff ff       	mov    $0xffffffca,%eax
  102c7d:	66 48 0f 7e c1       	movq   %xmm0,%rcx
  102c82:	48 c1 e9 20          	shr    $0x20,%rcx
  102c86:	89 ca                	mov    %ecx,%edx
  102c88:	81 e1 ff ff ff 7f    	and    $0x7fffffff,%ecx
  102c8e:	eb b1                	jmp    102c41 <frexp+0x31>

0000000000102c90 <round>:
  102c90:	66 48 0f 7e c0       	movq   %xmm0,%rax
  102c95:	49 89 c0             	mov    %rax,%r8
  102c98:	49 89 c1             	mov    %rax,%r9
  102c9b:	49 c1 e8 20          	shr    $0x20,%r8
  102c9f:	44 89 c1             	mov    %r8d,%ecx
  102ca2:	44 89 c2             	mov    %r8d,%edx
  102ca5:	c1 f9 14             	sar    $0x14,%ecx
  102ca8:	81 e1 ff 07 00 00    	and    $0x7ff,%ecx
  102cae:	8d b9 01 fc ff ff    	lea    -0x3ff(%rcx),%edi
  102cb4:	83 ff 13             	cmp    $0x13,%edi
  102cb7:	7f 5f                	jg     102d18 <round+0x88>
  102cb9:	85 ff                	test   %edi,%edi
  102cbb:	78 33                	js     102cf0 <round+0x60>
  102cbd:	be ff ff 0f 00       	mov    $0xfffff,%esi
  102cc2:	89 f9                	mov    %edi,%ecx
  102cc4:	d3 fe                	sar    %cl,%esi
  102cc6:	89 f2                	mov    %esi,%edx
  102cc8:	44 21 c2             	and    %r8d,%edx
  102ccb:	09 c2                	or     %eax,%edx
  102ccd:	74 1c                	je     102ceb <round+0x5b>
  102ccf:	ba 00 00 08 00       	mov    $0x80000,%edx
  102cd4:	f7 d6                	not    %esi
  102cd6:	31 c0                	xor    %eax,%eax
  102cd8:	d3 fa                	sar    %cl,%edx
  102cda:	44 01 c2             	add    %r8d,%edx
  102cdd:	21 f2                	and    %esi,%edx
  102cdf:	48 c1 e2 20          	shl    $0x20,%rdx
  102ce3:	48 09 c2             	or     %rax,%rdx
  102ce6:	66 48 0f 6e c2       	movq   %rdx,%xmm0
  102ceb:	c3                   	ret    
  102cec:	0f 1f 40 00          	nopl   0x0(%rax)
  102cf0:	81 e2 00 00 00 80    	and    $0x80000000,%edx
  102cf6:	31 c0                	xor    %eax,%eax
  102cf8:	89 d1                	mov    %edx,%ecx
  102cfa:	81 ca 00 00 f0 3f    	or     $0x3ff00000,%edx
  102d00:	83 ff ff             	cmp    $0xffffffff,%edi
  102d03:	0f 45 d1             	cmovne %ecx,%edx
  102d06:	48 c1 e2 20          	shl    $0x20,%rdx
  102d0a:	48 09 c2             	or     %rax,%rdx
  102d0d:	66 48 0f 6e c2       	movq   %rdx,%xmm0
  102d12:	c3                   	ret    
  102d13:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  102d18:	83 ff 33             	cmp    $0x33,%edi
  102d1b:	7e 13                	jle    102d30 <round+0xa0>
  102d1d:	81 ff 00 04 00 00    	cmp    $0x400,%edi
  102d23:	75 c6                	jne    102ceb <round+0x5b>
  102d25:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
  102d29:	c3                   	ret    
  102d2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  102d30:	81 e9 13 04 00 00    	sub    $0x413,%ecx
  102d36:	be ff ff ff ff       	mov    $0xffffffff,%esi
  102d3b:	d3 ee                	shr    %cl,%esi
  102d3d:	85 c6                	test   %eax,%esi
  102d3f:	74 aa                	je     102ceb <round+0x5b>
  102d41:	b9 33 00 00 00       	mov    $0x33,%ecx
  102d46:	b8 01 00 00 00       	mov    $0x1,%eax
  102d4b:	29 f9                	sub    %edi,%ecx
  102d4d:	d3 e0                	shl    %cl,%eax
  102d4f:	44 01 c8             	add    %r9d,%eax
  102d52:	89 c1                	mov    %eax,%ecx
  102d54:	72 08                	jb     102d5e <round+0xce>
  102d56:	89 f0                	mov    %esi,%eax
  102d58:	f7 d0                	not    %eax
  102d5a:	21 c8                	and    %ecx,%eax
  102d5c:	eb a8                	jmp    102d06 <round+0x76>
  102d5e:	41 8d 50 01          	lea    0x1(%r8),%edx
  102d62:	eb f2                	jmp    102d56 <round+0xc6>
  102d64:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  102d6b:	00 00 00 
  102d6e:	66 90                	xchg   %ax,%ax

0000000000102d70 <__assert_func>:
  102d70:	55                   	push   %rbp
  102d71:	48 89 d0             	mov    %rdx,%rax
  102d74:	41 89 f0             	mov    %esi,%r8d
  102d77:	48 89 ca             	mov    %rcx,%rdx
  102d7a:	41 b9 3b 03 12 00    	mov    $0x12033b,%r9d
  102d80:	48 89 e5             	mov    %rsp,%rbp
  102d83:	48 85 c0             	test   %rax,%rax
  102d86:	74 27                	je     102daf <__assert_func+0x3f>
  102d88:	48 8b 0d b9 fb 03 00 	mov    0x3fbb9(%rip),%rcx        # 142948 <_impure_ptr>
  102d8f:	48 83 ec 08          	sub    $0x8,%rsp
  102d93:	be c0 d8 11 00       	mov    $0x11d8c0,%esi
  102d98:	4c 8b 51 18          	mov    0x18(%rcx),%r10
  102d9c:	50                   	push   %rax
  102d9d:	48 89 f9             	mov    %rdi,%rcx
  102da0:	31 c0                	xor    %eax,%eax
  102da2:	4c 89 d7             	mov    %r10,%rdi
  102da5:	e8 16 00 00 00       	call   102dc0 <fiprintf>
  102daa:	e8 15 f0 00 00       	call   111dc4 <abort>
  102daf:	b8 54 e3 11 00       	mov    $0x11e354,%eax
  102db4:	49 89 c1             	mov    %rax,%r9
  102db7:	eb cf                	jmp    102d88 <__assert_func+0x18>
  102db9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000102dc0 <fiprintf>:
  102dc0:	55                   	push   %rbp
  102dc1:	48 89 e5             	mov    %rsp,%rbp
  102dc4:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  102dcb:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  102dd2:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  102dd9:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  102de0:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  102de7:	84 c0                	test   %al,%al
  102de9:	74 20                	je     102e0b <fiprintf+0x4b>
  102deb:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  102def:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  102df3:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  102df7:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  102dfb:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  102dff:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  102e03:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  102e07:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  102e0b:	48 8d 45 10          	lea    0x10(%rbp),%rax
  102e0f:	48 89 f2             	mov    %rsi,%rdx
  102e12:	48 89 fe             	mov    %rdi,%rsi
  102e15:	48 8b 3d 2c fb 03 00 	mov    0x3fb2c(%rip),%rdi        # 142948 <_impure_ptr>
  102e1c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  102e23:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  102e2a:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  102e31:	c7 85 38 ff ff ff 10 	movl   $0x10,-0xc8(%rbp)
  102e38:	00 00 00 
  102e3b:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  102e42:	00 00 00 
  102e45:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  102e4c:	e8 ff 1a 00 00       	call   104950 <_vfiprintf_r>
  102e51:	c9                   	leave  
  102e52:	c3                   	ret    
  102e53:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  102e5a:	00 00 00 
  102e5d:	0f 1f 00             	nopl   (%rax)

0000000000102e60 <_fputs_r>:
  102e60:	55                   	push   %rbp
  102e61:	48 89 e5             	mov    %rsp,%rbp
  102e64:	41 54                	push   %r12
  102e66:	49 89 fc             	mov    %rdi,%r12
  102e69:	48 89 f7             	mov    %rsi,%rdi
  102e6c:	53                   	push   %rbx
  102e6d:	48 89 d3             	mov    %rdx,%rbx
  102e70:	48 83 ec 40          	sub    $0x40,%rsp
  102e74:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  102e78:	e8 23 19 00 00       	call   1047a0 <strlen>
  102e7d:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%rbp)
  102e84:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  102e88:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  102e8c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  102e90:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  102e94:	4d 85 e4             	test   %r12,%r12
  102e97:	74 09                	je     102ea2 <_fputs_r+0x42>
  102e99:	41 8b 44 24 50       	mov    0x50(%r12),%eax
  102e9e:	85 c0                	test   %eax,%eax
  102ea0:	74 3e                	je     102ee0 <_fputs_r+0x80>
  102ea2:	f6 83 b0 00 00 00 01 	testb  $0x1,0xb0(%rbx)
  102ea9:	75 06                	jne    102eb1 <_fputs_r+0x51>
  102eab:	f6 43 11 02          	testb  $0x2,0x11(%rbx)
  102eaf:	74 5f                	je     102f10 <_fputs_r+0xb0>
  102eb1:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  102eb5:	48 89 de             	mov    %rbx,%rsi
  102eb8:	4c 89 e7             	mov    %r12,%rdi
  102ebb:	e8 80 00 00 00       	call   102f40 <__sfvwrite_r>
  102ec0:	f6 83 b0 00 00 00 01 	testb  $0x1,0xb0(%rbx)
  102ec7:	75 06                	jne    102ecf <_fputs_r+0x6f>
  102ec9:	f6 43 11 02          	testb  $0x2,0x11(%rbx)
  102ecd:	74 21                	je     102ef0 <_fputs_r+0x90>
  102ecf:	48 83 c4 40          	add    $0x40,%rsp
  102ed3:	5b                   	pop    %rbx
  102ed4:	41 5c                	pop    %r12
  102ed6:	5d                   	pop    %rbp
  102ed7:	c3                   	ret    
  102ed8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  102edf:	00 
  102ee0:	4c 89 e7             	mov    %r12,%rdi
  102ee3:	e8 68 89 00 00       	call   10b850 <__sinit>
  102ee8:	eb b8                	jmp    102ea2 <_fputs_r+0x42>
  102eea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  102ef0:	48 8b bb a0 00 00 00 	mov    0xa0(%rbx),%rdi
  102ef7:	89 45 bc             	mov    %eax,-0x44(%rbp)
  102efa:	e8 c0 ee 00 00       	call   111dbf <__retarget_lock_release_recursive>
  102eff:	8b 45 bc             	mov    -0x44(%rbp),%eax
  102f02:	48 83 c4 40          	add    $0x40,%rsp
  102f06:	5b                   	pop    %rbx
  102f07:	41 5c                	pop    %r12
  102f09:	5d                   	pop    %rbp
  102f0a:	c3                   	ret    
  102f0b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  102f10:	48 8b bb a0 00 00 00 	mov    0xa0(%rbx),%rdi
  102f17:	e8 9a ee 00 00       	call   111db6 <__retarget_lock_acquire_recursive>
  102f1c:	eb 93                	jmp    102eb1 <_fputs_r+0x51>
  102f1e:	66 90                	xchg   %ax,%ax

0000000000102f20 <fputs>:
  102f20:	48 89 f2             	mov    %rsi,%rdx
  102f23:	48 89 fe             	mov    %rdi,%rsi
  102f26:	48 8b 3d 1b fa 03 00 	mov    0x3fa1b(%rip),%rdi        # 142948 <_impure_ptr>
  102f2d:	e9 2e ff ff ff       	jmp    102e60 <_fputs_r>
  102f32:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  102f39:	00 00 00 
  102f3c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000102f40 <__sfvwrite_r>:
  102f40:	55                   	push   %rbp
  102f41:	48 89 e5             	mov    %rsp,%rbp
  102f44:	41 57                	push   %r15
  102f46:	41 56                	push   %r14
  102f48:	41 55                	push   %r13
  102f4a:	41 54                	push   %r12
  102f4c:	53                   	push   %rbx
  102f4d:	48 83 ec 38          	sub    $0x38,%rsp
  102f51:	48 83 7a 10 00       	cmpq   $0x0,0x10(%rdx)
  102f56:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  102f5a:	0f 84 80 00 00 00    	je     102fe0 <__sfvwrite_r+0xa0>
  102f60:	49 89 d6             	mov    %rdx,%r14
  102f63:	0f b7 56 10          	movzwl 0x10(%rsi),%edx
  102f67:	48 89 f3             	mov    %rsi,%rbx
  102f6a:	f6 c2 08             	test   $0x8,%dl
  102f6d:	0f 84 85 00 00 00    	je     102ff8 <__sfvwrite_r+0xb8>
  102f73:	48 83 7e 18 00       	cmpq   $0x0,0x18(%rsi)
  102f78:	74 7e                	je     102ff8 <__sfvwrite_r+0xb8>
  102f7a:	4d 8b 26             	mov    (%r14),%r12
  102f7d:	f6 c2 02             	test   $0x2,%dl
  102f80:	0f 84 96 00 00 00    	je     10301c <__sfvwrite_r+0xdc>
  102f86:	45 31 ff             	xor    %r15d,%r15d
  102f89:	45 31 ed             	xor    %r13d,%r13d
  102f8c:	eb 2d                	jmp    102fbb <__sfvwrite_r+0x7b>
  102f8e:	66 90                	xchg   %ax,%ax
  102f90:	b9 00 fc ff 7f       	mov    $0x7ffffc00,%ecx
  102f95:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  102f99:	4c 89 fa             	mov    %r15,%rdx
  102f9c:	49 39 cd             	cmp    %rcx,%r13
  102f9f:	49 0f 46 cd          	cmovbe %r13,%rcx
  102fa3:	ff d0                	call   *%rax
  102fa5:	85 c0                	test   %eax,%eax
  102fa7:	0f 8e 4b 01 00 00    	jle    1030f8 <__sfvwrite_r+0x1b8>
  102fad:	48 98                	cltq   
  102faf:	49 01 c7             	add    %rax,%r15
  102fb2:	49 29 c5             	sub    %rax,%r13
  102fb5:	49 29 46 10          	sub    %rax,0x10(%r14)
  102fb9:	74 25                	je     102fe0 <__sfvwrite_r+0xa0>
  102fbb:	48 8b 43 40          	mov    0x40(%rbx),%rax
  102fbf:	48 8b 73 30          	mov    0x30(%rbx),%rsi
  102fc3:	4d 85 ed             	test   %r13,%r13
  102fc6:	75 c8                	jne    102f90 <__sfvwrite_r+0x50>
  102fc8:	4d 8b 3c 24          	mov    (%r12),%r15
  102fcc:	4d 8b 6c 24 08       	mov    0x8(%r12),%r13
  102fd1:	49 83 c4 10          	add    $0x10,%r12
  102fd5:	eb ec                	jmp    102fc3 <__sfvwrite_r+0x83>
  102fd7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  102fde:	00 00 
  102fe0:	48 83 c4 38          	add    $0x38,%rsp
  102fe4:	31 c0                	xor    %eax,%eax
  102fe6:	5b                   	pop    %rbx
  102fe7:	41 5c                	pop    %r12
  102fe9:	41 5d                	pop    %r13
  102feb:	41 5e                	pop    %r14
  102fed:	41 5f                	pop    %r15
  102fef:	5d                   	pop    %rbp
  102ff0:	c3                   	ret    
  102ff1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  102ff8:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  102ffc:	48 89 de             	mov    %rbx,%rsi
  102fff:	e8 4c 6e 00 00       	call   109e50 <__swsetup_r>
  103004:	85 c0                	test   %eax,%eax
  103006:	0f 85 f7 00 00 00    	jne    103103 <__sfvwrite_r+0x1c3>
  10300c:	0f b7 53 10          	movzwl 0x10(%rbx),%edx
  103010:	4d 8b 26             	mov    (%r14),%r12
  103013:	f6 c2 02             	test   $0x2,%dl
  103016:	0f 85 6a ff ff ff    	jne    102f86 <__sfvwrite_r+0x46>
  10301c:	f6 c2 01             	test   $0x1,%dl
  10301f:	0f 85 fb 00 00 00    	jne    103120 <__sfvwrite_r+0x1e0>
  103025:	48 8b 3b             	mov    (%rbx),%rdi
  103028:	48 63 43 0c          	movslq 0xc(%rbx),%rax
  10302c:	45 31 c0             	xor    %r8d,%r8d
  10302f:	45 31 ff             	xor    %r15d,%r15d
  103032:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  103038:	49 89 fb             	mov    %rdi,%r11
  10303b:	41 89 c2             	mov    %eax,%r10d
  10303e:	4d 85 ff             	test   %r15,%r15
  103041:	74 77                	je     1030ba <__sfvwrite_r+0x17a>
  103043:	f6 c6 02             	test   $0x2,%dh
  103046:	0f 84 b4 01 00 00    	je     103200 <__sfvwrite_r+0x2c0>
  10304c:	4c 63 e8             	movslq %eax,%r13
  10304f:	4d 39 ef             	cmp    %r13,%r15
  103052:	0f 83 58 02 00 00    	jae    1032b0 <__sfvwrite_r+0x370>
  103058:	49 63 c7             	movslq %r15d,%rax
  10305b:	45 89 fa             	mov    %r15d,%r10d
  10305e:	48 89 c1             	mov    %rax,%rcx
  103061:	49 89 fb             	mov    %rdi,%r11
  103064:	49 89 c5             	mov    %rax,%r13
  103067:	4c 89 c6             	mov    %r8,%rsi
  10306a:	4c 89 ea             	mov    %r13,%rdx
  10306d:	4c 89 df             	mov    %r11,%rdi
  103070:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  103074:	44 89 55 b8          	mov    %r10d,-0x48(%rbp)
  103078:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  10307c:	e8 cf 0d 00 00       	call   103e50 <memmove>
  103081:	44 8b 55 b8          	mov    -0x48(%rbp),%r10d
  103085:	4c 01 2b             	add    %r13,(%rbx)
  103088:	44 29 53 0c          	sub    %r10d,0xc(%rbx)
  10308c:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  103090:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  103094:	49 01 c8             	add    %rcx,%r8
  103097:	49 29 cf             	sub    %rcx,%r15
  10309a:	49 29 4e 10          	sub    %rcx,0x10(%r14)
  10309e:	0f 84 3c ff ff ff    	je     102fe0 <__sfvwrite_r+0xa0>
  1030a4:	48 8b 3b             	mov    (%rbx),%rdi
  1030a7:	48 63 43 0c          	movslq 0xc(%rbx),%rax
  1030ab:	0f b7 53 10          	movzwl 0x10(%rbx),%edx
  1030af:	49 89 fb             	mov    %rdi,%r11
  1030b2:	41 89 c2             	mov    %eax,%r10d
  1030b5:	4d 85 ff             	test   %r15,%r15
  1030b8:	75 89                	jne    103043 <__sfvwrite_r+0x103>
  1030ba:	4d 8b 04 24          	mov    (%r12),%r8
  1030be:	4d 8b 7c 24 08       	mov    0x8(%r12),%r15
  1030c3:	49 83 c4 10          	add    $0x10,%r12
  1030c7:	e9 6c ff ff ff       	jmp    103038 <__sfvwrite_r+0xf8>
  1030cc:	0f 1f 40 00          	nopl   0x0(%rax)
  1030d0:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  1030d4:	48 89 de             	mov    %rbx,%rsi
  1030d7:	44 89 4d b8          	mov    %r9d,-0x48(%rbp)
  1030db:	4c 89 55 c0          	mov    %r10,-0x40(%rbp)
  1030df:	e8 bc 86 00 00       	call   10b7a0 <_fflush_r>
  1030e4:	4c 8b 55 c0          	mov    -0x40(%rbp),%r10
  1030e8:	44 8b 4d b8          	mov    -0x48(%rbp),%r9d
  1030ec:	85 c0                	test   %eax,%eax
  1030ee:	0f 84 ab 00 00 00    	je     10319f <__sfvwrite_r+0x25f>
  1030f4:	0f 1f 40 00          	nopl   0x0(%rax)
  1030f8:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  1030fc:	83 c8 40             	or     $0x40,%eax
  1030ff:	66 89 43 10          	mov    %ax,0x10(%rbx)
  103103:	48 83 c4 38          	add    $0x38,%rsp
  103107:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  10310c:	5b                   	pop    %rbx
  10310d:	41 5c                	pop    %r12
  10310f:	41 5d                	pop    %r13
  103111:	41 5e                	pop    %r14
  103113:	41 5f                	pop    %r15
  103115:	5d                   	pop    %rbp
  103116:	c3                   	ret    
  103117:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10311e:	00 00 
  103120:	45 31 c9             	xor    %r9d,%r9d
  103123:	31 c0                	xor    %eax,%eax
  103125:	45 31 d2             	xor    %r10d,%r10d
  103128:	45 31 ff             	xor    %r15d,%r15d
  10312b:	e9 82 00 00 00       	jmp    1031b2 <__sfvwrite_r+0x272>
  103130:	85 c0                	test   %eax,%eax
  103132:	0f 84 97 00 00 00    	je     1031cf <__sfvwrite_r+0x28f>
  103138:	49 63 c9             	movslq %r9d,%rcx
  10313b:	8b 43 20             	mov    0x20(%rbx),%eax
  10313e:	44 8b 6b 0c          	mov    0xc(%rbx),%r13d
  103142:	4c 39 f9             	cmp    %r15,%rcx
  103145:	48 8b 3b             	mov    (%rbx),%rdi
  103148:	49 0f 47 cf          	cmova  %r15,%rcx
  10314c:	41 01 c5             	add    %eax,%r13d
  10314f:	48 39 7b 18          	cmp    %rdi,0x18(%rbx)
  103153:	73 09                	jae    10315e <__sfvwrite_r+0x21e>
  103155:	41 39 cd             	cmp    %ecx,%r13d
  103158:	0f 8c 72 02 00 00    	jl     1033d0 <__sfvwrite_r+0x490>
  10315e:	39 c8                	cmp    %ecx,%eax
  103160:	0f 8f 32 02 00 00    	jg     103398 <__sfvwrite_r+0x458>
  103166:	44 89 4d b8          	mov    %r9d,-0x48(%rbp)
  10316a:	4c 89 d2             	mov    %r10,%rdx
  10316d:	48 8b 73 30          	mov    0x30(%rbx),%rsi
  103171:	89 c1                	mov    %eax,%ecx
  103173:	4c 89 55 c0          	mov    %r10,-0x40(%rbp)
  103177:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10317b:	ff 53 40             	call   *0x40(%rbx)
  10317e:	4c 8b 55 c0          	mov    -0x40(%rbp),%r10
  103182:	44 8b 4d b8          	mov    -0x48(%rbp),%r9d
  103186:	85 c0                	test   %eax,%eax
  103188:	41 89 c5             	mov    %eax,%r13d
  10318b:	0f 8e 67 ff ff ff    	jle    1030f8 <__sfvwrite_r+0x1b8>
  103191:	b8 01 00 00 00       	mov    $0x1,%eax
  103196:	45 29 e9             	sub    %r13d,%r9d
  103199:	0f 84 31 ff ff ff    	je     1030d0 <__sfvwrite_r+0x190>
  10319f:	4d 63 ed             	movslq %r13d,%r13
  1031a2:	4d 01 ea             	add    %r13,%r10
  1031a5:	4d 29 ef             	sub    %r13,%r15
  1031a8:	4d 29 6e 10          	sub    %r13,0x10(%r14)
  1031ac:	0f 84 2e fe ff ff    	je     102fe0 <__sfvwrite_r+0xa0>
  1031b2:	4d 85 ff             	test   %r15,%r15
  1031b5:	0f 85 75 ff ff ff    	jne    103130 <__sfvwrite_r+0x1f0>
  1031bb:	4d 8b 7c 24 08       	mov    0x8(%r12),%r15
  1031c0:	4c 89 e0             	mov    %r12,%rax
  1031c3:	49 83 c4 10          	add    $0x10,%r12
  1031c7:	4d 85 ff             	test   %r15,%r15
  1031ca:	74 ef                	je     1031bb <__sfvwrite_r+0x27b>
  1031cc:	4c 8b 10             	mov    (%rax),%r10
  1031cf:	4c 89 fa             	mov    %r15,%rdx
  1031d2:	4c 89 d7             	mov    %r10,%rdi
  1031d5:	be 0a 00 00 00       	mov    $0xa,%esi
  1031da:	4c 89 55 c0          	mov    %r10,-0x40(%rbp)
  1031de:	e8 9d 0b 00 00       	call   103d80 <memchr>
  1031e3:	4c 8b 55 c0          	mov    -0x40(%rbp),%r10
  1031e7:	45 8d 4f 01          	lea    0x1(%r15),%r9d
  1031eb:	48 8d 50 01          	lea    0x1(%rax),%rdx
  1031ef:	4c 29 d2             	sub    %r10,%rdx
  1031f2:	48 85 c0             	test   %rax,%rax
  1031f5:	44 0f 45 ca          	cmovne %edx,%r9d
  1031f9:	e9 3a ff ff ff       	jmp    103138 <__sfvwrite_r+0x1f8>
  1031fe:	66 90                	xchg   %ax,%ax
  103200:	48 39 7b 18          	cmp    %rdi,0x18(%rbx)
  103204:	72 4a                	jb     103250 <__sfvwrite_r+0x310>
  103206:	48 63 53 20          	movslq 0x20(%rbx),%rdx
  10320a:	48 89 d6             	mov    %rdx,%rsi
  10320d:	49 39 d7             	cmp    %rdx,%r15
  103210:	72 3e                	jb     103250 <__sfvwrite_r+0x310>
  103212:	b9 ff ff ff 7f       	mov    $0x7fffffff,%ecx
  103217:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  10321b:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10321f:	49 39 cf             	cmp    %rcx,%r15
  103222:	49 0f 46 cf          	cmovbe %r15,%rcx
  103226:	89 c8                	mov    %ecx,%eax
  103228:	99                   	cltd   
  103229:	f7 fe                	idiv   %esi
  10322b:	48 8b 73 30          	mov    0x30(%rbx),%rsi
  10322f:	29 d1                	sub    %edx,%ecx
  103231:	4c 89 c2             	mov    %r8,%rdx
  103234:	ff 53 40             	call   *0x40(%rbx)
  103237:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  10323b:	85 c0                	test   %eax,%eax
  10323d:	0f 8e b5 fe ff ff    	jle    1030f8 <__sfvwrite_r+0x1b8>
  103243:	48 63 c8             	movslq %eax,%rcx
  103246:	e9 49 fe ff ff       	jmp    103094 <__sfvwrite_r+0x154>
  10324b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  103250:	4c 39 f8             	cmp    %r15,%rax
  103253:	4c 89 c6             	mov    %r8,%rsi
  103256:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  10325a:	49 0f 47 c7          	cmova  %r15,%rax
  10325e:	48 63 c8             	movslq %eax,%rcx
  103261:	49 89 c5             	mov    %rax,%r13
  103264:	48 89 ca             	mov    %rcx,%rdx
  103267:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
  10326b:	e8 e0 0b 00 00       	call   103e50 <memmove>
  103270:	8b 43 0c             	mov    0xc(%rbx),%eax
  103273:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  103277:	48 01 0b             	add    %rcx,(%rbx)
  10327a:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  10327e:	44 29 e8             	sub    %r13d,%eax
  103281:	85 c0                	test   %eax,%eax
  103283:	89 43 0c             	mov    %eax,0xc(%rbx)
  103286:	0f 85 08 fe ff ff    	jne    103094 <__sfvwrite_r+0x154>
  10328c:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  103290:	48 89 de             	mov    %rbx,%rsi
  103293:	e8 08 85 00 00       	call   10b7a0 <_fflush_r>
  103298:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  10329c:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  1032a0:	85 c0                	test   %eax,%eax
  1032a2:	0f 84 ec fd ff ff    	je     103094 <__sfvwrite_r+0x154>
  1032a8:	e9 4b fe ff ff       	jmp    1030f8 <__sfvwrite_r+0x1b8>
  1032ad:	0f 1f 00             	nopl   (%rax)
  1032b0:	49 63 cf             	movslq %r15d,%rcx
  1032b3:	66 f7 c2 80 04       	test   $0x480,%dx
  1032b8:	0f 84 a9 fd ff ff    	je     103067 <__sfvwrite_r+0x127>
  1032be:	8b 43 20             	mov    0x20(%rbx),%eax
  1032c1:	48 8b 73 18          	mov    0x18(%rbx),%rsi
  1032c5:	8d 04 40             	lea    (%rax,%rax,2),%eax
  1032c8:	48 29 f7             	sub    %rsi,%rdi
  1032cb:	41 89 c5             	mov    %eax,%r13d
  1032ce:	4c 63 d7             	movslq %edi,%r10
  1032d1:	48 89 f9             	mov    %rdi,%rcx
  1032d4:	41 c1 ed 1f          	shr    $0x1f,%r13d
  1032d8:	4b 8d 7c 17 01       	lea    0x1(%r15,%r10,1),%rdi
  1032dd:	41 01 c5             	add    %eax,%r13d
  1032e0:	41 d1 fd             	sar    %r13d
  1032e3:	49 63 c5             	movslq %r13d,%rax
  1032e6:	48 39 f8             	cmp    %rdi,%rax
  1032e9:	73 08                	jae    1032f3 <__sfvwrite_r+0x3b3>
  1032eb:	46 8d 6c 39 01       	lea    0x1(%rcx,%r15,1),%r13d
  1032f0:	49 63 c5             	movslq %r13d,%rax
  1032f3:	4c 89 55 b0          	mov    %r10,-0x50(%rbp)
  1032f7:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
  1032fb:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  1032ff:	80 e6 04             	and    $0x4,%dh
  103302:	0f 84 08 01 00 00    	je     103410 <__sfvwrite_r+0x4d0>
  103308:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10330c:	48 89 c6             	mov    %rax,%rsi
  10330f:	e8 8c 01 00 00       	call   1034a0 <_malloc_r>
  103314:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  103318:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  10331c:	48 85 c0             	test   %rax,%rax
  10331f:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
  103323:	0f 84 2d 01 00 00    	je     103456 <__sfvwrite_r+0x516>
  103329:	48 8b 73 18          	mov    0x18(%rbx),%rsi
  10332d:	4c 89 d2             	mov    %r10,%rdx
  103330:	48 89 c7             	mov    %rax,%rdi
  103333:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  103337:	4c 89 45 b0          	mov    %r8,-0x50(%rbp)
  10333b:	4c 89 55 b8          	mov    %r10,-0x48(%rbp)
  10333f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  103343:	e8 b8 cc ff ff       	call   100000 <__rom_region_start>
  103348:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  10334c:	4c 8b 5d c0          	mov    -0x40(%rbp),%r11
  103350:	4c 8b 55 b8          	mov    -0x48(%rbp),%r10
  103354:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
  103358:	66 25 7f fb          	and    $0xfb7f,%ax
  10335c:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  103360:	0c 80                	or     $0x80,%al
  103362:	66 89 43 10          	mov    %ax,0x10(%rbx)
  103366:	4c 89 5b 18          	mov    %r11,0x18(%rbx)
  10336a:	4d 01 d3             	add    %r10,%r11
  10336d:	45 89 fa             	mov    %r15d,%r10d
  103370:	44 89 6b 20          	mov    %r13d,0x20(%rbx)
  103374:	41 29 cd             	sub    %ecx,%r13d
  103377:	49 63 cf             	movslq %r15d,%rcx
  10337a:	4c 89 1b             	mov    %r11,(%rbx)
  10337d:	48 89 c8             	mov    %rcx,%rax
  103380:	44 89 6b 0c          	mov    %r13d,0xc(%rbx)
  103384:	49 39 cf             	cmp    %rcx,%r15
  103387:	0f 82 dc 00 00 00    	jb     103469 <__sfvwrite_r+0x529>
  10338d:	49 89 cd             	mov    %rcx,%r13
  103390:	e9 d2 fc ff ff       	jmp    103067 <__sfvwrite_r+0x127>
  103395:	0f 1f 00             	nopl   (%rax)
  103398:	4c 63 e9             	movslq %ecx,%r13
  10339b:	4c 89 d6             	mov    %r10,%rsi
  10339e:	44 89 4d b0          	mov    %r9d,-0x50(%rbp)
  1033a2:	4c 89 ea             	mov    %r13,%rdx
  1033a5:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
  1033a9:	4c 89 55 c0          	mov    %r10,-0x40(%rbp)
  1033ad:	e8 9e 0a 00 00       	call   103e50 <memmove>
  1033b2:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  1033b6:	4c 01 2b             	add    %r13,(%rbx)
  1033b9:	29 4b 0c             	sub    %ecx,0xc(%rbx)
  1033bc:	44 8b 4d b0          	mov    -0x50(%rbp),%r9d
  1033c0:	4c 8b 55 c0          	mov    -0x40(%rbp),%r10
  1033c4:	41 89 cd             	mov    %ecx,%r13d
  1033c7:	e9 c5 fd ff ff       	jmp    103191 <__sfvwrite_r+0x251>
  1033cc:	0f 1f 40 00          	nopl   0x0(%rax)
  1033d0:	4c 89 d6             	mov    %r10,%rsi
  1033d3:	49 63 d5             	movslq %r13d,%rdx
  1033d6:	44 89 4d b0          	mov    %r9d,-0x50(%rbp)
  1033da:	4c 89 55 c0          	mov    %r10,-0x40(%rbp)
  1033de:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  1033e2:	e8 69 0a 00 00       	call   103e50 <memmove>
  1033e7:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  1033eb:	48 01 13             	add    %rdx,(%rbx)
  1033ee:	48 89 de             	mov    %rbx,%rsi
  1033f1:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  1033f5:	e8 a6 83 00 00       	call   10b7a0 <_fflush_r>
  1033fa:	4c 8b 55 c0          	mov    -0x40(%rbp),%r10
  1033fe:	44 8b 4d b0          	mov    -0x50(%rbp),%r9d
  103402:	85 c0                	test   %eax,%eax
  103404:	0f 84 87 fd ff ff    	je     103191 <__sfvwrite_r+0x251>
  10340a:	e9 e9 fc ff ff       	jmp    1030f8 <__sfvwrite_r+0x1b8>
  10340f:	90                   	nop
  103410:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  103414:	48 89 c2             	mov    %rax,%rdx
  103417:	e8 24 0d 00 00       	call   104140 <_realloc_r>
  10341c:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  103420:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  103424:	48 85 c0             	test   %rax,%rax
  103427:	4c 8b 55 b0          	mov    -0x50(%rbp),%r10
  10342b:	49 89 c3             	mov    %rax,%r11
  10342e:	0f 85 32 ff ff ff    	jne    103366 <__sfvwrite_r+0x426>
  103434:	4c 8b 75 c8          	mov    -0x38(%rbp),%r14
  103438:	48 8b 73 18          	mov    0x18(%rbx),%rsi
  10343c:	4c 89 f7             	mov    %r14,%rdi
  10343f:	e8 1c 87 00 00       	call   10bb60 <_free_r>
  103444:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  103448:	41 c7 06 0c 00 00 00 	movl   $0xc,(%r14)
  10344f:	24 7f                	and    $0x7f,%al
  103451:	e9 a6 fc ff ff       	jmp    1030fc <__sfvwrite_r+0x1bc>
  103456:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  10345a:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
  103460:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  103464:	e9 93 fc ff ff       	jmp    1030fc <__sfvwrite_r+0x1bc>
  103469:	4c 89 df             	mov    %r11,%rdi
  10346c:	e9 ea fb ff ff       	jmp    10305b <__sfvwrite_r+0x11b>
  103471:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  103478:	00 00 00 
  10347b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000103480 <malloc>:
  103480:	48 89 fe             	mov    %rdi,%rsi
  103483:	48 8b 3d be f4 03 00 	mov    0x3f4be(%rip),%rdi        # 142948 <_impure_ptr>
  10348a:	e9 11 00 00 00       	jmp    1034a0 <_malloc_r>
  10348f:	90                   	nop

0000000000103490 <free>:
  103490:	48 89 fe             	mov    %rdi,%rsi
  103493:	48 8b 3d ae f4 03 00 	mov    0x3f4ae(%rip),%rdi        # 142948 <_impure_ptr>
  10349a:	e9 c1 86 00 00       	jmp    10bb60 <_free_r>
  10349f:	90                   	nop

00000000001034a0 <_malloc_r>:
  1034a0:	55                   	push   %rbp
  1034a1:	48 89 e5             	mov    %rsp,%rbp
  1034a4:	41 57                	push   %r15
  1034a6:	41 56                	push   %r14
  1034a8:	41 55                	push   %r13
  1034aa:	49 89 fd             	mov    %rdi,%r13
  1034ad:	41 54                	push   %r12
  1034af:	4c 8d 66 17          	lea    0x17(%rsi),%r12
  1034b3:	53                   	push   %rbx
  1034b4:	48 83 ec 28          	sub    $0x28,%rsp
  1034b8:	49 83 fc 2e          	cmp    $0x2e,%r12
  1034bc:	77 7a                	ja     103538 <_malloc_r+0x98>
  1034be:	48 83 fe 20          	cmp    $0x20,%rsi
  1034c2:	0f 87 58 02 00 00    	ja     103720 <_malloc_r+0x280>
  1034c8:	e8 c3 0a 00 00       	call   103f90 <__malloc_lock>
  1034cd:	41 bc 20 00 00 00    	mov    $0x20,%r12d
  1034d3:	b8 50 00 00 00       	mov    $0x50,%eax
  1034d8:	be 04 00 00 00       	mov    $0x4,%esi
  1034dd:	48 8b 98 28 1f 14 00 	mov    0x141f28(%rax),%rbx
  1034e4:	48 8d 90 10 1f 14 00 	lea    0x141f10(%rax),%rdx
  1034eb:	48 05 20 1f 14 00    	add    $0x141f20,%rax
  1034f1:	48 39 d3             	cmp    %rdx,%rbx
  1034f4:	0f 84 7e 03 00 00    	je     103878 <_malloc_r+0x3d8>
  1034fa:	48 8b 43 08          	mov    0x8(%rbx),%rax
  1034fe:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
  103502:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  103506:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
  10350a:	4c 89 ef             	mov    %r13,%rdi
  10350d:	48 89 51 18          	mov    %rdx,0x18(%rcx)
  103511:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
  103515:	48 83 4c 03 08 01    	orq    $0x1,0x8(%rbx,%rax,1)
  10351b:	e8 80 0a 00 00       	call   103fa0 <__malloc_unlock>
  103520:	48 8d 43 10          	lea    0x10(%rbx),%rax
  103524:	48 83 c4 28          	add    $0x28,%rsp
  103528:	5b                   	pop    %rbx
  103529:	41 5c                	pop    %r12
  10352b:	41 5d                	pop    %r13
  10352d:	41 5e                	pop    %r14
  10352f:	41 5f                	pop    %r15
  103531:	5d                   	pop    %rbp
  103532:	c3                   	ret    
  103533:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  103538:	49 83 e4 f0          	and    $0xfffffffffffffff0,%r12
  10353c:	49 81 fc ff ff ff 7f 	cmp    $0x7fffffff,%r12
  103543:	0f 87 d7 01 00 00    	ja     103720 <_malloc_r+0x280>
  103549:	49 39 f4             	cmp    %rsi,%r12
  10354c:	0f 82 ce 01 00 00    	jb     103720 <_malloc_r+0x280>
  103552:	e8 39 0a 00 00       	call   103f90 <__malloc_lock>
  103557:	49 81 fc f7 01 00 00 	cmp    $0x1f7,%r12
  10355e:	0f 86 54 04 00 00    	jbe    1039b8 <_malloc_r+0x518>
  103564:	4c 89 e6             	mov    %r12,%rsi
  103567:	48 c1 ee 09          	shr    $0x9,%rsi
  10356b:	0f 84 bf 01 00 00    	je     103730 <_malloc_r+0x290>
  103571:	48 83 fe 04          	cmp    $0x4,%rsi
  103575:	0f 87 95 03 00 00    	ja     103910 <_malloc_r+0x470>
  10357b:	4c 89 e6             	mov    %r12,%rsi
  10357e:	48 c1 ee 06          	shr    $0x6,%rsi
  103582:	8d 7e 38             	lea    0x38(%rsi),%edi
  103585:	83 c6 39             	add    $0x39,%esi
  103588:	8d 04 36             	lea    (%rsi,%rsi,1),%eax
  10358b:	48 98                	cltq   
  10358d:	48 c1 e0 03          	shl    $0x3,%rax
  103591:	48 8b 98 28 1f 14 00 	mov    0x141f28(%rax),%rbx
  103598:	48 8d 88 10 1f 14 00 	lea    0x141f10(%rax),%rcx
  10359f:	48 39 d9             	cmp    %rbx,%rcx
  1035a2:	75 1e                	jne    1035c2 <_malloc_r+0x122>
  1035a4:	eb 32                	jmp    1035d8 <_malloc_r+0x138>
  1035a6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1035ad:	00 00 00 
  1035b0:	48 85 d2             	test   %rdx,%rdx
  1035b3:	0f 89 49 ff ff ff    	jns    103502 <_malloc_r+0x62>
  1035b9:	48 8b 5b 18          	mov    0x18(%rbx),%rbx
  1035bd:	48 39 d9             	cmp    %rbx,%rcx
  1035c0:	74 16                	je     1035d8 <_malloc_r+0x138>
  1035c2:	48 8b 43 08          	mov    0x8(%rbx),%rax
  1035c6:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
  1035ca:	48 89 c2             	mov    %rax,%rdx
  1035cd:	4c 29 e2             	sub    %r12,%rdx
  1035d0:	48 83 fa 1f          	cmp    $0x1f,%rdx
  1035d4:	7e da                	jle    1035b0 <_malloc_r+0x110>
  1035d6:	89 fe                	mov    %edi,%esi
  1035d8:	b8 30 1f 14 00       	mov    $0x141f30,%eax
  1035dd:	48 8b 1d 5c e9 03 00 	mov    0x3e95c(%rip),%rbx        # 141f40 <__malloc_av_+0x20>
  1035e4:	4c 8b 0d 3d e9 03 00 	mov    0x3e93d(%rip),%r9        # 141f28 <__malloc_av_+0x8>
  1035eb:	66 48 0f 6e c0       	movq   %rax,%xmm0
  1035f0:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
  1035f4:	48 39 c3             	cmp    %rax,%rbx
  1035f7:	0f 84 8d 00 00 00    	je     10368a <_malloc_r+0x1ea>
  1035fd:	4c 8b 43 08          	mov    0x8(%rbx),%r8
  103601:	49 83 e0 fc          	and    $0xfffffffffffffffc,%r8
  103605:	4c 89 c0             	mov    %r8,%rax
  103608:	4c 29 e0             	sub    %r12,%rax
  10360b:	48 83 f8 1f          	cmp    $0x1f,%rax
  10360f:	0f 8f db 03 00 00    	jg     1039f0 <_malloc_r+0x550>
  103615:	0f 29 05 24 e9 03 00 	movaps %xmm0,0x3e924(%rip)        # 141f40 <__malloc_av_+0x20>
  10361c:	48 85 c0             	test   %rax,%rax
  10361f:	0f 89 ab 03 00 00    	jns    1039d0 <_malloc_r+0x530>
  103625:	4c 8b 0d fc e8 03 00 	mov    0x3e8fc(%rip),%r9        # 141f28 <__malloc_av_+0x8>
  10362c:	49 81 f8 ff 01 00 00 	cmp    $0x1ff,%r8
  103633:	0f 87 57 02 00 00    	ja     103890 <_malloc_r+0x3f0>
  103639:	49 c1 e8 03          	shr    $0x3,%r8
  10363d:	b8 01 00 00 00       	mov    $0x1,%eax
  103642:	44 89 c1             	mov    %r8d,%ecx
  103645:	c1 f9 02             	sar    $0x2,%ecx
  103648:	48 d3 e0             	shl    %cl,%rax
  10364b:	49 09 c1             	or     %rax,%r9
  10364e:	43 8d 44 00 02       	lea    0x2(%r8,%r8,1),%eax
  103653:	48 98                	cltq   
  103655:	4c 89 0d cc e8 03 00 	mov    %r9,0x3e8cc(%rip)        # 141f28 <__malloc_av_+0x8>
  10365c:	48 8b 14 c5 20 1f 14 	mov    0x141f20(,%rax,8),%rdx
  103663:	00 
  103664:	48 8d 0c c5 10 1f 14 	lea    0x141f10(,%rax,8),%rcx
  10366b:	00 
  10366c:	66 48 0f 6e d1       	movq   %rcx,%xmm2
  103671:	66 48 0f 6e ca       	movq   %rdx,%xmm1
  103676:	66 0f 6c ca          	punpcklqdq %xmm2,%xmm1
  10367a:	0f 11 4b 10          	movups %xmm1,0x10(%rbx)
  10367e:	48 89 1c c5 20 1f 14 	mov    %rbx,0x141f20(,%rax,8)
  103685:	00 
  103686:	48 89 5a 18          	mov    %rbx,0x18(%rdx)
  10368a:	89 f1                	mov    %esi,%ecx
  10368c:	bf 01 00 00 00       	mov    $0x1,%edi
  103691:	c1 f9 02             	sar    $0x2,%ecx
  103694:	48 d3 e7             	shl    %cl,%rdi
  103697:	49 39 f9             	cmp    %rdi,%r9
  10369a:	0f 82 a8 00 00 00    	jb     103748 <_malloc_r+0x2a8>
  1036a0:	4c 85 cf             	test   %r9,%rdi
  1036a3:	75 16                	jne    1036bb <_malloc_r+0x21b>
  1036a5:	83 e6 fc             	and    $0xfffffffc,%esi
  1036a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  1036af:	00 
  1036b0:	48 01 ff             	add    %rdi,%rdi
  1036b3:	83 c6 04             	add    $0x4,%esi
  1036b6:	4c 85 cf             	test   %r9,%rdi
  1036b9:	74 f5                	je     1036b0 <_malloc_r+0x210>
  1036bb:	8d 44 36 02          	lea    0x2(%rsi,%rsi,1),%eax
  1036bf:	41 89 f1             	mov    %esi,%r9d
  1036c2:	48 98                	cltq   
  1036c4:	4c 8d 14 c5 10 1f 14 	lea    0x141f10(,%rax,8),%r10
  1036cb:	00 
  1036cc:	4d 89 d0             	mov    %r10,%r8
  1036cf:	49 8b 40 18          	mov    0x18(%r8),%rax
  1036d3:	eb 2b                	jmp    103700 <_malloc_r+0x260>
  1036d5:	0f 1f 00             	nopl   (%rax)
  1036d8:	48 8b 50 08          	mov    0x8(%rax),%rdx
  1036dc:	48 89 c3             	mov    %rax,%rbx
  1036df:	48 8b 40 18          	mov    0x18(%rax),%rax
  1036e3:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  1036e7:	48 89 d1             	mov    %rdx,%rcx
  1036ea:	4c 29 e1             	sub    %r12,%rcx
  1036ed:	48 83 f9 1f          	cmp    $0x1f,%rcx
  1036f1:	0f 8f 49 02 00 00    	jg     103940 <_malloc_r+0x4a0>
  1036f7:	48 85 c9             	test   %rcx,%rcx
  1036fa:	0f 89 90 02 00 00    	jns    103990 <_malloc_r+0x4f0>
  103700:	49 39 c0             	cmp    %rax,%r8
  103703:	75 d3                	jne    1036d8 <_malloc_r+0x238>
  103705:	41 83 c1 01          	add    $0x1,%r9d
  103709:	49 83 c0 10          	add    $0x10,%r8
  10370d:	41 f6 c1 03          	test   $0x3,%r9b
  103711:	75 bc                	jne    1036cf <_malloc_r+0x22f>
  103713:	e9 9d 03 00 00       	jmp    103ab5 <_malloc_r+0x615>
  103718:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10371f:	00 
  103720:	41 c7 45 00 0c 00 00 	movl   $0xc,0x0(%r13)
  103727:	00 
  103728:	31 c0                	xor    %eax,%eax
  10372a:	e9 f5 fd ff ff       	jmp    103524 <_malloc_r+0x84>
  10372f:	90                   	nop
  103730:	b8 00 04 00 00       	mov    $0x400,%eax
  103735:	be 40 00 00 00       	mov    $0x40,%esi
  10373a:	bf 3f 00 00 00       	mov    $0x3f,%edi
  10373f:	e9 4d fe ff ff       	jmp    103591 <_malloc_r+0xf1>
  103744:	0f 1f 40 00          	nopl   0x0(%rax)
  103748:	48 8b 1d e1 e7 03 00 	mov    0x3e7e1(%rip),%rbx        # 141f30 <__malloc_av_+0x10>
  10374f:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
  103753:	48 83 e1 fc          	and    $0xfffffffffffffffc,%rcx
  103757:	48 89 ca             	mov    %rcx,%rdx
  10375a:	4c 29 e2             	sub    %r12,%rdx
  10375d:	48 83 fa 1f          	cmp    $0x1f,%rdx
  103761:	7e 09                	jle    10376c <_malloc_r+0x2cc>
  103763:	4c 39 e1             	cmp    %r12,%rcx
  103766:	0f 83 cc 00 00 00    	jae    103838 <_malloc_r+0x398>
  10376c:	48 8b 15 c5 2a 02 00 	mov    0x22ac5(%rip),%rdx        # 126238 <__malloc_top_pad>
  103773:	4c 8d 04 0b          	lea    (%rbx,%rcx,1),%r8
  103777:	4c 01 e2             	add    %r12,%rdx
  10377a:	48 8d 82 1f 10 00 00 	lea    0x101f(%rdx),%rax
  103781:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  103787:	48 83 3d c1 f1 03 00 	cmpq   $0xffffffffffffffff,0x3f1c1(%rip)        # 142950 <__malloc_sbrk_base>
  10378e:	ff 
  10378f:	49 89 c6             	mov    %rax,%r14
  103792:	0f 84 52 04 00 00    	je     103bea <_malloc_r+0x74a>
  103798:	4c 89 f6             	mov    %r14,%rsi
  10379b:	4c 89 ef             	mov    %r13,%rdi
  10379e:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  1037a2:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  1037a6:	e8 25 0f 00 00       	call   1046d0 <_sbrk_r>
  1037ab:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  1037af:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  1037b3:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  1037b7:	49 89 c7             	mov    %rax,%r15
  1037ba:	0f 84 9d 02 00 00    	je     103a5d <_malloc_r+0x5bd>
  1037c0:	4c 39 c0             	cmp    %r8,%rax
  1037c3:	0f 82 87 02 00 00    	jb     103a50 <_malloc_r+0x5b0>
  1037c9:	8b 05 11 29 02 00    	mov    0x22911(%rip),%eax        # 1260e0 <__malloc_current_mallinfo>
  1037cf:	44 01 f0             	add    %r14d,%eax
  1037d2:	89 05 08 29 02 00    	mov    %eax,0x22908(%rip)        # 1260e0 <__malloc_current_mallinfo>
  1037d8:	89 c2                	mov    %eax,%edx
  1037da:	4d 39 f8             	cmp    %r15,%r8
  1037dd:	0f 85 20 03 00 00    	jne    103b03 <_malloc_r+0x663>
  1037e3:	41 f7 c7 ff 0f 00 00 	test   $0xfff,%r15d
  1037ea:	0f 85 13 03 00 00    	jne    103b03 <_malloc_r+0x663>
  1037f0:	4c 8b 3d 39 e7 03 00 	mov    0x3e739(%rip),%r15        # 141f30 <__malloc_av_+0x10>
  1037f7:	4a 8d 04 31          	lea    (%rcx,%r14,1),%rax
  1037fb:	48 83 c8 01          	or     $0x1,%rax
  1037ff:	49 89 47 08          	mov    %rax,0x8(%r15)
  103803:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  103808:	48 63 d2             	movslq %edx,%rdx
  10380b:	48 39 15 1e 2a 02 00 	cmp    %rdx,0x22a1e(%rip)        # 126230 <__malloc_max_sbrked_mem>
  103812:	73 07                	jae    10381b <_malloc_r+0x37b>
  103814:	48 89 15 15 2a 02 00 	mov    %rdx,0x22a15(%rip)        # 126230 <__malloc_max_sbrked_mem>
  10381b:	48 39 15 06 2a 02 00 	cmp    %rdx,0x22a06(%rip)        # 126228 <__malloc_max_total_mem>
  103822:	73 07                	jae    10382b <_malloc_r+0x38b>
  103824:	48 89 15 fd 29 02 00 	mov    %rdx,0x229fd(%rip)        # 126228 <__malloc_max_total_mem>
  10382b:	4c 89 fb             	mov    %r15,%rbx
  10382e:	e9 35 02 00 00       	jmp    103a68 <_malloc_r+0x5c8>
  103833:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  103838:	4c 89 e0             	mov    %r12,%rax
  10383b:	48 83 ca 01          	or     $0x1,%rdx
  10383f:	49 01 dc             	add    %rbx,%r12
  103842:	4c 89 ef             	mov    %r13,%rdi
  103845:	48 83 c8 01          	or     $0x1,%rax
  103849:	48 89 43 08          	mov    %rax,0x8(%rbx)
  10384d:	4c 89 25 dc e6 03 00 	mov    %r12,0x3e6dc(%rip)        # 141f30 <__malloc_av_+0x10>
  103854:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
  103859:	e8 42 07 00 00       	call   103fa0 <__malloc_unlock>
  10385e:	48 83 c4 28          	add    $0x28,%rsp
  103862:	48 8d 43 10          	lea    0x10(%rbx),%rax
  103866:	5b                   	pop    %rbx
  103867:	41 5c                	pop    %r12
  103869:	41 5d                	pop    %r13
  10386b:	41 5e                	pop    %r14
  10386d:	41 5f                	pop    %r15
  10386f:	5d                   	pop    %rbp
  103870:	c3                   	ret    
  103871:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  103878:	48 8b 58 18          	mov    0x18(%rax),%rbx
  10387c:	83 c6 02             	add    $0x2,%esi
  10387f:	48 39 d8             	cmp    %rbx,%rax
  103882:	0f 84 50 fd ff ff    	je     1035d8 <_malloc_r+0x138>
  103888:	e9 6d fc ff ff       	jmp    1034fa <_malloc_r+0x5a>
  10388d:	0f 1f 00             	nopl   (%rax)
  103890:	4c 89 c0             	mov    %r8,%rax
  103893:	48 c1 e8 09          	shr    $0x9,%rax
  103897:	49 81 f8 ff 09 00 00 	cmp    $0x9ff,%r8
  10389e:	0f 86 8c 01 00 00    	jbe    103a30 <_malloc_r+0x590>
  1038a4:	48 83 f8 14          	cmp    $0x14,%rax
  1038a8:	0f 87 9e 03 00 00    	ja     103c4c <_malloc_r+0x7ac>
  1038ae:	8d 48 5b             	lea    0x5b(%rax),%ecx
  1038b1:	8d 84 00 b8 00 00 00 	lea    0xb8(%rax,%rax,1),%eax
  1038b8:	48 98                	cltq   
  1038ba:	48 c1 e0 03          	shl    $0x3,%rax
  1038be:	48 8d b8 10 1f 14 00 	lea    0x141f10(%rax),%rdi
  1038c5:	48 8b 80 20 1f 14 00 	mov    0x141f20(%rax),%rax
  1038cc:	48 39 c7             	cmp    %rax,%rdi
  1038cf:	75 18                	jne    1038e9 <_malloc_r+0x449>
  1038d1:	e9 1d 03 00 00       	jmp    103bf3 <_malloc_r+0x753>
  1038d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1038dd:	00 00 00 
  1038e0:	48 8b 40 10          	mov    0x10(%rax),%rax
  1038e4:	48 39 c7             	cmp    %rax,%rdi
  1038e7:	74 0d                	je     1038f6 <_malloc_r+0x456>
  1038e9:	48 8b 50 08          	mov    0x8(%rax),%rdx
  1038ed:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  1038f1:	49 39 d0             	cmp    %rdx,%r8
  1038f4:	72 ea                	jb     1038e0 <_malloc_r+0x440>
  1038f6:	48 8b 78 18          	mov    0x18(%rax),%rdi
  1038fa:	48 89 7b 18          	mov    %rdi,0x18(%rbx)
  1038fe:	48 89 43 10          	mov    %rax,0x10(%rbx)
  103902:	48 89 5f 10          	mov    %rbx,0x10(%rdi)
  103906:	48 89 58 18          	mov    %rbx,0x18(%rax)
  10390a:	e9 7b fd ff ff       	jmp    10368a <_malloc_r+0x1ea>
  10390f:	90                   	nop
  103910:	48 83 fe 14          	cmp    $0x14,%rsi
  103914:	0f 86 76 01 00 00    	jbe    103a90 <_malloc_r+0x5f0>
  10391a:	48 83 fe 54          	cmp    $0x54,%rsi
  10391e:	0f 87 4a 03 00 00    	ja     103c6e <_malloc_r+0x7ce>
  103924:	4c 89 e6             	mov    %r12,%rsi
  103927:	48 c1 ee 0c          	shr    $0xc,%rsi
  10392b:	8d 7e 6e             	lea    0x6e(%rsi),%edi
  10392e:	83 c6 6f             	add    $0x6f,%esi
  103931:	8d 04 36             	lea    (%rsi,%rsi,1),%eax
  103934:	48 98                	cltq   
  103936:	48 c1 e0 03          	shl    $0x3,%rax
  10393a:	e9 52 fc ff ff       	jmp    103591 <_malloc_r+0xf1>
  10393f:	90                   	nop
  103940:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  103944:	4a 8d 34 23          	lea    (%rbx,%r12,1),%rsi
  103948:	49 83 cc 01          	or     $0x1,%r12
  10394c:	4c 89 63 08          	mov    %r12,0x8(%rbx)
  103950:	66 48 0f 6e ce       	movq   %rsi,%xmm1
  103955:	48 89 47 18          	mov    %rax,0x18(%rdi)
  103959:	66 0f 6c c9          	punpcklqdq %xmm1,%xmm1
  10395d:	48 89 78 10          	mov    %rdi,0x10(%rax)
  103961:	48 89 c8             	mov    %rcx,%rax
  103964:	4c 89 ef             	mov    %r13,%rdi
  103967:	48 83 c8 01          	or     $0x1,%rax
  10396b:	0f 29 0d ce e5 03 00 	movaps %xmm1,0x3e5ce(%rip)        # 141f40 <__malloc_av_+0x20>
  103972:	48 89 46 08          	mov    %rax,0x8(%rsi)
  103976:	0f 11 46 10          	movups %xmm0,0x10(%rsi)
  10397a:	48 89 0c 13          	mov    %rcx,(%rbx,%rdx,1)
  10397e:	e8 1d 06 00 00       	call   103fa0 <__malloc_unlock>
  103983:	48 8d 43 10          	lea    0x10(%rbx),%rax
  103987:	e9 98 fb ff ff       	jmp    103524 <_malloc_r+0x84>
  10398c:	0f 1f 40 00          	nopl   0x0(%rax)
  103990:	48 83 4c 13 08 01    	orq    $0x1,0x8(%rbx,%rdx,1)
  103996:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  10399a:	4c 89 ef             	mov    %r13,%rdi
  10399d:	48 89 42 18          	mov    %rax,0x18(%rdx)
  1039a1:	48 89 50 10          	mov    %rdx,0x10(%rax)
  1039a5:	e8 f6 05 00 00       	call   103fa0 <__malloc_unlock>
  1039aa:	48 8d 43 10          	lea    0x10(%rbx),%rax
  1039ae:	e9 71 fb ff ff       	jmp    103524 <_malloc_r+0x84>
  1039b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  1039b8:	4c 89 e0             	mov    %r12,%rax
  1039bb:	48 c1 e8 03          	shr    $0x3,%rax
  1039bf:	89 c6                	mov    %eax,%esi
  1039c1:	8d 44 00 02          	lea    0x2(%rax,%rax,1),%eax
  1039c5:	48 98                	cltq   
  1039c7:	48 c1 e0 03          	shl    $0x3,%rax
  1039cb:	e9 0d fb ff ff       	jmp    1034dd <_malloc_r+0x3d>
  1039d0:	4a 83 4c 03 08 01    	orq    $0x1,0x8(%rbx,%r8,1)
  1039d6:	4c 89 ef             	mov    %r13,%rdi
  1039d9:	e8 c2 05 00 00       	call   103fa0 <__malloc_unlock>
  1039de:	48 8d 43 10          	lea    0x10(%rbx),%rax
  1039e2:	e9 3d fb ff ff       	jmp    103524 <_malloc_r+0x84>
  1039e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  1039ee:	00 00 
  1039f0:	4a 8d 14 23          	lea    (%rbx,%r12,1),%rdx
  1039f4:	48 89 c1             	mov    %rax,%rcx
  1039f7:	49 83 cc 01          	or     $0x1,%r12
  1039fb:	4c 89 ef             	mov    %r13,%rdi
  1039fe:	66 48 0f 6e ca       	movq   %rdx,%xmm1
  103a03:	48 83 c9 01          	or     $0x1,%rcx
  103a07:	4c 89 63 08          	mov    %r12,0x8(%rbx)
  103a0b:	66 0f 6c c9          	punpcklqdq %xmm1,%xmm1
  103a0f:	0f 29 0d 2a e5 03 00 	movaps %xmm1,0x3e52a(%rip)        # 141f40 <__malloc_av_+0x20>
  103a16:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  103a1a:	0f 11 42 10          	movups %xmm0,0x10(%rdx)
  103a1e:	4a 89 04 03          	mov    %rax,(%rbx,%r8,1)
  103a22:	e8 79 05 00 00       	call   103fa0 <__malloc_unlock>
  103a27:	48 8d 43 10          	lea    0x10(%rbx),%rax
  103a2b:	e9 f4 fa ff ff       	jmp    103524 <_malloc_r+0x84>
  103a30:	4c 89 c0             	mov    %r8,%rax
  103a33:	48 c1 e8 06          	shr    $0x6,%rax
  103a37:	8d 48 38             	lea    0x38(%rax),%ecx
  103a3a:	8d 44 00 72          	lea    0x72(%rax,%rax,1),%eax
  103a3e:	48 98                	cltq   
  103a40:	48 c1 e0 03          	shl    $0x3,%rax
  103a44:	e9 75 fe ff ff       	jmp    1038be <_malloc_r+0x41e>
  103a49:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  103a50:	48 81 fb 20 1f 14 00 	cmp    $0x141f20,%rbx
  103a57:	0f 84 97 00 00 00    	je     103af4 <_malloc_r+0x654>
  103a5d:	48 8b 1d cc e4 03 00 	mov    0x3e4cc(%rip),%rbx        # 141f30 <__malloc_av_+0x10>
  103a64:	48 8b 43 08          	mov    0x8(%rbx),%rax
  103a68:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
  103a6c:	48 89 c2             	mov    %rax,%rdx
  103a6f:	4c 29 e2             	sub    %r12,%rdx
  103a72:	48 83 fa 1f          	cmp    $0x1f,%rdx
  103a76:	7e 09                	jle    103a81 <_malloc_r+0x5e1>
  103a78:	4c 39 e0             	cmp    %r12,%rax
  103a7b:	0f 83 b7 fd ff ff    	jae    103838 <_malloc_r+0x398>
  103a81:	4c 89 ef             	mov    %r13,%rdi
  103a84:	e8 17 05 00 00       	call   103fa0 <__malloc_unlock>
  103a89:	31 c0                	xor    %eax,%eax
  103a8b:	e9 94 fa ff ff       	jmp    103524 <_malloc_r+0x84>
  103a90:	8d 7e 5b             	lea    0x5b(%rsi),%edi
  103a93:	83 c6 5c             	add    $0x5c,%esi
  103a96:	8d 04 36             	lea    (%rsi,%rsi,1),%eax
  103a99:	48 98                	cltq   
  103a9b:	48 c1 e0 03          	shl    $0x3,%rax
  103a9f:	e9 ed fa ff ff       	jmp    103591 <_malloc_r+0xf1>
  103aa4:	49 83 ea 10          	sub    $0x10,%r10
  103aa8:	83 ee 01             	sub    $0x1,%esi
  103aab:	4d 39 52 10          	cmp    %r10,0x10(%r10)
  103aaf:	0f 85 b5 02 00 00    	jne    103d6a <_malloc_r+0x8ca>
  103ab5:	40 f6 c6 03          	test   $0x3,%sil
  103ab9:	75 e9                	jne    103aa4 <_malloc_r+0x604>
  103abb:	48 89 f8             	mov    %rdi,%rax
  103abe:	48 f7 d0             	not    %rax
  103ac1:	48 23 05 60 e4 03 00 	and    0x3e460(%rip),%rax        # 141f28 <__malloc_av_+0x8>
  103ac8:	48 89 05 59 e4 03 00 	mov    %rax,0x3e459(%rip)        # 141f28 <__malloc_av_+0x8>
  103acf:	48 01 ff             	add    %rdi,%rdi
  103ad2:	48 8d 57 ff          	lea    -0x1(%rdi),%rdx
  103ad6:	48 39 c2             	cmp    %rax,%rdx
  103ad9:	72 0c                	jb     103ae7 <_malloc_r+0x647>
  103adb:	e9 68 fc ff ff       	jmp    103748 <_malloc_r+0x2a8>
  103ae0:	41 83 c1 04          	add    $0x4,%r9d
  103ae4:	48 01 ff             	add    %rdi,%rdi
  103ae7:	48 85 c7             	test   %rax,%rdi
  103aea:	74 f4                	je     103ae0 <_malloc_r+0x640>
  103aec:	44 89 ce             	mov    %r9d,%esi
  103aef:	e9 c7 fb ff ff       	jmp    1036bb <_malloc_r+0x21b>
  103af4:	8b 05 e6 25 02 00    	mov    0x225e6(%rip),%eax        # 1260e0 <__malloc_current_mallinfo>
  103afa:	44 01 f0             	add    %r14d,%eax
  103afd:	89 05 dd 25 02 00    	mov    %eax,0x225dd(%rip)        # 1260e0 <__malloc_current_mallinfo>
  103b03:	48 83 3d 45 ee 03 00 	cmpq   $0xffffffffffffffff,0x3ee45(%rip)        # 142950 <__malloc_sbrk_base>
  103b0a:	ff 
  103b0b:	0f 84 81 01 00 00    	je     103c92 <_malloc_r+0x7f2>
  103b11:	4c 89 fa             	mov    %r15,%rdx
  103b14:	4c 29 c2             	sub    %r8,%rdx
  103b17:	01 d0                	add    %edx,%eax
  103b19:	89 05 c1 25 02 00    	mov    %eax,0x225c1(%rip)        # 1260e0 <__malloc_current_mallinfo>
  103b1f:	4c 89 fa             	mov    %r15,%rdx
  103b22:	83 e2 0f             	and    $0xf,%edx
  103b25:	0f 84 e2 00 00 00    	je     103c0d <_malloc_r+0x76d>
  103b2b:	49 29 d7             	sub    %rdx,%r15
  103b2e:	4c 89 ef             	mov    %r13,%rdi
  103b31:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
  103b35:	49 83 c7 10          	add    $0x10,%r15
  103b39:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  103b3d:	4f 8d 04 37          	lea    (%r15,%r14,1),%r8
  103b41:	41 be 10 10 00 00    	mov    $0x1010,%r14d
  103b47:	49 29 d6             	sub    %rdx,%r14
  103b4a:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  103b4e:	4d 29 c6             	sub    %r8,%r14
  103b51:	41 81 e6 ff 0f 00 00 	and    $0xfff,%r14d
  103b58:	4c 89 f6             	mov    %r14,%rsi
  103b5b:	e8 70 0b 00 00       	call   1046d0 <_sbrk_r>
  103b60:	4c 8b 45 c8          	mov    -0x38(%rbp),%r8
  103b64:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  103b68:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  103b6c:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  103b70:	0f 84 7d 01 00 00    	je     103cf3 <_malloc_r+0x853>
  103b76:	4c 29 f8             	sub    %r15,%rax
  103b79:	44 89 f2             	mov    %r14d,%edx
  103b7c:	49 01 c6             	add    %rax,%r14
  103b7f:	4c 89 f0             	mov    %r14,%rax
  103b82:	03 15 58 25 02 00    	add    0x22558(%rip),%edx        # 1260e0 <__malloc_current_mallinfo>
  103b88:	4c 89 3d a1 e3 03 00 	mov    %r15,0x3e3a1(%rip)        # 141f30 <__malloc_av_+0x10>
  103b8f:	48 83 c8 01          	or     $0x1,%rax
  103b93:	89 15 47 25 02 00    	mov    %edx,0x22547(%rip)        # 1260e0 <__malloc_current_mallinfo>
  103b99:	49 89 47 08          	mov    %rax,0x8(%r15)
  103b9d:	48 81 fb 20 1f 14 00 	cmp    $0x141f20,%rbx
  103ba4:	0f 84 5e fc ff ff    	je     103808 <_malloc_r+0x368>
  103baa:	48 83 f9 1f          	cmp    $0x1f,%rcx
  103bae:	0f 86 ea 00 00 00    	jbe    103c9e <_malloc_r+0x7fe>
  103bb4:	48 8d 41 e8          	lea    -0x18(%rcx),%rax
  103bb8:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
  103bbc:	66 0f 6f 05 dc 96 01 	movdqa 0x196dc(%rip),%xmm0        # 11d2a0 <_ZN6tflite12_GLOBAL__N_1L24kOfflineMemAllocMetadataE+0x30>
  103bc3:	00 
  103bc4:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  103bc8:	83 e1 01             	and    $0x1,%ecx
  103bcb:	48 09 c1             	or     %rax,%rcx
  103bce:	48 89 4b 08          	mov    %rcx,0x8(%rbx)
  103bd2:	0f 11 44 03 08       	movups %xmm0,0x8(%rbx,%rax,1)
  103bd7:	48 83 f8 1f          	cmp    $0x1f,%rax
  103bdb:	0f 87 24 01 00 00    	ja     103d05 <_malloc_r+0x865>
  103be1:	49 8b 47 08          	mov    0x8(%r15),%rax
  103be5:	e9 1e fc ff ff       	jmp    103808 <_malloc_r+0x368>
  103bea:	4c 8d 72 20          	lea    0x20(%rdx),%r14
  103bee:	e9 a5 fb ff ff       	jmp    103798 <_malloc_r+0x2f8>
  103bf3:	c1 f9 02             	sar    $0x2,%ecx
  103bf6:	ba 01 00 00 00       	mov    $0x1,%edx
  103bfb:	48 d3 e2             	shl    %cl,%rdx
  103bfe:	49 09 d1             	or     %rdx,%r9
  103c01:	4c 89 0d 20 e3 03 00 	mov    %r9,0x3e320(%rip)        # 141f28 <__malloc_av_+0x8>
  103c08:	e9 ed fc ff ff       	jmp    1038fa <_malloc_r+0x45a>
  103c0d:	4b 8d 34 37          	lea    (%r15,%r14,1),%rsi
  103c11:	4c 89 ef             	mov    %r13,%rdi
  103c14:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  103c18:	48 f7 de             	neg    %rsi
  103c1b:	81 e6 ff 0f 00 00    	and    $0xfff,%esi
  103c21:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  103c25:	e8 a6 0a 00 00       	call   1046d0 <_sbrk_r>
  103c2a:	31 d2                	xor    %edx,%edx
  103c2c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  103c30:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  103c34:	0f 84 45 ff ff ff    	je     103b7f <_malloc_r+0x6df>
  103c3a:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  103c3e:	4c 29 f8             	sub    %r15,%rax
  103c41:	89 f2                	mov    %esi,%edx
  103c43:	4c 8d 34 30          	lea    (%rax,%rsi,1),%r14
  103c47:	e9 33 ff ff ff       	jmp    103b7f <_malloc_r+0x6df>
  103c4c:	48 83 f8 54          	cmp    $0x54,%rax
  103c50:	77 59                	ja     103cab <_malloc_r+0x80b>
  103c52:	4c 89 c0             	mov    %r8,%rax
  103c55:	48 c1 e8 0c          	shr    $0xc,%rax
  103c59:	8d 48 6e             	lea    0x6e(%rax),%ecx
  103c5c:	8d 84 00 de 00 00 00 	lea    0xde(%rax,%rax,1),%eax
  103c63:	48 98                	cltq   
  103c65:	48 c1 e0 03          	shl    $0x3,%rax
  103c69:	e9 50 fc ff ff       	jmp    1038be <_malloc_r+0x41e>
  103c6e:	48 81 fe 54 01 00 00 	cmp    $0x154,%rsi
  103c75:	77 58                	ja     103ccf <_malloc_r+0x82f>
  103c77:	4c 89 e6             	mov    %r12,%rsi
  103c7a:	48 c1 ee 0f          	shr    $0xf,%rsi
  103c7e:	8d 7e 77             	lea    0x77(%rsi),%edi
  103c81:	83 c6 78             	add    $0x78,%esi
  103c84:	8d 04 36             	lea    (%rsi,%rsi,1),%eax
  103c87:	48 98                	cltq   
  103c89:	48 c1 e0 03          	shl    $0x3,%rax
  103c8d:	e9 ff f8 ff ff       	jmp    103591 <_malloc_r+0xf1>
  103c92:	4c 89 3d b7 ec 03 00 	mov    %r15,0x3ecb7(%rip)        # 142950 <__malloc_sbrk_base>
  103c99:	e9 81 fe ff ff       	jmp    103b1f <_malloc_r+0x67f>
  103c9e:	49 c7 47 08 01 00 00 	movq   $0x1,0x8(%r15)
  103ca5:	00 
  103ca6:	e9 d6 fd ff ff       	jmp    103a81 <_malloc_r+0x5e1>
  103cab:	48 3d 54 01 00 00    	cmp    $0x154,%rax
  103cb1:	77 70                	ja     103d23 <_malloc_r+0x883>
  103cb3:	4c 89 c0             	mov    %r8,%rax
  103cb6:	48 c1 e8 0f          	shr    $0xf,%rax
  103cba:	8d 48 77             	lea    0x77(%rax),%ecx
  103cbd:	8d 84 00 f0 00 00 00 	lea    0xf0(%rax,%rax,1),%eax
  103cc4:	48 98                	cltq   
  103cc6:	48 c1 e0 03          	shl    $0x3,%rax
  103cca:	e9 ef fb ff ff       	jmp    1038be <_malloc_r+0x41e>
  103ccf:	48 81 fe 54 05 00 00 	cmp    $0x554,%rsi
  103cd6:	77 6f                	ja     103d47 <_malloc_r+0x8a7>
  103cd8:	4c 89 e6             	mov    %r12,%rsi
  103cdb:	48 c1 ee 12          	shr    $0x12,%rsi
  103cdf:	8d 7e 7c             	lea    0x7c(%rsi),%edi
  103ce2:	83 c6 7d             	add    $0x7d,%esi
  103ce5:	8d 04 36             	lea    (%rsi,%rsi,1),%eax
  103ce8:	48 98                	cltq   
  103cea:	48 c1 e0 03          	shl    $0x3,%rax
  103cee:	e9 9e f8 ff ff       	jmp    103591 <_malloc_r+0xf1>
  103cf3:	49 8d 44 10 f0       	lea    -0x10(%r8,%rdx,1),%rax
  103cf8:	31 d2                	xor    %edx,%edx
  103cfa:	4c 29 f8             	sub    %r15,%rax
  103cfd:	49 89 c6             	mov    %rax,%r14
  103d00:	e9 7a fe ff ff       	jmp    103b7f <_malloc_r+0x6df>
  103d05:	48 8d 73 10          	lea    0x10(%rbx),%rsi
  103d09:	4c 89 ef             	mov    %r13,%rdi
  103d0c:	e8 4f 7e 00 00       	call   10bb60 <_free_r>
  103d11:	8b 15 c9 23 02 00    	mov    0x223c9(%rip),%edx        # 1260e0 <__malloc_current_mallinfo>
  103d17:	4c 8b 3d 12 e2 03 00 	mov    0x3e212(%rip),%r15        # 141f30 <__malloc_av_+0x10>
  103d1e:	e9 be fe ff ff       	jmp    103be1 <_malloc_r+0x741>
  103d23:	48 3d 54 05 00 00    	cmp    $0x554,%rax
  103d29:	77 30                	ja     103d5b <_malloc_r+0x8bb>
  103d2b:	4c 89 c0             	mov    %r8,%rax
  103d2e:	48 c1 e8 12          	shr    $0x12,%rax
  103d32:	8d 48 7c             	lea    0x7c(%rax),%ecx
  103d35:	8d 84 00 fa 00 00 00 	lea    0xfa(%rax,%rax,1),%eax
  103d3c:	48 98                	cltq   
  103d3e:	48 c1 e0 03          	shl    $0x3,%rax
  103d42:	e9 77 fb ff ff       	jmp    1038be <_malloc_r+0x41e>
  103d47:	b8 f0 07 00 00       	mov    $0x7f0,%eax
  103d4c:	be 7f 00 00 00       	mov    $0x7f,%esi
  103d51:	bf 7e 00 00 00       	mov    $0x7e,%edi
  103d56:	e9 36 f8 ff ff       	jmp    103591 <_malloc_r+0xf1>
  103d5b:	b8 f0 07 00 00       	mov    $0x7f0,%eax
  103d60:	b9 7e 00 00 00       	mov    $0x7e,%ecx
  103d65:	e9 54 fb ff ff       	jmp    1038be <_malloc_r+0x41e>
  103d6a:	48 8b 05 b7 e1 03 00 	mov    0x3e1b7(%rip),%rax        # 141f28 <__malloc_av_+0x8>
  103d71:	e9 59 fd ff ff       	jmp    103acf <_malloc_r+0x62f>
  103d76:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  103d7d:	00 00 00 

0000000000103d80 <memchr>:
  103d80:	48 89 f8             	mov    %rdi,%rax
  103d83:	89 f7                	mov    %esi,%edi
  103d85:	a8 07                	test   $0x7,%al
  103d87:	74 2a                	je     103db3 <memchr+0x33>
  103d89:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
  103d8d:	48 85 d2             	test   %rdx,%rdx
  103d90:	75 14                	jne    103da6 <memchr+0x26>
  103d92:	eb 1c                	jmp    103db0 <memchr+0x30>
  103d94:	0f 1f 40 00          	nopl   0x0(%rax)
  103d98:	48 83 c0 01          	add    $0x1,%rax
  103d9c:	a8 07                	test   $0x7,%al
  103d9e:	74 20                	je     103dc0 <memchr+0x40>
  103da0:	48 83 e9 01          	sub    $0x1,%rcx
  103da4:	72 0a                	jb     103db0 <memchr+0x30>
  103da6:	40 38 38             	cmp    %dil,(%rax)
  103da9:	75 ed                	jne    103d98 <memchr+0x18>
  103dab:	c3                   	ret    
  103dac:	0f 1f 40 00          	nopl   0x0(%rax)
  103db0:	31 c0                	xor    %eax,%eax
  103db2:	c3                   	ret    
  103db3:	48 89 d1             	mov    %rdx,%rcx
  103db6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  103dbd:	00 00 00 
  103dc0:	48 83 f9 07          	cmp    $0x7,%rcx
  103dc4:	76 5d                	jbe    103e23 <memchr+0xa3>
  103dc6:	49 ba ff fe fe fe fe 	movabs $0xfefefefefefefeff,%r10
  103dcd:	fe fe fe 
  103dd0:	40 0f b6 f6          	movzbl %sil,%esi
  103dd4:	49 b9 80 80 80 80 80 	movabs $0x8080808080808080,%r9
  103ddb:	80 80 80 
  103dde:	89 f2                	mov    %esi,%edx
  103de0:	c1 e2 08             	shl    $0x8,%edx
  103de3:	01 f2                	add    %esi,%edx
  103de5:	49 89 d0             	mov    %rdx,%r8
  103de8:	49 c1 e0 10          	shl    $0x10,%r8
  103dec:	49 01 d0             	add    %rdx,%r8
  103def:	4c 89 c2             	mov    %r8,%rdx
  103df2:	48 c1 e2 20          	shl    $0x20,%rdx
  103df6:	49 01 d0             	add    %rdx,%r8
  103df9:	eb 13                	jmp    103e0e <memchr+0x8e>
  103dfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  103e00:	48 83 e9 08          	sub    $0x8,%rcx
  103e04:	48 83 c0 08          	add    $0x8,%rax
  103e08:	48 83 f9 07          	cmp    $0x7,%rcx
  103e0c:	76 15                	jbe    103e23 <memchr+0xa3>
  103e0e:	48 8b 10             	mov    (%rax),%rdx
  103e11:	4c 31 c2             	xor    %r8,%rdx
  103e14:	4a 8d 34 12          	lea    (%rdx,%r10,1),%rsi
  103e18:	48 f7 d2             	not    %rdx
  103e1b:	48 21 f2             	and    %rsi,%rdx
  103e1e:	4c 85 ca             	test   %r9,%rdx
  103e21:	74 dd                	je     103e00 <memchr+0x80>
  103e23:	48 8d 14 08          	lea    (%rax,%rcx,1),%rdx
  103e27:	48 85 c9             	test   %rcx,%rcx
  103e2a:	75 11                	jne    103e3d <memchr+0xbd>
  103e2c:	eb 82                	jmp    103db0 <memchr+0x30>
  103e2e:	66 90                	xchg   %ax,%ax
  103e30:	48 83 c0 01          	add    $0x1,%rax
  103e34:	48 39 c2             	cmp    %rax,%rdx
  103e37:	0f 84 73 ff ff ff    	je     103db0 <memchr+0x30>
  103e3d:	40 38 38             	cmp    %dil,(%rax)
  103e40:	75 ee                	jne    103e30 <memchr+0xb0>
  103e42:	c3                   	ret    
  103e43:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  103e4a:	00 00 00 
  103e4d:	0f 1f 00             	nopl   (%rax)

0000000000103e50 <memmove>:
  103e50:	48 89 f1             	mov    %rsi,%rcx
  103e53:	49 89 d0             	mov    %rdx,%r8
  103e56:	48 39 fe             	cmp    %rdi,%rsi
  103e59:	73 2d                	jae    103e88 <memmove+0x38>
  103e5b:	48 8d 04 16          	lea    (%rsi,%rdx,1),%rax
  103e5f:	48 39 c7             	cmp    %rax,%rdi
  103e62:	73 24                	jae    103e88 <memmove+0x38>
  103e64:	48 8d 42 ff          	lea    -0x1(%rdx),%rax
  103e68:	48 85 d2             	test   %rdx,%rdx
  103e6b:	74 10                	je     103e7d <memmove+0x2d>
  103e6d:	0f 1f 00             	nopl   (%rax)
  103e70:	0f b6 14 01          	movzbl (%rcx,%rax,1),%edx
  103e74:	88 14 07             	mov    %dl,(%rdi,%rax,1)
  103e77:	48 83 e8 01          	sub    $0x1,%rax
  103e7b:	73 f3                	jae    103e70 <memmove+0x20>
  103e7d:	48 89 f8             	mov    %rdi,%rax
  103e80:	c3                   	ret    
  103e81:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  103e88:	48 89 fe             	mov    %rdi,%rsi
  103e8b:	49 83 f8 1f          	cmp    $0x1f,%r8
  103e8f:	77 2f                	ja     103ec0 <memmove+0x70>
  103e91:	4d 8d 48 ff          	lea    -0x1(%r8),%r9
  103e95:	4d 85 c0             	test   %r8,%r8
  103e98:	74 e3                	je     103e7d <memmove+0x2d>
  103e9a:	31 c0                	xor    %eax,%eax
  103e9c:	0f 1f 40 00          	nopl   0x0(%rax)
  103ea0:	0f b6 14 01          	movzbl (%rcx,%rax,1),%edx
  103ea4:	88 14 06             	mov    %dl,(%rsi,%rax,1)
  103ea7:	48 89 c2             	mov    %rax,%rdx
  103eaa:	48 83 c0 01          	add    $0x1,%rax
  103eae:	49 39 d1             	cmp    %rdx,%r9
  103eb1:	75 ed                	jne    103ea0 <memmove+0x50>
  103eb3:	48 89 f8             	mov    %rdi,%rax
  103eb6:	c3                   	ret    
  103eb7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  103ebe:	00 00 
  103ec0:	49 89 f9             	mov    %rdi,%r9
  103ec3:	49 09 c9             	or     %rcx,%r9
  103ec6:	41 83 e1 07          	and    $0x7,%r9d
  103eca:	0f 85 a0 00 00 00    	jne    103f70 <memmove+0x120>
  103ed0:	49 8d 40 e0          	lea    -0x20(%r8),%rax
  103ed4:	48 89 ca             	mov    %rcx,%rdx
  103ed7:	48 83 e0 e0          	and    $0xffffffffffffffe0,%rax
  103edb:	4c 8d 58 20          	lea    0x20(%rax),%r11
  103edf:	48 89 f8             	mov    %rdi,%rax
  103ee2:	4a 8d 34 1f          	lea    (%rdi,%r11,1),%rsi
  103ee6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  103eed:	00 00 00 
  103ef0:	4c 8b 12             	mov    (%rdx),%r10
  103ef3:	48 83 c2 20          	add    $0x20,%rdx
  103ef7:	48 83 c0 20          	add    $0x20,%rax
  103efb:	4c 89 50 e0          	mov    %r10,-0x20(%rax)
  103eff:	4c 8b 52 e8          	mov    -0x18(%rdx),%r10
  103f03:	4c 89 50 e8          	mov    %r10,-0x18(%rax)
  103f07:	4c 8b 52 f0          	mov    -0x10(%rdx),%r10
  103f0b:	4c 89 50 f0          	mov    %r10,-0x10(%rax)
  103f0f:	4c 8b 52 f8          	mov    -0x8(%rdx),%r10
  103f13:	4c 89 50 f8          	mov    %r10,-0x8(%rax)
  103f17:	48 39 f0             	cmp    %rsi,%rax
  103f1a:	75 d4                	jne    103ef0 <memmove+0xa0>
  103f1c:	4c 89 c0             	mov    %r8,%rax
  103f1f:	4c 01 d9             	add    %r11,%rcx
  103f22:	83 e0 1f             	and    $0x1f,%eax
  103f25:	41 f6 c0 18          	test   $0x18,%r8b
  103f29:	74 4e                	je     103f79 <memmove+0x129>
  103f2b:	4a 8b 14 09          	mov    (%rcx,%r9,1),%rdx
  103f2f:	4a 89 14 0e          	mov    %rdx,(%rsi,%r9,1)
  103f33:	49 83 c1 08          	add    $0x8,%r9
  103f37:	48 89 c2             	mov    %rax,%rdx
  103f3a:	4c 29 ca             	sub    %r9,%rdx
  103f3d:	48 83 fa 07          	cmp    $0x7,%rdx
  103f41:	77 e8                	ja     103f2b <memmove+0xdb>
  103f43:	48 83 e8 08          	sub    $0x8,%rax
  103f47:	41 83 e0 07          	and    $0x7,%r8d
  103f4b:	48 c1 e8 03          	shr    $0x3,%rax
  103f4f:	4d 8d 48 ff          	lea    -0x1(%r8),%r9
  103f53:	48 8d 04 c5 08 00 00 	lea    0x8(,%rax,8),%rax
  103f5a:	00 
  103f5b:	48 01 c6             	add    %rax,%rsi
  103f5e:	48 01 c1             	add    %rax,%rcx
  103f61:	4d 85 c0             	test   %r8,%r8
  103f64:	0f 85 30 ff ff ff    	jne    103e9a <memmove+0x4a>
  103f6a:	e9 0e ff ff ff       	jmp    103e7d <memmove+0x2d>
  103f6f:	90                   	nop
  103f70:	4d 8d 48 ff          	lea    -0x1(%r8),%r9
  103f74:	e9 21 ff ff ff       	jmp    103e9a <memmove+0x4a>
  103f79:	49 89 c0             	mov    %rax,%r8
  103f7c:	e9 10 ff ff ff       	jmp    103e91 <memmove+0x41>
  103f81:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  103f88:	00 00 00 
  103f8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000103f90 <__malloc_lock>:
  103f90:	bf 70 29 14 00       	mov    $0x142970,%edi
  103f95:	e9 1c de 00 00       	jmp    111db6 <__retarget_lock_acquire_recursive>
  103f9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000103fa0 <__malloc_unlock>:
  103fa0:	bf 70 29 14 00       	mov    $0x142970,%edi
  103fa5:	e9 15 de 00 00       	jmp    111dbf <__retarget_lock_release_recursive>
  103faa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000103fb0 <printf>:
  103fb0:	55                   	push   %rbp
  103fb1:	48 89 e5             	mov    %rsp,%rbp
  103fb4:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  103fbb:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  103fc2:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  103fc9:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  103fd0:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  103fd7:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  103fde:	84 c0                	test   %al,%al
  103fe0:	74 20                	je     104002 <printf+0x52>
  103fe2:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  103fe6:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  103fea:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  103fee:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  103ff2:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  103ff6:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  103ffa:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  103ffe:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  104002:	48 8b 05 3f e9 03 00 	mov    0x3e93f(%rip),%rax        # 142948 <_impure_ptr>
  104009:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  10400d:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
  104014:	c7 85 38 ff ff ff 08 	movl   $0x8,-0xc8(%rbp)
  10401b:	00 00 00 
  10401e:	48 89 95 40 ff ff ff 	mov    %rdx,-0xc0(%rbp)
  104025:	48 89 fa             	mov    %rdi,%rdx
  104028:	48 8b 70 10          	mov    0x10(%rax),%rsi
  10402c:	48 89 c7             	mov    %rax,%rdi
  10402f:	48 89 8d 48 ff ff ff 	mov    %rcx,-0xb8(%rbp)
  104036:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  10403d:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  104044:	00 00 00 
  104047:	e8 f4 26 00 00       	call   106740 <_vfprintf_r>
  10404c:	c9                   	leave  
  10404d:	c3                   	ret    
  10404e:	66 90                	xchg   %ax,%ax

0000000000104050 <_puts_r>:
  104050:	55                   	push   %rbp
  104051:	48 89 e5             	mov    %rsp,%rbp
  104054:	41 54                	push   %r12
  104056:	49 89 f4             	mov    %rsi,%r12
  104059:	53                   	push   %rbx
  10405a:	48 89 fb             	mov    %rdi,%rbx
  10405d:	48 89 f7             	mov    %rsi,%rdi
  104060:	48 83 ec 50          	sub    $0x50,%rsp
  104064:	e8 37 07 00 00       	call   1047a0 <strlen>
  104069:	4c 89 65 d0          	mov    %r12,-0x30(%rbp)
  10406d:	4c 8b 63 10          	mov    0x10(%rbx),%r12
  104071:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  104075:	48 83 c0 01          	add    $0x1,%rax
  104079:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  10407d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  104081:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  104085:	8b 43 50             	mov    0x50(%rbx),%eax
  104088:	48 c7 45 e0 53 e3 11 	movq   $0x11e353,-0x20(%rbp)
  10408f:	00 
  104090:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
  104097:	00 
  104098:	c7 45 b8 02 00 00 00 	movl   $0x2,-0x48(%rbp)
  10409f:	85 c0                	test   %eax,%eax
  1040a1:	74 4d                	je     1040f0 <_puts_r+0xa0>
  1040a3:	41 f6 84 24 b0 00 00 	testb  $0x1,0xb0(%r12)
  1040aa:	00 01 
  1040ac:	75 08                	jne    1040b6 <_puts_r+0x66>
  1040ae:	41 f6 44 24 11 02    	testb  $0x2,0x11(%r12)
  1040b4:	74 6a                	je     104120 <_puts_r+0xd0>
  1040b6:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  1040ba:	4c 89 e6             	mov    %r12,%rsi
  1040bd:	48 89 df             	mov    %rbx,%rdi
  1040c0:	e8 7b ee ff ff       	call   102f40 <__sfvwrite_r>
  1040c5:	83 f8 01             	cmp    $0x1,%eax
  1040c8:	19 c0                	sbb    %eax,%eax
  1040ca:	83 e0 0b             	and    $0xb,%eax
  1040cd:	83 e8 01             	sub    $0x1,%eax
  1040d0:	41 f6 84 24 b0 00 00 	testb  $0x1,0xb0(%r12)
  1040d7:	00 01 
  1040d9:	75 08                	jne    1040e3 <_puts_r+0x93>
  1040db:	41 f6 44 24 11 02    	testb  $0x2,0x11(%r12)
  1040e1:	74 1d                	je     104100 <_puts_r+0xb0>
  1040e3:	48 83 c4 50          	add    $0x50,%rsp
  1040e7:	5b                   	pop    %rbx
  1040e8:	41 5c                	pop    %r12
  1040ea:	5d                   	pop    %rbp
  1040eb:	c3                   	ret    
  1040ec:	0f 1f 40 00          	nopl   0x0(%rax)
  1040f0:	48 89 df             	mov    %rbx,%rdi
  1040f3:	e8 58 77 00 00       	call   10b850 <__sinit>
  1040f8:	eb a9                	jmp    1040a3 <_puts_r+0x53>
  1040fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  104100:	49 8b bc 24 a0 00 00 	mov    0xa0(%r12),%rdi
  104107:	00 
  104108:	89 45 ac             	mov    %eax,-0x54(%rbp)
  10410b:	e8 af dc 00 00       	call   111dbf <__retarget_lock_release_recursive>
  104110:	8b 45 ac             	mov    -0x54(%rbp),%eax
  104113:	48 83 c4 50          	add    $0x50,%rsp
  104117:	5b                   	pop    %rbx
  104118:	41 5c                	pop    %r12
  10411a:	5d                   	pop    %rbp
  10411b:	c3                   	ret    
  10411c:	0f 1f 40 00          	nopl   0x0(%rax)
  104120:	49 8b bc 24 a0 00 00 	mov    0xa0(%r12),%rdi
  104127:	00 
  104128:	e8 89 dc 00 00       	call   111db6 <__retarget_lock_acquire_recursive>
  10412d:	eb 87                	jmp    1040b6 <_puts_r+0x66>
  10412f:	90                   	nop

0000000000104130 <puts>:
  104130:	48 89 fe             	mov    %rdi,%rsi
  104133:	48 8b 3d 0e e8 03 00 	mov    0x3e80e(%rip),%rdi        # 142948 <_impure_ptr>
  10413a:	e9 11 ff ff ff       	jmp    104050 <_puts_r>
  10413f:	90                   	nop

0000000000104140 <_realloc_r>:
  104140:	55                   	push   %rbp
  104141:	48 89 e5             	mov    %rsp,%rbp
  104144:	41 57                	push   %r15
  104146:	41 56                	push   %r14
  104148:	49 89 d6             	mov    %rdx,%r14
  10414b:	41 55                	push   %r13
  10414d:	49 89 fd             	mov    %rdi,%r13
  104150:	41 54                	push   %r12
  104152:	53                   	push   %rbx
  104153:	48 83 ec 18          	sub    $0x18,%rsp
  104157:	48 85 f6             	test   %rsi,%rsi
  10415a:	0f 84 c0 01 00 00    	je     104320 <_realloc_r+0x1e0>
  104160:	48 89 f3             	mov    %rsi,%rbx
  104163:	4d 8d 66 17          	lea    0x17(%r14),%r12
  104167:	e8 24 fe ff ff       	call   103f90 <__malloc_lock>
  10416c:	48 8b 4b f8          	mov    -0x8(%rbx),%rcx
  104170:	48 8d 53 f0          	lea    -0x10(%rbx),%rdx
  104174:	49 89 cf             	mov    %rcx,%r15
  104177:	49 83 e7 fc          	and    $0xfffffffffffffffc,%r15
  10417b:	49 83 fc 2e          	cmp    $0x2e,%r12
  10417f:	0f 87 0b 01 00 00    	ja     104290 <_realloc_r+0x150>
  104185:	31 c0                	xor    %eax,%eax
  104187:	41 bc 20 00 00 00    	mov    $0x20,%r12d
  10418d:	4d 39 f4             	cmp    %r14,%r12
  104190:	0f 82 da 01 00 00    	jb     104370 <_realloc_r+0x230>
  104196:	84 c0                	test   %al,%al
  104198:	0f 85 d2 01 00 00    	jne    104370 <_realloc_r+0x230>
  10419e:	4d 39 e7             	cmp    %r12,%r15
  1041a1:	0f 8d 19 01 00 00    	jge    1042c0 <_realloc_r+0x180>
  1041a7:	4a 8d 3c 3a          	lea    (%rdx,%r15,1),%rdi
  1041ab:	48 39 3d 7e dd 03 00 	cmp    %rdi,0x3dd7e(%rip)        # 141f30 <__malloc_av_+0x10>
  1041b2:	48 8b 47 08          	mov    0x8(%rdi),%rax
  1041b6:	0f 84 c4 01 00 00    	je     104380 <_realloc_r+0x240>
  1041bc:	48 89 c6             	mov    %rax,%rsi
  1041bf:	48 83 e6 fe          	and    $0xfffffffffffffffe,%rsi
  1041c3:	f6 44 37 08 01       	testb  $0x1,0x8(%rdi,%rsi,1)
  1041c8:	0f 85 32 01 00 00    	jne    104300 <_realloc_r+0x1c0>
  1041ce:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
  1041d2:	49 8d 34 07          	lea    (%r15,%rax,1),%rsi
  1041d6:	49 39 f4             	cmp    %rsi,%r12
  1041d9:	0f 8e c9 00 00 00    	jle    1042a8 <_realloc_r+0x168>
  1041df:	83 e1 01             	and    $0x1,%ecx
  1041e2:	75 2c                	jne    104210 <_realloc_r+0xd0>
  1041e4:	48 89 d1             	mov    %rdx,%rcx
  1041e7:	48 2b 4b f0          	sub    -0x10(%rbx),%rcx
  1041eb:	48 8b 71 08          	mov    0x8(%rcx),%rsi
  1041ef:	48 83 e6 fc          	and    $0xfffffffffffffffc,%rsi
  1041f3:	48 01 f0             	add    %rsi,%rax
  1041f6:	4e 8d 04 38          	lea    (%rax,%r15,1),%r8
  1041fa:	4d 39 c4             	cmp    %r8,%r12
  1041fd:	0f 8e 1d 03 00 00    	jle    104520 <_realloc_r+0x3e0>
  104203:	4d 8d 04 37          	lea    (%r15,%rsi,1),%r8
  104207:	4d 39 c4             	cmp    %r8,%r12
  10420a:	0f 8e 88 02 00 00    	jle    104498 <_realloc_r+0x358>
  104210:	4c 89 f6             	mov    %r14,%rsi
  104213:	4c 89 ef             	mov    %r13,%rdi
  104216:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  10421a:	e8 81 f2 ff ff       	call   1034a0 <_malloc_r>
  10421f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  104223:	48 85 c0             	test   %rax,%rax
  104226:	49 89 c6             	mov    %rax,%r14
  104229:	0f 84 ec 03 00 00    	je     10461b <_realloc_r+0x4db>
  10422f:	48 8b 43 f8          	mov    -0x8(%rbx),%rax
  104233:	49 8d 4e f0          	lea    -0x10(%r14),%rcx
  104237:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  10423b:	48 01 d0             	add    %rdx,%rax
  10423e:	48 39 c8             	cmp    %rcx,%rax
  104241:	0f 84 11 02 00 00    	je     104458 <_realloc_r+0x318>
  104247:	49 8d 57 f8          	lea    -0x8(%r15),%rdx
  10424b:	48 83 fa 48          	cmp    $0x48,%rdx
  10424f:	0f 87 bb 02 00 00    	ja     104510 <_realloc_r+0x3d0>
  104255:	48 83 fa 27          	cmp    $0x27,%rdx
  104259:	0f 87 11 02 00 00    	ja     104470 <_realloc_r+0x330>
  10425f:	4c 89 f0             	mov    %r14,%rax
  104262:	48 89 da             	mov    %rbx,%rdx
  104265:	48 8b 0a             	mov    (%rdx),%rcx
  104268:	48 89 08             	mov    %rcx,(%rax)
  10426b:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  10426f:	48 89 48 08          	mov    %rcx,0x8(%rax)
  104273:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  104277:	48 89 50 10          	mov    %rdx,0x10(%rax)
  10427b:	4c 89 ef             	mov    %r13,%rdi
  10427e:	48 89 de             	mov    %rbx,%rsi
  104281:	e8 da 78 00 00       	call   10bb60 <_free_r>
  104286:	4c 89 ef             	mov    %r13,%rdi
  104289:	e8 12 fd ff ff       	call   103fa0 <__malloc_unlock>
  10428e:	eb 5e                	jmp    1042ee <_realloc_r+0x1ae>
  104290:	49 83 e4 f0          	and    $0xfffffffffffffff0,%r12
  104294:	49 81 fc ff ff ff 7f 	cmp    $0x7fffffff,%r12
  10429b:	0f 97 c0             	seta   %al
  10429e:	e9 ea fe ff ff       	jmp    10418d <_realloc_r+0x4d>
  1042a3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  1042a8:	48 8b 47 18          	mov    0x18(%rdi),%rax
  1042ac:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
  1042b0:	49 89 f7             	mov    %rsi,%r15
  1042b3:	48 89 41 18          	mov    %rax,0x18(%rcx)
  1042b7:	48 89 48 10          	mov    %rcx,0x10(%rax)
  1042bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  1042c0:	48 8b 42 08          	mov    0x8(%rdx),%rax
  1042c4:	4c 89 ff             	mov    %r15,%rdi
  1042c7:	4a 8d 0c 3a          	lea    (%rdx,%r15,1),%rcx
  1042cb:	4c 29 e7             	sub    %r12,%rdi
  1042ce:	83 e0 01             	and    $0x1,%eax
  1042d1:	48 83 ff 1f          	cmp    $0x1f,%rdi
  1042d5:	77 69                	ja     104340 <_realloc_r+0x200>
  1042d7:	4c 09 f8             	or     %r15,%rax
  1042da:	48 89 42 08          	mov    %rax,0x8(%rdx)
  1042de:	48 83 49 08 01       	orq    $0x1,0x8(%rcx)
  1042e3:	4c 89 ef             	mov    %r13,%rdi
  1042e6:	49 89 de             	mov    %rbx,%r14
  1042e9:	e8 b2 fc ff ff       	call   103fa0 <__malloc_unlock>
  1042ee:	48 83 c4 18          	add    $0x18,%rsp
  1042f2:	4c 89 f0             	mov    %r14,%rax
  1042f5:	5b                   	pop    %rbx
  1042f6:	41 5c                	pop    %r12
  1042f8:	41 5d                	pop    %r13
  1042fa:	41 5e                	pop    %r14
  1042fc:	41 5f                	pop    %r15
  1042fe:	5d                   	pop    %rbp
  1042ff:	c3                   	ret    
  104300:	83 e1 01             	and    $0x1,%ecx
  104303:	0f 85 07 ff ff ff    	jne    104210 <_realloc_r+0xd0>
  104309:	48 89 d1             	mov    %rdx,%rcx
  10430c:	48 2b 4b f0          	sub    -0x10(%rbx),%rcx
  104310:	48 8b 71 08          	mov    0x8(%rcx),%rsi
  104314:	48 83 e6 fc          	and    $0xfffffffffffffffc,%rsi
  104318:	e9 e6 fe ff ff       	jmp    104203 <_realloc_r+0xc3>
  10431d:	0f 1f 00             	nopl   (%rax)
  104320:	48 83 c4 18          	add    $0x18,%rsp
  104324:	48 89 d6             	mov    %rdx,%rsi
  104327:	5b                   	pop    %rbx
  104328:	41 5c                	pop    %r12
  10432a:	41 5d                	pop    %r13
  10432c:	41 5e                	pop    %r14
  10432e:	41 5f                	pop    %r15
  104330:	5d                   	pop    %rbp
  104331:	e9 6a f1 ff ff       	jmp    1034a0 <_malloc_r>
  104336:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10433d:	00 00 00 
  104340:	4a 8d 34 22          	lea    (%rdx,%r12,1),%rsi
  104344:	48 83 cf 01          	or     $0x1,%rdi
  104348:	4c 09 e0             	or     %r12,%rax
  10434b:	48 89 42 08          	mov    %rax,0x8(%rdx)
  10434f:	48 83 c6 10          	add    $0x10,%rsi
  104353:	48 89 7e f8          	mov    %rdi,-0x8(%rsi)
  104357:	4c 89 ef             	mov    %r13,%rdi
  10435a:	48 83 49 08 01       	orq    $0x1,0x8(%rcx)
  10435f:	e8 fc 77 00 00       	call   10bb60 <_free_r>
  104364:	e9 7a ff ff ff       	jmp    1042e3 <_realloc_r+0x1a3>
  104369:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  104370:	41 c7 45 00 0c 00 00 	movl   $0xc,0x0(%r13)
  104377:	00 
  104378:	45 31 f6             	xor    %r14d,%r14d
  10437b:	e9 6e ff ff ff       	jmp    1042ee <_realloc_r+0x1ae>
  104380:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
  104384:	49 8d 7c 24 20       	lea    0x20(%r12),%rdi
  104389:	4a 8d 34 38          	lea    (%rax,%r15,1),%rsi
  10438d:	48 39 fe             	cmp    %rdi,%rsi
  104390:	0f 8d 2a 02 00 00    	jge    1045c0 <_realloc_r+0x480>
  104396:	83 e1 01             	and    $0x1,%ecx
  104399:	0f 85 71 fe ff ff    	jne    104210 <_realloc_r+0xd0>
  10439f:	48 89 d1             	mov    %rdx,%rcx
  1043a2:	48 2b 4b f0          	sub    -0x10(%rbx),%rcx
  1043a6:	48 8b 71 08          	mov    0x8(%rcx),%rsi
  1043aa:	48 83 e6 fc          	and    $0xfffffffffffffffc,%rsi
  1043ae:	48 01 f0             	add    %rsi,%rax
  1043b1:	4e 8d 04 38          	lea    (%rax,%r15,1),%r8
  1043b5:	4c 39 c7             	cmp    %r8,%rdi
  1043b8:	0f 8f 45 fe ff ff    	jg     104203 <_realloc_r+0xc3>
  1043be:	48 8b 51 10          	mov    0x10(%rcx),%rdx
  1043c2:	48 8b 41 18          	mov    0x18(%rcx),%rax
  1043c6:	4c 8d 71 10          	lea    0x10(%rcx),%r14
  1043ca:	48 89 42 18          	mov    %rax,0x18(%rdx)
  1043ce:	48 89 50 10          	mov    %rdx,0x10(%rax)
  1043d2:	49 8d 57 f8          	lea    -0x8(%r15),%rdx
  1043d6:	48 83 fa 48          	cmp    $0x48,%rdx
  1043da:	0f 87 82 02 00 00    	ja     104662 <_realloc_r+0x522>
  1043e0:	4c 89 f0             	mov    %r14,%rax
  1043e3:	48 83 fa 27          	cmp    $0x27,%rdx
  1043e7:	76 21                	jbe    10440a <_realloc_r+0x2ca>
  1043e9:	48 8b 03             	mov    (%rbx),%rax
  1043ec:	48 89 41 10          	mov    %rax,0x10(%rcx)
  1043f0:	48 8b 43 08          	mov    0x8(%rbx),%rax
  1043f4:	48 89 41 18          	mov    %rax,0x18(%rcx)
  1043f8:	48 83 fa 37          	cmp    $0x37,%rdx
  1043fc:	0f 87 80 02 00 00    	ja     104682 <_realloc_r+0x542>
  104402:	48 83 c3 10          	add    $0x10,%rbx
  104406:	48 8d 41 20          	lea    0x20(%rcx),%rax
  10440a:	48 8b 13             	mov    (%rbx),%rdx
  10440d:	48 89 10             	mov    %rdx,(%rax)
  104410:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  104414:	48 89 50 08          	mov    %rdx,0x8(%rax)
  104418:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  10441c:	48 89 50 10          	mov    %rdx,0x10(%rax)
  104420:	4d 29 e0             	sub    %r12,%r8
  104423:	4a 8d 04 21          	lea    (%rcx,%r12,1),%rax
  104427:	4c 89 ef             	mov    %r13,%rdi
  10442a:	49 83 c8 01          	or     $0x1,%r8
  10442e:	48 89 05 fb da 03 00 	mov    %rax,0x3dafb(%rip)        # 141f30 <__malloc_av_+0x10>
  104435:	4c 89 40 08          	mov    %r8,0x8(%rax)
  104439:	48 8b 41 08          	mov    0x8(%rcx),%rax
  10443d:	83 e0 01             	and    $0x1,%eax
  104440:	4c 09 e0             	or     %r12,%rax
  104443:	48 89 41 08          	mov    %rax,0x8(%rcx)
  104447:	e8 54 fb ff ff       	call   103fa0 <__malloc_unlock>
  10444c:	e9 9d fe ff ff       	jmp    1042ee <_realloc_r+0x1ae>
  104451:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  104458:	49 8b 46 f8          	mov    -0x8(%r14),%rax
  10445c:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
  104460:	49 01 c7             	add    %rax,%r15
  104463:	e9 58 fe ff ff       	jmp    1042c0 <_realloc_r+0x180>
  104468:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10446f:	00 
  104470:	48 8b 03             	mov    (%rbx),%rax
  104473:	49 89 06             	mov    %rax,(%r14)
  104476:	48 8b 43 08          	mov    0x8(%rbx),%rax
  10447a:	49 89 46 08          	mov    %rax,0x8(%r14)
  10447e:	48 83 fa 37          	cmp    $0x37,%rdx
  104482:	0f 87 e8 00 00 00    	ja     104570 <_realloc_r+0x430>
  104488:	48 8d 53 10          	lea    0x10(%rbx),%rdx
  10448c:	49 8d 46 10          	lea    0x10(%r14),%rax
  104490:	e9 d0 fd ff ff       	jmp    104265 <_realloc_r+0x125>
  104495:	0f 1f 00             	nopl   (%rax)
  104498:	48 8b 51 10          	mov    0x10(%rcx),%rdx
  10449c:	48 8b 41 18          	mov    0x18(%rcx),%rax
  1044a0:	4c 8d 71 10          	lea    0x10(%rcx),%r14
  1044a4:	48 89 42 18          	mov    %rax,0x18(%rdx)
  1044a8:	48 89 50 10          	mov    %rdx,0x10(%rax)
  1044ac:	49 8d 57 f8          	lea    -0x8(%r15),%rdx
  1044b0:	48 83 fa 48          	cmp    $0x48,%rdx
  1044b4:	0f 87 e6 00 00 00    	ja     1045a0 <_realloc_r+0x460>
  1044ba:	4c 89 f0             	mov    %r14,%rax
  1044bd:	48 83 fa 27          	cmp    $0x27,%rdx
  1044c1:	76 21                	jbe    1044e4 <_realloc_r+0x3a4>
  1044c3:	48 8b 03             	mov    (%rbx),%rax
  1044c6:	48 89 41 10          	mov    %rax,0x10(%rcx)
  1044ca:	48 8b 43 08          	mov    0x8(%rbx),%rax
  1044ce:	48 89 41 18          	mov    %rax,0x18(%rcx)
  1044d2:	48 83 fa 37          	cmp    $0x37,%rdx
  1044d6:	0f 87 1c 01 00 00    	ja     1045f8 <_realloc_r+0x4b8>
  1044dc:	48 83 c3 10          	add    $0x10,%rbx
  1044e0:	48 8d 41 20          	lea    0x20(%rcx),%rax
  1044e4:	48 8b 13             	mov    (%rbx),%rdx
  1044e7:	48 89 10             	mov    %rdx,(%rax)
  1044ea:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  1044ee:	48 89 50 08          	mov    %rdx,0x8(%rax)
  1044f2:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  1044f6:	48 89 50 10          	mov    %rdx,0x10(%rax)
  1044fa:	4c 89 f3             	mov    %r14,%rbx
  1044fd:	4d 89 c7             	mov    %r8,%r15
  104500:	48 89 ca             	mov    %rcx,%rdx
  104503:	e9 b8 fd ff ff       	jmp    1042c0 <_realloc_r+0x180>
  104508:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10450f:	00 
  104510:	48 89 de             	mov    %rbx,%rsi
  104513:	4c 89 f7             	mov    %r14,%rdi
  104516:	e8 35 f9 ff ff       	call   103e50 <memmove>
  10451b:	e9 5b fd ff ff       	jmp    10427b <_realloc_r+0x13b>
  104520:	48 8b 47 18          	mov    0x18(%rdi),%rax
  104524:	48 8b 57 10          	mov    0x10(%rdi),%rdx
  104528:	4c 8d 71 10          	lea    0x10(%rcx),%r14
  10452c:	48 89 42 18          	mov    %rax,0x18(%rdx)
  104530:	48 89 50 10          	mov    %rdx,0x10(%rax)
  104534:	48 8b 41 18          	mov    0x18(%rcx),%rax
  104538:	48 8b 51 10          	mov    0x10(%rcx),%rdx
  10453c:	48 89 42 18          	mov    %rax,0x18(%rdx)
  104540:	48 89 50 10          	mov    %rdx,0x10(%rax)
  104544:	49 8d 57 f8          	lea    -0x8(%r15),%rdx
  104548:	48 83 fa 48          	cmp    $0x48,%rdx
  10454c:	0f 86 68 ff ff ff    	jbe    1044ba <_realloc_r+0x37a>
  104552:	48 89 de             	mov    %rbx,%rsi
  104555:	4c 89 f7             	mov    %r14,%rdi
  104558:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  10455c:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  104560:	e8 eb f8 ff ff       	call   103e50 <memmove>
  104565:	4c 8b 45 c8          	mov    -0x38(%rbp),%r8
  104569:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  10456d:	eb 8b                	jmp    1044fa <_realloc_r+0x3ba>
  10456f:	90                   	nop
  104570:	48 8b 43 10          	mov    0x10(%rbx),%rax
  104574:	49 89 46 10          	mov    %rax,0x10(%r14)
  104578:	48 8b 43 18          	mov    0x18(%rbx),%rax
  10457c:	49 89 46 18          	mov    %rax,0x18(%r14)
  104580:	48 83 fa 48          	cmp    $0x48,%rdx
  104584:	0f 84 9e 00 00 00    	je     104628 <_realloc_r+0x4e8>
  10458a:	48 8d 53 20          	lea    0x20(%rbx),%rdx
  10458e:	49 8d 46 20          	lea    0x20(%r14),%rax
  104592:	e9 ce fc ff ff       	jmp    104265 <_realloc_r+0x125>
  104597:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10459e:	00 00 
  1045a0:	48 89 de             	mov    %rbx,%rsi
  1045a3:	4c 89 f7             	mov    %r14,%rdi
  1045a6:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  1045aa:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
  1045ae:	e8 9d f8 ff ff       	call   103e50 <memmove>
  1045b3:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  1045b7:	4c 8b 45 c8          	mov    -0x38(%rbp),%r8
  1045bb:	e9 3a ff ff ff       	jmp    1044fa <_realloc_r+0x3ba>
  1045c0:	4c 29 e6             	sub    %r12,%rsi
  1045c3:	4c 01 e2             	add    %r12,%rdx
  1045c6:	4c 89 ef             	mov    %r13,%rdi
  1045c9:	49 89 de             	mov    %rbx,%r14
  1045cc:	48 83 ce 01          	or     $0x1,%rsi
  1045d0:	48 89 15 59 d9 03 00 	mov    %rdx,0x3d959(%rip)        # 141f30 <__malloc_av_+0x10>
  1045d7:	48 89 72 08          	mov    %rsi,0x8(%rdx)
  1045db:	48 8b 43 f8          	mov    -0x8(%rbx),%rax
  1045df:	83 e0 01             	and    $0x1,%eax
  1045e2:	4c 09 e0             	or     %r12,%rax
  1045e5:	48 89 43 f8          	mov    %rax,-0x8(%rbx)
  1045e9:	e8 b2 f9 ff ff       	call   103fa0 <__malloc_unlock>
  1045ee:	e9 fb fc ff ff       	jmp    1042ee <_realloc_r+0x1ae>
  1045f3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  1045f8:	48 8b 43 10          	mov    0x10(%rbx),%rax
  1045fc:	48 89 41 20          	mov    %rax,0x20(%rcx)
  104600:	48 8b 43 18          	mov    0x18(%rbx),%rax
  104604:	48 89 41 28          	mov    %rax,0x28(%rcx)
  104608:	48 83 fa 48          	cmp    $0x48,%rdx
  10460c:	74 37                	je     104645 <_realloc_r+0x505>
  10460e:	48 83 c3 20          	add    $0x20,%rbx
  104612:	48 8d 41 30          	lea    0x30(%rcx),%rax
  104616:	e9 c9 fe ff ff       	jmp    1044e4 <_realloc_r+0x3a4>
  10461b:	4c 89 ef             	mov    %r13,%rdi
  10461e:	e8 7d f9 ff ff       	call   103fa0 <__malloc_unlock>
  104623:	e9 50 fd ff ff       	jmp    104378 <_realloc_r+0x238>
  104628:	48 8b 43 20          	mov    0x20(%rbx),%rax
  10462c:	48 8d 53 30          	lea    0x30(%rbx),%rdx
  104630:	49 89 46 20          	mov    %rax,0x20(%r14)
  104634:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
  104638:	49 8d 46 30          	lea    0x30(%r14),%rax
  10463c:	49 89 4e 28          	mov    %rcx,0x28(%r14)
  104640:	e9 20 fc ff ff       	jmp    104265 <_realloc_r+0x125>
  104645:	48 8b 43 20          	mov    0x20(%rbx),%rax
  104649:	48 83 c3 30          	add    $0x30,%rbx
  10464d:	48 89 41 30          	mov    %rax,0x30(%rcx)
  104651:	48 8b 53 f8          	mov    -0x8(%rbx),%rdx
  104655:	48 8d 41 40          	lea    0x40(%rcx),%rax
  104659:	48 89 51 38          	mov    %rdx,0x38(%rcx)
  10465d:	e9 82 fe ff ff       	jmp    1044e4 <_realloc_r+0x3a4>
  104662:	48 89 de             	mov    %rbx,%rsi
  104665:	4c 89 f7             	mov    %r14,%rdi
  104668:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  10466c:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  104670:	e8 db f7 ff ff       	call   103e50 <memmove>
  104675:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  104679:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  10467d:	e9 9e fd ff ff       	jmp    104420 <_realloc_r+0x2e0>
  104682:	48 8b 43 10          	mov    0x10(%rbx),%rax
  104686:	48 89 41 20          	mov    %rax,0x20(%rcx)
  10468a:	48 8b 43 18          	mov    0x18(%rbx),%rax
  10468e:	48 89 41 28          	mov    %rax,0x28(%rcx)
  104692:	48 83 fa 48          	cmp    $0x48,%rdx
  104696:	74 0d                	je     1046a5 <_realloc_r+0x565>
  104698:	48 83 c3 20          	add    $0x20,%rbx
  10469c:	48 8d 41 30          	lea    0x30(%rcx),%rax
  1046a0:	e9 65 fd ff ff       	jmp    10440a <_realloc_r+0x2ca>
  1046a5:	48 8b 43 20          	mov    0x20(%rbx),%rax
  1046a9:	48 83 c3 30          	add    $0x30,%rbx
  1046ad:	48 89 41 30          	mov    %rax,0x30(%rcx)
  1046b1:	48 8b 53 f8          	mov    -0x8(%rbx),%rdx
  1046b5:	48 8d 41 40          	lea    0x40(%rcx),%rax
  1046b9:	48 89 51 38          	mov    %rdx,0x38(%rcx)
  1046bd:	e9 48 fd ff ff       	jmp    10440a <_realloc_r+0x2ca>
  1046c2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  1046c9:	00 00 00 
  1046cc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000001046d0 <_sbrk_r>:
  1046d0:	55                   	push   %rbp
  1046d1:	48 89 e5             	mov    %rsp,%rbp
  1046d4:	53                   	push   %rbx
  1046d5:	48 89 fb             	mov    %rdi,%rbx
  1046d8:	48 89 f7             	mov    %rsi,%rdi
  1046db:	48 83 ec 08          	sub    $0x8,%rsp
  1046df:	c7 05 7b 1b 02 00 00 	movl   $0x0,0x21b7b(%rip)        # 126264 <errno>
  1046e6:	00 00 00 
  1046e9:	e8 79 d6 00 00       	call   111d67 <_sbrk>
  1046ee:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  1046f2:	74 0c                	je     104700 <_sbrk_r+0x30>
  1046f4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  1046f8:	c9                   	leave  
  1046f9:	c3                   	ret    
  1046fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  104700:	8b 15 5e 1b 02 00    	mov    0x21b5e(%rip),%edx        # 126264 <errno>
  104706:	85 d2                	test   %edx,%edx
  104708:	74 ea                	je     1046f4 <_sbrk_r+0x24>
  10470a:	89 13                	mov    %edx,(%rbx)
  10470c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  104710:	c9                   	leave  
  104711:	c3                   	ret    
  104712:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  104719:	00 00 00 
  10471c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000104720 <strcmp>:
  104720:	48 89 f8             	mov    %rdi,%rax
  104723:	48 09 f0             	or     %rsi,%rax
  104726:	a8 07                	test   $0x7,%al
  104728:	75 62                	jne    10478c <strcmp+0x6c>
  10472a:	49 b8 ff fe fe fe fe 	movabs $0xfefefefefefefeff,%r8
  104731:	fe fe fe 
  104734:	48 8b 07             	mov    (%rdi),%rax
  104737:	48 b9 80 80 80 80 80 	movabs $0x8080808080808080,%rcx
  10473e:	80 80 80 
  104741:	48 3b 06             	cmp    (%rsi),%rax
  104744:	75 46                	jne    10478c <strcmp+0x6c>
  104746:	4a 8d 14 00          	lea    (%rax,%r8,1),%rdx
  10474a:	48 f7 d0             	not    %rax
  10474d:	48 21 d0             	and    %rdx,%rax
  104750:	48 85 c8             	test   %rcx,%rax
  104753:	75 22                	jne    104777 <strcmp+0x57>
  104755:	0f 1f 00             	nopl   (%rax)
  104758:	48 83 c6 08          	add    $0x8,%rsi
  10475c:	48 83 c7 08          	add    $0x8,%rdi
  104760:	48 8b 07             	mov    (%rdi),%rax
  104763:	48 3b 06             	cmp    (%rsi),%rax
  104766:	75 24                	jne    10478c <strcmp+0x6c>
  104768:	4a 8d 14 00          	lea    (%rax,%r8,1),%rdx
  10476c:	48 f7 d0             	not    %rax
  10476f:	48 21 d0             	and    %rdx,%rax
  104772:	48 85 c8             	test   %rcx,%rax
  104775:	74 e1                	je     104758 <strcmp+0x38>
  104777:	31 c0                	xor    %eax,%eax
  104779:	c3                   	ret    
  10477a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  104780:	38 06                	cmp    %al,(%rsi)
  104782:	75 11                	jne    104795 <strcmp+0x75>
  104784:	48 83 c7 01          	add    $0x1,%rdi
  104788:	48 83 c6 01          	add    $0x1,%rsi
  10478c:	0f b6 07             	movzbl (%rdi),%eax
  10478f:	84 c0                	test   %al,%al
  104791:	75 ed                	jne    104780 <strcmp+0x60>
  104793:	31 c0                	xor    %eax,%eax
  104795:	0f b6 16             	movzbl (%rsi),%edx
  104798:	29 d0                	sub    %edx,%eax
  10479a:	c3                   	ret    
  10479b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000001047a0 <strlen>:
  1047a0:	48 89 f8             	mov    %rdi,%rax
  1047a3:	40 f6 c7 07          	test   $0x7,%dil
  1047a7:	75 0f                	jne    1047b8 <strlen+0x18>
  1047a9:	eb 1d                	jmp    1047c8 <strlen+0x28>
  1047ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  1047b0:	48 83 c0 01          	add    $0x1,%rax
  1047b4:	a8 07                	test   $0x7,%al
  1047b6:	74 10                	je     1047c8 <strlen+0x28>
  1047b8:	80 38 00             	cmpb   $0x0,(%rax)
  1047bb:	75 f3                	jne    1047b0 <strlen+0x10>
  1047bd:	48 29 f8             	sub    %rdi,%rax
  1047c0:	c3                   	ret    
  1047c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  1047c8:	49 b8 ff fe fe fe fe 	movabs $0xfefefefefefefeff,%r8
  1047cf:	fe fe fe 
  1047d2:	48 8b 10             	mov    (%rax),%rdx
  1047d5:	48 be 80 80 80 80 80 	movabs $0x8080808080808080,%rsi
  1047dc:	80 80 80 
  1047df:	4a 8d 0c 02          	lea    (%rdx,%r8,1),%rcx
  1047e3:	48 f7 d2             	not    %rdx
  1047e6:	48 21 ca             	and    %rcx,%rdx
  1047e9:	48 85 f2             	test   %rsi,%rdx
  1047ec:	75 26                	jne    104814 <strlen+0x74>
  1047ee:	66 90                	xchg   %ax,%ax
  1047f0:	48 8b 50 08          	mov    0x8(%rax),%rdx
  1047f4:	48 83 c0 08          	add    $0x8,%rax
  1047f8:	4a 8d 0c 02          	lea    (%rdx,%r8,1),%rcx
  1047fc:	48 f7 d2             	not    %rdx
  1047ff:	48 21 ca             	and    %rcx,%rdx
  104802:	48 85 f2             	test   %rsi,%rdx
  104805:	74 e9                	je     1047f0 <strlen+0x50>
  104807:	eb 0b                	jmp    104814 <strlen+0x74>
  104809:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  104810:	48 83 c0 01          	add    $0x1,%rax
  104814:	80 38 00             	cmpb   $0x0,(%rax)
  104817:	75 f7                	jne    104810 <strlen+0x70>
  104819:	48 29 f8             	sub    %rdi,%rax
  10481c:	c3                   	ret    
  10481d:	0f 1f 00             	nopl   (%rax)

0000000000104820 <strncmp>:
  104820:	31 c0                	xor    %eax,%eax
  104822:	48 85 d2             	test   %rdx,%rdx
  104825:	74 56                	je     10487d <strncmp+0x5d>
  104827:	48 89 f8             	mov    %rdi,%rax
  10482a:	48 09 f0             	or     %rsi,%rax
  10482d:	a8 07                	test   $0x7,%al
  10482f:	74 4f                	je     104880 <strncmp+0x60>
  104831:	0f b6 0f             	movzbl (%rdi),%ecx
  104834:	44 0f b6 06          	movzbl (%rsi),%r8d
  104838:	48 83 ea 01          	sub    $0x1,%rdx
  10483c:	44 38 c1             	cmp    %r8b,%cl
  10483f:	0f 85 93 00 00 00    	jne    1048d8 <strncmp+0xb8>
  104845:	48 85 d2             	test   %rdx,%rdx
  104848:	74 31                	je     10487b <strncmp+0x5b>
  10484a:	84 c9                	test   %cl,%cl
  10484c:	74 2d                	je     10487b <strncmp+0x5b>
  10484e:	b8 01 00 00 00       	mov    $0x1,%eax
  104853:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  104858:	0f b6 0c 07          	movzbl (%rdi,%rax,1),%ecx
  10485c:	44 0f b6 04 06       	movzbl (%rsi,%rax,1),%r8d
  104861:	44 38 c1             	cmp    %r8b,%cl
  104864:	75 72                	jne    1048d8 <strncmp+0xb8>
  104866:	48 39 c2             	cmp    %rax,%rdx
  104869:	41 0f 94 c0          	sete   %r8b
  10486d:	84 c9                	test   %cl,%cl
  10486f:	0f 94 c1             	sete   %cl
  104872:	48 83 c0 01          	add    $0x1,%rax
  104876:	41 08 c8             	or     %cl,%r8b
  104879:	74 dd                	je     104858 <strncmp+0x38>
  10487b:	31 c0                	xor    %eax,%eax
  10487d:	c3                   	ret    
  10487e:	66 90                	xchg   %ax,%ax
  104880:	49 b9 ff fe fe fe fe 	movabs $0xfefefefefefefeff,%r9
  104887:	fe fe fe 
  10488a:	49 b8 80 80 80 80 80 	movabs $0x8080808080808080,%r8
  104891:	80 80 80 
  104894:	48 83 fa 07          	cmp    $0x7,%rdx
  104898:	77 2d                	ja     1048c7 <strncmp+0xa7>
  10489a:	eb 95                	jmp    104831 <strncmp+0x11>
  10489c:	0f 1f 40 00          	nopl   0x0(%rax)
  1048a0:	48 83 ea 08          	sub    $0x8,%rdx
  1048a4:	74 d5                	je     10487b <strncmp+0x5b>
  1048a6:	4a 8d 0c 08          	lea    (%rax,%r9,1),%rcx
  1048aa:	48 f7 d0             	not    %rax
  1048ad:	48 21 c8             	and    %rcx,%rax
  1048b0:	4c 85 c0             	test   %r8,%rax
  1048b3:	75 c6                	jne    10487b <strncmp+0x5b>
  1048b5:	48 83 c7 08          	add    $0x8,%rdi
  1048b9:	48 83 c6 08          	add    $0x8,%rsi
  1048bd:	48 83 fa 07          	cmp    $0x7,%rdx
  1048c1:	0f 86 6a ff ff ff    	jbe    104831 <strncmp+0x11>
  1048c7:	48 8b 07             	mov    (%rdi),%rax
  1048ca:	48 3b 06             	cmp    (%rsi),%rax
  1048cd:	74 d1                	je     1048a0 <strncmp+0x80>
  1048cf:	e9 5d ff ff ff       	jmp    104831 <strncmp+0x11>
  1048d4:	0f 1f 40 00          	nopl   0x0(%rax)
  1048d8:	0f b6 c1             	movzbl %cl,%eax
  1048db:	44 29 c0             	sub    %r8d,%eax
  1048de:	c3                   	ret    
  1048df:	90                   	nop

00000000001048e0 <strnlen>:
  1048e0:	48 8d 14 37          	lea    (%rdi,%rsi,1),%rdx
  1048e4:	48 89 f8             	mov    %rdi,%rax
  1048e7:	48 85 f6             	test   %rsi,%rsi
  1048ea:	75 0d                	jne    1048f9 <strnlen+0x19>
  1048ec:	eb 21                	jmp    10490f <strnlen+0x2f>
  1048ee:	66 90                	xchg   %ax,%ax
  1048f0:	48 83 c0 01          	add    $0x1,%rax
  1048f4:	48 39 c2             	cmp    %rax,%rdx
  1048f7:	74 0f                	je     104908 <strnlen+0x28>
  1048f9:	80 38 00             	cmpb   $0x0,(%rax)
  1048fc:	75 f2                	jne    1048f0 <strnlen+0x10>
  1048fe:	48 29 f8             	sub    %rdi,%rax
  104901:	c3                   	ret    
  104902:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  104908:	48 89 d0             	mov    %rdx,%rax
  10490b:	48 29 f8             	sub    %rdi,%rax
  10490e:	c3                   	ret    
  10490f:	31 c0                	xor    %eax,%eax
  104911:	c3                   	ret    
  104912:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  104919:	00 00 00 
  10491c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000104920 <__sprint_r>:
  104920:	55                   	push   %rbp
  104921:	31 c0                	xor    %eax,%eax
  104923:	48 89 e5             	mov    %rsp,%rbp
  104926:	53                   	push   %rbx
  104927:	48 89 d3             	mov    %rdx,%rbx
  10492a:	48 83 ec 08          	sub    $0x8,%rsp
  10492e:	48 83 7a 10 00       	cmpq   $0x0,0x10(%rdx)
  104933:	74 0d                	je     104942 <__sprint_r+0x22>
  104935:	e8 06 e6 ff ff       	call   102f40 <__sfvwrite_r>
  10493a:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  104941:	00 
  104942:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%rbx)
  104949:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10494d:	c9                   	leave  
  10494e:	c3                   	ret    
  10494f:	90                   	nop

0000000000104950 <_vfiprintf_r>:
  104950:	55                   	push   %rbp
  104951:	49 89 d3             	mov    %rdx,%r11
  104954:	48 89 e5             	mov    %rsp,%rbp
  104957:	41 57                	push   %r15
  104959:	41 56                	push   %r14
  10495b:	41 55                	push   %r13
  10495d:	41 54                	push   %r12
  10495f:	53                   	push   %rbx
  104960:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
  104967:	48 89 bd a0 fe ff ff 	mov    %rdi,-0x160(%rbp)
  10496e:	48 89 b5 a8 fe ff ff 	mov    %rsi,-0x158(%rbp)
  104975:	48 89 8d 98 fe ff ff 	mov    %rcx,-0x168(%rbp)
  10497c:	48 85 ff             	test   %rdi,%rdi
  10497f:	74 0b                	je     10498c <_vfiprintf_r+0x3c>
  104981:	8b 47 50             	mov    0x50(%rdi),%eax
  104984:	85 c0                	test   %eax,%eax
  104986:	0f 84 bb 05 00 00    	je     104f47 <_vfiprintf_r+0x5f7>
  10498c:	48 8b bd a8 fe ff ff 	mov    -0x158(%rbp),%rdi
  104993:	0f b7 47 10          	movzwl 0x10(%rdi),%eax
  104997:	f6 87 b0 00 00 00 01 	testb  $0x1,0xb0(%rdi)
  10499e:	75 09                	jne    1049a9 <_vfiprintf_r+0x59>
  1049a0:	f6 c4 02             	test   $0x2,%ah
  1049a3:	0f 84 79 12 00 00    	je     105c22 <_vfiprintf_r+0x12d2>
  1049a9:	a8 08                	test   $0x8,%al
  1049ab:	0f 84 af 03 00 00    	je     104d60 <_vfiprintf_r+0x410>
  1049b1:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  1049b8:	48 83 7e 18 00       	cmpq   $0x0,0x18(%rsi)
  1049bd:	0f 84 9d 03 00 00    	je     104d60 <_vfiprintf_r+0x410>
  1049c3:	89 c2                	mov    %eax,%edx
  1049c5:	83 e2 1a             	and    $0x1a,%edx
  1049c8:	66 83 fa 0a          	cmp    $0xa,%dx
  1049cc:	0f 84 cd 03 00 00    	je     104d9f <_vfiprintf_r+0x44f>
  1049d2:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  1049d9:	4d 89 dc             	mov    %r11,%r12
  1049dc:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  1049e3:	00 00 00 00 
  1049e7:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
  1049ee:	49 89 c2             	mov    %rax,%r10
  1049f1:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  1049f8:	00 00 00 
  1049fb:	48 c7 85 78 fe ff ff 	movq   $0x0,-0x188(%rbp)
  104a02:	00 00 00 00 
  104a06:	48 c7 85 80 fe ff ff 	movq   $0x0,-0x180(%rbp)
  104a0d:	00 00 00 00 
  104a11:	48 c7 85 58 fe ff ff 	movq   $0x0,-0x1a8(%rbp)
  104a18:	00 00 00 00 
  104a1c:	c7 85 8c fe ff ff 00 	movl   $0x0,-0x174(%rbp)
  104a23:	00 00 00 
  104a26:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  104a2d:	00 00 00 
  104a30:	41 0f b6 04 24       	movzbl (%r12),%eax
  104a35:	4c 89 e3             	mov    %r12,%rbx
  104a38:	84 c0                	test   %al,%al
  104a3a:	74 78                	je     104ab4 <_vfiprintf_r+0x164>
  104a3c:	3c 25                	cmp    $0x25,%al
  104a3e:	74 74                	je     104ab4 <_vfiprintf_r+0x164>
  104a40:	49 89 dd             	mov    %rbx,%r13
  104a43:	0f b6 43 01          	movzbl 0x1(%rbx),%eax
  104a47:	48 83 c3 01          	add    $0x1,%rbx
  104a4b:	84 c0                	test   %al,%al
  104a4d:	74 04                	je     104a53 <_vfiprintf_r+0x103>
  104a4f:	3c 25                	cmp    $0x25,%al
  104a51:	75 ed                	jne    104a40 <_vfiprintf_r+0xf0>
  104a53:	49 89 de             	mov    %rbx,%r14
  104a56:	4d 29 e6             	sub    %r12,%r14
  104a59:	44 39 e3             	cmp    %r12d,%ebx
  104a5c:	74 56                	je     104ab4 <_vfiprintf_r+0x164>
  104a5e:	8b bd c8 fe ff ff    	mov    -0x138(%rbp),%edi
  104a64:	49 63 c6             	movslq %r14d,%rax
  104a67:	4d 89 22             	mov    %r12,(%r10)
  104a6a:	49 83 c2 10          	add    $0x10,%r10
  104a6e:	49 89 42 f8          	mov    %rax,-0x8(%r10)
  104a72:	48 03 85 d0 fe ff ff 	add    -0x130(%rbp),%rax
  104a79:	8d 57 01             	lea    0x1(%rdi),%edx
  104a7c:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  104a83:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  104a89:	83 fa 07             	cmp    $0x7,%edx
  104a8c:	7e 1a                	jle    104aa8 <_vfiprintf_r+0x158>
  104a8e:	48 85 c0             	test   %rax,%rax
  104a91:	0f 85 61 03 00 00    	jne    104df8 <_vfiprintf_r+0x4a8>
  104a97:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  104a9e:	00 00 00 
  104aa1:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  104aa8:	44 01 b5 8c fe ff ff 	add    %r14d,-0x174(%rbp)
  104aaf:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
  104ab4:	84 c0                	test   %al,%al
  104ab6:	0f 84 34 16 00 00    	je     1060f0 <_vfiprintf_r+0x17a0>
  104abc:	c6 85 bd fe ff ff 00 	movb   $0x0,-0x143(%rbp)
  104ac3:	45 31 c0             	xor    %r8d,%r8d
  104ac6:	45 31 ed             	xor    %r13d,%r13d
  104ac9:	4d 89 d7             	mov    %r10,%r15
  104acc:	0f be 43 01          	movsbl 0x1(%rbx),%eax
  104ad0:	4c 8d 63 01          	lea    0x1(%rbx),%r12
  104ad4:	45 89 c6             	mov    %r8d,%r14d
  104ad7:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  104adc:	49 83 c4 01          	add    $0x1,%r12
  104ae0:	8d 50 e0             	lea    -0x20(%rax),%edx
  104ae3:	83 fa 5a             	cmp    $0x5a,%edx
  104ae6:	77 38                	ja     104b20 <_vfiprintf_r+0x1d0>
  104ae8:	ff 24 d5 f0 d8 11 00 	jmp    *0x11d8f0(,%rdx,8)
  104aef:	90                   	nop
  104af0:	45 31 f6             	xor    %r14d,%r14d
  104af3:	8d 50 d0             	lea    -0x30(%rax),%edx
  104af6:	43 8d 04 b6          	lea    (%r14,%r14,4),%eax
  104afa:	49 83 c4 01          	add    $0x1,%r12
  104afe:	44 8d 34 42          	lea    (%rdx,%rax,2),%r14d
  104b02:	41 0f be 44 24 ff    	movsbl -0x1(%r12),%eax
  104b08:	8d 50 d0             	lea    -0x30(%rax),%edx
  104b0b:	83 fa 09             	cmp    $0x9,%edx
  104b0e:	76 e6                	jbe    104af6 <_vfiprintf_r+0x1a6>
  104b10:	8d 50 e0             	lea    -0x20(%rax),%edx
  104b13:	83 fa 5a             	cmp    $0x5a,%edx
  104b16:	76 d0                	jbe    104ae8 <_vfiprintf_r+0x198>
  104b18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  104b1f:	00 
  104b20:	44 89 e9             	mov    %r13d,%ecx
  104b23:	45 89 f0             	mov    %r14d,%r8d
  104b26:	4d 89 fa             	mov    %r15,%r10
  104b29:	85 c0                	test   %eax,%eax
  104b2b:	0f 84 bf 15 00 00    	je     1060f0 <_vfiprintf_r+0x17a0>
  104b31:	88 85 e0 fe ff ff    	mov    %al,-0x120(%rbp)
  104b37:	41 bd 01 00 00 00    	mov    $0x1,%r13d
  104b3d:	41 bb 01 00 00 00    	mov    $0x1,%r11d
  104b43:	4c 8d b5 e0 fe ff ff 	lea    -0x120(%rbp),%r14
  104b4a:	c6 85 bd fe ff ff 00 	movb   $0x0,-0x143(%rbp)
  104b51:	45 31 c9             	xor    %r9d,%r9d
  104b54:	31 db                	xor    %ebx,%ebx
  104b56:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  104b5d:	00 00 00 
  104b60:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  104b66:	41 89 cf             	mov    %ecx,%r15d
  104b69:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  104b70:	41 81 e7 84 00 00 00 	and    $0x84,%r15d
  104b77:	8d 72 01             	lea    0x1(%rdx),%esi
  104b7a:	44 89 bd 90 fe ff ff 	mov    %r15d,-0x170(%rbp)
  104b81:	89 f7                	mov    %esi,%edi
  104b83:	75 0f                	jne    104b94 <_vfiprintf_r+0x244>
  104b85:	45 89 c7             	mov    %r8d,%r15d
  104b88:	45 29 ef             	sub    %r13d,%r15d
  104b8b:	45 85 ff             	test   %r15d,%r15d
  104b8e:	0f 8f 1c 0c 00 00    	jg     1057b0 <_vfiprintf_r+0xe60>
  104b94:	80 bd bd fe ff ff 00 	cmpb   $0x0,-0x143(%rbp)
  104b9b:	0f 84 f8 07 00 00    	je     105399 <_vfiprintf_r+0xa49>
  104ba1:	48 8d 95 bd fe ff ff 	lea    -0x143(%rbp),%rdx
  104ba8:	48 83 c0 01          	add    $0x1,%rax
  104bac:	49 c7 42 08 01 00 00 	movq   $0x1,0x8(%r10)
  104bb3:	00 
  104bb4:	49 89 12             	mov    %rdx,(%r10)
  104bb7:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  104bbe:	89 bd c8 fe ff ff    	mov    %edi,-0x138(%rbp)
  104bc4:	83 ff 07             	cmp    $0x7,%edi
  104bc7:	0f 8e c3 07 00 00    	jle    105390 <_vfiprintf_r+0xa40>
  104bcd:	48 85 c0             	test   %rax,%rax
  104bd0:	74 6d                	je     104c3f <_vfiprintf_r+0x2ef>
  104bd2:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  104bd9:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  104be0:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  104be7:	44 89 9d 64 fe ff ff 	mov    %r11d,-0x19c(%rbp)
  104bee:	44 89 85 68 fe ff ff 	mov    %r8d,-0x198(%rbp)
  104bf5:	89 8d 70 fe ff ff    	mov    %ecx,-0x190(%rbp)
  104bfb:	44 89 8d 88 fe ff ff 	mov    %r9d,-0x178(%rbp)
  104c02:	e8 39 e3 ff ff       	call   102f40 <__sfvwrite_r>
  104c07:	44 8b 8d 88 fe ff ff 	mov    -0x178(%rbp),%r9d
  104c0e:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  104c15:	00 00 00 00 
  104c19:	85 c0                	test   %eax,%eax
  104c1b:	8b 8d 70 fe ff ff    	mov    -0x190(%rbp),%ecx
  104c21:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  104c28:	00 00 00 
  104c2b:	44 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%r8d
  104c32:	44 8b 9d 64 fe ff ff 	mov    -0x19c(%rbp),%r11d
  104c39:	0f 85 f1 01 00 00    	jne    104e30 <_vfiprintf_r+0x4e0>
  104c3f:	45 85 c9             	test   %r9d,%r9d
  104c42:	0f 84 8f 07 00 00    	je     1053d7 <_vfiprintf_r+0xa87>
  104c48:	48 c7 85 58 ff ff ff 	movq   $0x2,-0xa8(%rbp)
  104c4f:	02 00 00 00 
  104c53:	48 8d 85 be fe ff ff 	lea    -0x142(%rbp),%rax
  104c5a:	bf 01 00 00 00       	mov    $0x1,%edi
  104c5f:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  104c66:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  104c6d:	b8 02 00 00 00       	mov    $0x2,%eax
  104c72:	89 fa                	mov    %edi,%edx
  104c74:	49 83 c2 10          	add    $0x10,%r10
  104c78:	83 c7 01             	add    $0x1,%edi
  104c7b:	81 bd 90 fe ff ff 80 	cmpl   $0x80,-0x170(%rbp)
  104c82:	00 00 00 
  104c85:	0f 84 75 07 00 00    	je     105400 <_vfiprintf_r+0xab0>
  104c8b:	44 29 db             	sub    %r11d,%ebx
  104c8e:	85 db                	test   %ebx,%ebx
  104c90:	0f 8f 62 08 00 00    	jg     1054f8 <_vfiprintf_r+0xba8>
  104c96:	49 63 d3             	movslq %r11d,%rdx
  104c99:	4d 89 32             	mov    %r14,(%r10)
  104c9c:	48 01 d0             	add    %rdx,%rax
  104c9f:	49 89 52 08          	mov    %rdx,0x8(%r10)
  104ca3:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  104caa:	89 bd c8 fe ff ff    	mov    %edi,-0x138(%rbp)
  104cb0:	83 ff 07             	cmp    $0x7,%edi
  104cb3:	0f 8e 31 09 00 00    	jle    1055ea <_vfiprintf_r+0xc9a>
  104cb9:	48 85 c0             	test   %rax,%rax
  104cbc:	0f 85 96 0a 00 00    	jne    105758 <_vfiprintf_r+0xe08>
  104cc2:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  104cc9:	00 00 00 
  104ccc:	83 e1 04             	and    $0x4,%ecx
  104ccf:	0f 84 eb 09 00 00    	je     1056c0 <_vfiprintf_r+0xd70>
  104cd5:	44 89 c3             	mov    %r8d,%ebx
  104cd8:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  104cdf:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  104ce6:	44 29 eb             	sub    %r13d,%ebx
  104ce9:	85 db                	test   %ebx,%ebx
  104ceb:	0f 8f 14 09 00 00    	jg     105605 <_vfiprintf_r+0xcb5>
  104cf1:	45 39 e8             	cmp    %r13d,%r8d
  104cf4:	45 0f 4d e8          	cmovge %r8d,%r13d
  104cf8:	44 01 ad 8c fe ff ff 	add    %r13d,-0x174(%rbp)
  104cff:	48 85 c0             	test   %rax,%rax
  104d02:	74 37                	je     104d3b <_vfiprintf_r+0x3eb>
  104d04:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  104d0b:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  104d12:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  104d19:	e8 22 e2 ff ff       	call   102f40 <__sfvwrite_r>
  104d1e:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  104d25:	00 00 00 00 
  104d29:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  104d30:	00 00 00 
  104d33:	85 c0                	test   %eax,%eax
  104d35:	0f 85 f5 00 00 00    	jne    104e30 <_vfiprintf_r+0x4e0>
  104d3b:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  104d42:	00 00 00 
  104d45:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  104d4c:	e9 df fc ff ff       	jmp    104a30 <_vfiprintf_r+0xe0>
  104d51:	41 0f be 04 24       	movsbl (%r12),%eax
  104d56:	41 83 cd 10          	or     $0x10,%r13d
  104d5a:	e9 7d fd ff ff       	jmp    104adc <_vfiprintf_r+0x18c>
  104d5f:	90                   	nop
  104d60:	48 8b 9d a8 fe ff ff 	mov    -0x158(%rbp),%rbx
  104d67:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  104d6e:	4c 89 9d 90 fe ff ff 	mov    %r11,-0x170(%rbp)
  104d75:	48 89 de             	mov    %rbx,%rsi
  104d78:	e8 d3 50 00 00       	call   109e50 <__swsetup_r>
  104d7d:	85 c0                	test   %eax,%eax
  104d7f:	0f 85 05 17 00 00    	jne    10648a <_vfiprintf_r+0x1b3a>
  104d85:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  104d89:	4c 8b 9d 90 fe ff ff 	mov    -0x170(%rbp),%r11
  104d90:	89 c2                	mov    %eax,%edx
  104d92:	83 e2 1a             	and    $0x1a,%edx
  104d95:	66 83 fa 0a          	cmp    $0xa,%dx
  104d99:	0f 85 33 fc ff ff    	jne    1049d2 <_vfiprintf_r+0x82>
  104d9f:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  104da6:	66 83 7e 12 00       	cmpw   $0x0,0x12(%rsi)
  104dab:	0f 88 21 fc ff ff    	js     1049d2 <_vfiprintf_r+0x82>
  104db1:	f6 86 b0 00 00 00 01 	testb  $0x1,0xb0(%rsi)
  104db8:	75 09                	jne    104dc3 <_vfiprintf_r+0x473>
  104dba:	f6 c4 02             	test   $0x2,%ah
  104dbd:	0f 84 34 16 00 00    	je     1063f7 <_vfiprintf_r+0x1aa7>
  104dc3:	48 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%rcx
  104dca:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  104dd1:	4c 89 da             	mov    %r11,%rdx
  104dd4:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  104ddb:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  104de2:	5b                   	pop    %rbx
  104de3:	41 5c                	pop    %r12
  104de5:	41 5d                	pop    %r13
  104de7:	41 5e                	pop    %r14
  104de9:	41 5f                	pop    %r15
  104deb:	5d                   	pop    %rbp
  104dec:	e9 4f 18 00 00       	jmp    106640 <__sbprintf>
  104df1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  104df8:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  104dff:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  104e06:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  104e0d:	e8 2e e1 ff ff       	call   102f40 <__sfvwrite_r>
  104e12:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  104e19:	00 00 00 00 
  104e1d:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  104e24:	00 00 00 
  104e27:	85 c0                	test   %eax,%eax
  104e29:	0f 84 72 fc ff ff    	je     104aa1 <_vfiprintf_r+0x151>
  104e2f:	90                   	nop
  104e30:	48 8b bd a8 fe ff ff 	mov    -0x158(%rbp),%rdi
  104e37:	0f b7 47 10          	movzwl 0x10(%rdi),%eax
  104e3b:	f6 87 b0 00 00 00 01 	testb  $0x1,0xb0(%rdi)
  104e42:	74 20                	je     104e64 <_vfiprintf_r+0x514>
  104e44:	a8 40                	test   $0x40,%al
  104e46:	0f 85 67 16 00 00    	jne    1064b3 <_vfiprintf_r+0x1b63>
  104e4c:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
  104e52:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
  104e59:	5b                   	pop    %rbx
  104e5a:	41 5c                	pop    %r12
  104e5c:	41 5d                	pop    %r13
  104e5e:	41 5e                	pop    %r14
  104e60:	41 5f                	pop    %r15
  104e62:	5d                   	pop    %rbp
  104e63:	c3                   	ret    
  104e64:	f6 c4 02             	test   $0x2,%ah
  104e67:	75 db                	jne    104e44 <_vfiprintf_r+0x4f4>
  104e69:	48 89 fb             	mov    %rdi,%rbx
  104e6c:	48 8b bf a0 00 00 00 	mov    0xa0(%rdi),%rdi
  104e73:	e8 47 cf 00 00       	call   111dbf <__retarget_lock_release_recursive>
  104e78:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  104e7c:	eb c6                	jmp    104e44 <_vfiprintf_r+0x4f4>
  104e7e:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  104e85:	44 89 e9             	mov    %r13d,%ecx
  104e88:	45 89 f0             	mov    %r14d,%r8d
  104e8b:	4d 89 fa             	mov    %r15,%r10
  104e8e:	8b 06                	mov    (%rsi),%eax
  104e90:	83 f8 2f             	cmp    $0x2f,%eax
  104e93:	0f 87 36 0d 00 00    	ja     105bcf <_vfiprintf_r+0x127f>
  104e99:	89 c2                	mov    %eax,%edx
  104e9b:	83 c0 08             	add    $0x8,%eax
  104e9e:	48 03 56 10          	add    0x10(%rsi),%rdx
  104ea2:	c6 85 bd fe ff ff 00 	movb   $0x0,-0x143(%rbp)
  104ea9:	89 06                	mov    %eax,(%rsi)
  104eab:	4c 8b 32             	mov    (%rdx),%r14
  104eae:	4d 85 f6             	test   %r14,%r14
  104eb1:	0f 84 3e 0d 00 00    	je     105bf5 <_vfiprintf_r+0x12a5>
  104eb7:	4c 89 95 70 fe ff ff 	mov    %r10,-0x190(%rbp)
  104ebe:	44 89 85 88 fe ff ff 	mov    %r8d,-0x178(%rbp)
  104ec5:	89 8d 90 fe ff ff    	mov    %ecx,-0x170(%rbp)
  104ecb:	83 fb ff             	cmp    $0xffffffff,%ebx
  104ece:	0f 84 ef 11 00 00    	je     1060c3 <_vfiprintf_r+0x1773>
  104ed4:	31 f6                	xor    %esi,%esi
  104ed6:	48 63 d3             	movslq %ebx,%rdx
  104ed9:	4c 89 f7             	mov    %r14,%rdi
  104edc:	e8 9f ee ff ff       	call   103d80 <memchr>
  104ee1:	8b 8d 90 fe ff ff    	mov    -0x170(%rbp),%ecx
  104ee7:	44 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%r8d
  104eee:	48 85 c0             	test   %rax,%rax
  104ef1:	4c 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%r10
  104ef8:	0f 84 18 15 00 00    	je     106416 <_vfiprintf_r+0x1ac6>
  104efe:	41 89 c3             	mov    %eax,%r11d
  104f01:	31 db                	xor    %ebx,%ebx
  104f03:	0f b6 85 bd fe ff ff 	movzbl -0x143(%rbp),%eax
  104f0a:	45 29 f3             	sub    %r14d,%r11d
  104f0d:	e9 13 01 00 00       	jmp    105025 <_vfiprintf_r+0x6d5>
  104f12:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  104f19:	44 89 e9             	mov    %r13d,%ecx
  104f1c:	45 89 f0             	mov    %r14d,%r8d
  104f1f:	4d 89 fa             	mov    %r15,%r10
  104f22:	8b 06                	mov    (%rsi),%eax
  104f24:	83 f8 2f             	cmp    $0x2f,%eax
  104f27:	0f 86 e3 0c 00 00    	jbe    105c10 <_vfiprintf_r+0x12c0>
  104f2d:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  104f34:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  104f38:	48 8d 42 08          	lea    0x8(%rdx),%rax
  104f3c:	48 89 47 08          	mov    %rax,0x8(%rdi)
  104f40:	8b 02                	mov    (%rdx),%eax
  104f42:	e9 ea fb ff ff       	jmp    104b31 <_vfiprintf_r+0x1e1>
  104f47:	48 89 95 90 fe ff ff 	mov    %rdx,-0x170(%rbp)
  104f4e:	e8 fd 68 00 00       	call   10b850 <__sinit>
  104f53:	4c 8b 9d 90 fe ff ff 	mov    -0x170(%rbp),%r11
  104f5a:	e9 2d fa ff ff       	jmp    10498c <_vfiprintf_r+0x3c>
  104f5f:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  104f66:	44 89 e9             	mov    %r13d,%ecx
  104f69:	45 89 f0             	mov    %r14d,%r8d
  104f6c:	4d 89 fa             	mov    %r15,%r10
  104f6f:	8b 07                	mov    (%rdi),%eax
  104f71:	f6 c1 20             	test   $0x20,%cl
  104f74:	0f 84 77 02 00 00    	je     1051f1 <_vfiprintf_r+0x8a1>
  104f7a:	83 f8 2f             	cmp    $0x2f,%eax
  104f7d:	0f 86 f4 0b 00 00    	jbe    105b77 <_vfiprintf_r+0x1227>
  104f83:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  104f8a:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  104f8e:	48 8d 42 08          	lea    0x8(%rdx),%rax
  104f92:	48 89 46 08          	mov    %rax,0x8(%rsi)
  104f96:	e9 7d 02 00 00       	jmp    105218 <_vfiprintf_r+0x8c8>
  104f9b:	41 0f be 04 24       	movsbl (%r12),%eax
  104fa0:	3c 68                	cmp    $0x68,%al
  104fa2:	0f 84 05 11 00 00    	je     1060ad <_vfiprintf_r+0x175d>
  104fa8:	41 83 cd 40          	or     $0x40,%r13d
  104fac:	e9 2b fb ff ff       	jmp    104adc <_vfiprintf_r+0x18c>
  104fb1:	44 89 e9             	mov    %r13d,%ecx
  104fb4:	45 89 f0             	mov    %r14d,%r8d
  104fb7:	4d 89 fa             	mov    %r15,%r10
  104fba:	83 c9 10             	or     $0x10,%ecx
  104fbd:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  104fc4:	8b 07                	mov    (%rdi),%eax
  104fc6:	f6 c1 20             	test   $0x20,%cl
  104fc9:	0f 84 41 0a 00 00    	je     105a10 <_vfiprintf_r+0x10c0>
  104fcf:	83 f8 2f             	cmp    $0x2f,%eax
  104fd2:	0f 86 c7 0b 00 00    	jbe    105b9f <_vfiprintf_r+0x124f>
  104fd8:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  104fdf:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  104fe3:	48 8d 42 08          	lea    0x8(%rdx),%rax
  104fe7:	48 89 46 08          	mov    %rax,0x8(%rsi)
  104feb:	48 8b 32             	mov    (%rdx),%rsi
  104fee:	c6 85 bd fe ff ff 00 	movb   $0x0,-0x143(%rbp)
  104ff5:	83 fb ff             	cmp    $0xffffffff,%ebx
  104ff8:	0f 84 32 02 00 00    	je     105230 <_vfiprintf_r+0x8e0>
  104ffe:	80 e1 7f             	and    $0x7f,%cl
  105001:	48 85 f6             	test   %rsi,%rsi
  105004:	0f 85 26 02 00 00    	jne    105230 <_vfiprintf_r+0x8e0>
  10500a:	85 db                	test   %ebx,%ebx
  10500c:	0f 85 1e 02 00 00    	jne    105230 <_vfiprintf_r+0x8e0>
  105012:	0f b6 85 bd fe ff ff 	movzbl -0x143(%rbp),%eax
  105019:	31 db                	xor    %ebx,%ebx
  10501b:	45 31 db             	xor    %r11d,%r11d
  10501e:	4c 8d b5 44 ff ff ff 	lea    -0xbc(%rbp),%r14
  105025:	44 39 db             	cmp    %r11d,%ebx
  105028:	45 89 dd             	mov    %r11d,%r13d
  10502b:	44 0f 4d eb          	cmovge %ebx,%r13d
  10502f:	84 c0                	test   %al,%al
  105031:	0f 84 f2 15 00 00    	je     106629 <_vfiprintf_r+0x1cd9>
  105037:	41 83 c5 01          	add    $0x1,%r13d
  10503b:	45 31 c9             	xor    %r9d,%r9d
  10503e:	e9 1d fb ff ff       	jmp    104b60 <_vfiprintf_r+0x210>
  105043:	41 0f be 04 24       	movsbl (%r12),%eax
  105048:	41 83 cd 20          	or     $0x20,%r13d
  10504c:	e9 8b fa ff ff       	jmp    104adc <_vfiprintf_r+0x18c>
  105051:	41 0f be 04 24       	movsbl (%r12),%eax
  105056:	41 80 cd 80          	or     $0x80,%r13b
  10505a:	e9 7d fa ff ff       	jmp    104adc <_vfiprintf_r+0x18c>
  10505f:	41 0f be 04 24       	movsbl (%r12),%eax
  105064:	49 8d 74 24 01       	lea    0x1(%r12),%rsi
  105069:	83 f8 2a             	cmp    $0x2a,%eax
  10506c:	0f 84 6f 15 00 00    	je     1065e1 <_vfiprintf_r+0x1c91>
  105072:	8d 50 d0             	lea    -0x30(%rax),%edx
  105075:	49 89 f4             	mov    %rsi,%r12
  105078:	31 db                	xor    %ebx,%ebx
  10507a:	83 fa 09             	cmp    $0x9,%edx
  10507d:	0f 87 5d fa ff ff    	ja     104ae0 <_vfiprintf_r+0x190>
  105083:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  105088:	8d 04 9b             	lea    (%rbx,%rbx,4),%eax
  10508b:	49 83 c4 01          	add    $0x1,%r12
  10508f:	8d 1c 42             	lea    (%rdx,%rax,2),%ebx
  105092:	41 0f be 44 24 ff    	movsbl -0x1(%r12),%eax
  105098:	8d 50 d0             	lea    -0x30(%rax),%edx
  10509b:	83 fa 09             	cmp    $0x9,%edx
  10509e:	76 e8                	jbe    105088 <_vfiprintf_r+0x738>
  1050a0:	e9 3b fa ff ff       	jmp    104ae0 <_vfiprintf_r+0x190>
  1050a5:	c6 85 bd fe ff ff 2b 	movb   $0x2b,-0x143(%rbp)
  1050ac:	41 0f be 04 24       	movsbl (%r12),%eax
  1050b1:	e9 26 fa ff ff       	jmp    104adc <_vfiprintf_r+0x18c>
  1050b6:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1050bd:	8b 07                	mov    (%rdi),%eax
  1050bf:	83 f8 2f             	cmp    $0x2f,%eax
  1050c2:	0f 87 bf 0a 00 00    	ja     105b87 <_vfiprintf_r+0x1237>
  1050c8:	89 c2                	mov    %eax,%edx
  1050ca:	83 c0 08             	add    $0x8,%eax
  1050cd:	48 03 57 10          	add    0x10(%rdi),%rdx
  1050d1:	89 07                	mov    %eax,(%rdi)
  1050d3:	44 8b 32             	mov    (%rdx),%r14d
  1050d6:	41 0f b6 14 24       	movzbl (%r12),%edx
  1050db:	0f be c2             	movsbl %dl,%eax
  1050de:	45 85 f6             	test   %r14d,%r14d
  1050e1:	0f 89 f5 f9 ff ff    	jns    104adc <_vfiprintf_r+0x18c>
  1050e7:	41 f7 de             	neg    %r14d
  1050ea:	41 83 cd 04          	or     $0x4,%r13d
  1050ee:	0f be c2             	movsbl %dl,%eax
  1050f1:	e9 e6 f9 ff ff       	jmp    104adc <_vfiprintf_r+0x18c>
  1050f6:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  1050fd:	e8 5e 6e 00 00       	call   10bf60 <_localeconv_r>
  105102:	48 8b 40 08          	mov    0x8(%rax),%rax
  105106:	48 89 c7             	mov    %rax,%rdi
  105109:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
  105110:	e8 8b f6 ff ff       	call   1047a0 <strlen>
  105115:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  10511c:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
  105123:	e8 38 6e 00 00       	call   10bf60 <_localeconv_r>
  105128:	48 83 bd 80 fe ff ff 	cmpq   $0x0,-0x180(%rbp)
  10512f:	00 
  105130:	48 8b 70 10          	mov    0x10(%rax),%rsi
  105134:	41 0f be 04 24       	movsbl (%r12),%eax
  105139:	48 89 b5 78 fe ff ff 	mov    %rsi,-0x188(%rbp)
  105140:	0f 84 96 f9 ff ff    	je     104adc <_vfiprintf_r+0x18c>
  105146:	48 85 f6             	test   %rsi,%rsi
  105149:	0f 84 8d f9 ff ff    	je     104adc <_vfiprintf_r+0x18c>
  10514f:	80 3e 00             	cmpb   $0x0,(%rsi)
  105152:	0f 84 84 f9 ff ff    	je     104adc <_vfiprintf_r+0x18c>
  105158:	41 81 cd 00 04 00 00 	or     $0x400,%r13d
  10515f:	e9 78 f9 ff ff       	jmp    104adc <_vfiprintf_r+0x18c>
  105164:	41 0f be 04 24       	movsbl (%r12),%eax
  105169:	41 83 cd 01          	or     $0x1,%r13d
  10516d:	e9 6a f9 ff ff       	jmp    104adc <_vfiprintf_r+0x18c>
  105172:	80 bd bd fe ff ff 00 	cmpb   $0x0,-0x143(%rbp)
  105179:	41 0f be 04 24       	movsbl (%r12),%eax
  10517e:	0f 85 58 f9 ff ff    	jne    104adc <_vfiprintf_r+0x18c>
  105184:	c6 85 bd fe ff ff 20 	movb   $0x20,-0x143(%rbp)
  10518b:	e9 4c f9 ff ff       	jmp    104adc <_vfiprintf_r+0x18c>
  105190:	44 89 e9             	mov    %r13d,%ecx
  105193:	45 89 f0             	mov    %r14d,%r8d
  105196:	4d 89 fa             	mov    %r15,%r10
  105199:	83 c9 10             	or     $0x10,%ecx
  10519c:	41 89 cd             	mov    %ecx,%r13d
  10519f:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  1051a6:	8b 06                	mov    (%rsi),%eax
  1051a8:	41 f6 c5 20          	test   $0x20,%r13b
  1051ac:	0f 84 87 08 00 00    	je     105a39 <_vfiprintf_r+0x10e9>
  1051b2:	83 f8 2f             	cmp    $0x2f,%eax
  1051b5:	0f 86 f4 09 00 00    	jbe    105baf <_vfiprintf_r+0x125f>
  1051bb:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1051c2:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  1051c6:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1051ca:	48 89 47 08          	mov    %rax,0x8(%rdi)
  1051ce:	e9 8d 08 00 00       	jmp    105a60 <_vfiprintf_r+0x1110>
  1051d3:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1051da:	44 89 e9             	mov    %r13d,%ecx
  1051dd:	45 89 f0             	mov    %r14d,%r8d
  1051e0:	4d 89 fa             	mov    %r15,%r10
  1051e3:	83 c9 10             	or     $0x10,%ecx
  1051e6:	8b 07                	mov    (%rdi),%eax
  1051e8:	f6 c1 20             	test   $0x20,%cl
  1051eb:	0f 85 89 fd ff ff    	jne    104f7a <_vfiprintf_r+0x62a>
  1051f1:	f6 c1 10             	test   $0x10,%cl
  1051f4:	0f 84 22 09 00 00    	je     105b1c <_vfiprintf_r+0x11cc>
  1051fa:	83 f8 2f             	cmp    $0x2f,%eax
  1051fd:	0f 87 e2 0f 00 00    	ja     1061e5 <_vfiprintf_r+0x1895>
  105203:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  10520a:	89 c2                	mov    %eax,%edx
  10520c:	83 c0 08             	add    $0x8,%eax
  10520f:	89 07                	mov    %eax,(%rdi)
  105211:	48 03 57 10          	add    0x10(%rdi),%rdx
  105215:	0f 1f 00             	nopl   (%rax)
  105218:	48 8b 02             	mov    (%rdx),%rax
  10521b:	48 89 c6             	mov    %rax,%rsi
  10521e:	48 85 c0             	test   %rax,%rax
  105221:	0f 88 27 0d 00 00    	js     105f4e <_vfiprintf_r+0x15fe>
  105227:	83 fb ff             	cmp    $0xffffffff,%ebx
  10522a:	0f 85 ce fd ff ff    	jne    104ffe <_vfiprintf_r+0x6ae>
  105230:	48 83 fe 09          	cmp    $0x9,%rsi
  105234:	0f 87 32 0d 00 00    	ja     105f6c <_vfiprintf_r+0x161c>
  10523a:	83 c6 30             	add    $0x30,%esi
  10523d:	0f b6 85 bd fe ff ff 	movzbl -0x143(%rbp),%eax
  105244:	41 bb 01 00 00 00    	mov    $0x1,%r11d
  10524a:	4c 8d b5 43 ff ff ff 	lea    -0xbd(%rbp),%r14
  105251:	40 88 b5 43 ff ff ff 	mov    %sil,-0xbd(%rbp)
  105258:	e9 c8 fd ff ff       	jmp    105025 <_vfiprintf_r+0x6d5>
  10525d:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  105264:	44 89 e9             	mov    %r13d,%ecx
  105267:	45 89 f0             	mov    %r14d,%r8d
  10526a:	4d 89 fa             	mov    %r15,%r10
  10526d:	8b 07                	mov    (%rdi),%eax
  10526f:	83 f8 2f             	cmp    $0x2f,%eax
  105272:	0f 86 47 09 00 00    	jbe    105bbf <_vfiprintf_r+0x126f>
  105278:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  10527f:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  105283:	48 8d 42 08          	lea    0x8(%rdx),%rax
  105287:	48 89 46 08          	mov    %rax,0x8(%rsi)
  10528b:	0f b7 05 c2 8d 01 00 	movzwl 0x18dc2(%rip),%eax        # 11e054 <_ZN6tflite19kPoolingInputTensorE+0x14>
  105292:	48 8b 12             	mov    (%rdx),%rdx
  105295:	c6 85 bd fe ff ff 00 	movb   $0x0,-0x143(%rbp)
  10529c:	83 c9 02             	or     $0x2,%ecx
  10529f:	41 b9 02 00 00 00    	mov    $0x2,%r9d
  1052a5:	be 59 03 12 00       	mov    $0x120359,%esi
  1052aa:	66 89 85 be fe ff ff 	mov    %ax,-0x142(%rbp)
  1052b1:	83 fb ff             	cmp    $0xffffffff,%ebx
  1052b4:	0f 84 ee 0a 00 00    	je     105da8 <_vfiprintf_r+0x1458>
  1052ba:	48 85 d2             	test   %rdx,%rdx
  1052bd:	89 c8                	mov    %ecx,%eax
  1052bf:	be 59 03 12 00       	mov    $0x120359,%esi
  1052c4:	40 0f 95 c7          	setne  %dil
  1052c8:	89 c1                	mov    %eax,%ecx
  1052ca:	80 e1 7f             	and    $0x7f,%cl
  1052cd:	85 db                	test   %ebx,%ebx
  1052cf:	0f 85 71 0f 00 00    	jne    106246 <_vfiprintf_r+0x18f6>
  1052d5:	40 84 ff             	test   %dil,%dil
  1052d8:	0f 85 68 0f 00 00    	jne    106246 <_vfiprintf_r+0x18f6>
  1052de:	83 e0 02             	and    $0x2,%eax
  1052e1:	45 31 ed             	xor    %r13d,%r13d
  1052e4:	4c 8d b5 44 ff ff ff 	lea    -0xbc(%rbp),%r14
  1052eb:	41 89 c1             	mov    %eax,%r9d
  1052ee:	e9 ae 07 00 00       	jmp    105aa1 <_vfiprintf_r+0x1151>
  1052f3:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1052fa:	44 89 e9             	mov    %r13d,%ecx
  1052fd:	4d 89 fa             	mov    %r15,%r10
  105300:	8b 07                	mov    (%rdi),%eax
  105302:	41 f6 c5 20          	test   $0x20,%r13b
  105306:	0f 84 40 08 00 00    	je     105b4c <_vfiprintf_r+0x11fc>
  10530c:	83 f8 2f             	cmp    $0x2f,%eax
  10530f:	0f 87 4a 08 00 00    	ja     105b5f <_vfiprintf_r+0x120f>
  105315:	89 c2                	mov    %eax,%edx
  105317:	83 c0 08             	add    $0x8,%eax
  10531a:	48 03 57 10          	add    0x10(%rdi),%rdx
  10531e:	89 07                	mov    %eax,(%rdi)
  105320:	48 8b 02             	mov    (%rdx),%rax
  105323:	48 63 95 8c fe ff ff 	movslq -0x174(%rbp),%rdx
  10532a:	48 89 10             	mov    %rdx,(%rax)
  10532d:	e9 fe f6 ff ff       	jmp    104a30 <_vfiprintf_r+0xe0>
  105332:	41 0f be 04 24       	movsbl (%r12),%eax
  105337:	3c 6c                	cmp    $0x6c,%al
  105339:	0f 84 5b 0d 00 00    	je     10609a <_vfiprintf_r+0x174a>
  10533f:	41 83 cd 10          	or     $0x10,%r13d
  105343:	e9 94 f7 ff ff       	jmp    104adc <_vfiprintf_r+0x18c>
  105348:	48 85 c0             	test   %rax,%rax
  10534b:	0f 85 0c 09 00 00    	jne    105c5d <_vfiprintf_r+0x130d>
  105351:	80 bd bd fe ff ff 00 	cmpb   $0x0,-0x143(%rbp)
  105358:	0f 84 ea 08 00 00    	je     105c48 <_vfiprintf_r+0x12f8>
  10535e:	48 c7 85 58 ff ff ff 	movq   $0x1,-0xa8(%rbp)
  105365:	01 00 00 00 
  105369:	48 8d 85 bd fe ff ff 	lea    -0x143(%rbp),%rax
  105370:	bf 01 00 00 00       	mov    $0x1,%edi
  105375:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  10537c:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  105383:	b8 01 00 00 00       	mov    $0x1,%eax
  105388:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10538f:	00 
  105390:	89 fa                	mov    %edi,%edx
  105392:	49 83 c2 10          	add    $0x10,%r10
  105396:	83 c7 01             	add    $0x1,%edi
  105399:	45 85 c9             	test   %r9d,%r9d
  10539c:	0f 84 d9 f8 ff ff    	je     104c7b <_vfiprintf_r+0x32b>
  1053a2:	48 8d 95 be fe ff ff 	lea    -0x142(%rbp),%rdx
  1053a9:	48 83 c0 02          	add    $0x2,%rax
  1053ad:	49 c7 42 08 02 00 00 	movq   $0x2,0x8(%r10)
  1053b4:	00 
  1053b5:	49 89 12             	mov    %rdx,(%r10)
  1053b8:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1053bf:	89 bd c8 fe ff ff    	mov    %edi,-0x138(%rbp)
  1053c5:	83 ff 07             	cmp    $0x7,%edi
  1053c8:	0f 8e a4 f8 ff ff    	jle    104c72 <_vfiprintf_r+0x322>
  1053ce:	48 85 c0             	test   %rax,%rax
  1053d1:	0f 85 d1 05 00 00    	jne    1059a8 <_vfiprintf_r+0x1058>
  1053d7:	31 d2                	xor    %edx,%edx
  1053d9:	31 c0                	xor    %eax,%eax
  1053db:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  1053e2:	bf 01 00 00 00       	mov    $0x1,%edi
  1053e7:	81 bd 90 fe ff ff 80 	cmpl   $0x80,-0x170(%rbp)
  1053ee:	00 00 00 
  1053f1:	0f 85 94 f8 ff ff    	jne    104c8b <_vfiprintf_r+0x33b>
  1053f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  1053fe:	00 00 
  105400:	45 89 c7             	mov    %r8d,%r15d
  105403:	45 29 ef             	sub    %r13d,%r15d
  105406:	45 85 ff             	test   %r15d,%r15d
  105409:	0f 8e 7c f8 ff ff    	jle    104c8b <_vfiprintf_r+0x33b>
  10540f:	41 83 ff 10          	cmp    $0x10,%r15d
  105413:	0f 8e 52 10 00 00    	jle    10646b <_vfiprintf_r+0x1b1b>
  105419:	89 9d 70 fe ff ff    	mov    %ebx,-0x190(%rbp)
  10541f:	44 89 fb             	mov    %r15d,%ebx
  105422:	4d 89 e7             	mov    %r12,%r15
  105425:	45 89 dc             	mov    %r11d,%r12d
  105428:	89 8d 90 fe ff ff    	mov    %ecx,-0x170(%rbp)
  10542e:	44 89 85 88 fe ff ff 	mov    %r8d,-0x178(%rbp)
  105435:	eb 1a                	jmp    105451 <_vfiprintf_r+0xb01>
  105437:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10543e:	00 00 
  105440:	83 eb 10             	sub    $0x10,%ebx
  105443:	8d 72 02             	lea    0x2(%rdx),%esi
  105446:	49 83 c2 10          	add    $0x10,%r10
  10544a:	89 ca                	mov    %ecx,%edx
  10544c:	83 fb 10             	cmp    $0x10,%ebx
  10544f:	7e 49                	jle    10549a <_vfiprintf_r+0xb4a>
  105451:	48 83 c0 10          	add    $0x10,%rax
  105455:	8d 4a 01             	lea    0x1(%rdx),%ecx
  105458:	49 c7 02 b0 d2 11 00 	movq   $0x11d2b0,(%r10)
  10545f:	49 c7 42 08 10 00 00 	movq   $0x10,0x8(%r10)
  105466:	00 
  105467:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  10546e:	89 8d c8 fe ff ff    	mov    %ecx,-0x138(%rbp)
  105474:	83 f9 07             	cmp    $0x7,%ecx
  105477:	7e c7                	jle    105440 <_vfiprintf_r+0xaf0>
  105479:	48 85 c0             	test   %rax,%rax
  10547c:	0f 85 96 02 00 00    	jne    105718 <_vfiprintf_r+0xdc8>
  105482:	83 eb 10             	sub    $0x10,%ebx
  105485:	be 01 00 00 00       	mov    $0x1,%esi
  10548a:	31 d2                	xor    %edx,%edx
  10548c:	31 c0                	xor    %eax,%eax
  10548e:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  105495:	83 fb 10             	cmp    $0x10,%ebx
  105498:	7f b7                	jg     105451 <_vfiprintf_r+0xb01>
  10549a:	45 89 e3             	mov    %r12d,%r11d
  10549d:	8b 8d 90 fe ff ff    	mov    -0x170(%rbp),%ecx
  1054a3:	4d 89 fc             	mov    %r15,%r12
  1054a6:	44 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%r8d
  1054ad:	41 89 df             	mov    %ebx,%r15d
  1054b0:	8b 9d 70 fe ff ff    	mov    -0x190(%rbp),%ebx
  1054b6:	4d 63 ff             	movslq %r15d,%r15
  1054b9:	49 c7 02 b0 d2 11 00 	movq   $0x11d2b0,(%r10)
  1054c0:	4c 01 f8             	add    %r15,%rax
  1054c3:	4d 89 7a 08          	mov    %r15,0x8(%r10)
  1054c7:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1054ce:	89 b5 c8 fe ff ff    	mov    %esi,-0x138(%rbp)
  1054d4:	83 fe 07             	cmp    $0x7,%esi
  1054d7:	0f 8f d0 00 00 00    	jg     1055ad <_vfiprintf_r+0xc5d>
  1054dd:	44 29 db             	sub    %r11d,%ebx
  1054e0:	49 83 c2 10          	add    $0x10,%r10
  1054e4:	8d 7e 01             	lea    0x1(%rsi),%edi
  1054e7:	89 f2                	mov    %esi,%edx
  1054e9:	85 db                	test   %ebx,%ebx
  1054eb:	0f 8e a5 f7 ff ff    	jle    104c96 <_vfiprintf_r+0x346>
  1054f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  1054f8:	83 fb 10             	cmp    $0x10,%ebx
  1054fb:	7e 7d                	jle    10557a <_vfiprintf_r+0xc2a>
  1054fd:	89 8d 90 fe ff ff    	mov    %ecx,-0x170(%rbp)
  105503:	45 89 c7             	mov    %r8d,%r15d
  105506:	44 89 9d 88 fe ff ff 	mov    %r11d,-0x178(%rbp)
  10550d:	eb 12                	jmp    105521 <_vfiprintf_r+0xbd1>
  10550f:	90                   	nop
  105510:	83 eb 10             	sub    $0x10,%ebx
  105513:	8d 7a 02             	lea    0x2(%rdx),%edi
  105516:	49 83 c2 10          	add    $0x10,%r10
  10551a:	89 ca                	mov    %ecx,%edx
  10551c:	83 fb 10             	cmp    $0x10,%ebx
  10551f:	7e 49                	jle    10556a <_vfiprintf_r+0xc1a>
  105521:	48 83 c0 10          	add    $0x10,%rax
  105525:	8d 4a 01             	lea    0x1(%rdx),%ecx
  105528:	49 c7 02 b0 d2 11 00 	movq   $0x11d2b0,(%r10)
  10552f:	49 c7 42 08 10 00 00 	movq   $0x10,0x8(%r10)
  105536:	00 
  105537:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  10553e:	89 8d c8 fe ff ff    	mov    %ecx,-0x138(%rbp)
  105544:	83 f9 07             	cmp    $0x7,%ecx
  105547:	7e c7                	jle    105510 <_vfiprintf_r+0xbc0>
  105549:	48 85 c0             	test   %rax,%rax
  10554c:	0f 85 86 01 00 00    	jne    1056d8 <_vfiprintf_r+0xd88>
  105552:	83 eb 10             	sub    $0x10,%ebx
  105555:	bf 01 00 00 00       	mov    $0x1,%edi
  10555a:	31 d2                	xor    %edx,%edx
  10555c:	31 c0                	xor    %eax,%eax
  10555e:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  105565:	83 fb 10             	cmp    $0x10,%ebx
  105568:	7f b7                	jg     105521 <_vfiprintf_r+0xbd1>
  10556a:	8b 8d 90 fe ff ff    	mov    -0x170(%rbp),%ecx
  105570:	44 8b 9d 88 fe ff ff 	mov    -0x178(%rbp),%r11d
  105577:	45 89 f8             	mov    %r15d,%r8d
  10557a:	48 63 db             	movslq %ebx,%rbx
  10557d:	49 c7 02 b0 d2 11 00 	movq   $0x11d2b0,(%r10)
  105584:	48 01 d8             	add    %rbx,%rax
  105587:	49 89 5a 08          	mov    %rbx,0x8(%r10)
  10558b:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  105592:	89 bd c8 fe ff ff    	mov    %edi,-0x138(%rbp)
  105598:	83 ff 07             	cmp    $0x7,%edi
  10559b:	0f 8f 6f 03 00 00    	jg     105910 <_vfiprintf_r+0xfc0>
  1055a1:	49 83 c2 10          	add    $0x10,%r10
  1055a5:	83 c7 01             	add    $0x1,%edi
  1055a8:	e9 e9 f6 ff ff       	jmp    104c96 <_vfiprintf_r+0x346>
  1055ad:	48 85 c0             	test   %rax,%rax
  1055b0:	0f 85 99 08 00 00    	jne    105e4f <_vfiprintf_r+0x14ff>
  1055b6:	44 29 db             	sub    %r11d,%ebx
  1055b9:	85 db                	test   %ebx,%ebx
  1055bb:	0f 8f f8 08 00 00    	jg     105eb9 <_vfiprintf_r+0x1569>
  1055c1:	49 63 c3             	movslq %r11d,%rax
  1055c4:	4c 89 b5 50 ff ff ff 	mov    %r14,-0xb0(%rbp)
  1055cb:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  1055d2:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  1055d9:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1055e0:	c7 85 c8 fe ff ff 01 	movl   $0x1,-0x138(%rbp)
  1055e7:	00 00 00 
  1055ea:	83 e1 04             	and    $0x4,%ecx
  1055ed:	0f 84 fe f6 ff ff    	je     104cf1 <_vfiprintf_r+0x3a1>
  1055f3:	44 89 c3             	mov    %r8d,%ebx
  1055f6:	49 83 c2 10          	add    $0x10,%r10
  1055fa:	44 29 eb             	sub    %r13d,%ebx
  1055fd:	85 db                	test   %ebx,%ebx
  1055ff:	0f 8e ec f6 ff ff    	jle    104cf1 <_vfiprintf_r+0x3a1>
  105605:	8b 8d c8 fe ff ff    	mov    -0x138(%rbp),%ecx
  10560b:	83 fb 10             	cmp    $0x10,%ebx
  10560e:	0f 8e 4f 0e 00 00    	jle    106463 <_vfiprintf_r+0x1b13>
  105614:	41 89 df             	mov    %ebx,%r15d
  105617:	4c 8b b5 a0 fe ff ff 	mov    -0x160(%rbp),%r14
  10561e:	44 89 c3             	mov    %r8d,%ebx
  105621:	eb 18                	jmp    10563b <_vfiprintf_r+0xceb>
  105623:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  105628:	41 83 ef 10          	sub    $0x10,%r15d
  10562c:	8d 71 02             	lea    0x2(%rcx),%esi
  10562f:	49 83 c2 10          	add    $0x10,%r10
  105633:	89 d1                	mov    %edx,%ecx
  105635:	41 83 ff 10          	cmp    $0x10,%r15d
  105639:	7e 4b                	jle    105686 <_vfiprintf_r+0xd36>
  10563b:	48 83 c0 10          	add    $0x10,%rax
  10563f:	8d 51 01             	lea    0x1(%rcx),%edx
  105642:	49 c7 02 c0 d2 11 00 	movq   $0x11d2c0,(%r10)
  105649:	49 c7 42 08 10 00 00 	movq   $0x10,0x8(%r10)
  105650:	00 
  105651:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  105658:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  10565e:	83 fa 07             	cmp    $0x7,%edx
  105661:	7e c5                	jle    105628 <_vfiprintf_r+0xcd8>
  105663:	48 85 c0             	test   %rax,%rax
  105666:	0f 85 64 02 00 00    	jne    1058d0 <_vfiprintf_r+0xf80>
  10566c:	41 83 ef 10          	sub    $0x10,%r15d
  105670:	be 01 00 00 00       	mov    $0x1,%esi
  105675:	31 c9                	xor    %ecx,%ecx
  105677:	31 c0                	xor    %eax,%eax
  105679:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  105680:	41 83 ff 10          	cmp    $0x10,%r15d
  105684:	7f b5                	jg     10563b <_vfiprintf_r+0xceb>
  105686:	41 89 d8             	mov    %ebx,%r8d
  105689:	44 89 fb             	mov    %r15d,%ebx
  10568c:	48 63 db             	movslq %ebx,%rbx
  10568f:	49 c7 02 c0 d2 11 00 	movq   $0x11d2c0,(%r10)
  105696:	48 01 d8             	add    %rbx,%rax
  105699:	49 89 5a 08          	mov    %rbx,0x8(%r10)
  10569d:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1056a4:	89 b5 c8 fe ff ff    	mov    %esi,-0x138(%rbp)
  1056aa:	83 fe 07             	cmp    $0x7,%esi
  1056ad:	0f 8e 3e f6 ff ff    	jle    104cf1 <_vfiprintf_r+0x3a1>
  1056b3:	48 85 c0             	test   %rax,%rax
  1056b6:	0f 85 20 06 00 00    	jne    105cdc <_vfiprintf_r+0x138c>
  1056bc:	0f 1f 40 00          	nopl   0x0(%rax)
  1056c0:	45 39 e8             	cmp    %r13d,%r8d
  1056c3:	45 0f 4d e8          	cmovge %r8d,%r13d
  1056c7:	44 01 ad 8c fe ff ff 	add    %r13d,-0x174(%rbp)
  1056ce:	e9 68 f6 ff ff       	jmp    104d3b <_vfiprintf_r+0x3eb>
  1056d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  1056d8:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  1056df:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  1056e6:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1056ed:	e8 4e d8 ff ff       	call   102f40 <__sfvwrite_r>
  1056f2:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  1056f9:	00 00 00 00 
  1056fd:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  105704:	00 00 00 
  105707:	85 c0                	test   %eax,%eax
  105709:	0f 84 43 fe ff ff    	je     105552 <_vfiprintf_r+0xc02>
  10570f:	e9 1c f7 ff ff       	jmp    104e30 <_vfiprintf_r+0x4e0>
  105714:	0f 1f 40 00          	nopl   0x0(%rax)
  105718:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  10571f:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  105726:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10572d:	e8 0e d8 ff ff       	call   102f40 <__sfvwrite_r>
  105732:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  105739:	00 00 00 00 
  10573d:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  105744:	00 00 00 
  105747:	85 c0                	test   %eax,%eax
  105749:	0f 84 33 fd ff ff    	je     105482 <_vfiprintf_r+0xb32>
  10574f:	e9 dc f6 ff ff       	jmp    104e30 <_vfiprintf_r+0x4e0>
  105754:	0f 1f 40 00          	nopl   0x0(%rax)
  105758:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  10575f:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  105766:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10576d:	44 89 85 88 fe ff ff 	mov    %r8d,-0x178(%rbp)
  105774:	89 8d 90 fe ff ff    	mov    %ecx,-0x170(%rbp)
  10577a:	e8 c1 d7 ff ff       	call   102f40 <__sfvwrite_r>
  10577f:	8b 8d 90 fe ff ff    	mov    -0x170(%rbp),%ecx
  105785:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  10578c:	00 00 00 00 
  105790:	85 c0                	test   %eax,%eax
  105792:	44 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%r8d
  105799:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  1057a0:	00 00 00 
  1057a3:	0f 84 23 f5 ff ff    	je     104ccc <_vfiprintf_r+0x37c>
  1057a9:	e9 82 f6 ff ff       	jmp    104e30 <_vfiprintf_r+0x4e0>
  1057ae:	66 90                	xchg   %ax,%ax
  1057b0:	41 83 ff 10          	cmp    $0x10,%r15d
  1057b4:	0f 8e a1 00 00 00    	jle    10585b <_vfiprintf_r+0xf0b>
  1057ba:	89 9d 64 fe ff ff    	mov    %ebx,-0x19c(%rbp)
  1057c0:	44 89 fb             	mov    %r15d,%ebx
  1057c3:	4d 89 e7             	mov    %r12,%r15
  1057c6:	45 89 dc             	mov    %r11d,%r12d
  1057c9:	44 89 8d 88 fe ff ff 	mov    %r9d,-0x178(%rbp)
  1057d0:	89 8d 70 fe ff ff    	mov    %ecx,-0x190(%rbp)
  1057d6:	44 89 85 68 fe ff ff 	mov    %r8d,-0x198(%rbp)
  1057dd:	eb 15                	jmp    1057f4 <_vfiprintf_r+0xea4>
  1057df:	90                   	nop
  1057e0:	83 eb 10             	sub    $0x10,%ebx
  1057e3:	8d 7a 02             	lea    0x2(%rdx),%edi
  1057e6:	49 83 c2 10          	add    $0x10,%r10
  1057ea:	89 f2                	mov    %esi,%edx
  1057ec:	83 fb 10             	cmp    $0x10,%ebx
  1057ef:	7e 45                	jle    105836 <_vfiprintf_r+0xee6>
  1057f1:	8d 72 01             	lea    0x1(%rdx),%esi
  1057f4:	48 83 c0 10          	add    $0x10,%rax
  1057f8:	49 c7 02 c0 d2 11 00 	movq   $0x11d2c0,(%r10)
  1057ff:	49 c7 42 08 10 00 00 	movq   $0x10,0x8(%r10)
  105806:	00 
  105807:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  10580e:	89 b5 c8 fe ff ff    	mov    %esi,-0x138(%rbp)
  105814:	83 fe 07             	cmp    $0x7,%esi
  105817:	7e c7                	jle    1057e0 <_vfiprintf_r+0xe90>
  105819:	48 85 c0             	test   %rax,%rax
  10581c:	75 72                	jne    105890 <_vfiprintf_r+0xf40>
  10581e:	83 eb 10             	sub    $0x10,%ebx
  105821:	31 d2                	xor    %edx,%edx
  105823:	bf 01 00 00 00       	mov    $0x1,%edi
  105828:	31 c0                	xor    %eax,%eax
  10582a:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  105831:	83 fb 10             	cmp    $0x10,%ebx
  105834:	7f bb                	jg     1057f1 <_vfiprintf_r+0xea1>
  105836:	45 89 e3             	mov    %r12d,%r11d
  105839:	44 8b 8d 88 fe ff ff 	mov    -0x178(%rbp),%r9d
  105840:	4d 89 fc             	mov    %r15,%r12
  105843:	41 89 df             	mov    %ebx,%r15d
  105846:	8b 8d 70 fe ff ff    	mov    -0x190(%rbp),%ecx
  10584c:	44 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%r8d
  105853:	89 fe                	mov    %edi,%esi
  105855:	8b 9d 64 fe ff ff    	mov    -0x19c(%rbp),%ebx
  10585b:	4d 63 ff             	movslq %r15d,%r15
  10585e:	49 c7 02 c0 d2 11 00 	movq   $0x11d2c0,(%r10)
  105865:	89 f2                	mov    %esi,%edx
  105867:	4c 01 f8             	add    %r15,%rax
  10586a:	4d 89 7a 08          	mov    %r15,0x8(%r10)
  10586e:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  105875:	89 b5 c8 fe ff ff    	mov    %esi,-0x138(%rbp)
  10587b:	83 fe 07             	cmp    $0x7,%esi
  10587e:	0f 8f c4 fa ff ff    	jg     105348 <_vfiprintf_r+0x9f8>
  105884:	49 83 c2 10          	add    $0x10,%r10
  105888:	8d 7e 01             	lea    0x1(%rsi),%edi
  10588b:	e9 04 f3 ff ff       	jmp    104b94 <_vfiprintf_r+0x244>
  105890:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  105897:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  10589e:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1058a5:	e8 96 d6 ff ff       	call   102f40 <__sfvwrite_r>
  1058aa:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  1058b1:	00 00 00 00 
  1058b5:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  1058bc:	00 00 00 
  1058bf:	85 c0                	test   %eax,%eax
  1058c1:	0f 84 57 ff ff ff    	je     10581e <_vfiprintf_r+0xece>
  1058c7:	e9 64 f5 ff ff       	jmp    104e30 <_vfiprintf_r+0x4e0>
  1058cc:	0f 1f 40 00          	nopl   0x0(%rax)
  1058d0:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  1058d7:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1058de:	4c 89 f7             	mov    %r14,%rdi
  1058e1:	e8 5a d6 ff ff       	call   102f40 <__sfvwrite_r>
  1058e6:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  1058ed:	00 00 00 00 
  1058f1:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  1058f8:	00 00 00 
  1058fb:	85 c0                	test   %eax,%eax
  1058fd:	0f 84 69 fd ff ff    	je     10566c <_vfiprintf_r+0xd1c>
  105903:	e9 28 f5 ff ff       	jmp    104e30 <_vfiprintf_r+0x4e0>
  105908:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10590f:	00 
  105910:	48 85 c0             	test   %rax,%rax
  105913:	0f 84 a8 fc ff ff    	je     1055c1 <_vfiprintf_r+0xc71>
  105919:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  105920:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  105927:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10592e:	44 89 9d 70 fe ff ff 	mov    %r11d,-0x190(%rbp)
  105935:	44 89 85 88 fe ff ff 	mov    %r8d,-0x178(%rbp)
  10593c:	89 8d 90 fe ff ff    	mov    %ecx,-0x170(%rbp)
  105942:	e8 f9 d5 ff ff       	call   102f40 <__sfvwrite_r>
  105947:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  10594e:	00 00 00 00 
  105952:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  105959:	00 00 00 
  10595c:	85 c0                	test   %eax,%eax
  10595e:	0f 85 cc f4 ff ff    	jne    104e30 <_vfiprintf_r+0x4e0>
  105964:	48 63 85 70 fe ff ff 	movslq -0x190(%rbp),%rax
  10596b:	4c 89 b5 50 ff ff ff 	mov    %r14,-0xb0(%rbp)
  105972:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  105979:	c7 85 c8 fe ff ff 01 	movl   $0x1,-0x138(%rbp)
  105980:	00 00 00 
  105983:	8b 8d 90 fe ff ff    	mov    -0x170(%rbp),%ecx
  105989:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  105990:	44 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%r8d
  105997:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  10599e:	e9 47 fc ff ff       	jmp    1055ea <_vfiprintf_r+0xc9a>
  1059a3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  1059a8:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  1059af:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  1059b6:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1059bd:	44 89 9d 68 fe ff ff 	mov    %r11d,-0x198(%rbp)
  1059c4:	44 89 85 70 fe ff ff 	mov    %r8d,-0x190(%rbp)
  1059cb:	89 8d 88 fe ff ff    	mov    %ecx,-0x178(%rbp)
  1059d1:	e8 6a d5 ff ff       	call   102f40 <__sfvwrite_r>
  1059d6:	8b 8d 88 fe ff ff    	mov    -0x178(%rbp),%ecx
  1059dc:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  1059e3:	00 00 00 00 
  1059e7:	85 c0                	test   %eax,%eax
  1059e9:	44 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%r8d
  1059f0:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  1059f7:	00 00 00 
  1059fa:	44 8b 9d 68 fe ff ff 	mov    -0x198(%rbp),%r11d
  105a01:	0f 84 d0 f9 ff ff    	je     1053d7 <_vfiprintf_r+0xa87>
  105a07:	e9 24 f4 ff ff       	jmp    104e30 <_vfiprintf_r+0x4e0>
  105a0c:	0f 1f 40 00          	nopl   0x0(%rax)
  105a10:	f6 c1 10             	test   $0x10,%cl
  105a13:	0f 84 c7 00 00 00    	je     105ae0 <_vfiprintf_r+0x1190>
  105a19:	83 f8 2f             	cmp    $0x2f,%eax
  105a1c:	0f 87 b6 f5 ff ff    	ja     104fd8 <_vfiprintf_r+0x688>
  105a22:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  105a29:	89 c2                	mov    %eax,%edx
  105a2b:	83 c0 08             	add    $0x8,%eax
  105a2e:	89 07                	mov    %eax,(%rdi)
  105a30:	48 03 57 10          	add    0x10(%rdi),%rdx
  105a34:	e9 b2 f5 ff ff       	jmp    104feb <_vfiprintf_r+0x69b>
  105a39:	41 f6 c5 10          	test   $0x10,%r13b
  105a3d:	74 77                	je     105ab6 <_vfiprintf_r+0x1166>
  105a3f:	83 f8 2f             	cmp    $0x2f,%eax
  105a42:	0f 87 85 07 00 00    	ja     1061cd <_vfiprintf_r+0x187d>
  105a48:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  105a4f:	89 c2                	mov    %eax,%edx
  105a51:	83 c0 08             	add    $0x8,%eax
  105a54:	89 07                	mov    %eax,(%rdi)
  105a56:	48 03 57 10          	add    0x10(%rdi),%rdx
  105a5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  105a60:	48 8b 02             	mov    (%rdx),%rax
  105a63:	c6 85 bd fe ff ff 00 	movb   $0x0,-0x143(%rbp)
  105a6a:	83 fb ff             	cmp    $0xffffffff,%ebx
  105a6d:	0f 84 5b 04 00 00    	je     105ece <_vfiprintf_r+0x157e>
  105a73:	44 89 e9             	mov    %r13d,%ecx
  105a76:	81 e1 7f fb ff ff    	and    $0xfffffb7f,%ecx
  105a7c:	85 db                	test   %ebx,%ebx
  105a7e:	0f 85 50 04 00 00    	jne    105ed4 <_vfiprintf_r+0x1584>
  105a84:	48 85 c0             	test   %rax,%rax
  105a87:	0f 85 47 04 00 00    	jne    105ed4 <_vfiprintf_r+0x1584>
  105a8d:	41 83 e5 01          	and    $0x1,%r13d
  105a91:	0f 85 8c 04 00 00    	jne    105f23 <_vfiprintf_r+0x15d3>
  105a97:	45 31 c9             	xor    %r9d,%r9d
  105a9a:	4c 8d b5 44 ff ff ff 	lea    -0xbc(%rbp),%r14
  105aa1:	45 89 eb             	mov    %r13d,%r11d
  105aa4:	31 db                	xor    %ebx,%ebx
  105aa6:	41 8d 45 02          	lea    0x2(%r13),%eax
  105aaa:	45 85 c9             	test   %r9d,%r9d
  105aad:	44 0f 45 e8          	cmovne %eax,%r13d
  105ab1:	e9 aa f0 ff ff       	jmp    104b60 <_vfiprintf_r+0x210>
  105ab6:	41 f6 c5 40          	test   $0x40,%r13b
  105aba:	0f 84 7d 06 00 00    	je     10613d <_vfiprintf_r+0x17ed>
  105ac0:	83 f8 2f             	cmp    $0x2f,%eax
  105ac3:	0f 87 cf 08 00 00    	ja     106398 <_vfiprintf_r+0x1a48>
  105ac9:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  105ad0:	89 c2                	mov    %eax,%edx
  105ad2:	83 c0 08             	add    $0x8,%eax
  105ad5:	89 07                	mov    %eax,(%rdi)
  105ad7:	48 03 57 10          	add    0x10(%rdi),%rdx
  105adb:	0f b7 02             	movzwl (%rdx),%eax
  105ade:	eb 83                	jmp    105a63 <_vfiprintf_r+0x1113>
  105ae0:	f6 c1 40             	test   $0x40,%cl
  105ae3:	0f 84 b1 06 00 00    	je     10619a <_vfiprintf_r+0x184a>
  105ae9:	83 f8 2f             	cmp    $0x2f,%eax
  105aec:	0f 87 d6 08 00 00    	ja     1063c8 <_vfiprintf_r+0x1a78>
  105af2:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  105af9:	89 c2                	mov    %eax,%edx
  105afb:	83 c0 08             	add    $0x8,%eax
  105afe:	89 07                	mov    %eax,(%rdi)
  105b00:	48 03 57 10          	add    0x10(%rdi),%rdx
  105b04:	c6 85 bd fe ff ff 00 	movb   $0x0,-0x143(%rbp)
  105b0b:	0f b7 32             	movzwl (%rdx),%esi
  105b0e:	83 fb ff             	cmp    $0xffffffff,%ebx
  105b11:	0f 85 e7 f4 ff ff    	jne    104ffe <_vfiprintf_r+0x6ae>
  105b17:	e9 14 f7 ff ff       	jmp    105230 <_vfiprintf_r+0x8e0>
  105b1c:	f6 c1 40             	test   $0x40,%cl
  105b1f:	0f 84 e8 05 00 00    	je     10610d <_vfiprintf_r+0x17bd>
  105b25:	83 f8 2f             	cmp    $0x2f,%eax
  105b28:	0f 87 82 08 00 00    	ja     1063b0 <_vfiprintf_r+0x1a60>
  105b2e:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  105b35:	89 c2                	mov    %eax,%edx
  105b37:	83 c0 08             	add    $0x8,%eax
  105b3a:	89 06                	mov    %eax,(%rsi)
  105b3c:	48 03 56 10          	add    0x10(%rsi),%rdx
  105b40:	48 0f bf 32          	movswq (%rdx),%rsi
  105b44:	48 89 f0             	mov    %rsi,%rax
  105b47:	e9 d2 f6 ff ff       	jmp    10521e <_vfiprintf_r+0x8ce>
  105b4c:	41 f6 c5 10          	test   $0x10,%r13b
  105b50:	0f 84 a7 06 00 00    	je     1061fd <_vfiprintf_r+0x18ad>
  105b56:	83 f8 2f             	cmp    $0x2f,%eax
  105b59:	0f 86 81 08 00 00    	jbe    1063e0 <_vfiprintf_r+0x1a90>
  105b5f:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  105b66:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  105b6a:	48 8d 42 08          	lea    0x8(%rdx),%rax
  105b6e:	48 89 46 08          	mov    %rax,0x8(%rsi)
  105b72:	e9 a9 f7 ff ff       	jmp    105320 <_vfiprintf_r+0x9d0>
  105b77:	89 c2                	mov    %eax,%edx
  105b79:	83 c0 08             	add    $0x8,%eax
  105b7c:	48 03 57 10          	add    0x10(%rdi),%rdx
  105b80:	89 07                	mov    %eax,(%rdi)
  105b82:	e9 91 f6 ff ff       	jmp    105218 <_vfiprintf_r+0x8c8>
  105b87:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  105b8e:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  105b92:	48 8d 42 08          	lea    0x8(%rdx),%rax
  105b96:	48 89 46 08          	mov    %rax,0x8(%rsi)
  105b9a:	e9 34 f5 ff ff       	jmp    1050d3 <_vfiprintf_r+0x783>
  105b9f:	89 c2                	mov    %eax,%edx
  105ba1:	83 c0 08             	add    $0x8,%eax
  105ba4:	48 03 57 10          	add    0x10(%rdi),%rdx
  105ba8:	89 07                	mov    %eax,(%rdi)
  105baa:	e9 3c f4 ff ff       	jmp    104feb <_vfiprintf_r+0x69b>
  105baf:	89 c2                	mov    %eax,%edx
  105bb1:	83 c0 08             	add    $0x8,%eax
  105bb4:	48 03 56 10          	add    0x10(%rsi),%rdx
  105bb8:	89 06                	mov    %eax,(%rsi)
  105bba:	e9 a1 fe ff ff       	jmp    105a60 <_vfiprintf_r+0x1110>
  105bbf:	89 c2                	mov    %eax,%edx
  105bc1:	83 c0 08             	add    $0x8,%eax
  105bc4:	48 03 57 10          	add    0x10(%rdi),%rdx
  105bc8:	89 07                	mov    %eax,(%rdi)
  105bca:	e9 bc f6 ff ff       	jmp    10528b <_vfiprintf_r+0x93b>
  105bcf:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  105bd6:	c6 85 bd fe ff ff 00 	movb   $0x0,-0x143(%rbp)
  105bdd:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  105be1:	48 8d 42 08          	lea    0x8(%rdx),%rax
  105be5:	48 89 47 08          	mov    %rax,0x8(%rdi)
  105be9:	4c 8b 32             	mov    (%rdx),%r14
  105bec:	4d 85 f6             	test   %r14,%r14
  105bef:	0f 85 c2 f2 ff ff    	jne    104eb7 <_vfiprintf_r+0x567>
  105bf5:	b8 06 00 00 00       	mov    $0x6,%eax
  105bfa:	41 be 6a 03 12 00    	mov    $0x12036a,%r14d
  105c00:	39 c3                	cmp    %eax,%ebx
  105c02:	0f 46 c3             	cmovbe %ebx,%eax
  105c05:	41 89 c3             	mov    %eax,%r11d
  105c08:	41 89 c5             	mov    %eax,%r13d
  105c0b:	e9 41 ef ff ff       	jmp    104b51 <_vfiprintf_r+0x201>
  105c10:	89 c2                	mov    %eax,%edx
  105c12:	83 c0 08             	add    $0x8,%eax
  105c15:	48 03 56 10          	add    0x10(%rsi),%rdx
  105c19:	89 06                	mov    %eax,(%rsi)
  105c1b:	8b 02                	mov    (%rdx),%eax
  105c1d:	e9 0f ef ff ff       	jmp    104b31 <_vfiprintf_r+0x1e1>
  105c22:	48 89 fb             	mov    %rdi,%rbx
  105c25:	48 8b bf a0 00 00 00 	mov    0xa0(%rdi),%rdi
  105c2c:	4c 89 9d 90 fe ff ff 	mov    %r11,-0x170(%rbp)
  105c33:	e8 7e c1 00 00       	call   111db6 <__retarget_lock_acquire_recursive>
  105c38:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  105c3c:	4c 8b 9d 90 fe ff ff 	mov    -0x170(%rbp),%r11
  105c43:	e9 61 ed ff ff       	jmp    1049a9 <_vfiprintf_r+0x59>
  105c48:	31 d2                	xor    %edx,%edx
  105c4a:	bf 01 00 00 00       	mov    $0x1,%edi
  105c4f:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  105c56:	31 c0                	xor    %eax,%eax
  105c58:	e9 3c f7 ff ff       	jmp    105399 <_vfiprintf_r+0xa49>
  105c5d:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  105c64:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  105c6b:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  105c72:	44 89 9d 64 fe ff ff 	mov    %r11d,-0x19c(%rbp)
  105c79:	44 89 85 68 fe ff ff 	mov    %r8d,-0x198(%rbp)
  105c80:	89 8d 70 fe ff ff    	mov    %ecx,-0x190(%rbp)
  105c86:	44 89 8d 88 fe ff ff 	mov    %r9d,-0x178(%rbp)
  105c8d:	e8 ae d2 ff ff       	call   102f40 <__sfvwrite_r>
  105c92:	44 8b 8d 88 fe ff ff 	mov    -0x178(%rbp),%r9d
  105c99:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  105ca0:	00 00 00 00 
  105ca4:	85 c0                	test   %eax,%eax
  105ca6:	8b 8d 70 fe ff ff    	mov    -0x190(%rbp),%ecx
  105cac:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  105cb3:	00 00 00 
  105cb6:	44 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%r8d
  105cbd:	44 8b 9d 64 fe ff ff 	mov    -0x19c(%rbp),%r11d
  105cc4:	0f 85 66 f1 ff ff    	jne    104e30 <_vfiprintf_r+0x4e0>
  105cca:	80 bd bd fe ff ff 00 	cmpb   $0x0,-0x143(%rbp)
  105cd1:	0f 85 87 f6 ff ff    	jne    10535e <_vfiprintf_r+0xa0e>
  105cd7:	e9 6c ff ff ff       	jmp    105c48 <_vfiprintf_r+0x12f8>
  105cdc:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  105ce3:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  105cea:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  105cf1:	44 89 85 90 fe ff ff 	mov    %r8d,-0x170(%rbp)
  105cf8:	e8 43 d2 ff ff       	call   102f40 <__sfvwrite_r>
  105cfd:	44 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%r8d
  105d04:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  105d0b:	00 00 00 00 
  105d0f:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  105d16:	00 00 00 
  105d19:	85 c0                	test   %eax,%eax
  105d1b:	0f 85 0f f1 ff ff    	jne    104e30 <_vfiprintf_r+0x4e0>
  105d21:	45 39 e8             	cmp    %r13d,%r8d
  105d24:	45 0f 4d e8          	cmovge %r8d,%r13d
  105d28:	44 01 ad 8c fe ff ff 	add    %r13d,-0x174(%rbp)
  105d2f:	e9 07 f0 ff ff       	jmp    104d3b <_vfiprintf_r+0x3eb>
  105d34:	4c 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%r9
  105d3b:	44 89 e9             	mov    %r13d,%ecx
  105d3e:	45 89 f0             	mov    %r14d,%r8d
  105d41:	4d 89 fa             	mov    %r15,%r10
  105d44:	be 48 03 12 00       	mov    $0x120348,%esi
  105d49:	41 8b 11             	mov    (%r9),%edx
  105d4c:	f6 c1 20             	test   $0x20,%cl
  105d4f:	0f 84 c6 00 00 00    	je     105e1b <_vfiprintf_r+0x14cb>
  105d55:	83 fa 2f             	cmp    $0x2f,%edx
  105d58:	0f 87 cd 02 00 00    	ja     10602b <_vfiprintf_r+0x16db>
  105d5e:	89 d7                	mov    %edx,%edi
  105d60:	83 c2 08             	add    $0x8,%edx
  105d63:	49 03 79 10          	add    0x10(%r9),%rdi
  105d67:	41 89 11             	mov    %edx,(%r9)
  105d6a:	48 8b 17             	mov    (%rdi),%rdx
  105d6d:	48 85 d2             	test   %rdx,%rdx
  105d70:	41 0f 95 c1          	setne  %r9b
  105d74:	44 89 cf             	mov    %r9d,%edi
  105d77:	f6 c1 01             	test   $0x1,%cl
  105d7a:	74 09                	je     105d85 <_vfiprintf_r+0x1435>
  105d7c:	45 84 c9             	test   %r9b,%r9b
  105d7f:	0f 85 be 02 00 00    	jne    106043 <_vfiprintf_r+0x16f3>
  105d85:	89 c8                	mov    %ecx,%eax
  105d87:	c6 85 bd fe ff ff 00 	movb   $0x0,-0x143(%rbp)
  105d8e:	80 e4 fb             	and    $0xfb,%ah
  105d91:	83 fb ff             	cmp    $0xffffffff,%ebx
  105d94:	0f 85 2e f5 ff ff    	jne    1052c8 <_vfiprintf_r+0x978>
  105d9a:	41 89 c1             	mov    %eax,%r9d
  105d9d:	89 c1                	mov    %eax,%ecx
  105d9f:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
  105da4:	41 83 e1 02          	and    $0x2,%r9d
  105da8:	4c 8d ad 44 ff ff ff 	lea    -0xbc(%rbp),%r13
  105daf:	4d 89 ee             	mov    %r13,%r14
  105db2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  105db8:	48 89 d0             	mov    %rdx,%rax
  105dbb:	49 83 ee 01          	sub    $0x1,%r14
  105dbf:	83 e0 0f             	and    $0xf,%eax
  105dc2:	48 c1 ea 04          	shr    $0x4,%rdx
  105dc6:	0f b6 04 06          	movzbl (%rsi,%rax,1),%eax
  105dca:	41 88 06             	mov    %al,(%r14)
  105dcd:	75 e9                	jne    105db8 <_vfiprintf_r+0x1468>
  105dcf:	4d 29 f5             	sub    %r14,%r13
  105dd2:	44 39 eb             	cmp    %r13d,%ebx
  105dd5:	45 89 eb             	mov    %r13d,%r11d
  105dd8:	44 0f 4d eb          	cmovge %ebx,%r13d
  105ddc:	e9 c5 fc ff ff       	jmp    105aa6 <_vfiprintf_r+0x1156>
  105de1:	45 89 f0             	mov    %r14d,%r8d
  105de4:	4d 89 fa             	mov    %r15,%r10
  105de7:	e9 b3 f3 ff ff       	jmp    10519f <_vfiprintf_r+0x84f>
  105dec:	44 89 e9             	mov    %r13d,%ecx
  105def:	45 89 f0             	mov    %r14d,%r8d
  105df2:	4d 89 fa             	mov    %r15,%r10
  105df5:	e9 c3 f1 ff ff       	jmp    104fbd <_vfiprintf_r+0x66d>
  105dfa:	4c 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%r9
  105e01:	44 89 e9             	mov    %r13d,%ecx
  105e04:	45 89 f0             	mov    %r14d,%r8d
  105e07:	4d 89 fa             	mov    %r15,%r10
  105e0a:	be 59 03 12 00       	mov    $0x120359,%esi
  105e0f:	41 8b 11             	mov    (%r9),%edx
  105e12:	f6 c1 20             	test   $0x20,%cl
  105e15:	0f 85 3a ff ff ff    	jne    105d55 <_vfiprintf_r+0x1405>
  105e1b:	f6 c1 10             	test   $0x10,%cl
  105e1e:	0f 84 49 02 00 00    	je     10606d <_vfiprintf_r+0x171d>
  105e24:	83 fa 2f             	cmp    $0x2f,%edx
  105e27:	0f 87 fe 01 00 00    	ja     10602b <_vfiprintf_r+0x16db>
  105e2d:	4c 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%r9
  105e34:	89 d7                	mov    %edx,%edi
  105e36:	83 c2 08             	add    $0x8,%edx
  105e39:	41 89 11             	mov    %edx,(%r9)
  105e3c:	49 03 79 10          	add    0x10(%r9),%rdi
  105e40:	e9 25 ff ff ff       	jmp    105d6a <_vfiprintf_r+0x141a>
  105e45:	41 0f b6 14 24       	movzbl (%r12),%edx
  105e4a:	e9 9b f2 ff ff       	jmp    1050ea <_vfiprintf_r+0x79a>
  105e4f:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  105e56:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  105e5d:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  105e64:	44 89 9d 70 fe ff ff 	mov    %r11d,-0x190(%rbp)
  105e6b:	44 89 85 88 fe ff ff 	mov    %r8d,-0x178(%rbp)
  105e72:	89 8d 90 fe ff ff    	mov    %ecx,-0x170(%rbp)
  105e78:	e8 c3 d0 ff ff       	call   102f40 <__sfvwrite_r>
  105e7d:	8b 8d 90 fe ff ff    	mov    -0x170(%rbp),%ecx
  105e83:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  105e8a:	00 00 00 00 
  105e8e:	85 c0                	test   %eax,%eax
  105e90:	44 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%r8d
  105e97:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  105e9e:	00 00 00 
  105ea1:	44 8b 9d 70 fe ff ff 	mov    -0x190(%rbp),%r11d
  105ea8:	0f 85 82 ef ff ff    	jne    104e30 <_vfiprintf_r+0x4e0>
  105eae:	44 29 db             	sub    %r11d,%ebx
  105eb1:	85 db                	test   %ebx,%ebx
  105eb3:	0f 8e 08 f7 ff ff    	jle    1055c1 <_vfiprintf_r+0xc71>
  105eb9:	bf 01 00 00 00       	mov    $0x1,%edi
  105ebe:	31 d2                	xor    %edx,%edx
  105ec0:	4c 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%r10
  105ec7:	31 c0                	xor    %eax,%eax
  105ec9:	e9 2a f6 ff ff       	jmp    1054f8 <_vfiprintf_r+0xba8>
  105ece:	44 89 e9             	mov    %r13d,%ecx
  105ed1:	80 e5 fb             	and    $0xfb,%ch
  105ed4:	4c 8d ad 44 ff ff ff 	lea    -0xbc(%rbp),%r13
  105edb:	4d 89 ee             	mov    %r13,%r14
  105ede:	66 90                	xchg   %ax,%ax
  105ee0:	89 c2                	mov    %eax,%edx
  105ee2:	4c 89 f6             	mov    %r14,%rsi
  105ee5:	49 83 ee 01          	sub    $0x1,%r14
  105ee9:	83 e2 07             	and    $0x7,%edx
  105eec:	83 c2 30             	add    $0x30,%edx
  105eef:	48 c1 e8 03          	shr    $0x3,%rax
  105ef3:	41 88 16             	mov    %dl,(%r14)
  105ef6:	75 e8                	jne    105ee0 <_vfiprintf_r+0x1590>
  105ef8:	80 fa 30             	cmp    $0x30,%dl
  105efb:	74 3c                	je     105f39 <_vfiprintf_r+0x15e9>
  105efd:	f6 c1 01             	test   $0x1,%cl
  105f00:	74 37                	je     105f39 <_vfiprintf_r+0x15e9>
  105f02:	48 83 ee 02          	sub    $0x2,%rsi
  105f06:	41 c6 46 ff 30       	movb   $0x30,-0x1(%r14)
  105f0b:	49 29 f5             	sub    %rsi,%r13
  105f0e:	49 89 f6             	mov    %rsi,%r14
  105f11:	44 39 eb             	cmp    %r13d,%ebx
  105f14:	45 89 eb             	mov    %r13d,%r11d
  105f17:	44 0f 4d eb          	cmovge %ebx,%r13d
  105f1b:	45 31 c9             	xor    %r9d,%r9d
  105f1e:	e9 3d ec ff ff       	jmp    104b60 <_vfiprintf_r+0x210>
  105f23:	c6 85 43 ff ff ff 30 	movb   $0x30,-0xbd(%rbp)
  105f2a:	45 31 c9             	xor    %r9d,%r9d
  105f2d:	4c 8d b5 43 ff ff ff 	lea    -0xbd(%rbp),%r14
  105f34:	e9 68 fb ff ff       	jmp    105aa1 <_vfiprintf_r+0x1151>
  105f39:	4d 29 f5             	sub    %r14,%r13
  105f3c:	44 39 eb             	cmp    %r13d,%ebx
  105f3f:	45 89 eb             	mov    %r13d,%r11d
  105f42:	44 0f 4d eb          	cmovge %ebx,%r13d
  105f46:	45 31 c9             	xor    %r9d,%r9d
  105f49:	e9 12 ec ff ff       	jmp    104b60 <_vfiprintf_r+0x210>
  105f4e:	89 c8                	mov    %ecx,%eax
  105f50:	48 f7 de             	neg    %rsi
  105f53:	c6 85 bd fe ff ff 2d 	movb   $0x2d,-0x143(%rbp)
  105f5a:	24 7f                	and    $0x7f,%al
  105f5c:	83 fb ff             	cmp    $0xffffffff,%ebx
  105f5f:	0f 45 c8             	cmovne %eax,%ecx
  105f62:	48 83 fe 09          	cmp    $0x9,%rsi
  105f66:	0f 86 ce f2 ff ff    	jbe    10523a <_vfiprintf_r+0x8ea>
  105f6c:	41 89 ce             	mov    %ecx,%r14d
  105f6f:	4c 8d ad 44 ff ff ff 	lea    -0xbc(%rbp),%r13
  105f76:	44 89 85 88 fe ff ff 	mov    %r8d,-0x178(%rbp)
  105f7d:	45 31 db             	xor    %r11d,%r11d
  105f80:	89 8d 90 fe ff ff    	mov    %ecx,-0x170(%rbp)
  105f86:	4c 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%r8
  105f8d:	41 81 e6 00 04 00 00 	and    $0x400,%r14d
  105f94:	4c 89 ef             	mov    %r13,%rdi
  105f97:	49 b9 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%r9
  105f9e:	cc cc cc 
  105fa1:	eb 1b                	jmp    105fbe <_vfiprintf_r+0x166e>
  105fa3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  105fa8:	48 89 f0             	mov    %rsi,%rax
  105fab:	49 f7 e1             	mul    %r9
  105fae:	48 c1 ea 03          	shr    $0x3,%rdx
  105fb2:	48 83 fe 09          	cmp    $0x9,%rsi
  105fb6:	76 4a                	jbe    106002 <_vfiprintf_r+0x16b2>
  105fb8:	48 89 d6             	mov    %rdx,%rsi
  105fbb:	48 89 cf             	mov    %rcx,%rdi
  105fbe:	48 89 f0             	mov    %rsi,%rax
  105fc1:	48 8d 4f ff          	lea    -0x1(%rdi),%rcx
  105fc5:	41 83 c3 01          	add    $0x1,%r11d
  105fc9:	49 f7 e1             	mul    %r9
  105fcc:	48 89 f0             	mov    %rsi,%rax
  105fcf:	48 c1 ea 03          	shr    $0x3,%rdx
  105fd3:	49 89 d7             	mov    %rdx,%r15
  105fd6:	48 8d 14 92          	lea    (%rdx,%rdx,4),%rdx
  105fda:	48 01 d2             	add    %rdx,%rdx
  105fdd:	48 29 d0             	sub    %rdx,%rax
  105fe0:	83 c0 30             	add    $0x30,%eax
  105fe3:	88 47 ff             	mov    %al,-0x1(%rdi)
  105fe6:	45 85 f6             	test   %r14d,%r14d
  105fe9:	74 bd                	je     105fa8 <_vfiprintf_r+0x1658>
  105feb:	41 0f be 00          	movsbl (%r8),%eax
  105fef:	3c 7f                	cmp    $0x7f,%al
  105ff1:	74 b5                	je     105fa8 <_vfiprintf_r+0x1658>
  105ff3:	44 39 d8             	cmp    %r11d,%eax
  105ff6:	75 b0                	jne    105fa8 <_vfiprintf_r+0x1658>
  105ff8:	48 83 fe 09          	cmp    $0x9,%rsi
  105ffc:	0f 87 50 02 00 00    	ja     106252 <_vfiprintf_r+0x1902>
  106002:	49 89 ce             	mov    %rcx,%r14
  106005:	45 89 eb             	mov    %r13d,%r11d
  106008:	4c 89 85 78 fe ff ff 	mov    %r8,-0x188(%rbp)
  10600f:	8b 8d 90 fe ff ff    	mov    -0x170(%rbp),%ecx
  106015:	44 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%r8d
  10601c:	0f b6 85 bd fe ff ff 	movzbl -0x143(%rbp),%eax
  106023:	45 29 f3             	sub    %r14d,%r11d
  106026:	e9 fa ef ff ff       	jmp    105025 <_vfiprintf_r+0x6d5>
  10602b:	4c 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%r9
  106032:	49 8b 79 08          	mov    0x8(%r9),%rdi
  106036:	48 8d 57 08          	lea    0x8(%rdi),%rdx
  10603a:	49 89 51 08          	mov    %rdx,0x8(%r9)
  10603e:	e9 27 fd ff ff       	jmp    105d6a <_vfiprintf_r+0x141a>
  106043:	c6 85 be fe ff ff 30 	movb   $0x30,-0x142(%rbp)
  10604a:	88 85 bf fe ff ff    	mov    %al,-0x141(%rbp)
  106050:	c6 85 bd fe ff ff 00 	movb   $0x0,-0x143(%rbp)
  106057:	83 fb ff             	cmp    $0xffffffff,%ebx
  10605a:	0f 85 dd 01 00 00    	jne    10623d <_vfiprintf_r+0x18ed>
  106060:	89 c8                	mov    %ecx,%eax
  106062:	80 e4 fb             	and    $0xfb,%ah
  106065:	83 c8 02             	or     $0x2,%eax
  106068:	e9 2d fd ff ff       	jmp    105d9a <_vfiprintf_r+0x144a>
  10606d:	f6 c1 40             	test   $0x40,%cl
  106070:	0f 84 f7 00 00 00    	je     10616d <_vfiprintf_r+0x181d>
  106076:	83 fa 2f             	cmp    $0x2f,%edx
  106079:	0f 87 01 03 00 00    	ja     106380 <_vfiprintf_r+0x1a30>
  10607f:	4c 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%r9
  106086:	89 d7                	mov    %edx,%edi
  106088:	83 c2 08             	add    $0x8,%edx
  10608b:	41 89 11             	mov    %edx,(%r9)
  10608e:	49 03 79 10          	add    0x10(%r9),%rdi
  106092:	0f b7 17             	movzwl (%rdi),%edx
  106095:	e9 d3 fc ff ff       	jmp    105d6d <_vfiprintf_r+0x141d>
  10609a:	41 0f be 44 24 01    	movsbl 0x1(%r12),%eax
  1060a0:	41 83 cd 20          	or     $0x20,%r13d
  1060a4:	49 83 c4 01          	add    $0x1,%r12
  1060a8:	e9 2f ea ff ff       	jmp    104adc <_vfiprintf_r+0x18c>
  1060ad:	41 0f be 44 24 01    	movsbl 0x1(%r12),%eax
  1060b3:	41 81 cd 00 02 00 00 	or     $0x200,%r13d
  1060ba:	49 83 c4 01          	add    $0x1,%r12
  1060be:	e9 19 ea ff ff       	jmp    104adc <_vfiprintf_r+0x18c>
  1060c3:	4c 89 f7             	mov    %r14,%rdi
  1060c6:	31 db                	xor    %ebx,%ebx
  1060c8:	e8 d3 e6 ff ff       	call   1047a0 <strlen>
  1060cd:	8b 8d 90 fe ff ff    	mov    -0x170(%rbp),%ecx
  1060d3:	44 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%r8d
  1060da:	41 89 c3             	mov    %eax,%r11d
  1060dd:	4c 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%r10
  1060e4:	0f b6 85 bd fe ff ff 	movzbl -0x143(%rbp),%eax
  1060eb:	e9 35 ef ff ff       	jmp    105025 <_vfiprintf_r+0x6d5>
  1060f0:	48 83 bd d0 fe ff ff 	cmpq   $0x0,-0x130(%rbp)
  1060f7:	00 
  1060f8:	0f 85 29 03 00 00    	jne    106427 <_vfiprintf_r+0x1ad7>
  1060fe:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  106105:	00 00 00 
  106108:	e9 23 ed ff ff       	jmp    104e30 <_vfiprintf_r+0x4e0>
  10610d:	f6 c5 02             	test   $0x2,%ch
  106110:	0f 84 22 02 00 00    	je     106338 <_vfiprintf_r+0x19e8>
  106116:	83 f8 2f             	cmp    $0x2f,%eax
  106119:	0f 87 2e 04 00 00    	ja     10654d <_vfiprintf_r+0x1bfd>
  10611f:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  106126:	89 c2                	mov    %eax,%edx
  106128:	83 c0 08             	add    $0x8,%eax
  10612b:	89 07                	mov    %eax,(%rdi)
  10612d:	48 03 57 10          	add    0x10(%rdi),%rdx
  106131:	48 0f be 32          	movsbq (%rdx),%rsi
  106135:	48 89 f0             	mov    %rsi,%rax
  106138:	e9 e1 f0 ff ff       	jmp    10521e <_vfiprintf_r+0x8ce>
  10613d:	41 f7 c5 00 02 00 00 	test   $0x200,%r13d
  106144:	0f 84 14 02 00 00    	je     10635e <_vfiprintf_r+0x1a0e>
  10614a:	83 f8 2f             	cmp    $0x2f,%eax
  10614d:	0f 87 ca 03 00 00    	ja     10651d <_vfiprintf_r+0x1bcd>
  106153:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  10615a:	89 c2                	mov    %eax,%edx
  10615c:	83 c0 08             	add    $0x8,%eax
  10615f:	89 07                	mov    %eax,(%rdi)
  106161:	48 03 57 10          	add    0x10(%rdi),%rdx
  106165:	0f b6 02             	movzbl (%rdx),%eax
  106168:	e9 f6 f8 ff ff       	jmp    105a63 <_vfiprintf_r+0x1113>
  10616d:	f6 c5 02             	test   $0x2,%ch
  106170:	0f 84 9f 01 00 00    	je     106315 <_vfiprintf_r+0x19c5>
  106176:	83 fa 2f             	cmp    $0x2f,%edx
  106179:	0f 87 e6 03 00 00    	ja     106565 <_vfiprintf_r+0x1c15>
  10617f:	4c 8b 9d 98 fe ff ff 	mov    -0x168(%rbp),%r11
  106186:	89 d7                	mov    %edx,%edi
  106188:	83 c2 08             	add    $0x8,%edx
  10618b:	41 89 13             	mov    %edx,(%r11)
  10618e:	49 03 7b 10          	add    0x10(%r11),%rdi
  106192:	0f b6 17             	movzbl (%rdi),%edx
  106195:	e9 d3 fb ff ff       	jmp    105d6d <_vfiprintf_r+0x141d>
  10619a:	f6 c5 02             	test   $0x2,%ch
  10619d:	0f 84 40 01 00 00    	je     1062e3 <_vfiprintf_r+0x1993>
  1061a3:	83 f8 2f             	cmp    $0x2f,%eax
  1061a6:	0f 87 89 03 00 00    	ja     106535 <_vfiprintf_r+0x1be5>
  1061ac:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1061b3:	89 c2                	mov    %eax,%edx
  1061b5:	83 c0 08             	add    $0x8,%eax
  1061b8:	89 07                	mov    %eax,(%rdi)
  1061ba:	48 03 57 10          	add    0x10(%rdi),%rdx
  1061be:	0f b6 32             	movzbl (%rdx),%esi
  1061c1:	c6 85 bd fe ff ff 00 	movb   $0x0,-0x143(%rbp)
  1061c8:	e9 5a f0 ff ff       	jmp    105227 <_vfiprintf_r+0x8d7>
  1061cd:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  1061d4:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  1061d8:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1061dc:	48 89 46 08          	mov    %rax,0x8(%rsi)
  1061e0:	e9 7b f8 ff ff       	jmp    105a60 <_vfiprintf_r+0x1110>
  1061e5:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1061ec:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  1061f0:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1061f4:	48 89 47 08          	mov    %rax,0x8(%rdi)
  1061f8:	e9 1b f0 ff ff       	jmp    105218 <_vfiprintf_r+0x8c8>
  1061fd:	41 f6 c5 40          	test   $0x40,%r13b
  106201:	0f 85 af 00 00 00    	jne    1062b6 <_vfiprintf_r+0x1966>
  106207:	80 e5 02             	and    $0x2,%ch
  10620a:	0f 84 b2 02 00 00    	je     1064c2 <_vfiprintf_r+0x1b72>
  106210:	83 f8 2f             	cmp    $0x2f,%eax
  106213:	0f 87 b0 03 00 00    	ja     1065c9 <_vfiprintf_r+0x1c79>
  106219:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  106220:	89 c2                	mov    %eax,%edx
  106222:	83 c0 08             	add    $0x8,%eax
  106225:	89 07                	mov    %eax,(%rdi)
  106227:	48 03 57 10          	add    0x10(%rdi),%rdx
  10622b:	48 8b 02             	mov    (%rdx),%rax
  10622e:	0f b6 bd 8c fe ff ff 	movzbl -0x174(%rbp),%edi
  106235:	40 88 38             	mov    %dil,(%rax)
  106238:	e9 f3 e7 ff ff       	jmp    104a30 <_vfiprintf_r+0xe0>
  10623d:	81 e1 7f fb ff ff    	and    $0xfffffb7f,%ecx
  106243:	83 c9 02             	or     $0x2,%ecx
  106246:	41 89 c9             	mov    %ecx,%r9d
  106249:	41 83 e1 02          	and    $0x2,%r9d
  10624d:	e9 56 fb ff ff       	jmp    105da8 <_vfiprintf_r+0x1458>
  106252:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  106259:	48 8b b5 58 fe ff ff 	mov    -0x1a8(%rbp),%rsi
  106260:	4c 89 95 68 fe ff ff 	mov    %r10,-0x198(%rbp)
  106267:	4c 89 85 70 fe ff ff 	mov    %r8,-0x190(%rbp)
  10626e:	48 29 c1             	sub    %rax,%rcx
  106271:	48 89 c2             	mov    %rax,%rdx
  106274:	48 89 cf             	mov    %rcx,%rdi
  106277:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
  10627e:	e8 fd 6a 00 00       	call   10cd80 <strncpy>
  106283:	4c 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%r8
  10628a:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  106291:	4c 89 fa             	mov    %r15,%rdx
  106294:	4c 8b 95 68 fe ff ff 	mov    -0x198(%rbp),%r10
  10629b:	49 b9 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%r9
  1062a2:	cc cc cc 
  1062a5:	41 80 78 01 01       	cmpb   $0x1,0x1(%r8)
  1062aa:	49 83 d8 ff          	sbb    $0xffffffffffffffff,%r8
  1062ae:	45 31 db             	xor    %r11d,%r11d
  1062b1:	e9 02 fd ff ff       	jmp    105fb8 <_vfiprintf_r+0x1668>
  1062b6:	83 f8 2f             	cmp    $0x2f,%eax
  1062b9:	0f 87 2e 02 00 00    	ja     1064ed <_vfiprintf_r+0x1b9d>
  1062bf:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1062c6:	89 c2                	mov    %eax,%edx
  1062c8:	83 c0 08             	add    $0x8,%eax
  1062cb:	89 07                	mov    %eax,(%rdi)
  1062cd:	48 03 57 10          	add    0x10(%rdi),%rdx
  1062d1:	48 8b 02             	mov    (%rdx),%rax
  1062d4:	0f b7 bd 8c fe ff ff 	movzwl -0x174(%rbp),%edi
  1062db:	66 89 38             	mov    %di,(%rax)
  1062de:	e9 4d e7 ff ff       	jmp    104a30 <_vfiprintf_r+0xe0>
  1062e3:	83 f8 2f             	cmp    $0x2f,%eax
  1062e6:	0f 87 19 02 00 00    	ja     106505 <_vfiprintf_r+0x1bb5>
  1062ec:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1062f3:	89 c2                	mov    %eax,%edx
  1062f5:	83 c0 08             	add    $0x8,%eax
  1062f8:	89 07                	mov    %eax,(%rdi)
  1062fa:	48 03 57 10          	add    0x10(%rdi),%rdx
  1062fe:	c6 85 bd fe ff ff 00 	movb   $0x0,-0x143(%rbp)
  106305:	8b 32                	mov    (%rdx),%esi
  106307:	83 fb ff             	cmp    $0xffffffff,%ebx
  10630a:	0f 85 ee ec ff ff    	jne    104ffe <_vfiprintf_r+0x6ae>
  106310:	e9 1b ef ff ff       	jmp    105230 <_vfiprintf_r+0x8e0>
  106315:	83 fa 2f             	cmp    $0x2f,%edx
  106318:	0f 87 5f 02 00 00    	ja     10657d <_vfiprintf_r+0x1c2d>
  10631e:	4c 8b 9d 98 fe ff ff 	mov    -0x168(%rbp),%r11
  106325:	89 d7                	mov    %edx,%edi
  106327:	83 c2 08             	add    $0x8,%edx
  10632a:	49 03 7b 10          	add    0x10(%r11),%rdi
  10632e:	41 89 13             	mov    %edx,(%r11)
  106331:	8b 17                	mov    (%rdi),%edx
  106333:	e9 35 fa ff ff       	jmp    105d6d <_vfiprintf_r+0x141d>
  106338:	83 f8 2f             	cmp    $0x2f,%eax
  10633b:	0f 87 31 01 00 00    	ja     106472 <_vfiprintf_r+0x1b22>
  106341:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  106348:	89 c2                	mov    %eax,%edx
  10634a:	83 c0 08             	add    $0x8,%eax
  10634d:	89 07                	mov    %eax,(%rdi)
  10634f:	48 03 57 10          	add    0x10(%rdi),%rdx
  106353:	48 63 32             	movslq (%rdx),%rsi
  106356:	48 89 f0             	mov    %rsi,%rax
  106359:	e9 c0 ee ff ff       	jmp    10521e <_vfiprintf_r+0x8ce>
  10635e:	83 f8 2f             	cmp    $0x2f,%eax
  106361:	0f 87 30 02 00 00    	ja     106597 <_vfiprintf_r+0x1c47>
  106367:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  10636e:	89 c2                	mov    %eax,%edx
  106370:	83 c0 08             	add    $0x8,%eax
  106373:	48 03 57 10          	add    0x10(%rdi),%rdx
  106377:	89 07                	mov    %eax,(%rdi)
  106379:	8b 02                	mov    (%rdx),%eax
  10637b:	e9 e3 f6 ff ff       	jmp    105a63 <_vfiprintf_r+0x1113>
  106380:	4c 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%r9
  106387:	49 8b 79 08          	mov    0x8(%r9),%rdi
  10638b:	48 8d 57 08          	lea    0x8(%rdi),%rdx
  10638f:	49 89 51 08          	mov    %rdx,0x8(%r9)
  106393:	e9 fa fc ff ff       	jmp    106092 <_vfiprintf_r+0x1742>
  106398:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  10639f:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  1063a3:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1063a7:	48 89 46 08          	mov    %rax,0x8(%rsi)
  1063ab:	e9 2b f7 ff ff       	jmp    105adb <_vfiprintf_r+0x118b>
  1063b0:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  1063b7:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  1063bb:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1063bf:	48 89 46 08          	mov    %rax,0x8(%rsi)
  1063c3:	e9 78 f7 ff ff       	jmp    105b40 <_vfiprintf_r+0x11f0>
  1063c8:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  1063cf:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  1063d3:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1063d7:	48 89 46 08          	mov    %rax,0x8(%rsi)
  1063db:	e9 24 f7 ff ff       	jmp    105b04 <_vfiprintf_r+0x11b4>
  1063e0:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1063e7:	89 c2                	mov    %eax,%edx
  1063e9:	83 c0 08             	add    $0x8,%eax
  1063ec:	89 07                	mov    %eax,(%rdi)
  1063ee:	48 03 57 10          	add    0x10(%rdi),%rdx
  1063f2:	e9 29 ef ff ff       	jmp    105320 <_vfiprintf_r+0x9d0>
  1063f7:	48 8b be a0 00 00 00 	mov    0xa0(%rsi),%rdi
  1063fe:	4c 89 9d 90 fe ff ff 	mov    %r11,-0x170(%rbp)
  106405:	e8 b5 b9 00 00       	call   111dbf <__retarget_lock_release_recursive>
  10640a:	4c 8b 9d 90 fe ff ff 	mov    -0x170(%rbp),%r11
  106411:	e9 ad e9 ff ff       	jmp    104dc3 <_vfiprintf_r+0x473>
  106416:	41 89 db             	mov    %ebx,%r11d
  106419:	0f b6 85 bd fe ff ff 	movzbl -0x143(%rbp),%eax
  106420:	31 db                	xor    %ebx,%ebx
  106422:	e9 fe eb ff ff       	jmp    105025 <_vfiprintf_r+0x6d5>
  106427:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  10642e:	48 8b bd a0 fe ff ff 	mov    -0x160(%rbp),%rdi
  106435:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10643c:	e8 ff ca ff ff       	call   102f40 <__sfvwrite_r>
  106441:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  106448:	00 00 00 00 
  10644c:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  106453:	00 00 00 
  106456:	85 c0                	test   %eax,%eax
  106458:	0f 84 a0 fc ff ff    	je     1060fe <_vfiprintf_r+0x17ae>
  10645e:	e9 cd e9 ff ff       	jmp    104e30 <_vfiprintf_r+0x4e0>
  106463:	8d 71 01             	lea    0x1(%rcx),%esi
  106466:	e9 21 f2 ff ff       	jmp    10568c <_vfiprintf_r+0xd3c>
  10646b:	89 fe                	mov    %edi,%esi
  10646d:	e9 44 f0 ff ff       	jmp    1054b6 <_vfiprintf_r+0xb66>
  106472:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  106479:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  10647d:	48 8d 42 08          	lea    0x8(%rdx),%rax
  106481:	48 89 46 08          	mov    %rax,0x8(%rsi)
  106485:	e9 c9 fe ff ff       	jmp    106353 <_vfiprintf_r+0x1a03>
  10648a:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  106491:	f6 80 b0 00 00 00 01 	testb  $0x1,0xb0(%rax)
  106498:	75 19                	jne    1064b3 <_vfiprintf_r+0x1b63>
  10649a:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  1064a1:	f6 40 11 02          	testb  $0x2,0x11(%rax)
  1064a5:	75 0c                	jne    1064b3 <_vfiprintf_r+0x1b63>
  1064a7:	48 8b b8 a0 00 00 00 	mov    0xa0(%rax),%rdi
  1064ae:	e8 0c b9 00 00       	call   111dbf <__retarget_lock_release_recursive>
  1064b3:	c7 85 8c fe ff ff ff 	movl   $0xffffffff,-0x174(%rbp)
  1064ba:	ff ff ff 
  1064bd:	e9 8a e9 ff ff       	jmp    104e4c <_vfiprintf_r+0x4fc>
  1064c2:	83 f8 2f             	cmp    $0x2f,%eax
  1064c5:	0f 87 e6 00 00 00    	ja     1065b1 <_vfiprintf_r+0x1c61>
  1064cb:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1064d2:	89 c2                	mov    %eax,%edx
  1064d4:	83 c0 08             	add    $0x8,%eax
  1064d7:	89 07                	mov    %eax,(%rdi)
  1064d9:	48 03 57 10          	add    0x10(%rdi),%rdx
  1064dd:	48 8b 02             	mov    (%rdx),%rax
  1064e0:	8b bd 8c fe ff ff    	mov    -0x174(%rbp),%edi
  1064e6:	89 38                	mov    %edi,(%rax)
  1064e8:	e9 43 e5 ff ff       	jmp    104a30 <_vfiprintf_r+0xe0>
  1064ed:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  1064f4:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  1064f8:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1064fc:	48 89 46 08          	mov    %rax,0x8(%rsi)
  106500:	e9 cc fd ff ff       	jmp    1062d1 <_vfiprintf_r+0x1981>
  106505:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  10650c:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  106510:	48 8d 42 08          	lea    0x8(%rdx),%rax
  106514:	48 89 46 08          	mov    %rax,0x8(%rsi)
  106518:	e9 e1 fd ff ff       	jmp    1062fe <_vfiprintf_r+0x19ae>
  10651d:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  106524:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  106528:	48 8d 42 08          	lea    0x8(%rdx),%rax
  10652c:	48 89 46 08          	mov    %rax,0x8(%rsi)
  106530:	e9 30 fc ff ff       	jmp    106165 <_vfiprintf_r+0x1815>
  106535:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  10653c:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  106540:	48 8d 42 08          	lea    0x8(%rdx),%rax
  106544:	48 89 46 08          	mov    %rax,0x8(%rsi)
  106548:	e9 71 fc ff ff       	jmp    1061be <_vfiprintf_r+0x186e>
  10654d:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  106554:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  106558:	48 8d 42 08          	lea    0x8(%rdx),%rax
  10655c:	48 89 46 08          	mov    %rax,0x8(%rsi)
  106560:	e9 cc fb ff ff       	jmp    106131 <_vfiprintf_r+0x17e1>
  106565:	4c 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%r9
  10656c:	49 8b 79 08          	mov    0x8(%r9),%rdi
  106570:	48 8d 57 08          	lea    0x8(%rdi),%rdx
  106574:	49 89 51 08          	mov    %rdx,0x8(%r9)
  106578:	e9 15 fc ff ff       	jmp    106192 <_vfiprintf_r+0x1842>
  10657d:	4c 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%r9
  106584:	49 8b 79 08          	mov    0x8(%r9),%rdi
  106588:	48 8d 57 08          	lea    0x8(%rdi),%rdx
  10658c:	49 89 51 08          	mov    %rdx,0x8(%r9)
  106590:	8b 17                	mov    (%rdi),%edx
  106592:	e9 d6 f7 ff ff       	jmp    105d6d <_vfiprintf_r+0x141d>
  106597:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  10659e:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  1065a2:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1065a6:	48 89 46 08          	mov    %rax,0x8(%rsi)
  1065aa:	8b 02                	mov    (%rdx),%eax
  1065ac:	e9 b2 f4 ff ff       	jmp    105a63 <_vfiprintf_r+0x1113>
  1065b1:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  1065b8:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  1065bc:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1065c0:	48 89 46 08          	mov    %rax,0x8(%rsi)
  1065c4:	e9 14 ff ff ff       	jmp    1064dd <_vfiprintf_r+0x1b8d>
  1065c9:	48 8b b5 98 fe ff ff 	mov    -0x168(%rbp),%rsi
  1065d0:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  1065d4:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1065d8:	48 89 46 08          	mov    %rax,0x8(%rsi)
  1065dc:	e9 4a fc ff ff       	jmp    10622b <_vfiprintf_r+0x18db>
  1065e1:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1065e8:	8b 17                	mov    (%rdi),%edx
  1065ea:	83 fa 2f             	cmp    $0x2f,%edx
  1065ed:	77 25                	ja     106614 <_vfiprintf_r+0x1cc4>
  1065ef:	89 d0                	mov    %edx,%eax
  1065f1:	83 c2 08             	add    $0x8,%edx
  1065f4:	48 03 47 10          	add    0x10(%rdi),%rax
  1065f8:	89 17                	mov    %edx,(%rdi)
  1065fa:	8b 18                	mov    (%rax),%ebx
  1065fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  106601:	85 db                	test   %ebx,%ebx
  106603:	0f 48 d8             	cmovs  %eax,%ebx
  106606:	41 0f be 44 24 01    	movsbl 0x1(%r12),%eax
  10660c:	49 89 f4             	mov    %rsi,%r12
  10660f:	e9 c8 e4 ff ff       	jmp    104adc <_vfiprintf_r+0x18c>
  106614:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  10661b:	48 8b 47 08          	mov    0x8(%rdi),%rax
  10661f:	48 8d 50 08          	lea    0x8(%rax),%rdx
  106623:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  106627:	eb d1                	jmp    1065fa <_vfiprintf_r+0x1caa>
  106629:	45 31 c9             	xor    %r9d,%r9d
  10662c:	e9 2f e5 ff ff       	jmp    104b60 <_vfiprintf_r+0x210>
  106631:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  106638:	00 00 00 
  10663b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000106640 <__sbprintf>:
  106640:	55                   	push   %rbp
  106641:	48 89 e5             	mov    %rsp,%rbp
  106644:	41 56                	push   %r14
  106646:	49 89 ce             	mov    %rcx,%r14
  106649:	41 55                	push   %r13
  10664b:	49 89 d5             	mov    %rdx,%r13
  10664e:	41 54                	push   %r12
  106650:	49 89 fc             	mov    %rdi,%r12
  106653:	48 8d bd c0 fb ff ff 	lea    -0x440(%rbp),%rdi
  10665a:	53                   	push   %rbx
  10665b:	48 89 f3             	mov    %rsi,%rbx
  10665e:	48 81 ec c0 04 00 00 	sub    $0x4c0,%rsp
  106665:	8b 86 b0 00 00 00    	mov    0xb0(%rsi),%eax
  10666b:	0f b7 56 10          	movzwl 0x10(%rsi),%edx
  10666f:	c7 85 2c fb ff ff 00 	movl   $0x400,-0x4d4(%rbp)
  106676:	04 00 00 
  106679:	c7 85 40 fb ff ff 00 	movl   $0x400,-0x4c0(%rbp)
  106680:	04 00 00 
  106683:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%rbp)
  106689:	0f b7 46 12          	movzwl 0x12(%rsi),%eax
  10668d:	81 e2 fd ff 00 00    	and    $0xfffd,%edx
  106693:	c7 85 48 fb ff ff 00 	movl   $0x0,-0x4b8(%rbp)
  10669a:	00 00 00 
  10669d:	c1 e0 10             	shl    $0x10,%eax
  1066a0:	09 d0                	or     %edx,%eax
  1066a2:	89 85 30 fb ff ff    	mov    %eax,-0x4d0(%rbp)
  1066a8:	48 8b 46 30          	mov    0x30(%rsi),%rax
  1066ac:	48 89 85 50 fb ff ff 	mov    %rax,-0x4b0(%rbp)
  1066b3:	48 8b 46 40          	mov    0x40(%rsi),%rax
  1066b7:	48 89 85 60 fb ff ff 	mov    %rax,-0x4a0(%rbp)
  1066be:	48 8d 85 e0 fb ff ff 	lea    -0x420(%rbp),%rax
  1066c5:	48 89 85 20 fb ff ff 	mov    %rax,-0x4e0(%rbp)
  1066cc:	48 89 85 38 fb ff ff 	mov    %rax,-0x4c8(%rbp)
  1066d3:	e8 b8 b6 00 00       	call   111d90 <__retarget_lock_init_recursive>
  1066d8:	4c 89 ea             	mov    %r13,%rdx
  1066db:	4c 89 f1             	mov    %r14,%rcx
  1066de:	4c 89 e7             	mov    %r12,%rdi
  1066e1:	48 8d b5 20 fb ff ff 	lea    -0x4e0(%rbp),%rsi
  1066e8:	e8 63 e2 ff ff       	call   104950 <_vfiprintf_r>
  1066ed:	41 89 c5             	mov    %eax,%r13d
  1066f0:	85 c0                	test   %eax,%eax
  1066f2:	78 1a                	js     10670e <__sbprintf+0xce>
  1066f4:	48 8d b5 20 fb ff ff 	lea    -0x4e0(%rbp),%rsi
  1066fb:	4c 89 e7             	mov    %r12,%rdi
  1066fe:	e8 9d 50 00 00       	call   10b7a0 <_fflush_r>
  106703:	85 c0                	test   %eax,%eax
  106705:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  10670a:	44 0f 45 e8          	cmovne %eax,%r13d
  10670e:	f6 85 30 fb ff ff 40 	testb  $0x40,-0x4d0(%rbp)
  106715:	74 05                	je     10671c <__sbprintf+0xdc>
  106717:	66 83 4b 10 40       	orw    $0x40,0x10(%rbx)
  10671c:	48 8b bd c0 fb ff ff 	mov    -0x440(%rbp),%rdi
  106723:	e8 89 b6 00 00       	call   111db1 <__retarget_lock_close_recursive>
  106728:	48 81 c4 c0 04 00 00 	add    $0x4c0,%rsp
  10672f:	44 89 e8             	mov    %r13d,%eax
  106732:	5b                   	pop    %rbx
  106733:	41 5c                	pop    %r12
  106735:	41 5d                	pop    %r13
  106737:	41 5e                	pop    %r14
  106739:	5d                   	pop    %rbp
  10673a:	c3                   	ret    
  10673b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000106740 <_vfprintf_r>:
  106740:	55                   	push   %rbp
  106741:	48 89 e5             	mov    %rsp,%rbp
  106744:	41 57                	push   %r15
  106746:	41 56                	push   %r14
  106748:	49 89 d6             	mov    %rdx,%r14
  10674b:	41 55                	push   %r13
  10674d:	41 54                	push   %r12
  10674f:	53                   	push   %rbx
  106750:	48 89 fb             	mov    %rdi,%rbx
  106753:	48 81 ec e8 01 00 00 	sub    $0x1e8,%rsp
  10675a:	48 89 bd 98 fe ff ff 	mov    %rdi,-0x168(%rbp)
  106761:	48 89 b5 90 fe ff ff 	mov    %rsi,-0x170(%rbp)
  106768:	48 89 8d 80 fe ff ff 	mov    %rcx,-0x180(%rbp)
  10676f:	e8 ec 57 00 00       	call   10bf60 <_localeconv_r>
  106774:	48 8b 00             	mov    (%rax),%rax
  106777:	48 89 c7             	mov    %rax,%rdi
  10677a:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  106781:	e8 1a e0 ff ff       	call   1047a0 <strlen>
  106786:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  10678d:	48 85 db             	test   %rbx,%rbx
  106790:	74 0d                	je     10679f <_vfprintf_r+0x5f>
  106792:	44 8b 4b 50          	mov    0x50(%rbx),%r9d
  106796:	45 85 c9             	test   %r9d,%r9d
  106799:	0f 84 a2 05 00 00    	je     106d41 <_vfprintf_r+0x601>
  10679f:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  1067a6:	0f b7 47 10          	movzwl 0x10(%rdi),%eax
  1067aa:	f6 87 b0 00 00 00 01 	testb  $0x1,0xb0(%rdi)
  1067b1:	75 09                	jne    1067bc <_vfprintf_r+0x7c>
  1067b3:	f6 c4 02             	test   $0x2,%ah
  1067b6:	0f 84 a9 18 00 00    	je     108065 <_vfprintf_r+0x1925>
  1067bc:	a8 08                	test   $0x8,%al
  1067be:	0f 84 5c 03 00 00    	je     106b20 <_vfprintf_r+0x3e0>
  1067c4:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  1067cb:	48 83 7f 18 00       	cmpq   $0x0,0x18(%rdi)
  1067d0:	0f 84 4a 03 00 00    	je     106b20 <_vfprintf_r+0x3e0>
  1067d6:	89 c2                	mov    %eax,%edx
  1067d8:	83 e2 1a             	and    $0x1a,%edx
  1067db:	66 83 fa 0a          	cmp    $0xa,%dx
  1067df:	0f 84 6c 03 00 00    	je     106b51 <_vfprintf_r+0x411>
  1067e5:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  1067ec:	48 c7 85 d0 fe ff ff 	movq   $0x0,-0x130(%rbp)
  1067f3:	00 00 00 00 
  1067f7:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
  1067fe:	48 89 c3             	mov    %rax,%rbx
  106801:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  106808:	00 00 00 
  10680b:	c7 85 58 fe ff ff 00 	movl   $0x0,-0x1a8(%rbp)
  106812:	00 00 00 
  106815:	48 c7 85 40 fe ff ff 	movq   $0x0,-0x1c0(%rbp)
  10681c:	00 00 00 00 
  106820:	48 c7 85 20 fe ff ff 	movq   $0x0,-0x1e0(%rbp)
  106827:	00 00 00 00 
  10682b:	c7 85 68 fe ff ff 00 	movl   $0x0,-0x198(%rbp)
  106832:	00 00 00 
  106835:	48 c7 85 08 fe ff ff 	movq   $0x0,-0x1f8(%rbp)
  10683c:	00 00 00 00 
  106840:	48 c7 85 18 fe ff ff 	movq   $0x0,-0x1e8(%rbp)
  106847:	00 00 00 00 
  10684b:	48 c7 85 10 fe ff ff 	movq   $0x0,-0x1f0(%rbp)
  106852:	00 00 00 00 
  106856:	c7 85 6c fe ff ff 00 	movl   $0x0,-0x194(%rbp)
  10685d:	00 00 00 
  106860:	41 0f b6 06          	movzbl (%r14),%eax
  106864:	4d 89 f4             	mov    %r14,%r12
  106867:	84 c0                	test   %al,%al
  106869:	74 5f                	je     1068ca <_vfprintf_r+0x18a>
  10686b:	3c 25                	cmp    $0x25,%al
  10686d:	74 5b                	je     1068ca <_vfprintf_r+0x18a>
  10686f:	90                   	nop
  106870:	4d 89 e5             	mov    %r12,%r13
  106873:	41 0f b6 44 24 01    	movzbl 0x1(%r12),%eax
  106879:	49 83 c4 01          	add    $0x1,%r12
  10687d:	84 c0                	test   %al,%al
  10687f:	74 04                	je     106885 <_vfprintf_r+0x145>
  106881:	3c 25                	cmp    $0x25,%al
  106883:	75 eb                	jne    106870 <_vfprintf_r+0x130>
  106885:	4d 89 e7             	mov    %r12,%r15
  106888:	4d 29 f7             	sub    %r14,%r15
  10688b:	45 39 f4             	cmp    %r14d,%r12d
  10688e:	74 3a                	je     1068ca <_vfprintf_r+0x18a>
  106890:	49 63 c7             	movslq %r15d,%rax
  106893:	48 01 85 d0 fe ff ff 	add    %rax,-0x130(%rbp)
  10689a:	48 83 c3 10          	add    $0x10,%rbx
  10689e:	48 89 43 f8          	mov    %rax,-0x8(%rbx)
  1068a2:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
  1068a8:	4c 89 73 f0          	mov    %r14,-0x10(%rbx)
  1068ac:	83 c0 01             	add    $0x1,%eax
  1068af:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
  1068b5:	83 f8 07             	cmp    $0x7,%eax
  1068b8:	0f 8f ea 02 00 00    	jg     106ba8 <_vfprintf_r+0x468>
  1068be:	44 01 bd 6c fe ff ff 	add    %r15d,-0x194(%rbp)
  1068c5:	41 0f b6 45 01       	movzbl 0x1(%r13),%eax
  1068ca:	84 c0                	test   %al,%al
  1068cc:	0f 84 53 1f 00 00    	je     108825 <_vfprintf_r+0x20e5>
  1068d2:	c6 85 a5 fe ff ff 00 	movb   $0x0,-0x15b(%rbp)
  1068d9:	45 31 db             	xor    %r11d,%r11d
  1068dc:	4d 8d 74 24 01       	lea    0x1(%r12),%r14
  1068e1:	45 31 ff             	xor    %r15d,%r15d
  1068e4:	45 0f be 6c 24 01    	movsbl 0x1(%r12),%r13d
  1068ea:	41 ba ff ff ff ff    	mov    $0xffffffff,%r10d
  1068f0:	45 89 dc             	mov    %r11d,%r12d
  1068f3:	49 83 c6 01          	add    $0x1,%r14
  1068f7:	41 8d 45 e0          	lea    -0x20(%r13),%eax
  1068fb:	83 f8 5a             	cmp    $0x5a,%eax
  1068fe:	77 40                	ja     106940 <_vfprintf_r+0x200>
  106900:	ff 24 c5 c8 db 11 00 	jmp    *0x11dbc8(,%rax,8)
  106907:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10690e:	00 00 
  106910:	45 31 e4             	xor    %r12d,%r12d
  106913:	41 8d 45 d0          	lea    -0x30(%r13),%eax
  106917:	45 0f be 2e          	movsbl (%r14),%r13d
  10691b:	43 8d 14 a4          	lea    (%r12,%r12,4),%edx
  10691f:	49 83 c6 01          	add    $0x1,%r14
  106923:	44 8d 24 50          	lea    (%rax,%rdx,2),%r12d
  106927:	41 8d 45 d0          	lea    -0x30(%r13),%eax
  10692b:	83 f8 09             	cmp    $0x9,%eax
  10692e:	76 e7                	jbe    106917 <_vfprintf_r+0x1d7>
  106930:	41 8d 45 e0          	lea    -0x20(%r13),%eax
  106934:	83 f8 5a             	cmp    $0x5a,%eax
  106937:	76 c7                	jbe    106900 <_vfprintf_r+0x1c0>
  106939:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  106940:	45 89 e3             	mov    %r12d,%r11d
  106943:	45 85 ed             	test   %r13d,%r13d
  106946:	0f 84 d9 1e 00 00    	je     108825 <_vfprintf_r+0x20e5>
  10694c:	44 88 ad e0 fe ff ff 	mov    %r13b,-0x120(%rbp)
  106953:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  106959:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  10695f:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
  106966:	c6 85 a5 fe ff ff 00 	movb   $0x0,-0x15b(%rbp)
  10696d:	48 c7 85 88 fe ff ff 	movq   $0x0,-0x178(%rbp)
  106974:	00 00 00 00 
  106978:	45 31 d2             	xor    %r10d,%r10d
  10697b:	c7 85 48 fe ff ff 00 	movl   $0x0,-0x1b8(%rbp)
  106982:	00 00 00 
  106985:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  10698c:	00 00 00 
  10698f:	c7 85 60 fe ff ff 00 	movl   $0x0,-0x1a0(%rbp)
  106996:	00 00 00 
  106999:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  1069a0:	44 89 ff             	mov    %r15d,%edi
  1069a3:	41 8d 40 02          	lea    0x2(%r8),%eax
  1069a7:	83 e7 02             	and    $0x2,%edi
  1069aa:	44 0f 45 c0          	cmovne %eax,%r8d
  1069ae:	44 89 f8             	mov    %r15d,%eax
  1069b1:	89 bd 78 fe ff ff    	mov    %edi,-0x188(%rbp)
  1069b7:	25 84 00 00 00       	and    $0x84,%eax
  1069bc:	89 85 70 fe ff ff    	mov    %eax,-0x190(%rbp)
  1069c2:	75 0f                	jne    1069d3 <_vfprintf_r+0x293>
  1069c4:	45 89 d9             	mov    %r11d,%r9d
  1069c7:	45 29 c1             	sub    %r8d,%r9d
  1069ca:	45 85 c9             	test   %r9d,%r9d
  1069cd:	0f 8f a5 0e 00 00    	jg     107878 <_vfprintf_r+0x1138>
  1069d3:	80 bd a5 fe ff ff 00 	cmpb   $0x0,-0x15b(%rbp)
  1069da:	74 37                	je     106a13 <_vfprintf_r+0x2d3>
  1069dc:	48 8d 85 a5 fe ff ff 	lea    -0x15b(%rbp),%rax
  1069e3:	48 c7 43 08 01 00 00 	movq   $0x1,0x8(%rbx)
  1069ea:	00 
  1069eb:	48 83 c3 10          	add    $0x10,%rbx
  1069ef:	48 89 43 f0          	mov    %rax,-0x10(%rbx)
  1069f3:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
  1069f9:	48 83 85 d0 fe ff ff 	addq   $0x1,-0x130(%rbp)
  106a00:	01 
  106a01:	83 c0 01             	add    $0x1,%eax
  106a04:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
  106a0a:	83 f8 07             	cmp    $0x7,%eax
  106a0d:	0f 8f f5 10 00 00    	jg     107b08 <_vfprintf_r+0x13c8>
  106a13:	8b bd 78 fe ff ff    	mov    -0x188(%rbp),%edi
  106a19:	85 ff                	test   %edi,%edi
  106a1b:	74 37                	je     106a54 <_vfprintf_r+0x314>
  106a1d:	48 8d 85 a6 fe ff ff 	lea    -0x15a(%rbp),%rax
  106a24:	48 c7 43 08 02 00 00 	movq   $0x2,0x8(%rbx)
  106a2b:	00 
  106a2c:	48 83 c3 10          	add    $0x10,%rbx
  106a30:	48 89 43 f0          	mov    %rax,-0x10(%rbx)
  106a34:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
  106a3a:	48 83 85 d0 fe ff ff 	addq   $0x2,-0x130(%rbp)
  106a41:	02 
  106a42:	83 c0 01             	add    $0x1,%eax
  106a45:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
  106a4b:	83 f8 07             	cmp    $0x7,%eax
  106a4e:	0f 8f 1c 11 00 00    	jg     107b70 <_vfprintf_r+0x1430>
  106a54:	81 bd 70 fe ff ff 80 	cmpl   $0x80,-0x190(%rbp)
  106a5b:	00 00 00 
  106a5e:	0f 84 ec 09 00 00    	je     107450 <_vfprintf_r+0xd10>
  106a64:	45 29 e2             	sub    %r12d,%r10d
  106a67:	45 85 d2             	test   %r10d,%r10d
  106a6a:	0f 8f 60 0b 00 00    	jg     1075d0 <_vfprintf_r+0xe90>
  106a70:	41 f7 c7 00 01 00 00 	test   $0x100,%r15d
  106a77:	0f 85 5b 08 00 00    	jne    1072d8 <_vfprintf_r+0xb98>
  106a7d:	8b b5 c8 fe ff ff    	mov    -0x138(%rbp),%esi
  106a83:	49 63 c4             	movslq %r12d,%rax
  106a86:	48 89 0b             	mov    %rcx,(%rbx)
  106a89:	48 89 43 08          	mov    %rax,0x8(%rbx)
  106a8d:	48 03 85 d0 fe ff ff 	add    -0x130(%rbp),%rax
  106a94:	8d 56 01             	lea    0x1(%rsi),%edx
  106a97:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  106a9e:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  106aa4:	83 fa 07             	cmp    $0x7,%edx
  106aa7:	0f 8f 03 10 00 00    	jg     107ab0 <_vfprintf_r+0x1370>
  106aad:	48 83 c3 10          	add    $0x10,%rbx
  106ab1:	41 83 e7 04          	and    $0x4,%r15d
  106ab5:	74 0f                	je     106ac6 <_vfprintf_r+0x386>
  106ab7:	45 89 dc             	mov    %r11d,%r12d
  106aba:	45 29 c4             	sub    %r8d,%r12d
  106abd:	45 85 e4             	test   %r12d,%r12d
  106ac0:	0f 8f 1a 11 00 00    	jg     107be0 <_vfprintf_r+0x14a0>
  106ac6:	45 39 c3             	cmp    %r8d,%r11d
  106ac9:	45 0f 4d c3          	cmovge %r11d,%r8d
  106acd:	44 01 85 6c fe ff ff 	add    %r8d,-0x194(%rbp)
  106ad4:	48 85 c0             	test   %rax,%rax
  106ad7:	0f 85 fb 00 00 00    	jne    106bd8 <_vfprintf_r+0x498>
  106add:	48 83 bd 88 fe ff ff 	cmpq   $0x0,-0x178(%rbp)
  106ae4:	00 
  106ae5:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  106aec:	00 00 00 
  106aef:	74 13                	je     106b04 <_vfprintf_r+0x3c4>
  106af1:	48 8b b5 88 fe ff ff 	mov    -0x178(%rbp),%rsi
  106af8:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  106aff:	e8 5c 50 00 00       	call   10bb60 <_free_r>
  106b04:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  106b0b:	e9 50 fd ff ff       	jmp    106860 <_vfprintf_r+0x120>
  106b10:	45 0f be 2e          	movsbl (%r14),%r13d
  106b14:	41 83 cf 10          	or     $0x10,%r15d
  106b18:	e9 d6 fd ff ff       	jmp    1068f3 <_vfprintf_r+0x1b3>
  106b1d:	0f 1f 00             	nopl   (%rax)
  106b20:	48 8b 9d 90 fe ff ff 	mov    -0x170(%rbp),%rbx
  106b27:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  106b2e:	48 89 de             	mov    %rbx,%rsi
  106b31:	e8 1a 33 00 00       	call   109e50 <__swsetup_r>
  106b36:	85 c0                	test   %eax,%eax
  106b38:	0f 85 7b 2c 00 00    	jne    1097b9 <_vfprintf_r+0x3079>
  106b3e:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  106b42:	89 c2                	mov    %eax,%edx
  106b44:	83 e2 1a             	and    $0x1a,%edx
  106b47:	66 83 fa 0a          	cmp    $0xa,%dx
  106b4b:	0f 85 94 fc ff ff    	jne    1067e5 <_vfprintf_r+0xa5>
  106b51:	48 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%rdi
  106b58:	66 83 7f 12 00       	cmpw   $0x0,0x12(%rdi)
  106b5d:	0f 88 82 fc ff ff    	js     1067e5 <_vfprintf_r+0xa5>
  106b63:	f6 87 b0 00 00 00 01 	testb  $0x1,0xb0(%rdi)
  106b6a:	75 09                	jne    106b75 <_vfprintf_r+0x435>
  106b6c:	f6 c4 02             	test   $0x2,%ah
  106b6f:	0f 84 01 24 00 00    	je     108f76 <_vfprintf_r+0x2836>
  106b75:	48 8b 8d 80 fe ff ff 	mov    -0x180(%rbp),%rcx
  106b7c:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  106b83:	4c 89 f2             	mov    %r14,%rdx
  106b86:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  106b8d:	48 81 c4 e8 01 00 00 	add    $0x1e8,%rsp
  106b94:	5b                   	pop    %rbx
  106b95:	41 5c                	pop    %r12
  106b97:	41 5d                	pop    %r13
  106b99:	41 5e                	pop    %r14
  106b9b:	41 5f                	pop    %r15
  106b9d:	5d                   	pop    %rbp
  106b9e:	e9 ad 31 00 00       	jmp    109d50 <__sbprintf>
  106ba3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  106ba8:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  106baf:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  106bb6:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  106bbd:	e8 5e dd ff ff       	call   104920 <__sprint_r>
  106bc2:	85 c0                	test   %eax,%eax
  106bc4:	75 55                	jne    106c1b <_vfprintf_r+0x4db>
  106bc6:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  106bcd:	e9 ec fc ff ff       	jmp    1068be <_vfprintf_r+0x17e>
  106bd2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  106bd8:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  106bdf:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  106be6:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  106bed:	e8 2e dd ff ff       	call   104920 <__sprint_r>
  106bf2:	85 c0                	test   %eax,%eax
  106bf4:	0f 84 e3 fe ff ff    	je     106add <_vfprintf_r+0x39d>
  106bfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  106c00:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  106c07:	48 85 c0             	test   %rax,%rax
  106c0a:	74 0f                	je     106c1b <_vfprintf_r+0x4db>
  106c0c:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  106c13:	48 89 c6             	mov    %rax,%rsi
  106c16:	e8 45 4f 00 00       	call   10bb60 <_free_r>
  106c1b:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  106c22:	0f b7 46 10          	movzwl 0x10(%rsi),%eax
  106c26:	f6 86 b0 00 00 00 01 	testb  $0x1,0xb0(%rsi)
  106c2d:	0f 84 ed 00 00 00    	je     106d20 <_vfprintf_r+0x5e0>
  106c33:	a8 40                	test   $0x40,%al
  106c35:	0f 85 a7 2b 00 00    	jne    1097e2 <_vfprintf_r+0x30a2>
  106c3b:	8b 85 6c fe ff ff    	mov    -0x194(%rbp),%eax
  106c41:	48 81 c4 e8 01 00 00 	add    $0x1e8,%rsp
  106c48:	5b                   	pop    %rbx
  106c49:	41 5c                	pop    %r12
  106c4b:	41 5d                	pop    %r13
  106c4d:	41 5e                	pop    %r14
  106c4f:	41 5f                	pop    %r15
  106c51:	5d                   	pop    %rbp
  106c52:	c3                   	ret    
  106c53:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  106c58:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  106c5f:	45 89 e3             	mov    %r12d,%r11d
  106c62:	41 f6 c7 08          	test   $0x8,%r15b
  106c66:	0f 85 9c 14 00 00    	jne    108108 <_vfprintf_r+0x19c8>
  106c6c:	8b 46 04             	mov    0x4(%rsi),%eax
  106c6f:	3d af 00 00 00       	cmp    $0xaf,%eax
  106c74:	0f 87 0d 1e 00 00    	ja     108a87 <_vfprintf_r+0x2347>
  106c7a:	89 c2                	mov    %eax,%edx
  106c7c:	83 c0 10             	add    $0x10,%eax
  106c7f:	48 03 56 10          	add    0x10(%rsi),%rdx
  106c83:	89 46 04             	mov    %eax,0x4(%rsi)
  106c86:	f2 0f 10 3a          	movsd  (%rdx),%xmm7
  106c8a:	f2 0f 11 bd 40 fe ff 	movsd  %xmm7,-0x1c0(%rbp)
  106c91:	ff 
  106c92:	f2 0f 10 b5 40 fe ff 	movsd  -0x1c0(%rbp),%xmm6
  106c99:	ff 
  106c9a:	66 0f 28 c6          	movapd %xmm6,%xmm0
  106c9e:	66 0f 54 05 ea 65 01 	andpd  0x165ea(%rip),%xmm0        # 11d290 <_ZN6tflite12_GLOBAL__N_1L24kOfflineMemAllocMetadataE+0x20>
  106ca5:	00 
  106ca6:	66 0f 2e 05 f2 71 01 	ucomisd 0x171f2(%rip),%xmm0        # 11dea0 <_ZTVN10__cxxabiv117__class_type_infoE+0x640>
  106cad:	00 
  106cae:	0f 86 76 18 00 00    	jbe    10852a <_vfprintf_r+0x1dea>
  106cb4:	66 0f ef c0          	pxor   %xmm0,%xmm0
  106cb8:	66 0f 2f c6          	comisd %xmm6,%xmm0
  106cbc:	0f 87 4a 21 00 00    	ja     108e0c <_vfprintf_r+0x26cc>
  106cc2:	0f b6 95 a5 fe ff ff 	movzbl -0x15b(%rbp),%edx
  106cc9:	41 83 fd 48          	cmp    $0x48,%r13d
  106ccd:	b9 71 03 12 00       	mov    $0x120371,%ecx
  106cd2:	b8 75 03 12 00       	mov    $0x120375,%eax
  106cd7:	48 0f 4d c8          	cmovge %rax,%rcx
  106cdb:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  106ce1:	45 31 d2             	xor    %r10d,%r10d
  106ce4:	48 c7 85 88 fe ff ff 	movq   $0x0,-0x178(%rbp)
  106ceb:	00 00 00 00 
  106cef:	c7 85 48 fe ff ff 00 	movl   $0x0,-0x1b8(%rbp)
  106cf6:	00 00 00 
  106cf9:	41 80 e7 7f          	and    $0x7f,%r15b
  106cfd:	41 bc 03 00 00 00    	mov    $0x3,%r12d
  106d03:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  106d0a:	00 00 00 
  106d0d:	c7 85 60 fe ff ff 00 	movl   $0x0,-0x1a0(%rbp)
  106d14:	00 00 00 
  106d17:	e9 67 04 00 00       	jmp    107183 <_vfprintf_r+0xa43>
  106d1c:	0f 1f 40 00          	nopl   0x0(%rax)
  106d20:	f6 c4 02             	test   $0x2,%ah
  106d23:	0f 85 0a ff ff ff    	jne    106c33 <_vfprintf_r+0x4f3>
  106d29:	48 8b be a0 00 00 00 	mov    0xa0(%rsi),%rdi
  106d30:	48 89 f3             	mov    %rsi,%rbx
  106d33:	e8 87 b0 00 00       	call   111dbf <__retarget_lock_release_recursive>
  106d38:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  106d3c:	e9 f2 fe ff ff       	jmp    106c33 <_vfprintf_r+0x4f3>
  106d41:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  106d48:	e8 03 4b 00 00       	call   10b850 <__sinit>
  106d4d:	e9 4d fa ff ff       	jmp    10679f <_vfprintf_r+0x5f>
  106d52:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  106d59:	45 89 e3             	mov    %r12d,%r11d
  106d5c:	8b 06                	mov    (%rsi),%eax
  106d5e:	83 f8 2f             	cmp    $0x2f,%eax
  106d61:	0f 87 f7 13 00 00    	ja     10815e <_vfprintf_r+0x1a1e>
  106d67:	89 c2                	mov    %eax,%edx
  106d69:	83 c0 08             	add    $0x8,%eax
  106d6c:	48 03 56 10          	add    0x10(%rsi),%rdx
  106d70:	89 06                	mov    %eax,(%rsi)
  106d72:	8b 02                	mov    (%rdx),%eax
  106d74:	c6 85 a5 fe ff ff 00 	movb   $0x0,-0x15b(%rbp)
  106d7b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  106d81:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  106d87:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
  106d8e:	88 85 e0 fe ff ff    	mov    %al,-0x120(%rbp)
  106d94:	e9 d4 fb ff ff       	jmp    10696d <_vfprintf_r+0x22d>
  106d99:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  106da0:	45 89 e3             	mov    %r12d,%r11d
  106da3:	8b 06                	mov    (%rsi),%eax
  106da5:	83 f8 2f             	cmp    $0x2f,%eax
  106da8:	0f 86 c8 13 00 00    	jbe    108176 <_vfprintf_r+0x1a36>
  106dae:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  106db5:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  106db9:	48 8d 42 08          	lea    0x8(%rdx),%rax
  106dbd:	48 89 47 08          	mov    %rax,0x8(%rdi)
  106dc1:	48 8b 0a             	mov    (%rdx),%rcx
  106dc4:	c6 85 a5 fe ff ff 00 	movb   $0x0,-0x15b(%rbp)
  106dcb:	48 85 c9             	test   %rcx,%rcx
  106dce:	0f 84 6e 1a 00 00    	je     108842 <_vfprintf_r+0x2102>
  106dd4:	41 83 fa ff          	cmp    $0xffffffff,%r10d
  106dd8:	0f 84 7e 1a 00 00    	je     10885c <_vfprintf_r+0x211c>
  106dde:	49 63 d2             	movslq %r10d,%rdx
  106de1:	31 f6                	xor    %esi,%esi
  106de3:	48 89 cf             	mov    %rcx,%rdi
  106de6:	44 89 9d 60 fe ff ff 	mov    %r11d,-0x1a0(%rbp)
  106ded:	44 89 95 70 fe ff ff 	mov    %r10d,-0x190(%rbp)
  106df4:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
  106dfb:	e8 80 cf ff ff       	call   103d80 <memchr>
  106e00:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  106e07:	44 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%r10d
  106e0e:	48 85 c0             	test   %rax,%rax
  106e11:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
  106e18:	44 8b 9d 60 fe ff ff 	mov    -0x1a0(%rbp),%r11d
  106e1f:	0f 84 de 27 00 00    	je     109603 <_vfprintf_r+0x2ec3>
  106e25:	4c 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%r8
  106e2c:	31 c0                	xor    %eax,%eax
  106e2e:	48 c7 85 88 fe ff ff 	movq   $0x0,-0x178(%rbp)
  106e35:	00 00 00 00 
  106e39:	c7 85 48 fe ff ff 00 	movl   $0x0,-0x1b8(%rbp)
  106e40:	00 00 00 
  106e43:	0f b6 95 a5 fe ff ff 	movzbl -0x15b(%rbp),%edx
  106e4a:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  106e51:	00 00 00 
  106e54:	49 29 c8             	sub    %rcx,%r8
  106e57:	c7 85 60 fe ff ff 00 	movl   $0x0,-0x1a0(%rbp)
  106e5e:	00 00 00 
  106e61:	45 85 c0             	test   %r8d,%r8d
  106e64:	45 89 c4             	mov    %r8d,%r12d
  106e67:	44 0f 48 c0          	cmovs  %eax,%r8d
  106e6b:	45 31 d2             	xor    %r10d,%r10d
  106e6e:	e9 10 03 00 00       	jmp    107183 <_vfprintf_r+0xa43>
  106e73:	45 0f be 2e          	movsbl (%r14),%r13d
  106e77:	41 80 fd 68          	cmp    $0x68,%r13b
  106e7b:	0f 84 50 14 00 00    	je     1082d1 <_vfprintf_r+0x1b91>
  106e81:	41 83 cf 40          	or     $0x40,%r15d
  106e85:	e9 69 fa ff ff       	jmp    1068f3 <_vfprintf_r+0x1b3>
  106e8a:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  106e91:	8b 07                	mov    (%rdi),%eax
  106e93:	41 f6 c7 20          	test   $0x20,%r15b
  106e97:	0f 84 40 12 00 00    	je     1080dd <_vfprintf_r+0x199d>
  106e9d:	83 f8 2f             	cmp    $0x2f,%eax
  106ea0:	0f 87 4a 12 00 00    	ja     1080f0 <_vfprintf_r+0x19b0>
  106ea6:	89 c2                	mov    %eax,%edx
  106ea8:	83 c0 08             	add    $0x8,%eax
  106eab:	48 03 57 10          	add    0x10(%rdi),%rdx
  106eaf:	89 07                	mov    %eax,(%rdi)
  106eb1:	48 8b 02             	mov    (%rdx),%rax
  106eb4:	48 63 95 6c fe ff ff 	movslq -0x194(%rbp),%rdx
  106ebb:	48 89 10             	mov    %rdx,(%rax)
  106ebe:	e9 9d f9 ff ff       	jmp    106860 <_vfprintf_r+0x120>
  106ec3:	45 0f be 2e          	movsbl (%r14),%r13d
  106ec7:	41 80 fd 6c          	cmp    $0x6c,%r13b
  106ecb:	0f 84 ee 13 00 00    	je     1082bf <_vfprintf_r+0x1b7f>
  106ed1:	41 83 cf 10          	or     $0x10,%r15d
  106ed5:	e9 19 fa ff ff       	jmp    1068f3 <_vfprintf_r+0x1b3>
  106eda:	45 0f be 2e          	movsbl (%r14),%r13d
  106ede:	41 83 cf 20          	or     $0x20,%r15d
  106ee2:	e9 0c fa ff ff       	jmp    1068f3 <_vfprintf_r+0x1b3>
  106ee7:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  106eee:	45 89 e3             	mov    %r12d,%r11d
  106ef1:	8b 07                	mov    (%rdi),%eax
  106ef3:	83 f8 2f             	cmp    $0x2f,%eax
  106ef6:	0f 87 c9 11 00 00    	ja     1080c5 <_vfprintf_r+0x1985>
  106efc:	89 c2                	mov    %eax,%edx
  106efe:	83 c0 08             	add    $0x8,%eax
  106f01:	48 03 57 10          	add    0x10(%rdi),%rdx
  106f05:	89 07                	mov    %eax,(%rdi)
  106f07:	0f b7 05 46 71 01 00 	movzwl 0x17146(%rip),%eax        # 11e054 <_ZN6tflite19kPoolingInputTensorE+0x14>
  106f0e:	48 8b 32             	mov    (%rdx),%rsi
  106f11:	44 89 fa             	mov    %r15d,%edx
  106f14:	48 c7 85 20 fe ff ff 	movq   $0x120359,-0x1e0(%rbp)
  106f1b:	59 03 12 00 
  106f1f:	83 ca 02             	or     $0x2,%edx
  106f22:	41 bd 78 00 00 00    	mov    $0x78,%r13d
  106f28:	66 89 85 a6 fe ff ff 	mov    %ax,-0x15a(%rbp)
  106f2f:	c6 85 a5 fe ff ff 00 	movb   $0x0,-0x15b(%rbp)
  106f36:	b8 02 00 00 00       	mov    $0x2,%eax
  106f3b:	41 83 fa ff          	cmp    $0xffffffff,%r10d
  106f3f:	0f 85 2c 01 00 00    	jne    107071 <_vfprintf_r+0x931>
  106f45:	4c 8d a5 44 ff ff ff 	lea    -0xbc(%rbp),%r12
  106f4c:	48 8b bd 20 fe ff ff 	mov    -0x1e0(%rbp),%rdi
  106f53:	4c 89 e1             	mov    %r12,%rcx
  106f56:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  106f5d:	00 00 00 
  106f60:	48 89 f0             	mov    %rsi,%rax
  106f63:	48 83 e9 01          	sub    $0x1,%rcx
  106f67:	83 e0 0f             	and    $0xf,%eax
  106f6a:	48 c1 ee 04          	shr    $0x4,%rsi
  106f6e:	0f b6 04 07          	movzbl (%rdi,%rax,1),%eax
  106f72:	88 01                	mov    %al,(%rcx)
  106f74:	75 ea                	jne    106f60 <_vfprintf_r+0x820>
  106f76:	41 89 d7             	mov    %edx,%r15d
  106f79:	41 29 cc             	sub    %ecx,%r12d
  106f7c:	31 d2                	xor    %edx,%edx
  106f7e:	e9 cd 01 00 00       	jmp    107150 <_vfprintf_r+0xa10>
  106f83:	45 89 e3             	mov    %r12d,%r11d
  106f86:	41 83 cf 10          	or     $0x10,%r15d
  106f8a:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  106f91:	8b 06                	mov    (%rsi),%eax
  106f93:	41 f6 c7 20          	test   $0x20,%r15b
  106f97:	0f 84 bb 0e 00 00    	je     107e58 <_vfprintf_r+0x1718>
  106f9d:	83 f8 2f             	cmp    $0x2f,%eax
  106fa0:	0f 86 d7 10 00 00    	jbe    10807d <_vfprintf_r+0x193d>
  106fa6:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  106fad:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  106fb1:	48 8d 42 08          	lea    0x8(%rdx),%rax
  106fb5:	48 89 47 08          	mov    %rax,0x8(%rdi)
  106fb9:	48 8b 32             	mov    (%rdx),%rsi
  106fbc:	c6 85 a5 fe ff ff 00 	movb   $0x0,-0x15b(%rbp)
  106fc3:	41 81 e7 ff fb ff ff 	and    $0xfffffbff,%r15d
  106fca:	41 83 fa ff          	cmp    $0xffffffff,%r10d
  106fce:	0f 85 1f 15 00 00    	jne    1084f3 <_vfprintf_r+0x1db3>
  106fd4:	4c 8d a5 44 ff ff ff 	lea    -0xbc(%rbp),%r12
  106fdb:	4c 89 e1             	mov    %r12,%rcx
  106fde:	66 90                	xchg   %ax,%ax
  106fe0:	89 f0                	mov    %esi,%eax
  106fe2:	48 89 ca             	mov    %rcx,%rdx
  106fe5:	48 83 e9 01          	sub    $0x1,%rcx
  106fe9:	83 e0 07             	and    $0x7,%eax
  106fec:	83 c0 30             	add    $0x30,%eax
  106fef:	48 c1 ee 03          	shr    $0x3,%rsi
  106ff3:	88 01                	mov    %al,(%rcx)
  106ff5:	75 e9                	jne    106fe0 <_vfprintf_r+0x8a0>
  106ff7:	3c 30                	cmp    $0x30,%al
  106ff9:	0f 84 e2 13 00 00    	je     1083e1 <_vfprintf_r+0x1ca1>
  106fff:	41 f6 c7 01          	test   $0x1,%r15b
  107003:	0f 84 d8 13 00 00    	je     1083e1 <_vfprintf_r+0x1ca1>
  107009:	48 83 ea 02          	sub    $0x2,%rdx
  10700d:	c6 41 ff 30          	movb   $0x30,-0x1(%rcx)
  107011:	41 29 d4             	sub    %edx,%r12d
  107014:	48 89 d1             	mov    %rdx,%rcx
  107017:	31 d2                	xor    %edx,%edx
  107019:	e9 32 01 00 00       	jmp    107150 <_vfprintf_r+0xa10>
  10701e:	44 89 fa             	mov    %r15d,%edx
  107021:	45 89 e3             	mov    %r12d,%r11d
  107024:	83 ca 10             	or     $0x10,%edx
  107027:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  10702e:	8b 07                	mov    (%rdi),%eax
  107030:	f6 c2 20             	test   $0x20,%dl
  107033:	0f 84 cc 0d 00 00    	je     107e05 <_vfprintf_r+0x16c5>
  107039:	83 f8 2f             	cmp    $0x2f,%eax
  10703c:	0f 86 4b 10 00 00    	jbe    10808d <_vfprintf_r+0x194d>
  107042:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  107049:	48 8b 4e 08          	mov    0x8(%rsi),%rcx
  10704d:	48 8d 41 08          	lea    0x8(%rcx),%rax
  107051:	48 89 46 08          	mov    %rax,0x8(%rsi)
  107055:	48 8b 31             	mov    (%rcx),%rsi
  107058:	c6 85 a5 fe ff ff 00 	movb   $0x0,-0x15b(%rbp)
  10705f:	b8 01 00 00 00       	mov    $0x1,%eax
  107064:	41 89 d7             	mov    %edx,%r15d
  107067:	41 83 fa ff          	cmp    $0xffffffff,%r10d
  10706b:	0f 84 32 13 00 00    	je     1083a3 <_vfprintf_r+0x1c63>
  107071:	41 89 d7             	mov    %edx,%r15d
  107074:	41 80 e7 7f          	and    $0x7f,%r15b
  107078:	48 85 f6             	test   %rsi,%rsi
  10707b:	0f 85 8a 17 00 00    	jne    10880b <_vfprintf_r+0x20cb>
  107081:	45 85 d2             	test   %r10d,%r10d
  107084:	0f 85 81 17 00 00    	jne    10880b <_vfprintf_r+0x20cb>
  10708a:	85 c0                	test   %eax,%eax
  10708c:	0f 85 e6 12 00 00    	jne    108378 <_vfprintf_r+0x1c38>
  107092:	83 e2 01             	and    $0x1,%edx
  107095:	41 89 d4             	mov    %edx,%r12d
  107098:	0f 84 32 13 00 00    	je     1083d0 <_vfprintf_r+0x1c90>
  10709e:	c6 85 43 ff ff ff 30 	movb   $0x30,-0xbd(%rbp)
  1070a5:	45 31 d2             	xor    %r10d,%r10d
  1070a8:	31 d2                	xor    %edx,%edx
  1070aa:	48 8d 8d 43 ff ff ff 	lea    -0xbd(%rbp),%rcx
  1070b1:	e9 9a 00 00 00       	jmp    107150 <_vfprintf_r+0xa10>
  1070b6:	45 0f be 2e          	movsbl (%r14),%r13d
  1070ba:	41 80 cf 80          	or     $0x80,%r15b
  1070be:	e9 30 f8 ff ff       	jmp    1068f3 <_vfprintf_r+0x1b3>
  1070c3:	45 0f be 2e          	movsbl (%r14),%r13d
  1070c7:	41 83 cf 08          	or     $0x8,%r15d
  1070cb:	e9 23 f8 ff ff       	jmp    1068f3 <_vfprintf_r+0x1b3>
  1070d0:	45 89 e3             	mov    %r12d,%r11d
  1070d3:	41 83 cf 10          	or     $0x10,%r15d
  1070d7:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  1070de:	8b 07                	mov    (%rdi),%eax
  1070e0:	41 f6 c7 20          	test   $0x20,%r15b
  1070e4:	0f 84 44 0d 00 00    	je     107e2e <_vfprintf_r+0x16ee>
  1070ea:	83 f8 2f             	cmp    $0x2f,%eax
  1070ed:	0f 86 c2 0f 00 00    	jbe    1080b5 <_vfprintf_r+0x1975>
  1070f3:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  1070fa:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  1070fe:	48 8d 42 08          	lea    0x8(%rdx),%rax
  107102:	48 89 47 08          	mov    %rax,0x8(%rdi)
  107106:	48 8b 02             	mov    (%rdx),%rax
  107109:	48 89 c6             	mov    %rax,%rsi
  10710c:	48 85 c0             	test   %rax,%rax
  10710f:	0f 88 77 12 00 00    	js     10838c <_vfprintf_r+0x1c4c>
  107115:	41 83 fa ff          	cmp    $0xffffffff,%r10d
  107119:	0f 84 84 12 00 00    	je     1083a3 <_vfprintf_r+0x1c63>
  10711f:	41 80 e7 7f          	and    $0x7f,%r15b
  107123:	48 85 f6             	test   %rsi,%rsi
  107126:	0f 85 77 12 00 00    	jne    1083a3 <_vfprintf_r+0x1c63>
  10712c:	45 85 d2             	test   %r10d,%r10d
  10712f:	0f 85 6e 12 00 00    	jne    1083a3 <_vfprintf_r+0x1c63>
  107135:	0f b6 95 a5 fe ff ff 	movzbl -0x15b(%rbp),%edx
  10713c:	45 31 e4             	xor    %r12d,%r12d
  10713f:	48 8d 8d 44 ff ff ff 	lea    -0xbc(%rbp),%rcx
  107146:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10714d:	00 00 00 
  107150:	c7 85 48 fe ff ff 00 	movl   $0x0,-0x1b8(%rbp)
  107157:	00 00 00 
  10715a:	45 39 e2             	cmp    %r12d,%r10d
  10715d:	45 89 e0             	mov    %r12d,%r8d
  107160:	48 c7 85 88 fe ff ff 	movq   $0x0,-0x178(%rbp)
  107167:	00 00 00 00 
  10716b:	45 0f 4d c2          	cmovge %r10d,%r8d
  10716f:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  107176:	00 00 00 
  107179:	c7 85 60 fe ff ff 00 	movl   $0x0,-0x1a0(%rbp)
  107180:	00 00 00 
  107183:	84 d2                	test   %dl,%dl
  107185:	0f 84 15 f8 ff ff    	je     1069a0 <_vfprintf_r+0x260>
  10718b:	41 83 c0 01          	add    $0x1,%r8d
  10718f:	e9 0c f8 ff ff       	jmp    1069a0 <_vfprintf_r+0x260>
  107194:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  10719b:	8b 07                	mov    (%rdi),%eax
  10719d:	83 f8 2f             	cmp    $0x2f,%eax
  1071a0:	0f 87 f7 0e 00 00    	ja     10809d <_vfprintf_r+0x195d>
  1071a6:	89 c2                	mov    %eax,%edx
  1071a8:	83 c0 08             	add    $0x8,%eax
  1071ab:	48 03 57 10          	add    0x10(%rdi),%rdx
  1071af:	89 07                	mov    %eax,(%rdi)
  1071b1:	41 0f b6 06          	movzbl (%r14),%eax
  1071b5:	44 8b 22             	mov    (%rdx),%r12d
  1071b8:	44 0f be e8          	movsbl %al,%r13d
  1071bc:	45 85 e4             	test   %r12d,%r12d
  1071bf:	0f 89 2e f7 ff ff    	jns    1068f3 <_vfprintf_r+0x1b3>
  1071c5:	41 f7 dc             	neg    %r12d
  1071c8:	41 83 cf 04          	or     $0x4,%r15d
  1071cc:	44 0f be e8          	movsbl %al,%r13d
  1071d0:	e9 1e f7 ff ff       	jmp    1068f3 <_vfprintf_r+0x1b3>
  1071d5:	c6 85 a5 fe ff ff 2b 	movb   $0x2b,-0x15b(%rbp)
  1071dc:	45 0f be 2e          	movsbl (%r14),%r13d
  1071e0:	e9 0e f7 ff ff       	jmp    1068f3 <_vfprintf_r+0x1b3>
  1071e5:	45 0f be 2e          	movsbl (%r14),%r13d
  1071e9:	49 8d 56 01          	lea    0x1(%r14),%rdx
  1071ed:	41 83 fd 2a          	cmp    $0x2a,%r13d
  1071f1:	0f 84 c1 2a 00 00    	je     109cb8 <_vfprintf_r+0x3578>
  1071f7:	41 8d 45 d0          	lea    -0x30(%r13),%eax
  1071fb:	49 89 d6             	mov    %rdx,%r14
  1071fe:	45 31 d2             	xor    %r10d,%r10d
  107201:	83 f8 09             	cmp    $0x9,%eax
  107204:	0f 87 ed f6 ff ff    	ja     1068f7 <_vfprintf_r+0x1b7>
  10720a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  107210:	45 0f be 2e          	movsbl (%r14),%r13d
  107214:	43 8d 14 92          	lea    (%r10,%r10,4),%edx
  107218:	49 83 c6 01          	add    $0x1,%r14
  10721c:	44 8d 14 50          	lea    (%rax,%rdx,2),%r10d
  107220:	41 8d 45 d0          	lea    -0x30(%r13),%eax
  107224:	83 f8 09             	cmp    $0x9,%eax
  107227:	76 e7                	jbe    107210 <_vfprintf_r+0xad0>
  107229:	e9 c9 f6 ff ff       	jmp    1068f7 <_vfprintf_r+0x1b7>
  10722e:	45 0f be 2e          	movsbl (%r14),%r13d
  107232:	41 83 cf 01          	or     $0x1,%r15d
  107236:	e9 b8 f6 ff ff       	jmp    1068f3 <_vfprintf_r+0x1b3>
  10723b:	80 bd a5 fe ff ff 00 	cmpb   $0x0,-0x15b(%rbp)
  107242:	45 0f be 2e          	movsbl (%r14),%r13d
  107246:	0f 85 a7 f6 ff ff    	jne    1068f3 <_vfprintf_r+0x1b3>
  10724c:	c6 85 a5 fe ff ff 20 	movb   $0x20,-0x15b(%rbp)
  107253:	e9 9b f6 ff ff       	jmp    1068f3 <_vfprintf_r+0x1b3>
  107258:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  10725f:	44 89 95 88 fe ff ff 	mov    %r10d,-0x178(%rbp)
  107266:	e8 f5 4c 00 00       	call   10bf60 <_localeconv_r>
  10726b:	48 8b 40 08          	mov    0x8(%rax),%rax
  10726f:	48 89 c7             	mov    %rax,%rdi
  107272:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
  107279:	e8 22 d5 ff ff       	call   1047a0 <strlen>
  10727e:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  107285:	49 89 c5             	mov    %rax,%r13
  107288:	48 89 85 18 fe ff ff 	mov    %rax,-0x1e8(%rbp)
  10728f:	e8 cc 4c 00 00       	call   10bf60 <_localeconv_r>
  107294:	4d 85 ed             	test   %r13,%r13
  107297:	44 8b 95 88 fe ff ff 	mov    -0x178(%rbp),%r10d
  10729e:	45 0f be 2e          	movsbl (%r14),%r13d
  1072a2:	48 8b 70 10          	mov    0x10(%rax),%rsi
  1072a6:	48 89 b5 08 fe ff ff 	mov    %rsi,-0x1f8(%rbp)
  1072ad:	0f 84 40 f6 ff ff    	je     1068f3 <_vfprintf_r+0x1b3>
  1072b3:	48 85 f6             	test   %rsi,%rsi
  1072b6:	0f 84 37 f6 ff ff    	je     1068f3 <_vfprintf_r+0x1b3>
  1072bc:	80 3e 00             	cmpb   $0x0,(%rsi)
  1072bf:	0f 84 2e f6 ff ff    	je     1068f3 <_vfprintf_r+0x1b3>
  1072c5:	41 81 cf 00 04 00 00 	or     $0x400,%r15d
  1072cc:	e9 22 f6 ff ff       	jmp    1068f3 <_vfprintf_r+0x1b3>
  1072d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  1072d8:	41 83 fd 65          	cmp    $0x65,%r13d
  1072dc:	0f 8e 3e 04 00 00    	jle    107720 <_vfprintf_r+0xfe0>
  1072e2:	f2 0f 10 a5 40 fe ff 	movsd  -0x1c0(%rbp),%xmm4
  1072e9:	ff 
  1072ea:	66 0f ef c0          	pxor   %xmm0,%xmm0
  1072ee:	66 0f 2e e0          	ucomisd %xmm0,%xmm4
  1072f2:	0f 8a f0 06 00 00    	jp     1079e8 <_vfprintf_r+0x12a8>
  1072f8:	0f 85 ea 06 00 00    	jne    1079e8 <_vfprintf_r+0x12a8>
  1072fe:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
  107304:	48 c7 03 7d f7 11 00 	movq   $0x11f77d,(%rbx)
  10730b:	48 83 c3 10          	add    $0x10,%rbx
  10730f:	48 c7 43 f8 01 00 00 	movq   $0x1,-0x8(%rbx)
  107316:	00 
  107317:	83 c0 01             	add    $0x1,%eax
  10731a:	48 83 85 d0 fe ff ff 	addq   $0x1,-0x130(%rbp)
  107321:	01 
  107322:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
  107328:	83 f8 07             	cmp    $0x7,%eax
  10732b:	0f 8f b1 13 00 00    	jg     1086e2 <_vfprintf_r+0x1fa2>
  107331:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  107337:	39 85 a8 fe ff ff    	cmp    %eax,-0x158(%rbp)
  10733d:	7c 12                	jl     107351 <_vfprintf_r+0xc11>
  10733f:	41 f6 c7 01          	test   $0x1,%r15b
  107343:	75 0c                	jne    107351 <_vfprintf_r+0xc11>
  107345:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  10734c:	e9 60 f7 ff ff       	jmp    106ab1 <_vfprintf_r+0x371>
  107351:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  107358:	8b b5 c8 fe ff ff    	mov    -0x138(%rbp),%esi
  10735e:	48 83 c3 10          	add    $0x10,%rbx
  107362:	48 89 43 f0          	mov    %rax,-0x10(%rbx)
  107366:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  10736d:	8d 56 01             	lea    0x1(%rsi),%edx
  107370:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  107376:	48 89 43 f8          	mov    %rax,-0x8(%rbx)
  10737a:	48 03 85 d0 fe ff ff 	add    -0x130(%rbp),%rax
  107381:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  107388:	83 fa 07             	cmp    $0x7,%edx
  10738b:	0f 8f dd 0e 00 00    	jg     10826e <_vfprintf_r+0x1b2e>
  107391:	8b bd 58 fe ff ff    	mov    -0x1a8(%rbp),%edi
  107397:	44 8d 67 ff          	lea    -0x1(%rdi),%r12d
  10739b:	45 85 e4             	test   %r12d,%r12d
  10739e:	0f 8e 0d f7 ff ff    	jle    106ab1 <_vfprintf_r+0x371>
  1073a4:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  1073aa:	41 83 fc 10          	cmp    $0x10,%r12d
  1073ae:	0f 8e d1 15 00 00    	jle    108985 <_vfprintf_r+0x2245>
  1073b4:	48 89 d9             	mov    %rbx,%rcx
  1073b7:	44 89 9d 78 fe ff ff 	mov    %r11d,-0x188(%rbp)
  1073be:	44 89 e3             	mov    %r12d,%ebx
  1073c1:	4c 8b ad 90 fe ff ff 	mov    -0x170(%rbp),%r13
  1073c8:	44 89 85 70 fe ff ff 	mov    %r8d,-0x190(%rbp)
  1073cf:	4c 8b a5 98 fe ff ff 	mov    -0x168(%rbp),%r12
  1073d6:	eb 14                	jmp    1073ec <_vfprintf_r+0xcac>
  1073d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  1073df:	00 
  1073e0:	83 eb 10             	sub    $0x10,%ebx
  1073e3:	83 fb 10             	cmp    $0x10,%ebx
  1073e6:	0f 8e 85 15 00 00    	jle    108971 <_vfprintf_r+0x2231>
  1073ec:	48 83 c0 10          	add    $0x10,%rax
  1073f0:	83 c2 01             	add    $0x1,%edx
  1073f3:	48 83 c1 10          	add    $0x10,%rcx
  1073f7:	48 c7 41 f0 d0 d2 11 	movq   $0x11d2d0,-0x10(%rcx)
  1073fe:	00 
  1073ff:	48 c7 41 f8 10 00 00 	movq   $0x10,-0x8(%rcx)
  107406:	00 
  107407:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  10740e:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  107414:	83 fa 07             	cmp    $0x7,%edx
  107417:	7e c7                	jle    1073e0 <_vfprintf_r+0xca0>
  107419:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  107420:	4c 89 ee             	mov    %r13,%rsi
  107423:	4c 89 e7             	mov    %r12,%rdi
  107426:	e8 f5 d4 ff ff       	call   104920 <__sprint_r>
  10742b:	85 c0                	test   %eax,%eax
  10742d:	0f 85 cd f7 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  107433:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  10743a:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  107440:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
  107447:	eb 97                	jmp    1073e0 <_vfprintf_r+0xca0>
  107449:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  107450:	45 89 d9             	mov    %r11d,%r9d
  107453:	45 29 c1             	sub    %r8d,%r9d
  107456:	45 85 c9             	test   %r9d,%r9d
  107459:	0f 8e 05 f6 ff ff    	jle    106a64 <_vfprintf_r+0x324>
  10745f:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
  107466:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
  10746c:	41 83 f9 10          	cmp    $0x10,%r9d
  107470:	0f 8e bf 00 00 00    	jle    107535 <_vfprintf_r+0xdf5>
  107476:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
  10747d:	48 89 d9             	mov    %rbx,%rcx
  107480:	44 89 cb             	mov    %r9d,%ebx
  107483:	44 89 9d 70 fe ff ff 	mov    %r11d,-0x190(%rbp)
  10748a:	44 89 95 28 fe ff ff 	mov    %r10d,-0x1d8(%rbp)
  107491:	44 89 85 04 fe ff ff 	mov    %r8d,-0x1fc(%rbp)
  107498:	eb 0e                	jmp    1074a8 <_vfprintf_r+0xd68>
  10749a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  1074a0:	83 eb 10             	sub    $0x10,%ebx
  1074a3:	83 fb 10             	cmp    $0x10,%ebx
  1074a6:	7e 6b                	jle    107513 <_vfprintf_r+0xdd3>
  1074a8:	48 83 c2 10          	add    $0x10,%rdx
  1074ac:	83 c0 01             	add    $0x1,%eax
  1074af:	48 83 c1 10          	add    $0x10,%rcx
  1074b3:	48 c7 41 f0 d0 d2 11 	movq   $0x11d2d0,-0x10(%rcx)
  1074ba:	00 
  1074bb:	48 c7 41 f8 10 00 00 	movq   $0x10,-0x8(%rcx)
  1074c2:	00 
  1074c3:	48 89 95 d0 fe ff ff 	mov    %rdx,-0x130(%rbp)
  1074ca:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
  1074d0:	83 f8 07             	cmp    $0x7,%eax
  1074d3:	7e cb                	jle    1074a0 <_vfprintf_r+0xd60>
  1074d5:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1074dc:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1074e3:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1074ea:	e8 31 d4 ff ff       	call   104920 <__sprint_r>
  1074ef:	85 c0                	test   %eax,%eax
  1074f1:	0f 85 09 f7 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  1074f7:	83 eb 10             	sub    $0x10,%ebx
  1074fa:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
  107501:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
  107507:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
  10750e:	83 fb 10             	cmp    $0x10,%ebx
  107511:	7f 95                	jg     1074a8 <_vfprintf_r+0xd68>
  107513:	41 89 d9             	mov    %ebx,%r9d
  107516:	44 8b 9d 70 fe ff ff 	mov    -0x190(%rbp),%r11d
  10751d:	48 89 cb             	mov    %rcx,%rbx
  107520:	44 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%r10d
  107527:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  10752e:	44 8b 85 04 fe ff ff 	mov    -0x1fc(%rbp),%r8d
  107535:	4d 63 c9             	movslq %r9d,%r9
  107538:	83 c0 01             	add    $0x1,%eax
  10753b:	48 c7 03 d0 d2 11 00 	movq   $0x11d2d0,(%rbx)
  107542:	48 83 c3 10          	add    $0x10,%rbx
  107546:	4c 89 4b f8          	mov    %r9,-0x8(%rbx)
  10754a:	49 01 d1             	add    %rdx,%r9
  10754d:	4c 89 8d d0 fe ff ff 	mov    %r9,-0x130(%rbp)
  107554:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
  10755a:	83 f8 07             	cmp    $0x7,%eax
  10755d:	0f 8e 01 f5 ff ff    	jle    106a64 <_vfprintf_r+0x324>
  107563:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  10756a:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  107571:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  107578:	44 89 85 04 fe ff ff 	mov    %r8d,-0x1fc(%rbp)
  10757f:	44 89 95 28 fe ff ff 	mov    %r10d,-0x1d8(%rbp)
  107586:	44 89 9d 70 fe ff ff 	mov    %r11d,-0x190(%rbp)
  10758d:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
  107594:	e8 87 d3 ff ff       	call   104920 <__sprint_r>
  107599:	85 c0                	test   %eax,%eax
  10759b:	0f 85 5f f6 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  1075a1:	44 8b 85 04 fe ff ff 	mov    -0x1fc(%rbp),%r8d
  1075a8:	44 8b 95 28 fe ff ff 	mov    -0x1d8(%rbp),%r10d
  1075af:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  1075b6:	44 8b 9d 70 fe ff ff 	mov    -0x190(%rbp),%r11d
  1075bd:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  1075c4:	e9 9b f4 ff ff       	jmp    106a64 <_vfprintf_r+0x324>
  1075c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  1075d0:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
  1075d7:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
  1075dd:	41 83 fa 10          	cmp    $0x10,%r10d
  1075e1:	0f 8e af 00 00 00    	jle    107696 <_vfprintf_r+0xf56>
  1075e7:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
  1075ee:	48 89 d9             	mov    %rbx,%rcx
  1075f1:	44 89 d3             	mov    %r10d,%ebx
  1075f4:	44 89 9d 70 fe ff ff 	mov    %r11d,-0x190(%rbp)
  1075fb:	44 89 85 28 fe ff ff 	mov    %r8d,-0x1d8(%rbp)
  107602:	eb 0c                	jmp    107610 <_vfprintf_r+0xed0>
  107604:	0f 1f 40 00          	nopl   0x0(%rax)
  107608:	83 eb 10             	sub    $0x10,%ebx
  10760b:	83 fb 10             	cmp    $0x10,%ebx
  10760e:	7e 6b                	jle    10767b <_vfprintf_r+0xf3b>
  107610:	48 83 c2 10          	add    $0x10,%rdx
  107614:	83 c0 01             	add    $0x1,%eax
  107617:	48 83 c1 10          	add    $0x10,%rcx
  10761b:	48 c7 41 f0 d0 d2 11 	movq   $0x11d2d0,-0x10(%rcx)
  107622:	00 
  107623:	48 c7 41 f8 10 00 00 	movq   $0x10,-0x8(%rcx)
  10762a:	00 
  10762b:	48 89 95 d0 fe ff ff 	mov    %rdx,-0x130(%rbp)
  107632:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
  107638:	83 f8 07             	cmp    $0x7,%eax
  10763b:	7e cb                	jle    107608 <_vfprintf_r+0xec8>
  10763d:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  107644:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  10764b:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  107652:	e8 c9 d2 ff ff       	call   104920 <__sprint_r>
  107657:	85 c0                	test   %eax,%eax
  107659:	0f 85 a1 f5 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  10765f:	83 eb 10             	sub    $0x10,%ebx
  107662:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
  107669:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
  10766f:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
  107676:	83 fb 10             	cmp    $0x10,%ebx
  107679:	7f 95                	jg     107610 <_vfprintf_r+0xed0>
  10767b:	41 89 da             	mov    %ebx,%r10d
  10767e:	44 8b 9d 70 fe ff ff 	mov    -0x190(%rbp),%r11d
  107685:	48 89 cb             	mov    %rcx,%rbx
  107688:	44 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%r8d
  10768f:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  107696:	4d 63 ca             	movslq %r10d,%r9
  107699:	83 c0 01             	add    $0x1,%eax
  10769c:	48 c7 03 d0 d2 11 00 	movq   $0x11d2d0,(%rbx)
  1076a3:	48 83 c3 10          	add    $0x10,%rbx
  1076a7:	4c 89 4b f8          	mov    %r9,-0x8(%rbx)
  1076ab:	49 01 d1             	add    %rdx,%r9
  1076ae:	4c 89 8d d0 fe ff ff 	mov    %r9,-0x130(%rbp)
  1076b5:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
  1076bb:	83 f8 07             	cmp    $0x7,%eax
  1076be:	0f 8e ac f3 ff ff    	jle    106a70 <_vfprintf_r+0x330>
  1076c4:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1076cb:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1076d2:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1076d9:	44 89 85 28 fe ff ff 	mov    %r8d,-0x1d8(%rbp)
  1076e0:	44 89 9d 70 fe ff ff 	mov    %r11d,-0x190(%rbp)
  1076e7:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
  1076ee:	e8 2d d2 ff ff       	call   104920 <__sprint_r>
  1076f3:	85 c0                	test   %eax,%eax
  1076f5:	0f 85 05 f5 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  1076fb:	44 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%r8d
  107702:	44 8b 9d 70 fe ff ff 	mov    -0x190(%rbp),%r11d
  107709:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  107710:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  107717:	e9 54 f3 ff ff       	jmp    106a70 <_vfprintf_r+0x330>
  10771c:	0f 1f 40 00          	nopl   0x0(%rax)
  107720:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  107727:	48 89 0b             	mov    %rcx,(%rbx)
  10772a:	48 8d 73 10          	lea    0x10(%rbx),%rsi
  10772e:	83 bd 58 fe ff ff 01 	cmpl   $0x1,-0x1a8(%rbp)
  107735:	48 c7 43 08 01 00 00 	movq   $0x1,0x8(%rbx)
  10773c:	00 
  10773d:	48 8d 78 01          	lea    0x1(%rax),%rdi
  107741:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
  107747:	48 89 bd d0 fe ff ff 	mov    %rdi,-0x130(%rbp)
  10774e:	8d 50 01             	lea    0x1(%rax),%edx
  107751:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  107757:	0f 8e 9e 05 00 00    	jle    107cfb <_vfprintf_r+0x15bb>
  10775d:	83 fa 07             	cmp    $0x7,%edx
  107760:	0f 8f 28 0d 00 00    	jg     10848e <_vfprintf_r+0x1d4e>
  107766:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  10776d:	83 c2 01             	add    $0x1,%edx
  107770:	48 83 c6 10          	add    $0x10,%rsi
  107774:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  10777a:	48 89 46 f0          	mov    %rax,-0x10(%rsi)
  10777e:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  107785:	48 01 c7             	add    %rax,%rdi
  107788:	48 89 46 f8          	mov    %rax,-0x8(%rsi)
  10778c:	48 89 bd d0 fe ff ff 	mov    %rdi,-0x130(%rbp)
  107793:	83 fa 07             	cmp    $0x7,%edx
  107796:	0f 8f 8d 0c 00 00    	jg     108429 <_vfprintf_r+0x1ce9>
  10779c:	f2 0f 10 ad 40 fe ff 	movsd  -0x1c0(%rbp),%xmm5
  1077a3:	ff 
  1077a4:	66 0f ef c0          	pxor   %xmm0,%xmm0
  1077a8:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  1077ae:	66 0f 2e e8          	ucomisd %xmm0,%xmm5
  1077b2:	8d 58 ff             	lea    -0x1(%rax),%ebx
  1077b5:	7a 06                	jp     1077bd <_vfprintf_r+0x107d>
  1077b7:	0f 84 a8 05 00 00    	je     107d65 <_vfprintf_r+0x1625>
  1077bd:	48 63 db             	movslq %ebx,%rbx
  1077c0:	83 c2 01             	add    $0x1,%edx
  1077c3:	48 83 c1 01          	add    $0x1,%rcx
  1077c7:	48 01 df             	add    %rbx,%rdi
  1077ca:	48 89 0e             	mov    %rcx,(%rsi)
  1077cd:	48 89 5e 08          	mov    %rbx,0x8(%rsi)
  1077d1:	48 89 bd d0 fe ff ff 	mov    %rdi,-0x130(%rbp)
  1077d8:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  1077de:	83 fa 07             	cmp    $0x7,%edx
  1077e1:	0f 8f 30 0a 00 00    	jg     108217 <_vfprintf_r+0x1ad7>
  1077e7:	48 83 c6 10          	add    $0x10,%rsi
  1077eb:	48 8d 85 b1 fe ff ff 	lea    -0x14f(%rbp),%rax
  1077f2:	83 c2 01             	add    $0x1,%edx
  1077f5:	48 8d 5e 10          	lea    0x10(%rsi),%rbx
  1077f9:	48 89 06             	mov    %rax,(%rsi)
  1077fc:	48 63 85 68 fe ff ff 	movslq -0x198(%rbp),%rax
  107803:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  107809:	48 89 46 08          	mov    %rax,0x8(%rsi)
  10780d:	48 01 f8             	add    %rdi,%rax
  107810:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  107817:	83 fa 07             	cmp    $0x7,%edx
  10781a:	0f 8e 91 f2 ff ff    	jle    106ab1 <_vfprintf_r+0x371>
  107820:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  107827:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  10782e:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  107835:	44 89 85 70 fe ff ff 	mov    %r8d,-0x190(%rbp)
  10783c:	44 89 9d 78 fe ff ff 	mov    %r11d,-0x188(%rbp)
  107843:	e8 d8 d0 ff ff       	call   104920 <__sprint_r>
  107848:	85 c0                	test   %eax,%eax
  10784a:	0f 85 b0 f3 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  107850:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  107857:	44 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%r8d
  10785e:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  107865:	44 8b 9d 78 fe ff ff 	mov    -0x188(%rbp),%r11d
  10786c:	e9 40 f2 ff ff       	jmp    106ab1 <_vfprintf_r+0x371>
  107871:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  107878:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
  10787f:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
  107885:	41 83 f9 10          	cmp    $0x10,%r9d
  107889:	0f 8e be 00 00 00    	jle    10794d <_vfprintf_r+0x120d>
  10788f:	48 89 8d 28 fe ff ff 	mov    %rcx,-0x1d8(%rbp)
  107896:	48 89 d9             	mov    %rbx,%rcx
  107899:	44 89 cb             	mov    %r9d,%ebx
  10789c:	44 89 9d 04 fe ff ff 	mov    %r11d,-0x1fc(%rbp)
  1078a3:	44 89 95 00 fe ff ff 	mov    %r10d,-0x200(%rbp)
  1078aa:	44 89 85 fc fd ff ff 	mov    %r8d,-0x204(%rbp)
  1078b1:	eb 0d                	jmp    1078c0 <_vfprintf_r+0x1180>
  1078b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  1078b8:	83 eb 10             	sub    $0x10,%ebx
  1078bb:	83 fb 10             	cmp    $0x10,%ebx
  1078be:	7e 6b                	jle    10792b <_vfprintf_r+0x11eb>
  1078c0:	48 83 c2 10          	add    $0x10,%rdx
  1078c4:	83 c0 01             	add    $0x1,%eax
  1078c7:	48 83 c1 10          	add    $0x10,%rcx
  1078cb:	48 c7 41 f0 e0 d2 11 	movq   $0x11d2e0,-0x10(%rcx)
  1078d2:	00 
  1078d3:	48 c7 41 f8 10 00 00 	movq   $0x10,-0x8(%rcx)
  1078da:	00 
  1078db:	48 89 95 d0 fe ff ff 	mov    %rdx,-0x130(%rbp)
  1078e2:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
  1078e8:	83 f8 07             	cmp    $0x7,%eax
  1078eb:	7e cb                	jle    1078b8 <_vfprintf_r+0x1178>
  1078ed:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1078f4:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1078fb:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  107902:	e8 19 d0 ff ff       	call   104920 <__sprint_r>
  107907:	85 c0                	test   %eax,%eax
  107909:	0f 85 f1 f2 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  10790f:	83 eb 10             	sub    $0x10,%ebx
  107912:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
  107919:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
  10791f:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
  107926:	83 fb 10             	cmp    $0x10,%ebx
  107929:	7f 95                	jg     1078c0 <_vfprintf_r+0x1180>
  10792b:	41 89 d9             	mov    %ebx,%r9d
  10792e:	44 8b 9d 04 fe ff ff 	mov    -0x1fc(%rbp),%r11d
  107935:	48 89 cb             	mov    %rcx,%rbx
  107938:	44 8b 95 00 fe ff ff 	mov    -0x200(%rbp),%r10d
  10793f:	48 8b 8d 28 fe ff ff 	mov    -0x1d8(%rbp),%rcx
  107946:	44 8b 85 fc fd ff ff 	mov    -0x204(%rbp),%r8d
  10794d:	4d 63 c9             	movslq %r9d,%r9
  107950:	83 c0 01             	add    $0x1,%eax
  107953:	48 c7 03 e0 d2 11 00 	movq   $0x11d2e0,(%rbx)
  10795a:	48 83 c3 10          	add    $0x10,%rbx
  10795e:	4c 89 4b f8          	mov    %r9,-0x8(%rbx)
  107962:	49 01 d1             	add    %rdx,%r9
  107965:	4c 89 8d d0 fe ff ff 	mov    %r9,-0x130(%rbp)
  10796c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
  107972:	83 f8 07             	cmp    $0x7,%eax
  107975:	0f 8e 58 f0 ff ff    	jle    1069d3 <_vfprintf_r+0x293>
  10797b:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  107982:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  107989:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  107990:	44 89 85 fc fd ff ff 	mov    %r8d,-0x204(%rbp)
  107997:	44 89 95 00 fe ff ff 	mov    %r10d,-0x200(%rbp)
  10799e:	44 89 9d 04 fe ff ff 	mov    %r11d,-0x1fc(%rbp)
  1079a5:	48 89 8d 28 fe ff ff 	mov    %rcx,-0x1d8(%rbp)
  1079ac:	e8 6f cf ff ff       	call   104920 <__sprint_r>
  1079b1:	85 c0                	test   %eax,%eax
  1079b3:	0f 85 47 f2 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  1079b9:	44 8b 85 fc fd ff ff 	mov    -0x204(%rbp),%r8d
  1079c0:	44 8b 95 00 fe ff ff 	mov    -0x200(%rbp),%r10d
  1079c7:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  1079ce:	44 8b 9d 04 fe ff ff 	mov    -0x1fc(%rbp),%r11d
  1079d5:	48 8b 8d 28 fe ff ff 	mov    -0x1d8(%rbp),%rcx
  1079dc:	e9 f2 ef ff ff       	jmp    1069d3 <_vfprintf_r+0x293>
  1079e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  1079e8:	8b b5 a8 fe ff ff    	mov    -0x158(%rbp),%esi
  1079ee:	85 f6                	test   %esi,%esi
  1079f0:	0f 8f 8c 04 00 00    	jg     107e82 <_vfprintf_r+0x1742>
  1079f6:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  1079fd:	8b bd c8 fe ff ff    	mov    -0x138(%rbp),%edi
  107a03:	48 83 c3 10          	add    $0x10,%rbx
  107a07:	48 c7 43 f0 7d f7 11 	movq   $0x11f77d,-0x10(%rbx)
  107a0e:	00 
  107a0f:	48 c7 43 f8 01 00 00 	movq   $0x1,-0x8(%rbx)
  107a16:	00 
  107a17:	48 83 c0 01          	add    $0x1,%rax
  107a1b:	8d 57 01             	lea    0x1(%rdi),%edx
  107a1e:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  107a25:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  107a2b:	83 fa 07             	cmp    $0x7,%edx
  107a2e:	0f 8f b8 19 00 00    	jg     1093ec <_vfprintf_r+0x2cac>
  107a34:	8b bd 58 fe ff ff    	mov    -0x1a8(%rbp),%edi
  107a3a:	09 f7                	or     %esi,%edi
  107a3c:	0f 84 ee 1a 00 00    	je     109530 <_vfprintf_r+0x2df0>
  107a42:	48 8b bd 30 fe ff ff 	mov    -0x1d0(%rbp),%rdi
  107a49:	48 83 c3 10          	add    $0x10,%rbx
  107a4d:	48 89 7b f0          	mov    %rdi,-0x10(%rbx)
  107a51:	48 8b bd 38 fe ff ff 	mov    -0x1c8(%rbp),%rdi
  107a58:	48 01 f8             	add    %rdi,%rax
  107a5b:	48 89 7b f8          	mov    %rdi,-0x8(%rbx)
  107a5f:	8b bd c8 fe ff ff    	mov    -0x138(%rbp),%edi
  107a65:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  107a6c:	8d 57 01             	lea    0x1(%rdi),%edx
  107a6f:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  107a75:	83 fa 07             	cmp    $0x7,%edx
  107a78:	0f 8f ef 19 00 00    	jg     10946d <_vfprintf_r+0x2d2d>
  107a7e:	85 f6                	test   %esi,%esi
  107a80:	0f 88 98 1c 00 00    	js     10971e <_vfprintf_r+0x2fde>
  107a86:	48 89 0b             	mov    %rcx,(%rbx)
  107a89:	48 63 8d 58 fe ff ff 	movslq -0x1a8(%rbp),%rcx
  107a90:	48 89 4b 08          	mov    %rcx,0x8(%rbx)
  107a94:	48 01 c8             	add    %rcx,%rax
  107a97:	83 c2 01             	add    $0x1,%edx
  107a9a:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  107aa1:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  107aa7:	83 fa 07             	cmp    $0x7,%edx
  107aaa:	0f 8e fd ef ff ff    	jle    106aad <_vfprintf_r+0x36d>
  107ab0:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  107ab7:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  107abe:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  107ac5:	44 89 85 70 fe ff ff 	mov    %r8d,-0x190(%rbp)
  107acc:	44 89 9d 78 fe ff ff 	mov    %r11d,-0x188(%rbp)
  107ad3:	e8 48 ce ff ff       	call   104920 <__sprint_r>
  107ad8:	85 c0                	test   %eax,%eax
  107ada:	0f 85 20 f1 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  107ae0:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  107ae7:	44 8b 9d 78 fe ff ff 	mov    -0x188(%rbp),%r11d
  107aee:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  107af5:	44 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%r8d
  107afc:	e9 b0 ef ff ff       	jmp    106ab1 <_vfprintf_r+0x371>
  107b01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  107b08:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  107b0f:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  107b16:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  107b1d:	44 89 85 fc fd ff ff 	mov    %r8d,-0x204(%rbp)
  107b24:	44 89 95 00 fe ff ff 	mov    %r10d,-0x200(%rbp)
  107b2b:	44 89 9d 04 fe ff ff 	mov    %r11d,-0x1fc(%rbp)
  107b32:	48 89 8d 28 fe ff ff 	mov    %rcx,-0x1d8(%rbp)
  107b39:	e8 e2 cd ff ff       	call   104920 <__sprint_r>
  107b3e:	85 c0                	test   %eax,%eax
  107b40:	0f 85 ba f0 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  107b46:	44 8b 85 fc fd ff ff 	mov    -0x204(%rbp),%r8d
  107b4d:	44 8b 95 00 fe ff ff 	mov    -0x200(%rbp),%r10d
  107b54:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  107b5b:	44 8b 9d 04 fe ff ff 	mov    -0x1fc(%rbp),%r11d
  107b62:	48 8b 8d 28 fe ff ff 	mov    -0x1d8(%rbp),%rcx
  107b69:	e9 a5 ee ff ff       	jmp    106a13 <_vfprintf_r+0x2d3>
  107b6e:	66 90                	xchg   %ax,%ax
  107b70:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  107b77:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  107b7e:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  107b85:	44 89 85 00 fe ff ff 	mov    %r8d,-0x200(%rbp)
  107b8c:	44 89 95 04 fe ff ff 	mov    %r10d,-0x1fc(%rbp)
  107b93:	44 89 9d 28 fe ff ff 	mov    %r11d,-0x1d8(%rbp)
  107b9a:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
  107ba1:	e8 7a cd ff ff       	call   104920 <__sprint_r>
  107ba6:	85 c0                	test   %eax,%eax
  107ba8:	0f 85 52 f0 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  107bae:	44 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%r8d
  107bb5:	44 8b 95 04 fe ff ff 	mov    -0x1fc(%rbp),%r10d
  107bbc:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  107bc3:	44 8b 9d 28 fe ff ff 	mov    -0x1d8(%rbp),%r11d
  107bca:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  107bd1:	e9 7e ee ff ff       	jmp    106a54 <_vfprintf_r+0x314>
  107bd6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  107bdd:	00 00 00 
  107be0:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  107be6:	41 83 fc 10          	cmp    $0x10,%r12d
  107bea:	0f 8e 97 00 00 00    	jle    107c87 <_vfprintf_r+0x1547>
  107bf0:	48 89 d9             	mov    %rbx,%rcx
  107bf3:	45 89 e5             	mov    %r12d,%r13d
  107bf6:	4c 8b bd 90 fe ff ff 	mov    -0x170(%rbp),%r15
  107bfd:	44 89 db             	mov    %r11d,%ebx
  107c00:	45 89 c4             	mov    %r8d,%r12d
  107c03:	eb 0d                	jmp    107c12 <_vfprintf_r+0x14d2>
  107c05:	0f 1f 00             	nopl   (%rax)
  107c08:	41 83 ed 10          	sub    $0x10,%r13d
  107c0c:	41 83 fd 10          	cmp    $0x10,%r13d
  107c10:	7e 69                	jle    107c7b <_vfprintf_r+0x153b>
  107c12:	48 83 c0 10          	add    $0x10,%rax
  107c16:	83 c2 01             	add    $0x1,%edx
  107c19:	48 83 c1 10          	add    $0x10,%rcx
  107c1d:	48 c7 41 f0 e0 d2 11 	movq   $0x11d2e0,-0x10(%rcx)
  107c24:	00 
  107c25:	48 c7 41 f8 10 00 00 	movq   $0x10,-0x8(%rcx)
  107c2c:	00 
  107c2d:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  107c34:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  107c3a:	83 fa 07             	cmp    $0x7,%edx
  107c3d:	7e c9                	jle    107c08 <_vfprintf_r+0x14c8>
  107c3f:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  107c46:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  107c4d:	4c 89 fe             	mov    %r15,%rsi
  107c50:	e8 cb cc ff ff       	call   104920 <__sprint_r>
  107c55:	85 c0                	test   %eax,%eax
  107c57:	0f 85 a3 ef ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  107c5d:	41 83 ed 10          	sub    $0x10,%r13d
  107c61:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  107c68:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  107c6e:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
  107c75:	41 83 fd 10          	cmp    $0x10,%r13d
  107c79:	7f 97                	jg     107c12 <_vfprintf_r+0x14d2>
  107c7b:	41 89 db             	mov    %ebx,%r11d
  107c7e:	45 89 e0             	mov    %r12d,%r8d
  107c81:	48 89 cb             	mov    %rcx,%rbx
  107c84:	45 89 ec             	mov    %r13d,%r12d
  107c87:	4d 63 e4             	movslq %r12d,%r12
  107c8a:	83 c2 01             	add    $0x1,%edx
  107c8d:	48 c7 03 e0 d2 11 00 	movq   $0x11d2e0,(%rbx)
  107c94:	4c 01 e0             	add    %r12,%rax
  107c97:	4c 89 63 08          	mov    %r12,0x8(%rbx)
  107c9b:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  107ca2:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  107ca8:	83 fa 07             	cmp    $0x7,%edx
  107cab:	0f 8e 15 ee ff ff    	jle    106ac6 <_vfprintf_r+0x386>
  107cb1:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  107cb8:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  107cbf:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  107cc6:	44 89 85 70 fe ff ff 	mov    %r8d,-0x190(%rbp)
  107ccd:	44 89 9d 78 fe ff ff 	mov    %r11d,-0x188(%rbp)
  107cd4:	e8 47 cc ff ff       	call   104920 <__sprint_r>
  107cd9:	85 c0                	test   %eax,%eax
  107cdb:	0f 85 1f ef ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  107ce1:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  107ce8:	44 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%r8d
  107cef:	44 8b 9d 78 fe ff ff 	mov    -0x188(%rbp),%r11d
  107cf6:	e9 cb ed ff ff       	jmp    106ac6 <_vfprintf_r+0x386>
  107cfb:	41 f6 c7 01          	test   $0x1,%r15b
  107cff:	0f 85 58 fa ff ff    	jne    10775d <_vfprintf_r+0x101d>
  107d05:	83 fa 07             	cmp    $0x7,%edx
  107d08:	0f 8e dd fa ff ff    	jle    1077eb <_vfprintf_r+0x10ab>
  107d0e:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  107d15:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  107d1c:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  107d23:	44 89 85 70 fe ff ff 	mov    %r8d,-0x190(%rbp)
  107d2a:	44 89 9d 78 fe ff ff 	mov    %r11d,-0x188(%rbp)
  107d31:	e8 ea cb ff ff       	call   104920 <__sprint_r>
  107d36:	85 c0                	test   %eax,%eax
  107d38:	0f 85 c2 ee ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  107d3e:	48 8b bd d0 fe ff ff 	mov    -0x130(%rbp),%rdi
  107d45:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  107d4b:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  107d52:	44 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%r8d
  107d59:	44 8b 9d 78 fe ff ff 	mov    -0x188(%rbp),%r11d
  107d60:	e9 86 fa ff ff       	jmp    1077eb <_vfprintf_r+0x10ab>
  107d65:	83 bd 58 fe ff ff 01 	cmpl   $0x1,-0x1a8(%rbp)
  107d6c:	0f 8e 79 fa ff ff    	jle    1077eb <_vfprintf_r+0x10ab>
  107d72:	83 bd 58 fe ff ff 11 	cmpl   $0x11,-0x1a8(%rbp)
  107d79:	0f 8e 6e 04 00 00    	jle    1081ed <_vfprintf_r+0x1aad>
  107d7f:	44 89 85 78 fe ff ff 	mov    %r8d,-0x188(%rbp)
  107d86:	4c 8b a5 90 fe ff ff 	mov    -0x170(%rbp),%r12
  107d8d:	45 89 dd             	mov    %r11d,%r13d
  107d90:	eb 12                	jmp    107da4 <_vfprintf_r+0x1664>
  107d92:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  107d98:	83 eb 10             	sub    $0x10,%ebx
  107d9b:	83 fb 10             	cmp    $0x10,%ebx
  107d9e:	0f 8e 3f 04 00 00    	jle    1081e3 <_vfprintf_r+0x1aa3>
  107da4:	48 83 c7 10          	add    $0x10,%rdi
  107da8:	83 c2 01             	add    $0x1,%edx
  107dab:	48 83 c6 10          	add    $0x10,%rsi
  107daf:	48 c7 46 f0 d0 d2 11 	movq   $0x11d2d0,-0x10(%rsi)
  107db6:	00 
  107db7:	48 c7 46 f8 10 00 00 	movq   $0x10,-0x8(%rsi)
  107dbe:	00 
  107dbf:	48 89 bd d0 fe ff ff 	mov    %rdi,-0x130(%rbp)
  107dc6:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  107dcc:	83 fa 07             	cmp    $0x7,%edx
  107dcf:	7e c7                	jle    107d98 <_vfprintf_r+0x1658>
  107dd1:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  107dd8:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  107ddf:	4c 89 e6             	mov    %r12,%rsi
  107de2:	e8 39 cb ff ff       	call   104920 <__sprint_r>
  107de7:	85 c0                	test   %eax,%eax
  107de9:	0f 85 11 ee ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  107def:	48 8b bd d0 fe ff ff 	mov    -0x130(%rbp),%rdi
  107df6:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  107dfc:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  107e03:	eb 93                	jmp    107d98 <_vfprintf_r+0x1658>
  107e05:	f6 c2 10             	test   $0x10,%dl
  107e08:	0f 84 78 03 00 00    	je     108186 <_vfprintf_r+0x1a46>
  107e0e:	83 f8 2f             	cmp    $0x2f,%eax
  107e11:	0f 87 14 0c 00 00    	ja     108a2b <_vfprintf_r+0x22eb>
  107e17:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  107e1e:	89 c1                	mov    %eax,%ecx
  107e20:	83 c0 08             	add    $0x8,%eax
  107e23:	89 06                	mov    %eax,(%rsi)
  107e25:	48 03 4e 10          	add    0x10(%rsi),%rcx
  107e29:	e9 27 f2 ff ff       	jmp    107055 <_vfprintf_r+0x915>
  107e2e:	41 f6 c7 10          	test   $0x10,%r15b
  107e32:	0f 84 7a 03 00 00    	je     1081b2 <_vfprintf_r+0x1a72>
  107e38:	83 f8 2f             	cmp    $0x2f,%eax
  107e3b:	0f 87 b2 f2 ff ff    	ja     1070f3 <_vfprintf_r+0x9b3>
  107e41:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  107e48:	89 c2                	mov    %eax,%edx
  107e4a:	83 c0 08             	add    $0x8,%eax
  107e4d:	89 06                	mov    %eax,(%rsi)
  107e4f:	48 03 56 10          	add    0x10(%rsi),%rdx
  107e53:	e9 ae f2 ff ff       	jmp    107106 <_vfprintf_r+0x9c6>
  107e58:	41 f6 c7 10          	test   $0x10,%r15b
  107e5c:	0f 84 ce 02 00 00    	je     108130 <_vfprintf_r+0x19f0>
  107e62:	83 f8 2f             	cmp    $0x2f,%eax
  107e65:	0f 87 3b f1 ff ff    	ja     106fa6 <_vfprintf_r+0x866>
  107e6b:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  107e72:	89 c2                	mov    %eax,%edx
  107e74:	83 c0 08             	add    $0x8,%eax
  107e77:	89 06                	mov    %eax,(%rsi)
  107e79:	48 03 56 10          	add    0x10(%rsi),%rdx
  107e7d:	e9 37 f1 ff ff       	jmp    106fb9 <_vfprintf_r+0x879>
  107e82:	48 63 85 58 fe ff ff 	movslq -0x1a8(%rbp),%rax
  107e89:	48 89 c7             	mov    %rax,%rdi
  107e8c:	4c 8d 2c 01          	lea    (%rcx,%rax,1),%r13
  107e90:	8b 85 60 fe ff ff    	mov    -0x1a0(%rbp),%eax
  107e96:	41 89 fc             	mov    %edi,%r12d
  107e99:	39 f8                	cmp    %edi,%eax
  107e9b:	44 0f 4e e0          	cmovle %eax,%r12d
  107e9f:	45 85 e4             	test   %r12d,%r12d
  107ea2:	7e 2e                	jle    107ed2 <_vfprintf_r+0x1792>
  107ea4:	49 63 c4             	movslq %r12d,%rax
  107ea7:	48 01 85 d0 fe ff ff 	add    %rax,-0x130(%rbp)
  107eae:	48 83 c3 10          	add    $0x10,%rbx
  107eb2:	48 89 43 f8          	mov    %rax,-0x8(%rbx)
  107eb6:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
  107ebc:	48 89 4b f0          	mov    %rcx,-0x10(%rbx)
  107ec0:	83 c0 01             	add    $0x1,%eax
  107ec3:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
  107ec9:	83 f8 07             	cmp    $0x7,%eax
  107ecc:	0f 8f 06 16 00 00    	jg     1094d8 <_vfprintf_r+0x2d98>
  107ed2:	31 c0                	xor    %eax,%eax
  107ed4:	45 85 e4             	test   %r12d,%r12d
  107ed7:	41 0f 49 c4          	cmovns %r12d,%eax
  107edb:	44 8b a5 60 fe ff ff 	mov    -0x1a0(%rbp),%r12d
  107ee2:	41 29 c4             	sub    %eax,%r12d
  107ee5:	45 85 e4             	test   %r12d,%r12d
  107ee8:	0f 8f d9 09 00 00    	jg     1088c7 <_vfprintf_r+0x2187>
  107eee:	4c 63 a5 60 fe ff ff 	movslq -0x1a0(%rbp),%r12
  107ef5:	49 01 cc             	add    %rcx,%r12
  107ef8:	41 f7 c7 00 04 00 00 	test   $0x400,%r15d
  107eff:	0f 85 61 11 00 00    	jne    109066 <_vfprintf_r+0x2926>
  107f05:	8b 8d a8 fe ff ff    	mov    -0x158(%rbp),%ecx
  107f0b:	8b bd 58 fe ff ff    	mov    -0x1a8(%rbp),%edi
  107f11:	39 f9                	cmp    %edi,%ecx
  107f13:	7c 0a                	jl     107f1f <_vfprintf_r+0x17df>
  107f15:	41 f6 c7 01          	test   $0x1,%r15b
  107f19:	0f 84 fe 0e 00 00    	je     108e1d <_vfprintf_r+0x26dd>
  107f1f:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
  107f26:	8b b5 c8 fe ff ff    	mov    -0x138(%rbp),%esi
  107f2c:	48 83 c3 10          	add    $0x10,%rbx
  107f30:	48 89 43 f0          	mov    %rax,-0x10(%rbx)
  107f34:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  107f3b:	8d 56 01             	lea    0x1(%rsi),%edx
  107f3e:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  107f44:	48 89 43 f8          	mov    %rax,-0x8(%rbx)
  107f48:	48 03 85 d0 fe ff ff 	add    -0x130(%rbp),%rax
  107f4f:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  107f56:	83 fa 07             	cmp    $0x7,%edx
  107f59:	0f 8f 1b 16 00 00    	jg     10957a <_vfprintf_r+0x2e3a>
  107f5f:	8b 95 58 fe ff ff    	mov    -0x1a8(%rbp),%edx
  107f65:	4d 29 e5             	sub    %r12,%r13
  107f68:	29 ca                	sub    %ecx,%edx
  107f6a:	44 39 ea             	cmp    %r13d,%edx
  107f6d:	44 0f 4e ea          	cmovle %edx,%r13d
  107f71:	45 85 ed             	test   %r13d,%r13d
  107f74:	7e 30                	jle    107fa6 <_vfprintf_r+0x1866>
  107f76:	8b b5 c8 fe ff ff    	mov    -0x138(%rbp),%esi
  107f7c:	49 63 cd             	movslq %r13d,%rcx
  107f7f:	4c 89 23             	mov    %r12,(%rbx)
  107f82:	48 83 c3 10          	add    $0x10,%rbx
  107f86:	48 01 c8             	add    %rcx,%rax
  107f89:	48 89 4b f8          	mov    %rcx,-0x8(%rbx)
  107f8d:	8d 4e 01             	lea    0x1(%rsi),%ecx
  107f90:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  107f97:	89 8d c8 fe ff ff    	mov    %ecx,-0x138(%rbp)
  107f9d:	83 f9 07             	cmp    $0x7,%ecx
  107fa0:	0f 8f f4 16 00 00    	jg     10969a <_vfprintf_r+0x2f5a>
  107fa6:	31 c9                	xor    %ecx,%ecx
  107fa8:	45 85 ed             	test   %r13d,%r13d
  107fab:	44 0f 48 e9          	cmovs  %ecx,%r13d
  107faf:	44 29 ea             	sub    %r13d,%edx
  107fb2:	4c 63 e2             	movslq %edx,%r12
  107fb5:	45 85 e4             	test   %r12d,%r12d
  107fb8:	0f 8e f3 ea ff ff    	jle    106ab1 <_vfprintf_r+0x371>
  107fbe:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  107fc4:	41 83 fc 10          	cmp    $0x10,%r12d
  107fc8:	0f 8e 93 14 00 00    	jle    109461 <_vfprintf_r+0x2d21>
  107fce:	48 89 d9             	mov    %rbx,%rcx
  107fd1:	44 89 9d 78 fe ff ff 	mov    %r11d,-0x188(%rbp)
  107fd8:	44 89 e3             	mov    %r12d,%ebx
  107fdb:	45 89 c4             	mov    %r8d,%r12d
  107fde:	4c 8b ad 90 fe ff ff 	mov    -0x170(%rbp),%r13
  107fe5:	eb 15                	jmp    107ffc <_vfprintf_r+0x18bc>
  107fe7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  107fee:	00 00 
  107ff0:	83 eb 10             	sub    $0x10,%ebx
  107ff3:	83 fb 10             	cmp    $0x10,%ebx
  107ff6:	0f 8e 55 14 00 00    	jle    109451 <_vfprintf_r+0x2d11>
  107ffc:	48 83 c0 10          	add    $0x10,%rax
  108000:	83 c2 01             	add    $0x1,%edx
  108003:	48 83 c1 10          	add    $0x10,%rcx
  108007:	48 c7 41 f0 d0 d2 11 	movq   $0x11d2d0,-0x10(%rcx)
  10800e:	00 
  10800f:	48 c7 41 f8 10 00 00 	movq   $0x10,-0x8(%rcx)
  108016:	00 
  108017:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  10801e:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  108024:	83 fa 07             	cmp    $0x7,%edx
  108027:	7e c7                	jle    107ff0 <_vfprintf_r+0x18b0>
  108029:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  108030:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  108037:	4c 89 ee             	mov    %r13,%rsi
  10803a:	e8 e1 c8 ff ff       	call   104920 <__sprint_r>
  10803f:	85 c0                	test   %eax,%eax
  108041:	0f 85 b9 eb ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  108047:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  10804e:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  108054:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
  10805b:	eb 93                	jmp    107ff0 <_vfprintf_r+0x18b0>
  10805d:	45 89 e3             	mov    %r12d,%r11d
  108060:	e9 72 f0 ff ff       	jmp    1070d7 <_vfprintf_r+0x997>
  108065:	48 89 fb             	mov    %rdi,%rbx
  108068:	48 8b bf a0 00 00 00 	mov    0xa0(%rdi),%rdi
  10806f:	e8 42 9d 00 00       	call   111db6 <__retarget_lock_acquire_recursive>
  108074:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  108078:	e9 3f e7 ff ff       	jmp    1067bc <_vfprintf_r+0x7c>
  10807d:	89 c2                	mov    %eax,%edx
  10807f:	83 c0 08             	add    $0x8,%eax
  108082:	48 03 56 10          	add    0x10(%rsi),%rdx
  108086:	89 06                	mov    %eax,(%rsi)
  108088:	e9 2c ef ff ff       	jmp    106fb9 <_vfprintf_r+0x879>
  10808d:	89 c1                	mov    %eax,%ecx
  10808f:	83 c0 08             	add    $0x8,%eax
  108092:	48 03 4f 10          	add    0x10(%rdi),%rcx
  108096:	89 07                	mov    %eax,(%rdi)
  108098:	e9 b8 ef ff ff       	jmp    107055 <_vfprintf_r+0x915>
  10809d:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  1080a4:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  1080a8:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1080ac:	48 89 47 08          	mov    %rax,0x8(%rdi)
  1080b0:	e9 fc f0 ff ff       	jmp    1071b1 <_vfprintf_r+0xa71>
  1080b5:	89 c2                	mov    %eax,%edx
  1080b7:	83 c0 08             	add    $0x8,%eax
  1080ba:	48 03 57 10          	add    0x10(%rdi),%rdx
  1080be:	89 07                	mov    %eax,(%rdi)
  1080c0:	e9 41 f0 ff ff       	jmp    107106 <_vfprintf_r+0x9c6>
  1080c5:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  1080cc:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  1080d0:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1080d4:	48 89 46 08          	mov    %rax,0x8(%rsi)
  1080d8:	e9 2a ee ff ff       	jmp    106f07 <_vfprintf_r+0x7c7>
  1080dd:	41 f6 c7 10          	test   $0x10,%r15b
  1080e1:	0f 84 5c 09 00 00    	je     108a43 <_vfprintf_r+0x2303>
  1080e7:	83 f8 2f             	cmp    $0x2f,%eax
  1080ea:	0f 86 5f 0d 00 00    	jbe    108e4f <_vfprintf_r+0x270f>
  1080f0:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  1080f7:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  1080fb:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1080ff:	48 89 47 08          	mov    %rax,0x8(%rdi)
  108103:	e9 a9 ed ff ff       	jmp    106eb1 <_vfprintf_r+0x771>
  108108:	48 8b 46 08          	mov    0x8(%rsi),%rax
  10810c:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
  108113:	48 83 c0 0f          	add    $0xf,%rax
  108117:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  10811b:	48 8d 50 10          	lea    0x10(%rax),%rdx
  10811f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
  108123:	db 28                	fldt   (%rax)
  108125:	dd 9d 40 fe ff ff    	fstpl  -0x1c0(%rbp)
  10812b:	e9 62 eb ff ff       	jmp    106c92 <_vfprintf_r+0x552>
  108130:	41 f6 c7 40          	test   $0x40,%r15b
  108134:	0f 84 c1 08 00 00    	je     1089fb <_vfprintf_r+0x22bb>
  10813a:	83 f8 2f             	cmp    $0x2f,%eax
  10813d:	0f 86 23 0d 00 00    	jbe    108e66 <_vfprintf_r+0x2726>
  108143:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  10814a:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  10814e:	48 8d 42 08          	lea    0x8(%rdx),%rax
  108152:	48 89 47 08          	mov    %rax,0x8(%rdi)
  108156:	0f b7 32             	movzwl (%rdx),%esi
  108159:	e9 5e ee ff ff       	jmp    106fbc <_vfprintf_r+0x87c>
  10815e:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  108165:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  108169:	48 8d 42 08          	lea    0x8(%rdx),%rax
  10816d:	48 89 46 08          	mov    %rax,0x8(%rsi)
  108171:	e9 fc eb ff ff       	jmp    106d72 <_vfprintf_r+0x632>
  108176:	89 c2                	mov    %eax,%edx
  108178:	83 c0 08             	add    $0x8,%eax
  10817b:	48 03 56 10          	add    0x10(%rsi),%rdx
  10817f:	89 06                	mov    %eax,(%rsi)
  108181:	e9 3b ec ff ff       	jmp    106dc1 <_vfprintf_r+0x681>
  108186:	f6 c2 40             	test   $0x40,%dl
  108189:	0f 84 40 08 00 00    	je     1089cf <_vfprintf_r+0x228f>
  10818f:	83 f8 2f             	cmp    $0x2f,%eax
  108192:	0f 87 9f 0c 00 00    	ja     108e37 <_vfprintf_r+0x26f7>
  108198:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  10819f:	89 c1                	mov    %eax,%ecx
  1081a1:	83 c0 08             	add    $0x8,%eax
  1081a4:	89 06                	mov    %eax,(%rsi)
  1081a6:	48 03 4e 10          	add    0x10(%rsi),%rcx
  1081aa:	0f b7 31             	movzwl (%rcx),%esi
  1081ad:	e9 a6 ee ff ff       	jmp    107058 <_vfprintf_r+0x918>
  1081b2:	41 f6 c7 40          	test   $0x40,%r15b
  1081b6:	0f 84 df 07 00 00    	je     10899b <_vfprintf_r+0x225b>
  1081bc:	83 f8 2f             	cmp    $0x2f,%eax
  1081bf:	0f 87 b8 0c 00 00    	ja     108e7d <_vfprintf_r+0x273d>
  1081c5:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  1081cc:	89 c2                	mov    %eax,%edx
  1081ce:	83 c0 08             	add    $0x8,%eax
  1081d1:	89 06                	mov    %eax,(%rsi)
  1081d3:	48 03 56 10          	add    0x10(%rsi),%rdx
  1081d7:	48 0f bf 32          	movswq (%rdx),%rsi
  1081db:	48 89 f0             	mov    %rsi,%rax
  1081de:	e9 29 ef ff ff       	jmp    10710c <_vfprintf_r+0x9cc>
  1081e3:	44 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%r8d
  1081ea:	45 89 eb             	mov    %r13d,%r11d
  1081ed:	48 63 db             	movslq %ebx,%rbx
  1081f0:	83 c2 01             	add    $0x1,%edx
  1081f3:	48 c7 06 d0 d2 11 00 	movq   $0x11d2d0,(%rsi)
  1081fa:	48 01 df             	add    %rbx,%rdi
  1081fd:	48 89 5e 08          	mov    %rbx,0x8(%rsi)
  108201:	48 89 bd d0 fe ff ff 	mov    %rdi,-0x130(%rbp)
  108208:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  10820e:	83 fa 07             	cmp    $0x7,%edx
  108211:	0f 8e d0 f5 ff ff    	jle    1077e7 <_vfprintf_r+0x10a7>
  108217:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  10821e:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  108225:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10822c:	44 89 85 70 fe ff ff 	mov    %r8d,-0x190(%rbp)
  108233:	44 89 9d 78 fe ff ff 	mov    %r11d,-0x188(%rbp)
  10823a:	e8 e1 c6 ff ff       	call   104920 <__sprint_r>
  10823f:	85 c0                	test   %eax,%eax
  108241:	0f 85 b9 e9 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  108247:	48 8b bd d0 fe ff ff 	mov    -0x130(%rbp),%rdi
  10824e:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  108254:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  10825b:	44 8b 9d 78 fe ff ff 	mov    -0x188(%rbp),%r11d
  108262:	44 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%r8d
  108269:	e9 7d f5 ff ff       	jmp    1077eb <_vfprintf_r+0x10ab>
  10826e:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  108275:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  10827c:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  108283:	44 89 85 70 fe ff ff 	mov    %r8d,-0x190(%rbp)
  10828a:	44 89 9d 78 fe ff ff 	mov    %r11d,-0x188(%rbp)
  108291:	e8 8a c6 ff ff       	call   104920 <__sprint_r>
  108296:	85 c0                	test   %eax,%eax
  108298:	0f 85 62 e9 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  10829e:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  1082a5:	44 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%r8d
  1082ac:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  1082b3:	44 8b 9d 78 fe ff ff 	mov    -0x188(%rbp),%r11d
  1082ba:	e9 d2 f0 ff ff       	jmp    107391 <_vfprintf_r+0xc51>
  1082bf:	45 0f be 6e 01       	movsbl 0x1(%r14),%r13d
  1082c4:	41 83 cf 20          	or     $0x20,%r15d
  1082c8:	49 83 c6 01          	add    $0x1,%r14
  1082cc:	e9 22 e6 ff ff       	jmp    1068f3 <_vfprintf_r+0x1b3>
  1082d1:	45 0f be 6e 01       	movsbl 0x1(%r14),%r13d
  1082d6:	41 81 cf 00 02 00 00 	or     $0x200,%r15d
  1082dd:	49 83 c6 01          	add    $0x1,%r14
  1082e1:	e9 0d e6 ff ff       	jmp    1068f3 <_vfprintf_r+0x1b3>
  1082e6:	48 c7 85 20 fe ff ff 	movq   $0x120348,-0x1e0(%rbp)
  1082ed:	48 03 12 00 
  1082f1:	45 89 e3             	mov    %r12d,%r11d
  1082f4:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  1082fb:	8b 06                	mov    (%rsi),%eax
  1082fd:	41 f6 c7 20          	test   $0x20,%r15b
  108301:	0f 84 e4 00 00 00    	je     1083eb <_vfprintf_r+0x1cab>
  108307:	83 f8 2f             	cmp    $0x2f,%eax
  10830a:	0f 87 01 01 00 00    	ja     108411 <_vfprintf_r+0x1cd1>
  108310:	89 c2                	mov    %eax,%edx
  108312:	83 c0 08             	add    $0x8,%eax
  108315:	48 03 56 10          	add    0x10(%rsi),%rdx
  108319:	89 06                	mov    %eax,(%rsi)
  10831b:	48 8b 32             	mov    (%rdx),%rsi
  10831e:	48 85 f6             	test   %rsi,%rsi
  108321:	74 18                	je     10833b <_vfprintf_r+0x1bfb>
  108323:	41 f6 c7 01          	test   $0x1,%r15b
  108327:	74 12                	je     10833b <_vfprintf_r+0x1bfb>
  108329:	c6 85 a6 fe ff ff 30 	movb   $0x30,-0x15a(%rbp)
  108330:	41 83 cf 02          	or     $0x2,%r15d
  108334:	44 88 ad a7 fe ff ff 	mov    %r13b,-0x159(%rbp)
  10833b:	44 89 fa             	mov    %r15d,%edx
  10833e:	80 e6 fb             	and    $0xfb,%dh
  108341:	e9 e9 eb ff ff       	jmp    106f2f <_vfprintf_r+0x7ef>
  108346:	45 89 e3             	mov    %r12d,%r11d
  108349:	44 89 fa             	mov    %r15d,%edx
  10834c:	e9 d6 ec ff ff       	jmp    107027 <_vfprintf_r+0x8e7>
  108351:	48 c7 85 20 fe ff ff 	movq   $0x120359,-0x1e0(%rbp)
  108358:	59 03 12 00 
  10835c:	45 89 e3             	mov    %r12d,%r11d
  10835f:	eb 93                	jmp    1082f4 <_vfprintf_r+0x1bb4>
  108361:	41 0f b6 06          	movzbl (%r14),%eax
  108365:	e9 5e ee ff ff       	jmp    1071c8 <_vfprintf_r+0xa88>
  10836a:	45 89 e3             	mov    %r12d,%r11d
  10836d:	e9 18 ec ff ff       	jmp    106f8a <_vfprintf_r+0x84a>
  108372:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  108378:	45 31 d2             	xor    %r10d,%r10d
  10837b:	31 d2                	xor    %edx,%edx
  10837d:	48 8d 8d 44 ff ff ff 	lea    -0xbc(%rbp),%rcx
  108384:	45 31 e4             	xor    %r12d,%r12d
  108387:	e9 c4 ed ff ff       	jmp    107150 <_vfprintf_r+0xa10>
  10838c:	44 89 f8             	mov    %r15d,%eax
  10838f:	48 f7 de             	neg    %rsi
  108392:	c6 85 a5 fe ff ff 2d 	movb   $0x2d,-0x15b(%rbp)
  108399:	24 7f                	and    $0x7f,%al
  10839b:	41 83 fa ff          	cmp    $0xffffffff,%r10d
  10839f:	44 0f 45 f8          	cmovne %eax,%r15d
  1083a3:	48 83 fe 09          	cmp    $0x9,%rsi
  1083a7:	0f 87 7f 03 00 00    	ja     10872c <_vfprintf_r+0x1fec>
  1083ad:	83 c6 30             	add    $0x30,%esi
  1083b0:	0f b6 95 a5 fe ff ff 	movzbl -0x15b(%rbp),%edx
  1083b7:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  1083bd:	48 8d 8d 43 ff ff ff 	lea    -0xbd(%rbp),%rcx
  1083c4:	40 88 b5 43 ff ff ff 	mov    %sil,-0xbd(%rbp)
  1083cb:	e9 80 ed ff ff       	jmp    107150 <_vfprintf_r+0xa10>
  1083d0:	45 31 d2             	xor    %r10d,%r10d
  1083d3:	31 d2                	xor    %edx,%edx
  1083d5:	48 8d 8d 44 ff ff ff 	lea    -0xbc(%rbp),%rcx
  1083dc:	e9 6f ed ff ff       	jmp    107150 <_vfprintf_r+0xa10>
  1083e1:	41 29 cc             	sub    %ecx,%r12d
  1083e4:	31 d2                	xor    %edx,%edx
  1083e6:	e9 65 ed ff ff       	jmp    107150 <_vfprintf_r+0xa10>
  1083eb:	41 f6 c7 10          	test   $0x10,%r15b
  1083ef:	0f 84 08 01 00 00    	je     1084fd <_vfprintf_r+0x1dbd>
  1083f5:	83 f8 2f             	cmp    $0x2f,%eax
  1083f8:	77 17                	ja     108411 <_vfprintf_r+0x1cd1>
  1083fa:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  108401:	89 c2                	mov    %eax,%edx
  108403:	83 c0 08             	add    $0x8,%eax
  108406:	89 06                	mov    %eax,(%rsi)
  108408:	48 03 56 10          	add    0x10(%rsi),%rdx
  10840c:	e9 0a ff ff ff       	jmp    10831b <_vfprintf_r+0x1bdb>
  108411:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  108418:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  10841c:	48 8d 42 08          	lea    0x8(%rdx),%rax
  108420:	48 89 47 08          	mov    %rax,0x8(%rdi)
  108424:	e9 f2 fe ff ff       	jmp    10831b <_vfprintf_r+0x1bdb>
  108429:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  108430:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  108437:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10843e:	44 89 85 60 fe ff ff 	mov    %r8d,-0x1a0(%rbp)
  108445:	44 89 9d 70 fe ff ff 	mov    %r11d,-0x190(%rbp)
  10844c:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
  108453:	e8 c8 c4 ff ff       	call   104920 <__sprint_r>
  108458:	85 c0                	test   %eax,%eax
  10845a:	0f 85 a0 e7 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  108460:	48 8b bd d0 fe ff ff 	mov    -0x130(%rbp),%rdi
  108467:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  10846d:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  108474:	44 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%r8d
  10847b:	44 8b 9d 70 fe ff ff 	mov    -0x190(%rbp),%r11d
  108482:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  108489:	e9 0e f3 ff ff       	jmp    10779c <_vfprintf_r+0x105c>
  10848e:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  108495:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  10849c:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1084a3:	44 89 85 60 fe ff ff 	mov    %r8d,-0x1a0(%rbp)
  1084aa:	44 89 9d 70 fe ff ff 	mov    %r11d,-0x190(%rbp)
  1084b1:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
  1084b8:	e8 63 c4 ff ff       	call   104920 <__sprint_r>
  1084bd:	85 c0                	test   %eax,%eax
  1084bf:	0f 85 3b e7 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  1084c5:	48 8b bd d0 fe ff ff 	mov    -0x130(%rbp),%rdi
  1084cc:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  1084d2:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  1084d9:	44 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%r8d
  1084e0:	44 8b 9d 70 fe ff ff 	mov    -0x190(%rbp),%r11d
  1084e7:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  1084ee:	e9 73 f2 ff ff       	jmp    107766 <_vfprintf_r+0x1026>
  1084f3:	44 89 fa             	mov    %r15d,%edx
  1084f6:	31 c0                	xor    %eax,%eax
  1084f8:	e9 74 eb ff ff       	jmp    107071 <_vfprintf_r+0x931>
  1084fd:	41 f6 c7 40          	test   $0x40,%r15b
  108501:	0f 84 98 05 00 00    	je     108a9f <_vfprintf_r+0x235f>
  108507:	83 f8 2f             	cmp    $0x2f,%eax
  10850a:	0f 87 f6 09 00 00    	ja     108f06 <_vfprintf_r+0x27c6>
  108510:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  108517:	89 c2                	mov    %eax,%edx
  108519:	83 c0 08             	add    $0x8,%eax
  10851c:	89 06                	mov    %eax,(%rsi)
  10851e:	48 03 56 10          	add    0x10(%rsi),%rdx
  108522:	0f b7 32             	movzwl (%rdx),%esi
  108525:	e9 f4 fd ff ff       	jmp    10831e <_vfprintf_r+0x1bde>
  10852a:	f2 0f 10 bd 40 fe ff 	movsd  -0x1c0(%rbp),%xmm7
  108531:	ff 
  108532:	66 0f 2e ff          	ucomisd %xmm7,%xmm7
  108536:	0f 8a 8f 15 00 00    	jp     109acb <_vfprintf_r+0x338b>
  10853c:	45 89 ec             	mov    %r13d,%r12d
  10853f:	41 83 e4 df          	and    $0xffffffdf,%r12d
  108543:	41 83 fc 41          	cmp    $0x41,%r12d
  108547:	0f 85 82 05 00 00    	jne    108acf <_vfprintf_r+0x238f>
  10854d:	41 83 fd 61          	cmp    $0x61,%r13d
  108551:	b8 78 00 00 00       	mov    $0x78,%eax
  108556:	ba 58 00 00 00       	mov    $0x58,%edx
  10855b:	c6 85 a6 fe ff ff 30 	movb   $0x30,-0x15a(%rbp)
  108562:	0f 45 c2             	cmovne %edx,%eax
  108565:	48 8d 8d e0 fe ff ff 	lea    -0x120(%rbp),%rcx
  10856c:	48 c7 85 88 fe ff ff 	movq   $0x0,-0x178(%rbp)
  108573:	00 00 00 00 
  108577:	88 85 a7 fe ff ff    	mov    %al,-0x159(%rbp)
  10857d:	41 83 fa 63          	cmp    $0x63,%r10d
  108581:	0f 8f 0b 0a 00 00    	jg     108f92 <_vfprintf_r+0x2852>
  108587:	f2 0f 10 95 40 fe ff 	movsd  -0x1c0(%rbp),%xmm2
  10858e:	ff 
  10858f:	c6 85 78 fe ff ff 2d 	movb   $0x2d,-0x188(%rbp)
  108596:	66 48 0f 7e d0       	movq   %xmm2,%rax
  10859b:	66 0f 28 c2          	movapd %xmm2,%xmm0
  10859f:	66 0f 57 05 49 4d 01 	xorpd  0x14d49(%rip),%xmm0        # 11d2f0 <blanks.1+0x10>
  1085a6:	00 
  1085a7:	48 c1 e8 20          	shr    $0x20,%rax
  1085ab:	85 c0                	test   %eax,%eax
  1085ad:	0f 89 b3 09 00 00    	jns    108f66 <_vfprintf_r+0x2826>
  1085b3:	48 8d bd a8 fe ff ff 	lea    -0x158(%rbp),%rdi
  1085ba:	44 89 95 58 fe ff ff 	mov    %r10d,-0x1a8(%rbp)
  1085c1:	44 89 9d 60 fe ff ff 	mov    %r11d,-0x1a0(%rbp)
  1085c8:	48 89 8d 70 fe ff ff 	mov    %rcx,-0x190(%rbp)
  1085cf:	e8 3c a6 ff ff       	call   102c10 <frexp>
  1085d4:	66 0f ef c9          	pxor   %xmm1,%xmm1
  1085d8:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
  1085df:	44 8b 9d 60 fe ff ff 	mov    -0x1a0(%rbp),%r11d
  1085e6:	f2 0f 59 05 ba 58 01 	mulsd  0x158ba(%rip),%xmm0        # 11dea8 <_ZTVN10__cxxabiv117__class_type_infoE+0x648>
  1085ed:	00 
  1085ee:	44 8b 95 58 fe ff ff 	mov    -0x1a8(%rbp),%r10d
  1085f5:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  1085f9:	7a 0c                	jp     108607 <_vfprintf_r+0x1ec7>
  1085fb:	75 0a                	jne    108607 <_vfprintf_r+0x1ec7>
  1085fd:	c7 85 a8 fe ff ff 01 	movl   $0x1,-0x158(%rbp)
  108604:	00 00 00 
  108607:	b8 48 03 12 00       	mov    $0x120348,%eax
  10860c:	41 83 fd 61          	cmp    $0x61,%r13d
  108610:	66 0f ef d2          	pxor   %xmm2,%xmm2
  108614:	bf 59 03 12 00       	mov    $0x120359,%edi
  108619:	48 0f 45 f8          	cmovne %rax,%rdi
  10861d:	44 89 d0             	mov    %r10d,%eax
  108620:	f2 0f 10 1d 88 58 01 	movsd  0x15888(%rip),%xmm3        # 11deb0 <_ZTVN10__cxxabiv117__class_type_infoE+0x650>
  108627:	00 
  108628:	4c 8d 4c 01 01       	lea    0x1(%rcx,%rax,1),%r9
  10862d:	48 89 c8             	mov    %rcx,%rax
  108630:	eb 0c                	jmp    10863e <_vfprintf_r+0x1efe>
  108632:	66 0f 2e c2          	ucomisd %xmm2,%xmm0
  108636:	7a 06                	jp     10863e <_vfprintf_r+0x1efe>
  108638:	0f 84 c4 15 00 00    	je     109c02 <_vfprintf_r+0x34c2>
  10863e:	f2 0f 59 c3          	mulsd  %xmm3,%xmm0
  108642:	66 0f ef c9          	pxor   %xmm1,%xmm1
  108646:	49 89 c0             	mov    %rax,%r8
  108649:	48 83 c0 01          	add    $0x1,%rax
  10864d:	f2 0f 2c d0          	cvttsd2si %xmm0,%edx
  108651:	f2 0f 2a ca          	cvtsi2sd %edx,%xmm1
  108655:	48 63 f2             	movslq %edx,%rsi
  108658:	0f b6 34 37          	movzbl (%rdi,%rsi,1),%esi
  10865c:	40 88 70 ff          	mov    %sil,-0x1(%rax)
  108660:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  108664:	49 39 c1             	cmp    %rax,%r9
  108667:	75 c9                	jne    108632 <_vfprintf_r+0x1ef2>
  108669:	be ff ff ff ff       	mov    $0xffffffff,%esi
  10866e:	f2 0f 10 0d 42 58 01 	movsd  0x15842(%rip),%xmm1        # 11deb8 <_ZTVN10__cxxabiv117__class_type_infoE+0x658>
  108675:	00 
  108676:	66 0f 2f c1          	comisd %xmm1,%xmm0
  10867a:	0f 87 79 14 00 00    	ja     109af9 <_vfprintf_r+0x33b9>
  108680:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  108684:	7a 0b                	jp     108691 <_vfprintf_r+0x1f51>
  108686:	75 09                	jne    108691 <_vfprintf_r+0x1f51>
  108688:	83 e2 01             	and    $0x1,%edx
  10868b:	0f 85 68 14 00 00    	jne    109af9 <_vfprintf_r+0x33b9>
  108691:	8d 56 01             	lea    0x1(%rsi),%edx
  108694:	48 63 d2             	movslq %edx,%rdx
  108697:	48 01 c2             	add    %rax,%rdx
  10869a:	85 f6                	test   %esi,%esi
  10869c:	78 0f                	js     1086ad <_vfprintf_r+0x1f6d>
  10869e:	48 83 c0 01          	add    $0x1,%rax
  1086a2:	c6 40 ff 30          	movb   $0x30,-0x1(%rax)
  1086a6:	48 39 c2             	cmp    %rax,%rdx
  1086a9:	75 f3                	jne    10869e <_vfprintf_r+0x1f5e>
  1086ab:	89 d0                	mov    %edx,%eax
  1086ad:	29 c8                	sub    %ecx,%eax
  1086af:	41 83 cf 02          	or     $0x2,%r15d
  1086b3:	be 01 00 00 00       	mov    $0x1,%esi
  1086b8:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%rbp)
  1086be:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
  1086c4:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%rbp)
  1086ca:	8b 85 60 fe ff ff    	mov    -0x1a0(%rbp),%eax
  1086d0:	8d 50 ff             	lea    -0x1(%rax),%edx
  1086d3:	41 8d 45 0f          	lea    0xf(%r13),%eax
  1086d7:	89 95 a8 fe ff ff    	mov    %edx,-0x158(%rbp)
  1086dd:	e9 46 05 00 00       	jmp    108c28 <_vfprintf_r+0x24e8>
  1086e2:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1086e9:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1086f0:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1086f7:	44 89 85 70 fe ff ff 	mov    %r8d,-0x190(%rbp)
  1086fe:	44 89 9d 78 fe ff ff 	mov    %r11d,-0x188(%rbp)
  108705:	e8 16 c2 ff ff       	call   104920 <__sprint_r>
  10870a:	85 c0                	test   %eax,%eax
  10870c:	0f 85 ee e4 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  108712:	44 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%r8d
  108719:	44 8b 9d 78 fe ff ff 	mov    -0x188(%rbp),%r11d
  108720:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  108727:	e9 05 ec ff ff       	jmp    107331 <_vfprintf_r+0xbf1>
  10872c:	44 89 f8             	mov    %r15d,%eax
  10872f:	4c 8d a5 44 ff ff ff 	lea    -0xbc(%rbp),%r12
  108736:	31 c9                	xor    %ecx,%ecx
  108738:	44 89 9d 88 fe ff ff 	mov    %r11d,-0x178(%rbp)
  10873f:	25 00 04 00 00       	and    $0x400,%eax
  108744:	44 89 95 78 fe ff ff 	mov    %r10d,-0x188(%rbp)
  10874b:	4c 89 e7             	mov    %r12,%rdi
  10874e:	4d 89 e2             	mov    %r12,%r10
  108751:	4c 89 b5 70 fe ff ff 	mov    %r14,-0x190(%rbp)
  108758:	4c 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%r8
  10875f:	41 89 cb             	mov    %ecx,%r11d
  108762:	49 89 de             	mov    %rbx,%r14
  108765:	49 b9 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%r9
  10876c:	cc cc cc 
  10876f:	41 89 c4             	mov    %eax,%r12d
  108772:	eb 1a                	jmp    10878e <_vfprintf_r+0x204e>
  108774:	0f 1f 40 00          	nopl   0x0(%rax)
  108778:	48 89 f0             	mov    %rsi,%rax
  10877b:	49 f7 e1             	mul    %r9
  10877e:	48 c1 ea 03          	shr    $0x3,%rdx
  108782:	48 83 fe 09          	cmp    $0x9,%rsi
  108786:	76 4b                	jbe    1087d3 <_vfprintf_r+0x2093>
  108788:	48 89 d6             	mov    %rdx,%rsi
  10878b:	48 89 cf             	mov    %rcx,%rdi
  10878e:	48 89 f0             	mov    %rsi,%rax
  108791:	48 8d 4f ff          	lea    -0x1(%rdi),%rcx
  108795:	41 83 c3 01          	add    $0x1,%r11d
  108799:	49 f7 e1             	mul    %r9
  10879c:	48 89 f0             	mov    %rsi,%rax
  10879f:	48 89 d3             	mov    %rdx,%rbx
  1087a2:	48 c1 eb 03          	shr    $0x3,%rbx
  1087a6:	48 8d 14 9b          	lea    (%rbx,%rbx,4),%rdx
  1087aa:	48 01 d2             	add    %rdx,%rdx
  1087ad:	48 29 d0             	sub    %rdx,%rax
  1087b0:	83 c0 30             	add    $0x30,%eax
  1087b3:	88 47 ff             	mov    %al,-0x1(%rdi)
  1087b6:	45 85 e4             	test   %r12d,%r12d
  1087b9:	74 bd                	je     108778 <_vfprintf_r+0x2038>
  1087bb:	41 0f be 10          	movsbl (%r8),%edx
  1087bf:	44 39 da             	cmp    %r11d,%edx
  1087c2:	75 b4                	jne    108778 <_vfprintf_r+0x2038>
  1087c4:	80 fa 7f             	cmp    $0x7f,%dl
  1087c7:	74 af                	je     108778 <_vfprintf_r+0x2038>
  1087c9:	48 83 fe 09          	cmp    $0x9,%rsi
  1087cd:	0f 87 63 0e 00 00    	ja     109636 <_vfprintf_r+0x2ef6>
  1087d3:	4d 89 d4             	mov    %r10,%r12
  1087d6:	44 89 9d 58 fe ff ff 	mov    %r11d,-0x1a8(%rbp)
  1087dd:	4c 89 f3             	mov    %r14,%rbx
  1087e0:	44 8b 9d 88 fe ff ff 	mov    -0x178(%rbp),%r11d
  1087e7:	4c 89 85 08 fe ff ff 	mov    %r8,-0x1f8(%rbp)
  1087ee:	4c 8b b5 70 fe ff ff 	mov    -0x190(%rbp),%r14
  1087f5:	41 29 cc             	sub    %ecx,%r12d
  1087f8:	44 8b 95 78 fe ff ff 	mov    -0x188(%rbp),%r10d
  1087ff:	0f b6 95 a5 fe ff ff 	movzbl -0x15b(%rbp),%edx
  108806:	e9 45 e9 ff ff       	jmp    107150 <_vfprintf_r+0xa10>
  10880b:	83 f8 01             	cmp    $0x1,%eax
  10880e:	0f 84 8f fb ff ff    	je     1083a3 <_vfprintf_r+0x1c63>
  108814:	83 f8 02             	cmp    $0x2,%eax
  108817:	0f 85 b7 e7 ff ff    	jne    106fd4 <_vfprintf_r+0x894>
  10881d:	44 89 fa             	mov    %r15d,%edx
  108820:	e9 20 e7 ff ff       	jmp    106f45 <_vfprintf_r+0x805>
  108825:	48 83 bd d0 fe ff ff 	cmpq   $0x0,-0x130(%rbp)
  10882c:	00 
  10882d:	0f 85 c4 0e 00 00    	jne    1096f7 <_vfprintf_r+0x2fb7>
  108833:	c7 85 c8 fe ff ff 00 	movl   $0x0,-0x138(%rbp)
  10883a:	00 00 00 
  10883d:	e9 d9 e3 ff ff       	jmp    106c1b <_vfprintf_r+0x4db>
  108842:	41 bc 06 00 00 00    	mov    $0x6,%r12d
  108848:	b9 6a 03 12 00       	mov    $0x12036a,%ecx
  10884d:	45 39 e2             	cmp    %r12d,%r10d
  108850:	45 0f 46 e2          	cmovbe %r10d,%r12d
  108854:	45 89 e0             	mov    %r12d,%r8d
  108857:	e9 11 e1 ff ff       	jmp    10696d <_vfprintf_r+0x22d>
  10885c:	48 89 cf             	mov    %rcx,%rdi
  10885f:	44 89 9d 70 fe ff ff 	mov    %r11d,-0x190(%rbp)
  108866:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
  10886d:	e8 2e bf ff ff       	call   1047a0 <strlen>
  108872:	0f b6 95 a5 fe ff ff 	movzbl -0x15b(%rbp),%edx
  108879:	48 c7 85 88 fe ff ff 	movq   $0x0,-0x178(%rbp)
  108880:	00 00 00 00 
  108884:	49 89 c0             	mov    %rax,%r8
  108887:	41 89 c4             	mov    %eax,%r12d
  10888a:	31 c0                	xor    %eax,%eax
  10888c:	c7 85 48 fe ff ff 00 	movl   $0x0,-0x1b8(%rbp)
  108893:	00 00 00 
  108896:	45 85 c0             	test   %r8d,%r8d
  108899:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  1088a0:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  1088a7:	00 00 00 
  1088aa:	44 0f 48 c0          	cmovs  %eax,%r8d
  1088ae:	44 8b 9d 70 fe ff ff 	mov    -0x190(%rbp),%r11d
  1088b5:	45 31 d2             	xor    %r10d,%r10d
  1088b8:	c7 85 60 fe ff ff 00 	movl   $0x0,-0x1a0(%rbp)
  1088bf:	00 00 00 
  1088c2:	e9 bc e8 ff ff       	jmp    107183 <_vfprintf_r+0xa43>
  1088c7:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
  1088ce:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
  1088d4:	41 83 fc 10          	cmp    $0x10,%r12d
  1088d8:	0f 8e a8 04 00 00    	jle    108d86 <_vfprintf_r+0x2646>
  1088de:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
  1088e5:	48 89 d9             	mov    %rbx,%rcx
  1088e8:	44 89 e3             	mov    %r12d,%ebx
  1088eb:	45 89 c4             	mov    %r8d,%r12d
  1088ee:	44 89 9d 70 fe ff ff 	mov    %r11d,-0x190(%rbp)
  1088f5:	eb 15                	jmp    10890c <_vfprintf_r+0x21cc>
  1088f7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  1088fe:	00 00 
  108900:	83 eb 10             	sub    $0x10,%ebx
  108903:	83 fb 10             	cmp    $0x10,%ebx
  108906:	0f 8e 63 04 00 00    	jle    108d6f <_vfprintf_r+0x262f>
  10890c:	48 83 c2 10          	add    $0x10,%rdx
  108910:	83 c0 01             	add    $0x1,%eax
  108913:	48 83 c1 10          	add    $0x10,%rcx
  108917:	48 c7 41 f0 d0 d2 11 	movq   $0x11d2d0,-0x10(%rcx)
  10891e:	00 
  10891f:	48 c7 41 f8 10 00 00 	movq   $0x10,-0x8(%rcx)
  108926:	00 
  108927:	48 89 95 d0 fe ff ff 	mov    %rdx,-0x130(%rbp)
  10892e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
  108934:	83 f8 07             	cmp    $0x7,%eax
  108937:	7e c7                	jle    108900 <_vfprintf_r+0x21c0>
  108939:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  108940:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  108947:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10894e:	e8 cd bf ff ff       	call   104920 <__sprint_r>
  108953:	85 c0                	test   %eax,%eax
  108955:	0f 85 a5 e2 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  10895b:	48 8b 95 d0 fe ff ff 	mov    -0x130(%rbp),%rdx
  108962:	8b 85 c8 fe ff ff    	mov    -0x138(%rbp),%eax
  108968:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
  10896f:	eb 8f                	jmp    108900 <_vfprintf_r+0x21c0>
  108971:	44 8b 9d 78 fe ff ff 	mov    -0x188(%rbp),%r11d
  108978:	44 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%r8d
  10897f:	41 89 dc             	mov    %ebx,%r12d
  108982:	48 89 cb             	mov    %rcx,%rbx
  108985:	48 c7 03 d0 d2 11 00 	movq   $0x11d2d0,(%rbx)
  10898c:	4d 63 e4             	movslq %r12d,%r12
  10898f:	4c 89 63 08          	mov    %r12,0x8(%rbx)
  108993:	4c 01 e0             	add    %r12,%rax
  108996:	e9 fc f0 ff ff       	jmp    107a97 <_vfprintf_r+0x1357>
  10899b:	41 f7 c7 00 02 00 00 	test   $0x200,%r15d
  1089a2:	0f 84 76 05 00 00    	je     108f1e <_vfprintf_r+0x27de>
  1089a8:	83 f8 2f             	cmp    $0x2f,%eax
  1089ab:	0f 87 59 10 00 00    	ja     109a0a <_vfprintf_r+0x32ca>
  1089b1:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  1089b8:	89 c2                	mov    %eax,%edx
  1089ba:	83 c0 08             	add    $0x8,%eax
  1089bd:	89 06                	mov    %eax,(%rsi)
  1089bf:	48 03 56 10          	add    0x10(%rsi),%rdx
  1089c3:	48 0f be 32          	movsbq (%rdx),%rsi
  1089c7:	48 89 f0             	mov    %rsi,%rax
  1089ca:	e9 3d e7 ff ff       	jmp    10710c <_vfprintf_r+0x9cc>
  1089cf:	f6 c6 02             	test   $0x2,%dh
  1089d2:	0f 84 6c 05 00 00    	je     108f44 <_vfprintf_r+0x2804>
  1089d8:	83 f8 2f             	cmp    $0x2f,%eax
  1089db:	0f 87 ce 0f 00 00    	ja     1099af <_vfprintf_r+0x326f>
  1089e1:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  1089e8:	89 c1                	mov    %eax,%ecx
  1089ea:	83 c0 08             	add    $0x8,%eax
  1089ed:	89 06                	mov    %eax,(%rsi)
  1089ef:	48 03 4e 10          	add    0x10(%rsi),%rcx
  1089f3:	0f b6 31             	movzbl (%rcx),%esi
  1089f6:	e9 5d e6 ff ff       	jmp    107058 <_vfprintf_r+0x918>
  1089fb:	41 f7 c7 00 02 00 00 	test   $0x200,%r15d
  108a02:	0f 84 dc 04 00 00    	je     108ee4 <_vfprintf_r+0x27a4>
  108a08:	83 f8 2f             	cmp    $0x2f,%eax
  108a0b:	0f 87 77 10 00 00    	ja     109a88 <_vfprintf_r+0x3348>
  108a11:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  108a18:	89 c2                	mov    %eax,%edx
  108a1a:	83 c0 08             	add    $0x8,%eax
  108a1d:	89 06                	mov    %eax,(%rsi)
  108a1f:	48 03 56 10          	add    0x10(%rsi),%rdx
  108a23:	0f b6 32             	movzbl (%rdx),%esi
  108a26:	e9 91 e5 ff ff       	jmp    106fbc <_vfprintf_r+0x87c>
  108a2b:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  108a32:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  108a36:	48 8d 41 08          	lea    0x8(%rcx),%rax
  108a3a:	48 89 47 08          	mov    %rax,0x8(%rdi)
  108a3e:	e9 12 e6 ff ff       	jmp    107055 <_vfprintf_r+0x915>
  108a43:	41 f6 c7 40          	test   $0x40,%r15b
  108a47:	0f 85 6a 04 00 00    	jne    108eb7 <_vfprintf_r+0x2777>
  108a4d:	41 81 e7 00 02 00 00 	and    $0x200,%r15d
  108a54:	0f 84 6d 0f 00 00    	je     1099c7 <_vfprintf_r+0x3287>
  108a5a:	83 f8 2f             	cmp    $0x2f,%eax
  108a5d:	0f 87 25 12 00 00    	ja     109c88 <_vfprintf_r+0x3548>
  108a63:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  108a6a:	89 c2                	mov    %eax,%edx
  108a6c:	83 c0 08             	add    $0x8,%eax
  108a6f:	89 06                	mov    %eax,(%rsi)
  108a71:	48 03 56 10          	add    0x10(%rsi),%rdx
  108a75:	48 8b 02             	mov    (%rdx),%rax
  108a78:	0f b6 b5 6c fe ff ff 	movzbl -0x194(%rbp),%esi
  108a7f:	40 88 30             	mov    %sil,(%rax)
  108a82:	e9 d9 dd ff ff       	jmp    106860 <_vfprintf_r+0x120>
  108a87:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  108a8e:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  108a92:	48 8d 42 08          	lea    0x8(%rdx),%rax
  108a96:	48 89 46 08          	mov    %rax,0x8(%rsi)
  108a9a:	e9 e7 e1 ff ff       	jmp    106c86 <_vfprintf_r+0x546>
  108a9f:	41 f7 c7 00 02 00 00 	test   $0x200,%r15d
  108aa6:	0f 84 e9 03 00 00    	je     108e95 <_vfprintf_r+0x2755>
  108aac:	83 f8 2f             	cmp    $0x2f,%eax
  108aaf:	0f 87 6d 0f 00 00    	ja     109a22 <_vfprintf_r+0x32e2>
  108ab5:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  108abc:	89 c2                	mov    %eax,%edx
  108abe:	83 c0 08             	add    $0x8,%eax
  108ac1:	89 06                	mov    %eax,(%rsi)
  108ac3:	48 03 56 10          	add    0x10(%rsi),%rdx
  108ac7:	0f b6 32             	movzbl (%rdx),%esi
  108aca:	e9 4f f8 ff ff       	jmp    10831e <_vfprintf_r+0x1bde>
  108acf:	41 83 fa ff          	cmp    $0xffffffff,%r10d
  108ad3:	0f 84 ae 04 00 00    	je     108f87 <_vfprintf_r+0x2847>
  108ad9:	45 85 d2             	test   %r10d,%r10d
  108adc:	75 0d                	jne    108aeb <_vfprintf_r+0x23ab>
  108ade:	41 83 fc 47          	cmp    $0x47,%r12d
  108ae2:	b8 01 00 00 00       	mov    $0x1,%eax
  108ae7:	44 0f 44 d0          	cmove  %eax,%r10d
  108aeb:	f2 0f 10 85 40 fe ff 	movsd  -0x1c0(%rbp),%xmm0
  108af2:	ff 
  108af3:	44 89 f8             	mov    %r15d,%eax
  108af6:	80 cc 01             	or     $0x1,%ah
  108af9:	89 85 70 fe ff ff    	mov    %eax,-0x190(%rbp)
  108aff:	66 48 0f 7e c0       	movq   %xmm0,%rax
  108b04:	48 c1 e8 20          	shr    $0x20,%rax
  108b08:	85 c0                	test   %eax,%eax
  108b0a:	0f 88 9f 0f 00 00    	js     109aaf <_vfprintf_r+0x336f>
  108b10:	c6 85 78 fe ff ff 00 	movb   $0x0,-0x188(%rbp)
  108b17:	41 83 fc 46          	cmp    $0x46,%r12d
  108b1b:	0f 84 dc 07 00 00    	je     1092fd <_vfprintf_r+0x2bbd>
  108b21:	41 83 fc 45          	cmp    $0x45,%r12d
  108b25:	0f 85 fa 0c 00 00    	jne    109825 <_vfprintf_r+0x30e5>
  108b2b:	41 8d 42 01          	lea    0x1(%r10),%eax
  108b2f:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  108b36:	48 8d 8d a8 fe ff ff 	lea    -0x158(%rbp),%rcx
  108b3d:	be 02 00 00 00       	mov    $0x2,%esi
  108b42:	89 c2                	mov    %eax,%edx
  108b44:	4c 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%r9
  108b4b:	4c 8d 85 ac fe ff ff 	lea    -0x154(%rbp),%r8
  108b52:	44 89 9d 50 fe ff ff 	mov    %r11d,-0x1b0(%rbp)
  108b59:	44 89 95 60 fe ff ff 	mov    %r10d,-0x1a0(%rbp)
  108b60:	f2 0f 11 85 88 fe ff 	movsd  %xmm0,-0x178(%rbp)
  108b67:	ff 
  108b68:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%rbp)
  108b6e:	e8 cd 15 00 00       	call   10a140 <_dtoa_r>
  108b73:	48 63 95 58 fe ff ff 	movslq -0x1a8(%rbp),%rdx
  108b7a:	66 0f ef c9          	pxor   %xmm1,%xmm1
  108b7e:	f2 0f 10 85 88 fe ff 	movsd  -0x178(%rbp),%xmm0
  108b85:	ff 
  108b86:	44 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%r10d
  108b8d:	44 8b 9d 50 fe ff ff 	mov    -0x1b0(%rbp),%r11d
  108b94:	48 89 c1             	mov    %rax,%rcx
  108b97:	48 01 c2             	add    %rax,%rdx
  108b9a:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  108b9e:	7a 06                	jp     108ba6 <_vfprintf_r+0x2466>
  108ba0:	0f 84 47 11 00 00    	je     109ced <_vfprintf_r+0x35ad>
  108ba6:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  108bad:	48 39 d0             	cmp    %rdx,%rax
  108bb0:	73 20                	jae    108bd2 <_vfprintf_r+0x2492>
  108bb2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  108bb8:	48 8d 70 01          	lea    0x1(%rax),%rsi
  108bbc:	48 89 b5 b8 fe ff ff 	mov    %rsi,-0x148(%rbp)
  108bc3:	c6 00 30             	movb   $0x30,(%rax)
  108bc6:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  108bcd:	48 39 d0             	cmp    %rdx,%rax
  108bd0:	72 e6                	jb     108bb8 <_vfprintf_r+0x2478>
  108bd2:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
  108bd8:	48 29 c8             	sub    %rcx,%rax
  108bdb:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%rbp)
  108be1:	89 95 60 fe ff ff    	mov    %edx,-0x1a0(%rbp)
  108be7:	41 83 fc 47          	cmp    $0x47,%r12d
  108beb:	0f 85 31 11 00 00    	jne    109d22 <_vfprintf_r+0x35e2>
  108bf1:	8b bd 60 fe ff ff    	mov    -0x1a0(%rbp),%edi
  108bf7:	41 39 fa             	cmp    %edi,%r10d
  108bfa:	7c 09                	jl     108c05 <_vfprintf_r+0x24c5>
  108bfc:	83 ff fd             	cmp    $0xfffffffd,%edi
  108bff:	0f 8d ea 03 00 00    	jge    108fef <_vfprintf_r+0x28af>
  108c05:	41 83 ed 02          	sub    $0x2,%r13d
  108c09:	8b 85 60 fe ff ff    	mov    -0x1a0(%rbp),%eax
  108c0f:	31 f6                	xor    %esi,%esi
  108c11:	48 c7 85 88 fe ff ff 	movq   $0x0,-0x178(%rbp)
  108c18:	00 00 00 00 
  108c1c:	8d 50 ff             	lea    -0x1(%rax),%edx
  108c1f:	44 89 e8             	mov    %r13d,%eax
  108c22:	89 95 a8 fe ff ff    	mov    %edx,-0x158(%rbp)
  108c28:	88 85 b1 fe ff ff    	mov    %al,-0x14f(%rbp)
  108c2e:	b8 2b 00 00 00       	mov    $0x2b,%eax
  108c33:	85 d2                	test   %edx,%edx
  108c35:	79 12                	jns    108c49 <_vfprintf_r+0x2509>
  108c37:	8b 85 60 fe ff ff    	mov    -0x1a0(%rbp),%eax
  108c3d:	ba 01 00 00 00       	mov    $0x1,%edx
  108c42:	29 c2                	sub    %eax,%edx
  108c44:	b8 2d 00 00 00       	mov    $0x2d,%eax
  108c49:	88 85 b2 fe ff ff    	mov    %al,-0x14e(%rbp)
  108c4f:	83 fa 09             	cmp    $0x9,%edx
  108c52:	0f 8e 09 0d 00 00    	jle    109961 <_vfprintf_r+0x3221>
  108c58:	4c 8d a5 bf fe ff ff 	lea    -0x141(%rbp),%r12
  108c5f:	41 ba cd cc cc cc    	mov    $0xcccccccd,%r10d
  108c65:	4d 89 e1             	mov    %r12,%r9
  108c68:	89 d0                	mov    %edx,%eax
  108c6a:	89 d7                	mov    %edx,%edi
  108c6c:	4c 89 ce             	mov    %r9,%rsi
  108c6f:	49 0f af c2          	imul   %r10,%rax
  108c73:	4d 8d 49 ff          	lea    -0x1(%r9),%r9
  108c77:	48 c1 e8 23          	shr    $0x23,%rax
  108c7b:	44 8d 04 80          	lea    (%rax,%rax,4),%r8d
  108c7f:	45 01 c0             	add    %r8d,%r8d
  108c82:	44 29 c7             	sub    %r8d,%edi
  108c85:	83 c7 30             	add    $0x30,%edi
  108c88:	40 88 7e ff          	mov    %dil,-0x1(%rsi)
  108c8c:	89 d7                	mov    %edx,%edi
  108c8e:	89 c2                	mov    %eax,%edx
  108c90:	83 ff 63             	cmp    $0x63,%edi
  108c93:	7f d3                	jg     108c68 <_vfprintf_r+0x2528>
  108c95:	83 c2 30             	add    $0x30,%edx
  108c98:	48 8d 46 fe          	lea    -0x2(%rsi),%rax
  108c9c:	41 88 51 ff          	mov    %dl,-0x1(%r9)
  108ca0:	4c 39 e0             	cmp    %r12,%rax
  108ca3:	0f 83 55 10 00 00    	jae    109cfe <_vfprintf_r+0x35be>
  108ca9:	4c 8d 85 c1 fe ff ff 	lea    -0x13f(%rbp),%r8
  108cb0:	31 d2                	xor    %edx,%edx
  108cb2:	48 8d 85 b1 fe ff ff 	lea    -0x14f(%rbp),%rax
  108cb9:	4d 89 c1             	mov    %r8,%r9
  108cbc:	49 29 f1             	sub    %rsi,%r9
  108cbf:	0f b6 7c 16 fe       	movzbl -0x2(%rsi,%rdx,1),%edi
  108cc4:	40 88 bc 15 b3 fe ff 	mov    %dil,-0x14d(%rbp,%rdx,1)
  108ccb:	ff 
  108ccc:	48 83 c2 01          	add    $0x1,%rdx
  108cd0:	49 39 d1             	cmp    %rdx,%r9
  108cd3:	75 ea                	jne    108cbf <_vfprintf_r+0x257f>
  108cd5:	49 29 f0             	sub    %rsi,%r8
  108cd8:	48 8d bd b3 fe ff ff 	lea    -0x14d(%rbp),%rdi
  108cdf:	4a 8d 14 07          	lea    (%rdi,%r8,1),%rdx
  108ce3:	89 d6                	mov    %edx,%esi
  108ce5:	29 c6                	sub    %eax,%esi
  108ce7:	89 b5 68 fe ff ff    	mov    %esi,-0x198(%rbp)
  108ced:	8b 85 58 fe ff ff    	mov    -0x1a8(%rbp),%eax
  108cf3:	8b bd 68 fe ff ff    	mov    -0x198(%rbp),%edi
  108cf9:	44 8d 24 38          	lea    (%rax,%rdi,1),%r12d
  108cfd:	83 f8 01             	cmp    $0x1,%eax
  108d00:	0f 8e 9a 0d 00 00    	jle    109aa0 <_vfprintf_r+0x3360>
  108d06:	8b 85 38 fe ff ff    	mov    -0x1c8(%rbp),%eax
  108d0c:	41 01 c4             	add    %eax,%r12d
  108d0f:	41 81 e7 ff fb ff ff 	and    $0xfffffbff,%r15d
  108d16:	45 31 c0             	xor    %r8d,%r8d
  108d19:	c7 85 48 fe ff ff 00 	movl   $0x0,-0x1b8(%rbp)
  108d20:	00 00 00 
  108d23:	41 81 cf 00 01 00 00 	or     $0x100,%r15d
  108d2a:	45 85 e4             	test   %r12d,%r12d
  108d2d:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  108d34:	00 00 00 
  108d37:	44 89 bd 70 fe ff ff 	mov    %r15d,-0x190(%rbp)
  108d3e:	45 0f 49 c4          	cmovns %r12d,%r8d
  108d42:	c7 85 60 fe ff ff 00 	movl   $0x0,-0x1a0(%rbp)
  108d49:	00 00 00 
  108d4c:	80 bd 78 fe ff ff 00 	cmpb   $0x0,-0x188(%rbp)
  108d53:	0f 84 80 02 00 00    	je     108fd9 <_vfprintf_r+0x2899>
  108d59:	c6 85 a5 fe ff ff 2d 	movb   $0x2d,-0x15b(%rbp)
  108d60:	44 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%r15d
  108d67:	45 31 d2             	xor    %r10d,%r10d
  108d6a:	e9 1c e4 ff ff       	jmp    10718b <_vfprintf_r+0xa4b>
  108d6f:	45 89 e0             	mov    %r12d,%r8d
  108d72:	44 8b 9d 70 fe ff ff 	mov    -0x190(%rbp),%r11d
  108d79:	41 89 dc             	mov    %ebx,%r12d
  108d7c:	48 89 cb             	mov    %rcx,%rbx
  108d7f:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  108d86:	4d 63 e4             	movslq %r12d,%r12
  108d89:	83 c0 01             	add    $0x1,%eax
  108d8c:	48 c7 03 d0 d2 11 00 	movq   $0x11d2d0,(%rbx)
  108d93:	48 83 c3 10          	add    $0x10,%rbx
  108d97:	4c 89 63 f8          	mov    %r12,-0x8(%rbx)
  108d9b:	49 01 d4             	add    %rdx,%r12
  108d9e:	4c 89 a5 d0 fe ff ff 	mov    %r12,-0x130(%rbp)
  108da5:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%rbp)
  108dab:	83 f8 07             	cmp    $0x7,%eax
  108dae:	0f 8e 3a f1 ff ff    	jle    107eee <_vfprintf_r+0x17ae>
  108db4:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  108dbb:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  108dc2:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  108dc9:	44 89 85 28 fe ff ff 	mov    %r8d,-0x1d8(%rbp)
  108dd0:	44 89 9d 70 fe ff ff 	mov    %r11d,-0x190(%rbp)
  108dd7:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
  108dde:	e8 3d bb ff ff       	call   104920 <__sprint_r>
  108de3:	85 c0                	test   %eax,%eax
  108de5:	0f 85 15 de ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  108deb:	44 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%r8d
  108df2:	44 8b 9d 70 fe ff ff 	mov    -0x190(%rbp),%r11d
  108df9:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  108e00:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  108e07:	e9 e2 f0 ff ff       	jmp    107eee <_vfprintf_r+0x17ae>
  108e0c:	c6 85 a5 fe ff ff 2d 	movb   $0x2d,-0x15b(%rbp)
  108e13:	ba 2d 00 00 00       	mov    $0x2d,%edx
  108e18:	e9 ac de ff ff       	jmp    106cc9 <_vfprintf_r+0x589>
  108e1d:	29 cf                	sub    %ecx,%edi
  108e1f:	4d 29 e5             	sub    %r12,%r13
  108e22:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  108e29:	44 39 ef             	cmp    %r13d,%edi
  108e2c:	89 fa                	mov    %edi,%edx
  108e2e:	44 0f 4e ef          	cmovle %edi,%r13d
  108e32:	e9 6f f1 ff ff       	jmp    107fa6 <_vfprintf_r+0x1866>
  108e37:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  108e3e:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  108e42:	48 8d 41 08          	lea    0x8(%rcx),%rax
  108e46:	48 89 47 08          	mov    %rax,0x8(%rdi)
  108e4a:	e9 5b f3 ff ff       	jmp    1081aa <_vfprintf_r+0x1a6a>
  108e4f:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  108e56:	89 c2                	mov    %eax,%edx
  108e58:	83 c0 08             	add    $0x8,%eax
  108e5b:	89 06                	mov    %eax,(%rsi)
  108e5d:	48 03 56 10          	add    0x10(%rsi),%rdx
  108e61:	e9 4b e0 ff ff       	jmp    106eb1 <_vfprintf_r+0x771>
  108e66:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  108e6d:	89 c2                	mov    %eax,%edx
  108e6f:	83 c0 08             	add    $0x8,%eax
  108e72:	89 06                	mov    %eax,(%rsi)
  108e74:	48 03 56 10          	add    0x10(%rsi),%rdx
  108e78:	e9 d9 f2 ff ff       	jmp    108156 <_vfprintf_r+0x1a16>
  108e7d:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  108e84:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  108e88:	48 8d 42 08          	lea    0x8(%rdx),%rax
  108e8c:	48 89 47 08          	mov    %rax,0x8(%rdi)
  108e90:	e9 42 f3 ff ff       	jmp    1081d7 <_vfprintf_r+0x1a97>
  108e95:	83 f8 2f             	cmp    $0x2f,%eax
  108e98:	0f 87 d0 0b 00 00    	ja     109a6e <_vfprintf_r+0x332e>
  108e9e:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  108ea5:	89 c2                	mov    %eax,%edx
  108ea7:	83 c0 08             	add    $0x8,%eax
  108eaa:	48 03 56 10          	add    0x10(%rsi),%rdx
  108eae:	89 06                	mov    %eax,(%rsi)
  108eb0:	8b 32                	mov    (%rdx),%esi
  108eb2:	e9 67 f4 ff ff       	jmp    10831e <_vfprintf_r+0x1bde>
  108eb7:	83 f8 2f             	cmp    $0x2f,%eax
  108eba:	0f 87 d7 0a 00 00    	ja     109997 <_vfprintf_r+0x3257>
  108ec0:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  108ec7:	89 c2                	mov    %eax,%edx
  108ec9:	83 c0 08             	add    $0x8,%eax
  108ecc:	89 06                	mov    %eax,(%rsi)
  108ece:	48 03 56 10          	add    0x10(%rsi),%rdx
  108ed2:	48 8b 02             	mov    (%rdx),%rax
  108ed5:	0f b7 bd 6c fe ff ff 	movzwl -0x194(%rbp),%edi
  108edc:	66 89 38             	mov    %di,(%rax)
  108edf:	e9 7c d9 ff ff       	jmp    106860 <_vfprintf_r+0x120>
  108ee4:	83 f8 2f             	cmp    $0x2f,%eax
  108ee7:	0f 87 67 0b 00 00    	ja     109a54 <_vfprintf_r+0x3314>
  108eed:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  108ef4:	89 c2                	mov    %eax,%edx
  108ef6:	83 c0 08             	add    $0x8,%eax
  108ef9:	48 03 56 10          	add    0x10(%rsi),%rdx
  108efd:	89 06                	mov    %eax,(%rsi)
  108eff:	8b 32                	mov    (%rdx),%esi
  108f01:	e9 b6 e0 ff ff       	jmp    106fbc <_vfprintf_r+0x87c>
  108f06:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  108f0d:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  108f11:	48 8d 42 08          	lea    0x8(%rdx),%rax
  108f15:	48 89 47 08          	mov    %rax,0x8(%rdi)
  108f19:	e9 04 f6 ff ff       	jmp    108522 <_vfprintf_r+0x1de2>
  108f1e:	83 f8 2f             	cmp    $0x2f,%eax
  108f21:	0f 87 cb 0a 00 00    	ja     1099f2 <_vfprintf_r+0x32b2>
  108f27:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  108f2e:	89 c2                	mov    %eax,%edx
  108f30:	83 c0 08             	add    $0x8,%eax
  108f33:	89 06                	mov    %eax,(%rsi)
  108f35:	48 03 56 10          	add    0x10(%rsi),%rdx
  108f39:	48 63 32             	movslq (%rdx),%rsi
  108f3c:	48 89 f0             	mov    %rsi,%rax
  108f3f:	e9 c8 e1 ff ff       	jmp    10710c <_vfprintf_r+0x9cc>
  108f44:	83 f8 2f             	cmp    $0x2f,%eax
  108f47:	0f 87 ed 0a 00 00    	ja     109a3a <_vfprintf_r+0x32fa>
  108f4d:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  108f54:	89 c1                	mov    %eax,%ecx
  108f56:	83 c0 08             	add    $0x8,%eax
  108f59:	48 03 4e 10          	add    0x10(%rsi),%rcx
  108f5d:	89 06                	mov    %eax,(%rsi)
  108f5f:	8b 31                	mov    (%rcx),%esi
  108f61:	e9 f2 e0 ff ff       	jmp    107058 <_vfprintf_r+0x918>
  108f66:	c6 85 78 fe ff ff 00 	movb   $0x0,-0x188(%rbp)
  108f6d:	66 0f 28 c2          	movapd %xmm2,%xmm0
  108f71:	e9 3d f6 ff ff       	jmp    1085b3 <_vfprintf_r+0x1e73>
  108f76:	48 8b bf a0 00 00 00 	mov    0xa0(%rdi),%rdi
  108f7d:	e8 3d 8e 00 00       	call   111dbf <__retarget_lock_release_recursive>
  108f82:	e9 ee db ff ff       	jmp    106b75 <_vfprintf_r+0x435>
  108f87:	41 ba 06 00 00 00    	mov    $0x6,%r10d
  108f8d:	e9 59 fb ff ff       	jmp    108aeb <_vfprintf_r+0x23ab>
  108f92:	41 8d 72 01          	lea    0x1(%r10),%esi
  108f96:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  108f9d:	44 89 9d 78 fe ff ff 	mov    %r11d,-0x188(%rbp)
  108fa4:	48 63 f6             	movslq %esi,%rsi
  108fa7:	44 89 95 88 fe ff ff 	mov    %r10d,-0x178(%rbp)
  108fae:	e8 ed a4 ff ff       	call   1034a0 <_malloc_r>
  108fb3:	44 8b 95 88 fe ff ff 	mov    -0x178(%rbp),%r10d
  108fba:	44 8b 9d 78 fe ff ff 	mov    -0x188(%rbp),%r11d
  108fc1:	48 85 c0             	test   %rax,%rax
  108fc4:	48 89 c1             	mov    %rax,%rcx
  108fc7:	0f 84 64 0d 00 00    	je     109d31 <_vfprintf_r+0x35f1>
  108fcd:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
  108fd4:	e9 ae f5 ff ff       	jmp    108587 <_vfprintf_r+0x1e47>
  108fd9:	0f b6 95 a5 fe ff ff 	movzbl -0x15b(%rbp),%edx
  108fe0:	44 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%r15d
  108fe7:	45 31 d2             	xor    %r10d,%r10d
  108fea:	e9 94 e1 ff ff       	jmp    107183 <_vfprintf_r+0xa43>
  108fef:	8b bd 60 fe ff ff    	mov    -0x1a0(%rbp),%edi
  108ff5:	39 bd 58 fe ff ff    	cmp    %edi,-0x1a8(%rbp)
  108ffb:	0f 8f f0 07 00 00    	jg     1097f1 <_vfprintf_r+0x30b1>
  109001:	8b 85 60 fe ff ff    	mov    -0x1a0(%rbp),%eax
  109007:	8b b5 38 fe ff ff    	mov    -0x1c8(%rbp),%esi
  10900d:	41 f6 c7 01          	test   $0x1,%r15b
  109011:	44 8d 24 30          	lea    (%rax,%rsi,1),%r12d
  109015:	44 0f 44 e0          	cmove  %eax,%r12d
  109019:	41 81 e7 00 04 00 00 	and    $0x400,%r15d
  109020:	74 10                	je     109032 <_vfprintf_r+0x28f2>
  109022:	44 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%r8d
  109029:	45 85 c0             	test   %r8d,%r8d
  10902c:	0f 8f 16 0b 00 00    	jg     109b48 <_vfprintf_r+0x3408>
  109032:	45 31 c0             	xor    %r8d,%r8d
  109035:	45 85 e4             	test   %r12d,%r12d
  109038:	41 bd 67 00 00 00    	mov    $0x67,%r13d
  10903e:	45 0f 49 c4          	cmovns %r12d,%r8d
  109042:	48 c7 85 88 fe ff ff 	movq   $0x0,-0x178(%rbp)
  109049:	00 00 00 00 
  10904d:	c7 85 48 fe ff ff 00 	movl   $0x0,-0x1b8(%rbp)
  109054:	00 00 00 
  109057:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  10905e:	00 00 00 
  109061:	e9 e6 fc ff ff       	jmp    108d4c <_vfprintf_r+0x260c>
  109066:	8b b5 48 fe ff ff    	mov    -0x1b8(%rbp),%esi
  10906c:	85 f6                	test   %esi,%esi
  10906e:	7f 0e                	jg     10907e <_vfprintf_r+0x293e>
  109070:	8b 8d 50 fe ff ff    	mov    -0x1b0(%rbp),%ecx
  109076:	85 c9                	test   %ecx,%ecx
  109078:	0f 8e 28 01 00 00    	jle    1091a6 <_vfprintf_r+0x2a66>
  10907e:	44 89 bd 78 fe ff ff 	mov    %r15d,-0x188(%rbp)
  109085:	4c 89 e7             	mov    %r12,%rdi
  109088:	48 89 d8             	mov    %rbx,%rax
  10908b:	8b 9d 48 fe ff ff    	mov    -0x1b8(%rbp),%ebx
  109091:	44 89 9d 70 fe ff ff 	mov    %r11d,-0x190(%rbp)
  109098:	4d 89 ec             	mov    %r13,%r12
  10909b:	49 89 fd             	mov    %rdi,%r13
  10909e:	44 89 85 60 fe ff ff 	mov    %r8d,-0x1a0(%rbp)
  1090a5:	4c 89 b5 48 fe ff ff 	mov    %r14,-0x1b8(%rbp)
  1090ac:	4c 8b b5 08 fe ff ff 	mov    -0x1f8(%rbp),%r14
  1090b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  1090b8:	85 db                	test   %ebx,%ebx
  1090ba:	0f 84 f8 00 00 00    	je     1091b8 <_vfprintf_r+0x2a78>
  1090c0:	83 eb 01             	sub    $0x1,%ebx
  1090c3:	48 8b bd 10 fe ff ff 	mov    -0x1f0(%rbp),%rdi
  1090ca:	8b b5 c8 fe ff ff    	mov    -0x138(%rbp),%esi
  1090d0:	48 83 c0 10          	add    $0x10,%rax
  1090d4:	48 89 78 f0          	mov    %rdi,-0x10(%rax)
  1090d8:	48 8b bd 18 fe ff ff 	mov    -0x1e8(%rbp),%rdi
  1090df:	8d 56 01             	lea    0x1(%rsi),%edx
  1090e2:	48 01 bd d0 fe ff ff 	add    %rdi,-0x130(%rbp)
  1090e9:	48 89 78 f8          	mov    %rdi,-0x8(%rax)
  1090ed:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  1090f3:	83 fa 07             	cmp    $0x7,%edx
  1090f6:	0f 8f 9e 01 00 00    	jg     10929a <_vfprintf_r+0x2b5a>
  1090fc:	49 0f be 0e          	movsbq (%r14),%rcx
  109100:	4d 89 e2             	mov    %r12,%r10
  109103:	4d 29 ea             	sub    %r13,%r10
  109106:	44 39 d1             	cmp    %r10d,%ecx
  109109:	48 89 ca             	mov    %rcx,%rdx
  10910c:	44 0f 4e d1          	cmovle %ecx,%r10d
  109110:	45 89 d7             	mov    %r10d,%r15d
  109113:	45 85 d2             	test   %r10d,%r10d
  109116:	7e 34                	jle    10914c <_vfprintf_r+0x2a0c>
  109118:	8b b5 c8 fe ff ff    	mov    -0x138(%rbp),%esi
  10911e:	49 63 d2             	movslq %r10d,%rdx
  109121:	48 01 95 d0 fe ff ff 	add    %rdx,-0x130(%rbp)
  109128:	48 89 50 08          	mov    %rdx,0x8(%rax)
  10912c:	8d 56 01             	lea    0x1(%rsi),%edx
  10912f:	4c 89 28             	mov    %r13,(%rax)
  109132:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  109138:	83 fa 07             	cmp    $0x7,%edx
  10913b:	0f 8f 87 01 00 00    	jg     1092c8 <_vfprintf_r+0x2b88>
  109141:	49 0f be 0e          	movsbq (%r14),%rcx
  109145:	48 83 c0 10          	add    $0x10,%rax
  109149:	48 89 ca             	mov    %rcx,%rdx
  10914c:	31 f6                	xor    %esi,%esi
  10914e:	45 85 ff             	test   %r15d,%r15d
  109151:	41 0f 49 f7          	cmovns %r15d,%esi
  109155:	29 f1                	sub    %esi,%ecx
  109157:	41 89 cf             	mov    %ecx,%r15d
  10915a:	85 c9                	test   %ecx,%ecx
  10915c:	7f 6a                	jg     1091c8 <_vfprintf_r+0x2a88>
  10915e:	49 01 d5             	add    %rdx,%r13
  109161:	8b 95 50 fe ff ff    	mov    -0x1b0(%rbp),%edx
  109167:	85 d2                	test   %edx,%edx
  109169:	0f 8f 49 ff ff ff    	jg     1090b8 <_vfprintf_r+0x2978>
  10916f:	85 db                	test   %ebx,%ebx
  109171:	0f 8f 41 ff ff ff    	jg     1090b8 <_vfprintf_r+0x2978>
  109177:	4c 89 ee             	mov    %r13,%rsi
  10917a:	4c 89 b5 08 fe ff ff 	mov    %r14,-0x1f8(%rbp)
  109181:	44 8b bd 78 fe ff ff 	mov    -0x188(%rbp),%r15d
  109188:	4d 89 e5             	mov    %r12,%r13
  10918b:	44 8b 9d 70 fe ff ff 	mov    -0x190(%rbp),%r11d
  109192:	44 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%r8d
  109199:	48 89 c3             	mov    %rax,%rbx
  10919c:	49 89 f4             	mov    %rsi,%r12
  10919f:	4c 8b b5 48 fe ff ff 	mov    -0x1b8(%rbp),%r14
  1091a6:	4d 39 ec             	cmp    %r13,%r12
  1091a9:	4d 0f 47 e5          	cmova  %r13,%r12
  1091ad:	e9 53 ed ff ff       	jmp    107f05 <_vfprintf_r+0x17c5>
  1091b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  1091b8:	83 ad 50 fe ff ff 01 	subl   $0x1,-0x1b0(%rbp)
  1091bf:	49 83 ee 01          	sub    $0x1,%r14
  1091c3:	e9 fb fe ff ff       	jmp    1090c3 <_vfprintf_r+0x2983>
  1091c8:	48 8b b5 d0 fe ff ff 	mov    -0x130(%rbp),%rsi
  1091cf:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  1091d5:	83 f9 10             	cmp    $0x10,%ecx
  1091d8:	0f 8e 85 00 00 00    	jle    109263 <_vfprintf_r+0x2b23>
  1091de:	41 89 df             	mov    %ebx,%r15d
  1091e1:	89 cb                	mov    %ecx,%ebx
  1091e3:	eb 0b                	jmp    1091f0 <_vfprintf_r+0x2ab0>
  1091e5:	0f 1f 00             	nopl   (%rax)
  1091e8:	83 eb 10             	sub    $0x10,%ebx
  1091eb:	83 fb 10             	cmp    $0x10,%ebx
  1091ee:	7e 6b                	jle    10925b <_vfprintf_r+0x2b1b>
  1091f0:	48 83 c6 10          	add    $0x10,%rsi
  1091f4:	83 c2 01             	add    $0x1,%edx
  1091f7:	48 83 c0 10          	add    $0x10,%rax
  1091fb:	48 c7 40 f0 d0 d2 11 	movq   $0x11d2d0,-0x10(%rax)
  109202:	00 
  109203:	48 c7 40 f8 10 00 00 	movq   $0x10,-0x8(%rax)
  10920a:	00 
  10920b:	48 89 b5 d0 fe ff ff 	mov    %rsi,-0x130(%rbp)
  109212:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  109218:	83 fa 07             	cmp    $0x7,%edx
  10921b:	7e cb                	jle    1091e8 <_vfprintf_r+0x2aa8>
  10921d:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  109224:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  10922b:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  109232:	e8 e9 b6 ff ff       	call   104920 <__sprint_r>
  109237:	85 c0                	test   %eax,%eax
  109239:	0f 85 c1 d9 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  10923f:	83 eb 10             	sub    $0x10,%ebx
  109242:	48 8b b5 d0 fe ff ff 	mov    -0x130(%rbp),%rsi
  109249:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  10924f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  109256:	83 fb 10             	cmp    $0x10,%ebx
  109259:	7f 95                	jg     1091f0 <_vfprintf_r+0x2ab0>
  10925b:	89 df                	mov    %ebx,%edi
  10925d:	44 89 fb             	mov    %r15d,%ebx
  109260:	41 89 ff             	mov    %edi,%r15d
  109263:	49 63 cf             	movslq %r15d,%rcx
  109266:	83 c2 01             	add    $0x1,%edx
  109269:	48 c7 00 d0 d2 11 00 	movq   $0x11d2d0,(%rax)
  109270:	48 89 48 08          	mov    %rcx,0x8(%rax)
  109274:	48 01 f1             	add    %rsi,%rcx
  109277:	48 89 8d d0 fe ff ff 	mov    %rcx,-0x130(%rbp)
  10927e:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  109284:	83 fa 07             	cmp    $0x7,%edx
  109287:	0f 8f 44 03 00 00    	jg     1095d1 <_vfprintf_r+0x2e91>
  10928d:	49 0f be 16          	movsbq (%r14),%rdx
  109291:	48 83 c0 10          	add    $0x10,%rax
  109295:	e9 c4 fe ff ff       	jmp    10915e <_vfprintf_r+0x2a1e>
  10929a:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1092a1:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1092a8:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1092af:	e8 6c b6 ff ff       	call   104920 <__sprint_r>
  1092b4:	85 c0                	test   %eax,%eax
  1092b6:	0f 85 44 d9 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  1092bc:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  1092c3:	e9 34 fe ff ff       	jmp    1090fc <_vfprintf_r+0x29bc>
  1092c8:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1092cf:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1092d6:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1092dd:	e8 3e b6 ff ff       	call   104920 <__sprint_r>
  1092e2:	85 c0                	test   %eax,%eax
  1092e4:	0f 85 16 d9 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  1092ea:	49 0f be 0e          	movsbq (%r14),%rcx
  1092ee:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  1092f5:	48 89 ca             	mov    %rcx,%rdx
  1092f8:	e9 4f fe ff ff       	jmp    10914c <_vfprintf_r+0x2a0c>
  1092fd:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  109304:	48 8d 8d a8 fe ff ff 	lea    -0x158(%rbp),%rcx
  10930b:	44 89 d2             	mov    %r10d,%edx
  10930e:	be 03 00 00 00       	mov    $0x3,%esi
  109313:	4c 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%r9
  10931a:	4c 8d 85 ac fe ff ff 	lea    -0x154(%rbp),%r8
  109321:	44 89 9d 58 fe ff ff 	mov    %r11d,-0x1a8(%rbp)
  109328:	44 89 95 60 fe ff ff 	mov    %r10d,-0x1a0(%rbp)
  10932f:	f2 0f 11 85 88 fe ff 	movsd  %xmm0,-0x178(%rbp)
  109336:	ff 
  109337:	e8 04 0e 00 00       	call   10a140 <_dtoa_r>
  10933c:	48 63 b5 60 fe ff ff 	movslq -0x1a0(%rbp),%rsi
  109343:	f2 0f 10 85 88 fe ff 	movsd  -0x178(%rbp),%xmm0
  10934a:	ff 
  10934b:	80 38 30             	cmpb   $0x30,(%rax)
  10934e:	44 8b 9d 58 fe ff ff 	mov    -0x1a8(%rbp),%r11d
  109355:	48 89 c1             	mov    %rax,%rcx
  109358:	49 89 f2             	mov    %rsi,%r10
  10935b:	75 1b                	jne    109378 <_vfprintf_r+0x2c38>
  10935d:	66 0f ef c9          	pxor   %xmm1,%xmm1
  109361:	ba 01 00 00 00       	mov    $0x1,%edx
  109366:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  10936a:	0f 9a c0             	setp   %al
  10936d:	0f 45 c2             	cmovne %edx,%eax
  109370:	84 c0                	test   %al,%al
  109372:	0f 85 c1 08 00 00    	jne    109c39 <_vfprintf_r+0x34f9>
  109378:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
  10937e:	48 63 d0             	movslq %eax,%rdx
  109381:	66 0f ef c9          	pxor   %xmm1,%xmm1
  109385:	48 01 f2             	add    %rsi,%rdx
  109388:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  10938c:	0f 8a 68 08 00 00    	jp     109bfa <_vfprintf_r+0x34ba>
  109392:	0f 85 62 08 00 00    	jne    109bfa <_vfprintf_r+0x34ba>
  109398:	89 95 58 fe ff ff    	mov    %edx,-0x1a8(%rbp)
  10939e:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
  1093a4:	44 89 f8             	mov    %r15d,%eax
  1093a7:	89 95 60 fe ff ff    	mov    %edx,-0x1a0(%rbp)
  1093ad:	83 e0 01             	and    $0x1,%eax
  1093b0:	44 09 d0             	or     %r10d,%eax
  1093b3:	85 d2                	test   %edx,%edx
  1093b5:	0f 8e 63 08 00 00    	jle    109c1e <_vfprintf_r+0x34de>
  1093bb:	85 c0                	test   %eax,%eax
  1093bd:	0f 85 1f 08 00 00    	jne    109be2 <_vfprintf_r+0x34a2>
  1093c3:	44 8b a5 60 fe ff ff 	mov    -0x1a0(%rbp),%r12d
  1093ca:	41 bd 66 00 00 00    	mov    $0x66,%r13d
  1093d0:	41 81 e7 00 04 00 00 	and    $0x400,%r15d
  1093d7:	0f 85 71 07 00 00    	jne    109b4e <_vfprintf_r+0x340e>
  1093dd:	45 31 c0             	xor    %r8d,%r8d
  1093e0:	45 85 e4             	test   %r12d,%r12d
  1093e3:	45 0f 49 c4          	cmovns %r12d,%r8d
  1093e7:	e9 56 fc ff ff       	jmp    109042 <_vfprintf_r+0x2902>
  1093ec:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1093f3:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1093fa:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  109401:	44 89 85 60 fe ff ff 	mov    %r8d,-0x1a0(%rbp)
  109408:	44 89 9d 70 fe ff ff 	mov    %r11d,-0x190(%rbp)
  10940f:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
  109416:	e8 05 b5 ff ff       	call   104920 <__sprint_r>
  10941b:	85 c0                	test   %eax,%eax
  10941d:	0f 85 dd d7 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  109423:	8b b5 a8 fe ff ff    	mov    -0x158(%rbp),%esi
  109429:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  109430:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  109437:	44 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%r8d
  10943e:	44 8b 9d 70 fe ff ff 	mov    -0x190(%rbp),%r11d
  109445:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  10944c:	e9 e3 e5 ff ff       	jmp    107a34 <_vfprintf_r+0x12f4>
  109451:	44 8b 9d 78 fe ff ff 	mov    -0x188(%rbp),%r11d
  109458:	45 89 e0             	mov    %r12d,%r8d
  10945b:	4c 63 e3             	movslq %ebx,%r12
  10945e:	48 89 cb             	mov    %rcx,%rbx
  109461:	48 c7 03 d0 d2 11 00 	movq   $0x11d2d0,(%rbx)
  109468:	e9 22 f5 ff ff       	jmp    10898f <_vfprintf_r+0x224f>
  10946d:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  109474:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  10947b:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  109482:	44 89 85 60 fe ff ff 	mov    %r8d,-0x1a0(%rbp)
  109489:	44 89 9d 70 fe ff ff 	mov    %r11d,-0x190(%rbp)
  109490:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
  109497:	e8 84 b4 ff ff       	call   104920 <__sprint_r>
  10949c:	85 c0                	test   %eax,%eax
  10949e:	0f 85 5c d7 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  1094a4:	8b b5 a8 fe ff ff    	mov    -0x158(%rbp),%esi
  1094aa:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  1094b1:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  1094b8:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  1094be:	44 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%r8d
  1094c5:	44 8b 9d 70 fe ff ff 	mov    -0x190(%rbp),%r11d
  1094cc:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  1094d3:	e9 a6 e5 ff ff       	jmp    107a7e <_vfprintf_r+0x133e>
  1094d8:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1094df:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1094e6:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1094ed:	44 89 85 28 fe ff ff 	mov    %r8d,-0x1d8(%rbp)
  1094f4:	44 89 9d 70 fe ff ff 	mov    %r11d,-0x190(%rbp)
  1094fb:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
  109502:	e8 19 b4 ff ff       	call   104920 <__sprint_r>
  109507:	85 c0                	test   %eax,%eax
  109509:	0f 85 f1 d6 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  10950f:	44 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%r8d
  109516:	44 8b 9d 70 fe ff ff 	mov    -0x190(%rbp),%r11d
  10951d:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  109524:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  10952b:	e9 a2 e9 ff ff       	jmp    107ed2 <_vfprintf_r+0x1792>
  109530:	41 f6 c7 01          	test   $0x1,%r15b
  109534:	0f 84 77 d5 ff ff    	je     106ab1 <_vfprintf_r+0x371>
  10953a:	48 8b bd 30 fe ff ff 	mov    -0x1d0(%rbp),%rdi
  109541:	48 8b b5 38 fe ff ff 	mov    -0x1c8(%rbp),%rsi
  109548:	48 89 3b             	mov    %rdi,(%rbx)
  10954b:	8b bd c8 fe ff ff    	mov    -0x138(%rbp),%edi
  109551:	48 01 f0             	add    %rsi,%rax
  109554:	48 89 73 08          	mov    %rsi,0x8(%rbx)
  109558:	8d 57 01             	lea    0x1(%rdi),%edx
  10955b:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  109562:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  109568:	83 fa 07             	cmp    $0x7,%edx
  10956b:	0f 8f fc fe ff ff    	jg     10946d <_vfprintf_r+0x2d2d>
  109571:	48 83 c3 10          	add    $0x10,%rbx
  109575:	e9 0c e5 ff ff       	jmp    107a86 <_vfprintf_r+0x1346>
  10957a:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  109581:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  109588:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10958f:	44 89 85 70 fe ff ff 	mov    %r8d,-0x190(%rbp)
  109596:	44 89 9d 78 fe ff ff 	mov    %r11d,-0x188(%rbp)
  10959d:	e8 7e b3 ff ff       	call   104920 <__sprint_r>
  1095a2:	85 c0                	test   %eax,%eax
  1095a4:	0f 85 56 d6 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  1095aa:	8b 8d a8 fe ff ff    	mov    -0x158(%rbp),%ecx
  1095b0:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  1095b7:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  1095be:	44 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%r8d
  1095c5:	44 8b 9d 78 fe ff ff 	mov    -0x188(%rbp),%r11d
  1095cc:	e9 8e e9 ff ff       	jmp    107f5f <_vfprintf_r+0x181f>
  1095d1:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1095d8:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1095df:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1095e6:	e8 35 b3 ff ff       	call   104920 <__sprint_r>
  1095eb:	85 c0                	test   %eax,%eax
  1095ed:	0f 85 0d d6 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  1095f3:	49 0f be 16          	movsbq (%r14),%rdx
  1095f7:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  1095fe:	e9 5b fb ff ff       	jmp    10915e <_vfprintf_r+0x2a1e>
  109603:	45 89 d0             	mov    %r10d,%r8d
  109606:	45 89 d4             	mov    %r10d,%r12d
  109609:	45 31 d2             	xor    %r10d,%r10d
  10960c:	c7 85 48 fe ff ff 00 	movl   $0x0,-0x1b8(%rbp)
  109613:	00 00 00 
  109616:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  10961d:	00 00 00 
  109620:	0f b6 95 a5 fe ff ff 	movzbl -0x15b(%rbp),%edx
  109627:	c7 85 60 fe ff ff 00 	movl   $0x0,-0x1a0(%rbp)
  10962e:	00 00 00 
  109631:	e9 4d db ff ff       	jmp    107183 <_vfprintf_r+0xa43>
  109636:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  10963d:	48 8b b5 10 fe ff ff 	mov    -0x1f0(%rbp),%rsi
  109644:	4c 89 95 50 fe ff ff 	mov    %r10,-0x1b0(%rbp)
  10964b:	4c 89 85 58 fe ff ff 	mov    %r8,-0x1a8(%rbp)
  109652:	48 29 c1             	sub    %rax,%rcx
  109655:	48 89 c2             	mov    %rax,%rdx
  109658:	48 89 cf             	mov    %rcx,%rdi
  10965b:	48 89 8d 60 fe ff ff 	mov    %rcx,-0x1a0(%rbp)
  109662:	e8 19 37 00 00       	call   10cd80 <strncpy>
  109667:	4c 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%r8
  10966e:	48 8b 8d 60 fe ff ff 	mov    -0x1a0(%rbp),%rcx
  109675:	48 89 da             	mov    %rbx,%rdx
  109678:	4c 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%r10
  10967f:	49 b9 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%r9
  109686:	cc cc cc 
  109689:	41 80 78 01 01       	cmpb   $0x1,0x1(%r8)
  10968e:	49 83 d8 ff          	sbb    $0xffffffffffffffff,%r8
  109692:	45 31 db             	xor    %r11d,%r11d
  109695:	e9 ee f0 ff ff       	jmp    108788 <_vfprintf_r+0x2048>
  10969a:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1096a1:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  1096a8:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  1096af:	44 89 85 70 fe ff ff 	mov    %r8d,-0x190(%rbp)
  1096b6:	44 89 9d 78 fe ff ff 	mov    %r11d,-0x188(%rbp)
  1096bd:	e8 5e b2 ff ff       	call   104920 <__sprint_r>
  1096c2:	85 c0                	test   %eax,%eax
  1096c4:	0f 85 36 d5 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  1096ca:	8b 95 58 fe ff ff    	mov    -0x1a8(%rbp),%edx
  1096d0:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  1096d7:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  1096de:	44 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%r8d
  1096e5:	44 8b 9d 78 fe ff ff 	mov    -0x188(%rbp),%r11d
  1096ec:	2b 95 a8 fe ff ff    	sub    -0x158(%rbp),%edx
  1096f2:	e9 af e8 ff ff       	jmp    107fa6 <_vfprintf_r+0x1866>
  1096f7:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  1096fe:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  109705:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  10970c:	e8 0f b2 ff ff       	call   104920 <__sprint_r>
  109711:	85 c0                	test   %eax,%eax
  109713:	0f 84 1a f1 ff ff    	je     108833 <_vfprintf_r+0x20f3>
  109719:	e9 fd d4 ff ff       	jmp    106c1b <_vfprintf_r+0x4db>
  10971e:	41 89 f5             	mov    %esi,%r13d
  109721:	41 f7 dd             	neg    %r13d
  109724:	83 fe f0             	cmp    $0xfffffff0,%esi
  109727:	0f 8d a5 01 00 00    	jge    1098d2 <_vfprintf_r+0x3192>
  10972d:	49 89 cc             	mov    %rcx,%r12
  109730:	44 89 9d 78 fe ff ff 	mov    %r11d,-0x188(%rbp)
  109737:	48 89 d9             	mov    %rbx,%rcx
  10973a:	44 89 eb             	mov    %r13d,%ebx
  10973d:	45 89 c5             	mov    %r8d,%r13d
  109740:	eb 12                	jmp    109754 <_vfprintf_r+0x3014>
  109742:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  109748:	83 eb 10             	sub    $0x10,%ebx
  10974b:	83 fb 10             	cmp    $0x10,%ebx
  10974e:	0f 8e 6b 01 00 00    	jle    1098bf <_vfprintf_r+0x317f>
  109754:	48 83 c0 10          	add    $0x10,%rax
  109758:	83 c2 01             	add    $0x1,%edx
  10975b:	48 83 c1 10          	add    $0x10,%rcx
  10975f:	48 c7 41 f0 d0 d2 11 	movq   $0x11d2d0,-0x10(%rcx)
  109766:	00 
  109767:	48 c7 41 f8 10 00 00 	movq   $0x10,-0x8(%rcx)
  10976e:	00 
  10976f:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  109776:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  10977c:	83 fa 07             	cmp    $0x7,%edx
  10977f:	7e c7                	jle    109748 <_vfprintf_r+0x3008>
  109781:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  109788:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  10978f:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  109796:	e8 85 b1 ff ff       	call   104920 <__sprint_r>
  10979b:	85 c0                	test   %eax,%eax
  10979d:	0f 85 5d d4 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  1097a3:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  1097aa:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  1097b0:	48 8d 8d 50 ff ff ff 	lea    -0xb0(%rbp),%rcx
  1097b7:	eb 8f                	jmp    109748 <_vfprintf_r+0x3008>
  1097b9:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  1097c0:	f6 80 b0 00 00 00 01 	testb  $0x1,0xb0(%rax)
  1097c7:	75 19                	jne    1097e2 <_vfprintf_r+0x30a2>
  1097c9:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  1097d0:	f6 40 11 02          	testb  $0x2,0x11(%rax)
  1097d4:	75 0c                	jne    1097e2 <_vfprintf_r+0x30a2>
  1097d6:	48 8b b8 a0 00 00 00 	mov    0xa0(%rax),%rdi
  1097dd:	e8 dd 85 00 00       	call   111dbf <__retarget_lock_release_recursive>
  1097e2:	c7 85 6c fe ff ff ff 	movl   $0xffffffff,-0x194(%rbp)
  1097e9:	ff ff ff 
  1097ec:	e9 4a d4 ff ff       	jmp    106c3b <_vfprintf_r+0x4fb>
  1097f1:	8b bd 38 fe ff ff    	mov    -0x1c8(%rbp),%edi
  1097f7:	41 bd 67 00 00 00    	mov    $0x67,%r13d
  1097fd:	44 8d 24 07          	lea    (%rdi,%rax,1),%r12d
  109801:	8b 85 60 fe ff ff    	mov    -0x1a0(%rbp),%eax
  109807:	85 c0                	test   %eax,%eax
  109809:	0f 8f c1 fb ff ff    	jg     1093d0 <_vfprintf_r+0x2c90>
  10980f:	41 29 c4             	sub    %eax,%r12d
  109812:	45 31 c0             	xor    %r8d,%r8d
  109815:	41 83 c4 01          	add    $0x1,%r12d
  109819:	45 85 e4             	test   %r12d,%r12d
  10981c:	45 0f 49 c4          	cmovns %r12d,%r8d
  109820:	e9 1d f8 ff ff       	jmp    109042 <_vfprintf_r+0x2902>
  109825:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  10982c:	44 89 d2             	mov    %r10d,%edx
  10982f:	48 8d 8d a8 fe ff ff 	lea    -0x158(%rbp),%rcx
  109836:	4c 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%r9
  10983d:	4c 8d 85 ac fe ff ff 	lea    -0x154(%rbp),%r8
  109844:	be 02 00 00 00       	mov    $0x2,%esi
  109849:	44 89 9d 58 fe ff ff 	mov    %r11d,-0x1a8(%rbp)
  109850:	44 89 95 60 fe ff ff 	mov    %r10d,-0x1a0(%rbp)
  109857:	f2 0f 11 85 88 fe ff 	movsd  %xmm0,-0x178(%rbp)
  10985e:	ff 
  10985f:	e8 dc 08 00 00       	call   10a140 <_dtoa_r>
  109864:	41 f6 c7 01          	test   $0x1,%r15b
  109868:	f2 0f 10 85 88 fe ff 	movsd  -0x178(%rbp),%xmm0
  10986f:	ff 
  109870:	44 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%r10d
  109877:	44 8b 9d 58 fe ff ff 	mov    -0x1a8(%rbp),%r11d
  10987e:	48 89 c1             	mov    %rax,%rcx
  109881:	74 1b                	je     10989e <_vfprintf_r+0x315e>
  109883:	66 0f ef c9          	pxor   %xmm1,%xmm1
  109887:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
  10988b:	7a 06                	jp     109893 <_vfprintf_r+0x3153>
  10988d:	0f 84 da 03 00 00    	je     109c6d <_vfprintf_r+0x352d>
  109893:	49 63 d2             	movslq %r10d,%rdx
  109896:	48 01 ca             	add    %rcx,%rdx
  109899:	e9 08 f3 ff ff       	jmp    108ba6 <_vfprintf_r+0x2466>
  10989e:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  1098a5:	8b bd a8 fe ff ff    	mov    -0x158(%rbp),%edi
  1098ab:	48 29 c8             	sub    %rcx,%rax
  1098ae:	89 bd 60 fe ff ff    	mov    %edi,-0x1a0(%rbp)
  1098b4:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%rbp)
  1098ba:	e9 32 f3 ff ff       	jmp    108bf1 <_vfprintf_r+0x24b1>
  1098bf:	44 8b 9d 78 fe ff ff 	mov    -0x188(%rbp),%r11d
  1098c6:	45 89 e8             	mov    %r13d,%r8d
  1098c9:	41 89 dd             	mov    %ebx,%r13d
  1098cc:	48 89 cb             	mov    %rcx,%rbx
  1098cf:	4c 89 e1             	mov    %r12,%rcx
  1098d2:	4d 63 ed             	movslq %r13d,%r13
  1098d5:	83 c2 01             	add    $0x1,%edx
  1098d8:	48 c7 03 d0 d2 11 00 	movq   $0x11d2d0,(%rbx)
  1098df:	4c 01 e8             	add    %r13,%rax
  1098e2:	4c 89 6b 08          	mov    %r13,0x8(%rbx)
  1098e6:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
  1098ed:	89 95 c8 fe ff ff    	mov    %edx,-0x138(%rbp)
  1098f3:	83 fa 07             	cmp    $0x7,%edx
  1098f6:	0f 8e 75 fc ff ff    	jle    109571 <_vfprintf_r+0x2e31>
  1098fc:	48 8b b5 90 fe ff ff 	mov    -0x170(%rbp),%rsi
  109903:	48 8b bd 98 fe ff ff 	mov    -0x168(%rbp),%rdi
  10990a:	48 8d 95 c0 fe ff ff 	lea    -0x140(%rbp),%rdx
  109911:	44 89 85 60 fe ff ff 	mov    %r8d,-0x1a0(%rbp)
  109918:	44 89 9d 70 fe ff ff 	mov    %r11d,-0x190(%rbp)
  10991f:	48 89 8d 78 fe ff ff 	mov    %rcx,-0x188(%rbp)
  109926:	e8 f5 af ff ff       	call   104920 <__sprint_r>
  10992b:	85 c0                	test   %eax,%eax
  10992d:	0f 85 cd d2 ff ff    	jne    106c00 <_vfprintf_r+0x4c0>
  109933:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  10993a:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  109940:	48 8d 9d 50 ff ff ff 	lea    -0xb0(%rbp),%rbx
  109947:	44 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%r8d
  10994e:	44 8b 9d 70 fe ff ff 	mov    -0x190(%rbp),%r11d
  109955:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
  10995c:	e9 25 e1 ff ff       	jmp    107a86 <_vfprintf_r+0x1346>
  109961:	48 8d 85 b3 fe ff ff 	lea    -0x14d(%rbp),%rax
  109968:	40 84 f6             	test   %sil,%sil
  10996b:	75 0e                	jne    10997b <_vfprintf_r+0x323b>
  10996d:	c6 85 b3 fe ff ff 30 	movb   $0x30,-0x14d(%rbp)
  109974:	48 8d 85 b4 fe ff ff 	lea    -0x14c(%rbp),%rax
  10997b:	83 c2 30             	add    $0x30,%edx
  10997e:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  109982:	88 10                	mov    %dl,(%rax)
  109984:	48 29 f0             	sub    %rsi,%rax
  109987:	05 20 01 00 00       	add    $0x120,%eax
  10998c:	89 85 68 fe ff ff    	mov    %eax,-0x198(%rbp)
  109992:	e9 56 f3 ff ff       	jmp    108ced <_vfprintf_r+0x25ad>
  109997:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  10999e:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  1099a2:	48 8d 42 08          	lea    0x8(%rdx),%rax
  1099a6:	48 89 47 08          	mov    %rax,0x8(%rdi)
  1099aa:	e9 23 f5 ff ff       	jmp    108ed2 <_vfprintf_r+0x2792>
  1099af:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  1099b6:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  1099ba:	48 8d 41 08          	lea    0x8(%rcx),%rax
  1099be:	48 89 47 08          	mov    %rax,0x8(%rdi)
  1099c2:	e9 2c f0 ff ff       	jmp    1089f3 <_vfprintf_r+0x22b3>
  1099c7:	83 f8 2f             	cmp    $0x2f,%eax
  1099ca:	0f 87 d0 02 00 00    	ja     109ca0 <_vfprintf_r+0x3560>
  1099d0:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  1099d7:	89 c2                	mov    %eax,%edx
  1099d9:	83 c0 08             	add    $0x8,%eax
  1099dc:	89 06                	mov    %eax,(%rsi)
  1099de:	48 03 56 10          	add    0x10(%rsi),%rdx
  1099e2:	48 8b 02             	mov    (%rdx),%rax
  1099e5:	8b bd 6c fe ff ff    	mov    -0x194(%rbp),%edi
  1099eb:	89 38                	mov    %edi,(%rax)
  1099ed:	e9 6e ce ff ff       	jmp    106860 <_vfprintf_r+0x120>
  1099f2:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  1099f9:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  1099fd:	48 8d 42 08          	lea    0x8(%rdx),%rax
  109a01:	48 89 47 08          	mov    %rax,0x8(%rdi)
  109a05:	e9 2f f5 ff ff       	jmp    108f39 <_vfprintf_r+0x27f9>
  109a0a:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  109a11:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  109a15:	48 8d 42 08          	lea    0x8(%rdx),%rax
  109a19:	48 89 47 08          	mov    %rax,0x8(%rdi)
  109a1d:	e9 a1 ef ff ff       	jmp    1089c3 <_vfprintf_r+0x2283>
  109a22:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  109a29:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  109a2d:	48 8d 42 08          	lea    0x8(%rdx),%rax
  109a31:	48 89 47 08          	mov    %rax,0x8(%rdi)
  109a35:	e9 8d f0 ff ff       	jmp    108ac7 <_vfprintf_r+0x2387>
  109a3a:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  109a41:	48 8b 4f 08          	mov    0x8(%rdi),%rcx
  109a45:	48 8d 41 08          	lea    0x8(%rcx),%rax
  109a49:	48 89 47 08          	mov    %rax,0x8(%rdi)
  109a4d:	8b 31                	mov    (%rcx),%esi
  109a4f:	e9 04 d6 ff ff       	jmp    107058 <_vfprintf_r+0x918>
  109a54:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  109a5b:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  109a5f:	48 8d 42 08          	lea    0x8(%rdx),%rax
  109a63:	48 89 47 08          	mov    %rax,0x8(%rdi)
  109a67:	8b 32                	mov    (%rdx),%esi
  109a69:	e9 4e d5 ff ff       	jmp    106fbc <_vfprintf_r+0x87c>
  109a6e:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  109a75:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  109a79:	48 8d 42 08          	lea    0x8(%rdx),%rax
  109a7d:	48 89 47 08          	mov    %rax,0x8(%rdi)
  109a81:	8b 32                	mov    (%rdx),%esi
  109a83:	e9 96 e8 ff ff       	jmp    10831e <_vfprintf_r+0x1bde>
  109a88:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  109a8f:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  109a93:	48 8d 42 08          	lea    0x8(%rdx),%rax
  109a97:	48 89 47 08          	mov    %rax,0x8(%rdi)
  109a9b:	e9 83 ef ff ff       	jmp    108a23 <_vfprintf_r+0x22e3>
  109aa0:	41 f6 c7 01          	test   $0x1,%r15b
  109aa4:	0f 84 65 f2 ff ff    	je     108d0f <_vfprintf_r+0x25cf>
  109aaa:	e9 57 f2 ff ff       	jmp    108d06 <_vfprintf_r+0x25c6>
  109aaf:	f2 0f 10 85 40 fe ff 	movsd  -0x1c0(%rbp),%xmm0
  109ab6:	ff 
  109ab7:	c6 85 78 fe ff ff 2d 	movb   $0x2d,-0x188(%rbp)
  109abe:	66 0f 57 05 2a 38 01 	xorpd  0x1382a(%rip),%xmm0        # 11d2f0 <blanks.1+0x10>
  109ac5:	00 
  109ac6:	e9 4c f0 ff ff       	jmp    108b17 <_vfprintf_r+0x23d7>
  109acb:	f2 0f 10 9d 40 fe ff 	movsd  -0x1c0(%rbp),%xmm3
  109ad2:	ff 
  109ad3:	66 0f 50 c3          	movmskpd %xmm3,%eax
  109ad7:	a8 01                	test   $0x1,%al
  109ad9:	0f 85 2e 01 00 00    	jne    109c0d <_vfprintf_r+0x34cd>
  109adf:	0f b6 95 a5 fe ff ff 	movzbl -0x15b(%rbp),%edx
  109ae6:	41 83 fd 48          	cmp    $0x48,%r13d
  109aea:	b9 79 03 12 00       	mov    $0x120379,%ecx
  109aef:	b8 7d 03 12 00       	mov    $0x12037d,%eax
  109af4:	e9 de d1 ff ff       	jmp    106cd7 <_vfprintf_r+0x597>
  109af9:	4c 89 85 b8 fe ff ff 	mov    %r8,-0x148(%rbp)
  109b00:	44 0f b6 47 0f       	movzbl 0xf(%rdi),%r8d
  109b05:	48 89 c2             	mov    %rax,%rdx
  109b08:	0f b6 70 ff          	movzbl -0x1(%rax),%esi
  109b0c:	41 38 f0             	cmp    %sil,%r8b
  109b0f:	75 1f                	jne    109b30 <_vfprintf_r+0x33f0>
  109b11:	c6 42 ff 30          	movb   $0x30,-0x1(%rdx)
  109b15:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  109b1c:	48 8d 72 ff          	lea    -0x1(%rdx),%rsi
  109b20:	48 89 b5 b8 fe ff ff 	mov    %rsi,-0x148(%rbp)
  109b27:	0f b6 72 ff          	movzbl -0x1(%rdx),%esi
  109b2b:	41 38 f0             	cmp    %sil,%r8b
  109b2e:	74 e1                	je     109b11 <_vfprintf_r+0x33d1>
  109b30:	44 8d 46 01          	lea    0x1(%rsi),%r8d
  109b34:	40 80 fe 39          	cmp    $0x39,%sil
  109b38:	75 05                	jne    109b3f <_vfprintf_r+0x33ff>
  109b3a:	44 0f b6 47 0a       	movzbl 0xa(%rdi),%r8d
  109b3f:	44 88 42 ff          	mov    %r8b,-0x1(%rdx)
  109b43:	e9 65 eb ff ff       	jmp    1086ad <_vfprintf_r+0x1f6d>
  109b48:	41 bd 67 00 00 00    	mov    $0x67,%r13d
  109b4e:	48 8b b5 08 fe ff ff 	mov    -0x1f8(%rbp),%rsi
  109b55:	c7 85 48 fe ff ff 00 	movl   $0x0,-0x1b8(%rbp)
  109b5c:	00 00 00 
  109b5f:	c7 85 50 fe ff ff 00 	movl   $0x0,-0x1b0(%rbp)
  109b66:	00 00 00 
  109b69:	0f be 06             	movsbl (%rsi),%eax
  109b6c:	3c 7f                	cmp    $0x7f,%al
  109b6e:	74 3e                	je     109bae <_vfprintf_r+0x346e>
  109b70:	8b 95 60 fe ff ff    	mov    -0x1a0(%rbp),%edx
  109b76:	eb 0f                	jmp    109b87 <_vfprintf_r+0x3447>
  109b78:	83 85 50 fe ff ff 01 	addl   $0x1,-0x1b0(%rbp)
  109b7f:	48 83 c6 01          	add    $0x1,%rsi
  109b83:	3c 7f                	cmp    $0x7f,%al
  109b85:	74 1a                	je     109ba1 <_vfprintf_r+0x3461>
  109b87:	39 d0                	cmp    %edx,%eax
  109b89:	7d 16                	jge    109ba1 <_vfprintf_r+0x3461>
  109b8b:	29 c2                	sub    %eax,%edx
  109b8d:	0f be 46 01          	movsbl 0x1(%rsi),%eax
  109b91:	84 c0                	test   %al,%al
  109b93:	75 e3                	jne    109b78 <_vfprintf_r+0x3438>
  109b95:	83 85 48 fe ff ff 01 	addl   $0x1,-0x1b8(%rbp)
  109b9c:	0f be 06             	movsbl (%rsi),%eax
  109b9f:	eb e2                	jmp    109b83 <_vfprintf_r+0x3443>
  109ba1:	89 95 60 fe ff ff    	mov    %edx,-0x1a0(%rbp)
  109ba7:	48 89 b5 08 fe ff ff 	mov    %rsi,-0x1f8(%rbp)
  109bae:	8b 85 48 fe ff ff    	mov    -0x1b8(%rbp),%eax
  109bb4:	8b b5 50 fe ff ff    	mov    -0x1b0(%rbp),%esi
  109bba:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  109bc0:	48 c7 85 88 fe ff ff 	movq   $0x0,-0x178(%rbp)
  109bc7:	00 00 00 00 
  109bcb:	8b bd 18 fe ff ff    	mov    -0x1e8(%rbp),%edi
  109bd1:	01 f0                	add    %esi,%eax
  109bd3:	0f af c7             	imul   %edi,%eax
  109bd6:	41 01 c4             	add    %eax,%r12d
  109bd9:	45 0f 49 c4          	cmovns %r12d,%r8d
  109bdd:	e9 6a f1 ff ff       	jmp    108d4c <_vfprintf_r+0x260c>
  109be2:	8b 85 38 fe ff ff    	mov    -0x1c8(%rbp),%eax
  109be8:	41 bd 66 00 00 00    	mov    $0x66,%r13d
  109bee:	44 8d 24 02          	lea    (%rdx,%rax,1),%r12d
  109bf2:	45 01 d4             	add    %r10d,%r12d
  109bf5:	e9 d6 f7 ff ff       	jmp    1093d0 <_vfprintf_r+0x2c90>
  109bfa:	48 01 ca             	add    %rcx,%rdx
  109bfd:	e9 a4 ef ff ff       	jmp    108ba6 <_vfprintf_r+0x2466>
  109c02:	41 8d 34 0a          	lea    (%r10,%rcx,1),%esi
  109c06:	29 c6                	sub    %eax,%esi
  109c08:	e9 61 ea ff ff       	jmp    10866e <_vfprintf_r+0x1f2e>
  109c0d:	c6 85 a5 fe ff ff 2d 	movb   $0x2d,-0x15b(%rbp)
  109c14:	ba 2d 00 00 00       	mov    $0x2d,%edx
  109c19:	e9 c8 fe ff ff       	jmp    109ae6 <_vfprintf_r+0x33a6>
  109c1e:	85 c0                	test   %eax,%eax
  109c20:	75 2a                	jne    109c4c <_vfprintf_r+0x350c>
  109c22:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  109c28:	41 bd 66 00 00 00    	mov    $0x66,%r13d
  109c2e:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  109c34:	e9 09 f4 ff ff       	jmp    109042 <_vfprintf_r+0x2902>
  109c39:	b8 01 00 00 00       	mov    $0x1,%eax
  109c3e:	44 29 d0             	sub    %r10d,%eax
  109c41:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%rbp)
  109c47:	e9 32 f7 ff ff       	jmp    10937e <_vfprintf_r+0x2c3e>
  109c4c:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
  109c53:	45 31 c0             	xor    %r8d,%r8d
  109c56:	41 bd 66 00 00 00    	mov    $0x66,%r13d
  109c5c:	45 8d 64 02 01       	lea    0x1(%r10,%rax,1),%r12d
  109c61:	45 85 e4             	test   %r12d,%r12d
  109c64:	45 0f 49 c4          	cmovns %r12d,%r8d
  109c68:	e9 d5 f3 ff ff       	jmp    109042 <_vfprintf_r+0x2902>
  109c6d:	8b b5 a8 fe ff ff    	mov    -0x158(%rbp),%esi
  109c73:	44 89 95 58 fe ff ff 	mov    %r10d,-0x1a8(%rbp)
  109c7a:	49 63 c2             	movslq %r10d,%rax
  109c7d:	89 b5 60 fe ff ff    	mov    %esi,-0x1a0(%rbp)
  109c83:	e9 69 ef ff ff       	jmp    108bf1 <_vfprintf_r+0x24b1>
  109c88:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  109c8f:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  109c93:	48 8d 42 08          	lea    0x8(%rdx),%rax
  109c97:	48 89 47 08          	mov    %rax,0x8(%rdi)
  109c9b:	e9 d5 ed ff ff       	jmp    108a75 <_vfprintf_r+0x2335>
  109ca0:	48 8b bd 80 fe ff ff 	mov    -0x180(%rbp),%rdi
  109ca7:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  109cab:	48 8d 42 08          	lea    0x8(%rdx),%rax
  109caf:	48 89 47 08          	mov    %rax,0x8(%rdi)
  109cb3:	e9 2a fd ff ff       	jmp    1099e2 <_vfprintf_r+0x32a2>
  109cb8:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  109cbf:	8b 0e                	mov    (%rsi),%ecx
  109cc1:	83 f9 2f             	cmp    $0x2f,%ecx
  109cc4:	77 47                	ja     109d0d <_vfprintf_r+0x35cd>
  109cc6:	89 c8                	mov    %ecx,%eax
  109cc8:	83 c1 08             	add    $0x8,%ecx
  109ccb:	48 03 46 10          	add    0x10(%rsi),%rax
  109ccf:	89 0e                	mov    %ecx,(%rsi)
  109cd1:	44 8b 10             	mov    (%rax),%r10d
  109cd4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  109cd9:	45 0f be 6e 01       	movsbl 0x1(%r14),%r13d
  109cde:	49 89 d6             	mov    %rdx,%r14
  109ce1:	45 85 d2             	test   %r10d,%r10d
  109ce4:	44 0f 48 d0          	cmovs  %eax,%r10d
  109ce8:	e9 06 cc ff ff       	jmp    1068f3 <_vfprintf_r+0x1b3>
  109ced:	8b 85 a8 fe ff ff    	mov    -0x158(%rbp),%eax
  109cf3:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%rbp)
  109cf9:	e9 0b ef ff ff       	jmp    108c09 <_vfprintf_r+0x24c9>
  109cfe:	c7 85 68 fe ff ff 02 	movl   $0x2,-0x198(%rbp)
  109d05:	00 00 00 
  109d08:	e9 e0 ef ff ff       	jmp    108ced <_vfprintf_r+0x25ad>
  109d0d:	48 8b b5 80 fe ff ff 	mov    -0x180(%rbp),%rsi
  109d14:	48 8b 46 08          	mov    0x8(%rsi),%rax
  109d18:	48 8d 48 08          	lea    0x8(%rax),%rcx
  109d1c:	48 89 4e 08          	mov    %rcx,0x8(%rsi)
  109d20:	eb af                	jmp    109cd1 <_vfprintf_r+0x3591>
  109d22:	41 83 fc 46          	cmp    $0x46,%r12d
  109d26:	0f 84 78 f6 ff ff    	je     1093a4 <_vfprintf_r+0x2c64>
  109d2c:	e9 d8 ee ff ff       	jmp    108c09 <_vfprintf_r+0x24c9>
  109d31:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  109d38:	66 83 48 10 40       	orw    $0x40,0x10(%rax)
  109d3d:	e9 d9 ce ff ff       	jmp    106c1b <_vfprintf_r+0x4db>
  109d42:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  109d49:	00 00 00 
  109d4c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000109d50 <__sbprintf>:
  109d50:	55                   	push   %rbp
  109d51:	48 89 e5             	mov    %rsp,%rbp
  109d54:	41 56                	push   %r14
  109d56:	49 89 ce             	mov    %rcx,%r14
  109d59:	41 55                	push   %r13
  109d5b:	49 89 d5             	mov    %rdx,%r13
  109d5e:	41 54                	push   %r12
  109d60:	49 89 fc             	mov    %rdi,%r12
  109d63:	48 8d bd c0 fb ff ff 	lea    -0x440(%rbp),%rdi
  109d6a:	53                   	push   %rbx
  109d6b:	48 89 f3             	mov    %rsi,%rbx
  109d6e:	48 81 ec c0 04 00 00 	sub    $0x4c0,%rsp
  109d75:	8b 86 b0 00 00 00    	mov    0xb0(%rsi),%eax
  109d7b:	0f b7 56 10          	movzwl 0x10(%rsi),%edx
  109d7f:	c7 85 2c fb ff ff 00 	movl   $0x400,-0x4d4(%rbp)
  109d86:	04 00 00 
  109d89:	c7 85 40 fb ff ff 00 	movl   $0x400,-0x4c0(%rbp)
  109d90:	04 00 00 
  109d93:	89 85 d0 fb ff ff    	mov    %eax,-0x430(%rbp)
  109d99:	0f b7 46 12          	movzwl 0x12(%rsi),%eax
  109d9d:	81 e2 fd ff 00 00    	and    $0xfffd,%edx
  109da3:	c7 85 48 fb ff ff 00 	movl   $0x0,-0x4b8(%rbp)
  109daa:	00 00 00 
  109dad:	c1 e0 10             	shl    $0x10,%eax
  109db0:	09 d0                	or     %edx,%eax
  109db2:	89 85 30 fb ff ff    	mov    %eax,-0x4d0(%rbp)
  109db8:	48 8b 46 30          	mov    0x30(%rsi),%rax
  109dbc:	48 89 85 50 fb ff ff 	mov    %rax,-0x4b0(%rbp)
  109dc3:	48 8b 46 40          	mov    0x40(%rsi),%rax
  109dc7:	48 89 85 60 fb ff ff 	mov    %rax,-0x4a0(%rbp)
  109dce:	48 8d 85 e0 fb ff ff 	lea    -0x420(%rbp),%rax
  109dd5:	48 89 85 20 fb ff ff 	mov    %rax,-0x4e0(%rbp)
  109ddc:	48 89 85 38 fb ff ff 	mov    %rax,-0x4c8(%rbp)
  109de3:	e8 a8 7f 00 00       	call   111d90 <__retarget_lock_init_recursive>
  109de8:	4c 89 ea             	mov    %r13,%rdx
  109deb:	4c 89 f1             	mov    %r14,%rcx
  109dee:	4c 89 e7             	mov    %r12,%rdi
  109df1:	48 8d b5 20 fb ff ff 	lea    -0x4e0(%rbp),%rsi
  109df8:	e8 43 c9 ff ff       	call   106740 <_vfprintf_r>
  109dfd:	41 89 c5             	mov    %eax,%r13d
  109e00:	85 c0                	test   %eax,%eax
  109e02:	78 1a                	js     109e1e <__sbprintf+0xce>
  109e04:	48 8d b5 20 fb ff ff 	lea    -0x4e0(%rbp),%rsi
  109e0b:	4c 89 e7             	mov    %r12,%rdi
  109e0e:	e8 8d 19 00 00       	call   10b7a0 <_fflush_r>
  109e13:	85 c0                	test   %eax,%eax
  109e15:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  109e1a:	44 0f 45 e8          	cmovne %eax,%r13d
  109e1e:	f6 85 30 fb ff ff 40 	testb  $0x40,-0x4d0(%rbp)
  109e25:	74 05                	je     109e2c <__sbprintf+0xdc>
  109e27:	66 83 4b 10 40       	orw    $0x40,0x10(%rbx)
  109e2c:	48 8b bd c0 fb ff ff 	mov    -0x440(%rbp),%rdi
  109e33:	e8 79 7f 00 00       	call   111db1 <__retarget_lock_close_recursive>
  109e38:	48 81 c4 c0 04 00 00 	add    $0x4c0,%rsp
  109e3f:	44 89 e8             	mov    %r13d,%eax
  109e42:	5b                   	pop    %rbx
  109e43:	41 5c                	pop    %r12
  109e45:	41 5d                	pop    %r13
  109e47:	41 5e                	pop    %r14
  109e49:	5d                   	pop    %rbp
  109e4a:	c3                   	ret    
  109e4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000109e50 <__swsetup_r>:
  109e50:	55                   	push   %rbp
  109e51:	48 89 e5             	mov    %rsp,%rbp
  109e54:	41 54                	push   %r12
  109e56:	49 89 fc             	mov    %rdi,%r12
  109e59:	48 8b 3d e8 8a 03 00 	mov    0x38ae8(%rip),%rdi        # 142948 <_impure_ptr>
  109e60:	53                   	push   %rbx
  109e61:	48 89 f3             	mov    %rsi,%rbx
  109e64:	48 85 ff             	test   %rdi,%rdi
  109e67:	74 07                	je     109e70 <__swsetup_r+0x20>
  109e69:	8b 47 50             	mov    0x50(%rdi),%eax
  109e6c:	85 c0                	test   %eax,%eax
  109e6e:	74 60                	je     109ed0 <__swsetup_r+0x80>
  109e70:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  109e74:	a8 08                	test   $0x8,%al
  109e76:	74 65                	je     109edd <__swsetup_r+0x8d>
  109e78:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  109e7c:	48 85 d2             	test   %rdx,%rdx
  109e7f:	74 74                	je     109ef5 <__swsetup_r+0xa5>
  109e81:	a8 01                	test   $0x1,%al
  109e83:	75 1b                	jne    109ea0 <__swsetup_r+0x50>
  109e85:	31 c9                	xor    %ecx,%ecx
  109e87:	a8 02                	test   $0x2,%al
  109e89:	75 03                	jne    109e8e <__swsetup_r+0x3e>
  109e8b:	8b 4b 20             	mov    0x20(%rbx),%ecx
  109e8e:	89 4b 0c             	mov    %ecx,0xc(%rbx)
  109e91:	31 c9                	xor    %ecx,%ecx
  109e93:	48 85 d2             	test   %rdx,%rdx
  109e96:	74 1e                	je     109eb6 <__swsetup_r+0x66>
  109e98:	5b                   	pop    %rbx
  109e99:	89 c8                	mov    %ecx,%eax
  109e9b:	41 5c                	pop    %r12
  109e9d:	5d                   	pop    %rbp
  109e9e:	c3                   	ret    
  109e9f:	90                   	nop
  109ea0:	8b 4b 20             	mov    0x20(%rbx),%ecx
  109ea3:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%rbx)
  109eaa:	f7 d9                	neg    %ecx
  109eac:	89 4b 28             	mov    %ecx,0x28(%rbx)
  109eaf:	31 c9                	xor    %ecx,%ecx
  109eb1:	48 85 d2             	test   %rdx,%rdx
  109eb4:	75 e2                	jne    109e98 <__swsetup_r+0x48>
  109eb6:	a8 80                	test   $0x80,%al
  109eb8:	74 de                	je     109e98 <__swsetup_r+0x48>
  109eba:	83 c8 40             	or     $0x40,%eax
  109ebd:	66 89 43 10          	mov    %ax,0x10(%rbx)
  109ec1:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  109ec6:	eb d0                	jmp    109e98 <__swsetup_r+0x48>
  109ec8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  109ecf:	00 
  109ed0:	e8 7b 19 00 00       	call   10b850 <__sinit>
  109ed5:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  109ed9:	a8 08                	test   $0x8,%al
  109edb:	75 9b                	jne    109e78 <__swsetup_r+0x28>
  109edd:	a8 10                	test   $0x10,%al
  109edf:	74 78                	je     109f59 <__swsetup_r+0x109>
  109ee1:	a8 04                	test   $0x4,%al
  109ee3:	75 3b                	jne    109f20 <__swsetup_r+0xd0>
  109ee5:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  109ee9:	83 c8 08             	or     $0x8,%eax
  109eec:	66 89 43 10          	mov    %ax,0x10(%rbx)
  109ef0:	48 85 d2             	test   %rdx,%rdx
  109ef3:	75 8c                	jne    109e81 <__swsetup_r+0x31>
  109ef5:	89 c1                	mov    %eax,%ecx
  109ef7:	66 81 e1 80 02       	and    $0x280,%cx
  109efc:	66 81 f9 00 02       	cmp    $0x200,%cx
  109f01:	0f 84 7a ff ff ff    	je     109e81 <__swsetup_r+0x31>
  109f07:	48 89 de             	mov    %rbx,%rsi
  109f0a:	4c 89 e7             	mov    %r12,%rdi
  109f0d:	e8 5e 20 00 00       	call   10bf70 <__smakebuf_r>
  109f12:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  109f16:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  109f1a:	e9 62 ff ff ff       	jmp    109e81 <__swsetup_r+0x31>
  109f1f:	90                   	nop
  109f20:	48 8b 73 58          	mov    0x58(%rbx),%rsi
  109f24:	48 85 f6             	test   %rsi,%rsi
  109f27:	74 1d                	je     109f46 <__swsetup_r+0xf6>
  109f29:	48 8d 53 74          	lea    0x74(%rbx),%rdx
  109f2d:	48 39 d6             	cmp    %rdx,%rsi
  109f30:	74 0c                	je     109f3e <__swsetup_r+0xee>
  109f32:	4c 89 e7             	mov    %r12,%rdi
  109f35:	e8 26 1c 00 00       	call   10bb60 <_free_r>
  109f3a:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  109f3e:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
  109f45:	00 
  109f46:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  109f4a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%rbx)
  109f51:	83 e0 db             	and    $0xffffffdb,%eax
  109f54:	48 89 13             	mov    %rdx,(%rbx)
  109f57:	eb 90                	jmp    109ee9 <__swsetup_r+0x99>
  109f59:	41 c7 04 24 09 00 00 	movl   $0x9,(%r12)
  109f60:	00 
  109f61:	83 c8 40             	or     $0x40,%eax
  109f64:	e9 54 ff ff ff       	jmp    109ebd <__swsetup_r+0x6d>
  109f69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000109f70 <quorem>:
  109f70:	55                   	push   %rbp
  109f71:	31 c0                	xor    %eax,%eax
  109f73:	48 89 e5             	mov    %rsp,%rbp
  109f76:	41 57                	push   %r15
  109f78:	41 56                	push   %r14
  109f7a:	41 55                	push   %r13
  109f7c:	41 54                	push   %r12
  109f7e:	53                   	push   %rbx
  109f7f:	48 83 ec 28          	sub    $0x28,%rsp
  109f83:	44 8b 66 14          	mov    0x14(%rsi),%r12d
  109f87:	44 39 67 14          	cmp    %r12d,0x14(%rdi)
  109f8b:	0f 8c 4a 01 00 00    	jl     10a0db <quorem+0x16b>
  109f91:	41 83 ec 01          	sub    $0x1,%r12d
  109f95:	4c 8d 7f 18          	lea    0x18(%rdi),%r15
  109f99:	48 8d 5e 18          	lea    0x18(%rsi),%rbx
  109f9d:	49 89 f8             	mov    %rdi,%r8
  109fa0:	49 63 c4             	movslq %r12d,%rax
  109fa3:	31 d2                	xor    %edx,%edx
  109fa5:	48 c1 e0 02          	shl    $0x2,%rax
  109fa9:	49 8d 0c 07          	lea    (%r15,%rax,1),%rcx
  109fad:	4c 8d 2c 03          	lea    (%rbx,%rax,1),%r13
  109fb1:	41 8b 45 00          	mov    0x0(%r13),%eax
  109fb5:	44 8b 09             	mov    (%rcx),%r9d
  109fb8:	8d 78 01             	lea    0x1(%rax),%edi
  109fbb:	44 89 c8             	mov    %r9d,%eax
  109fbe:	f7 f7                	div    %edi
  109fc0:	89 45 cc             	mov    %eax,-0x34(%rbp)
  109fc3:	41 89 c6             	mov    %eax,%r14d
  109fc6:	41 39 f9             	cmp    %edi,%r9d
  109fc9:	0f 82 92 00 00 00    	jb     10a061 <quorem+0xf1>
  109fcf:	48 89 5d c0          	mov    %rbx,-0x40(%rbp)
  109fd3:	49 89 d9             	mov    %rbx,%r9
  109fd6:	4c 89 ff             	mov    %r15,%rdi
  109fd9:	45 31 db             	xor    %r11d,%r11d
  109fdc:	4c 89 7d b8          	mov    %r15,-0x48(%rbp)
  109fe0:	45 31 d2             	xor    %r10d,%r10d
  109fe3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  109fe8:	41 8b 01             	mov    (%r9),%eax
  109feb:	8b 1f                	mov    (%rdi),%ebx
  109fed:	49 83 c1 04          	add    $0x4,%r9
  109ff1:	48 83 c7 04          	add    $0x4,%rdi
  109ff5:	44 0f b7 f8          	movzwl %ax,%r15d
  109ff9:	c1 e8 10             	shr    $0x10,%eax
  109ffc:	45 0f af fe          	imul   %r14d,%r15d
  10a000:	41 0f af c6          	imul   %r14d,%eax
  10a004:	45 01 df             	add    %r11d,%r15d
  10a007:	44 89 fa             	mov    %r15d,%edx
  10a00a:	45 0f b7 ff          	movzwl %r15w,%r15d
  10a00e:	c1 ea 10             	shr    $0x10,%edx
  10a011:	01 d0                	add    %edx,%eax
  10a013:	0f b7 d3             	movzwl %bx,%edx
  10a016:	c1 eb 10             	shr    $0x10,%ebx
  10a019:	44 29 fa             	sub    %r15d,%edx
  10a01c:	41 89 c3             	mov    %eax,%r11d
  10a01f:	0f b7 c0             	movzwl %ax,%eax
  10a022:	44 01 d2             	add    %r10d,%edx
  10a025:	41 c1 eb 10          	shr    $0x10,%r11d
  10a029:	41 89 d2             	mov    %edx,%r10d
  10a02c:	0f b7 d2             	movzwl %dx,%edx
  10a02f:	41 c1 fa 10          	sar    $0x10,%r10d
  10a033:	41 29 c2             	sub    %eax,%r10d
  10a036:	44 01 d3             	add    %r10d,%ebx
  10a039:	41 89 da             	mov    %ebx,%r10d
  10a03c:	c1 e3 10             	shl    $0x10,%ebx
  10a03f:	09 da                	or     %ebx,%edx
  10a041:	41 c1 fa 10          	sar    $0x10,%r10d
  10a045:	89 57 fc             	mov    %edx,-0x4(%rdi)
  10a048:	4d 39 cd             	cmp    %r9,%r13
  10a04b:	73 9b                	jae    109fe8 <quorem+0x78>
  10a04d:	44 8b 09             	mov    (%rcx),%r9d
  10a050:	48 8b 5d c0          	mov    -0x40(%rbp),%rbx
  10a054:	4c 8b 7d b8          	mov    -0x48(%rbp),%r15
  10a058:	45 85 c9             	test   %r9d,%r9d
  10a05b:	0f 84 b9 00 00 00    	je     10a11a <quorem+0x1aa>
  10a061:	4c 89 c7             	mov    %r8,%rdi
  10a064:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  10a068:	e8 53 28 00 00       	call   10c8c0 <__mcmp>
  10a06d:	85 c0                	test   %eax,%eax
  10a06f:	78 67                	js     10a0d8 <quorem+0x168>
  10a071:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  10a075:	4c 89 f9             	mov    %r15,%rcx
  10a078:	31 ff                	xor    %edi,%edi
  10a07a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10a080:	8b 31                	mov    (%rcx),%esi
  10a082:	44 8b 0b             	mov    (%rbx),%r9d
  10a085:	48 83 c3 04          	add    $0x4,%rbx
  10a089:	48 83 c1 04          	add    $0x4,%rcx
  10a08d:	41 0f b7 d1          	movzwl %r9w,%edx
  10a091:	0f b7 c6             	movzwl %si,%eax
  10a094:	41 c1 e9 10          	shr    $0x10,%r9d
  10a098:	29 d0                	sub    %edx,%eax
  10a09a:	c1 ee 10             	shr    $0x10,%esi
  10a09d:	01 f8                	add    %edi,%eax
  10a09f:	89 c2                	mov    %eax,%edx
  10a0a1:	0f b7 c0             	movzwl %ax,%eax
  10a0a4:	c1 fa 10             	sar    $0x10,%edx
  10a0a7:	44 29 ca             	sub    %r9d,%edx
  10a0aa:	01 f2                	add    %esi,%edx
  10a0ac:	89 d7                	mov    %edx,%edi
  10a0ae:	c1 e2 10             	shl    $0x10,%edx
  10a0b1:	09 d0                	or     %edx,%eax
  10a0b3:	c1 ff 10             	sar    $0x10,%edi
  10a0b6:	89 41 fc             	mov    %eax,-0x4(%rcx)
  10a0b9:	49 39 dd             	cmp    %rbx,%r13
  10a0bc:	73 c2                	jae    10a080 <quorem+0x110>
  10a0be:	49 63 c4             	movslq %r12d,%rax
  10a0c1:	49 8d 04 87          	lea    (%r15,%rax,4),%rax
  10a0c5:	8b 08                	mov    (%rax),%ecx
  10a0c7:	85 c9                	test   %ecx,%ecx
  10a0c9:	74 2f                	je     10a0fa <quorem+0x18a>
  10a0cb:	41 8d 46 01          	lea    0x1(%r14),%eax
  10a0cf:	89 45 cc             	mov    %eax,-0x34(%rbp)
  10a0d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10a0d8:	8b 45 cc             	mov    -0x34(%rbp),%eax
  10a0db:	48 83 c4 28          	add    $0x28,%rsp
  10a0df:	5b                   	pop    %rbx
  10a0e0:	41 5c                	pop    %r12
  10a0e2:	41 5d                	pop    %r13
  10a0e4:	41 5e                	pop    %r14
  10a0e6:	41 5f                	pop    %r15
  10a0e8:	5d                   	pop    %rbp
  10a0e9:	c3                   	ret    
  10a0ea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10a0f0:	8b 10                	mov    (%rax),%edx
  10a0f2:	85 d2                	test   %edx,%edx
  10a0f4:	75 0d                	jne    10a103 <quorem+0x193>
  10a0f6:	41 83 ec 01          	sub    $0x1,%r12d
  10a0fa:	48 83 e8 04          	sub    $0x4,%rax
  10a0fe:	49 39 c7             	cmp    %rax,%r15
  10a101:	72 ed                	jb     10a0f0 <quorem+0x180>
  10a103:	41 8d 46 01          	lea    0x1(%r14),%eax
  10a107:	45 89 60 14          	mov    %r12d,0x14(%r8)
  10a10b:	89 45 cc             	mov    %eax,-0x34(%rbp)
  10a10e:	eb c8                	jmp    10a0d8 <quorem+0x168>
  10a110:	8b 39                	mov    (%rcx),%edi
  10a112:	85 ff                	test   %edi,%edi
  10a114:	75 0d                	jne    10a123 <quorem+0x1b3>
  10a116:	41 83 ec 01          	sub    $0x1,%r12d
  10a11a:	48 83 e9 04          	sub    $0x4,%rcx
  10a11e:	49 39 cf             	cmp    %rcx,%r15
  10a121:	72 ed                	jb     10a110 <quorem+0x1a0>
  10a123:	45 89 60 14          	mov    %r12d,0x14(%r8)
  10a127:	4c 89 c7             	mov    %r8,%rdi
  10a12a:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  10a12e:	e8 8d 27 00 00       	call   10c8c0 <__mcmp>
  10a133:	85 c0                	test   %eax,%eax
  10a135:	0f 89 36 ff ff ff    	jns    10a071 <quorem+0x101>
  10a13b:	eb 9b                	jmp    10a0d8 <quorem+0x168>
  10a13d:	0f 1f 00             	nopl   (%rax)

000000000010a140 <_dtoa_r>:
  10a140:	55                   	push   %rbp
  10a141:	48 89 e5             	mov    %rsp,%rbp
  10a144:	41 57                	push   %r15
  10a146:	41 56                	push   %r14
  10a148:	41 89 f6             	mov    %esi,%r14d
  10a14b:	41 55                	push   %r13
  10a14d:	4d 89 c5             	mov    %r8,%r13
  10a150:	41 54                	push   %r12
  10a152:	66 49 0f 7e c4       	movq   %xmm0,%r12
  10a157:	53                   	push   %rbx
  10a158:	48 89 fb             	mov    %rdi,%rbx
  10a15b:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  10a162:	48 8b 77 60          	mov    0x60(%rdi),%rsi
  10a166:	89 55 88             	mov    %edx,-0x78(%rbp)
  10a169:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  10a16d:	4c 89 4d 98          	mov    %r9,-0x68(%rbp)
  10a171:	66 0f d6 45 a0       	movq   %xmm0,-0x60(%rbp)
  10a176:	48 85 f6             	test   %rsi,%rsi
  10a179:	74 28                	je     10a1a3 <_dtoa_r+0x63>
  10a17b:	8b 4f 68             	mov    0x68(%rdi),%ecx
  10a17e:	b8 01 00 00 00       	mov    $0x1,%eax
  10a183:	d3 e0                	shl    %cl,%eax
  10a185:	66 0f 6e c1          	movd   %ecx,%xmm0
  10a189:	66 0f 6e f0          	movd   %eax,%xmm6
  10a18d:	66 0f 62 c6          	punpckldq %xmm6,%xmm0
  10a191:	66 0f d6 46 08       	movq   %xmm0,0x8(%rsi)
  10a196:	e8 a5 1f 00 00       	call   10c140 <_Bfree>
  10a19b:	48 c7 43 60 00 00 00 	movq   $0x0,0x60(%rbx)
  10a1a2:	00 
  10a1a3:	4c 89 e0             	mov    %r12,%rax
  10a1a6:	66 49 0f 6e d4       	movq   %r12,%xmm2
  10a1ab:	31 d2                	xor    %edx,%edx
  10a1ad:	48 c1 e8 20          	shr    $0x20,%rax
  10a1b1:	41 89 c7             	mov    %eax,%r15d
  10a1b4:	85 c0                	test   %eax,%eax
  10a1b6:	79 22                	jns    10a1da <_dtoa_r+0x9a>
  10a1b8:	41 81 e7 ff ff ff 7f 	and    $0x7fffffff,%r15d
  10a1bf:	8b 55 a0             	mov    -0x60(%rbp),%edx
  10a1c2:	4c 89 f8             	mov    %r15,%rax
  10a1c5:	48 c1 e0 20          	shl    $0x20,%rax
  10a1c9:	48 09 c2             	or     %rax,%rdx
  10a1cc:	48 89 55 a0          	mov    %rdx,-0x60(%rbp)
  10a1d0:	66 48 0f 6e d2       	movq   %rdx,%xmm2
  10a1d5:	ba 01 00 00 00       	mov    $0x1,%edx
  10a1da:	44 89 f8             	mov    %r15d,%eax
  10a1dd:	41 89 55 00          	mov    %edx,0x0(%r13)
  10a1e1:	25 00 00 f0 7f       	and    $0x7ff00000,%eax
  10a1e6:	3d 00 00 f0 7f       	cmp    $0x7ff00000,%eax
  10a1eb:	0f 84 1f 04 00 00    	je     10a610 <_dtoa_r+0x4d0>
  10a1f1:	66 0f ef c0          	pxor   %xmm0,%xmm0
  10a1f5:	66 0f 2e d0          	ucomisd %xmm0,%xmm2
  10a1f9:	7a 3d                	jp     10a238 <_dtoa_r+0xf8>
  10a1fb:	75 3b                	jne    10a238 <_dtoa_r+0xf8>
  10a1fd:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  10a201:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  10a207:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  10a20b:	48 85 c0             	test   %rax,%rax
  10a20e:	74 07                	je     10a217 <_dtoa_r+0xd7>
  10a210:	48 c7 00 7e f7 11 00 	movq   $0x11f77e,(%rax)
  10a217:	41 bc 7d f7 11 00    	mov    $0x11f77d,%r12d
  10a21d:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  10a224:	4c 89 e0             	mov    %r12,%rax
  10a227:	5b                   	pop    %rbx
  10a228:	41 5c                	pop    %r12
  10a22a:	41 5d                	pop    %r13
  10a22c:	41 5e                	pop    %r14
  10a22e:	41 5f                	pop    %r15
  10a230:	5d                   	pop    %rbp
  10a231:	c3                   	ret    
  10a232:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10a238:	48 8d 75 cc          	lea    -0x34(%rbp),%rsi
  10a23c:	66 0f 28 c2          	movapd %xmm2,%xmm0
  10a240:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  10a244:	48 89 df             	mov    %rbx,%rdi
  10a247:	f2 0f 11 55 b0       	movsd  %xmm2,-0x50(%rbp)
  10a24c:	e8 ff 28 00 00       	call   10cb50 <__d2b>
  10a251:	44 89 fe             	mov    %r15d,%esi
  10a254:	f2 0f 10 55 b0       	movsd  -0x50(%rbp),%xmm2
  10a259:	c1 ee 14             	shr    $0x14,%esi
  10a25c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10a260:	0f 85 ea 03 00 00    	jne    10a650 <_dtoa_r+0x510>
  10a266:	8b 45 c8             	mov    -0x38(%rbp),%eax
  10a269:	8b 75 cc             	mov    -0x34(%rbp),%esi
  10a26c:	01 c6                	add    %eax,%esi
  10a26e:	8d 96 32 04 00 00    	lea    0x432(%rsi),%edx
  10a274:	83 fa 20             	cmp    $0x20,%edx
  10a277:	0f 8e a3 05 00 00    	jle    10a820 <_dtoa_r+0x6e0>
  10a27d:	b9 40 00 00 00       	mov    $0x40,%ecx
  10a282:	29 d1                	sub    %edx,%ecx
  10a284:	41 d3 e7             	shl    %cl,%r15d
  10a287:	8d 8e 12 04 00 00    	lea    0x412(%rsi),%ecx
  10a28d:	41 d3 ec             	shr    %cl,%r12d
  10a290:	45 09 fc             	or     %r15d,%r12d
  10a293:	44 89 e2             	mov    %r12d,%edx
  10a296:	66 0f ef ff          	pxor   %xmm7,%xmm7
  10a29a:	83 ee 01             	sub    $0x1,%esi
  10a29d:	c7 85 58 ff ff ff 01 	movl   $0x1,-0xa8(%rbp)
  10a2a4:	00 00 00 
  10a2a7:	f2 48 0f 2a fa       	cvtsi2sd %rdx,%xmm7
  10a2ac:	66 48 0f 7e fa       	movq   %xmm7,%rdx
  10a2b1:	48 89 d1             	mov    %rdx,%rcx
  10a2b4:	89 d2                	mov    %edx,%edx
  10a2b6:	48 c1 e9 20          	shr    $0x20,%rcx
  10a2ba:	81 e9 00 00 f0 01    	sub    $0x1f00000,%ecx
  10a2c0:	48 c1 e1 20          	shl    $0x20,%rcx
  10a2c4:	48 09 ca             	or     %rcx,%rdx
  10a2c7:	66 0f ef c9          	pxor   %xmm1,%xmm1
  10a2cb:	66 48 0f 6e c2       	movq   %rdx,%xmm0
  10a2d0:	f2 0f 5c 05 48 3c 01 	subsd  0x13c48(%rip),%xmm0        # 11df20 <_ZTVN10__cxxabiv117__class_type_infoE+0x6c0>
  10a2d7:	00 
  10a2d8:	f2 0f 2a ce          	cvtsi2sd %esi,%xmm1
  10a2dc:	f2 0f 59 0d 54 3c 01 	mulsd  0x13c54(%rip),%xmm1        # 11df38 <_ZTVN10__cxxabiv117__class_type_infoE+0x6d8>
  10a2e3:	00 
  10a2e4:	f2 0f 59 05 3c 3c 01 	mulsd  0x13c3c(%rip),%xmm0        # 11df28 <_ZTVN10__cxxabiv117__class_type_infoE+0x6c8>
  10a2eb:	00 
  10a2ec:	f2 0f 58 05 3c 3c 01 	addsd  0x13c3c(%rip),%xmm0        # 11df30 <_ZTVN10__cxxabiv117__class_type_infoE+0x6d0>
  10a2f3:	00 
  10a2f4:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  10a2f8:	66 0f ef c9          	pxor   %xmm1,%xmm1
  10a2fc:	66 0f 2f c8          	comisd %xmm0,%xmm1
  10a300:	f2 44 0f 2c e0       	cvttsd2si %xmm0,%r12d
  10a305:	0f 87 f5 04 00 00    	ja     10a800 <_dtoa_r+0x6c0>
  10a30b:	29 f0                	sub    %esi,%eax
  10a30d:	44 8d 68 ff          	lea    -0x1(%rax),%r13d
  10a311:	41 83 fc 16          	cmp    $0x16,%r12d
  10a315:	0f 87 d5 04 00 00    	ja     10a7f0 <_dtoa_r+0x6b0>
  10a31b:	49 63 d4             	movslq %r12d,%rdx
  10a31e:	f2 0f 10 04 d5 a0 d1 	movsd  0x11d1a0(,%rdx,8),%xmm0
  10a325:	11 00 
  10a327:	66 0f 2f c2          	comisd %xmm2,%xmm0
  10a32b:	0f 86 4f 04 00 00    	jbe    10a780 <_dtoa_r+0x640>
  10a331:	c7 85 64 ff ff ff 00 	movl   $0x0,-0x9c(%rbp)
  10a338:	00 00 00 
  10a33b:	41 83 ec 01          	sub    $0x1,%r12d
  10a33f:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%rbp)
  10a346:	00 00 00 
  10a349:	45 85 ed             	test   %r13d,%r13d
  10a34c:	79 10                	jns    10a35e <_dtoa_r+0x21e>
  10a34e:	ba 01 00 00 00       	mov    $0x1,%edx
  10a353:	45 31 ed             	xor    %r13d,%r13d
  10a356:	29 c2                	sub    %eax,%edx
  10a358:	89 95 78 ff ff ff    	mov    %edx,-0x88(%rbp)
  10a35e:	45 85 e4             	test   %r12d,%r12d
  10a361:	0f 89 35 04 00 00    	jns    10a79c <_dtoa_r+0x65c>
  10a367:	44 89 e0             	mov    %r12d,%eax
  10a36a:	44 29 a5 78 ff ff ff 	sub    %r12d,-0x88(%rbp)
  10a371:	f7 d8                	neg    %eax
  10a373:	44 89 a5 7c ff ff ff 	mov    %r12d,-0x84(%rbp)
  10a37a:	45 31 e4             	xor    %r12d,%r12d
  10a37d:	89 45 a8             	mov    %eax,-0x58(%rbp)
  10a380:	41 83 fe 09          	cmp    $0x9,%r14d
  10a384:	0f 87 2d 04 00 00    	ja     10a7b7 <_dtoa_r+0x677>
  10a38a:	41 83 fe 05          	cmp    $0x5,%r14d
  10a38e:	0f 8e 9c 04 00 00    	jle    10a830 <_dtoa_r+0x6f0>
  10a394:	41 83 ee 04          	sub    $0x4,%r14d
  10a398:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
  10a39f:	41 83 fe 03          	cmp    $0x3,%r14d
  10a3a3:	0f 84 f7 0d 00 00    	je     10b1a0 <_dtoa_r+0x1060>
  10a3a9:	0f 8e a0 0c 00 00    	jle    10b04f <_dtoa_r+0xf0f>
  10a3af:	41 83 fe 04          	cmp    $0x4,%r14d
  10a3b3:	0f 84 27 09 00 00    	je     10ace0 <_dtoa_r+0xba0>
  10a3b9:	c7 85 70 ff ff ff 01 	movl   $0x1,-0x90(%rbp)
  10a3c0:	00 00 00 
  10a3c3:	41 be 05 00 00 00    	mov    $0x5,%r14d
  10a3c9:	8b 45 88             	mov    -0x78(%rbp),%eax
  10a3cc:	8b 8d 7c ff ff ff    	mov    -0x84(%rbp),%ecx
  10a3d2:	01 c8                	add    %ecx,%eax
  10a3d4:	44 8d 78 01          	lea    0x1(%rax),%r15d
  10a3d8:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  10a3de:	b8 01 00 00 00       	mov    $0x1,%eax
  10a3e3:	45 85 ff             	test   %r15d,%r15d
  10a3e6:	41 0f 4f c7          	cmovg  %r15d,%eax
  10a3ea:	4c 63 d0             	movslq %eax,%r10
  10a3ed:	83 f8 1f             	cmp    $0x1f,%eax
  10a3f0:	0f 8e 9c 11 00 00    	jle    10b592 <_dtoa_r+0x1452>
  10a3f6:	bf 01 00 00 00       	mov    $0x1,%edi
  10a3fb:	ba 04 00 00 00       	mov    $0x4,%edx
  10a400:	01 d2                	add    %edx,%edx
  10a402:	89 fe                	mov    %edi,%esi
  10a404:	83 c7 01             	add    $0x1,%edi
  10a407:	48 63 c2             	movslq %edx,%rax
  10a40a:	48 83 c0 1c          	add    $0x1c,%rax
  10a40e:	49 39 c2             	cmp    %rax,%r10
  10a411:	73 ed                	jae    10a400 <_dtoa_r+0x2c0>
  10a413:	89 73 68             	mov    %esi,0x68(%rbx)
  10a416:	48 89 df             	mov    %rbx,%rdi
  10a419:	f2 0f 11 95 68 ff ff 	movsd  %xmm2,-0x98(%rbp)
  10a420:	ff 
  10a421:	e8 7a 1c 00 00       	call   10c0a0 <_Balloc>
  10a426:	f2 0f 10 95 68 ff ff 	movsd  -0x98(%rbp),%xmm2
  10a42d:	ff 
  10a42e:	48 85 c0             	test   %rax,%rax
  10a431:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  10a435:	0f 84 41 11 00 00    	je     10b57c <_dtoa_r+0x143c>
  10a43b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  10a43f:	41 83 ff 0e          	cmp    $0xe,%r15d
  10a443:	44 89 fe             	mov    %r15d,%esi
  10a446:	48 89 43 60          	mov    %rax,0x60(%rbx)
  10a44a:	0f 96 c0             	setbe  %al
  10a44d:	22 45 b0             	and    -0x50(%rbp),%al
  10a450:	0f 84 ae 02 00 00    	je     10a704 <_dtoa_r+0x5c4>
  10a456:	8b 8d 7c ff ff ff    	mov    -0x84(%rbp),%ecx
  10a45c:	85 c9                	test   %ecx,%ecx
  10a45e:	0f 8e 14 04 00 00    	jle    10a878 <_dtoa_r+0x738>
  10a464:	89 c8                	mov    %ecx,%eax
  10a466:	83 e0 0f             	and    $0xf,%eax
  10a469:	f2 0f 10 0c c5 a0 d1 	movsd  0x11d1a0(,%rax,8),%xmm1
  10a470:	11 00 
  10a472:	89 c8                	mov    %ecx,%eax
  10a474:	c1 f8 04             	sar    $0x4,%eax
  10a477:	80 e5 01             	and    $0x1,%ch
  10a47a:	0f 84 38 0a 00 00    	je     10aeb8 <_dtoa_r+0xd78>
  10a480:	83 e0 0f             	and    $0xf,%eax
  10a483:	bf 03 00 00 00       	mov    $0x3,%edi
  10a488:	66 0f 28 c2          	movapd %xmm2,%xmm0
  10a48c:	f2 0f 5e 05 ec 2c 01 	divsd  0x12cec(%rip),%xmm0        # 11d180 <__mprec_bigtens+0x20>
  10a493:	00 
  10a494:	85 c0                	test   %eax,%eax
  10a496:	74 1b                	je     10a4b3 <_dtoa_r+0x373>
  10a498:	ba 60 d1 11 00       	mov    $0x11d160,%edx
  10a49d:	0f 1f 00             	nopl   (%rax)
  10a4a0:	a8 01                	test   $0x1,%al
  10a4a2:	74 07                	je     10a4ab <_dtoa_r+0x36b>
  10a4a4:	f2 0f 59 0a          	mulsd  (%rdx),%xmm1
  10a4a8:	83 c7 01             	add    $0x1,%edi
  10a4ab:	48 83 c2 08          	add    $0x8,%rdx
  10a4af:	d1 f8                	sar    %eax
  10a4b1:	75 ed                	jne    10a4a0 <_dtoa_r+0x360>
  10a4b3:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
  10a4b7:	44 8b 95 64 ff ff ff 	mov    -0x9c(%rbp),%r10d
  10a4be:	45 85 d2             	test   %r10d,%r10d
  10a4c1:	74 12                	je     10a4d5 <_dtoa_r+0x395>
  10a4c3:	f2 0f 10 2d 45 31 01 	movsd  0x13145(%rip),%xmm5        # 11d610 <_ZTVN6tflite19GreedyMemoryPlannerE+0x48>
  10a4ca:	00 
  10a4cb:	66 0f 2f e8          	comisd %xmm0,%xmm5
  10a4cf:	0f 87 db 0c 00 00    	ja     10b1b0 <_dtoa_r+0x1070>
  10a4d5:	66 0f ef c9          	pxor   %xmm1,%xmm1
  10a4d9:	f2 0f 2a cf          	cvtsi2sd %edi,%xmm1
  10a4dd:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  10a4e1:	f2 0f 58 0d 5f 3a 01 	addsd  0x13a5f(%rip),%xmm1        # 11df48 <_ZTVN10__cxxabiv117__class_type_infoE+0x6e8>
  10a4e8:	00 
  10a4e9:	66 48 0f 7e c8       	movq   %xmm1,%rax
  10a4ee:	48 89 c2             	mov    %rax,%rdx
  10a4f1:	89 c0                	mov    %eax,%eax
  10a4f3:	48 c1 ea 20          	shr    $0x20,%rdx
  10a4f7:	81 ea 00 00 40 03    	sub    $0x3400000,%edx
  10a4fd:	48 c1 e2 20          	shl    $0x20,%rdx
  10a501:	48 09 d0             	or     %rdx,%rax
  10a504:	45 85 ff             	test   %r15d,%r15d
  10a507:	0f 84 c9 01 00 00    	je     10a6d6 <_dtoa_r+0x596>
  10a50d:	8b 8d 7c ff ff ff    	mov    -0x84(%rbp),%ecx
  10a513:	45 89 fa             	mov    %r15d,%r10d
  10a516:	89 4d a0             	mov    %ecx,-0x60(%rbp)
  10a519:	f2 0f 2c d0          	cvttsd2si %xmm0,%edx
  10a51d:	66 0f ef c9          	pxor   %xmm1,%xmm1
  10a521:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  10a525:	66 48 0f 6e d8       	movq   %rax,%xmm3
  10a52a:	44 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%r9d
  10a531:	41 8d 42 ff          	lea    -0x1(%r10),%eax
  10a535:	48 98                	cltq   
  10a537:	48 8d 79 01          	lea    0x1(%rcx),%rdi
  10a53b:	f2 0f 10 24 c5 a0 d1 	movsd  0x11d1a0(,%rax,8),%xmm4
  10a542:	11 00 
  10a544:	f2 0f 2a ca          	cvtsi2sd %edx,%xmm1
  10a548:	8d 42 30             	lea    0x30(%rdx),%eax
  10a54b:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  10a54f:	45 85 c9             	test   %r9d,%r9d
  10a552:	0f 84 90 03 00 00    	je     10a8e8 <_dtoa_r+0x7a8>
  10a558:	f2 0f 10 0d 58 39 01 	movsd  0x13958(%rip),%xmm1        # 11deb8 <_ZTVN10__cxxabiv117__class_type_infoE+0x658>
  10a55f:	00 
  10a560:	88 01                	mov    %al,(%rcx)
  10a562:	f2 0f 5e cc          	divsd  %xmm4,%xmm1
  10a566:	f2 0f 5c cb          	subsd  %xmm3,%xmm1
  10a56a:	66 0f 2f c8          	comisd %xmm0,%xmm1
  10a56e:	0f 87 93 0f 00 00    	ja     10b507 <_dtoa_r+0x13c7>
  10a574:	48 89 f8             	mov    %rdi,%rax
  10a577:	bf 01 00 00 00       	mov    $0x1,%edi
  10a57c:	f2 0f 10 2d 8c 30 01 	movsd  0x1308c(%rip),%xmm5        # 11d610 <_ZTVN6tflite19GreedyMemoryPlannerE+0x48>
  10a583:	00 
  10a584:	f2 0f 10 25 b4 39 01 	movsd  0x139b4(%rip),%xmm4        # 11df40 <_ZTVN10__cxxabiv117__class_type_infoE+0x6e0>
  10a58b:	00 
  10a58c:	29 c7                	sub    %eax,%edi
  10a58e:	eb 38                	jmp    10a5c8 <_dtoa_r+0x488>
  10a590:	8d 14 07             	lea    (%rdi,%rax,1),%edx
  10a593:	44 39 d2             	cmp    %r10d,%edx
  10a596:	0f 8d 63 01 00 00    	jge    10a6ff <_dtoa_r+0x5bf>
  10a59c:	f2 0f 59 c4          	mulsd  %xmm4,%xmm0
  10a5a0:	66 0f ef db          	pxor   %xmm3,%xmm3
  10a5a4:	48 83 c0 01          	add    $0x1,%rax
  10a5a8:	f2 0f 59 cc          	mulsd  %xmm4,%xmm1
  10a5ac:	f2 0f 2c d0          	cvttsd2si %xmm0,%edx
  10a5b0:	f2 0f 2a da          	cvtsi2sd %edx,%xmm3
  10a5b4:	83 c2 30             	add    $0x30,%edx
  10a5b7:	88 50 ff             	mov    %dl,-0x1(%rax)
  10a5ba:	f2 0f 5c c3          	subsd  %xmm3,%xmm0
  10a5be:	66 0f 2f c8          	comisd %xmm0,%xmm1
  10a5c2:	0f 87 29 0e 00 00    	ja     10b3f1 <_dtoa_r+0x12b1>
  10a5c8:	66 0f 28 dd          	movapd %xmm5,%xmm3
  10a5cc:	f2 0f 5c d8          	subsd  %xmm0,%xmm3
  10a5d0:	66 0f 2f cb          	comisd %xmm3,%xmm1
  10a5d4:	76 ba                	jbe    10a590 <_dtoa_r+0x450>
  10a5d6:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
  10a5da:	eb 0d                	jmp    10a5e9 <_dtoa_r+0x4a9>
  10a5dc:	0f 1f 40 00          	nopl   0x0(%rax)
  10a5e0:	48 39 c6             	cmp    %rax,%rsi
  10a5e3:	0f 84 80 0d 00 00    	je     10b369 <_dtoa_r+0x1229>
  10a5e9:	48 89 c1             	mov    %rax,%rcx
  10a5ec:	0f b6 50 ff          	movzbl -0x1(%rax),%edx
  10a5f0:	48 83 e8 01          	sub    $0x1,%rax
  10a5f4:	80 fa 39             	cmp    $0x39,%dl
  10a5f7:	74 e7                	je     10a5e0 <_dtoa_r+0x4a0>
  10a5f9:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10a5fd:	83 c2 01             	add    $0x1,%edx
  10a600:	4c 8b 65 90          	mov    -0x70(%rbp),%r12
  10a604:	88 10                	mov    %dl,(%rax)
  10a606:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  10a60a:	e9 df 04 00 00       	jmp    10aaee <_dtoa_r+0x9ae>
  10a60f:	90                   	nop
  10a610:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  10a614:	66 48 0f 7e d3       	movq   %xmm2,%rbx
  10a619:	c7 00 0f 27 00 00    	movl   $0x270f,(%rax)
  10a61f:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffff,%rax
  10a626:	ff 0f 00 
  10a629:	48 85 d8             	test   %rbx,%rax
  10a62c:	74 62                	je     10a690 <_dtoa_r+0x550>
  10a62e:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
  10a633:	41 bc 4e e5 11 00    	mov    $0x11e54e,%r12d
  10a639:	b8 51 e5 11 00       	mov    $0x11e551,%eax
  10a63e:	0f 84 d9 fb ff ff    	je     10a21d <_dtoa_r+0xdd>
  10a644:	48 8b 5d 98          	mov    -0x68(%rbp),%rbx
  10a648:	48 89 03             	mov    %rax,(%rbx)
  10a64b:	e9 cd fb ff ff       	jmp    10a21d <_dtoa_r+0xdd>
  10a650:	66 48 0f 7e d2       	movq   %xmm2,%rdx
  10a655:	81 ee ff 03 00 00    	sub    $0x3ff,%esi
  10a65b:	c7 85 58 ff ff ff 00 	movl   $0x0,-0xa8(%rbp)
  10a662:	00 00 00 
  10a665:	48 89 d0             	mov    %rdx,%rax
  10a668:	89 d2                	mov    %edx,%edx
  10a66a:	48 c1 e8 20          	shr    $0x20,%rax
  10a66e:	25 ff ff 0f 00       	and    $0xfffff,%eax
  10a673:	48 0d 00 00 f0 3f    	or     $0x3ff00000,%rax
  10a679:	48 c1 e0 20          	shl    $0x20,%rax
  10a67d:	48 09 c2             	or     %rax,%rdx
  10a680:	8b 45 c8             	mov    -0x38(%rbp),%eax
  10a683:	e9 3f fc ff ff       	jmp    10a2c7 <_dtoa_r+0x187>
  10a688:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10a68f:	00 
  10a690:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
  10a695:	41 bc 81 03 12 00    	mov    $0x120381,%r12d
  10a69b:	b8 89 03 12 00       	mov    $0x120389,%eax
  10a6a0:	75 a2                	jne    10a644 <_dtoa_r+0x504>
  10a6a2:	e9 76 fb ff ff       	jmp    10a21d <_dtoa_r+0xdd>
  10a6a7:	66 0f ef c9          	pxor   %xmm1,%xmm1
  10a6ab:	f2 0f 2a cf          	cvtsi2sd %edi,%xmm1
  10a6af:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  10a6b3:	f2 0f 58 0d 8d 38 01 	addsd  0x1388d(%rip),%xmm1        # 11df48 <_ZTVN10__cxxabiv117__class_type_infoE+0x6e8>
  10a6ba:	00 
  10a6bb:	66 48 0f 7e c8       	movq   %xmm1,%rax
  10a6c0:	48 89 c2             	mov    %rax,%rdx
  10a6c3:	89 c0                	mov    %eax,%eax
  10a6c5:	48 c1 ea 20          	shr    $0x20,%rdx
  10a6c9:	81 ea 00 00 40 03    	sub    $0x3400000,%edx
  10a6cf:	48 c1 e2 20          	shl    $0x20,%rdx
  10a6d3:	48 09 d0             	or     %rdx,%rax
  10a6d6:	f2 0f 5c 05 72 38 01 	subsd  0x13872(%rip),%xmm0        # 11df50 <_ZTVN10__cxxabiv117__class_type_infoE+0x6f0>
  10a6dd:	00 
  10a6de:	66 48 0f 6e c8       	movq   %rax,%xmm1
  10a6e3:	66 0f 2f c1          	comisd %xmm1,%xmm0
  10a6e7:	0f 87 6b 0b 00 00    	ja     10b258 <_dtoa_r+0x1118>
  10a6ed:	66 0f 57 0d fb 2b 01 	xorpd  0x12bfb(%rip),%xmm1        # 11d2f0 <blanks.1+0x10>
  10a6f4:	00 
  10a6f5:	66 0f 2f c8          	comisd %xmm0,%xmm1
  10a6f9:	0f 87 ca 05 00 00    	ja     10acc9 <_dtoa_r+0xb89>
  10a6ff:	66 0f d6 55 a0       	movq   %xmm2,-0x60(%rbp)
  10a704:	83 bd 7c ff ff ff 0e 	cmpl   $0xe,-0x84(%rbp)
  10a70b:	8b 45 cc             	mov    -0x34(%rbp),%eax
  10a70e:	7f 08                	jg     10a718 <_dtoa_r+0x5d8>
  10a710:	85 c0                	test   %eax,%eax
  10a712:	0f 89 78 05 00 00    	jns    10ac90 <_dtoa_r+0xb50>
  10a718:	8b 8d 70 ff ff ff    	mov    -0x90(%rbp),%ecx
  10a71e:	85 c9                	test   %ecx,%ecx
  10a720:	0f 84 5a 02 00 00    	je     10a980 <_dtoa_r+0x840>
  10a726:	41 83 fe 01          	cmp    $0x1,%r14d
  10a72a:	0f 8e f0 0a 00 00    	jle    10b220 <_dtoa_r+0x10e0>
  10a730:	8b 4d a8             	mov    -0x58(%rbp),%ecx
  10a733:	41 8d 47 ff          	lea    -0x1(%r15),%eax
  10a737:	39 c1                	cmp    %eax,%ecx
  10a739:	0f 8c 86 08 00 00    	jl     10afc5 <_dtoa_r+0xe85>
  10a73f:	41 89 ca             	mov    %ecx,%r10d
  10a742:	41 29 c2             	sub    %eax,%r10d
  10a745:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  10a74b:	44 29 f8             	sub    %r15d,%eax
  10a74e:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
  10a754:	45 85 ff             	test   %r15d,%r15d
  10a757:	0f 88 91 08 00 00    	js     10afee <_dtoa_r+0xeae>
  10a75d:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  10a763:	45 01 fd             	add    %r15d,%r13d
  10a766:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
  10a76c:	44 01 f8             	add    %r15d,%eax
  10a76f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  10a775:	e9 74 08 00 00       	jmp    10afee <_dtoa_r+0xeae>
  10a77a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10a780:	c7 85 64 ff ff ff 00 	movl   $0x0,-0x9c(%rbp)
  10a787:	00 00 00 
  10a78a:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%rbp)
  10a791:	00 00 00 
  10a794:	85 c0                	test   %eax,%eax
  10a796:	0f 8e 14 08 00 00    	jle    10afb0 <_dtoa_r+0xe70>
  10a79c:	44 89 a5 7c ff ff ff 	mov    %r12d,-0x84(%rbp)
  10a7a3:	45 01 e5             	add    %r12d,%r13d
  10a7a6:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
  10a7ad:	41 83 fe 09          	cmp    $0x9,%r14d
  10a7b1:	0f 86 d3 fb ff ff    	jbe    10a38a <_dtoa_r+0x24a>
  10a7b7:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
  10a7be:	45 31 f6             	xor    %r14d,%r14d
  10a7c1:	41 bf ff ff ff ff    	mov    $0xffffffff,%r15d
  10a7c7:	c7 85 70 ff ff ff 01 	movl   $0x1,-0x90(%rbp)
  10a7ce:	00 00 00 
  10a7d1:	c7 45 88 00 00 00 00 	movl   $0x0,-0x78(%rbp)
  10a7d8:	c7 43 68 00 00 00 00 	movl   $0x0,0x68(%rbx)
  10a7df:	31 f6                	xor    %esi,%esi
  10a7e1:	44 89 bd 60 ff ff ff 	mov    %r15d,-0xa0(%rbp)
  10a7e8:	e9 29 fc ff ff       	jmp    10a416 <_dtoa_r+0x2d6>
  10a7ed:	0f 1f 00             	nopl   (%rax)
  10a7f0:	c7 85 64 ff ff ff 01 	movl   $0x1,-0x9c(%rbp)
  10a7f7:	00 00 00 
  10a7fa:	e9 40 fb ff ff       	jmp    10a33f <_dtoa_r+0x1ff>
  10a7ff:	90                   	nop
  10a800:	66 0f ef c9          	pxor   %xmm1,%xmm1
  10a804:	f2 41 0f 2a cc       	cvtsi2sd %r12d,%xmm1
  10a809:	66 0f 2e c8          	ucomisd %xmm0,%xmm1
  10a80d:	7a 06                	jp     10a815 <_dtoa_r+0x6d5>
  10a80f:	0f 84 f6 fa ff ff    	je     10a30b <_dtoa_r+0x1cb>
  10a815:	41 83 ec 01          	sub    $0x1,%r12d
  10a819:	e9 ed fa ff ff       	jmp    10a30b <_dtoa_r+0x1cb>
  10a81e:	66 90                	xchg   %ax,%ax
  10a820:	b9 20 00 00 00       	mov    $0x20,%ecx
  10a825:	29 d1                	sub    %edx,%ecx
  10a827:	41 d3 e4             	shl    %cl,%r12d
  10a82a:	e9 64 fa ff ff       	jmp    10a293 <_dtoa_r+0x153>
  10a82f:	90                   	nop
  10a830:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
  10a837:	41 83 fe 03          	cmp    $0x3,%r14d
  10a83b:	0f 84 5f 09 00 00    	je     10b1a0 <_dtoa_r+0x1060>
  10a841:	0f 8f 68 fb ff ff    	jg     10a3af <_dtoa_r+0x26f>
  10a847:	41 83 fe 02          	cmp    $0x2,%r14d
  10a84b:	0f 85 d9 0c 00 00    	jne    10b52a <_dtoa_r+0x13ea>
  10a851:	c7 85 70 ff ff ff 00 	movl   $0x0,-0x90(%rbp)
  10a858:	00 00 00 
  10a85b:	8b 45 88             	mov    -0x78(%rbp),%eax
  10a85e:	85 c0                	test   %eax,%eax
  10a860:	0f 8e 8a 04 00 00    	jle    10acf0 <_dtoa_r+0xbb0>
  10a866:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  10a86c:	41 89 c7             	mov    %eax,%r15d
  10a86f:	e9 76 fb ff ff       	jmp    10a3ea <_dtoa_r+0x2aa>
  10a874:	0f 1f 40 00          	nopl   0x0(%rax)
  10a878:	0f 84 22 07 00 00    	je     10afa0 <_dtoa_r+0xe60>
  10a87e:	8b 95 7c ff ff ff    	mov    -0x84(%rbp),%edx
  10a884:	f7 da                	neg    %edx
  10a886:	89 d7                	mov    %edx,%edi
  10a888:	83 e7 0f             	and    $0xf,%edi
  10a88b:	c1 fa 04             	sar    $0x4,%edx
  10a88e:	f2 0f 10 0c fd a0 d1 	movsd  0x11d1a0(,%rdi,8),%xmm1
  10a895:	11 00 
  10a897:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  10a89b:	0f 84 58 0c 00 00    	je     10b4f9 <_dtoa_r+0x13b9>
  10a8a1:	41 ba 60 d1 11 00    	mov    $0x11d160,%r10d
  10a8a7:	66 0f 28 c1          	movapd %xmm1,%xmm0
  10a8ab:	45 31 db             	xor    %r11d,%r11d
  10a8ae:	bf 02 00 00 00       	mov    $0x2,%edi
  10a8b3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10a8b8:	f6 c2 01             	test   $0x1,%dl
  10a8bb:	74 0b                	je     10a8c8 <_dtoa_r+0x788>
  10a8bd:	f2 41 0f 59 02       	mulsd  (%r10),%xmm0
  10a8c2:	83 c7 01             	add    $0x1,%edi
  10a8c5:	41 89 c3             	mov    %eax,%r11d
  10a8c8:	49 83 c2 08          	add    $0x8,%r10
  10a8cc:	d1 fa                	sar    %edx
  10a8ce:	75 e8                	jne    10a8b8 <_dtoa_r+0x778>
  10a8d0:	45 84 db             	test   %r11b,%r11b
  10a8d3:	0f 85 de fb ff ff    	jne    10a4b7 <_dtoa_r+0x377>
  10a8d9:	66 0f 28 c1          	movapd %xmm1,%xmm0
  10a8dd:	e9 d5 fb ff ff       	jmp    10a4b7 <_dtoa_r+0x377>
  10a8e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10a8e8:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  10a8ec:	f2 0f 59 e3          	mulsd  %xmm3,%xmm4
  10a8f0:	f2 0f 10 1d 48 36 01 	movsd  0x13648(%rip),%xmm3        # 11df40 <_ZTVN10__cxxabiv117__class_type_infoE+0x6e0>
  10a8f7:	00 
  10a8f8:	88 01                	mov    %al,(%rcx)
  10a8fa:	44 89 d0             	mov    %r10d,%eax
  10a8fd:	48 01 c8             	add    %rcx,%rax
  10a900:	41 83 fa 01          	cmp    $0x1,%r10d
  10a904:	0f 84 99 0b 00 00    	je     10b4a3 <_dtoa_r+0x1363>
  10a90a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10a910:	f2 0f 59 c3          	mulsd  %xmm3,%xmm0
  10a914:	66 0f ef c9          	pxor   %xmm1,%xmm1
  10a918:	48 83 c7 01          	add    $0x1,%rdi
  10a91c:	f2 0f 2c d0          	cvttsd2si %xmm0,%edx
  10a920:	f2 0f 2a ca          	cvtsi2sd %edx,%xmm1
  10a924:	83 c2 30             	add    $0x30,%edx
  10a927:	88 57 ff             	mov    %dl,-0x1(%rdi)
  10a92a:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  10a92e:	48 39 f8             	cmp    %rdi,%rax
  10a931:	75 dd                	jne    10a910 <_dtoa_r+0x7d0>
  10a933:	f2 0f 10 0d 7d 35 01 	movsd  0x1357d(%rip),%xmm1        # 11deb8 <_ZTVN10__cxxabiv117__class_type_infoE+0x658>
  10a93a:	00 
  10a93b:	66 0f 28 dc          	movapd %xmm4,%xmm3
  10a93f:	f2 0f 58 d9          	addsd  %xmm1,%xmm3
  10a943:	66 0f 2f c3          	comisd %xmm3,%xmm0
  10a947:	0f 87 89 fc ff ff    	ja     10a5d6 <_dtoa_r+0x496>
  10a94d:	f2 0f 5c cc          	subsd  %xmm4,%xmm1
  10a951:	66 0f 2f c8          	comisd %xmm0,%xmm1
  10a955:	0f 87 25 06 00 00    	ja     10af80 <_dtoa_r+0xe40>
  10a95b:	44 8b 45 cc          	mov    -0x34(%rbp),%r8d
  10a95f:	66 0f d6 55 a0       	movq   %xmm2,-0x60(%rbp)
  10a964:	45 85 c0             	test   %r8d,%r8d
  10a967:	78 17                	js     10a980 <_dtoa_r+0x840>
  10a969:	83 bd 7c ff ff ff 0e 	cmpl   $0xe,-0x84(%rbp)
  10a970:	0f 8e 1a 03 00 00    	jle    10ac90 <_dtoa_r+0xb50>
  10a976:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10a97d:	00 00 00 
  10a980:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  10a986:	44 8b 55 a8          	mov    -0x58(%rbp),%r10d
  10a98a:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  10a991:	00 
  10a992:	c7 85 70 ff ff ff 00 	movl   $0x0,-0x90(%rbp)
  10a999:	00 00 00 
  10a99c:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
  10a9a2:	8b 8d 68 ff ff ff    	mov    -0x98(%rbp),%ecx
  10a9a8:	85 c9                	test   %ecx,%ecx
  10a9aa:	7e 1f                	jle    10a9cb <_dtoa_r+0x88b>
  10a9ac:	45 85 ed             	test   %r13d,%r13d
  10a9af:	7e 1a                	jle    10a9cb <_dtoa_r+0x88b>
  10a9b1:	44 39 e9             	cmp    %r13d,%ecx
  10a9b4:	89 c8                	mov    %ecx,%eax
  10a9b6:	41 0f 4f c5          	cmovg  %r13d,%eax
  10a9ba:	29 85 78 ff ff ff    	sub    %eax,-0x88(%rbp)
  10a9c0:	29 c1                	sub    %eax,%ecx
  10a9c2:	41 29 c5             	sub    %eax,%r13d
  10a9c5:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%rbp)
  10a9cb:	8b 45 a8             	mov    -0x58(%rbp),%eax
  10a9ce:	85 c0                	test   %eax,%eax
  10a9d0:	74 28                	je     10a9fa <_dtoa_r+0x8ba>
  10a9d2:	44 8b 9d 70 ff ff ff 	mov    -0x90(%rbp),%r11d
  10a9d9:	45 85 db             	test   %r11d,%r11d
  10a9dc:	74 09                	je     10a9e7 <_dtoa_r+0x8a7>
  10a9de:	45 85 d2             	test   %r10d,%r10d
  10a9e1:	0f 85 7d 06 00 00    	jne    10b064 <_dtoa_r+0xf24>
  10a9e7:	8b 55 a8             	mov    -0x58(%rbp),%edx
  10a9ea:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  10a9ee:	48 89 df             	mov    %rbx,%rdi
  10a9f1:	e8 4a 1c 00 00       	call   10c640 <__pow5mult>
  10a9f6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10a9fa:	be 01 00 00 00       	mov    $0x1,%esi
  10a9ff:	48 89 df             	mov    %rbx,%rdi
  10aa02:	e8 49 19 00 00       	call   10c350 <__i2b>
  10aa07:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  10aa0b:	45 85 e4             	test   %r12d,%r12d
  10aa0e:	0f 85 f4 02 00 00    	jne    10ad08 <_dtoa_r+0xbc8>
  10aa14:	41 83 fe 01          	cmp    $0x1,%r14d
  10aa18:	0f 8e b2 04 00 00    	jle    10aed0 <_dtoa_r+0xd90>
  10aa1e:	b8 01 00 00 00       	mov    $0x1,%eax
  10aa23:	44 01 e8             	add    %r13d,%eax
  10aa26:	83 e0 1f             	and    $0x1f,%eax
  10aa29:	74 25                	je     10aa50 <_dtoa_r+0x910>
  10aa2b:	ba 20 00 00 00       	mov    $0x20,%edx
  10aa30:	29 c2                	sub    %eax,%edx
  10aa32:	83 fa 04             	cmp    $0x4,%edx
  10aa35:	0f 8f d5 04 00 00    	jg     10af10 <_dtoa_r+0xdd0>
  10aa3b:	74 27                	je     10aa64 <_dtoa_r+0x924>
  10aa3d:	ba 3c 00 00 00       	mov    $0x3c,%edx
  10aa42:	29 c2                	sub    %eax,%edx
  10aa44:	eb 0f                	jmp    10aa55 <_dtoa_r+0x915>
  10aa46:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10aa4d:	00 00 00 
  10aa50:	ba 1c 00 00 00       	mov    $0x1c,%edx
  10aa55:	01 95 78 ff ff ff    	add    %edx,-0x88(%rbp)
  10aa5b:	41 01 d5             	add    %edx,%r13d
  10aa5e:	01 95 68 ff ff ff    	add    %edx,-0x98(%rbp)
  10aa64:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  10aa6a:	85 c0                	test   %eax,%eax
  10aa6c:	7e 12                	jle    10aa80 <_dtoa_r+0x940>
  10aa6e:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  10aa72:	89 c2                	mov    %eax,%edx
  10aa74:	48 89 df             	mov    %rbx,%rdi
  10aa77:	e8 e4 1c 00 00       	call   10c760 <__lshift>
  10aa7c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10aa80:	45 85 ed             	test   %r13d,%r13d
  10aa83:	7e 13                	jle    10aa98 <_dtoa_r+0x958>
  10aa85:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  10aa89:	44 89 ea             	mov    %r13d,%edx
  10aa8c:	48 89 df             	mov    %rbx,%rdi
  10aa8f:	e8 cc 1c 00 00       	call   10c760 <__lshift>
  10aa94:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  10aa98:	44 8b 95 64 ff ff ff 	mov    -0x9c(%rbp),%r10d
  10aa9f:	41 83 fe 02          	cmp    $0x2,%r14d
  10aaa3:	41 0f 9f c5          	setg   %r13b
  10aaa7:	45 85 d2             	test   %r10d,%r10d
  10aaaa:	0f 85 a0 02 00 00    	jne    10ad50 <_dtoa_r+0xc10>
  10aab0:	45 85 ff             	test   %r15d,%r15d
  10aab3:	7f 73                	jg     10ab28 <_dtoa_r+0x9e8>
  10aab5:	45 84 ed             	test   %r13b,%r13b
  10aab8:	74 6e                	je     10ab28 <_dtoa_r+0x9e8>
  10aaba:	45 85 ff             	test   %r15d,%r15d
  10aabd:	0f 84 6d 04 00 00    	je     10af30 <_dtoa_r+0xdf0>
  10aac3:	8b 45 88             	mov    -0x78(%rbp),%eax
  10aac6:	4c 8b 65 90          	mov    -0x70(%rbp),%r12
  10aaca:	f7 d0                	not    %eax
  10aacc:	89 45 a0             	mov    %eax,-0x60(%rbp)
  10aacf:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  10aad3:	48 89 df             	mov    %rbx,%rdi
  10aad6:	e8 65 16 00 00       	call   10c140 <_Bfree>
  10aadb:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  10aae0:	74 0c                	je     10aaee <_dtoa_r+0x9ae>
  10aae2:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  10aae6:	48 89 df             	mov    %rbx,%rdi
  10aae9:	e8 52 16 00 00       	call   10c140 <_Bfree>
  10aaee:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  10aaf2:	48 89 df             	mov    %rbx,%rdi
  10aaf5:	e8 46 16 00 00       	call   10c140 <_Bfree>
  10aafa:	44 8b 6d a0          	mov    -0x60(%rbp),%r13d
  10aafe:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  10ab02:	48 8b 5d 80          	mov    -0x80(%rbp),%rbx
  10ab06:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
  10ab0a:	41 83 c5 01          	add    $0x1,%r13d
  10ab0e:	c6 00 00             	movb   $0x0,(%rax)
  10ab11:	44 89 2b             	mov    %r13d,(%rbx)
  10ab14:	48 85 c9             	test   %rcx,%rcx
  10ab17:	0f 84 00 f7 ff ff    	je     10a21d <_dtoa_r+0xdd>
  10ab1d:	48 89 01             	mov    %rax,(%rcx)
  10ab20:	e9 f8 f6 ff ff       	jmp    10a21d <_dtoa_r+0xdd>
  10ab25:	0f 1f 00             	nopl   (%rax)
  10ab28:	44 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%r8d
  10ab2f:	45 85 c0             	test   %r8d,%r8d
  10ab32:	0f 84 78 02 00 00    	je     10adb0 <_dtoa_r+0xc70>
  10ab38:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
  10ab3e:	85 c0                	test   %eax,%eax
  10ab40:	7e 12                	jle    10ab54 <_dtoa_r+0xa14>
  10ab42:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  10ab46:	89 c2                	mov    %eax,%edx
  10ab48:	48 89 df             	mov    %rbx,%rdi
  10ab4b:	e8 10 1c 00 00       	call   10c760 <__lshift>
  10ab50:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10ab54:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10ab58:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  10ab5c:	45 85 e4             	test   %r12d,%r12d
  10ab5f:	0f 85 3e 08 00 00    	jne    10b3a3 <_dtoa_r+0x1263>
  10ab65:	49 63 cf             	movslq %r15d,%rcx
  10ab68:	8b 45 a0             	mov    -0x60(%rbp),%eax
  10ab6b:	4c 8b 7d 90          	mov    -0x70(%rbp),%r15
  10ab6f:	83 e0 01             	and    $0x1,%eax
  10ab72:	4c 01 f9             	add    %r15,%rcx
  10ab75:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
  10ab7b:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  10ab82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10ab88:	4c 8b 65 b8          	mov    -0x48(%rbp),%r12
  10ab8c:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  10ab90:	4c 89 e7             	mov    %r12,%rdi
  10ab93:	e8 d8 f3 ff ff       	call   109f70 <quorem>
  10ab98:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  10ab9c:	4c 89 e7             	mov    %r12,%rdi
  10ab9f:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
  10aba5:	44 8d 68 30          	lea    0x30(%rax),%r13d
  10aba9:	e8 12 1d 00 00       	call   10c8c0 <__mcmp>
  10abae:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  10abb2:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10abb6:	48 89 df             	mov    %rbx,%rdi
  10abb9:	41 89 c4             	mov    %eax,%r12d
  10abbc:	e8 4f 1d 00 00       	call   10c910 <__mdiff>
  10abc1:	8b 78 10             	mov    0x10(%rax),%edi
  10abc4:	48 89 c6             	mov    %rax,%rsi
  10abc7:	85 ff                	test   %edi,%edi
  10abc9:	0f 85 f9 04 00 00    	jne    10b0c8 <_dtoa_r+0xf88>
  10abcf:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  10abd3:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  10abda:	e8 e1 1c 00 00       	call   10c8c0 <__mcmp>
  10abdf:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
  10abe6:	48 89 df             	mov    %rbx,%rdi
  10abe9:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  10abef:	e8 4c 15 00 00       	call   10c140 <_Bfree>
  10abf4:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  10abfa:	89 c1                	mov    %eax,%ecx
  10abfc:	44 09 f1             	or     %r14d,%ecx
  10abff:	0f 85 5d 05 00 00    	jne    10b162 <_dtoa_r+0x1022>
  10ac05:	8b 8d 58 ff ff ff    	mov    -0xa8(%rbp),%ecx
  10ac0b:	85 c9                	test   %ecx,%ecx
  10ac0d:	0f 84 6c 08 00 00    	je     10b47f <_dtoa_r+0x133f>
  10ac13:	45 85 e4             	test   %r12d,%r12d
  10ac16:	0f 88 09 05 00 00    	js     10b125 <_dtoa_r+0xfe5>
  10ac1c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  10ac23:	49 83 c7 01          	add    $0x1,%r15
  10ac27:	45 88 6f ff          	mov    %r13b,-0x1(%r15)
  10ac2b:	49 39 c7             	cmp    %rax,%r15
  10ac2e:	0f 84 fa 07 00 00    	je     10b42e <_dtoa_r+0x12ee>
  10ac34:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  10ac38:	31 c9                	xor    %ecx,%ecx
  10ac3a:	ba 0a 00 00 00       	mov    $0xa,%edx
  10ac3f:	48 89 df             	mov    %rbx,%rdi
  10ac42:	e8 19 15 00 00       	call   10c160 <__multadd>
  10ac47:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
  10ac4b:	48 39 4d b0          	cmp    %rcx,-0x50(%rbp)
  10ac4f:	48 89 df             	mov    %rbx,%rdi
  10ac52:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10ac56:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  10ac5a:	b9 00 00 00 00       	mov    $0x0,%ecx
  10ac5f:	ba 0a 00 00 00       	mov    $0xa,%edx
  10ac64:	0f 84 e6 04 00 00    	je     10b150 <_dtoa_r+0x1010>
  10ac6a:	e8 f1 14 00 00       	call   10c160 <__multadd>
  10ac6f:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  10ac73:	31 c9                	xor    %ecx,%ecx
  10ac75:	ba 0a 00 00 00       	mov    $0xa,%edx
  10ac7a:	48 89 df             	mov    %rbx,%rdi
  10ac7d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10ac81:	e8 da 14 00 00       	call   10c160 <__multadd>
  10ac86:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  10ac8a:	e9 f9 fe ff ff       	jmp    10ab88 <_dtoa_r+0xa48>
  10ac8f:	90                   	nop
  10ac90:	48 63 85 7c ff ff ff 	movslq -0x84(%rbp),%rax
  10ac97:	8b 7d 88             	mov    -0x78(%rbp),%edi
  10ac9a:	f2 0f 10 14 c5 a0 d1 	movsd  0x11d1a0(,%rax,8),%xmm2
  10aca1:	11 00 
  10aca3:	85 ff                	test   %edi,%edi
  10aca5:	0f 89 c6 05 00 00    	jns    10b271 <_dtoa_r+0x1131>
  10acab:	45 85 ff             	test   %r15d,%r15d
  10acae:	0f 8f bd 05 00 00    	jg     10b271 <_dtoa_r+0x1131>
  10acb4:	75 13                	jne    10acc9 <_dtoa_r+0xb89>
  10acb6:	f2 0f 59 15 92 32 01 	mulsd  0x13292(%rip),%xmm2        # 11df50 <_ZTVN10__cxxabiv117__class_type_infoE+0x6f0>
  10acbd:	00 
  10acbe:	66 0f 2f 55 a0       	comisd -0x60(%rbp),%xmm2
  10acc3:	0f 82 8f 05 00 00    	jb     10b258 <_dtoa_r+0x1118>
  10acc9:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  10acd0:	00 
  10acd1:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  10acd8:	00 
  10acd9:	e9 e5 fd ff ff       	jmp    10aac3 <_dtoa_r+0x983>
  10acde:	66 90                	xchg   %ax,%ax
  10ace0:	c7 85 70 ff ff ff 01 	movl   $0x1,-0x90(%rbp)
  10ace7:	00 00 00 
  10acea:	e9 6c fb ff ff       	jmp    10a85b <_dtoa_r+0x71b>
  10acef:	90                   	nop
  10acf0:	c7 45 88 01 00 00 00 	movl   $0x1,-0x78(%rbp)
  10acf7:	41 bf 01 00 00 00    	mov    $0x1,%r15d
  10acfd:	e9 d6 fa ff ff       	jmp    10a7d8 <_dtoa_r+0x698>
  10ad02:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10ad08:	44 89 e2             	mov    %r12d,%edx
  10ad0b:	48 89 c6             	mov    %rax,%rsi
  10ad0e:	48 89 df             	mov    %rbx,%rdi
  10ad11:	e8 2a 19 00 00       	call   10c640 <__pow5mult>
  10ad16:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  10ad1a:	41 83 fe 01          	cmp    $0x1,%r14d
  10ad1e:	0f 8e ee 02 00 00    	jle    10b012 <_dtoa_r+0xed2>
  10ad24:	45 31 e4             	xor    %r12d,%r12d
  10ad27:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  10ad2b:	8b 41 14             	mov    0x14(%rcx),%eax
  10ad2e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
  10ad34:	83 e8 01             	sub    $0x1,%eax
  10ad37:	48 98                	cltq   
  10ad39:	8b 7c 81 18          	mov    0x18(%rcx,%rax,4),%edi
  10ad3d:	e8 1e 15 00 00       	call   10c260 <__hi0bits>
  10ad42:	89 c2                	mov    %eax,%edx
  10ad44:	b8 20 00 00 00       	mov    $0x20,%eax
  10ad49:	29 d0                	sub    %edx,%eax
  10ad4b:	e9 d3 fc ff ff       	jmp    10aa23 <_dtoa_r+0x8e3>
  10ad50:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  10ad54:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  10ad58:	e8 63 1b 00 00       	call   10c8c0 <__mcmp>
  10ad5d:	85 c0                	test   %eax,%eax
  10ad5f:	0f 89 4b fd ff ff    	jns    10aab0 <_dtoa_r+0x970>
  10ad65:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  10ad69:	31 c9                	xor    %ecx,%ecx
  10ad6b:	ba 0a 00 00 00       	mov    $0xa,%edx
  10ad70:	48 89 df             	mov    %rbx,%rdi
  10ad73:	83 ad 7c ff ff ff 01 	subl   $0x1,-0x84(%rbp)
  10ad7a:	e8 e1 13 00 00       	call   10c160 <__multadd>
  10ad7f:	44 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%r9d
  10ad86:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10ad8a:	45 85 c9             	test   %r9d,%r9d
  10ad8d:	0f 85 18 07 00 00    	jne    10b4ab <_dtoa_r+0x136b>
  10ad93:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
  10ad99:	85 c0                	test   %eax,%eax
  10ad9b:	7f 0c                	jg     10ada9 <_dtoa_r+0xc69>
  10ad9d:	41 89 c7             	mov    %eax,%r15d
  10ada0:	45 84 ed             	test   %r13b,%r13b
  10ada3:	0f 85 11 fd ff ff    	jne    10aaba <_dtoa_r+0x97a>
  10ada9:	44 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%r15d
  10adb0:	4c 8b 75 b8          	mov    -0x48(%rbp),%r14
  10adb4:	4c 8b 6d 90          	mov    -0x70(%rbp),%r13
  10adb8:	45 31 e4             	xor    %r12d,%r12d
  10adbb:	eb 18                	jmp    10add5 <_dtoa_r+0xc95>
  10adbd:	0f 1f 00             	nopl   (%rax)
  10adc0:	4c 89 f6             	mov    %r14,%rsi
  10adc3:	31 c9                	xor    %ecx,%ecx
  10adc5:	ba 0a 00 00 00       	mov    $0xa,%edx
  10adca:	48 89 df             	mov    %rbx,%rdi
  10adcd:	e8 8e 13 00 00       	call   10c160 <__multadd>
  10add2:	49 89 c6             	mov    %rax,%r14
  10add5:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  10add9:	4c 89 f7             	mov    %r14,%rdi
  10addc:	e8 8f f1 ff ff       	call   109f70 <quorem>
  10ade1:	83 c0 30             	add    $0x30,%eax
  10ade4:	43 88 44 25 00       	mov    %al,0x0(%r13,%r12,1)
  10ade9:	49 83 c4 01          	add    $0x1,%r12
  10aded:	45 39 e7             	cmp    %r12d,%r15d
  10adf0:	7f ce                	jg     10adc0 <_dtoa_r+0xc80>
  10adf2:	41 89 c5             	mov    %eax,%r13d
  10adf5:	41 8d 47 ff          	lea    -0x1(%r15),%eax
  10adf9:	ba 01 00 00 00       	mov    $0x1,%edx
  10adfe:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  10ae02:	48 83 c0 01          	add    $0x1,%rax
  10ae06:	45 85 ff             	test   %r15d,%r15d
  10ae09:	4c 89 75 b8          	mov    %r14,-0x48(%rbp)
  10ae0d:	48 0f 4e c2          	cmovle %rdx,%rax
  10ae11:	45 31 e4             	xor    %r12d,%r12d
  10ae14:	48 01 c1             	add    %rax,%rcx
  10ae17:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  10ae1b:	ba 01 00 00 00       	mov    $0x1,%edx
  10ae20:	48 89 df             	mov    %rbx,%rdi
  10ae23:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
  10ae27:	e8 34 19 00 00       	call   10c760 <__lshift>
  10ae2c:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  10ae30:	48 89 c7             	mov    %rax,%rdi
  10ae33:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10ae37:	e8 84 1a 00 00       	call   10c8c0 <__mcmp>
  10ae3c:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  10ae40:	85 c0                	test   %eax,%eax
  10ae42:	0f 8e d1 04 00 00    	jle    10b319 <_dtoa_r+0x11d9>
  10ae48:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10ae4c:	eb 0b                	jmp    10ae59 <_dtoa_r+0xd19>
  10ae4e:	66 90                	xchg   %ax,%ax
  10ae50:	48 39 ca             	cmp    %rcx,%rdx
  10ae53:	0f 84 f8 04 00 00    	je     10b351 <_dtoa_r+0x1211>
  10ae59:	49 89 ce             	mov    %rcx,%r14
  10ae5c:	48 8d 49 ff          	lea    -0x1(%rcx),%rcx
  10ae60:	41 0f b6 46 ff       	movzbl -0x1(%r14),%eax
  10ae65:	3c 39                	cmp    $0x39,%al
  10ae67:	74 e7                	je     10ae50 <_dtoa_r+0xd10>
  10ae69:	83 c0 01             	add    $0x1,%eax
  10ae6c:	88 01                	mov    %al,(%rcx)
  10ae6e:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  10ae74:	89 45 a0             	mov    %eax,-0x60(%rbp)
  10ae77:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  10ae7b:	48 89 df             	mov    %rbx,%rdi
  10ae7e:	e8 bd 12 00 00       	call   10c140 <_Bfree>
  10ae83:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  10ae87:	48 85 c0             	test   %rax,%rax
  10ae8a:	0f 84 b4 04 00 00    	je     10b344 <_dtoa_r+0x1204>
  10ae90:	4d 85 e4             	test   %r12,%r12
  10ae93:	74 10                	je     10aea5 <_dtoa_r+0xd65>
  10ae95:	49 39 c4             	cmp    %rax,%r12
  10ae98:	74 0b                	je     10aea5 <_dtoa_r+0xd65>
  10ae9a:	4c 89 e6             	mov    %r12,%rsi
  10ae9d:	48 89 df             	mov    %rbx,%rdi
  10aea0:	e8 9b 12 00 00       	call   10c140 <_Bfree>
  10aea5:	4c 8b 65 90          	mov    -0x70(%rbp),%r12
  10aea9:	4c 89 75 90          	mov    %r14,-0x70(%rbp)
  10aead:	e9 30 fc ff ff       	jmp    10aae2 <_dtoa_r+0x9a2>
  10aeb2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10aeb8:	66 0f 28 c2          	movapd %xmm2,%xmm0
  10aebc:	bf 02 00 00 00       	mov    $0x2,%edi
  10aec1:	e9 ce f5 ff ff       	jmp    10a494 <_dtoa_r+0x354>
  10aec6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10aecd:	00 00 00 
  10aed0:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffff,%rax
  10aed7:	ff 0f 00 
  10aeda:	48 85 45 a0          	test   %rax,-0x60(%rbp)
  10aede:	0f 85 3a fb ff ff    	jne    10aa1e <_dtoa_r+0x8de>
  10aee4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10aee8:	48 c1 e8 20          	shr    $0x20,%rax
  10aeec:	a9 00 00 f0 7f       	test   $0x7ff00000,%eax
  10aef1:	0f 84 27 fb ff ff    	je     10aa1e <_dtoa_r+0x8de>
  10aef7:	83 85 78 ff ff ff 01 	addl   $0x1,-0x88(%rbp)
  10aefe:	41 83 c5 01          	add    $0x1,%r13d
  10af02:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  10af08:	e9 11 fb ff ff       	jmp    10aa1e <_dtoa_r+0x8de>
  10af0d:	0f 1f 00             	nopl   (%rax)
  10af10:	ba 1c 00 00 00       	mov    $0x1c,%edx
  10af15:	29 c2                	sub    %eax,%edx
  10af17:	01 95 78 ff ff ff    	add    %edx,-0x88(%rbp)
  10af1d:	01 95 68 ff ff ff    	add    %edx,-0x98(%rbp)
  10af23:	41 01 d5             	add    %edx,%r13d
  10af26:	e9 39 fb ff ff       	jmp    10aa64 <_dtoa_r+0x924>
  10af2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10af30:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  10af34:	31 c9                	xor    %ecx,%ecx
  10af36:	ba 05 00 00 00       	mov    $0x5,%edx
  10af3b:	48 89 df             	mov    %rbx,%rdi
  10af3e:	e8 1d 12 00 00       	call   10c160 <__multadd>
  10af43:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  10af47:	48 89 c6             	mov    %rax,%rsi
  10af4a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  10af4e:	e8 6d 19 00 00       	call   10c8c0 <__mcmp>
  10af53:	4c 8b 65 90          	mov    -0x70(%rbp),%r12
  10af57:	85 c0                	test   %eax,%eax
  10af59:	0f 8e 64 fb ff ff    	jle    10aac3 <_dtoa_r+0x983>
  10af5f:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  10af65:	48 83 45 90 01       	addq   $0x1,-0x70(%rbp)
  10af6a:	41 c6 04 24 31       	movb   $0x31,(%r12)
  10af6f:	83 c0 01             	add    $0x1,%eax
  10af72:	89 45 a0             	mov    %eax,-0x60(%rbp)
  10af75:	e9 55 fb ff ff       	jmp    10aacf <_dtoa_r+0x98f>
  10af7a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10af80:	48 89 c2             	mov    %rax,%rdx
  10af83:	48 83 e8 01          	sub    $0x1,%rax
  10af87:	80 38 30             	cmpb   $0x30,(%rax)
  10af8a:	74 f4                	je     10af80 <_dtoa_r+0xe40>
  10af8c:	4c 8b 65 90          	mov    -0x70(%rbp),%r12
  10af90:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  10af94:	e9 55 fb ff ff       	jmp    10aaee <_dtoa_r+0x9ae>
  10af99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10afa0:	66 0f 28 c2          	movapd %xmm2,%xmm0
  10afa4:	bf 02 00 00 00       	mov    $0x2,%edi
  10afa9:	e9 09 f5 ff ff       	jmp    10a4b7 <_dtoa_r+0x377>
  10afae:	66 90                	xchg   %ax,%ax
  10afb0:	ba 01 00 00 00       	mov    $0x1,%edx
  10afb5:	45 31 ed             	xor    %r13d,%r13d
  10afb8:	29 c2                	sub    %eax,%edx
  10afba:	89 95 78 ff ff ff    	mov    %edx,-0x88(%rbp)
  10afc0:	e9 d7 f7 ff ff       	jmp    10a79c <_dtoa_r+0x65c>
  10afc5:	8b 4d a8             	mov    -0x58(%rbp),%ecx
  10afc8:	8b bd 78 ff ff ff    	mov    -0x88(%rbp),%edi
  10afce:	89 c2                	mov    %eax,%edx
  10afd0:	89 45 a8             	mov    %eax,-0x58(%rbp)
  10afd3:	45 01 fd             	add    %r15d,%r13d
  10afd6:	45 31 d2             	xor    %r10d,%r10d
  10afd9:	29 ca                	sub    %ecx,%edx
  10afdb:	42 8d 0c 3f          	lea    (%rdi,%r15,1),%ecx
  10afdf:	89 bd 68 ff ff ff    	mov    %edi,-0x98(%rbp)
  10afe5:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%rbp)
  10afeb:	41 01 d4             	add    %edx,%r12d
  10afee:	be 01 00 00 00       	mov    $0x1,%esi
  10aff3:	48 89 df             	mov    %rbx,%rdi
  10aff6:	44 89 95 58 ff ff ff 	mov    %r10d,-0xa8(%rbp)
  10affd:	e8 4e 13 00 00       	call   10c350 <__i2b>
  10b002:	44 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%r10d
  10b009:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10b00d:	e9 90 f9 ff ff       	jmp    10a9a2 <_dtoa_r+0x862>
  10b012:	48 b8 ff ff ff ff ff 	movabs $0xfffffffffffff,%rax
  10b019:	ff 0f 00 
  10b01c:	48 85 45 a0          	test   %rax,-0x60(%rbp)
  10b020:	0f 85 fe fc ff ff    	jne    10ad24 <_dtoa_r+0xbe4>
  10b026:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  10b02a:	48 c1 e8 20          	shr    $0x20,%rax
  10b02e:	a9 00 00 f0 7f       	test   $0x7ff00000,%eax
  10b033:	0f 84 eb fc ff ff    	je     10ad24 <_dtoa_r+0xbe4>
  10b039:	83 85 78 ff ff ff 01 	addl   $0x1,-0x88(%rbp)
  10b040:	41 83 c5 01          	add    $0x1,%r13d
  10b044:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  10b04a:	e9 d8 fc ff ff       	jmp    10ad27 <_dtoa_r+0xbe7>
  10b04f:	c7 85 70 ff ff ff 00 	movl   $0x0,-0x90(%rbp)
  10b056:	00 00 00 
  10b059:	41 be 02 00 00 00    	mov    $0x2,%r14d
  10b05f:	e9 f7 f7 ff ff       	jmp    10a85b <_dtoa_r+0x71b>
  10b064:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  10b068:	44 89 d2             	mov    %r10d,%edx
  10b06b:	48 89 df             	mov    %rbx,%rdi
  10b06e:	44 89 95 54 ff ff ff 	mov    %r10d,-0xac(%rbp)
  10b075:	e8 c6 15 00 00       	call   10c640 <__pow5mult>
  10b07a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  10b07e:	48 89 df             	mov    %rbx,%rdi
  10b081:	48 89 c6             	mov    %rax,%rsi
  10b084:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10b088:	e8 73 13 00 00       	call   10c400 <__multiply>
  10b08d:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  10b091:	48 89 df             	mov    %rbx,%rdi
  10b094:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  10b09b:	e8 a0 10 00 00       	call   10c140 <_Bfree>
  10b0a0:	44 8b 95 54 ff ff ff 	mov    -0xac(%rbp),%r10d
  10b0a7:	44 29 55 a8          	sub    %r10d,-0x58(%rbp)
  10b0ab:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  10b0b2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10b0b6:	0f 84 3e f9 ff ff    	je     10a9fa <_dtoa_r+0x8ba>
  10b0bc:	e9 26 f9 ff ff       	jmp    10a9e7 <_dtoa_r+0x8a7>
  10b0c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10b0c8:	48 89 df             	mov    %rbx,%rdi
  10b0cb:	e8 70 10 00 00       	call   10c140 <_Bfree>
  10b0d0:	45 85 e4             	test   %r12d,%r12d
  10b0d3:	78 12                	js     10b0e7 <_dtoa_r+0xfa7>
  10b0d5:	8b 45 a0             	mov    -0x60(%rbp),%eax
  10b0d8:	45 09 f4             	or     %r14d,%r12d
  10b0db:	83 e0 01             	and    $0x1,%eax
  10b0de:	44 09 e0             	or     %r12d,%eax
  10b0e1:	0f 85 9c 00 00 00    	jne    10b183 <_dtoa_r+0x1043>
  10b0e7:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  10b0eb:	48 89 df             	mov    %rbx,%rdi
  10b0ee:	ba 01 00 00 00       	mov    $0x1,%edx
  10b0f3:	e8 68 16 00 00       	call   10c760 <__lshift>
  10b0f8:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
  10b0fc:	48 89 c7             	mov    %rax,%rdi
  10b0ff:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10b103:	e8 b8 17 00 00       	call   10c8c0 <__mcmp>
  10b108:	85 c0                	test   %eax,%eax
  10b10a:	0f 8e d4 03 00 00    	jle    10b4e4 <_dtoa_r+0x13a4>
  10b110:	41 83 fd 39          	cmp    $0x39,%r13d
  10b114:	0f 84 36 03 00 00    	je     10b450 <_dtoa_r+0x1310>
  10b11a:	44 8b ad 64 ff ff ff 	mov    -0x9c(%rbp),%r13d
  10b121:	41 83 c5 31          	add    $0x31,%r13d
  10b125:	45 88 2f             	mov    %r13b,(%r15)
  10b128:	4d 8d 77 01          	lea    0x1(%r15),%r14
  10b12c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  10b130:	4c 8b 65 b0          	mov    -0x50(%rbp),%r12
  10b134:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10b138:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  10b13e:	89 45 a0             	mov    %eax,-0x60(%rbp)
  10b141:	e9 31 fd ff ff       	jmp    10ae77 <_dtoa_r+0xd37>
  10b146:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10b14d:	00 00 00 
  10b150:	e8 0b 10 00 00       	call   10c160 <__multadd>
  10b155:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10b159:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  10b15d:	e9 26 fa ff ff       	jmp    10ab88 <_dtoa_r+0xa48>
  10b162:	45 85 e4             	test   %r12d,%r12d
  10b165:	0f 88 04 04 00 00    	js     10b56f <_dtoa_r+0x142f>
  10b16b:	45 09 f4             	or     %r14d,%r12d
  10b16e:	44 0b a5 58 ff ff ff 	or     -0xa8(%rbp),%r12d
  10b175:	0f 84 f4 03 00 00    	je     10b56f <_dtoa_r+0x142f>
  10b17b:	85 c0                	test   %eax,%eax
  10b17d:	0f 8e 99 fa ff ff    	jle    10ac1c <_dtoa_r+0xadc>
  10b183:	41 83 fd 39          	cmp    $0x39,%r13d
  10b187:	0f 84 c3 02 00 00    	je     10b450 <_dtoa_r+0x1310>
  10b18d:	45 8d 45 01          	lea    0x1(%r13),%r8d
  10b191:	4d 8d 77 01          	lea    0x1(%r15),%r14
  10b195:	45 88 07             	mov    %r8b,(%r15)
  10b198:	eb 92                	jmp    10b12c <_dtoa_r+0xfec>
  10b19a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10b1a0:	c7 85 70 ff ff ff 00 	movl   $0x0,-0x90(%rbp)
  10b1a7:	00 00 00 
  10b1aa:	e9 1a f2 ff ff       	jmp    10a3c9 <_dtoa_r+0x289>
  10b1af:	90                   	nop
  10b1b0:	45 85 ff             	test   %r15d,%r15d
  10b1b3:	0f 84 ee f4 ff ff    	je     10a6a7 <_dtoa_r+0x567>
  10b1b9:	44 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%r10d
  10b1c0:	45 85 d2             	test   %r10d,%r10d
  10b1c3:	0f 8e 36 f5 ff ff    	jle    10a6ff <_dtoa_r+0x5bf>
  10b1c9:	f2 0f 10 1d 6f 2d 01 	movsd  0x12d6f(%rip),%xmm3        # 11df40 <_ZTVN10__cxxabiv117__class_type_infoE+0x6e0>
  10b1d0:	00 
  10b1d1:	83 c7 01             	add    $0x1,%edi
  10b1d4:	66 0f ef c9          	pxor   %xmm1,%xmm1
  10b1d8:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  10b1de:	f2 0f 2a cf          	cvtsi2sd %edi,%xmm1
  10b1e2:	f2 0f 59 c3          	mulsd  %xmm3,%xmm0
  10b1e6:	83 e8 01             	sub    $0x1,%eax
  10b1e9:	89 45 a0             	mov    %eax,-0x60(%rbp)
  10b1ec:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  10b1f0:	f2 0f 58 0d 50 2d 01 	addsd  0x12d50(%rip),%xmm1        # 11df48 <_ZTVN10__cxxabiv117__class_type_infoE+0x6e8>
  10b1f7:	00 
  10b1f8:	66 48 0f 7e c8       	movq   %xmm1,%rax
  10b1fd:	48 89 c2             	mov    %rax,%rdx
  10b200:	89 c0                	mov    %eax,%eax
  10b202:	48 c1 ea 20          	shr    $0x20,%rdx
  10b206:	81 ea 00 00 40 03    	sub    $0x3400000,%edx
  10b20c:	48 c1 e2 20          	shl    $0x20,%rdx
  10b210:	48 09 d0             	or     %rdx,%rax
  10b213:	e9 01 f3 ff ff       	jmp    10a519 <_dtoa_r+0x3d9>
  10b218:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10b21f:	00 
  10b220:	8b 95 58 ff ff ff    	mov    -0xa8(%rbp),%edx
  10b226:	85 d2                	test   %edx,%edx
  10b228:	0f 84 4d 01 00 00    	je     10b37b <_dtoa_r+0x123b>
  10b22e:	8b 8d 78 ff ff ff    	mov    -0x88(%rbp),%ecx
  10b234:	05 33 04 00 00       	add    $0x433,%eax
  10b239:	44 8b 55 a8          	mov    -0x58(%rbp),%r10d
  10b23d:	41 01 c5             	add    %eax,%r13d
  10b240:	01 c8                	add    %ecx,%eax
  10b242:	89 8d 68 ff ff ff    	mov    %ecx,-0x98(%rbp)
  10b248:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  10b24e:	e9 9b fd ff ff       	jmp    10afee <_dtoa_r+0xeae>
  10b253:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10b258:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  10b25f:	00 
  10b260:	4c 8b 65 90          	mov    -0x70(%rbp),%r12
  10b264:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  10b26b:	00 
  10b26c:	e9 ee fc ff ff       	jmp    10af5f <_dtoa_r+0xe1f>
  10b271:	f2 0f 10 45 a0       	movsd  -0x60(%rbp),%xmm0
  10b276:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  10b27a:	66 0f 28 c8          	movapd %xmm0,%xmm1
  10b27e:	48 8d 51 01          	lea    0x1(%rcx),%rdx
  10b282:	f2 0f 5e ca          	divsd  %xmm2,%xmm1
  10b286:	f2 0f 2c f9          	cvttsd2si %xmm1,%edi
  10b28a:	66 0f ef c9          	pxor   %xmm1,%xmm1
  10b28e:	f2 0f 2a cf          	cvtsi2sd %edi,%xmm1
  10b292:	8d 47 30             	lea    0x30(%rdi),%eax
  10b295:	88 01                	mov    %al,(%rcx)
  10b297:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  10b29b:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  10b29f:	41 83 ff 01          	cmp    $0x1,%r15d
  10b2a3:	0f 84 55 01 00 00    	je     10b3fe <_dtoa_r+0x12be>
  10b2a9:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  10b2ad:	8d 46 fe             	lea    -0x2(%rsi),%eax
  10b2b0:	f2 0f 10 1d 88 2c 01 	movsd  0x12c88(%rip),%xmm3        # 11df40 <_ZTVN10__cxxabiv117__class_type_infoE+0x6e0>
  10b2b7:	00 
  10b2b8:	66 0f ef e4          	pxor   %xmm4,%xmm4
  10b2bc:	48 8d 44 01 02       	lea    0x2(%rcx,%rax,1),%rax
  10b2c1:	eb 34                	jmp    10b2f7 <_dtoa_r+0x11b7>
  10b2c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10b2c8:	66 0f 28 c8          	movapd %xmm0,%xmm1
  10b2cc:	48 83 c2 01          	add    $0x1,%rdx
  10b2d0:	f2 0f 5e ca          	divsd  %xmm2,%xmm1
  10b2d4:	f2 0f 2c f9          	cvttsd2si %xmm1,%edi
  10b2d8:	66 0f ef c9          	pxor   %xmm1,%xmm1
  10b2dc:	f2 0f 2a cf          	cvtsi2sd %edi,%xmm1
  10b2e0:	8d 4f 30             	lea    0x30(%rdi),%ecx
  10b2e3:	88 4a ff             	mov    %cl,-0x1(%rdx)
  10b2e6:	f2 0f 59 ca          	mulsd  %xmm2,%xmm1
  10b2ea:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
  10b2ee:	48 39 d0             	cmp    %rdx,%rax
  10b2f1:	0f 84 0a 01 00 00    	je     10b401 <_dtoa_r+0x12c1>
  10b2f7:	f2 0f 59 c3          	mulsd  %xmm3,%xmm0
  10b2fb:	66 0f 2e c4          	ucomisd %xmm4,%xmm0
  10b2ff:	7a c7                	jp     10b2c8 <_dtoa_r+0x1188>
  10b301:	75 c5                	jne    10b2c8 <_dtoa_r+0x1188>
  10b303:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  10b309:	4c 8b 65 90          	mov    -0x70(%rbp),%r12
  10b30d:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
  10b311:	89 45 a0             	mov    %eax,-0x60(%rbp)
  10b314:	e9 d5 f7 ff ff       	jmp    10aaee <_dtoa_r+0x9ae>
  10b319:	75 0d                	jne    10b328 <_dtoa_r+0x11e8>
  10b31b:	41 83 e5 01          	and    $0x1,%r13d
  10b31f:	0f 85 23 fb ff ff    	jne    10ae48 <_dtoa_r+0xd08>
  10b325:	0f 1f 00             	nopl   (%rax)
  10b328:	49 89 ce             	mov    %rcx,%r14
  10b32b:	48 8d 49 ff          	lea    -0x1(%rcx),%rcx
  10b32f:	41 80 7e ff 30       	cmpb   $0x30,-0x1(%r14)
  10b334:	74 f2                	je     10b328 <_dtoa_r+0x11e8>
  10b336:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  10b33c:	89 45 a0             	mov    %eax,-0x60(%rbp)
  10b33f:	e9 33 fb ff ff       	jmp    10ae77 <_dtoa_r+0xd37>
  10b344:	4c 8b 65 90          	mov    -0x70(%rbp),%r12
  10b348:	4c 89 75 90          	mov    %r14,-0x70(%rbp)
  10b34c:	e9 9d f7 ff ff       	jmp    10aaee <_dtoa_r+0x9ae>
  10b351:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  10b357:	83 c0 01             	add    $0x1,%eax
  10b35a:	89 45 a0             	mov    %eax,-0x60(%rbp)
  10b35d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  10b361:	c6 00 31             	movb   $0x31,(%rax)
  10b364:	e9 0e fb ff ff       	jmp    10ae77 <_dtoa_r+0xd37>
  10b369:	83 45 a0 01          	addl   $0x1,-0x60(%rbp)
  10b36d:	ba 31 00 00 00       	mov    $0x31,%edx
  10b372:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  10b376:	e9 85 f2 ff ff       	jmp    10a600 <_dtoa_r+0x4c0>
  10b37b:	8b bd 78 ff ff ff    	mov    -0x88(%rbp),%edi
  10b381:	b8 36 00 00 00       	mov    $0x36,%eax
  10b386:	2b 45 c8             	sub    -0x38(%rbp),%eax
  10b389:	41 01 c5             	add    %eax,%r13d
  10b38c:	44 8b 55 a8          	mov    -0x58(%rbp),%r10d
  10b390:	01 f8                	add    %edi,%eax
  10b392:	89 bd 68 ff ff ff    	mov    %edi,-0x98(%rbp)
  10b398:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  10b39e:	e9 4b fc ff ff       	jmp    10afee <_dtoa_r+0xeae>
  10b3a3:	8b 70 08             	mov    0x8(%rax),%esi
  10b3a6:	48 89 df             	mov    %rbx,%rdi
  10b3a9:	e8 f2 0c 00 00       	call   10c0a0 <_Balloc>
  10b3ae:	49 89 c4             	mov    %rax,%r12
  10b3b1:	48 85 c0             	test   %rax,%rax
  10b3b4:	0f 84 5a 01 00 00    	je     10b514 <_dtoa_r+0x13d4>
  10b3ba:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  10b3be:	49 8d 7c 24 10       	lea    0x10(%r12),%rdi
  10b3c3:	48 63 41 14          	movslq 0x14(%rcx),%rax
  10b3c7:	48 8d 71 10          	lea    0x10(%rcx),%rsi
  10b3cb:	48 8d 14 85 08 00 00 	lea    0x8(,%rax,4),%rdx
  10b3d2:	00 
  10b3d3:	e8 28 4c ff ff       	call   100000 <__rom_region_start>
  10b3d8:	ba 01 00 00 00       	mov    $0x1,%edx
  10b3dd:	4c 89 e6             	mov    %r12,%rsi
  10b3e0:	48 89 df             	mov    %rbx,%rdi
  10b3e3:	e8 78 13 00 00       	call   10c760 <__lshift>
  10b3e8:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  10b3ec:	e9 74 f7 ff ff       	jmp    10ab65 <_dtoa_r+0xa25>
  10b3f1:	4c 8b 65 90          	mov    -0x70(%rbp),%r12
  10b3f5:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  10b3f9:	e9 f0 f6 ff ff       	jmp    10aaee <_dtoa_r+0x9ae>
  10b3fe:	48 89 d0             	mov    %rdx,%rax
  10b401:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
  10b405:	66 0f 2f c2          	comisd %xmm2,%xmm0
  10b409:	77 62                	ja     10b46d <_dtoa_r+0x132d>
  10b40b:	66 0f 2e c2          	ucomisd %xmm2,%xmm0
  10b40f:	7a 07                	jp     10b418 <_dtoa_r+0x12d8>
  10b411:	75 05                	jne    10b418 <_dtoa_r+0x12d8>
  10b413:	83 e7 01             	and    $0x1,%edi
  10b416:	75 55                	jne    10b46d <_dtoa_r+0x132d>
  10b418:	4c 8b 65 90          	mov    -0x70(%rbp),%r12
  10b41c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  10b420:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  10b426:	89 45 a0             	mov    %eax,-0x60(%rbp)
  10b429:	e9 c0 f6 ff ff       	jmp    10aaee <_dtoa_r+0x9ae>
  10b42e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  10b432:	4c 8b 65 b0          	mov    -0x50(%rbp),%r12
  10b436:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
  10b43d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10b441:	e9 d1 f9 ff ff       	jmp    10ae17 <_dtoa_r+0xcd7>
  10b446:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10b44d:	00 00 00 
  10b450:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  10b454:	4c 8b 65 b0          	mov    -0x50(%rbp),%r12
  10b458:	41 c6 07 39          	movb   $0x39,(%r15)
  10b45c:	49 8d 4f 01          	lea    0x1(%r15),%rcx
  10b460:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  10b464:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10b468:	e9 ec f9 ff ff       	jmp    10ae59 <_dtoa_r+0xd19>
  10b46d:	8b bd 7c ff ff ff    	mov    -0x84(%rbp),%edi
  10b473:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
  10b477:	89 7d a0             	mov    %edi,-0x60(%rbp)
  10b47a:	e9 6a f1 ff ff       	jmp    10a5e9 <_dtoa_r+0x4a9>
  10b47f:	41 83 fd 39          	cmp    $0x39,%r13d
  10b483:	74 cb                	je     10b450 <_dtoa_r+0x1310>
  10b485:	44 8b b5 64 ff ff ff 	mov    -0x9c(%rbp),%r14d
  10b48c:	41 83 c6 31          	add    $0x31,%r14d
  10b490:	45 85 e4             	test   %r12d,%r12d
  10b493:	45 0f 4f ee          	cmovg  %r14d,%r13d
  10b497:	4d 8d 77 01          	lea    0x1(%r15),%r14
  10b49b:	45 88 2f             	mov    %r13b,(%r15)
  10b49e:	e9 89 fc ff ff       	jmp    10b12c <_dtoa_r+0xfec>
  10b4a3:	48 89 f8             	mov    %rdi,%rax
  10b4a6:	e9 88 f4 ff ff       	jmp    10a933 <_dtoa_r+0x7f3>
  10b4ab:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  10b4af:	31 c9                	xor    %ecx,%ecx
  10b4b1:	ba 0a 00 00 00       	mov    $0xa,%edx
  10b4b6:	48 89 df             	mov    %rbx,%rdi
  10b4b9:	e8 a2 0c 00 00       	call   10c160 <__multadd>
  10b4be:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  10b4c2:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
  10b4c8:	85 c0                	test   %eax,%eax
  10b4ca:	7f 0c                	jg     10b4d8 <_dtoa_r+0x1398>
  10b4cc:	41 89 c7             	mov    %eax,%r15d
  10b4cf:	45 84 ed             	test   %r13b,%r13b
  10b4d2:	0f 85 e2 f5 ff ff    	jne    10aaba <_dtoa_r+0x97a>
  10b4d8:	44 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%r15d
  10b4df:	e9 54 f6 ff ff       	jmp    10ab38 <_dtoa_r+0x9f8>
  10b4e4:	0f 85 3b fc ff ff    	jne    10b125 <_dtoa_r+0xfe5>
  10b4ea:	41 f6 c5 01          	test   $0x1,%r13b
  10b4ee:	0f 85 1c fc ff ff    	jne    10b110 <_dtoa_r+0xfd0>
  10b4f4:	e9 2c fc ff ff       	jmp    10b125 <_dtoa_r+0xfe5>
  10b4f9:	66 0f 28 c1          	movapd %xmm1,%xmm0
  10b4fd:	bf 02 00 00 00       	mov    $0x2,%edi
  10b502:	e9 b0 ef ff ff       	jmp    10a4b7 <_dtoa_r+0x377>
  10b507:	4c 8b 65 90          	mov    -0x70(%rbp),%r12
  10b50b:	48 89 7d 90          	mov    %rdi,-0x70(%rbp)
  10b50f:	e9 da f5 ff ff       	jmp    10aaee <_dtoa_r+0x9ae>
  10b514:	b9 8a 03 12 00       	mov    $0x12038a,%ecx
  10b519:	31 d2                	xor    %edx,%edx
  10b51b:	be ea 02 00 00       	mov    $0x2ea,%esi
  10b520:	bf c0 de 11 00       	mov    $0x11dec0,%edi
  10b525:	e8 46 78 ff ff       	call   102d70 <__assert_func>
  10b52a:	31 d2                	xor    %edx,%edx
  10b52c:	31 f6                	xor    %esi,%esi
  10b52e:	48 89 df             	mov    %rbx,%rdi
  10b531:	89 53 68             	mov    %edx,0x68(%rbx)
  10b534:	e8 67 0b 00 00       	call   10c0a0 <_Balloc>
  10b539:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  10b53d:	48 85 c0             	test   %rax,%rax
  10b540:	74 3a                	je     10b57c <_dtoa_r+0x143c>
  10b542:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  10b546:	41 83 cf ff          	or     $0xffffffff,%r15d
  10b54a:	83 ce ff             	or     $0xffffffff,%esi
  10b54d:	c7 85 60 ff ff ff ff 	movl   $0xffffffff,-0xa0(%rbp)
  10b554:	ff ff ff 
  10b557:	c7 85 70 ff ff ff 01 	movl   $0x1,-0x90(%rbp)
  10b55e:	00 00 00 
  10b561:	48 89 43 60          	mov    %rax,0x60(%rbx)
  10b565:	31 c0                	xor    %eax,%eax
  10b567:	89 45 88             	mov    %eax,-0x78(%rbp)
  10b56a:	e9 95 f1 ff ff       	jmp    10a704 <_dtoa_r+0x5c4>
  10b56f:	85 c0                	test   %eax,%eax
  10b571:	0f 8f 70 fb ff ff    	jg     10b0e7 <_dtoa_r+0xfa7>
  10b577:	e9 a9 fb ff ff       	jmp    10b125 <_dtoa_r+0xfe5>
  10b57c:	b9 8a 03 12 00       	mov    $0x12038a,%ecx
  10b581:	31 d2                	xor    %edx,%edx
  10b583:	be aa 01 00 00       	mov    $0x1aa,%esi
  10b588:	bf c0 de 11 00       	mov    $0x11dec0,%edi
  10b58d:	e8 de 77 ff ff       	call   102d70 <__assert_func>
  10b592:	45 31 db             	xor    %r11d,%r11d
  10b595:	31 f6                	xor    %esi,%esi
  10b597:	44 89 5b 68          	mov    %r11d,0x68(%rbx)
  10b59b:	e9 76 ee ff ff       	jmp    10a416 <_dtoa_r+0x2d6>

000000000010b5a0 <__sflush_r>:
  10b5a0:	55                   	push   %rbp
  10b5a1:	48 89 e5             	mov    %rsp,%rbp
  10b5a4:	41 56                	push   %r14
  10b5a6:	41 55                	push   %r13
  10b5a8:	49 89 fd             	mov    %rdi,%r13
  10b5ab:	41 54                	push   %r12
  10b5ad:	53                   	push   %rbx
  10b5ae:	0f b7 4e 10          	movzwl 0x10(%rsi),%ecx
  10b5b2:	48 89 f3             	mov    %rsi,%rbx
  10b5b5:	f6 c1 08             	test   $0x8,%cl
  10b5b8:	0f 85 d2 00 00 00    	jne    10b690 <__sflush_r+0xf0>
  10b5be:	8b 56 08             	mov    0x8(%rsi),%edx
  10b5c1:	85 d2                	test   %edx,%edx
  10b5c3:	0f 8e 37 01 00 00    	jle    10b700 <__sflush_r+0x160>
  10b5c9:	48 8b 43 48          	mov    0x48(%rbx),%rax
  10b5cd:	48 85 c0             	test   %rax,%rax
  10b5d0:	0f 84 aa 00 00 00    	je     10b680 <__sflush_r+0xe0>
  10b5d6:	45 8b 65 00          	mov    0x0(%r13),%r12d
  10b5da:	48 8b 73 30          	mov    0x30(%rbx),%rsi
  10b5de:	41 c7 45 00 00 00 00 	movl   $0x0,0x0(%r13)
  10b5e5:	00 
  10b5e6:	f6 c5 10             	test   $0x10,%ch
  10b5e9:	0f 85 29 01 00 00    	jne    10b718 <__sflush_r+0x178>
  10b5ef:	31 d2                	xor    %edx,%edx
  10b5f1:	b9 01 00 00 00       	mov    $0x1,%ecx
  10b5f6:	4c 89 ef             	mov    %r13,%rdi
  10b5f9:	ff d0                	call   *%rax
  10b5fb:	48 89 c2             	mov    %rax,%rdx
  10b5fe:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  10b602:	0f 84 50 01 00 00    	je     10b758 <__sflush_r+0x1b8>
  10b608:	0f b7 4b 10          	movzwl 0x10(%rbx),%ecx
  10b60c:	48 8b 43 48          	mov    0x48(%rbx),%rax
  10b610:	48 8b 73 30          	mov    0x30(%rbx),%rsi
  10b614:	83 e1 04             	and    $0x4,%ecx
  10b617:	74 15                	je     10b62e <__sflush_r+0x8e>
  10b619:	48 63 4b 08          	movslq 0x8(%rbx),%rcx
  10b61d:	48 29 ca             	sub    %rcx,%rdx
  10b620:	48 83 7b 58 00       	cmpq   $0x0,0x58(%rbx)
  10b625:	74 07                	je     10b62e <__sflush_r+0x8e>
  10b627:	48 63 4b 70          	movslq 0x70(%rbx),%rcx
  10b62b:	48 29 ca             	sub    %rcx,%rdx
  10b62e:	31 c9                	xor    %ecx,%ecx
  10b630:	4c 89 ef             	mov    %r13,%rdi
  10b633:	ff d0                	call   *%rax
  10b635:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  10b639:	0f 84 e9 00 00 00    	je     10b728 <__sflush_r+0x188>
  10b63f:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  10b643:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%rbx)
  10b64a:	48 89 13             	mov    %rdx,(%rbx)
  10b64d:	f6 43 11 10          	testb  $0x10,0x11(%rbx)
  10b651:	74 07                	je     10b65a <__sflush_r+0xba>
  10b653:	48 89 83 90 00 00 00 	mov    %rax,0x90(%rbx)
  10b65a:	48 8b 73 58          	mov    0x58(%rbx),%rsi
  10b65e:	45 89 65 00          	mov    %r12d,0x0(%r13)
  10b662:	48 85 f6             	test   %rsi,%rsi
  10b665:	74 19                	je     10b680 <__sflush_r+0xe0>
  10b667:	48 8d 43 74          	lea    0x74(%rbx),%rax
  10b66b:	48 39 c6             	cmp    %rax,%rsi
  10b66e:	74 08                	je     10b678 <__sflush_r+0xd8>
  10b670:	4c 89 ef             	mov    %r13,%rdi
  10b673:	e8 e8 04 00 00       	call   10bb60 <_free_r>
  10b678:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
  10b67f:	00 
  10b680:	31 c0                	xor    %eax,%eax
  10b682:	5b                   	pop    %rbx
  10b683:	41 5c                	pop    %r12
  10b685:	41 5d                	pop    %r13
  10b687:	41 5e                	pop    %r14
  10b689:	5d                   	pop    %rbp
  10b68a:	c3                   	ret    
  10b68b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10b690:	4c 8b 76 18          	mov    0x18(%rsi),%r14
  10b694:	4d 85 f6             	test   %r14,%r14
  10b697:	74 e7                	je     10b680 <__sflush_r+0xe0>
  10b699:	48 8b 06             	mov    (%rsi),%rax
  10b69c:	31 d2                	xor    %edx,%edx
  10b69e:	4c 89 36             	mov    %r14,(%rsi)
  10b6a1:	4c 29 f0             	sub    %r14,%rax
  10b6a4:	83 e1 03             	and    $0x3,%ecx
  10b6a7:	41 89 c4             	mov    %eax,%r12d
  10b6aa:	75 03                	jne    10b6af <__sflush_r+0x10f>
  10b6ac:	8b 56 20             	mov    0x20(%rsi),%edx
  10b6af:	89 53 0c             	mov    %edx,0xc(%rbx)
  10b6b2:	85 c0                	test   %eax,%eax
  10b6b4:	7f 18                	jg     10b6ce <__sflush_r+0x12e>
  10b6b6:	eb c8                	jmp    10b680 <__sflush_r+0xe0>
  10b6b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10b6bf:	00 
  10b6c0:	48 63 d0             	movslq %eax,%rdx
  10b6c3:	41 29 c4             	sub    %eax,%r12d
  10b6c6:	49 01 d6             	add    %rdx,%r14
  10b6c9:	45 85 e4             	test   %r12d,%r12d
  10b6cc:	7e b2                	jle    10b680 <__sflush_r+0xe0>
  10b6ce:	48 8b 73 30          	mov    0x30(%rbx),%rsi
  10b6d2:	44 89 e1             	mov    %r12d,%ecx
  10b6d5:	4c 89 f2             	mov    %r14,%rdx
  10b6d8:	4c 89 ef             	mov    %r13,%rdi
  10b6db:	ff 53 40             	call   *0x40(%rbx)
  10b6de:	85 c0                	test   %eax,%eax
  10b6e0:	7f de                	jg     10b6c0 <__sflush_r+0x120>
  10b6e2:	0f b7 53 10          	movzwl 0x10(%rbx),%edx
  10b6e6:	83 ca 40             	or     $0x40,%edx
  10b6e9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  10b6ee:	66 89 53 10          	mov    %dx,0x10(%rbx)
  10b6f2:	5b                   	pop    %rbx
  10b6f3:	41 5c                	pop    %r12
  10b6f5:	41 5d                	pop    %r13
  10b6f7:	41 5e                	pop    %r14
  10b6f9:	5d                   	pop    %rbp
  10b6fa:	c3                   	ret    
  10b6fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10b700:	8b 46 70             	mov    0x70(%rsi),%eax
  10b703:	85 c0                	test   %eax,%eax
  10b705:	0f 8f be fe ff ff    	jg     10b5c9 <__sflush_r+0x29>
  10b70b:	31 c0                	xor    %eax,%eax
  10b70d:	e9 70 ff ff ff       	jmp    10b682 <__sflush_r+0xe2>
  10b712:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10b718:	48 8b 93 90 00 00 00 	mov    0x90(%rbx),%rdx
  10b71f:	e9 f0 fe ff ff       	jmp    10b614 <__sflush_r+0x74>
  10b724:	0f 1f 40 00          	nopl   0x0(%rax)
  10b728:	41 8b 4d 00          	mov    0x0(%r13),%ecx
  10b72c:	0f b7 53 10          	movzwl 0x10(%rbx),%edx
  10b730:	85 c9                	test   %ecx,%ecx
  10b732:	74 4c                	je     10b780 <__sflush_r+0x1e0>
  10b734:	83 f9 1d             	cmp    $0x1d,%ecx
  10b737:	74 05                	je     10b73e <__sflush_r+0x19e>
  10b739:	83 f9 16             	cmp    $0x16,%ecx
  10b73c:	75 a8                	jne    10b6e6 <__sflush_r+0x146>
  10b73e:	48 8b 43 18          	mov    0x18(%rbx),%rax
  10b742:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%rbx)
  10b749:	48 89 03             	mov    %rax,(%rbx)
  10b74c:	e9 09 ff ff ff       	jmp    10b65a <__sflush_r+0xba>
  10b751:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10b758:	41 8b 45 00          	mov    0x0(%r13),%eax
  10b75c:	85 c0                	test   %eax,%eax
  10b75e:	0f 84 a4 fe ff ff    	je     10b608 <__sflush_r+0x68>
  10b764:	83 f8 1d             	cmp    $0x1d,%eax
  10b767:	74 09                	je     10b772 <__sflush_r+0x1d2>
  10b769:	83 f8 16             	cmp    $0x16,%eax
  10b76c:	0f 85 70 ff ff ff    	jne    10b6e2 <__sflush_r+0x142>
  10b772:	45 89 65 00          	mov    %r12d,0x0(%r13)
  10b776:	31 c0                	xor    %eax,%eax
  10b778:	e9 05 ff ff ff       	jmp    10b682 <__sflush_r+0xe2>
  10b77d:	0f 1f 00             	nopl   (%rax)
  10b780:	48 8b 4b 18          	mov    0x18(%rbx),%rcx
  10b784:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%rbx)
  10b78b:	48 89 0b             	mov    %rcx,(%rbx)
  10b78e:	80 e6 10             	and    $0x10,%dh
  10b791:	0f 85 bc fe ff ff    	jne    10b653 <__sflush_r+0xb3>
  10b797:	e9 be fe ff ff       	jmp    10b65a <__sflush_r+0xba>
  10b79c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000010b7a0 <_fflush_r>:
  10b7a0:	55                   	push   %rbp
  10b7a1:	48 89 e5             	mov    %rsp,%rbp
  10b7a4:	41 54                	push   %r12
  10b7a6:	49 89 fc             	mov    %rdi,%r12
  10b7a9:	53                   	push   %rbx
  10b7aa:	48 89 f3             	mov    %rsi,%rbx
  10b7ad:	48 83 ec 10          	sub    $0x10,%rsp
  10b7b1:	48 85 ff             	test   %rdi,%rdi
  10b7b4:	74 07                	je     10b7bd <_fflush_r+0x1d>
  10b7b6:	8b 47 50             	mov    0x50(%rdi),%eax
  10b7b9:	85 c0                	test   %eax,%eax
  10b7bb:	74 43                	je     10b800 <_fflush_r+0x60>
  10b7bd:	0f b7 53 10          	movzwl 0x10(%rbx),%edx
  10b7c1:	31 c0                	xor    %eax,%eax
  10b7c3:	66 85 d2             	test   %dx,%dx
  10b7c6:	74 28                	je     10b7f0 <_fflush_r+0x50>
  10b7c8:	f6 83 b0 00 00 00 01 	testb  $0x1,0xb0(%rbx)
  10b7cf:	75 05                	jne    10b7d6 <_fflush_r+0x36>
  10b7d1:	80 e6 02             	and    $0x2,%dh
  10b7d4:	74 3a                	je     10b810 <_fflush_r+0x70>
  10b7d6:	48 89 de             	mov    %rbx,%rsi
  10b7d9:	4c 89 e7             	mov    %r12,%rdi
  10b7dc:	e8 bf fd ff ff       	call   10b5a0 <__sflush_r>
  10b7e1:	f6 83 b0 00 00 00 01 	testb  $0x1,0xb0(%rbx)
  10b7e8:	75 06                	jne    10b7f0 <_fflush_r+0x50>
  10b7ea:	f6 43 11 02          	testb  $0x2,0x11(%rbx)
  10b7ee:	74 30                	je     10b820 <_fflush_r+0x80>
  10b7f0:	48 83 c4 10          	add    $0x10,%rsp
  10b7f4:	5b                   	pop    %rbx
  10b7f5:	41 5c                	pop    %r12
  10b7f7:	5d                   	pop    %rbp
  10b7f8:	c3                   	ret    
  10b7f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10b800:	e8 4b 00 00 00       	call   10b850 <__sinit>
  10b805:	eb b6                	jmp    10b7bd <_fflush_r+0x1d>
  10b807:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10b80e:	00 00 
  10b810:	48 8b bb a0 00 00 00 	mov    0xa0(%rbx),%rdi
  10b817:	e8 9a 65 00 00       	call   111db6 <__retarget_lock_acquire_recursive>
  10b81c:	eb b8                	jmp    10b7d6 <_fflush_r+0x36>
  10b81e:	66 90                	xchg   %ax,%ax
  10b820:	48 8b bb a0 00 00 00 	mov    0xa0(%rbx),%rdi
  10b827:	89 45 ec             	mov    %eax,-0x14(%rbp)
  10b82a:	e8 90 65 00 00       	call   111dbf <__retarget_lock_release_recursive>
  10b82f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  10b832:	48 83 c4 10          	add    $0x10,%rsp
  10b836:	5b                   	pop    %rbx
  10b837:	41 5c                	pop    %r12
  10b839:	5d                   	pop    %rbp
  10b83a:	c3                   	ret    
  10b83b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000010b840 <_cleanup_r>:
  10b840:	be a0 b7 10 00       	mov    $0x10b7a0,%esi
  10b845:	e9 86 06 00 00       	jmp    10bed0 <_fwalk_reent>
  10b84a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

000000000010b850 <__sinit>:
  10b850:	55                   	push   %rbp
  10b851:	48 89 e5             	mov    %rsp,%rbp
  10b854:	41 54                	push   %r12
  10b856:	49 89 fc             	mov    %rdi,%r12
  10b859:	bf 90 29 14 00       	mov    $0x142990,%edi
  10b85e:	53                   	push   %rbx
  10b85f:	48 83 ec 20          	sub    $0x20,%rsp
  10b863:	e8 4e 65 00 00       	call   111db6 <__retarget_lock_acquire_recursive>
  10b868:	41 8b 44 24 50       	mov    0x50(%r12),%eax
  10b86d:	85 c0                	test   %eax,%eax
  10b86f:	0f 85 ba 01 00 00    	jne    10ba2f <__sinit+0x1df>
  10b875:	b8 80 cc 10 00       	mov    $0x10cc80,%eax
  10b87a:	31 f6                	xor    %esi,%esi
  10b87c:	49 8b 5c 24 08       	mov    0x8(%r12),%rbx
  10b881:	49 c7 44 24 58 40 b8 	movq   $0x10b840,0x58(%r12)
  10b888:	10 00 
  10b88a:	66 48 0f 6e c0       	movq   %rax,%xmm0
  10b88f:	b8 20 cd 10 00       	mov    $0x10cd20,%eax
  10b894:	ba 08 00 00 00       	mov    $0x8,%edx
  10b899:	49 c7 84 24 00 02 00 	movq   $0x0,0x200(%r12)
  10b8a0:	00 00 00 00 00 
  10b8a5:	66 48 0f 6e c8       	movq   %rax,%xmm1
  10b8aa:	49 8d 84 24 18 02 00 	lea    0x218(%r12),%rax
  10b8b1:	00 
  10b8b2:	41 c7 84 24 08 02 00 	movl   $0x3,0x208(%r12)
  10b8b9:	00 03 00 00 00 
  10b8be:	0f 16 05 93 26 01 00 	movhps 0x12693(%rip),%xmm0        # 11df58 <_ZTVN10__cxxabiv117__class_type_infoE+0x6f8>
  10b8c5:	49 89 84 24 10 02 00 	mov    %rax,0x210(%r12)
  10b8cc:	00 
  10b8cd:	8b 05 71 27 01 00    	mov    0x12771(%rip),%eax        # 11e044 <_ZN6tflite19kPoolingInputTensorE+0x4>
  10b8d3:	0f 16 0d 86 26 01 00 	movhps 0x12686(%rip),%xmm1        # 11df60 <_ZTVN10__cxxabiv117__class_type_infoE+0x700>
  10b8da:	48 8d bb a8 00 00 00 	lea    0xa8(%rbx),%rdi
  10b8e1:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  10b8e8:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  10b8ef:	00 
  10b8f0:	c7 83 b0 00 00 00 00 	movl   $0x0,0xb0(%rbx)
  10b8f7:	00 00 00 
  10b8fa:	89 43 10             	mov    %eax,0x10(%rbx)
  10b8fd:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  10b904:	00 
  10b905:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%rbx)
  10b90c:	c7 43 28 00 00 00 00 	movl   $0x0,0x28(%rbx)
  10b913:	0f 29 45 e0          	movaps %xmm0,-0x20(%rbp)
  10b917:	0f 29 4d d0          	movaps %xmm1,-0x30(%rbp)
  10b91b:	e8 10 48 ff ff       	call   100130 <memset>
  10b920:	66 0f 6f 45 e0       	movdqa -0x20(%rbp),%xmm0
  10b925:	48 89 5b 30          	mov    %rbx,0x30(%rbx)
  10b929:	48 8d bb a0 00 00 00 	lea    0xa0(%rbx),%rdi
  10b930:	66 0f 6f 4d d0       	movdqa -0x30(%rbp),%xmm1
  10b935:	0f 11 43 38          	movups %xmm0,0x38(%rbx)
  10b939:	0f 11 4b 48          	movups %xmm1,0x48(%rbx)
  10b93d:	e8 4e 64 00 00       	call   111d90 <__retarget_lock_init_recursive>
  10b942:	49 8b 5c 24 10       	mov    0x10(%r12),%rbx
  10b947:	8b 05 fb 26 01 00    	mov    0x126fb(%rip),%eax        # 11e048 <_ZN6tflite19kPoolingInputTensorE+0x8>
  10b94d:	31 f6                	xor    %esi,%esi
  10b94f:	ba 08 00 00 00       	mov    $0x8,%edx
  10b954:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  10b95b:	48 8d bb a8 00 00 00 	lea    0xa8(%rbx),%rdi
  10b962:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  10b969:	00 
  10b96a:	c7 83 b0 00 00 00 00 	movl   $0x0,0xb0(%rbx)
  10b971:	00 00 00 
  10b974:	89 43 10             	mov    %eax,0x10(%rbx)
  10b977:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  10b97e:	00 
  10b97f:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%rbx)
  10b986:	c7 43 28 00 00 00 00 	movl   $0x0,0x28(%rbx)
  10b98d:	e8 9e 47 ff ff       	call   100130 <memset>
  10b992:	66 0f 6f 45 e0       	movdqa -0x20(%rbp),%xmm0
  10b997:	48 89 5b 30          	mov    %rbx,0x30(%rbx)
  10b99b:	48 8d bb a0 00 00 00 	lea    0xa0(%rbx),%rdi
  10b9a2:	66 0f 6f 4d d0       	movdqa -0x30(%rbp),%xmm1
  10b9a7:	0f 11 43 38          	movups %xmm0,0x38(%rbx)
  10b9ab:	0f 11 4b 48          	movups %xmm1,0x48(%rbx)
  10b9af:	e8 dc 63 00 00       	call   111d90 <__retarget_lock_init_recursive>
  10b9b4:	49 8b 5c 24 18       	mov    0x18(%r12),%rbx
  10b9b9:	8b 05 8d 26 01 00    	mov    0x1268d(%rip),%eax        # 11e04c <_ZN6tflite19kPoolingInputTensorE+0xc>
  10b9bf:	31 f6                	xor    %esi,%esi
  10b9c1:	ba 08 00 00 00       	mov    $0x8,%edx
  10b9c6:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
  10b9cd:	48 8d bb a8 00 00 00 	lea    0xa8(%rbx),%rdi
  10b9d4:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  10b9db:	00 
  10b9dc:	c7 83 b0 00 00 00 00 	movl   $0x0,0xb0(%rbx)
  10b9e3:	00 00 00 
  10b9e6:	89 43 10             	mov    %eax,0x10(%rbx)
  10b9e9:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
  10b9f0:	00 
  10b9f1:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%rbx)
  10b9f8:	c7 43 28 00 00 00 00 	movl   $0x0,0x28(%rbx)
  10b9ff:	e8 2c 47 ff ff       	call   100130 <memset>
  10ba04:	66 0f 6f 45 e0       	movdqa -0x20(%rbp),%xmm0
  10ba09:	48 89 5b 30          	mov    %rbx,0x30(%rbx)
  10ba0d:	48 8d bb a0 00 00 00 	lea    0xa0(%rbx),%rdi
  10ba14:	66 0f 6f 4d d0       	movdqa -0x30(%rbp),%xmm1
  10ba19:	0f 11 43 38          	movups %xmm0,0x38(%rbx)
  10ba1d:	0f 11 4b 48          	movups %xmm1,0x48(%rbx)
  10ba21:	e8 6a 63 00 00       	call   111d90 <__retarget_lock_init_recursive>
  10ba26:	41 c7 44 24 50 01 00 	movl   $0x1,0x50(%r12)
  10ba2d:	00 00 
  10ba2f:	48 83 c4 20          	add    $0x20,%rsp
  10ba33:	bf 90 29 14 00       	mov    $0x142990,%edi
  10ba38:	5b                   	pop    %rbx
  10ba39:	41 5c                	pop    %r12
  10ba3b:	5d                   	pop    %rbp
  10ba3c:	e9 7e 63 00 00       	jmp    111dbf <__retarget_lock_release_recursive>
  10ba41:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10ba48:	00 00 00 
  10ba4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000010ba50 <_malloc_trim_r>:
  10ba50:	55                   	push   %rbp
  10ba51:	48 89 e5             	mov    %rsp,%rbp
  10ba54:	41 55                	push   %r13
  10ba56:	49 89 f5             	mov    %rsi,%r13
  10ba59:	41 54                	push   %r12
  10ba5b:	53                   	push   %rbx
  10ba5c:	48 89 fb             	mov    %rdi,%rbx
  10ba5f:	48 83 ec 08          	sub    $0x8,%rsp
  10ba63:	e8 28 85 ff ff       	call   103f90 <__malloc_lock>
  10ba68:	48 8b 05 c1 64 03 00 	mov    0x364c1(%rip),%rax        # 141f30 <__malloc_av_+0x10>
  10ba6f:	4c 8b 60 08          	mov    0x8(%rax),%r12
  10ba73:	49 83 e4 fc          	and    $0xfffffffffffffffc,%r12
  10ba77:	49 8d 84 24 df 0f 00 	lea    0xfdf(%r12),%rax
  10ba7e:	00 
  10ba7f:	4c 29 e8             	sub    %r13,%rax
  10ba82:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  10ba88:	4c 8d a8 00 f0 ff ff 	lea    -0x1000(%rax),%r13
  10ba8f:	49 81 fd ff 0f 00 00 	cmp    $0xfff,%r13
  10ba96:	7e 1c                	jle    10bab4 <_malloc_trim_r+0x64>
  10ba98:	31 f6                	xor    %esi,%esi
  10ba9a:	48 89 df             	mov    %rbx,%rdi
  10ba9d:	e8 2e 8c ff ff       	call   1046d0 <_sbrk_r>
  10baa2:	48 89 c2             	mov    %rax,%rdx
  10baa5:	48 8b 05 84 64 03 00 	mov    0x36484(%rip),%rax        # 141f30 <__malloc_av_+0x10>
  10baac:	4c 01 e0             	add    %r12,%rax
  10baaf:	48 39 c2             	cmp    %rax,%rdx
  10bab2:	74 1c                	je     10bad0 <_malloc_trim_r+0x80>
  10bab4:	48 89 df             	mov    %rbx,%rdi
  10bab7:	e8 e4 84 ff ff       	call   103fa0 <__malloc_unlock>
  10babc:	48 83 c4 08          	add    $0x8,%rsp
  10bac0:	31 c0                	xor    %eax,%eax
  10bac2:	5b                   	pop    %rbx
  10bac3:	41 5c                	pop    %r12
  10bac5:	41 5d                	pop    %r13
  10bac7:	5d                   	pop    %rbp
  10bac8:	c3                   	ret    
  10bac9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10bad0:	4c 89 ee             	mov    %r13,%rsi
  10bad3:	48 89 df             	mov    %rbx,%rdi
  10bad6:	48 f7 de             	neg    %rsi
  10bad9:	e8 f2 8b ff ff       	call   1046d0 <_sbrk_r>
  10bade:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  10bae2:	74 34                	je     10bb18 <_malloc_trim_r+0xc8>
  10bae4:	48 8b 05 45 64 03 00 	mov    0x36445(%rip),%rax        # 141f30 <__malloc_av_+0x10>
  10baeb:	4d 29 ec             	sub    %r13,%r12
  10baee:	48 89 df             	mov    %rbx,%rdi
  10baf1:	44 29 2d e8 a5 01 00 	sub    %r13d,0x1a5e8(%rip)        # 1260e0 <__malloc_current_mallinfo>
  10baf8:	49 83 cc 01          	or     $0x1,%r12
  10bafc:	4c 89 60 08          	mov    %r12,0x8(%rax)
  10bb00:	e8 9b 84 ff ff       	call   103fa0 <__malloc_unlock>
  10bb05:	48 83 c4 08          	add    $0x8,%rsp
  10bb09:	b8 01 00 00 00       	mov    $0x1,%eax
  10bb0e:	5b                   	pop    %rbx
  10bb0f:	41 5c                	pop    %r12
  10bb11:	41 5d                	pop    %r13
  10bb13:	5d                   	pop    %rbp
  10bb14:	c3                   	ret    
  10bb15:	0f 1f 00             	nopl   (%rax)
  10bb18:	31 f6                	xor    %esi,%esi
  10bb1a:	48 89 df             	mov    %rbx,%rdi
  10bb1d:	e8 ae 8b ff ff       	call   1046d0 <_sbrk_r>
  10bb22:	48 8b 0d 07 64 03 00 	mov    0x36407(%rip),%rcx        # 141f30 <__malloc_av_+0x10>
  10bb29:	48 89 c2             	mov    %rax,%rdx
  10bb2c:	48 29 ca             	sub    %rcx,%rdx
  10bb2f:	48 83 fa 1f          	cmp    $0x1f,%rdx
  10bb33:	0f 8e 7b ff ff ff    	jle    10bab4 <_malloc_trim_r+0x64>
  10bb39:	48 2b 05 10 6e 03 00 	sub    0x36e10(%rip),%rax        # 142950 <__malloc_sbrk_base>
  10bb40:	48 83 ca 01          	or     $0x1,%rdx
  10bb44:	89 05 96 a5 01 00    	mov    %eax,0x1a596(%rip)        # 1260e0 <__malloc_current_mallinfo>
  10bb4a:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  10bb4e:	e9 61 ff ff ff       	jmp    10bab4 <_malloc_trim_r+0x64>
  10bb53:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10bb5a:	00 00 00 
  10bb5d:	0f 1f 00             	nopl   (%rax)

000000000010bb60 <_free_r>:
  10bb60:	48 85 f6             	test   %rsi,%rsi
  10bb63:	0f 84 97 01 00 00    	je     10bd00 <_free_r+0x1a0>
  10bb69:	55                   	push   %rbp
  10bb6a:	48 89 e5             	mov    %rsp,%rbp
  10bb6d:	41 54                	push   %r12
  10bb6f:	49 89 fc             	mov    %rdi,%r12
  10bb72:	53                   	push   %rbx
  10bb73:	48 89 f3             	mov    %rsi,%rbx
  10bb76:	e8 15 84 ff ff       	call   103f90 <__malloc_lock>
  10bb7b:	48 8b 7b f8          	mov    -0x8(%rbx),%rdi
  10bb7f:	48 8d 73 f0          	lea    -0x10(%rbx),%rsi
  10bb83:	48 89 f8             	mov    %rdi,%rax
  10bb86:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  10bb8a:	48 8d 0c 06          	lea    (%rsi,%rax,1),%rcx
  10bb8e:	48 8b 51 08          	mov    0x8(%rcx),%rdx
  10bb92:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  10bb96:	48 39 0d 93 63 03 00 	cmp    %rcx,0x36393(%rip)        # 141f30 <__malloc_av_+0x10>
  10bb9d:	0f 84 cd 01 00 00    	je     10bd70 <_free_r+0x210>
  10bba3:	83 e7 01             	and    $0x1,%edi
  10bba6:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  10bbaa:	4c 8d 04 11          	lea    (%rcx,%rdx,1),%r8
  10bbae:	0f 85 ac 00 00 00    	jne    10bc60 <_free_r+0x100>
  10bbb4:	48 8b 7b f0          	mov    -0x10(%rbx),%rdi
  10bbb8:	48 29 fe             	sub    %rdi,%rsi
  10bbbb:	48 01 f8             	add    %rdi,%rax
  10bbbe:	49 8b 78 08          	mov    0x8(%r8),%rdi
  10bbc2:	4c 8b 4e 10          	mov    0x10(%rsi),%r9
  10bbc6:	83 e7 01             	and    $0x1,%edi
  10bbc9:	49 81 f9 30 1f 14 00 	cmp    $0x141f30,%r9
  10bbd0:	0f 84 6a 01 00 00    	je     10bd40 <_free_r+0x1e0>
  10bbd6:	4c 8b 46 18          	mov    0x18(%rsi),%r8
  10bbda:	4d 89 41 18          	mov    %r8,0x18(%r9)
  10bbde:	4d 89 48 10          	mov    %r9,0x10(%r8)
  10bbe2:	48 85 ff             	test   %rdi,%rdi
  10bbe5:	0f 84 1d 01 00 00    	je     10bd08 <_free_r+0x1a8>
  10bbeb:	48 89 c2             	mov    %rax,%rdx
  10bbee:	48 83 ca 01          	or     $0x1,%rdx
  10bbf2:	48 89 56 08          	mov    %rdx,0x8(%rsi)
  10bbf6:	48 89 01             	mov    %rax,(%rcx)
  10bbf9:	48 3d ff 01 00 00    	cmp    $0x1ff,%rax
  10bbff:	0f 87 7c 00 00 00    	ja     10bc81 <_free_r+0x121>
  10bc05:	48 c1 e8 03          	shr    $0x3,%rax
  10bc09:	ba 01 00 00 00       	mov    $0x1,%edx
  10bc0e:	89 c1                	mov    %eax,%ecx
  10bc10:	8d 44 00 02          	lea    0x2(%rax,%rax,1),%eax
  10bc14:	48 98                	cltq   
  10bc16:	c1 f9 02             	sar    $0x2,%ecx
  10bc19:	48 d3 e2             	shl    %cl,%rdx
  10bc1c:	48 09 15 05 63 03 00 	or     %rdx,0x36305(%rip)        # 141f28 <__malloc_av_+0x8>
  10bc23:	48 8b 14 c5 20 1f 14 	mov    0x141f20(,%rax,8),%rdx
  10bc2a:	00 
  10bc2b:	48 8d 0c c5 10 1f 14 	lea    0x141f10(,%rax,8),%rcx
  10bc32:	00 
  10bc33:	66 48 0f 6e c9       	movq   %rcx,%xmm1
  10bc38:	66 48 0f 6e c2       	movq   %rdx,%xmm0
  10bc3d:	66 0f 6c c1          	punpcklqdq %xmm1,%xmm0
  10bc41:	0f 11 46 10          	movups %xmm0,0x10(%rsi)
  10bc45:	48 89 34 c5 20 1f 14 	mov    %rsi,0x141f20(,%rax,8)
  10bc4c:	00 
  10bc4d:	48 89 72 18          	mov    %rsi,0x18(%rdx)
  10bc51:	5b                   	pop    %rbx
  10bc52:	4c 89 e7             	mov    %r12,%rdi
  10bc55:	41 5c                	pop    %r12
  10bc57:	5d                   	pop    %rbp
  10bc58:	e9 43 83 ff ff       	jmp    103fa0 <__malloc_unlock>
  10bc5d:	0f 1f 00             	nopl   (%rax)
  10bc60:	41 f6 40 08 01       	testb  $0x1,0x8(%r8)
  10bc65:	0f 84 9d 00 00 00    	je     10bd08 <_free_r+0x1a8>
  10bc6b:	48 89 c2             	mov    %rax,%rdx
  10bc6e:	48 83 ca 01          	or     $0x1,%rdx
  10bc72:	48 89 53 f8          	mov    %rdx,-0x8(%rbx)
  10bc76:	48 89 01             	mov    %rax,(%rcx)
  10bc79:	48 3d ff 01 00 00    	cmp    $0x1ff,%rax
  10bc7f:	76 84                	jbe    10bc05 <_free_r+0xa5>
  10bc81:	48 89 c2             	mov    %rax,%rdx
  10bc84:	48 c1 ea 09          	shr    $0x9,%rdx
  10bc88:	48 3d ff 09 00 00    	cmp    $0x9ff,%rax
  10bc8e:	0f 87 34 01 00 00    	ja     10bdc8 <_free_r+0x268>
  10bc94:	48 89 c2             	mov    %rax,%rdx
  10bc97:	48 c1 ea 06          	shr    $0x6,%rdx
  10bc9b:	8d 4a 38             	lea    0x38(%rdx),%ecx
  10bc9e:	8d 54 12 72          	lea    0x72(%rdx,%rdx,1),%edx
  10bca2:	48 63 d2             	movslq %edx,%rdx
  10bca5:	48 c1 e2 03          	shl    $0x3,%rdx
  10bca9:	48 8d ba 10 1f 14 00 	lea    0x141f10(%rdx),%rdi
  10bcb0:	48 8b 92 20 1f 14 00 	mov    0x141f20(%rdx),%rdx
  10bcb7:	48 39 d7             	cmp    %rdx,%rdi
  10bcba:	75 15                	jne    10bcd1 <_free_r+0x171>
  10bcbc:	e9 87 01 00 00       	jmp    10be48 <_free_r+0x2e8>
  10bcc1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10bcc8:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  10bccc:	48 39 d7             	cmp    %rdx,%rdi
  10bccf:	74 0d                	je     10bcde <_free_r+0x17e>
  10bcd1:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  10bcd5:	48 83 e1 fc          	and    $0xfffffffffffffffc,%rcx
  10bcd9:	48 39 c8             	cmp    %rcx,%rax
  10bcdc:	72 ea                	jb     10bcc8 <_free_r+0x168>
  10bcde:	48 8b 7a 18          	mov    0x18(%rdx),%rdi
  10bce2:	48 89 7e 18          	mov    %rdi,0x18(%rsi)
  10bce6:	48 89 56 10          	mov    %rdx,0x10(%rsi)
  10bcea:	48 89 77 10          	mov    %rsi,0x10(%rdi)
  10bcee:	4c 89 e7             	mov    %r12,%rdi
  10bcf1:	48 89 72 18          	mov    %rsi,0x18(%rdx)
  10bcf5:	5b                   	pop    %rbx
  10bcf6:	41 5c                	pop    %r12
  10bcf8:	5d                   	pop    %rbp
  10bcf9:	e9 a2 82 ff ff       	jmp    103fa0 <__malloc_unlock>
  10bcfe:	66 90                	xchg   %ax,%ax
  10bd00:	c3                   	ret    
  10bd01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10bd08:	48 01 d0             	add    %rdx,%rax
  10bd0b:	48 8b 51 10          	mov    0x10(%rcx),%rdx
  10bd0f:	48 81 fa 30 1f 14 00 	cmp    $0x141f30,%rdx
  10bd16:	0f 84 f4 00 00 00    	je     10be10 <_free_r+0x2b0>
  10bd1c:	48 8b 49 18          	mov    0x18(%rcx),%rcx
  10bd20:	48 89 4a 18          	mov    %rcx,0x18(%rdx)
  10bd24:	48 89 51 10          	mov    %rdx,0x10(%rcx)
  10bd28:	48 89 c2             	mov    %rax,%rdx
  10bd2b:	48 83 ca 01          	or     $0x1,%rdx
  10bd2f:	48 89 56 08          	mov    %rdx,0x8(%rsi)
  10bd33:	48 89 04 06          	mov    %rax,(%rsi,%rax,1)
  10bd37:	e9 bd fe ff ff       	jmp    10bbf9 <_free_r+0x99>
  10bd3c:	0f 1f 40 00          	nopl   0x0(%rax)
  10bd40:	48 85 ff             	test   %rdi,%rdi
  10bd43:	0f 85 72 01 00 00    	jne    10bebb <_free_r+0x35b>
  10bd49:	48 8b 79 10          	mov    0x10(%rcx),%rdi
  10bd4d:	48 01 c2             	add    %rax,%rdx
  10bd50:	48 8b 41 18          	mov    0x18(%rcx),%rax
  10bd54:	48 89 47 18          	mov    %rax,0x18(%rdi)
  10bd58:	48 89 78 10          	mov    %rdi,0x10(%rax)
  10bd5c:	48 89 d0             	mov    %rdx,%rax
  10bd5f:	48 83 c8 01          	or     $0x1,%rax
  10bd63:	48 89 46 08          	mov    %rax,0x8(%rsi)
  10bd67:	48 89 14 16          	mov    %rdx,(%rsi,%rdx,1)
  10bd6b:	e9 e1 fe ff ff       	jmp    10bc51 <_free_r+0xf1>
  10bd70:	48 01 c2             	add    %rax,%rdx
  10bd73:	83 e7 01             	and    $0x1,%edi
  10bd76:	75 1a                	jne    10bd92 <_free_r+0x232>
  10bd78:	48 8b 43 f0          	mov    -0x10(%rbx),%rax
  10bd7c:	48 29 c6             	sub    %rax,%rsi
  10bd7f:	48 01 c2             	add    %rax,%rdx
  10bd82:	48 8b 4e 10          	mov    0x10(%rsi),%rcx
  10bd86:	48 8b 46 18          	mov    0x18(%rsi),%rax
  10bd8a:	48 89 41 18          	mov    %rax,0x18(%rcx)
  10bd8e:	48 89 48 10          	mov    %rcx,0x10(%rax)
  10bd92:	48 89 d0             	mov    %rdx,%rax
  10bd95:	48 83 c8 01          	or     $0x1,%rax
  10bd99:	48 3b 15 b8 6b 03 00 	cmp    0x36bb8(%rip),%rdx        # 142958 <__malloc_trim_threshold>
  10bda0:	48 89 46 08          	mov    %rax,0x8(%rsi)
  10bda4:	48 89 35 85 61 03 00 	mov    %rsi,0x36185(%rip)        # 141f30 <__malloc_av_+0x10>
  10bdab:	0f 82 a0 fe ff ff    	jb     10bc51 <_free_r+0xf1>
  10bdb1:	48 8b 35 80 a4 01 00 	mov    0x1a480(%rip),%rsi        # 126238 <__malloc_top_pad>
  10bdb8:	4c 89 e7             	mov    %r12,%rdi
  10bdbb:	e8 90 fc ff ff       	call   10ba50 <_malloc_trim_r>
  10bdc0:	e9 8c fe ff ff       	jmp    10bc51 <_free_r+0xf1>
  10bdc5:	0f 1f 00             	nopl   (%rax)
  10bdc8:	48 83 fa 14          	cmp    $0x14,%rdx
  10bdcc:	76 2a                	jbe    10bdf8 <_free_r+0x298>
  10bdce:	48 83 fa 54          	cmp    $0x54,%rdx
  10bdd2:	0f 87 88 00 00 00    	ja     10be60 <_free_r+0x300>
  10bdd8:	48 89 c2             	mov    %rax,%rdx
  10bddb:	48 c1 ea 0c          	shr    $0xc,%rdx
  10bddf:	8d 4a 6e             	lea    0x6e(%rdx),%ecx
  10bde2:	8d 94 12 de 00 00 00 	lea    0xde(%rdx,%rdx,1),%edx
  10bde9:	48 63 d2             	movslq %edx,%rdx
  10bdec:	48 c1 e2 03          	shl    $0x3,%rdx
  10bdf0:	e9 b4 fe ff ff       	jmp    10bca9 <_free_r+0x149>
  10bdf5:	0f 1f 00             	nopl   (%rax)
  10bdf8:	8d 4a 5b             	lea    0x5b(%rdx),%ecx
  10bdfb:	8d 94 12 b8 00 00 00 	lea    0xb8(%rdx,%rdx,1),%edx
  10be02:	48 63 d2             	movslq %edx,%rdx
  10be05:	48 c1 e2 03          	shl    $0x3,%rdx
  10be09:	e9 9b fe ff ff       	jmp    10bca9 <_free_r+0x149>
  10be0e:	66 90                	xchg   %ax,%ax
  10be10:	66 48 0f 6e c6       	movq   %rsi,%xmm0
  10be15:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
  10be19:	0f 11 05 20 61 03 00 	movups %xmm0,0x36120(%rip)        # 141f40 <__malloc_av_+0x20>
  10be20:	66 48 0f 6e c2       	movq   %rdx,%xmm0
  10be25:	48 89 c2             	mov    %rax,%rdx
  10be28:	66 0f 6c c0          	punpcklqdq %xmm0,%xmm0
  10be2c:	48 83 ca 01          	or     $0x1,%rdx
  10be30:	48 89 56 08          	mov    %rdx,0x8(%rsi)
  10be34:	0f 11 46 10          	movups %xmm0,0x10(%rsi)
  10be38:	48 89 04 06          	mov    %rax,(%rsi,%rax,1)
  10be3c:	e9 10 fe ff ff       	jmp    10bc51 <_free_r+0xf1>
  10be41:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10be48:	c1 f9 02             	sar    $0x2,%ecx
  10be4b:	b8 01 00 00 00       	mov    $0x1,%eax
  10be50:	48 d3 e0             	shl    %cl,%rax
  10be53:	48 09 05 ce 60 03 00 	or     %rax,0x360ce(%rip)        # 141f28 <__malloc_av_+0x8>
  10be5a:	e9 83 fe ff ff       	jmp    10bce2 <_free_r+0x182>
  10be5f:	90                   	nop
  10be60:	48 81 fa 54 01 00 00 	cmp    $0x154,%rdx
  10be67:	77 1d                	ja     10be86 <_free_r+0x326>
  10be69:	48 89 c2             	mov    %rax,%rdx
  10be6c:	48 c1 ea 0f          	shr    $0xf,%rdx
  10be70:	8d 4a 77             	lea    0x77(%rdx),%ecx
  10be73:	8d 94 12 f0 00 00 00 	lea    0xf0(%rdx,%rdx,1),%edx
  10be7a:	48 63 d2             	movslq %edx,%rdx
  10be7d:	48 c1 e2 03          	shl    $0x3,%rdx
  10be81:	e9 23 fe ff ff       	jmp    10bca9 <_free_r+0x149>
  10be86:	48 81 fa 54 05 00 00 	cmp    $0x554,%rdx
  10be8d:	77 1d                	ja     10beac <_free_r+0x34c>
  10be8f:	48 89 c2             	mov    %rax,%rdx
  10be92:	48 c1 ea 12          	shr    $0x12,%rdx
  10be96:	8d 4a 7c             	lea    0x7c(%rdx),%ecx
  10be99:	8d 94 12 fa 00 00 00 	lea    0xfa(%rdx,%rdx,1),%edx
  10bea0:	48 63 d2             	movslq %edx,%rdx
  10bea3:	48 c1 e2 03          	shl    $0x3,%rdx
  10bea7:	e9 fd fd ff ff       	jmp    10bca9 <_free_r+0x149>
  10beac:	ba f0 07 00 00       	mov    $0x7f0,%edx
  10beb1:	b9 7e 00 00 00       	mov    $0x7e,%ecx
  10beb6:	e9 ee fd ff ff       	jmp    10bca9 <_free_r+0x149>
  10bebb:	48 89 c2             	mov    %rax,%rdx
  10bebe:	48 83 ca 01          	or     $0x1,%rdx
  10bec2:	48 89 56 08          	mov    %rdx,0x8(%rsi)
  10bec6:	48 89 01             	mov    %rax,(%rcx)
  10bec9:	e9 83 fd ff ff       	jmp    10bc51 <_free_r+0xf1>
  10bece:	66 90                	xchg   %ax,%ax

000000000010bed0 <_fwalk_reent>:
  10bed0:	55                   	push   %rbp
  10bed1:	48 89 e5             	mov    %rsp,%rbp
  10bed4:	41 57                	push   %r15
  10bed6:	49 89 f7             	mov    %rsi,%r15
  10bed9:	41 56                	push   %r14
  10bedb:	41 55                	push   %r13
  10bedd:	4c 8d af 00 02 00 00 	lea    0x200(%rdi),%r13
  10bee4:	41 54                	push   %r12
  10bee6:	45 31 e4             	xor    %r12d,%r12d
  10bee9:	53                   	push   %rbx
  10beea:	48 83 ec 18          	sub    $0x18,%rsp
  10beee:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10bef2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10bef8:	41 8b 55 08          	mov    0x8(%r13),%edx
  10befc:	49 8b 5d 10          	mov    0x10(%r13),%rbx
  10bf00:	85 d2                	test   %edx,%edx
  10bf02:	7e 33                	jle    10bf37 <_fwalk_reent+0x67>
  10bf04:	48 69 d2 b8 00 00 00 	imul   $0xb8,%rdx,%rdx
  10bf0b:	4c 8d 34 13          	lea    (%rbx,%rdx,1),%r14
  10bf0f:	90                   	nop
  10bf10:	66 83 7b 10 01       	cmpw   $0x1,0x10(%rbx)
  10bf15:	76 14                	jbe    10bf2b <_fwalk_reent+0x5b>
  10bf17:	66 83 7b 12 ff       	cmpw   $0xffff,0x12(%rbx)
  10bf1c:	74 0d                	je     10bf2b <_fwalk_reent+0x5b>
  10bf1e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10bf22:	48 89 de             	mov    %rbx,%rsi
  10bf25:	41 ff d7             	call   *%r15
  10bf28:	41 09 c4             	or     %eax,%r12d
  10bf2b:	48 81 c3 b8 00 00 00 	add    $0xb8,%rbx
  10bf32:	49 39 de             	cmp    %rbx,%r14
  10bf35:	75 d9                	jne    10bf10 <_fwalk_reent+0x40>
  10bf37:	4d 8b 6d 00          	mov    0x0(%r13),%r13
  10bf3b:	4d 85 ed             	test   %r13,%r13
  10bf3e:	75 b8                	jne    10bef8 <_fwalk_reent+0x28>
  10bf40:	48 83 c4 18          	add    $0x18,%rsp
  10bf44:	44 89 e0             	mov    %r12d,%eax
  10bf47:	5b                   	pop    %rbx
  10bf48:	41 5c                	pop    %r12
  10bf4a:	41 5d                	pop    %r13
  10bf4c:	41 5e                	pop    %r14
  10bf4e:	41 5f                	pop    %r15
  10bf50:	5d                   	pop    %rbp
  10bf51:	c3                   	ret    
  10bf52:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10bf59:	00 00 00 
  10bf5c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000010bf60 <_localeconv_r>:
  10bf60:	b8 40 28 14 00       	mov    $0x142840,%eax
  10bf65:	c3                   	ret    
  10bf66:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10bf6d:	00 00 00 

000000000010bf70 <__smakebuf_r>:
  10bf70:	55                   	push   %rbp
  10bf71:	48 89 e5             	mov    %rsp,%rbp
  10bf74:	41 56                	push   %r14
  10bf76:	41 55                	push   %r13
  10bf78:	41 54                	push   %r12
  10bf7a:	53                   	push   %rbx
  10bf7b:	48 89 f3             	mov    %rsi,%rbx
  10bf7e:	48 83 ec 70          	sub    $0x70,%rsp
  10bf82:	0f b7 46 10          	movzwl 0x10(%rsi),%eax
  10bf86:	a8 02                	test   $0x2,%al
  10bf88:	74 26                	je     10bfb0 <__smakebuf_r+0x40>
  10bf8a:	48 8d 43 77          	lea    0x77(%rbx),%rax
  10bf8e:	c7 43 20 01 00 00 00 	movl   $0x1,0x20(%rbx)
  10bf95:	48 89 03             	mov    %rax,(%rbx)
  10bf98:	48 89 43 18          	mov    %rax,0x18(%rbx)
  10bf9c:	48 83 c4 70          	add    $0x70,%rsp
  10bfa0:	5b                   	pop    %rbx
  10bfa1:	41 5c                	pop    %r12
  10bfa3:	41 5d                	pop    %r13
  10bfa5:	41 5e                	pop    %r14
  10bfa7:	5d                   	pop    %rbp
  10bfa8:	c3                   	ret    
  10bfa9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10bfb0:	0f bf 76 12          	movswl 0x12(%rsi),%esi
  10bfb4:	49 89 fc             	mov    %rdi,%r12
  10bfb7:	66 85 f6             	test   %si,%si
  10bfba:	0f 88 8c 00 00 00    	js     10c04c <__smakebuf_r+0xdc>
  10bfc0:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  10bfc7:	e8 c4 0f 00 00       	call   10cf90 <_fstat_r>
  10bfcc:	85 c0                	test   %eax,%eax
  10bfce:	78 78                	js     10c048 <__smakebuf_r+0xd8>
  10bfd0:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  10bfd6:	41 be 00 04 00 00    	mov    $0x400,%r14d
  10bfdc:	45 31 ed             	xor    %r13d,%r13d
  10bfdf:	4c 89 e7             	mov    %r12,%rdi
  10bfe2:	4c 89 f6             	mov    %r14,%rsi
  10bfe5:	25 00 f0 00 00       	and    $0xf000,%eax
  10bfea:	3d 00 20 00 00       	cmp    $0x2000,%eax
  10bfef:	41 0f 94 c5          	sete   %r13b
  10bff3:	e8 a8 74 ff ff       	call   1034a0 <_malloc_r>
  10bff8:	48 85 c0             	test   %rax,%rax
  10bffb:	74 78                	je     10c075 <__smakebuf_r+0x105>
  10bffd:	49 c7 44 24 58 40 b8 	movq   $0x10b840,0x58(%r12)
  10c004:	10 00 
  10c006:	66 81 4b 10 80 00    	orw    $0x80,0x10(%rbx)
  10c00c:	48 89 03             	mov    %rax,(%rbx)
  10c00f:	48 89 43 18          	mov    %rax,0x18(%rbx)
  10c013:	44 89 73 20          	mov    %r14d,0x20(%rbx)
  10c017:	45 85 ed             	test   %r13d,%r13d
  10c01a:	74 80                	je     10bf9c <__smakebuf_r+0x2c>
  10c01c:	0f bf 73 12          	movswl 0x12(%rbx),%esi
  10c020:	4c 89 e7             	mov    %r12,%rdi
  10c023:	e8 b8 0f 00 00       	call   10cfe0 <_isatty_r>
  10c028:	85 c0                	test   %eax,%eax
  10c02a:	0f 84 6c ff ff ff    	je     10bf9c <__smakebuf_r+0x2c>
  10c030:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  10c034:	83 e0 fc             	and    $0xfffffffc,%eax
  10c037:	83 c8 01             	or     $0x1,%eax
  10c03a:	66 89 43 10          	mov    %ax,0x10(%rbx)
  10c03e:	e9 59 ff ff ff       	jmp    10bf9c <__smakebuf_r+0x2c>
  10c043:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10c048:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  10c04c:	66 25 80 00          	and    $0x80,%ax
  10c050:	45 31 ed             	xor    %r13d,%r13d
  10c053:	4c 89 e7             	mov    %r12,%rdi
  10c056:	66 83 f8 01          	cmp    $0x1,%ax
  10c05a:	4d 19 f6             	sbb    %r14,%r14
  10c05d:	41 81 e6 c0 03 00 00 	and    $0x3c0,%r14d
  10c064:	49 83 c6 40          	add    $0x40,%r14
  10c068:	4c 89 f6             	mov    %r14,%rsi
  10c06b:	e8 30 74 ff ff       	call   1034a0 <_malloc_r>
  10c070:	48 85 c0             	test   %rax,%rax
  10c073:	75 88                	jne    10bffd <__smakebuf_r+0x8d>
  10c075:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  10c079:	f6 c4 02             	test   $0x2,%ah
  10c07c:	0f 85 1a ff ff ff    	jne    10bf9c <__smakebuf_r+0x2c>
  10c082:	83 e0 fc             	and    $0xfffffffc,%eax
  10c085:	83 c8 02             	or     $0x2,%eax
  10c088:	66 89 43 10          	mov    %ax,0x10(%rbx)
  10c08c:	e9 f9 fe ff ff       	jmp    10bf8a <__smakebuf_r+0x1a>
  10c091:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10c098:	00 00 00 
  10c09b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000010c0a0 <_Balloc>:
  10c0a0:	55                   	push   %rbp
  10c0a1:	48 89 e5             	mov    %rsp,%rbp
  10c0a4:	41 55                	push   %r13
  10c0a6:	41 54                	push   %r12
  10c0a8:	41 89 f4             	mov    %esi,%r12d
  10c0ab:	48 83 ec 10          	sub    $0x10,%rsp
  10c0af:	48 8b 47 78          	mov    0x78(%rdi),%rax
  10c0b3:	48 85 c0             	test   %rax,%rax
  10c0b6:	74 28                	je     10c0e0 <_Balloc+0x40>
  10c0b8:	49 63 d4             	movslq %r12d,%rdx
  10c0bb:	48 8d 14 d0          	lea    (%rax,%rdx,8),%rdx
  10c0bf:	48 8b 02             	mov    (%rdx),%rax
  10c0c2:	48 85 c0             	test   %rax,%rax
  10c0c5:	74 41                	je     10c108 <_Balloc+0x68>
  10c0c7:	48 8b 08             	mov    (%rax),%rcx
  10c0ca:	48 89 0a             	mov    %rcx,(%rdx)
  10c0cd:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  10c0d4:	00 
  10c0d5:	48 83 c4 10          	add    $0x10,%rsp
  10c0d9:	41 5c                	pop    %r12
  10c0db:	41 5d                	pop    %r13
  10c0dd:	5d                   	pop    %rbp
  10c0de:	c3                   	ret    
  10c0df:	90                   	nop
  10c0e0:	ba 41 00 00 00       	mov    $0x41,%edx
  10c0e5:	be 08 00 00 00       	mov    $0x8,%esi
  10c0ea:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10c0ee:	e8 ad 0d 00 00       	call   10cea0 <_calloc_r>
  10c0f3:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10c0f7:	48 89 47 78          	mov    %rax,0x78(%rdi)
  10c0fb:	48 85 c0             	test   %rax,%rax
  10c0fe:	75 b8                	jne    10c0b8 <_Balloc+0x18>
  10c100:	31 c0                	xor    %eax,%eax
  10c102:	eb d1                	jmp    10c0d5 <_Balloc+0x35>
  10c104:	0f 1f 40 00          	nopl   0x0(%rax)
  10c108:	41 bd 01 00 00 00    	mov    $0x1,%r13d
  10c10e:	44 89 e1             	mov    %r12d,%ecx
  10c111:	be 01 00 00 00       	mov    $0x1,%esi
  10c116:	41 d3 e5             	shl    %cl,%r13d
  10c119:	49 63 c5             	movslq %r13d,%rax
  10c11c:	48 8d 14 85 1c 00 00 	lea    0x1c(,%rax,4),%rdx
  10c123:	00 
  10c124:	e8 77 0d 00 00       	call   10cea0 <_calloc_r>
  10c129:	48 85 c0             	test   %rax,%rax
  10c12c:	74 d2                	je     10c100 <_Balloc+0x60>
  10c12e:	44 89 60 08          	mov    %r12d,0x8(%rax)
  10c132:	44 89 68 0c          	mov    %r13d,0xc(%rax)
  10c136:	eb 95                	jmp    10c0cd <_Balloc+0x2d>
  10c138:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10c13f:	00 

000000000010c140 <_Bfree>:
  10c140:	48 85 f6             	test   %rsi,%rsi
  10c143:	74 15                	je     10c15a <_Bfree+0x1a>
  10c145:	48 63 56 08          	movslq 0x8(%rsi),%rdx
  10c149:	48 8b 47 78          	mov    0x78(%rdi),%rax
  10c14d:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
  10c151:	48 8b 10             	mov    (%rax),%rdx
  10c154:	48 89 16             	mov    %rdx,(%rsi)
  10c157:	48 89 30             	mov    %rsi,(%rax)
  10c15a:	c3                   	ret    
  10c15b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000010c160 <__multadd>:
  10c160:	55                   	push   %rbp
  10c161:	48 89 e5             	mov    %rsp,%rbp
  10c164:	41 57                	push   %r15
  10c166:	41 56                	push   %r14
  10c168:	41 55                	push   %r13
  10c16a:	41 54                	push   %r12
  10c16c:	49 89 fc             	mov    %rdi,%r12
  10c16f:	89 cf                	mov    %ecx,%edi
  10c171:	31 c9                	xor    %ecx,%ecx
  10c173:	53                   	push   %rbx
  10c174:	48 89 f3             	mov    %rsi,%rbx
  10c177:	89 d6                	mov    %edx,%esi
  10c179:	48 83 ec 08          	sub    $0x8,%rsp
  10c17d:	44 8b 6b 14          	mov    0x14(%rbx),%r13d
  10c181:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10c188:	8b 44 8b 18          	mov    0x18(%rbx,%rcx,4),%eax
  10c18c:	0f b7 d0             	movzwl %ax,%edx
  10c18f:	c1 e8 10             	shr    $0x10,%eax
  10c192:	0f af d6             	imul   %esi,%edx
  10c195:	0f af c6             	imul   %esi,%eax
  10c198:	01 fa                	add    %edi,%edx
  10c19a:	89 d7                	mov    %edx,%edi
  10c19c:	0f b7 d2             	movzwl %dx,%edx
  10c19f:	c1 ef 10             	shr    $0x10,%edi
  10c1a2:	01 f8                	add    %edi,%eax
  10c1a4:	41 89 c6             	mov    %eax,%r14d
  10c1a7:	c1 e0 10             	shl    $0x10,%eax
  10c1aa:	01 d0                	add    %edx,%eax
  10c1ac:	41 c1 ee 10          	shr    $0x10,%r14d
  10c1b0:	89 44 8b 18          	mov    %eax,0x18(%rbx,%rcx,4)
  10c1b4:	48 83 c1 01          	add    $0x1,%rcx
  10c1b8:	44 89 f7             	mov    %r14d,%edi
  10c1bb:	41 39 cd             	cmp    %ecx,%r13d
  10c1be:	7f c8                	jg     10c188 <__multadd+0x28>
  10c1c0:	45 85 f6             	test   %r14d,%r14d
  10c1c3:	74 16                	je     10c1db <__multadd+0x7b>
  10c1c5:	44 39 6b 0c          	cmp    %r13d,0xc(%rbx)
  10c1c9:	7e 25                	jle    10c1f0 <__multadd+0x90>
  10c1cb:	49 63 c5             	movslq %r13d,%rax
  10c1ce:	41 83 c5 01          	add    $0x1,%r13d
  10c1d2:	44 89 74 83 18       	mov    %r14d,0x18(%rbx,%rax,4)
  10c1d7:	44 89 6b 14          	mov    %r13d,0x14(%rbx)
  10c1db:	48 83 c4 08          	add    $0x8,%rsp
  10c1df:	48 89 d8             	mov    %rbx,%rax
  10c1e2:	5b                   	pop    %rbx
  10c1e3:	41 5c                	pop    %r12
  10c1e5:	41 5d                	pop    %r13
  10c1e7:	41 5e                	pop    %r14
  10c1e9:	41 5f                	pop    %r15
  10c1eb:	5d                   	pop    %rbp
  10c1ec:	c3                   	ret    
  10c1ed:	0f 1f 00             	nopl   (%rax)
  10c1f0:	8b 43 08             	mov    0x8(%rbx),%eax
  10c1f3:	4c 89 e7             	mov    %r12,%rdi
  10c1f6:	8d 70 01             	lea    0x1(%rax),%esi
  10c1f9:	e8 a2 fe ff ff       	call   10c0a0 <_Balloc>
  10c1fe:	49 89 c7             	mov    %rax,%r15
  10c201:	48 85 c0             	test   %rax,%rax
  10c204:	74 44                	je     10c24a <__multadd+0xea>
  10c206:	48 63 43 14          	movslq 0x14(%rbx),%rax
  10c20a:	48 8d 73 10          	lea    0x10(%rbx),%rsi
  10c20e:	49 8d 7f 10          	lea    0x10(%r15),%rdi
  10c212:	48 8d 14 85 08 00 00 	lea    0x8(,%rax,4),%rdx
  10c219:	00 
  10c21a:	e8 e1 3d ff ff       	call   100000 <__rom_region_start>
  10c21f:	48 63 53 08          	movslq 0x8(%rbx),%rdx
  10c223:	49 8b 44 24 78       	mov    0x78(%r12),%rax
  10c228:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
  10c22c:	48 8b 10             	mov    (%rax),%rdx
  10c22f:	48 89 13             	mov    %rdx,(%rbx)
  10c232:	48 89 18             	mov    %rbx,(%rax)
  10c235:	4c 89 fb             	mov    %r15,%rbx
  10c238:	49 63 c5             	movslq %r13d,%rax
  10c23b:	41 83 c5 01          	add    $0x1,%r13d
  10c23f:	44 89 74 83 18       	mov    %r14d,0x18(%rbx,%rax,4)
  10c244:	44 89 6b 14          	mov    %r13d,0x14(%rbx)
  10c248:	eb 91                	jmp    10c1db <__multadd+0x7b>
  10c24a:	b9 8a 03 12 00       	mov    $0x12038a,%ecx
  10c24f:	31 d2                	xor    %edx,%edx
  10c251:	be b5 00 00 00       	mov    $0xb5,%esi
  10c256:	bf 68 df 11 00       	mov    $0x11df68,%edi
  10c25b:	e8 10 6b ff ff       	call   102d70 <__assert_func>

000000000010c260 <__hi0bits>:
  10c260:	31 c0                	xor    %eax,%eax
  10c262:	81 ff ff ff 00 00    	cmp    $0xffff,%edi
  10c268:	77 08                	ja     10c272 <__hi0bits+0x12>
  10c26a:	c1 e7 10             	shl    $0x10,%edi
  10c26d:	b8 10 00 00 00       	mov    $0x10,%eax
  10c272:	81 ff ff ff ff 00    	cmp    $0xffffff,%edi
  10c278:	77 06                	ja     10c280 <__hi0bits+0x20>
  10c27a:	83 c0 08             	add    $0x8,%eax
  10c27d:	c1 e7 08             	shl    $0x8,%edi
  10c280:	81 ff ff ff ff 0f    	cmp    $0xfffffff,%edi
  10c286:	77 06                	ja     10c28e <__hi0bits+0x2e>
  10c288:	83 c0 04             	add    $0x4,%eax
  10c28b:	c1 e7 04             	shl    $0x4,%edi
  10c28e:	81 ff ff ff ff 3f    	cmp    $0x3fffffff,%edi
  10c294:	76 0a                	jbe    10c2a0 <__hi0bits+0x40>
  10c296:	81 ff 00 00 00 80    	cmp    $0x80000000,%edi
  10c29c:	83 d0 00             	adc    $0x0,%eax
  10c29f:	c3                   	ret    
  10c2a0:	c1 e7 02             	shl    $0x2,%edi
  10c2a3:	78 1b                	js     10c2c0 <__hi0bits+0x60>
  10c2a5:	83 c0 03             	add    $0x3,%eax
  10c2a8:	ba 20 00 00 00       	mov    $0x20,%edx
  10c2ad:	81 e7 00 00 00 40    	and    $0x40000000,%edi
  10c2b3:	0f 44 c2             	cmove  %edx,%eax
  10c2b6:	c3                   	ret    
  10c2b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10c2be:	00 00 
  10c2c0:	83 c0 02             	add    $0x2,%eax
  10c2c3:	c3                   	ret    
  10c2c4:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10c2cb:	00 00 00 
  10c2ce:	66 90                	xchg   %ax,%ax

000000000010c2d0 <__lo0bits>:
  10c2d0:	8b 07                	mov    (%rdi),%eax
  10c2d2:	31 d2                	xor    %edx,%edx
  10c2d4:	a8 07                	test   $0x7,%al
  10c2d6:	74 18                	je     10c2f0 <__lo0bits+0x20>
  10c2d8:	a8 01                	test   $0x1,%al
  10c2da:	75 0d                	jne    10c2e9 <__lo0bits+0x19>
  10c2dc:	a8 02                	test   $0x2,%al
  10c2de:	74 60                	je     10c340 <__lo0bits+0x70>
  10c2e0:	d1 e8                	shr    %eax
  10c2e2:	ba 01 00 00 00       	mov    $0x1,%edx
  10c2e7:	89 07                	mov    %eax,(%rdi)
  10c2e9:	89 d0                	mov    %edx,%eax
  10c2eb:	c3                   	ret    
  10c2ec:	0f 1f 40 00          	nopl   0x0(%rax)
  10c2f0:	66 85 c0             	test   %ax,%ax
  10c2f3:	75 08                	jne    10c2fd <__lo0bits+0x2d>
  10c2f5:	c1 e8 10             	shr    $0x10,%eax
  10c2f8:	ba 10 00 00 00       	mov    $0x10,%edx
  10c2fd:	84 c0                	test   %al,%al
  10c2ff:	75 06                	jne    10c307 <__lo0bits+0x37>
  10c301:	83 c2 08             	add    $0x8,%edx
  10c304:	c1 e8 08             	shr    $0x8,%eax
  10c307:	a8 0f                	test   $0xf,%al
  10c309:	75 06                	jne    10c311 <__lo0bits+0x41>
  10c30b:	83 c2 04             	add    $0x4,%edx
  10c30e:	c1 e8 04             	shr    $0x4,%eax
  10c311:	a8 03                	test   $0x3,%al
  10c313:	75 06                	jne    10c31b <__lo0bits+0x4b>
  10c315:	83 c2 02             	add    $0x2,%edx
  10c318:	c1 e8 02             	shr    $0x2,%eax
  10c31b:	a8 01                	test   $0x1,%al
  10c31d:	75 07                	jne    10c326 <__lo0bits+0x56>
  10c31f:	83 c2 01             	add    $0x1,%edx
  10c322:	d1 e8                	shr    %eax
  10c324:	74 0a                	je     10c330 <__lo0bits+0x60>
  10c326:	89 07                	mov    %eax,(%rdi)
  10c328:	89 d0                	mov    %edx,%eax
  10c32a:	c3                   	ret    
  10c32b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10c330:	ba 20 00 00 00       	mov    $0x20,%edx
  10c335:	eb b2                	jmp    10c2e9 <__lo0bits+0x19>
  10c337:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10c33e:	00 00 
  10c340:	c1 e8 02             	shr    $0x2,%eax
  10c343:	ba 02 00 00 00       	mov    $0x2,%edx
  10c348:	89 07                	mov    %eax,(%rdi)
  10c34a:	89 d0                	mov    %edx,%eax
  10c34c:	c3                   	ret    
  10c34d:	0f 1f 00             	nopl   (%rax)

000000000010c350 <__i2b>:
  10c350:	55                   	push   %rbp
  10c351:	48 89 e5             	mov    %rsp,%rbp
  10c354:	41 54                	push   %r12
  10c356:	41 89 f4             	mov    %esi,%r12d
  10c359:	48 83 ec 18          	sub    $0x18,%rsp
  10c35d:	48 8b 57 78          	mov    0x78(%rdi),%rdx
  10c361:	48 85 d2             	test   %rdx,%rdx
  10c364:	74 2a                	je     10c390 <__i2b+0x40>
  10c366:	48 8b 42 08          	mov    0x8(%rdx),%rax
  10c36a:	48 85 c0             	test   %rax,%rax
  10c36d:	74 61                	je     10c3d0 <__i2b+0x80>
  10c36f:	48 8b 08             	mov    (%rax),%rcx
  10c372:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  10c376:	48 8b 15 63 1c 01 00 	mov    0x11c63(%rip),%rdx        # 11dfe0 <p05.0+0x18>
  10c37d:	44 89 60 18          	mov    %r12d,0x18(%rax)
  10c381:	4c 8b 65 f8          	mov    -0x8(%rbp),%r12
  10c385:	48 89 50 10          	mov    %rdx,0x10(%rax)
  10c389:	c9                   	leave  
  10c38a:	c3                   	ret    
  10c38b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10c390:	ba 41 00 00 00       	mov    $0x41,%edx
  10c395:	be 08 00 00 00       	mov    $0x8,%esi
  10c39a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10c39e:	e8 fd 0a 00 00       	call   10cea0 <_calloc_r>
  10c3a3:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  10c3a7:	48 89 c2             	mov    %rax,%rdx
  10c3aa:	48 89 47 78          	mov    %rax,0x78(%rdi)
  10c3ae:	48 85 c0             	test   %rax,%rax
  10c3b1:	75 b3                	jne    10c366 <__i2b+0x16>
  10c3b3:	b9 8a 03 12 00       	mov    $0x12038a,%ecx
  10c3b8:	31 d2                	xor    %edx,%edx
  10c3ba:	be 40 01 00 00       	mov    $0x140,%esi
  10c3bf:	bf 68 df 11 00       	mov    $0x11df68,%edi
  10c3c4:	e8 a7 69 ff ff       	call   102d70 <__assert_func>
  10c3c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10c3d0:	ba 24 00 00 00       	mov    $0x24,%edx
  10c3d5:	be 01 00 00 00       	mov    $0x1,%esi
  10c3da:	e8 c1 0a 00 00       	call   10cea0 <_calloc_r>
  10c3df:	48 85 c0             	test   %rax,%rax
  10c3e2:	74 cf                	je     10c3b3 <__i2b+0x63>
  10c3e4:	48 8b 15 ed 1b 01 00 	mov    0x11bed(%rip),%rdx        # 11dfd8 <p05.0+0x10>
  10c3eb:	48 89 50 08          	mov    %rdx,0x8(%rax)
  10c3ef:	eb 85                	jmp    10c376 <__i2b+0x26>
  10c3f1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10c3f8:	00 00 00 
  10c3fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000010c400 <__multiply>:
  10c400:	55                   	push   %rbp
  10c401:	49 89 f2             	mov    %rsi,%r10
  10c404:	48 89 e5             	mov    %rsp,%rbp
  10c407:	41 57                	push   %r15
  10c409:	49 89 d7             	mov    %rdx,%r15
  10c40c:	41 56                	push   %r14
  10c40e:	41 55                	push   %r13
  10c410:	41 54                	push   %r12
  10c412:	53                   	push   %rbx
  10c413:	48 83 ec 28          	sub    $0x28,%rsp
  10c417:	4c 63 6e 14          	movslq 0x14(%rsi),%r13
  10c41b:	8b 4a 14             	mov    0x14(%rdx),%ecx
  10c41e:	41 39 cd             	cmp    %ecx,%r13d
  10c421:	7c 0e                	jl     10c431 <__multiply+0x31>
  10c423:	89 c8                	mov    %ecx,%eax
  10c425:	49 89 f7             	mov    %rsi,%r15
  10c428:	44 89 e9             	mov    %r13d,%ecx
  10c42b:	49 89 d2             	mov    %rdx,%r10
  10c42e:	4c 63 e8             	movslq %eax,%r13
  10c431:	41 8b 77 08          	mov    0x8(%r15),%esi
  10c435:	42 8d 1c 29          	lea    (%rcx,%r13,1),%ebx
  10c439:	41 39 5f 0c          	cmp    %ebx,0xc(%r15)
  10c43d:	7d 03                	jge    10c442 <__multiply+0x42>
  10c43f:	83 c6 01             	add    $0x1,%esi
  10c442:	4c 89 55 c0          	mov    %r10,-0x40(%rbp)
  10c446:	89 4d c8             	mov    %ecx,-0x38(%rbp)
  10c449:	e8 52 fc ff ff       	call   10c0a0 <_Balloc>
  10c44e:	48 63 4d c8          	movslq -0x38(%rbp),%rcx
  10c452:	4c 8b 55 c0          	mov    -0x40(%rbp),%r10
  10c456:	48 85 c0             	test   %rax,%rax
  10c459:	0f 84 c3 01 00 00    	je     10c622 <__multiply+0x222>
  10c45f:	4c 8d 60 18          	lea    0x18(%rax),%r12
  10c463:	48 63 d3             	movslq %ebx,%rdx
  10c466:	49 8d 34 94          	lea    (%r12,%rdx,4),%rsi
  10c46a:	4c 89 e2             	mov    %r12,%rdx
  10c46d:	49 39 f4             	cmp    %rsi,%r12
  10c470:	73 15                	jae    10c487 <__multiply+0x87>
  10c472:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10c478:	c7 02 00 00 00 00    	movl   $0x0,(%rdx)
  10c47e:	48 83 c2 04          	add    $0x4,%rdx
  10c482:	48 39 f2             	cmp    %rsi,%rdx
  10c485:	72 f1                	jb     10c478 <__multiply+0x78>
  10c487:	49 83 c2 18          	add    $0x18,%r10
  10c48b:	4d 8d 77 18          	lea    0x18(%r15),%r14
  10c48f:	4f 8d 2c aa          	lea    (%r10,%r13,4),%r13
  10c493:	4d 8d 1c 8e          	lea    (%r14,%rcx,4),%r11
  10c497:	4d 39 ea             	cmp    %r13,%r10
  10c49a:	0f 83 55 01 00 00    	jae    10c5f5 <__multiply+0x1f5>
  10c4a0:	4c 89 da             	mov    %r11,%rdx
  10c4a3:	bf 04 00 00 00       	mov    $0x4,%edi
  10c4a8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10c4ac:	4c 29 fa             	sub    %r15,%rdx
  10c4af:	49 83 c7 19          	add    $0x19,%r15
  10c4b3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10c4b7:	48 83 ea 19          	sub    $0x19,%rdx
  10c4bb:	48 c1 ea 02          	shr    $0x2,%rdx
  10c4bf:	4d 39 fb             	cmp    %r15,%r11
  10c4c2:	41 89 df             	mov    %ebx,%r15d
  10c4c5:	48 8d 0c 95 04 00 00 	lea    0x4(,%rdx,4),%rcx
  10c4cc:	00 
  10c4cd:	48 0f 43 f9          	cmovae %rcx,%rdi
  10c4d1:	48 89 f8             	mov    %rdi,%rax
  10c4d4:	eb 27                	jmp    10c4fd <__multiply+0xfd>
  10c4d6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10c4dd:	00 00 00 
  10c4e0:	c1 ea 10             	shr    $0x10,%edx
  10c4e3:	41 89 d1             	mov    %edx,%r9d
  10c4e6:	0f 85 91 00 00 00    	jne    10c57d <__multiply+0x17d>
  10c4ec:	49 83 c2 04          	add    $0x4,%r10
  10c4f0:	49 83 c4 04          	add    $0x4,%r12
  10c4f4:	4d 39 ea             	cmp    %r13,%r10
  10c4f7:	0f 83 ed 00 00 00    	jae    10c5ea <__multiply+0x1ea>
  10c4fd:	41 8b 12             	mov    (%r10),%edx
  10c500:	41 89 d1             	mov    %edx,%r9d
  10c503:	41 81 e1 ff ff 00 00 	and    $0xffff,%r9d
  10c50a:	74 d4                	je     10c4e0 <__multiply+0xe0>
  10c50c:	4c 89 75 c8          	mov    %r14,-0x38(%rbp)
  10c510:	4d 89 e0             	mov    %r12,%r8
  10c513:	4c 89 f7             	mov    %r14,%rdi
  10c516:	31 db                	xor    %ebx,%ebx
  10c518:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10c51f:	00 
  10c520:	8b 17                	mov    (%rdi),%edx
  10c522:	41 8b 30             	mov    (%r8),%esi
  10c525:	48 83 c7 04          	add    $0x4,%rdi
  10c529:	49 83 c0 04          	add    $0x4,%r8
  10c52d:	0f b7 ca             	movzwl %dx,%ecx
  10c530:	c1 ea 10             	shr    $0x10,%edx
  10c533:	44 0f b7 f6          	movzwl %si,%r14d
  10c537:	41 0f af c9          	imul   %r9d,%ecx
  10c53b:	c1 ee 10             	shr    $0x10,%esi
  10c53e:	41 0f af d1          	imul   %r9d,%edx
  10c542:	44 01 f1             	add    %r14d,%ecx
  10c545:	01 d9                	add    %ebx,%ecx
  10c547:	01 f2                	add    %esi,%edx
  10c549:	89 ce                	mov    %ecx,%esi
  10c54b:	0f b7 c9             	movzwl %cx,%ecx
  10c54e:	c1 ee 10             	shr    $0x10,%esi
  10c551:	01 f2                	add    %esi,%edx
  10c553:	89 d3                	mov    %edx,%ebx
  10c555:	c1 e2 10             	shl    $0x10,%edx
  10c558:	09 ca                	or     %ecx,%edx
  10c55a:	c1 eb 10             	shr    $0x10,%ebx
  10c55d:	41 89 50 fc          	mov    %edx,-0x4(%r8)
  10c561:	4c 39 df             	cmp    %r11,%rdi
  10c564:	72 ba                	jb     10c520 <__multiply+0x120>
  10c566:	41 89 1c 04          	mov    %ebx,(%r12,%rax,1)
  10c56a:	41 8b 12             	mov    (%r10),%edx
  10c56d:	4c 8b 75 c8          	mov    -0x38(%rbp),%r14
  10c571:	c1 ea 10             	shr    $0x10,%edx
  10c574:	41 89 d1             	mov    %edx,%r9d
  10c577:	0f 84 6f ff ff ff    	je     10c4ec <__multiply+0xec>
  10c57d:	41 8b 34 24          	mov    (%r12),%esi
  10c581:	4c 89 e3             	mov    %r12,%rbx
  10c584:	4c 89 f7             	mov    %r14,%rdi
  10c587:	31 c9                	xor    %ecx,%ecx
  10c589:	41 89 f0             	mov    %esi,%r8d
  10c58c:	0f 1f 40 00          	nopl   0x0(%rax)
  10c590:	0f b7 17             	movzwl (%rdi),%edx
  10c593:	41 c1 e8 10          	shr    $0x10,%r8d
  10c597:	0f b7 f6             	movzwl %si,%esi
  10c59a:	48 83 c3 04          	add    $0x4,%rbx
  10c59e:	48 83 c7 04          	add    $0x4,%rdi
  10c5a2:	41 0f af d1          	imul   %r9d,%edx
  10c5a6:	01 ca                	add    %ecx,%edx
  10c5a8:	44 01 c2             	add    %r8d,%edx
  10c5ab:	44 8b 03             	mov    (%rbx),%r8d
  10c5ae:	89 d1                	mov    %edx,%ecx
  10c5b0:	c1 ea 10             	shr    $0x10,%edx
  10c5b3:	c1 e1 10             	shl    $0x10,%ecx
  10c5b6:	09 ce                	or     %ecx,%esi
  10c5b8:	41 0f b7 c8          	movzwl %r8w,%ecx
  10c5bc:	89 73 fc             	mov    %esi,-0x4(%rbx)
  10c5bf:	0f b7 77 fe          	movzwl -0x2(%rdi),%esi
  10c5c3:	41 0f af f1          	imul   %r9d,%esi
  10c5c7:	01 ce                	add    %ecx,%esi
  10c5c9:	01 d6                	add    %edx,%esi
  10c5cb:	89 f1                	mov    %esi,%ecx
  10c5cd:	c1 e9 10             	shr    $0x10,%ecx
  10c5d0:	4c 39 df             	cmp    %r11,%rdi
  10c5d3:	72 bb                	jb     10c590 <__multiply+0x190>
  10c5d5:	49 83 c2 04          	add    $0x4,%r10
  10c5d9:	41 89 34 04          	mov    %esi,(%r12,%rax,1)
  10c5dd:	49 83 c4 04          	add    $0x4,%r12
  10c5e1:	4d 39 ea             	cmp    %r13,%r10
  10c5e4:	0f 82 13 ff ff ff    	jb     10c4fd <__multiply+0xfd>
  10c5ea:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  10c5ee:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10c5f2:	44 89 fb             	mov    %r15d,%ebx
  10c5f5:	85 db                	test   %ebx,%ebx
  10c5f7:	7f 0c                	jg     10c605 <__multiply+0x205>
  10c5f9:	eb 15                	jmp    10c610 <__multiply+0x210>
  10c5fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10c600:	83 eb 01             	sub    $0x1,%ebx
  10c603:	74 0b                	je     10c610 <__multiply+0x210>
  10c605:	8b 56 fc             	mov    -0x4(%rsi),%edx
  10c608:	48 83 ee 04          	sub    $0x4,%rsi
  10c60c:	85 d2                	test   %edx,%edx
  10c60e:	74 f0                	je     10c600 <__multiply+0x200>
  10c610:	89 58 14             	mov    %ebx,0x14(%rax)
  10c613:	48 83 c4 28          	add    $0x28,%rsp
  10c617:	5b                   	pop    %rbx
  10c618:	41 5c                	pop    %r12
  10c61a:	41 5d                	pop    %r13
  10c61c:	41 5e                	pop    %r14
  10c61e:	41 5f                	pop    %r15
  10c620:	5d                   	pop    %rbp
  10c621:	c3                   	ret    
  10c622:	b9 8a 03 12 00       	mov    $0x12038a,%ecx
  10c627:	31 d2                	xor    %edx,%edx
  10c629:	be 5d 01 00 00       	mov    $0x15d,%esi
  10c62e:	bf 68 df 11 00       	mov    $0x11df68,%edi
  10c633:	e8 38 67 ff ff       	call   102d70 <__assert_func>
  10c638:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10c63f:	00 

000000000010c640 <__pow5mult>:
  10c640:	55                   	push   %rbp
  10c641:	89 d0                	mov    %edx,%eax
  10c643:	48 89 e5             	mov    %rsp,%rbp
  10c646:	41 56                	push   %r14
  10c648:	49 89 fe             	mov    %rdi,%r14
  10c64b:	41 55                	push   %r13
  10c64d:	49 89 f5             	mov    %rsi,%r13
  10c650:	41 54                	push   %r12
  10c652:	53                   	push   %rbx
  10c653:	89 d3                	mov    %edx,%ebx
  10c655:	83 e0 03             	and    $0x3,%eax
  10c658:	0f 85 92 00 00 00    	jne    10c6f0 <__pow5mult+0xb0>
  10c65e:	c1 fb 02             	sar    $0x2,%ebx
  10c661:	74 5a                	je     10c6bd <__pow5mult+0x7d>
  10c663:	4d 8b 66 70          	mov    0x70(%r14),%r12
  10c667:	4d 85 e4             	test   %r12,%r12
  10c66a:	75 1c                	jne    10c688 <__pow5mult+0x48>
  10c66c:	e9 9f 00 00 00       	jmp    10c710 <__pow5mult+0xd0>
  10c671:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10c678:	d1 fb                	sar    %ebx
  10c67a:	74 41                	je     10c6bd <__pow5mult+0x7d>
  10c67c:	49 8b 04 24          	mov    (%r12),%rax
  10c680:	48 85 c0             	test   %rax,%rax
  10c683:	74 4b                	je     10c6d0 <__pow5mult+0x90>
  10c685:	49 89 c4             	mov    %rax,%r12
  10c688:	f6 c3 01             	test   $0x1,%bl
  10c68b:	74 eb                	je     10c678 <__pow5mult+0x38>
  10c68d:	4c 89 e2             	mov    %r12,%rdx
  10c690:	4c 89 ee             	mov    %r13,%rsi
  10c693:	4c 89 f7             	mov    %r14,%rdi
  10c696:	e8 65 fd ff ff       	call   10c400 <__multiply>
  10c69b:	4d 85 ed             	test   %r13,%r13
  10c69e:	74 16                	je     10c6b6 <__pow5mult+0x76>
  10c6a0:	49 63 4d 08          	movslq 0x8(%r13),%rcx
  10c6a4:	49 8b 56 78          	mov    0x78(%r14),%rdx
  10c6a8:	48 8d 14 ca          	lea    (%rdx,%rcx,8),%rdx
  10c6ac:	48 8b 0a             	mov    (%rdx),%rcx
  10c6af:	49 89 4d 00          	mov    %rcx,0x0(%r13)
  10c6b3:	4c 89 2a             	mov    %r13,(%rdx)
  10c6b6:	d1 fb                	sar    %ebx
  10c6b8:	49 89 c5             	mov    %rax,%r13
  10c6bb:	75 bf                	jne    10c67c <__pow5mult+0x3c>
  10c6bd:	5b                   	pop    %rbx
  10c6be:	4c 89 e8             	mov    %r13,%rax
  10c6c1:	41 5c                	pop    %r12
  10c6c3:	41 5d                	pop    %r13
  10c6c5:	41 5e                	pop    %r14
  10c6c7:	5d                   	pop    %rbp
  10c6c8:	c3                   	ret    
  10c6c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10c6d0:	4c 89 e2             	mov    %r12,%rdx
  10c6d3:	4c 89 e6             	mov    %r12,%rsi
  10c6d6:	4c 89 f7             	mov    %r14,%rdi
  10c6d9:	e8 22 fd ff ff       	call   10c400 <__multiply>
  10c6de:	49 89 04 24          	mov    %rax,(%r12)
  10c6e2:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  10c6e9:	eb 9a                	jmp    10c685 <__pow5mult+0x45>
  10c6eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10c6f0:	83 e8 01             	sub    $0x1,%eax
  10c6f3:	31 c9                	xor    %ecx,%ecx
  10c6f5:	48 98                	cltq   
  10c6f7:	8b 14 85 c8 df 11 00 	mov    0x11dfc8(,%rax,4),%edx
  10c6fe:	e8 5d fa ff ff       	call   10c160 <__multadd>
  10c703:	49 89 c5             	mov    %rax,%r13
  10c706:	e9 53 ff ff ff       	jmp    10c65e <__pow5mult+0x1e>
  10c70b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10c710:	be 01 00 00 00       	mov    $0x1,%esi
  10c715:	4c 89 f7             	mov    %r14,%rdi
  10c718:	e8 83 f9 ff ff       	call   10c0a0 <_Balloc>
  10c71d:	49 89 c4             	mov    %rax,%r12
  10c720:	48 85 c0             	test   %rax,%rax
  10c723:	74 20                	je     10c745 <__pow5mult+0x105>
  10c725:	48 b8 01 00 00 00 71 	movabs $0x27100000001,%rax
  10c72c:	02 00 00 
  10c72f:	49 89 44 24 14       	mov    %rax,0x14(%r12)
  10c734:	4d 89 66 70          	mov    %r12,0x70(%r14)
  10c738:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
  10c73f:	00 
  10c740:	e9 43 ff ff ff       	jmp    10c688 <__pow5mult+0x48>
  10c745:	b9 8a 03 12 00       	mov    $0x12038a,%ecx
  10c74a:	31 d2                	xor    %edx,%edx
  10c74c:	be 40 01 00 00       	mov    $0x140,%esi
  10c751:	bf 68 df 11 00       	mov    $0x11df68,%edi
  10c756:	e8 15 66 ff ff       	call   102d70 <__assert_func>
  10c75b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000010c760 <__lshift>:
  10c760:	55                   	push   %rbp
  10c761:	48 89 e5             	mov    %rsp,%rbp
  10c764:	41 57                	push   %r15
  10c766:	41 89 d7             	mov    %edx,%r15d
  10c769:	c1 fa 05             	sar    $0x5,%edx
  10c76c:	41 56                	push   %r14
  10c76e:	41 55                	push   %r13
  10c770:	49 89 fd             	mov    %rdi,%r13
  10c773:	41 54                	push   %r12
  10c775:	53                   	push   %rbx
  10c776:	48 89 f3             	mov    %rsi,%rbx
  10c779:	48 83 ec 18          	sub    $0x18,%rsp
  10c77d:	44 8b 73 14          	mov    0x14(%rbx),%r14d
  10c781:	8b 43 0c             	mov    0xc(%rbx),%eax
  10c784:	8b 76 08             	mov    0x8(%rsi),%esi
  10c787:	41 01 d6             	add    %edx,%r14d
  10c78a:	45 8d 66 01          	lea    0x1(%r14),%r12d
  10c78e:	41 39 c4             	cmp    %eax,%r12d
  10c791:	7e 0f                	jle    10c7a2 <__lshift+0x42>
  10c793:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10c798:	01 c0                	add    %eax,%eax
  10c79a:	83 c6 01             	add    $0x1,%esi
  10c79d:	41 39 c4             	cmp    %eax,%r12d
  10c7a0:	7f f6                	jg     10c798 <__lshift+0x38>
  10c7a2:	4c 89 ef             	mov    %r13,%rdi
  10c7a5:	89 55 cc             	mov    %edx,-0x34(%rbp)
  10c7a8:	e8 f3 f8 ff ff       	call   10c0a0 <_Balloc>
  10c7ad:	8b 55 cc             	mov    -0x34(%rbp),%edx
  10c7b0:	48 85 c0             	test   %rax,%rax
  10c7b3:	49 89 c0             	mov    %rax,%r8
  10c7b6:	0f 84 ea 00 00 00    	je     10c8a6 <__lshift+0x146>
  10c7bc:	48 8d 78 18          	lea    0x18(%rax),%rdi
  10c7c0:	85 d2                	test   %edx,%edx
  10c7c2:	7e 20                	jle    10c7e4 <__lshift+0x84>
  10c7c4:	8d 42 06             	lea    0x6(%rdx),%eax
  10c7c7:	48 98                	cltq   
  10c7c9:	49 8d 0c 80          	lea    (%r8,%rax,4),%rcx
  10c7cd:	48 89 f8             	mov    %rdi,%rax
  10c7d0:	48 83 c0 04          	add    $0x4,%rax
  10c7d4:	c7 40 fc 00 00 00 00 	movl   $0x0,-0x4(%rax)
  10c7db:	48 39 c1             	cmp    %rax,%rcx
  10c7de:	75 f0                	jne    10c7d0 <__lshift+0x70>
  10c7e0:	48 8d 3c 97          	lea    (%rdi,%rdx,4),%rdi
  10c7e4:	48 63 43 14          	movslq 0x14(%rbx),%rax
  10c7e8:	48 8d 73 18          	lea    0x18(%rbx),%rsi
  10c7ec:	45 89 fa             	mov    %r15d,%r10d
  10c7ef:	4c 8d 0c 86          	lea    (%rsi,%rax,4),%r9
  10c7f3:	41 83 e2 1f          	and    $0x1f,%r10d
  10c7f7:	0f 84 9b 00 00 00    	je     10c898 <__lshift+0x138>
  10c7fd:	41 bb 20 00 00 00    	mov    $0x20,%r11d
  10c803:	48 89 fa             	mov    %rdi,%rdx
  10c806:	45 31 ff             	xor    %r15d,%r15d
  10c809:	45 29 d3             	sub    %r10d,%r11d
  10c80c:	0f 1f 40 00          	nopl   0x0(%rax)
  10c810:	8b 06                	mov    (%rsi),%eax
  10c812:	44 89 d1             	mov    %r10d,%ecx
  10c815:	48 83 c2 04          	add    $0x4,%rdx
  10c819:	48 83 c6 04          	add    $0x4,%rsi
  10c81d:	d3 e0                	shl    %cl,%eax
  10c81f:	44 89 d9             	mov    %r11d,%ecx
  10c822:	44 09 f8             	or     %r15d,%eax
  10c825:	89 42 fc             	mov    %eax,-0x4(%rdx)
  10c828:	44 8b 7e fc          	mov    -0x4(%rsi),%r15d
  10c82c:	41 d3 ef             	shr    %cl,%r15d
  10c82f:	4c 39 ce             	cmp    %r9,%rsi
  10c832:	72 dc                	jb     10c810 <__lshift+0xb0>
  10c834:	4c 89 c8             	mov    %r9,%rax
  10c837:	48 8d 53 19          	lea    0x19(%rbx),%rdx
  10c83b:	48 29 d8             	sub    %rbx,%rax
  10c83e:	48 83 e8 19          	sub    $0x19,%rax
  10c842:	48 c1 e8 02          	shr    $0x2,%rax
  10c846:	49 39 d1             	cmp    %rdx,%r9
  10c849:	ba 04 00 00 00       	mov    $0x4,%edx
  10c84e:	48 8d 04 85 04 00 00 	lea    0x4(,%rax,4),%rax
  10c855:	00 
  10c856:	48 0f 42 c2          	cmovb  %rdx,%rax
  10c85a:	44 89 3c 07          	mov    %r15d,(%rdi,%rax,1)
  10c85e:	45 85 ff             	test   %r15d,%r15d
  10c861:	75 03                	jne    10c866 <__lshift+0x106>
  10c863:	45 89 f4             	mov    %r14d,%r12d
  10c866:	48 63 53 08          	movslq 0x8(%rbx),%rdx
  10c86a:	49 8b 45 78          	mov    0x78(%r13),%rax
  10c86e:	45 89 60 14          	mov    %r12d,0x14(%r8)
  10c872:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
  10c876:	48 8b 10             	mov    (%rax),%rdx
  10c879:	48 89 13             	mov    %rdx,(%rbx)
  10c87c:	48 89 18             	mov    %rbx,(%rax)
  10c87f:	48 83 c4 18          	add    $0x18,%rsp
  10c883:	4c 89 c0             	mov    %r8,%rax
  10c886:	5b                   	pop    %rbx
  10c887:	41 5c                	pop    %r12
  10c889:	41 5d                	pop    %r13
  10c88b:	41 5e                	pop    %r14
  10c88d:	41 5f                	pop    %r15
  10c88f:	5d                   	pop    %rbp
  10c890:	c3                   	ret    
  10c891:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10c898:	a5                   	movsl  %ds:(%rsi),%es:(%rdi)
  10c899:	4c 39 ce             	cmp    %r9,%rsi
  10c89c:	73 c5                	jae    10c863 <__lshift+0x103>
  10c89e:	a5                   	movsl  %ds:(%rsi),%es:(%rdi)
  10c89f:	4c 39 ce             	cmp    %r9,%rsi
  10c8a2:	72 f4                	jb     10c898 <__lshift+0x138>
  10c8a4:	eb bd                	jmp    10c863 <__lshift+0x103>
  10c8a6:	b9 8a 03 12 00       	mov    $0x12038a,%ecx
  10c8ab:	31 d2                	xor    %edx,%edx
  10c8ad:	be d9 01 00 00       	mov    $0x1d9,%esi
  10c8b2:	bf 68 df 11 00       	mov    $0x11df68,%edi
  10c8b7:	e8 b4 64 ff ff       	call   102d70 <__assert_func>
  10c8bc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000010c8c0 <__mcmp>:
  10c8c0:	48 63 46 14          	movslq 0x14(%rsi),%rax
  10c8c4:	8b 4f 14             	mov    0x14(%rdi),%ecx
  10c8c7:	29 c1                	sub    %eax,%ecx
  10c8c9:	75 35                	jne    10c900 <__mcmp+0x40>
  10c8cb:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  10c8d2:	00 
  10c8d3:	48 83 c7 18          	add    $0x18,%rdi
  10c8d7:	48 8d 04 17          	lea    (%rdi,%rdx,1),%rax
  10c8db:	48 8d 54 16 18       	lea    0x18(%rsi,%rdx,1),%rdx
  10c8e0:	eb 0b                	jmp    10c8ed <__mcmp+0x2d>
  10c8e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10c8e8:	48 39 c7             	cmp    %rax,%rdi
  10c8eb:	73 13                	jae    10c900 <__mcmp+0x40>
  10c8ed:	48 83 e8 04          	sub    $0x4,%rax
  10c8f1:	48 83 ea 04          	sub    $0x4,%rdx
  10c8f5:	8b 32                	mov    (%rdx),%esi
  10c8f7:	39 30                	cmp    %esi,(%rax)
  10c8f9:	74 ed                	je     10c8e8 <__mcmp+0x28>
  10c8fb:	19 c9                	sbb    %ecx,%ecx
  10c8fd:	83 c9 01             	or     $0x1,%ecx
  10c900:	89 c8                	mov    %ecx,%eax
  10c902:	c3                   	ret    
  10c903:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10c90a:	00 00 00 
  10c90d:	0f 1f 00             	nopl   (%rax)

000000000010c910 <__mdiff>:
  10c910:	55                   	push   %rbp
  10c911:	48 89 e5             	mov    %rsp,%rbp
  10c914:	41 57                	push   %r15
  10c916:	41 56                	push   %r14
  10c918:	41 55                	push   %r13
  10c91a:	41 54                	push   %r12
  10c91c:	49 89 d4             	mov    %rdx,%r12
  10c91f:	53                   	push   %rbx
  10c920:	48 89 f3             	mov    %rsi,%rbx
  10c923:	48 83 ec 18          	sub    $0x18,%rsp
  10c927:	48 63 42 14          	movslq 0x14(%rdx),%rax
  10c92b:	44 8b 6e 14          	mov    0x14(%rsi),%r13d
  10c92f:	41 29 c5             	sub    %eax,%r13d
  10c932:	0f 85 80 01 00 00    	jne    10cab8 <__mdiff+0x1a8>
  10c938:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  10c93f:	00 
  10c940:	48 8d 4e 18          	lea    0x18(%rsi),%rcx
  10c944:	48 8d 04 11          	lea    (%rcx,%rdx,1),%rax
  10c948:	49 8d 54 14 18       	lea    0x18(%r12,%rdx,1),%rdx
  10c94d:	eb 0a                	jmp    10c959 <__mdiff+0x49>
  10c94f:	90                   	nop
  10c950:	48 39 c1             	cmp    %rax,%rcx
  10c953:	0f 83 87 01 00 00    	jae    10cae0 <__mdiff+0x1d0>
  10c959:	48 83 e8 04          	sub    $0x4,%rax
  10c95d:	48 83 ea 04          	sub    $0x4,%rdx
  10c961:	8b 32                	mov    (%rdx),%esi
  10c963:	39 30                	cmp    %esi,(%rax)
  10c965:	74 e9                	je     10c950 <__mdiff+0x40>
  10c967:	0f 82 57 01 00 00    	jb     10cac4 <__mdiff+0x1b4>
  10c96d:	0f 1f 00             	nopl   (%rax)
  10c970:	8b 73 08             	mov    0x8(%rbx),%esi
  10c973:	e8 28 f7 ff ff       	call   10c0a0 <_Balloc>
  10c978:	49 89 c1             	mov    %rax,%r9
  10c97b:	48 85 c0             	test   %rax,%rax
  10c97e:	0f 84 ab 01 00 00    	je     10cb2f <__mdiff+0x21f>
  10c984:	44 89 68 10          	mov    %r13d,0x10(%rax)
  10c988:	48 63 43 14          	movslq 0x14(%rbx),%rax
  10c98c:	4c 8d 73 18          	lea    0x18(%rbx),%r14
  10c990:	4d 8d 79 18          	lea    0x18(%r9),%r15
  10c994:	4c 89 75 c8          	mov    %r14,-0x38(%rbp)
  10c998:	49 8d 74 24 18       	lea    0x18(%r12),%rsi
  10c99d:	bf 18 00 00 00       	mov    $0x18,%edi
  10c9a2:	45 31 c0             	xor    %r8d,%r8d
  10c9a5:	49 89 c2             	mov    %rax,%r10
  10c9a8:	4d 8d 1c 86          	lea    (%r14,%rax,4),%r11
  10c9ac:	49 63 44 24 14       	movslq 0x14(%r12),%rax
  10c9b1:	4c 8d 2c 86          	lea    (%rsi,%rax,4),%r13
  10c9b5:	0f 1f 00             	nopl   (%rax)
  10c9b8:	8b 14 3b             	mov    (%rbx,%rdi,1),%edx
  10c9bb:	8b 0e                	mov    (%rsi),%ecx
  10c9bd:	48 83 c6 04          	add    $0x4,%rsi
  10c9c1:	0f b7 c2             	movzwl %dx,%eax
  10c9c4:	44 0f b7 f1          	movzwl %cx,%r14d
  10c9c8:	c1 ea 10             	shr    $0x10,%edx
  10c9cb:	44 29 f0             	sub    %r14d,%eax
  10c9ce:	c1 e9 10             	shr    $0x10,%ecx
  10c9d1:	44 01 c0             	add    %r8d,%eax
  10c9d4:	29 ca                	sub    %ecx,%edx
  10c9d6:	89 c1                	mov    %eax,%ecx
  10c9d8:	0f b7 c0             	movzwl %ax,%eax
  10c9db:	c1 f9 10             	sar    $0x10,%ecx
  10c9de:	01 ca                	add    %ecx,%edx
  10c9e0:	41 89 d0             	mov    %edx,%r8d
  10c9e3:	c1 e2 10             	shl    $0x10,%edx
  10c9e6:	09 d0                	or     %edx,%eax
  10c9e8:	41 c1 f8 10          	sar    $0x10,%r8d
  10c9ec:	41 89 04 39          	mov    %eax,(%r9,%rdi,1)
  10c9f0:	48 83 c7 04          	add    $0x4,%rdi
  10c9f4:	4c 39 ee             	cmp    %r13,%rsi
  10c9f7:	72 bf                	jb     10c9b8 <__mdiff+0xa8>
  10c9f9:	4c 89 e9             	mov    %r13,%rcx
  10c9fc:	49 8d 54 24 19       	lea    0x19(%r12),%rdx
  10ca01:	4c 8b 75 c8          	mov    -0x38(%rbp),%r14
  10ca05:	4c 29 e1             	sub    %r12,%rcx
  10ca08:	48 8d 59 e7          	lea    -0x19(%rcx),%rbx
  10ca0c:	b9 04 00 00 00       	mov    $0x4,%ecx
  10ca11:	48 c1 eb 02          	shr    $0x2,%rbx
  10ca15:	49 39 d5             	cmp    %rdx,%r13
  10ca18:	48 8d 34 9d 04 00 00 	lea    0x4(,%rbx,4),%rsi
  10ca1f:	00 
  10ca20:	48 0f 42 f1          	cmovb  %rcx,%rsi
  10ca24:	49 01 f6             	add    %rsi,%r14
  10ca27:	4c 01 fe             	add    %r15,%rsi
  10ca2a:	48 89 f7             	mov    %rsi,%rdi
  10ca2d:	4c 89 f1             	mov    %r14,%rcx
  10ca30:	4d 39 de             	cmp    %r11,%r14
  10ca33:	0f 83 c7 00 00 00    	jae    10cb00 <__mdiff+0x1f0>
  10ca39:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10ca40:	8b 01                	mov    (%rcx),%eax
  10ca42:	44 89 c3             	mov    %r8d,%ebx
  10ca45:	48 83 c7 04          	add    $0x4,%rdi
  10ca49:	48 83 c1 04          	add    $0x4,%rcx
  10ca4d:	0f b7 d0             	movzwl %ax,%edx
  10ca50:	44 01 c2             	add    %r8d,%edx
  10ca53:	41 89 c0             	mov    %eax,%r8d
  10ca56:	01 d8                	add    %ebx,%eax
  10ca58:	41 c1 e8 10          	shr    $0x10,%r8d
  10ca5c:	c1 fa 10             	sar    $0x10,%edx
  10ca5f:	0f b7 c0             	movzwl %ax,%eax
  10ca62:	44 01 c2             	add    %r8d,%edx
  10ca65:	41 89 d0             	mov    %edx,%r8d
  10ca68:	c1 e2 10             	shl    $0x10,%edx
  10ca6b:	09 d0                	or     %edx,%eax
  10ca6d:	41 c1 f8 10          	sar    $0x10,%r8d
  10ca71:	89 47 fc             	mov    %eax,-0x4(%rdi)
  10ca74:	4c 39 d9             	cmp    %r11,%rcx
  10ca77:	72 c7                	jb     10ca40 <__mdiff+0x130>
  10ca79:	49 83 eb 01          	sub    $0x1,%r11
  10ca7d:	4d 29 f3             	sub    %r14,%r11
  10ca80:	49 83 e3 fc          	and    $0xfffffffffffffffc,%r11
  10ca84:	4c 01 de             	add    %r11,%rsi
  10ca87:	85 c0                	test   %eax,%eax
  10ca89:	75 14                	jne    10ca9f <__mdiff+0x18f>
  10ca8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10ca90:	8b 46 fc             	mov    -0x4(%rsi),%eax
  10ca93:	48 83 ee 04          	sub    $0x4,%rsi
  10ca97:	41 83 ea 01          	sub    $0x1,%r10d
  10ca9b:	85 c0                	test   %eax,%eax
  10ca9d:	74 f1                	je     10ca90 <__mdiff+0x180>
  10ca9f:	45 89 51 14          	mov    %r10d,0x14(%r9)
  10caa3:	48 83 c4 18          	add    $0x18,%rsp
  10caa7:	4c 89 c8             	mov    %r9,%rax
  10caaa:	5b                   	pop    %rbx
  10caab:	41 5c                	pop    %r12
  10caad:	41 5d                	pop    %r13
  10caaf:	41 5e                	pop    %r14
  10cab1:	41 5f                	pop    %r15
  10cab3:	5d                   	pop    %rbp
  10cab4:	c3                   	ret    
  10cab5:	0f 1f 00             	nopl   (%rax)
  10cab8:	41 bd 00 00 00 00    	mov    $0x0,%r13d
  10cabe:	0f 89 ac fe ff ff    	jns    10c970 <__mdiff+0x60>
  10cac4:	48 89 d8             	mov    %rbx,%rax
  10cac7:	41 bd 01 00 00 00    	mov    $0x1,%r13d
  10cacd:	4c 89 e3             	mov    %r12,%rbx
  10cad0:	49 89 c4             	mov    %rax,%r12
  10cad3:	e9 98 fe ff ff       	jmp    10c970 <__mdiff+0x60>
  10cad8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10cadf:	00 
  10cae0:	31 f6                	xor    %esi,%esi
  10cae2:	e8 b9 f5 ff ff       	call   10c0a0 <_Balloc>
  10cae7:	49 89 c1             	mov    %rax,%r9
  10caea:	48 85 c0             	test   %rax,%rax
  10caed:	74 2a                	je     10cb19 <__mdiff+0x209>
  10caef:	48 c7 40 14 01 00 00 	movq   $0x1,0x14(%rax)
  10caf6:	00 
  10caf7:	eb aa                	jmp    10caa3 <__mdiff+0x193>
  10caf9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  10cb00:	48 c1 e3 02          	shl    $0x2,%rbx
  10cb04:	49 39 d5             	cmp    %rdx,%r13
  10cb07:	ba 00 00 00 00       	mov    $0x0,%edx
  10cb0c:	48 0f 42 da          	cmovb  %rdx,%rbx
  10cb10:	49 8d 34 1f          	lea    (%r15,%rbx,1),%rsi
  10cb14:	e9 6e ff ff ff       	jmp    10ca87 <__mdiff+0x177>
  10cb19:	b9 8a 03 12 00       	mov    $0x12038a,%ecx
  10cb1e:	31 d2                	xor    %edx,%edx
  10cb20:	be 32 02 00 00       	mov    $0x232,%esi
  10cb25:	bf 68 df 11 00       	mov    $0x11df68,%edi
  10cb2a:	e8 41 62 ff ff       	call   102d70 <__assert_func>
  10cb2f:	b9 8a 03 12 00       	mov    $0x12038a,%ecx
  10cb34:	31 d2                	xor    %edx,%edx
  10cb36:	be 40 02 00 00       	mov    $0x240,%esi
  10cb3b:	bf 68 df 11 00       	mov    $0x11df68,%edi
  10cb40:	e8 2b 62 ff ff       	call   102d70 <__assert_func>
  10cb45:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10cb4c:	00 00 00 
  10cb4f:	90                   	nop

000000000010cb50 <__d2b>:
  10cb50:	55                   	push   %rbp
  10cb51:	48 89 e5             	mov    %rsp,%rbp
  10cb54:	41 55                	push   %r13
  10cb56:	66 49 0f 7e c5       	movq   %xmm0,%r13
  10cb5b:	41 54                	push   %r12
  10cb5d:	49 89 f4             	mov    %rsi,%r12
  10cb60:	be 01 00 00 00       	mov    $0x1,%esi
  10cb65:	53                   	push   %rbx
  10cb66:	48 89 d3             	mov    %rdx,%rbx
  10cb69:	48 83 ec 18          	sub    $0x18,%rsp
  10cb6d:	e8 2e f5 ff ff       	call   10c0a0 <_Balloc>
  10cb72:	48 85 c0             	test   %rax,%rax
  10cb75:	0f 84 ea 00 00 00    	je     10cc65 <__d2b+0x115>
  10cb7b:	49 89 c0             	mov    %rax,%r8
  10cb7e:	4c 89 e8             	mov    %r13,%rax
  10cb81:	48 c1 e8 20          	shr    $0x20,%rax
  10cb85:	89 c1                	mov    %eax,%ecx
  10cb87:	c1 e8 14             	shr    $0x14,%eax
  10cb8a:	81 e1 ff ff 0f 00    	and    $0xfffff,%ecx
  10cb90:	89 ce                	mov    %ecx,%esi
  10cb92:	81 ce 00 00 10 00    	or     $0x100000,%esi
  10cb98:	25 ff 07 00 00       	and    $0x7ff,%eax
  10cb9d:	0f 45 ce             	cmovne %esi,%ecx
  10cba0:	41 89 c1             	mov    %eax,%r9d
  10cba3:	89 4d dc             	mov    %ecx,-0x24(%rbp)
  10cba6:	45 85 ed             	test   %r13d,%r13d
  10cba9:	75 45                	jne    10cbf0 <__d2b+0xa0>
  10cbab:	48 8d 7d dc          	lea    -0x24(%rbp),%rdi
  10cbaf:	be 01 00 00 00       	mov    $0x1,%esi
  10cbb4:	e8 17 f7 ff ff       	call   10c2d0 <__lo0bits>
  10cbb9:	8b 55 dc             	mov    -0x24(%rbp),%edx
  10cbbc:	41 89 70 14          	mov    %esi,0x14(%r8)
  10cbc0:	83 c0 20             	add    $0x20,%eax
  10cbc3:	41 89 50 18          	mov    %edx,0x18(%r8)
  10cbc7:	45 85 c9             	test   %r9d,%r9d
  10cbca:	74 69                	je     10cc35 <__d2b+0xe5>
  10cbcc:	be 35 00 00 00       	mov    $0x35,%esi
  10cbd1:	41 8d 94 01 cd fb ff 	lea    -0x433(%r9,%rax,1),%edx
  10cbd8:	ff 
  10cbd9:	29 c6                	sub    %eax,%esi
  10cbdb:	41 89 14 24          	mov    %edx,(%r12)
  10cbdf:	4c 89 c0             	mov    %r8,%rax
  10cbe2:	89 33                	mov    %esi,(%rbx)
  10cbe4:	48 83 c4 18          	add    $0x18,%rsp
  10cbe8:	5b                   	pop    %rbx
  10cbe9:	41 5c                	pop    %r12
  10cbeb:	41 5d                	pop    %r13
  10cbed:	5d                   	pop    %rbp
  10cbee:	c3                   	ret    
  10cbef:	90                   	nop
  10cbf0:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  10cbf4:	44 89 6d d8          	mov    %r13d,-0x28(%rbp)
  10cbf8:	e8 d3 f6 ff ff       	call   10c2d0 <__lo0bits>
  10cbfd:	8b 55 dc             	mov    -0x24(%rbp),%edx
  10cc00:	85 c0                	test   %eax,%eax
  10cc02:	74 5c                	je     10cc60 <__d2b+0x110>
  10cc04:	b9 20 00 00 00       	mov    $0x20,%ecx
  10cc09:	89 d6                	mov    %edx,%esi
  10cc0b:	29 c1                	sub    %eax,%ecx
  10cc0d:	d3 e6                	shl    %cl,%esi
  10cc0f:	89 c1                	mov    %eax,%ecx
  10cc11:	0b 75 d8             	or     -0x28(%rbp),%esi
  10cc14:	d3 ea                	shr    %cl,%edx
  10cc16:	89 55 dc             	mov    %edx,-0x24(%rbp)
  10cc19:	41 89 70 18          	mov    %esi,0x18(%r8)
  10cc1d:	83 fa 01             	cmp    $0x1,%edx
  10cc20:	be 01 00 00 00       	mov    $0x1,%esi
  10cc25:	83 de ff             	sbb    $0xffffffff,%esi
  10cc28:	41 89 50 1c          	mov    %edx,0x1c(%r8)
  10cc2c:	41 89 70 14          	mov    %esi,0x14(%r8)
  10cc30:	45 85 c9             	test   %r9d,%r9d
  10cc33:	75 97                	jne    10cbcc <__d2b+0x7c>
  10cc35:	2d 32 04 00 00       	sub    $0x432,%eax
  10cc3a:	41 89 04 24          	mov    %eax,(%r12)
  10cc3e:	48 63 c6             	movslq %esi,%rax
  10cc41:	c1 e6 05             	shl    $0x5,%esi
  10cc44:	41 8b 7c 80 14       	mov    0x14(%r8,%rax,4),%edi
  10cc49:	e8 12 f6 ff ff       	call   10c260 <__hi0bits>
  10cc4e:	29 c6                	sub    %eax,%esi
  10cc50:	4c 89 c0             	mov    %r8,%rax
  10cc53:	89 33                	mov    %esi,(%rbx)
  10cc55:	48 83 c4 18          	add    $0x18,%rsp
  10cc59:	5b                   	pop    %rbx
  10cc5a:	41 5c                	pop    %r12
  10cc5c:	41 5d                	pop    %r13
  10cc5e:	5d                   	pop    %rbp
  10cc5f:	c3                   	ret    
  10cc60:	8b 75 d8             	mov    -0x28(%rbp),%esi
  10cc63:	eb b4                	jmp    10cc19 <__d2b+0xc9>
  10cc65:	b9 8a 03 12 00       	mov    $0x12038a,%ecx
  10cc6a:	31 d2                	xor    %edx,%edx
  10cc6c:	be 0a 03 00 00       	mov    $0x30a,%esi
  10cc71:	bf 68 df 11 00       	mov    $0x11df68,%edi
  10cc76:	e8 f5 60 ff ff       	call   102d70 <__assert_func>
  10cc7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000010cc80 <__sread>:
  10cc80:	55                   	push   %rbp
  10cc81:	48 63 c9             	movslq %ecx,%rcx
  10cc84:	48 89 e5             	mov    %rsp,%rbp
  10cc87:	53                   	push   %rbx
  10cc88:	48 89 f3             	mov    %rsi,%rbx
  10cc8b:	48 83 ec 08          	sub    $0x8,%rsp
  10cc8f:	0f bf 76 12          	movswl 0x12(%rsi),%esi
  10cc93:	e8 28 04 00 00       	call   10d0c0 <_read_r>
  10cc98:	48 85 c0             	test   %rax,%rax
  10cc9b:	78 13                	js     10ccb0 <__sread+0x30>
  10cc9d:	48 01 83 90 00 00 00 	add    %rax,0x90(%rbx)
  10cca4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10cca8:	c9                   	leave  
  10cca9:	c3                   	ret    
  10ccaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10ccb0:	66 81 63 10 ff ef    	andw   $0xefff,0x10(%rbx)
  10ccb6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10ccba:	c9                   	leave  
  10ccbb:	c3                   	ret    
  10ccbc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000010ccc0 <__swrite>:
  10ccc0:	55                   	push   %rbp
  10ccc1:	48 89 e5             	mov    %rsp,%rbp
  10ccc4:	41 56                	push   %r14
  10ccc6:	49 89 d6             	mov    %rdx,%r14
  10ccc9:	41 54                	push   %r12
  10cccb:	41 89 cc             	mov    %ecx,%r12d
  10ccce:	53                   	push   %rbx
  10cccf:	48 89 f3             	mov    %rsi,%rbx
  10ccd2:	48 83 ec 18          	sub    $0x18,%rsp
  10ccd6:	0f b7 46 10          	movzwl 0x10(%rsi),%eax
  10ccda:	f6 c4 01             	test   $0x1,%ah
  10ccdd:	75 21                	jne    10cd00 <__swrite+0x40>
  10ccdf:	80 e4 ef             	and    $0xef,%ah
  10cce2:	0f bf 73 12          	movswl 0x12(%rbx),%esi
  10cce6:	49 63 cc             	movslq %r12d,%rcx
  10cce9:	4c 89 f2             	mov    %r14,%rdx
  10ccec:	66 89 43 10          	mov    %ax,0x10(%rbx)
  10ccf0:	e8 4b 01 00 00       	call   10ce40 <_write_r>
  10ccf5:	48 83 c4 18          	add    $0x18,%rsp
  10ccf9:	5b                   	pop    %rbx
  10ccfa:	41 5c                	pop    %r12
  10ccfc:	41 5e                	pop    %r14
  10ccfe:	5d                   	pop    %rbp
  10ccff:	c3                   	ret    
  10cd00:	0f bf 76 12          	movswl 0x12(%rsi),%esi
  10cd04:	b9 02 00 00 00       	mov    $0x2,%ecx
  10cd09:	31 d2                	xor    %edx,%edx
  10cd0b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10cd0f:	e8 1c 03 00 00       	call   10d030 <_lseek_r>
  10cd14:	0f b7 43 10          	movzwl 0x10(%rbx),%eax
  10cd18:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  10cd1c:	eb c1                	jmp    10ccdf <__swrite+0x1f>
  10cd1e:	66 90                	xchg   %ax,%ax

000000000010cd20 <__sseek>:
  10cd20:	55                   	push   %rbp
  10cd21:	48 89 e5             	mov    %rsp,%rbp
  10cd24:	53                   	push   %rbx
  10cd25:	48 89 f3             	mov    %rsi,%rbx
  10cd28:	48 83 ec 08          	sub    $0x8,%rsp
  10cd2c:	0f bf 76 12          	movswl 0x12(%rsi),%esi
  10cd30:	e8 fb 02 00 00       	call   10d030 <_lseek_r>
  10cd35:	0f b7 53 10          	movzwl 0x10(%rbx),%edx
  10cd39:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  10cd3d:	74 19                	je     10cd58 <__sseek+0x38>
  10cd3f:	80 ce 10             	or     $0x10,%dh
  10cd42:	48 89 83 90 00 00 00 	mov    %rax,0x90(%rbx)
  10cd49:	66 89 53 10          	mov    %dx,0x10(%rbx)
  10cd4d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10cd51:	c9                   	leave  
  10cd52:	c3                   	ret    
  10cd53:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  10cd58:	80 e6 ef             	and    $0xef,%dh
  10cd5b:	66 89 53 10          	mov    %dx,0x10(%rbx)
  10cd5f:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10cd63:	c9                   	leave  
  10cd64:	c3                   	ret    
  10cd65:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10cd6c:	00 00 00 
  10cd6f:	90                   	nop

000000000010cd70 <__sclose>:
  10cd70:	0f bf 76 12          	movswl 0x12(%rsi),%esi
  10cd74:	e9 c7 01 00 00       	jmp    10cf40 <_close_r>
  10cd79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

000000000010cd80 <strncpy>:
  10cd80:	48 89 f8             	mov    %rdi,%rax
  10cd83:	48 89 f1             	mov    %rsi,%rcx
  10cd86:	49 89 f9             	mov    %rdi,%r9
  10cd89:	48 09 f0             	or     %rsi,%rax
  10cd8c:	48 89 fe             	mov    %rdi,%rsi
  10cd8f:	a8 07                	test   $0x7,%al
  10cd91:	75 6b                	jne    10cdfe <strncpy+0x7e>
  10cd93:	48 83 fa 07          	cmp    $0x7,%rdx
  10cd97:	76 65                	jbe    10cdfe <strncpy+0x7e>
  10cd99:	49 bb ff fe fe fe fe 	movabs $0xfefefefefefefeff,%r11
  10cda0:	fe fe fe 
  10cda3:	49 ba 80 80 80 80 80 	movabs $0x8080808080808080,%r10
  10cdaa:	80 80 80 
  10cdad:	eb 17                	jmp    10cdc6 <strncpy+0x46>
  10cdaf:	90                   	nop
  10cdb0:	48 83 ea 08          	sub    $0x8,%rdx
  10cdb4:	48 83 c6 08          	add    $0x8,%rsi
  10cdb8:	48 83 c1 08          	add    $0x8,%rcx
  10cdbc:	48 89 7e f8          	mov    %rdi,-0x8(%rsi)
  10cdc0:	48 83 fa 07          	cmp    $0x7,%rdx
  10cdc4:	76 38                	jbe    10cdfe <strncpy+0x7e>
  10cdc6:	48 8b 39             	mov    (%rcx),%rdi
  10cdc9:	49 89 f8             	mov    %rdi,%r8
  10cdcc:	4a 8d 04 1f          	lea    (%rdi,%r11,1),%rax
  10cdd0:	49 f7 d0             	not    %r8
  10cdd3:	4c 21 c0             	and    %r8,%rax
  10cdd6:	4c 85 d0             	test   %r10,%rax
  10cdd9:	74 d5                	je     10cdb0 <strncpy+0x30>
  10cddb:	48 85 d2             	test   %rdx,%rdx
  10cdde:	74 23                	je     10ce03 <strncpy+0x83>
  10cde0:	0f b6 39             	movzbl (%rcx),%edi
  10cde3:	48 83 c1 01          	add    $0x1,%rcx
  10cde7:	48 8d 46 01          	lea    0x1(%rsi),%rax
  10cdeb:	4c 8d 42 ff          	lea    -0x1(%rdx),%r8
  10cdef:	40 88 78 ff          	mov    %dil,-0x1(%rax)
  10cdf3:	40 84 ff             	test   %dil,%dil
  10cdf6:	74 18                	je     10ce10 <strncpy+0x90>
  10cdf8:	48 89 c6             	mov    %rax,%rsi
  10cdfb:	4c 89 c2             	mov    %r8,%rdx
  10cdfe:	48 85 d2             	test   %rdx,%rdx
  10ce01:	75 dd                	jne    10cde0 <strncpy+0x60>
  10ce03:	4c 89 c8             	mov    %r9,%rax
  10ce06:	c3                   	ret    
  10ce07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  10ce0e:	00 00 
  10ce10:	4d 85 c0             	test   %r8,%r8
  10ce13:	74 ee                	je     10ce03 <strncpy+0x83>
  10ce15:	48 01 d6             	add    %rdx,%rsi
  10ce18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10ce1f:	00 
  10ce20:	48 83 c0 01          	add    $0x1,%rax
  10ce24:	c6 40 ff 00          	movb   $0x0,-0x1(%rax)
  10ce28:	48 39 f0             	cmp    %rsi,%rax
  10ce2b:	75 f3                	jne    10ce20 <strncpy+0xa0>
  10ce2d:	4c 89 c8             	mov    %r9,%rax
  10ce30:	c3                   	ret    
  10ce31:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10ce38:	00 00 00 
  10ce3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000010ce40 <_write_r>:
  10ce40:	55                   	push   %rbp
  10ce41:	31 c0                	xor    %eax,%eax
  10ce43:	48 89 e5             	mov    %rsp,%rbp
  10ce46:	53                   	push   %rbx
  10ce47:	48 89 fb             	mov    %rdi,%rbx
  10ce4a:	89 f7                	mov    %esi,%edi
  10ce4c:	48 89 d6             	mov    %rdx,%rsi
  10ce4f:	48 89 ca             	mov    %rcx,%rdx
  10ce52:	48 83 ec 08          	sub    $0x8,%rsp
  10ce56:	c7 05 04 94 01 00 00 	movl   $0x0,0x19404(%rip)        # 126264 <errno>
  10ce5d:	00 00 00 
  10ce60:	e8 de 4e 00 00       	call   111d43 <_write>
  10ce65:	48 63 d0             	movslq %eax,%rdx
  10ce68:	83 f8 ff             	cmp    $0xffffffff,%eax
  10ce6b:	74 13                	je     10ce80 <_write_r+0x40>
  10ce6d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10ce71:	48 89 d0             	mov    %rdx,%rax
  10ce74:	c9                   	leave  
  10ce75:	c3                   	ret    
  10ce76:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10ce7d:	00 00 00 
  10ce80:	8b 05 de 93 01 00    	mov    0x193de(%rip),%eax        # 126264 <errno>
  10ce86:	85 c0                	test   %eax,%eax
  10ce88:	74 e3                	je     10ce6d <_write_r+0x2d>
  10ce8a:	89 03                	mov    %eax,(%rbx)
  10ce8c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10ce90:	48 89 d0             	mov    %rdx,%rax
  10ce93:	c9                   	leave  
  10ce94:	c3                   	ret    
  10ce95:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10ce9c:	00 00 00 
  10ce9f:	90                   	nop

000000000010cea0 <_calloc_r>:
  10cea0:	55                   	push   %rbp
  10cea1:	48 0f af f2          	imul   %rdx,%rsi
  10cea5:	48 89 e5             	mov    %rsp,%rbp
  10cea8:	53                   	push   %rbx
  10cea9:	48 83 ec 08          	sub    $0x8,%rsp
  10cead:	e8 ee 65 ff ff       	call   1034a0 <_malloc_r>
  10ceb2:	48 89 c3             	mov    %rax,%rbx
  10ceb5:	48 85 c0             	test   %rax,%rax
  10ceb8:	74 27                	je     10cee1 <_calloc_r+0x41>
  10ceba:	48 8b 50 f8          	mov    -0x8(%rax),%rdx
  10cebe:	48 83 e2 fc          	and    $0xfffffffffffffffc,%rdx
  10cec2:	48 83 ea 08          	sub    $0x8,%rdx
  10cec6:	48 83 fa 48          	cmp    $0x48,%rdx
  10ceca:	77 54                	ja     10cf20 <_calloc_r+0x80>
  10cecc:	48 83 fa 27          	cmp    $0x27,%rdx
  10ced0:	77 1e                	ja     10cef0 <_calloc_r+0x50>
  10ced2:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  10ced9:	00 
  10ceda:	66 0f ef c0          	pxor   %xmm0,%xmm0
  10cede:	0f 11 00             	movups %xmm0,(%rax)
  10cee1:	48 89 d8             	mov    %rbx,%rax
  10cee4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10cee8:	c9                   	leave  
  10cee9:	c3                   	ret    
  10ceea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10cef0:	66 0f ef c0          	pxor   %xmm0,%xmm0
  10cef4:	48 8d 40 10          	lea    0x10(%rax),%rax
  10cef8:	0f 11 40 f0          	movups %xmm0,-0x10(%rax)
  10cefc:	48 83 fa 37          	cmp    $0x37,%rdx
  10cf00:	76 d0                	jbe    10ced2 <_calloc_r+0x32>
  10cf02:	0f 11 43 10          	movups %xmm0,0x10(%rbx)
  10cf06:	48 8d 43 20          	lea    0x20(%rbx),%rax
  10cf0a:	48 83 fa 48          	cmp    $0x48,%rdx
  10cf0e:	75 c2                	jne    10ced2 <_calloc_r+0x32>
  10cf10:	48 8d 43 30          	lea    0x30(%rbx),%rax
  10cf14:	0f 11 43 20          	movups %xmm0,0x20(%rbx)
  10cf18:	eb b8                	jmp    10ced2 <_calloc_r+0x32>
  10cf1a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10cf20:	31 f6                	xor    %esi,%esi
  10cf22:	48 89 c7             	mov    %rax,%rdi
  10cf25:	e8 06 32 ff ff       	call   100130 <memset>
  10cf2a:	48 89 d8             	mov    %rbx,%rax
  10cf2d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10cf31:	c9                   	leave  
  10cf32:	c3                   	ret    
  10cf33:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10cf3a:	00 00 00 
  10cf3d:	0f 1f 00             	nopl   (%rax)

000000000010cf40 <_close_r>:
  10cf40:	55                   	push   %rbp
  10cf41:	31 c0                	xor    %eax,%eax
  10cf43:	48 89 e5             	mov    %rsp,%rbp
  10cf46:	53                   	push   %rbx
  10cf47:	48 89 fb             	mov    %rdi,%rbx
  10cf4a:	89 f7                	mov    %esi,%edi
  10cf4c:	48 83 ec 08          	sub    $0x8,%rsp
  10cf50:	c7 05 0a 93 01 00 00 	movl   $0x0,0x1930a(%rip)        # 126264 <errno>
  10cf57:	00 00 00 
  10cf5a:	e8 ee 4d 00 00       	call   111d4d <_close>
  10cf5f:	83 f8 ff             	cmp    $0xffffffff,%eax
  10cf62:	74 0c                	je     10cf70 <_close_r+0x30>
  10cf64:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10cf68:	c9                   	leave  
  10cf69:	c3                   	ret    
  10cf6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10cf70:	8b 15 ee 92 01 00    	mov    0x192ee(%rip),%edx        # 126264 <errno>
  10cf76:	85 d2                	test   %edx,%edx
  10cf78:	74 ea                	je     10cf64 <_close_r+0x24>
  10cf7a:	89 13                	mov    %edx,(%rbx)
  10cf7c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10cf80:	c9                   	leave  
  10cf81:	c3                   	ret    
  10cf82:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10cf89:	00 00 00 
  10cf8c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000010cf90 <_fstat_r>:
  10cf90:	55                   	push   %rbp
  10cf91:	31 c0                	xor    %eax,%eax
  10cf93:	48 89 e5             	mov    %rsp,%rbp
  10cf96:	53                   	push   %rbx
  10cf97:	48 89 fb             	mov    %rdi,%rbx
  10cf9a:	89 f7                	mov    %esi,%edi
  10cf9c:	48 89 d6             	mov    %rdx,%rsi
  10cf9f:	48 83 ec 08          	sub    $0x8,%rsp
  10cfa3:	c7 05 b7 92 01 00 00 	movl   $0x0,0x192b7(%rip)        # 126264 <errno>
  10cfaa:	00 00 00 
  10cfad:	e8 ab 4d 00 00       	call   111d5d <_fstat>
  10cfb2:	83 f8 ff             	cmp    $0xffffffff,%eax
  10cfb5:	74 09                	je     10cfc0 <_fstat_r+0x30>
  10cfb7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10cfbb:	c9                   	leave  
  10cfbc:	c3                   	ret    
  10cfbd:	0f 1f 00             	nopl   (%rax)
  10cfc0:	8b 15 9e 92 01 00    	mov    0x1929e(%rip),%edx        # 126264 <errno>
  10cfc6:	85 d2                	test   %edx,%edx
  10cfc8:	74 ed                	je     10cfb7 <_fstat_r+0x27>
  10cfca:	89 13                	mov    %edx,(%rbx)
  10cfcc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10cfd0:	c9                   	leave  
  10cfd1:	c3                   	ret    
  10cfd2:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10cfd9:	00 00 00 
  10cfdc:	0f 1f 40 00          	nopl   0x0(%rax)

000000000010cfe0 <_isatty_r>:
  10cfe0:	55                   	push   %rbp
  10cfe1:	31 c0                	xor    %eax,%eax
  10cfe3:	48 89 e5             	mov    %rsp,%rbp
  10cfe6:	53                   	push   %rbx
  10cfe7:	48 89 fb             	mov    %rdi,%rbx
  10cfea:	89 f7                	mov    %esi,%edi
  10cfec:	48 83 ec 08          	sub    $0x8,%rsp
  10cff0:	c7 05 6a 92 01 00 00 	movl   $0x0,0x1926a(%rip)        # 126264 <errno>
  10cff7:	00 00 00 
  10cffa:	e8 55 4d 00 00       	call   111d54 <_isatty>
  10cfff:	83 f8 ff             	cmp    $0xffffffff,%eax
  10d002:	74 0c                	je     10d010 <_isatty_r+0x30>
  10d004:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10d008:	c9                   	leave  
  10d009:	c3                   	ret    
  10d00a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  10d010:	8b 15 4e 92 01 00    	mov    0x1924e(%rip),%edx        # 126264 <errno>
  10d016:	85 d2                	test   %edx,%edx
  10d018:	74 ea                	je     10d004 <_isatty_r+0x24>
  10d01a:	89 13                	mov    %edx,(%rbx)
  10d01c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10d020:	c9                   	leave  
  10d021:	c3                   	ret    
  10d022:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10d029:	00 00 00 
  10d02c:	0f 1f 40 00          	nopl   0x0(%rax)

000000000010d030 <_lseek_r>:
  10d030:	55                   	push   %rbp
  10d031:	31 c0                	xor    %eax,%eax
  10d033:	48 89 e5             	mov    %rsp,%rbp
  10d036:	53                   	push   %rbx
  10d037:	48 89 fb             	mov    %rdi,%rbx
  10d03a:	89 f7                	mov    %esi,%edi
  10d03c:	48 89 d6             	mov    %rdx,%rsi
  10d03f:	89 ca                	mov    %ecx,%edx
  10d041:	48 83 ec 08          	sub    $0x8,%rsp
  10d045:	c7 05 15 92 01 00 00 	movl   $0x0,0x19215(%rip)        # 126264 <errno>
  10d04c:	00 00 00 
  10d04f:	e8 fd 4c 00 00       	call   111d51 <_lseek>
  10d054:	48 63 d0             	movslq %eax,%rdx
  10d057:	83 f8 ff             	cmp    $0xffffffff,%eax
  10d05a:	74 0c                	je     10d068 <_lseek_r+0x38>
  10d05c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10d060:	48 89 d0             	mov    %rdx,%rax
  10d063:	c9                   	leave  
  10d064:	c3                   	ret    
  10d065:	0f 1f 00             	nopl   (%rax)
  10d068:	8b 05 f6 91 01 00    	mov    0x191f6(%rip),%eax        # 126264 <errno>
  10d06e:	85 c0                	test   %eax,%eax
  10d070:	74 ea                	je     10d05c <_lseek_r+0x2c>
  10d072:	89 03                	mov    %eax,(%rbx)
  10d074:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10d078:	48 89 d0             	mov    %rdx,%rax
  10d07b:	c9                   	leave  
  10d07c:	c3                   	ret    
  10d07d:	0f 1f 00             	nopl   (%rax)

000000000010d080 <__ascii_mbtowc>:
  10d080:	55                   	push   %rbp
  10d081:	48 85 f6             	test   %rsi,%rsi
  10d084:	48 89 e5             	mov    %rsp,%rbp
  10d087:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  10d08b:	48 0f 44 f0          	cmove  %rax,%rsi
  10d08f:	48 85 d2             	test   %rdx,%rdx
  10d092:	74 1c                	je     10d0b0 <__ascii_mbtowc+0x30>
  10d094:	48 85 c9             	test   %rcx,%rcx
  10d097:	74 1b                	je     10d0b4 <__ascii_mbtowc+0x34>
  10d099:	0f b6 02             	movzbl (%rdx),%eax
  10d09c:	89 06                	mov    %eax,(%rsi)
  10d09e:	31 c0                	xor    %eax,%eax
  10d0a0:	80 3a 00             	cmpb   $0x0,(%rdx)
  10d0a3:	0f 95 c0             	setne  %al
  10d0a6:	5d                   	pop    %rbp
  10d0a7:	c3                   	ret    
  10d0a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  10d0af:	00 
  10d0b0:	31 c0                	xor    %eax,%eax
  10d0b2:	5d                   	pop    %rbp
  10d0b3:	c3                   	ret    
  10d0b4:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  10d0b9:	5d                   	pop    %rbp
  10d0ba:	c3                   	ret    
  10d0bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

000000000010d0c0 <_read_r>:
  10d0c0:	55                   	push   %rbp
  10d0c1:	31 c0                	xor    %eax,%eax
  10d0c3:	48 89 e5             	mov    %rsp,%rbp
  10d0c6:	53                   	push   %rbx
  10d0c7:	48 89 fb             	mov    %rdi,%rbx
  10d0ca:	89 f7                	mov    %esi,%edi
  10d0cc:	48 89 d6             	mov    %rdx,%rsi
  10d0cf:	48 89 ca             	mov    %rcx,%rdx
  10d0d2:	48 83 ec 08          	sub    $0x8,%rsp
  10d0d6:	c7 05 84 91 01 00 00 	movl   $0x0,0x19184(%rip)        # 126264 <errno>
  10d0dd:	00 00 00 
  10d0e0:	e8 54 4c 00 00       	call   111d39 <_read>
  10d0e5:	48 63 d0             	movslq %eax,%rdx
  10d0e8:	83 f8 ff             	cmp    $0xffffffff,%eax
  10d0eb:	74 13                	je     10d100 <_read_r+0x40>
  10d0ed:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10d0f1:	48 89 d0             	mov    %rdx,%rax
  10d0f4:	c9                   	leave  
  10d0f5:	c3                   	ret    
  10d0f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10d0fd:	00 00 00 
  10d100:	8b 05 5e 91 01 00    	mov    0x1915e(%rip),%eax        # 126264 <errno>
  10d106:	85 c0                	test   %eax,%eax
  10d108:	74 e3                	je     10d0ed <_read_r+0x2d>
  10d10a:	89 03                	mov    %eax,(%rbx)
  10d10c:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  10d110:	48 89 d0             	mov    %rdx,%rax
  10d113:	c9                   	leave  
  10d114:	c3                   	ret    
  10d115:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  10d11c:	00 00 00 
  10d11f:	90                   	nop

000000000010d120 <__ascii_wctomb>:
  10d120:	48 85 f6             	test   %rsi,%rsi
  10d123:	74 23                	je     10d148 <__ascii_wctomb+0x28>
  10d125:	81 fa ff 00 00 00    	cmp    $0xff,%edx
  10d12b:	77 0b                	ja     10d138 <__ascii_wctomb+0x18>
  10d12d:	88 16                	mov    %dl,(%rsi)
  10d12f:	b8 01 00 00 00       	mov    $0x1,%eax
  10d134:	c3                   	ret    
  10d135:	0f 1f 00             	nopl   (%rax)
  10d138:	c7 07 8a 00 00 00    	movl   $0x8a,(%rdi)
  10d13e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  10d143:	c3                   	ret    
  10d144:	0f 1f 40 00          	nopl   0x0(%rax)
  10d148:	31 c0                	xor    %eax,%eax
  10d14a:	c3                   	ret    
  10d14b:	90                   	nop

000000000010d14c <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
    return TfLiteDelegatePtrVector();
  10d14c:	31 d2                	xor    %edx,%edx
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
  10d14e:	48 89 f8             	mov    %rdi,%rax
    return TfLiteDelegatePtrVector();
  10d151:	48 89 17             	mov    %rdx,(%rdi)
  10d154:	48 89 57 08          	mov    %rdx,0x8(%rdi)
  10d158:	48 89 57 10          	mov    %rdx,0x10(%rdi)
  }
  10d15c:	c3                   	ret    
  10d15d:	90                   	nop

000000000010d15e <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
  10d15e:	b0 01                	mov    $0x1,%al
  10d160:	c3                   	ret    
  10d161:	90                   	nop

000000000010d162 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
                                   int version) const final {
    return FindOp(op);
  10d162:	48 8b 07             	mov    (%rdi),%rax
  10d165:	ff 60 30             	jmp    *0x30(%rax)

000000000010d168 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:
  }

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
    return FindOp(op);
  10d168:	48 8b 07             	mov    (%rdi),%rax
  10d16b:	ff 60 38             	jmp    *0x38(%rax)

000000000010d16e <_ZN6tflite18MicroErrorReporterD1Ev>:
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
  10d16e:	c3                   	ret    
  10d16f:	90                   	nop

000000000010d170 <_ZN6tflite22MicroMutableOpResolverILj5EED1Ev>:

namespace tflite {
TfLiteRegistration* Register_DETECTION_POSTPROCESS();

template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
  10d170:	c3                   	ret    
  10d171:	90                   	nop

000000000010d172 <_ZN6tflite22MicroMutableOpResolverILj5EED0Ev>:
  10d172:	e9 c1 da 00 00       	jmp    11ac38 <_ZdlPv>
  10d177:	90                   	nop

000000000010d178 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE>:
    return nullptr;
  }

  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
      BuiltinOperator op) const override {
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
  10d178:	8b 8f 88 01 00 00    	mov    0x188(%rdi),%ecx
  10d17e:	31 c0                	xor    %eax,%eax
  10d180:	83 f9 05             	cmp    $0x5,%ecx
  10d183:	76 09                	jbe    10d18e <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x16>
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
  10d185:	55                   	push   %rbp
  10d186:	48 89 e5             	mov    %rsp,%rbp
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
  10d189:	e8 36 4c 00 00       	call   111dc4 <abort>
  10d18e:	89 c2                	mov    %eax,%edx
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
  10d190:	39 c8                	cmp    %ecx,%eax
  10d192:	73 15                	jae    10d1a9 <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x31>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
  10d194:	48 ff c0             	inc    %rax
  10d197:	39 b4 87 48 01 00 00 	cmp    %esi,0x148(%rdi,%rax,4)
  10d19e:	75 ee                	jne    10d18e <_ZNK6tflite22MicroMutableOpResolverILj5EE15GetOpDataParserENS_15BuiltinOperatorE+0x16>
  10d1a0:	48 8b 84 d7 60 01 00 	mov    0x160(%rdi,%rdx,8),%rax
  10d1a7:	00 
  10d1a8:	c3                   	ret    
    }
    return nullptr;
  10d1a9:	31 c0                	xor    %eax,%eax
  }
  10d1ab:	c3                   	ret    

000000000010d1ac <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
  10d1ac:	55                   	push   %rbp
  10d1ad:	48 89 e5             	mov    %rsp,%rbp
  10d1b0:	41 57                	push   %r15
  10d1b2:	41 56                	push   %r14
  10d1b4:	49 89 f6             	mov    %rsi,%r14
  10d1b7:	41 55                	push   %r13
  10d1b9:	4c 8d 6f 30          	lea    0x30(%rdi),%r13
  10d1bd:	41 54                	push   %r12
  10d1bf:	49 89 fc             	mov    %rdi,%r12
  10d1c2:	53                   	push   %rbx
    for (unsigned int i = 0; i < registrations_len_; ++i) {
  10d1c3:	31 db                	xor    %ebx,%ebx
  const TfLiteRegistration* FindOp(const char* op) const override {
  10d1c5:	51                   	push   %rcx
    for (unsigned int i = 0; i < registrations_len_; ++i) {
  10d1c6:	44 8b bf 48 01 00 00 	mov    0x148(%rdi),%r15d
  10d1cd:	41 39 df             	cmp    %ebx,%r15d
  10d1d0:	74 2a                	je     10d1fc <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x50>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
  10d1d2:	41 83 7d 00 20       	cmpl   $0x20,0x0(%r13)
  10d1d7:	75 1b                	jne    10d1f4 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x48>
          (strcmp(registration.custom_name, op) == 0)) {
  10d1d9:	49 8b 7d 08          	mov    0x8(%r13),%rdi
  10d1dd:	4c 89 f6             	mov    %r14,%rsi
  10d1e0:	e8 3b 75 ff ff       	call   104720 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
  10d1e5:	85 c0                	test   %eax,%eax
  10d1e7:	75 0b                	jne    10d1f4 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x48>
      const TfLiteRegistration& registration = registrations_[i];
  10d1e9:	48 c1 e3 06          	shl    $0x6,%rbx
  10d1ed:	49 8d 44 1c 08       	lea    0x8(%r12,%rbx,1),%rax
  10d1f2:	eb 0a                	jmp    10d1fe <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x52>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
  10d1f4:	ff c3                	inc    %ebx
  10d1f6:	49 83 c5 40          	add    $0x40,%r13
  10d1fa:	eb d1                	jmp    10d1cd <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpEPKc+0x21>
    return nullptr;
  10d1fc:	31 c0                	xor    %eax,%eax
  }
  10d1fe:	5a                   	pop    %rdx
  10d1ff:	5b                   	pop    %rbx
  10d200:	41 5c                	pop    %r12
  10d202:	41 5d                	pop    %r13
  10d204:	41 5e                	pop    %r14
  10d206:	41 5f                	pop    %r15
  10d208:	5d                   	pop    %rbp
  10d209:	c3                   	ret    

000000000010d20a <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
  10d20a:	31 c0                	xor    %eax,%eax
  10d20c:	83 fe 20             	cmp    $0x20,%esi
  10d20f:	74 25                	je     10d236 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x2c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
  10d211:	8b 97 48 01 00 00    	mov    0x148(%rdi),%edx
  10d217:	39 d0                	cmp    %edx,%eax
  10d219:	73 19                	jae    10d234 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x2a>
      if (registration.builtin_code == op) {
  10d21b:	48 8d 48 01          	lea    0x1(%rax),%rcx
  10d21f:	48 c1 e0 06          	shl    $0x6,%rax
  10d223:	39 74 07 30          	cmp    %esi,0x30(%rdi,%rax,1)
  10d227:	75 06                	jne    10d22f <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0x25>
      const TfLiteRegistration& registration = registrations_[i];
  10d229:	48 8d 44 07 08       	lea    0x8(%rdi,%rax,1),%rax
  10d22e:	c3                   	ret    
  10d22f:	48 89 c8             	mov    %rcx,%rax
  10d232:	eb e3                	jmp    10d217 <_ZNK6tflite22MicroMutableOpResolverILj5EE6FindOpENS_15BuiltinOperatorE+0xd>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
  10d234:	31 c0                	xor    %eax,%eax
  }
  10d236:	c3                   	ret    
  10d237:	90                   	nop

000000000010d238 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
  10d238:	55                   	push   %rbp
  10d239:	48 89 e5             	mov    %rsp,%rbp
  10d23c:	41 56                	push   %r14
  10d23e:	41 55                	push   %r13
  10d240:	41 54                	push   %r12
  10d242:	53                   	push   %rbx
  10d243:	48 89 fb             	mov    %rdi,%rbx
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
  10d246:	83 fe 20             	cmp    $0x20,%esi
  10d249:	75 24                	jne    10d26f <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0x37>
      if (error_reporter_ != nullptr) {
  10d24b:	48 8b bf 90 01 00 00 	mov    0x190(%rdi),%rdi
  10d252:	48 85 ff             	test   %rdi,%rdi
  10d255:	0f 84 c6 00 00 00    	je     10d321 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0xe9>
    builtin_codes_[num_buitin_ops_] = op;
    builtin_parsers_[num_buitin_ops_] = parser;
    num_buitin_ops_++;

    return kTfLiteOk;
  }
  10d25b:	5b                   	pop    %rbx
        TF_LITE_REPORT_ERROR(error_reporter_,
  10d25c:	be 56 e0 11 00       	mov    $0x11e056,%esi
  }
  10d261:	41 5c                	pop    %r12
        TF_LITE_REPORT_ERROR(error_reporter_,
  10d263:	31 c0                	xor    %eax,%eax
  }
  10d265:	41 5d                	pop    %r13
  10d267:	41 5e                	pop    %r14
  10d269:	5d                   	pop    %rbp
        TF_LITE_REPORT_ERROR(error_reporter_,
  10d26a:	e9 05 29 00 00       	jmp    10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    if (FindOp(op) != nullptr) {
  10d26f:	48 8b 07             	mov    (%rdi),%rax
  10d272:	41 89 f4             	mov    %esi,%r12d
  10d275:	49 89 d5             	mov    %rdx,%r13
  10d278:	49 89 ce             	mov    %rcx,%r14
  10d27b:	ff 50 30             	call   *0x30(%rax)
  10d27e:	48 85 c0             	test   %rax,%rax
  10d281:	74 27                	je     10d2aa <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0x72>
      if (error_reporter_ != nullptr) {
  10d283:	48 8b bb 90 01 00 00 	mov    0x190(%rbx),%rdi
  10d28a:	48 85 ff             	test   %rdi,%rdi
  10d28d:	0f 84 8e 00 00 00    	je     10d321 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0xe9>
  }
  10d293:	5b                   	pop    %rbx
        TF_LITE_REPORT_ERROR(error_reporter_,
  10d294:	44 89 e2             	mov    %r12d,%edx
  10d297:	be 9b e0 11 00       	mov    $0x11e09b,%esi
  }
  10d29c:	41 5c                	pop    %r12
        TF_LITE_REPORT_ERROR(error_reporter_,
  10d29e:	31 c0                	xor    %eax,%eax
  }
  10d2a0:	41 5d                	pop    %r13
  10d2a2:	41 5e                	pop    %r14
  10d2a4:	5d                   	pop    %rbp
        TF_LITE_REPORT_ERROR(error_reporter_,
  10d2a5:	e9 ca 28 00 00       	jmp    10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    if (registrations_len_ >= tOpCount) {
  10d2aa:	8b 93 48 01 00 00    	mov    0x148(%rbx),%edx
  10d2b0:	83 fa 04             	cmp    $0x4,%edx
  10d2b3:	76 28                	jbe    10d2dd <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0xa5>
      if (error_reporter_) {
  10d2b5:	48 8b bb 90 01 00 00 	mov    0x190(%rbx),%rdi
  10d2bc:	48 85 ff             	test   %rdi,%rdi
  10d2bf:	74 60                	je     10d321 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0xe9>
  }
  10d2c1:	5b                   	pop    %rbx
        TF_LITE_REPORT_ERROR(error_reporter_,
  10d2c2:	44 89 e2             	mov    %r12d,%edx
  10d2c5:	b9 05 00 00 00       	mov    $0x5,%ecx
  }
  10d2ca:	41 5c                	pop    %r12
        TF_LITE_REPORT_ERROR(error_reporter_,
  10d2cc:	be ea e0 11 00       	mov    $0x11e0ea,%esi
  }
  10d2d1:	41 5d                	pop    %r13
        TF_LITE_REPORT_ERROR(error_reporter_,
  10d2d3:	31 c0                	xor    %eax,%eax
  }
  10d2d5:	41 5e                	pop    %r14
  10d2d7:	5d                   	pop    %rbp
        TF_LITE_REPORT_ERROR(error_reporter_,
  10d2d8:	e9 97 28 00 00       	jmp    10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    registrations_[registrations_len_] = registration;
  10d2dd:	89 d0                	mov    %edx,%eax
  10d2df:	b9 10 00 00 00       	mov    $0x10,%ecx
  10d2e4:	4c 89 ee             	mov    %r13,%rsi
    registrations_len_++;
  10d2e7:	ff c2                	inc    %edx
    registrations_[registrations_len_] = registration;
  10d2e9:	48 c1 e0 06          	shl    $0x6,%rax
  10d2ed:	48 01 d8             	add    %rbx,%rax
  10d2f0:	48 8d 78 08          	lea    0x8(%rax),%rdi
  10d2f4:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
    registrations_[registrations_len_].builtin_code = op;
  10d2f6:	44 89 60 30          	mov    %r12d,0x30(%rax)
    registrations_len_++;
  10d2fa:	89 93 48 01 00 00    	mov    %edx,0x148(%rbx)
    builtin_codes_[num_buitin_ops_] = op;
  10d300:	8b 93 88 01 00 00    	mov    0x188(%rbx),%edx
  10d306:	48 89 d0             	mov    %rdx,%rax
  10d309:	44 89 a4 93 4c 01 00 	mov    %r12d,0x14c(%rbx,%rdx,4)
  10d310:	00 
    num_buitin_ops_++;
  10d311:	ff c0                	inc    %eax
    builtin_parsers_[num_buitin_ops_] = parser;
  10d313:	4c 89 b4 d3 60 01 00 	mov    %r14,0x160(%rbx,%rdx,8)
  10d31a:	00 
    num_buitin_ops_++;
  10d31b:	89 83 88 01 00 00    	mov    %eax,0x188(%rbx)
  }
  10d321:	5b                   	pop    %rbx
  10d322:	41 5c                	pop    %r12
  10d324:	41 5d                	pop    %r13
  10d326:	41 5e                	pop    %r14
  10d328:	5d                   	pop    %rbp
  10d329:	c3                   	ret    

000000000010d32a <_ZN6tflite18MicroErrorReporterD0Ev>:
  10d32a:	e9 09 d9 00 00       	jmp    11ac38 <_ZdlPv>
  10d32f:	90                   	nop

000000000010d330 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
  10d330:	c3                   	ret    
  10d331:	90                   	nop

000000000010d332 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:
  }
  temp_ = aligned_result + size;
  return aligned_result;
}

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
  10d332:	48 8b 47 20          	mov    0x20(%rdi),%rax
  10d336:	48 89 47 30          	mov    %rax,0x30(%rdi)
  10d33a:	c3                   	ret    
  10d33b:	90                   	nop

000000000010d33c <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
  10d33c:	e9 f7 d8 00 00       	jmp    11ac38 <_ZdlPv>
  10d341:	90                   	nop

000000000010d342 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEmm>:
                                                      size_t alignment) {
  10d342:	55                   	push   %rbp
  10d343:	48 89 e5             	mov    %rsp,%rbp
  10d346:	41 54                	push   %r12
  10d348:	53                   	push   %rbx
  10d349:	48 89 fb             	mov    %rdi,%rbx
  if (head_ != temp_) {
  10d34c:	48 8b 47 30          	mov    0x30(%rdi),%rax
  10d350:	48 39 47 20          	cmp    %rax,0x20(%rdi)
  10d354:	74 12                	je     10d368 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEmm+0x26>
    TF_LITE_REPORT_ERROR(
  10d356:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  10d35a:	be 29 e2 11 00       	mov    $0x11e229,%esi
  10d35f:	31 c0                	xor    %eax,%eax
  10d361:	e8 0e 28 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
  10d366:	eb 34                	jmp    10d39c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEmm+0x5a>
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
  10d368:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
  10d36c:	49 89 f4             	mov    %rsi,%r12
  10d36f:	48 89 d6             	mov    %rdx,%rsi
  10d372:	e8 ff 56 00 00       	call   112a76 <_ZN6tflite14AlignPointerUpEPhm>
  const size_t available_memory = tail_ - aligned_result;
  10d377:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
  10d37b:	48 29 c1             	sub    %rax,%rcx
  if (available_memory < size) {
  10d37e:	4c 39 e1             	cmp    %r12,%rcx
  10d381:	73 20                	jae    10d3a3 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEmm+0x61>
    TF_LITE_REPORT_ERROR(
  10d383:	4d 89 e0             	mov    %r12,%r8
  10d386:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
  10d38a:	4c 89 e2             	mov    %r12,%rdx
  10d38d:	be 7e e2 11 00       	mov    $0x11e27e,%esi
  10d392:	49 29 c8             	sub    %rcx,%r8
  10d395:	31 c0                	xor    %eax,%eax
  10d397:	e8 d8 27 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
  10d39c:	b8 01 00 00 00       	mov    $0x1,%eax
  10d3a1:	eb 0d                	jmp    10d3b0 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEmm+0x6e>
  head_ = aligned_result + size;
  10d3a3:	4c 01 e0             	add    %r12,%rax
  10d3a6:	48 89 43 20          	mov    %rax,0x20(%rbx)
  temp_ = head_;
  10d3aa:	48 89 43 30          	mov    %rax,0x30(%rbx)
  return kTfLiteOk;
  10d3ae:	31 c0                	xor    %eax,%eax
}
  10d3b0:	5b                   	pop    %rbx
  10d3b1:	41 5c                	pop    %r12
  10d3b3:	5d                   	pop    %rbp
  10d3b4:	c3                   	ret    
  10d3b5:	90                   	nop

000000000010d3b6 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEmm>:
uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
  10d3b6:	55                   	push   %rbp
  10d3b7:	48 89 e5             	mov    %rsp,%rbp
  10d3ba:	41 54                	push   %r12
  10d3bc:	49 89 fc             	mov    %rdi,%r12
  10d3bf:	53                   	push   %rbx
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
  10d3c0:	48 8b 7f 30          	mov    0x30(%rdi),%rdi
uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
  10d3c4:	48 89 f3             	mov    %rsi,%rbx
  10d3c7:	48 89 d6             	mov    %rdx,%rsi
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
  10d3ca:	e8 a7 56 00 00       	call   112a76 <_ZN6tflite14AlignPointerUpEPhm>
  const size_t available_memory = tail_ - aligned_result;
  10d3cf:	49 8b 4c 24 28       	mov    0x28(%r12),%rcx
  10d3d4:	48 29 c1             	sub    %rax,%rcx
  if (available_memory < size) {
  10d3d7:	48 39 d9             	cmp    %rbx,%rcx
  10d3da:	73 1e                	jae    10d3fa <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEmm+0x44>
    TF_LITE_REPORT_ERROR(error_reporter_,
  10d3dc:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  10d3e1:	49 89 d8             	mov    %rbx,%r8
  10d3e4:	48 89 da             	mov    %rbx,%rdx
  10d3e7:	be c0 e2 11 00       	mov    $0x11e2c0,%esi
  10d3ec:	49 29 c8             	sub    %rcx,%r8
  10d3ef:	31 c0                	xor    %eax,%eax
  10d3f1:	e8 7e 27 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
  10d3f6:	31 c0                	xor    %eax,%eax
  10d3f8:	eb 08                	jmp    10d402 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEmm+0x4c>
  temp_ = aligned_result + size;
  10d3fa:	48 01 c3             	add    %rax,%rbx
  10d3fd:	49 89 5c 24 30       	mov    %rbx,0x30(%r12)
}
  10d402:	5b                   	pop    %rbx
  10d403:	41 5c                	pop    %r12
  10d405:	5d                   	pop    %rbp
  10d406:	c3                   	ret    
  10d407:	90                   	nop

000000000010d408 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEmm>:
                                                 size_t alignment) {
  10d408:	55                   	push   %rbp
  10d409:	48 89 e5             	mov    %rsp,%rbp
  10d40c:	41 54                	push   %r12
  10d40e:	49 89 f4             	mov    %rsi,%r12
  10d411:	48 89 d6             	mov    %rdx,%rsi
  10d414:	53                   	push   %rbx
  10d415:	48 89 fb             	mov    %rdi,%rbx
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
  10d418:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
  10d41c:	4c 29 e7             	sub    %r12,%rdi
  10d41f:	e8 66 56 00 00       	call   112a8a <_ZN6tflite16AlignPointerDownEPhm>
  if (aligned_result < head_) {
  10d424:	4c 8b 43 20          	mov    0x20(%rbx),%r8
  10d428:	4c 39 c0             	cmp    %r8,%rax
  10d42b:	73 20                	jae    10d44d <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEmm+0x45>
    const size_t missing_memory = head_ - aligned_result;
  10d42d:	49 29 c0             	sub    %rax,%r8
    TF_LITE_REPORT_ERROR(error_reporter_,
  10d430:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
  10d434:	4c 89 e1             	mov    %r12,%rcx
  10d437:	4c 89 e2             	mov    %r12,%rdx
  10d43a:	4c 29 c1             	sub    %r8,%rcx
  10d43d:	be 09 e3 11 00       	mov    $0x11e309,%esi
  10d442:	31 c0                	xor    %eax,%eax
  10d444:	e8 2b 27 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
  10d449:	31 c0                	xor    %eax,%eax
  10d44b:	eb 04                	jmp    10d451 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEmm+0x49>
  tail_ = aligned_result;
  10d44d:	48 89 43 28          	mov    %rax,0x28(%rbx)
}
  10d451:	5b                   	pop    %rbx
  10d452:	41 5c                	pop    %r12
  10d454:	5d                   	pop    %rbp
  10d455:	c3                   	ret    

000000000010d456 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhm>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
  10d456:	55                   	push   %rbp
  10d457:	48 89 e5             	mov    %rsp,%rbp
  10d45a:	48 83 ec 40          	sub    $0x40,%rsp
  TFLITE_DCHECK(error_reporter != nullptr);
  10d45e:	48 85 ff             	test   %rdi,%rdi
  10d461:	75 05                	jne    10d468 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhm+0x12>
  10d463:	e8 5c 49 00 00       	call   111dc4 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
  10d468:	48 85 f6             	test   %rsi,%rsi
  10d46b:	74 f6                	je     10d463 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhm+0xd>
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
  10d46d:	48 01 f2             	add    %rsi,%rdx
    : error_reporter_(error_reporter),
  10d470:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
  10d474:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
      buffer_head_(buffer_head),
  10d478:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
      buffer_tail_(buffer_tail),
  10d47c:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
      head_(buffer_head),
  10d480:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
      tail_(buffer_tail),
  10d484:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
  10d488:	ba 08 00 00 00       	mov    $0x8,%edx
      temp_(buffer_head_) {}
  10d48d:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
  10d491:	be 38 00 00 00       	mov    $0x38,%esi
      temp_(buffer_head_) {}
  10d496:	48 c7 45 c8 58 d4 11 	movq   $0x11d458,-0x38(%rbp)
  10d49d:	00 
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
  10d49e:	e8 65 ff ff ff       	call   10d408 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEmm>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
  10d4a3:	48 85 c0             	test   %rax,%rax
  10d4a6:	74 37                	je     10d4df <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhm+0x89>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
  10d4a8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  10d4ac:	48 c7 00 58 d4 11 00 	movq   $0x11d458,(%rax)
  10d4b3:	48 89 50 08          	mov    %rdx,0x8(%rax)
  10d4b7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10d4bb:	48 89 50 10          	mov    %rdx,0x10(%rax)
  10d4bf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10d4c3:	48 89 50 18          	mov    %rdx,0x18(%rax)
  10d4c7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  10d4cb:	48 89 50 20          	mov    %rdx,0x20(%rax)
  10d4cf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  10d4d3:	48 89 50 28          	mov    %rdx,0x28(%rax)
  10d4d7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  10d4db:	48 89 50 30          	mov    %rdx,0x30(%rax)
}
  10d4df:	c9                   	leave  
  10d4e0:	c3                   	ret    
  10d4e1:	90                   	nop

000000000010d4e2 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
  10d4e2:	48 8b 47 10          	mov    0x10(%rdi),%rax
  10d4e6:	c3                   	ret    
  10d4e7:	90                   	nop

000000000010d4e8 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEm>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
  10d4e8:	55                   	push   %rbp
  10d4e9:	48 89 e5             	mov    %rsp,%rbp
  10d4ec:	41 55                	push   %r13
  10d4ee:	41 54                	push   %r12
  10d4f0:	49 89 fc             	mov    %rdi,%r12
  10d4f3:	48 83 ec 10          	sub    $0x10,%rsp
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
  10d4f7:	48 8b 7f 30          	mov    0x30(%rdi),%rdi
  10d4fb:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  10d4ff:	e8 72 55 00 00       	call   112a76 <_ZN6tflite14AlignPointerUpEPhm>
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
  10d504:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
  10d509:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
  10d50d:	49 89 c5             	mov    %rax,%r13
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
  10d510:	e8 75 55 00 00       	call   112a8a <_ZN6tflite16AlignPointerDownEPhm>
  return aligned_tail - aligned_temp;
}
  10d515:	5a                   	pop    %rdx
  10d516:	59                   	pop    %rcx
  return aligned_tail - aligned_temp;
  10d517:	4c 29 e8             	sub    %r13,%rax
}
  10d51a:	41 5c                	pop    %r12
  10d51c:	41 5d                	pop    %r13
  10d51e:	5d                   	pop    %rbp
  10d51f:	c3                   	ret    

000000000010d520 <_ZN6tflite18MicroErrorReporter6ReportEPKcP13__va_list_tag>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
  10d520:	55                   	push   %rbp
  10d521:	48 89 f7             	mov    %rsi,%rdi
  10d524:	48 89 d6             	mov    %rdx,%rsi
  10d527:	48 89 e5             	mov    %rsp,%rbp
  Log(format, args);
  10d52a:	e8 80 54 00 00       	call   1129af <_ZN12_GLOBAL__N_13LogEPKcP13__va_list_tag>
  return 0;
}
  10d52f:	31 c0                	xor    %eax,%eax
  10d531:	5d                   	pop    %rbp
  10d532:	c3                   	ret    
  10d533:	90                   	nop

000000000010d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
  10d534:	48 63 07             	movslq (%rdi),%rax
  10d537:	48 29 c7             	sub    %rax,%rdi
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
  10d53a:	31 c0                	xor    %eax,%eax
  10d53c:	66 3b 37             	cmp    (%rdi),%si
  10d53f:	73 07                	jae    10d548 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x14>
  10d541:	0f b7 f6             	movzwl %si,%esi

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
  10d544:	66 8b 04 37          	mov    (%rdi,%rsi,1),%ax
  }
  10d548:	c3                   	ret    
  10d549:	90                   	nop

000000000010d54a <_ZNK6tflite5Model9subgraphsEv>:
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
  10d54a:	55                   	push   %rbp
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
  10d54b:	be 08 00 00 00       	mov    $0x8,%esi
  10d550:	48 89 e5             	mov    %rsp,%rbp
  10d553:	53                   	push   %rbx
  10d554:	48 89 fb             	mov    %rdi,%rbx
  10d557:	51                   	push   %rcx
  10d558:	e8 d7 ff ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
  10d55d:	31 d2                	xor    %edx,%edx
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10d55f:	66 85 c0             	test   %ax,%ax
  10d562:	74 0b                	je     10d56f <_ZNK6tflite5Model9subgraphsEv+0x25>
    auto p = data_ + field_offset;
  10d564:	0f b7 c0             	movzwl %ax,%eax
  10d567:	48 01 c3             	add    %rax,%rbx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10d56a:	8b 13                	mov    (%rbx),%edx
  10d56c:	48 01 da             	add    %rbx,%rdx
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
  }
  10d56f:	48 89 d0             	mov    %rdx,%rax
  10d572:	5a                   	pop    %rdx
  10d573:	5b                   	pop    %rbx
  10d574:	5d                   	pop    %rbp
  10d575:	c3                   	ret    

000000000010d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>:
    FLATBUFFERS_ASSERT(i < size());
  10d576:	3b 37                	cmp    (%rdi),%esi
  10d578:	72 1d                	jb     10d597 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj+0x21>
  return_type Get(uoffset_t i) const {
  10d57a:	55                   	push   %rbp
    FLATBUFFERS_ASSERT(i < size());
  10d57b:	b9 55 e3 11 00       	mov    $0x11e355,%ecx
  10d580:	ba 6d e4 11 00       	mov    $0x11e46d,%edx
  10d585:	be 06 01 00 00       	mov    $0x106,%esi
  10d58a:	bf 07 e4 11 00       	mov    $0x11e407,%edi
  return_type Get(uoffset_t i) const {
  10d58f:	48 89 e5             	mov    %rsp,%rbp
    FLATBUFFERS_ASSERT(i < size());
  10d592:	e8 d9 57 ff ff       	call   102d70 <__assert_func>
    p += i * sizeof(uoffset_t);
  10d597:	89 f6                	mov    %esi,%esi
  10d599:	48 8d 44 b7 04       	lea    0x4(%rdi,%rsi,4),%rax
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
  10d59e:	8b 10                	mov    (%rax),%edx
  10d5a0:	48 01 d0             	add    %rdx,%rax
  }
  10d5a3:	c3                   	ret    

000000000010d5a4 <_ZN6tflite10MicroGraphD1Ev>:
  if (model != nullptr) {
    subgraphs_ = model->subgraphs();
  }
}

MicroGraph::~MicroGraph() {}
  10d5a4:	c3                   	ret    
  10d5a5:	90                   	nop

000000000010d5a6 <_ZN6tflite10MicroGraphD0Ev>:
  10d5a6:	e9 8d d6 00 00       	jmp    11ac38 <_ZdlPv>
  10d5ab:	90                   	nop

000000000010d5ac <_ZN6tflite10MicroGraph13InitSubgraphsEv>:

TfLiteStatus MicroGraph::InitSubgraphs() {
  10d5ac:	55                   	push   %rbp
  10d5ad:	48 89 e5             	mov    %rsp,%rbp
  10d5b0:	41 57                	push   %r15
  10d5b2:	41 56                	push   %r14
  10d5b4:	41 55                	push   %r13
  int previous_subgraph_idx = current_subgraph_index_;

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
  10d5b6:	45 31 ed             	xor    %r13d,%r13d
TfLiteStatus MicroGraph::InitSubgraphs() {
  10d5b9:	41 54                	push   %r12
  10d5bb:	53                   	push   %rbx
  10d5bc:	48 89 fb             	mov    %rdi,%rbx
  10d5bf:	48 83 ec 18          	sub    $0x18,%rsp
  int previous_subgraph_idx = current_subgraph_index_;
  10d5c3:	44 8b 77 28          	mov    0x28(%rdi),%r14d
  uoffset_t size() const { return EndianScalar(length_); }
  10d5c7:	48 8b 43 30          	mov    0x30(%rbx),%rax
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
  10d5cb:	8b 00                	mov    (%rax),%eax
  10d5cd:	49 39 c5             	cmp    %rax,%r13
  10d5d0:	73 75                	jae    10d647 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x9b>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
  10d5d2:	44 89 6b 28          	mov    %r13d,0x28(%rbx)
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
  10d5d6:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    current_subgraph_index_ = subgraph_idx;
  10d5da:	44 89 ee             	mov    %r13d,%esi
    for (size_t i = 0; i < operators_size; ++i) {
  10d5dd:	45 31 ff             	xor    %r15d,%r15d
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
  10d5e0:	e8 53 5b 00 00       	call   113138 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
  10d5e5:	89 45 cc             	mov    %eax,-0x34(%rbp)
    for (size_t i = 0; i < operators_size; ++i) {
  10d5e8:	4c 89 e8             	mov    %r13,%rax
  10d5eb:	48 c1 e0 04          	shl    $0x4,%rax
  10d5ef:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  10d5f3:	8b 45 cc             	mov    -0x34(%rbp),%eax
  10d5f6:	49 39 c7             	cmp    %rax,%r15
  10d5f9:	73 47                	jae    10d642 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x96>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
  10d5fb:	48 8b 43 20          	mov    0x20(%rbx),%rax
  10d5ff:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  10d603:	4d 6b e7 58          	imul   $0x58,%r15,%r12
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
        init_data_size = node->custom_initial_data_size;
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
        init_data_size = 0;
  10d607:	31 d2                	xor    %edx,%edx
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
  10d609:	4c 03 24 08          	add    (%rax,%rcx,1),%r12
      const TfLiteRegistration* registration =
  10d60d:	49 8b 44 24 50       	mov    0x50(%r12),%rax
        init_data = reinterpret_cast<const char*>(node->builtin_data);
  10d612:	49 8b 74 24 28       	mov    0x28(%r12),%rsi
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
  10d617:	49 8b 7c 24 30       	mov    0x30(%r12),%rdi
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
  10d61c:	83 78 28 20          	cmpl   $0x20,0x28(%rax)
  10d620:	75 08                	jne    10d62a <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x7e>
        init_data_size = node->custom_initial_data_size;
  10d622:	49 63 54 24 38       	movslq 0x38(%r12),%rdx
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
  10d627:	48 89 fe             	mov    %rdi,%rsi
      }
      if (registration->init) {
  10d62a:	48 8b 00             	mov    (%rax),%rax
  10d62d:	48 85 c0             	test   %rax,%rax
  10d630:	74 0b                	je     10d63d <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x91>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
  10d632:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
  10d636:	ff d0                	call   *%rax
        node->user_data =
  10d638:	49 89 44 24 20       	mov    %rax,0x20(%r12)
    for (size_t i = 0; i < operators_size; ++i) {
  10d63d:	49 ff c7             	inc    %r15
  10d640:	eb b1                	jmp    10d5f3 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x47>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
  10d642:	49 ff c5             	inc    %r13
  10d645:	eb 80                	jmp    10d5c7 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x1b>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
  10d647:	44 89 73 28          	mov    %r14d,0x28(%rbx)

  return kTfLiteOk;
}
  10d64b:	48 83 c4 18          	add    $0x18,%rsp
  10d64f:	31 c0                	xor    %eax,%eax
  10d651:	5b                   	pop    %rbx
  10d652:	41 5c                	pop    %r12
  10d654:	41 5d                	pop    %r13
  10d656:	41 5e                	pop    %r14
  10d658:	41 5f                	pop    %r15
  10d65a:	5d                   	pop    %rbp
  10d65b:	c3                   	ret    

000000000010d65c <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::FreeSubgraphs() {
  10d65c:	55                   	push   %rbp
  10d65d:	48 89 e5             	mov    %rsp,%rbp
  10d660:	41 57                	push   %r15
  10d662:	41 56                	push   %r14
  10d664:	41 55                	push   %r13
  10d666:	41 54                	push   %r12
  int previous_subgraph_idx = current_subgraph_index_;

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
  10d668:	45 31 e4             	xor    %r12d,%r12d
TfLiteStatus MicroGraph::FreeSubgraphs() {
  10d66b:	53                   	push   %rbx
  10d66c:	48 89 fb             	mov    %rdi,%rbx
  10d66f:	48 83 ec 18          	sub    $0x18,%rsp
  int previous_subgraph_idx = current_subgraph_index_;
  10d673:	44 8b 77 28          	mov    0x28(%rdi),%r14d
  10d677:	48 8b 43 30          	mov    0x30(%rbx),%rax
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
  10d67b:	8b 00                	mov    (%rax),%eax
  10d67d:	49 39 c4             	cmp    %rax,%r12
  10d680:	73 5c                	jae    10d6de <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x82>
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
  10d682:	44 89 63 28          	mov    %r12d,0x28(%rbx)
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
  10d686:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    current_subgraph_index_ = subgraph_idx;
  10d68a:	44 89 e6             	mov    %r12d,%esi
    for (size_t i = 0; i < operators_size; ++i) {
  10d68d:	45 31 ed             	xor    %r13d,%r13d
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
  10d690:	e8 a3 5a 00 00       	call   113138 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
  10d695:	4c 89 e2             	mov    %r12,%rdx
  10d698:	48 c1 e2 04          	shl    $0x4,%rdx
  10d69c:	41 89 c7             	mov    %eax,%r15d
  10d69f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  10d6a3:	4d 39 fd             	cmp    %r15,%r13
  10d6a6:	73 31                	jae    10d6d9 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x7d>
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
  10d6a8:	48 8b 4b 20          	mov    0x20(%rbx),%rcx
  10d6ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  10d6b0:	49 6b d5 58          	imul   $0x58,%r13,%rdx
  10d6b4:	48 03 14 01          	add    (%rcx,%rax,1),%rdx
      const TfLiteRegistration* registration =
  10d6b8:	48 8b 4a 50          	mov    0x50(%rdx),%rcx
          subgraph_allocations_[subgraph_idx]
              .node_and_registrations[i]
              .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
  10d6bc:	48 85 c9             	test   %rcx,%rcx
  10d6bf:	74 13                	je     10d6d4 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x78>
  10d6c1:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  10d6c5:	48 85 c9             	test   %rcx,%rcx
  10d6c8:	74 0a                	je     10d6d4 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x78>
        registration->free(context_, node->user_data);
  10d6ca:	48 8b 72 20          	mov    0x20(%rdx),%rsi
  10d6ce:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
  10d6d2:	ff d1                	call   *%rcx
    for (size_t i = 0; i < operators_size; ++i) {
  10d6d4:	49 ff c5             	inc    %r13
  10d6d7:	eb ca                	jmp    10d6a3 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x47>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
  10d6d9:	49 ff c4             	inc    %r12
  10d6dc:	eb 99                	jmp    10d677 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x1b>
      }
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
  10d6de:	44 89 73 28          	mov    %r14d,0x28(%rbx)

  return kTfLiteOk;
}
  10d6e2:	48 83 c4 18          	add    $0x18,%rsp
  10d6e6:	31 c0                	xor    %eax,%eax
  10d6e8:	5b                   	pop    %rbx
  10d6e9:	41 5c                	pop    %r12
  10d6eb:	41 5d                	pop    %r13
  10d6ed:	41 5e                	pop    %r14
  10d6ef:	41 5f                	pop    %r15
  10d6f1:	5d                   	pop    %rbp
  10d6f2:	c3                   	ret    
  10d6f3:	90                   	nop

000000000010d6f4 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>:
TfLiteStatus MicroGraph::PrepareSubgraphs() {
  10d6f4:	55                   	push   %rbp
  10d6f5:	48 89 e5             	mov    %rsp,%rbp
  10d6f8:	41 57                	push   %r15
  10d6fa:	49 89 ff             	mov    %rdi,%r15
  10d6fd:	41 56                	push   %r14
  10d6ff:	41 55                	push   %r13
  10d701:	41 54                	push   %r12
  10d703:	53                   	push   %rbx
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
  10d704:	31 db                	xor    %ebx,%ebx
TfLiteStatus MicroGraph::PrepareSubgraphs() {
  10d706:	48 83 ec 18          	sub    $0x18,%rsp
  int previous_subgraph_idx = current_subgraph_index_;
  10d70a:	44 8b 77 28          	mov    0x28(%rdi),%r14d
  10d70e:	49 8b 47 30          	mov    0x30(%r15),%rax
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
  10d712:	8b 00                	mov    (%rax),%eax
  10d714:	48 39 c3             	cmp    %rax,%rbx
  10d717:	0f 83 90 00 00 00    	jae    10d7ad <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb9>
    current_subgraph_index_ = subgraph_idx;
  10d71d:	41 89 5f 28          	mov    %ebx,0x28(%r15)
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
  10d721:	49 8b 7f 10          	mov    0x10(%r15),%rdi
    current_subgraph_index_ = subgraph_idx;
  10d725:	89 de                	mov    %ebx,%esi
    for (size_t i = 0; i < operators_size; ++i) {
  10d727:	45 31 e4             	xor    %r12d,%r12d
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
  10d72a:	e8 09 5a 00 00       	call   113138 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
  10d72f:	48 89 da             	mov    %rbx,%rdx
  10d732:	48 c1 e2 04          	shl    $0x4,%rdx
  10d736:	41 89 c5             	mov    %eax,%r13d
  10d739:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  10d73d:	4d 39 ec             	cmp    %r13,%r12
  10d740:	73 63                	jae    10d7a5 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xb1>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
  10d742:	49 8b 47 20          	mov    0x20(%r15),%rax
  10d746:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  10d74a:	49 6b f4 58          	imul   $0x58,%r12,%rsi
  10d74e:	48 03 34 10          	add    (%rax,%rdx,1),%rsi
      const TfLiteRegistration* registration =
  10d752:	4c 8b 46 50          	mov    0x50(%rsi),%r8
      if (registration->prepare != nullptr) {
  10d756:	49 8b 40 10          	mov    0x10(%r8),%rax
  10d75a:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  10d75e:	48 85 c0             	test   %rax,%rax
  10d761:	74 31                	je     10d794 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xa0>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
  10d763:	49 8b 7f 08          	mov    0x8(%r15),%rdi
  10d767:	ff d0                	call   *%rax
        if (prepare_status != kTfLiteOk) {
  10d769:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  10d76d:	85 c0                	test   %eax,%eax
        TfLiteStatus prepare_status = registration->prepare(context_, node);
  10d76f:	89 c1                	mov    %eax,%ecx
        if (prepare_status != kTfLiteOk) {
  10d771:	74 21                	je     10d794 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xa0>
          MicroPrintf("Node %s (number %df) failed to prepare with status %d",
  10d773:	4c 89 c7             	mov    %r8,%rdi
  10d776:	e8 18 5a 00 00       	call   113193 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
  10d77b:	4c 89 e2             	mov    %r12,%rdx
  10d77e:	bf 56 e5 11 00       	mov    $0x11e556,%edi
  10d783:	48 89 c6             	mov    %rax,%rsi
  10d786:	31 c0                	xor    %eax,%eax
  10d788:	e8 5c 52 00 00       	call   1129e9 <_Z11MicroPrintfPKcz>
          return kTfLiteError;
  10d78d:	b8 01 00 00 00       	mov    $0x1,%eax
  10d792:	eb 1f                	jmp    10d7b3 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0xbf>
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
  10d794:	49 8b 7f 18          	mov    0x18(%r15),%rdi
  10d798:	44 89 e6             	mov    %r12d,%esi
    for (size_t i = 0; i < operators_size; ++i) {
  10d79b:	49 ff c4             	inc    %r12
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
  10d79e:	e8 07 12 00 00       	call   10e9aa <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
  10d7a3:	eb 98                	jmp    10d73d <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x49>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
  10d7a5:	48 ff c3             	inc    %rbx
  10d7a8:	e9 61 ff ff ff       	jmp    10d70e <_ZN6tflite10MicroGraph16PrepareSubgraphsEv+0x1a>
  current_subgraph_index_ = previous_subgraph_idx;
  10d7ad:	45 89 77 28          	mov    %r14d,0x28(%r15)
  return kTfLiteOk;
  10d7b1:	31 c0                	xor    %eax,%eax
}
  10d7b3:	48 83 c4 18          	add    $0x18,%rsp
  10d7b7:	5b                   	pop    %rbx
  10d7b8:	41 5c                	pop    %r12
  10d7ba:	41 5d                	pop    %r13
  10d7bc:	41 5e                	pop    %r14
  10d7be:	41 5f                	pop    %r15
  10d7c0:	5d                   	pop    %rbp
  10d7c1:	c3                   	ret    

000000000010d7c2 <_ZN6tflite10MicroGraph12NumSubgraphsEv>:
  }

  return kTfLiteOk;
}

int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
  10d7c2:	55                   	push   %rbp
  10d7c3:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
  10d7c7:	48 89 e5             	mov    %rsp,%rbp
  10d7ca:	e8 7b fd ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10d7cf:	5d                   	pop    %rbp
  10d7d0:	8b 00                	mov    (%rax),%eax
  10d7d2:	c3                   	ret    
  10d7d3:	90                   	nop

000000000010d7d4 <_ZN6tflite19ScopedMicroProfilerD1Ev>:
      event_handle_ = profiler_->BeginEvent(tag);
    }
  }

  ~ScopedMicroProfiler() {
    if (profiler_ != nullptr) {
  10d7d4:	48 8b 47 08          	mov    0x8(%rdi),%rax
  10d7d8:	48 85 c0             	test   %rax,%rax
  10d7db:	74 0e                	je     10d7eb <_ZN6tflite19ScopedMicroProfilerD1Ev+0x17>
      profiler_->EndEvent(event_handle_);
  10d7dd:	48 8b 10             	mov    (%rax),%rdx
  10d7e0:	8b 37                	mov    (%rdi),%esi
  10d7e2:	48 89 c7             	mov    %rax,%rdi
  10d7e5:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  10d7e9:	ff e2                	jmp    *%rdx
    }
  }
  10d7eb:	c3                   	ret    

000000000010d7ec <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:
TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
  10d7ec:	55                   	push   %rbp
  10d7ed:	48 89 e5             	mov    %rsp,%rbp
  10d7f0:	41 57                	push   %r15
  10d7f2:	41 56                	push   %r14
  10d7f4:	41 55                	push   %r13
  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
  10d7f6:	4c 63 ee             	movslq %esi,%r13
TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
  10d7f9:	41 54                	push   %r12
  10d7fb:	53                   	push   %rbx
  10d7fc:	48 83 ec 28          	sub    $0x28,%rsp
  10d800:	48 8b 47 30          	mov    0x30(%rdi),%rax
  int previous_subgraph_idx = current_subgraph_index_;
  10d804:	44 8b 7f 28          	mov    0x28(%rdi),%r15d
  current_subgraph_index_ = subgraph_idx;
  10d808:	89 77 28             	mov    %esi,0x28(%rdi)
  10d80b:	8b 08                	mov    (%rax),%ecx
  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
  10d80d:	49 39 cd             	cmp    %rcx,%r13
  10d810:	72 19                	jb     10d82b <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x3f>
  10d812:	48 89 ca             	mov    %rcx,%rdx
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
  10d815:	bf 8c e5 11 00       	mov    $0x11e58c,%edi
  10d81a:	31 c0                	xor    %eax,%eax
    return kTfLiteError;
  10d81c:	bb 01 00 00 00       	mov    $0x1,%ebx
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
  10d821:	e8 c3 51 00 00       	call   1129e9 <_Z11MicroPrintfPKcz>
    return kTfLiteError;
  10d826:	e9 d8 00 00 00       	jmp    10d903 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x117>
  10d82b:	49 89 fe             	mov    %rdi,%r14
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
  10d82e:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
  10d832:	49 c1 e5 04          	shl    $0x4,%r13
  for (size_t i = 0; i < operators_size; ++i) {
  10d836:	45 31 e4             	xor    %r12d,%r12d
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
  10d839:	e8 fa 58 00 00       	call   113138 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
  10d83e:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  for (size_t i = 0; i < operators_size; ++i) {
  10d841:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  10d844:	49 39 c4             	cmp    %rax,%r12
  10d847:	0f 83 b0 00 00 00    	jae    10d8fd <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x111>
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
  10d84d:	49 8b 46 20          	mov    0x20(%r14),%rax
  10d851:	49 6b dc 58          	imul   $0x58,%r12,%rbx
  10d855:	4a 03 1c 28          	add    (%rax,%r13,1),%rbx
    const TfLiteRegistration* registration = subgraph_allocations_[subgraph_idx]
  10d859:	48 8b 43 50          	mov    0x50(%rbx),%rax
  10d85d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
        reinterpret_cast<MicroProfiler*>(context_->profiler));
  10d861:	49 8b 46 08          	mov    0x8(%r14),%rax
  10d865:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  10d869:	48 8b 48 68          	mov    0x68(%rax),%rcx
  10d86d:	e8 21 59 00 00       	call   113193 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
  10d872:	48 89 c6             	mov    %rax,%rsi
      : profiler_(profiler) {
  10d875:	31 c0                	xor    %eax,%eax
  10d877:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  10d87b:	89 45 c0             	mov    %eax,-0x40(%rbp)
    if (profiler_ != nullptr) {
  10d87e:	48 85 c9             	test   %rcx,%rcx
  10d881:	74 0c                	je     10d88f <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xa3>
      event_handle_ = profiler_->BeginEvent(tag);
  10d883:	48 8b 01             	mov    (%rcx),%rax
  10d886:	48 89 cf             	mov    %rcx,%rdi
  10d889:	ff 50 10             	call   *0x10(%rax)
  10d88c:	89 45 c0             	mov    %eax,-0x40(%rbp)
    TFLITE_DCHECK(registration->invoke);
  10d88f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10d893:	48 8b 40 18          	mov    0x18(%rax),%rax
  10d897:	48 85 c0             	test   %rax,%rax
  10d89a:	75 05                	jne    10d8a1 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xb5>
  10d89c:	e8 23 45 00 00       	call   111dc4 <abort>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
  10d8a1:	49 8b 7e 08          	mov    0x8(%r14),%rdi
  10d8a5:	48 89 de             	mov    %rbx,%rsi
  10d8a8:	ff d0                	call   *%rax
    allocator_->ResetTempAllocations();
  10d8aa:	49 8b 7e 18          	mov    0x18(%r14),%rdi
    TfLiteStatus invoke_status = registration->invoke(context_, node);
  10d8ae:	89 c3                	mov    %eax,%ebx
    allocator_->ResetTempAllocations();
  10d8b0:	48 8b 07             	mov    (%rdi),%rax
  10d8b3:	ff 50 10             	call   *0x10(%rax)
    if (invoke_status == kTfLiteError) {
  10d8b6:	83 fb 01             	cmp    $0x1,%ebx
  10d8b9:	75 22                	jne    10d8dd <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0xf1>
      MicroPrintf("Node %s (number %d) failed to invoke with status %d",
  10d8bb:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  10d8bf:	b9 01 00 00 00       	mov    $0x1,%ecx
  10d8c4:	e8 ca 58 00 00       	call   113193 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
  10d8c9:	4c 89 e2             	mov    %r12,%rdx
  10d8cc:	bf be e5 11 00       	mov    $0x11e5be,%edi
  10d8d1:	48 89 c6             	mov    %rax,%rsi
  10d8d4:	31 c0                	xor    %eax,%eax
  10d8d6:	e8 0e 51 00 00       	call   1129e9 <_Z11MicroPrintfPKcz>
      return kTfLiteError;
  10d8db:	eb 15                	jmp    10d8f2 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x106>
    } else if (invoke_status != kTfLiteOk) {
  10d8dd:	85 db                	test   %ebx,%ebx
  10d8df:	75 11                	jne    10d8f2 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x106>
  }
  10d8e1:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  for (size_t i = 0; i < operators_size; ++i) {
  10d8e5:	49 ff c4             	inc    %r12
  }
  10d8e8:	e8 e7 fe ff ff       	call   10d7d4 <_ZN6tflite19ScopedMicroProfilerD1Ev>
  for (size_t i = 0; i < operators_size; ++i) {
  10d8ed:	e9 4f ff ff ff       	jmp    10d841 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x55>
  }
  10d8f2:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  10d8f6:	e8 d9 fe ff ff       	call   10d7d4 <_ZN6tflite19ScopedMicroProfilerD1Ev>
  10d8fb:	eb 06                	jmp    10d903 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x117>
  current_subgraph_index_ = previous_subgraph_idx;
  10d8fd:	45 89 7e 28          	mov    %r15d,0x28(%r14)
  return kTfLiteOk;
  10d901:	31 db                	xor    %ebx,%ebx
}
  10d903:	48 83 c4 28          	add    $0x28,%rsp
  10d907:	89 d8                	mov    %ebx,%eax
  10d909:	5b                   	pop    %rbx
  10d90a:	41 5c                	pop    %r12
  10d90c:	41 5d                	pop    %r13
  10d90e:	41 5e                	pop    %r14
  10d910:	41 5f                	pop    %r15
  10d912:	5d                   	pop    %rbp
  10d913:	c3                   	ret    

000000000010d914 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>:
MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
  10d914:	55                   	push   %rbp
      current_subgraph_index_(0) {
  10d915:	45 31 c9             	xor    %r9d,%r9d
  10d918:	45 31 d2             	xor    %r10d,%r10d
MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
  10d91b:	48 89 e5             	mov    %rsp,%rbp
  10d91e:	53                   	push   %rbx
  10d91f:	48 89 fb             	mov    %rdi,%rbx
  10d922:	41 50                	push   %r8
      current_subgraph_index_(0) {
  10d924:	48 c7 07 c0 d4 11 00 	movq   $0x11d4c0,(%rdi)
    : context_(context),
  10d92b:	48 89 77 08          	mov    %rsi,0x8(%rdi)
      model_(model),
  10d92f:	48 89 57 10          	mov    %rdx,0x10(%rdi)
      allocator_(allocator),
  10d933:	48 89 4f 18          	mov    %rcx,0x18(%rdi)
      current_subgraph_index_(0) {
  10d937:	4c 89 4f 20          	mov    %r9,0x20(%rdi)
  10d93b:	44 89 57 28          	mov    %r10d,0x28(%rdi)
  if (model != nullptr) {
  10d93f:	48 85 d2             	test   %rdx,%rdx
  10d942:	74 0c                	je     10d950 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE+0x3c>
  10d944:	48 89 d7             	mov    %rdx,%rdi
    subgraphs_ = model->subgraphs();
  10d947:	e8 fe fb ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10d94c:	48 89 43 30          	mov    %rax,0x30(%rbx)
}
  10d950:	58                   	pop    %rax
  10d951:	5b                   	pop    %rbx
  10d952:	5d                   	pop    %rbp
  10d953:	c3                   	ret    

000000000010d954 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

void MicroGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
  subgraph_allocations_ = subgraph_allocations;
  10d954:	48 89 77 20          	mov    %rsi,0x20(%rdi)
}
  10d958:	c3                   	ret    
  10d959:	90                   	nop

000000000010d95a <_ZNK11flatbuffers6VectorIiE3GetEj>:
    FLATBUFFERS_ASSERT(i < size());
  10d95a:	3b 37                	cmp    (%rdi),%esi
  10d95c:	72 1d                	jb     10d97b <_ZNK11flatbuffers6VectorIiE3GetEj+0x21>
  return_type Get(uoffset_t i) const {
  10d95e:	55                   	push   %rbp
    FLATBUFFERS_ASSERT(i < size());
  10d95f:	b9 55 e3 11 00       	mov    $0x11e355,%ecx
  10d964:	ba 60 e3 11 00       	mov    $0x11e360,%edx
  10d969:	be 06 01 00 00       	mov    $0x106,%esi
  10d96e:	bf 07 e4 11 00       	mov    $0x11e407,%edi
  return_type Get(uoffset_t i) const {
  10d973:	48 89 e5             	mov    %rsp,%rbp
    FLATBUFFERS_ASSERT(i < size());
  10d976:	e8 f5 53 ff ff       	call   102d70 <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
  10d97b:	89 f6                	mov    %esi,%esi
    return IndirectHelper<T>::Read(Data(), i);
  10d97d:	8b 44 b7 04          	mov    0x4(%rdi,%rsi,4),%eax
  }
  10d981:	c3                   	ret    

000000000010d982 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:
TfLiteStatus MicroGraph::ResetVariableTensors() {
  10d982:	55                   	push   %rbp
  10d983:	48 89 e5             	mov    %rsp,%rbp
  10d986:	41 57                	push   %r15
  10d988:	41 56                	push   %r14
  10d98a:	49 89 fe             	mov    %rdi,%r14
  10d98d:	41 55                	push   %r13
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
  10d98f:	45 31 ed             	xor    %r13d,%r13d
TfLiteStatus MicroGraph::ResetVariableTensors() {
  10d992:	41 54                	push   %r12
  10d994:	53                   	push   %rbx
  10d995:	48 83 ec 38          	sub    $0x38,%rsp
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
  10d999:	49 8b 7e 30          	mov    0x30(%r14),%rdi
  10d99d:	8b 07                	mov    (%rdi),%eax
  10d99f:	49 39 c5             	cmp    %rax,%r13
  10d9a2:	0f 83 5c 01 00 00    	jae    10db04 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x182>
  return_type operator[](uoffset_t i) const { return Get(i); }
  10d9a8:	44 89 ee             	mov    %r13d,%esi
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
  10d9ab:	45 31 e4             	xor    %r12d,%r12d
  10d9ae:	e8 c3 fb ff ff       	call   10d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  10d9b3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  10d9b7:	4c 89 e8             	mov    %r13,%rax
  10d9ba:	48 c1 e0 04          	shl    $0x4,%rax
  10d9be:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    auto field_offset = GetOptionalFieldOffset(field);
  10d9c2:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  10d9c6:	be 04 00 00 00       	mov    $0x4,%esi
  10d9cb:	e8 64 fb ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10d9d0:	66 85 c0             	test   %ax,%ax
  10d9d3:	0f 84 2f 01 00 00    	je     10db08 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x186>
    auto p = data_ + field_offset;
  10d9d9:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  10d9dd:	0f b7 c0             	movzwl %ax,%eax
  10d9e0:	48 01 c8             	add    %rcx,%rax
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10d9e3:	8b 10                	mov    (%rax),%edx
  10d9e5:	48 01 d0             	add    %rdx,%rax
  uoffset_t size() const { return EndianScalar(length_); }
  10d9e8:	8b 08                	mov    (%rax),%ecx
  10d9ea:	48 89 ca             	mov    %rcx,%rdx
  10d9ed:	49 39 cc             	cmp    %rcx,%r12
  10d9f0:	0f 83 06 01 00 00    	jae    10dafc <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x17a>
    FLATBUFFERS_ASSERT(i < size());
  10d9f6:	41 39 d4             	cmp    %edx,%r12d
  10d9f9:	72 0f                	jb     10da0a <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x88>
  10d9fb:	b9 55 e3 11 00       	mov    $0x11e355,%ecx
  10da00:	ba f2 e5 11 00       	mov    $0x11e5f2,%edx
  10da05:	e9 bc 00 00 00       	jmp    10dac6 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x144>
  static return_type Read(const uint8_t *p, uoffset_t i) {
  10da0a:	49 ff c4             	inc    %r12
    auto field_offset = GetOptionalFieldOffset(field);
  10da0d:	be 0e 00 00 00       	mov    $0xe,%esi
    p += i * sizeof(uoffset_t);
  10da12:	4a 8d 1c a0          	lea    (%rax,%r12,4),%rbx
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
  10da16:	8b 03                	mov    (%rbx),%eax
  10da18:	48 01 c3             	add    %rax,%rbx
    auto field_offset = GetOptionalFieldOffset(field);
  10da1b:	48 89 df             	mov    %rbx,%rdi
  10da1e:	e8 11 fb ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  10da23:	66 85 c0             	test   %ax,%ax
  10da26:	74 9a                	je     10d9c2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x40>
  10da28:	0f b7 c0             	movzwl %ax,%eax
      if (tensor->is_variable()) {
  10da2b:	80 3c 03 00          	cmpb   $0x0,(%rbx,%rax,1)
  10da2f:	74 91                	je     10d9c2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x40>
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
  10da31:	49 8b 46 20          	mov    0x20(%r14),%rax
  10da35:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  10da39:	4d 6b fc 18          	imul   $0x18,%r12,%r15
  10da3d:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  10da41:	48 8b 44 08 08       	mov    0x8(%rax,%rcx,1),%rax
  10da46:	4a 8d 7c 38 e8       	lea    -0x18(%rax,%r15,1),%rdi
  10da4b:	e8 af 51 00 00       	call   112bff <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm>
  10da50:	85 c0                	test   %eax,%eax
  10da52:	0f 85 b9 00 00 00    	jne    10db11 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x18f>
    auto field_offset = GetOptionalFieldOffset(field);
  10da58:	be 06 00 00 00       	mov    $0x6,%esi
  10da5d:	48 89 df             	mov    %rbx,%rdi
  10da60:	e8 cf fa ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  10da65:	66 85 c0             	test   %ax,%ax
  10da68:	74 70                	je     10dada <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x158>
  10da6a:	0f b7 c0             	movzwl %ax,%eax
        if (tensor->type() == tflite::TensorType_INT8) {
  10da6d:	80 3c 03 09          	cmpb   $0x9,(%rbx,%rax,1)
  10da71:	75 67                	jne    10dada <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x158>
    auto field_offset = GetOptionalFieldOffset(field);
  10da73:	be 0c 00 00 00       	mov    $0xc,%esi
  10da78:	48 89 df             	mov    %rbx,%rdi
  10da7b:	e8 b4 fa ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10da80:	31 d2                	xor    %edx,%edx
  10da82:	66 85 c0             	test   %ax,%ax
  10da85:	74 0b                	je     10da92 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x110>
    auto p = data_ + field_offset;
  10da87:	0f b7 c0             	movzwl %ax,%eax
  10da8a:	48 01 c3             	add    %rax,%rbx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10da8d:	8b 13                	mov    (%rbx),%edx
  10da8f:	48 01 da             	add    %rbx,%rdx
    auto field_offset = GetOptionalFieldOffset(field);
  10da92:	be 0a 00 00 00       	mov    $0xa,%esi
  10da97:	48 89 d7             	mov    %rdx,%rdi
  10da9a:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  10da9e:	e8 91 fa ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10daa3:	66 85 c0             	test   %ax,%ax
  10daa6:	74 60                	je     10db08 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x186>
    auto p = data_ + field_offset;
  10daa8:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  10daac:	0f b7 c0             	movzwl %ax,%eax
  10daaf:	48 01 c2             	add    %rax,%rdx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10dab2:	8b 02                	mov    (%rdx),%eax
  10dab4:	48 01 c2             	add    %rax,%rdx
    FLATBUFFERS_ASSERT(i < size());
  10dab7:	83 3a 00             	cmpl   $0x0,(%rdx)
  10daba:	75 19                	jne    10dad5 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x153>
  10dabc:	b9 55 e3 11 00       	mov    $0x11e355,%ecx
  10dac1:	ba cb e6 11 00       	mov    $0x11e6cb,%edx
  10dac6:	be 06 01 00 00       	mov    $0x106,%esi
  10dacb:	bf 07 e4 11 00       	mov    $0x11e407,%edi
  10dad0:	e8 9b 52 ff ff       	call   102d70 <__assert_func>
          value = tensor->quantization()->zero_point()->Get(0);
  10dad5:	8b 42 04             	mov    0x4(%rdx),%eax
  10dad8:	eb 02                	jmp    10dadc <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x15a>
        int value = 0;
  10dada:	31 c0                	xor    %eax,%eax
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
  10dadc:	49 8b 56 20          	mov    0x20(%r14),%rdx
  10dae0:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  10dae4:	48 8b 54 0a 08       	mov    0x8(%rdx,%rcx,1),%rdx
  10dae9:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  10daed:	4a 8b 54 3a e8       	mov    -0x18(%rdx,%r15,1),%rdx
  10daf2:	48 89 d7             	mov    %rdx,%rdi
  10daf5:	f3 aa                	rep stos %al,%es:(%rdi)
  10daf7:	e9 c6 fe ff ff       	jmp    10d9c2 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x40>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
  10dafc:	49 ff c5             	inc    %r13
  10daff:	e9 95 fe ff ff       	jmp    10d999 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x17>
  return kTfLiteOk;
  10db04:	31 c0                	xor    %eax,%eax
  10db06:	eb 09                	jmp    10db11 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x18f>
  uoffset_t size() const { return EndianScalar(length_); }
  10db08:	8b 04 25 00 00 00 00 	mov    0x0,%eax
  10db0f:	0f 0b                	ud2    
}
  10db11:	48 83 c4 38          	add    $0x38,%rsp
  10db15:	5b                   	pop    %rbx
  10db16:	41 5c                	pop    %r12
  10db18:	41 5d                	pop    %r13
  10db1a:	41 5e                	pop    %r14
  10db1c:	41 5f                	pop    %r15
  10db1e:	5d                   	pop    %rbp
  10db1f:	c3                   	ret    

000000000010db20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
  10db20:	55                   	push   %rbp
    auto field_offset = GetOptionalFieldOffset(field);
  10db21:	0f b7 f6             	movzwl %si,%esi
  template<typename P> P GetPointer(voffset_t field) {
  10db24:	48 89 e5             	mov    %rsp,%rbp
  10db27:	53                   	push   %rbx
  10db28:	48 89 fb             	mov    %rdi,%rbx
  10db2b:	51                   	push   %rcx
    auto field_offset = GetOptionalFieldOffset(field);
  10db2c:	e8 03 fa ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
  10db31:	31 d2                	xor    %edx,%edx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10db33:	66 85 c0             	test   %ax,%ax
  10db36:	74 0b                	je     10db43 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t+0x23>
    auto p = data_ + field_offset;
  10db38:	0f b7 c0             	movzwl %ax,%eax
  10db3b:	48 01 c3             	add    %rax,%rbx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10db3e:	8b 13                	mov    (%rbx),%edx
  10db40:	48 01 da             	add    %rbx,%rdx
                        : nullptr;
  }
  10db43:	48 89 d0             	mov    %rdx,%rax
  10db46:	5a                   	pop    %rdx
  10db47:	5b                   	pop    %rbx
  10db48:	5d                   	pop    %rbp
  10db49:	c3                   	ret    

000000000010db4a <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
}

TfLiteEvalTensor* MicroGraph::GetSubgraphInput(int subgraph_idx,
                                               int input_idx) {
  10db4a:	55                   	push   %rbp
  10db4b:	48 89 e5             	mov    %rsp,%rbp
  10db4e:	41 55                	push   %r13
  10db50:	41 89 d5             	mov    %edx,%r13d
  10db53:	41 54                	push   %r12
  10db55:	49 89 fc             	mov    %rdi,%r12
  10db58:	53                   	push   %rbx
  10db59:	48 63 de             	movslq %esi,%rbx
  10db5c:	50                   	push   %rax
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
  10db5d:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
  10db61:	e8 e4 f9 ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10db66:	89 de                	mov    %ebx,%esi
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
  10db68:	48 c1 e3 04          	shl    $0x4,%rbx
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
  10db6c:	48 89 c7             	mov    %rax,%rdi
  10db6f:	e8 02 fa ff ff       	call   10d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  template<typename P> P GetPointer(voffset_t field) const {
    return const_cast<Table *>(this)->GetPointer<P>(field);
  10db74:	be 06 00 00 00       	mov    $0x6,%esi
  10db79:	48 89 c7             	mov    %rax,%rdi
  10db7c:	e8 9f ff ff ff       	call   10db20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  10db81:	44 89 ee             	mov    %r13d,%esi
  10db84:	48 89 c7             	mov    %rax,%rdi
  10db87:	e8 ce fd ff ff       	call   10d95a <_ZNK11flatbuffers6VectorIiE3GetEj>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
  10db8c:	49 03 5c 24 20       	add    0x20(%r12),%rbx
  10db91:	48 98                	cltq   
  10db93:	48 6b c0 18          	imul   $0x18,%rax,%rax
  10db97:	48 03 43 08          	add    0x8(%rbx),%rax
}
  10db9b:	5a                   	pop    %rdx
  10db9c:	5b                   	pop    %rbx
  10db9d:	41 5c                	pop    %r12
  10db9f:	41 5d                	pop    %r13
  10dba1:	5d                   	pop    %rbp
  10dba2:	c3                   	ret    
  10dba3:	90                   	nop

000000000010dba4 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:
size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
}

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
  10dba4:	55                   	push   %rbp
  10dba5:	48 89 e5             	mov    %rsp,%rbp
  10dba8:	41 55                	push   %r13
  10dbaa:	41 89 d5             	mov    %edx,%r13d
  10dbad:	41 54                	push   %r12
  10dbaf:	49 89 fc             	mov    %rdi,%r12
  10dbb2:	53                   	push   %rbx
  10dbb3:	48 63 de             	movslq %esi,%rbx
  10dbb6:	50                   	push   %rax
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
  10dbb7:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
  10dbbb:	e8 8a f9 ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10dbc0:	89 de                	mov    %ebx,%esi
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
  10dbc2:	48 c1 e3 04          	shl    $0x4,%rbx
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
  10dbc6:	48 89 c7             	mov    %rax,%rdi
  10dbc9:	e8 a8 f9 ff ff       	call   10d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  10dbce:	be 08 00 00 00       	mov    $0x8,%esi
  10dbd3:	48 89 c7             	mov    %rax,%rdi
  10dbd6:	e8 45 ff ff ff       	call   10db20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  10dbdb:	44 89 ee             	mov    %r13d,%esi
  10dbde:	48 89 c7             	mov    %rax,%rdi
  10dbe1:	e8 74 fd ff ff       	call   10d95a <_ZNK11flatbuffers6VectorIiE3GetEj>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
  10dbe6:	49 03 5c 24 20       	add    0x20(%r12),%rbx
  10dbeb:	48 98                	cltq   
  10dbed:	48 6b c0 18          	imul   $0x18,%rax,%rax
  10dbf1:	48 03 43 08          	add    0x8(%rbx),%rax
}
  10dbf5:	5a                   	pop    %rdx
  10dbf6:	5b                   	pop    %rbx
  10dbf7:	41 5c                	pop    %r12
  10dbf9:	41 5d                	pop    %r13
  10dbfb:	5d                   	pop    %rbp
  10dbfc:	c3                   	ret    
  10dbfd:	90                   	nop

000000000010dbfe <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
  10dbfe:	55                   	push   %rbp
  10dbff:	48 89 e5             	mov    %rsp,%rbp
  10dc02:	48 83 ec 10          	sub    $0x10,%rsp
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
  10dc06:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
  10dc0a:	89 75 fc             	mov    %esi,-0x4(%rbp)
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
  10dc0d:	e8 38 f9 ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10dc12:	8b 75 fc             	mov    -0x4(%rbp),%esi
  10dc15:	48 89 c7             	mov    %rax,%rdi
  10dc18:	e8 59 f9 ff ff       	call   10d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  10dc1d:	be 06 00 00 00       	mov    $0x6,%esi
  10dc22:	48 89 c7             	mov    %rax,%rdi
  10dc25:	e8 f6 fe ff ff       	call   10db20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  10dc2a:	8b 00                	mov    (%rax),%eax
}
  10dc2c:	c9                   	leave  
  10dc2d:	c3                   	ret    

000000000010dc2e <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:
size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
  10dc2e:	55                   	push   %rbp
  10dc2f:	48 89 e5             	mov    %rsp,%rbp
  10dc32:	48 83 ec 10          	sub    $0x10,%rsp
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
  10dc36:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
  10dc3a:	89 75 fc             	mov    %esi,-0x4(%rbp)
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
  10dc3d:	e8 08 f9 ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10dc42:	8b 75 fc             	mov    -0x4(%rbp),%esi
  10dc45:	48 89 c7             	mov    %rax,%rdi
  10dc48:	e8 29 f9 ff ff       	call   10d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  10dc4d:	be 08 00 00 00       	mov    $0x8,%esi
  10dc52:	48 89 c7             	mov    %rax,%rdi
  10dc55:	e8 c6 fe ff ff       	call   10db20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  10dc5a:	8b 00                	mov    (%rax),%eax
}
  10dc5c:	c9                   	leave  
  10dc5d:	c3                   	ret    

000000000010dc5e <_ZN6tflite16MicroInterpreter24AllocatePersistentBufferEP13TfLiteContextm>:
}

void* MicroInterpreter::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                 size_t bytes) {
  return reinterpret_cast<MicroInterpreter*>(ctx->impl_)
      ->allocator_.AllocatePersistentBuffer(bytes);
  10dc5e:	48 8b 47 18          	mov    0x18(%rdi),%rax
  10dc62:	48 8b b8 d0 00 00 00 	mov    0xd0(%rax),%rdi
  10dc69:	48 8b 07             	mov    (%rdi),%rax
  10dc6c:	ff 60 18             	jmp    *0x18(%rax)
  10dc6f:	90                   	nop

000000000010dc70 <_ZN6tflite16MicroInterpreter16GetScratchBufferEP13TfLiteContexti>:

void* MicroInterpreter::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
  MicroInterpreter* interpreter =
      reinterpret_cast<MicroInterpreter*>(ctx->impl_);
  ScratchBufferHandle* handle =
      interpreter->scratch_buffer_handles_ + buffer_idx;
  10dc70:	48 8b 47 18          	mov    0x18(%rdi),%rax
  10dc74:	48 63 f6             	movslq %esi,%rsi
  return handle->data;
  10dc77:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  10dc7e:	48 8b 04 f0          	mov    (%rax,%rsi,8),%rax
}
  10dc82:	c3                   	ret    
  10dc83:	90                   	nop

000000000010dc84 <_ZN6tflite16MicroInterpreter9GetTensorEPK13TfLiteContexti>:
#endif
}

TfLiteTensor* MicroInterpreter::GetTensor(const struct TfLiteContext* context,
                                          int tensor_idx) {
  MicroInterpreter* interpreter =
  10dc84:	48 8b 47 18          	mov    0x18(%rdi),%rax
                                          int tensor_idx) {
  10dc88:	89 f1                	mov    %esi,%ecx
      static_cast<MicroInterpreter*>(context->impl_);
  return interpreter->allocator_.AllocateTempTfLiteTensor(
  10dc8a:	48 8b b8 d0 00 00 00 	mov    0xd0(%rax),%rdi
  10dc91:	48 8b 90 f8 00 00 00 	mov    0xf8(%rax),%rdx
  10dc98:	44 8b 80 00 01 00 00 	mov    0x100(%rax),%r8d
  10dc9f:	48 8b 37             	mov    (%rdi),%rsi
  10dca2:	4c 8b 4e 08          	mov    0x8(%rsi),%r9
  10dca6:	48 8b 30             	mov    (%rax),%rsi
  10dca9:	41 ff e1             	jmp    *%r9

000000000010dcac <_ZN6tflite16MicroInterpreter13GetEvalTensorEPK13TfLiteContexti>:
      interpreter->get_subgraph_index());
}

TfLiteEvalTensor* MicroInterpreter::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
  MicroInterpreter* interpreter =
  10dcac:	48 8b 47 18          	mov    0x18(%rdi),%rax
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  return &interpreter->graph_
              .GetAllocations()[interpreter->get_subgraph_index()]
  10dcb0:	48 63 90 00 01 00 00 	movslq 0x100(%rax),%rdx
              .tensors[tensor_idx];
  10dcb7:	48 c1 e2 04          	shl    $0x4,%rdx
  10dcbb:	48 03 90 f8 00 00 00 	add    0xf8(%rax),%rdx
  10dcc2:	48 63 c6             	movslq %esi,%rax
  10dcc5:	48 6b c0 18          	imul   $0x18,%rax,%rax
  10dcc9:	48 03 42 08          	add    0x8(%rdx),%rax
}
  10dccd:	c3                   	ret    

000000000010dcce <_ZN6tflite16MicroInterpreter8GetGraphEP13TfLiteContextPP14TfLiteIntArray>:

TfLiteStatus MicroInterpreter::GetGraph(struct TfLiteContext* context,
                                        TfLiteIntArray** args) {
  MicroInterpreter* interpreter =
      reinterpret_cast<MicroInterpreter*>(context->impl_);
  *args = reinterpret_cast<TfLiteIntArray*>(&interpreter->graph_);
  10dcce:	48 8b 47 18          	mov    0x18(%rdi),%rax
  10dcd2:	48 05 d8 00 00 00    	add    $0xd8,%rax
  10dcd8:	48 89 06             	mov    %rax,(%rsi)
  return kTfLiteOk;
}
  10dcdb:	31 c0                	xor    %eax,%eax
  10dcdd:	c3                   	ret    

000000000010dcde <_ZN6tflite16MicroInterpreter27RequestScratchBufferInArenaEP13TfLiteContextmPi>:
  MicroInterpreter* interpreter =
  10dcde:	48 8b 47 18          	mov    0x18(%rdi),%rax
                                                           int* buffer_idx) {
  10dce2:	48 89 d1             	mov    %rdx,%rcx
  return interpreter->allocator_.RequestScratchBufferInArena(
  10dce5:	48 8b b8 d0 00 00 00 	mov    0xd0(%rax),%rdi
  10dcec:	8b 90 00 01 00 00    	mov    0x100(%rax),%edx
  10dcf2:	e9 27 0c 00 00       	jmp    10e91e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEmiPi>
  10dcf7:	90                   	nop

000000000010dcf8 <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz>:
                                     const char* format, ...) {
  10dcf8:	55                   	push   %rbp
  10dcf9:	48 89 e5             	mov    %rsp,%rbp
  10dcfc:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  10dd03:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  10dd0a:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  10dd11:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  10dd18:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  10dd1f:	84 c0                	test   %al,%al
  10dd21:	74 20                	je     10dd43 <_ZN6tflite16MicroInterpreter13ReportOpErrorEP13TfLiteContextPKcz+0x4b>
  10dd23:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  10dd27:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  10dd2b:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  10dd2f:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  10dd33:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  10dd37:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  10dd3b:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  10dd3f:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  MicroInterpreter* interpreter =
  10dd43:	48 8b 47 18          	mov    0x18(%rdi),%rax
  va_start(args, format);
  10dd47:	48 8d 4d 10          	lea    0x10(%rbp),%rcx
  10dd4b:	48 8d 95 50 ff ff ff 	lea    -0xb0(%rbp),%rdx
  10dd52:	c7 85 38 ff ff ff 10 	movl   $0x10,-0xc8(%rbp)
  10dd59:	00 00 00 
  10dd5c:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
  10dd63:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  10dd6a:	48 8b 78 10          	mov    0x10(%rax),%rdi
  va_start(args, format);
  10dd6e:	48 89 8d 40 ff ff ff 	mov    %rcx,-0xc0(%rbp)
  10dd75:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  10dd7c:	00 00 00 
  TF_LITE_REPORT_ERROR(interpreter->error_reporter_, format, args);
  10dd7f:	48 8b 07             	mov    (%rdi),%rax
  10dd82:	ff 50 10             	call   *0x10(%rax)
}
  10dd85:	c9                   	leave  
  10dd86:	c3                   	ret    
  10dd87:	90                   	nop

000000000010dd88 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhmPNS_13ErrorReporterEPNS_13MicroProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
  10dd88:	55                   	push   %rbp
  10dd89:	48 89 d0             	mov    %rdx,%rax
  10dd8c:	49 89 ca             	mov    %rcx,%r10
      output_tensors_(nullptr) {
  10dd8f:	b9 2e 00 00 00       	mov    $0x2e,%ecx
MicroInterpreter::MicroInterpreter(const Model* model,
  10dd94:	4c 89 ca             	mov    %r9,%rdx
  10dd97:	48 89 e5             	mov    %rsp,%rbp
  10dd9a:	41 54                	push   %r12
  10dd9c:	49 89 f4             	mov    %rsi,%r12
  10dd9f:	4c 89 c6             	mov    %r8,%rsi
  10dda2:	53                   	push   %rbx
  10dda3:	48 89 fb             	mov    %rdi,%rbx
      output_tensors_(nullptr) {
  10dda6:	48 8d 7f 18          	lea    0x18(%rdi),%rdi
      op_resolver_(op_resolver),
  10ddaa:	48 89 47 f0          	mov    %rax,-0x10(%rdi)
      output_tensors_(nullptr) {
  10ddae:	31 c0                	xor    %eax,%eax
    : model_(model),
  10ddb0:	4c 89 67 e8          	mov    %r12,-0x18(%rdi)
      error_reporter_(error_reporter),
  10ddb4:	4c 89 4f f8          	mov    %r9,-0x8(%rdi)
      output_tensors_(nullptr) {
  10ddb8:	f3 ab                	rep stos %eax,%es:(%rdi)
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
  10ddba:	4c 89 d7             	mov    %r10,%rdi
  10ddbd:	e8 00 0a 00 00       	call   10e7c2 <_ZN6tflite14MicroAllocator6CreateEPhmPNS_13ErrorReporterE>
      graph_(&context_, model, &allocator_),
  10ddc2:	4c 89 e2             	mov    %r12,%rdx
  10ddc5:	48 8d 73 18          	lea    0x18(%rbx),%rsi
  10ddc9:	48 8d bb d8 00 00 00 	lea    0xd8(%rbx),%rdi
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
  10ddd0:	48 89 83 d0 00 00 00 	mov    %rax,0xd0(%rbx)
  10ddd7:	48 89 c1             	mov    %rax,%rcx
      graph_(&context_, model, &allocator_),
  10ddda:	e8 35 fb ff ff       	call   10d914 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorE>
      input_tensors_(nullptr),
  10dddf:	31 c0                	xor    %eax,%eax
  initialization_status_ = kTfLiteOk;
  10dde1:	31 d2                	xor    %edx,%edx
      tensors_allocated_(false),
  10dde3:	c6 83 10 01 00 00 00 	movb   $0x0,0x110(%rbx)
      input_tensors_(nullptr),
  10ddea:	48 89 83 18 01 00 00 	mov    %rax,0x118(%rbx)
      output_tensors_(nullptr) {
  10ddf1:	48 89 83 20 01 00 00 	mov    %rax,0x120(%rbx)
  10ddf8:	48 89 83 28 01 00 00 	mov    %rax,0x128(%rbx)
  context_.profiler = profiler;
  10ddff:	48 8b 45 10          	mov    0x10(%rbp),%rax
  context_.impl_ = static_cast<void*>(this);
  10de03:	48 89 5b 30          	mov    %rbx,0x30(%rbx)
  context_.ReportError = ReportOpError;
  10de07:	48 c7 43 40 f8 dc 10 	movq   $0x10dcf8,0x40(%rbx)
  10de0e:	00 
  context_.GetTensor = GetTensor;
  10de0f:	48 c7 83 b8 00 00 00 	movq   $0x10dc84,0xb8(%rbx)
  10de16:	84 dc 10 00 
  context_.GetEvalTensor = GetEvalTensor;
  10de1a:	48 c7 83 c0 00 00 00 	movq   $0x10dcac,0xc0(%rbx)
  10de21:	ac dc 10 00 
  context_.profiler = profiler;
  10de25:	48 89 83 80 00 00 00 	mov    %rax,0x80(%rbx)
  initialization_status_ = kTfLiteOk;
  10de2c:	89 93 14 01 00 00    	mov    %edx,0x114(%rbx)
}
  10de32:	5b                   	pop    %rbx
  10de33:	41 5c                	pop    %r12
  10de35:	5d                   	pop    %rbp
  10de36:	c3                   	ret    
  10de37:	90                   	nop

000000000010de38 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>:
  // values other than kTfLiteOk and kTfLiteError.
  // TODO(b/149795762): Add this to the TfLiteStatus enum.
  TfLiteStatus Invoke();

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
  10de38:	55                   	push   %rbp
  10de39:	48 89 e5             	mov    %rsp,%rbp
    return model_->subgraphs()->Get(0)->inputs()->size();
  10de3c:	e8 09 f7 ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10de41:	31 f6                	xor    %esi,%esi
  10de43:	48 89 c7             	mov    %rax,%rdi
  10de46:	e8 2b f7 ff ff       	call   10d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  10de4b:	be 06 00 00 00       	mov    $0x6,%esi
  10de50:	48 89 c7             	mov    %rax,%rdi
  10de53:	e8 c8 fc ff ff       	call   10db20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  }
  10de58:	5d                   	pop    %rbp
    return model_->subgraphs()->Get(0)->inputs()->size();
  10de59:	8b 00                	mov    (%rax),%eax
  }
  10de5b:	c3                   	ret    

000000000010de5c <_ZN6tflite16MicroInterpreter5inputEm>:
TfLiteTensor* MicroInterpreter::input(size_t index) {
  10de5c:	55                   	push   %rbp
  10de5d:	48 89 e5             	mov    %rsp,%rbp
  10de60:	41 54                	push   %r12
  10de62:	49 89 fc             	mov    %rdi,%r12
  10de65:	53                   	push   %rbx
  const size_t length = inputs_size();
  10de66:	48 8b 3f             	mov    (%rdi),%rdi
TfLiteTensor* MicroInterpreter::input(size_t index) {
  10de69:	48 89 f3             	mov    %rsi,%rbx
  const size_t length = inputs_size();
  10de6c:	e8 c7 ff ff ff       	call   10de38 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
  if (index >= length) {
  10de71:	48 39 c3             	cmp    %rax,%rbx
  10de74:	72 1b                	jb     10de91 <_ZN6tflite16MicroInterpreter5inputEm+0x35>
    TF_LITE_REPORT_ERROR(error_reporter_,
  10de76:	49 8b 7c 24 10       	mov    0x10(%r12),%rdi
  10de7b:	48 89 c1             	mov    %rax,%rcx
  10de7e:	48 89 da             	mov    %rbx,%rdx
  10de81:	be 33 ed 11 00       	mov    $0x11ed33,%esi
  10de86:	31 c0                	xor    %eax,%eax
  10de88:	e8 e7 1c 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
  10de8d:	31 c0                	xor    %eax,%eax
  10de8f:	eb 0c                	jmp    10de9d <_ZN6tflite16MicroInterpreter5inputEm+0x41>
  return input_tensors_[index];
  10de91:	49 8b 84 24 20 01 00 	mov    0x120(%r12),%rax
  10de98:	00 
  10de99:	48 8b 04 d8          	mov    (%rax,%rbx,8),%rax
}
  10de9d:	5b                   	pop    %rbx
  10de9e:	41 5c                	pop    %r12
  10dea0:	5d                   	pop    %rbp
  10dea1:	c3                   	ret    

000000000010dea2 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
  10dea2:	55                   	push   %rbp
  10dea3:	48 89 e5             	mov    %rsp,%rbp
    return model_->subgraphs()->Get(0)->outputs()->size();
  10dea6:	e8 9f f6 ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10deab:	31 f6                	xor    %esi,%esi
  10dead:	48 89 c7             	mov    %rax,%rdi
  10deb0:	e8 c1 f6 ff ff       	call   10d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  10deb5:	be 08 00 00 00       	mov    $0x8,%esi
  10deba:	48 89 c7             	mov    %rax,%rdi
  10debd:	e8 5e fc ff ff       	call   10db20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  }
  10dec2:	5d                   	pop    %rbp
    return model_->subgraphs()->Get(0)->outputs()->size();
  10dec3:	8b 00                	mov    (%rax),%eax
  }
  10dec5:	c3                   	ret    

000000000010dec6 <_ZN6tflite16MicroInterpreter6outputEm>:
TfLiteTensor* MicroInterpreter::output(size_t index) {
  10dec6:	55                   	push   %rbp
  10dec7:	48 89 e5             	mov    %rsp,%rbp
  10deca:	41 54                	push   %r12
  10decc:	49 89 fc             	mov    %rdi,%r12
  10decf:	53                   	push   %rbx
  const size_t length = outputs_size();
  10ded0:	48 8b 3f             	mov    (%rdi),%rdi
TfLiteTensor* MicroInterpreter::output(size_t index) {
  10ded3:	48 89 f3             	mov    %rsi,%rbx
  const size_t length = outputs_size();
  10ded6:	e8 c7 ff ff ff       	call   10dea2 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
  if (index >= length) {
  10dedb:	48 39 c3             	cmp    %rax,%rbx
  10dede:	72 1b                	jb     10defb <_ZN6tflite16MicroInterpreter6outputEm+0x35>
    TF_LITE_REPORT_ERROR(error_reporter_,
  10dee0:	49 8b 7c 24 10       	mov    0x10(%r12),%rdi
  10dee5:	48 89 c1             	mov    %rax,%rcx
  10dee8:	48 89 da             	mov    %rbx,%rdx
  10deeb:	be 5e ed 11 00       	mov    $0x11ed5e,%esi
  10def0:	31 c0                	xor    %eax,%eax
  10def2:	e8 7d 1c 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
  10def7:	31 c0                	xor    %eax,%eax
  10def9:	eb 0c                	jmp    10df07 <_ZN6tflite16MicroInterpreter6outputEm+0x41>
  return output_tensors_[index];
  10defb:	49 8b 84 24 28 01 00 	mov    0x128(%r12),%rax
  10df02:	00 
  10df03:	48 8b 04 d8          	mov    (%rax,%rbx,8),%rax
}
  10df07:	5b                   	pop    %rbx
  10df08:	41 5c                	pop    %r12
  10df0a:	5d                   	pop    %rbp
  10df0b:	c3                   	ret    

000000000010df0c <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
  10df0c:	55                   	push   %rbp
  10df0d:	48 89 e5             	mov    %rsp,%rbp
  10df10:	53                   	push   %rbx
    graph_.FreeSubgraphs();
  10df11:	48 8d 9f d8 00 00 00 	lea    0xd8(%rdi),%rbx
MicroInterpreter::~MicroInterpreter() {
  10df18:	52                   	push   %rdx
  if (graph_.GetAllocations() != nullptr) {
  10df19:	48 83 bf f8 00 00 00 	cmpq   $0x0,0xf8(%rdi)
  10df20:	00 
  10df21:	74 08                	je     10df2b <_ZN6tflite16MicroInterpreterD1Ev+0x1f>
    graph_.FreeSubgraphs();
  10df23:	48 89 df             	mov    %rbx,%rdi
  10df26:	e8 31 f7 ff ff       	call   10d65c <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
}
  10df2b:	58                   	pop    %rax
  10df2c:	48 89 df             	mov    %rbx,%rdi
  10df2f:	5b                   	pop    %rbx
  10df30:	5d                   	pop    %rbp
  10df31:	e9 6e f6 ff ff       	jmp    10d5a4 <_ZN6tflite10MicroGraphD1Ev>

000000000010df36 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
  10df36:	55                   	push   %rbp
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
  10df37:	31 c9                	xor    %ecx,%ecx
  10df39:	48 8d 87 d8 00 00 00 	lea    0xd8(%rdi),%rax
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
  10df40:	48 89 e5             	mov    %rsp,%rbp
  10df43:	41 57                	push   %r15
  10df45:	41 56                	push   %r14
  10df47:	41 55                	push   %r13
  10df49:	41 54                	push   %r12
  10df4b:	53                   	push   %rbx
  10df4c:	48 89 fb             	mov    %rdi,%rbx
  10df4f:	48 83 ec 78          	sub    $0x78,%rsp
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
  10df53:	48 89 4d 98          	mov    %rcx,-0x68(%rbp)
  10df57:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  10df5e:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  10df65:	e8 58 f8 ff ff       	call   10d7c2 <_ZN6tflite10MicroGraph12NumSubgraphsEv>
  10df6a:	8b 4d 98             	mov    -0x68(%rbp),%ecx
  10df6d:	39 c8                	cmp    %ecx,%eax
  10df6f:	0f 8e 10 03 00 00    	jle    10e285 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x34f>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
  10df75:	4c 8b 23             	mov    (%rbx),%r12
  10df78:	4c 89 e7             	mov    %r12,%rdi
  10df7b:	e8 ca f5 ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10df80:	8b 75 98             	mov    -0x68(%rbp),%esi
  10df83:	48 89 c7             	mov    %rax,%rdi
  10df86:	e8 eb f5 ff ff       	call   10d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  10df8b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    TFLITE_DCHECK(subgraph != nullptr);
  10df8f:	48 85 c0             	test   %rax,%rax
  10df92:	75 05                	jne    10df99 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x63>
  10df94:	e8 2b 3e 00 00       	call   111dc4 <abort>
    auto field_offset = GetOptionalFieldOffset(field);
  10df99:	be 06 00 00 00       	mov    $0x6,%esi
  10df9e:	4c 89 e7             	mov    %r12,%rdi
  10dfa1:	e8 8e f5 ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10dfa6:	31 d2                	xor    %edx,%edx
  10dfa8:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
  10dfac:	66 85 c0             	test   %ax,%ax
  10dfaf:	74 11                	je     10dfc2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x8c>
    auto p = data_ + field_offset;
  10dfb1:	0f b7 c0             	movzwl %ax,%eax
  10dfb4:	49 01 c4             	add    %rax,%r12
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10dfb7:	41 8b 04 24          	mov    (%r12),%eax
  10dfbb:	4c 01 e0             	add    %r12,%rax
  10dfbe:	48 89 45 80          	mov    %rax,-0x80(%rbp)
        allocator_.GetBuiltinDataAllocator();
  10dfc2:	48 8b bb d0 00 00 00 	mov    0xd0(%rbx),%rdi
    for (size_t i = 0; i < operators_size; ++i) {
  10dfc9:	45 31 e4             	xor    %r12d,%r12d
        allocator_.GetBuiltinDataAllocator();
  10dfcc:	e8 4f 0a 00 00       	call   10ea20 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
    uint32_t operators_size = NumSubgraphOperators(subgraph);
  10dfd1:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
        allocator_.GetBuiltinDataAllocator();
  10dfd5:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    uint32_t operators_size = NumSubgraphOperators(subgraph);
  10dfdc:	e8 34 51 00 00       	call   113115 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
  10dfe1:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
    for (size_t i = 0; i < operators_size; ++i) {
  10dfe7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  10dfeb:	48 c1 e0 04          	shl    $0x4,%rax
  10dfef:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  10dff3:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  10dff9:	49 39 c4             	cmp    %rax,%r12
  10dffc:	0f 83 7a 02 00 00    	jae    10e27c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x346>
    auto field_offset = GetOptionalFieldOffset(field);
  10e002:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  10e006:	be 0a 00 00 00       	mov    $0xa,%esi
  10e00b:	e8 24 f5 ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10e010:	66 85 c0             	test   %ax,%ax
  10e013:	0f 84 71 02 00 00    	je     10e28a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x354>
    auto p = data_ + field_offset;
  10e019:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  10e01d:	0f b7 c0             	movzwl %ax,%eax
  10e020:	48 01 c8             	add    %rcx,%rax
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10e023:	8b 10                	mov    (%rax),%edx
  10e025:	48 01 d0             	add    %rdx,%rax
    FLATBUFFERS_ASSERT(i < size());
  10e028:	44 3b 20             	cmp    (%rax),%r12d
  10e02b:	72 19                	jb     10e046 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x110>
  10e02d:	b9 55 e3 11 00       	mov    $0x11e355,%ecx
  10e032:	ba 8a ed 11 00       	mov    $0x11ed8a,%edx
  10e037:	be 06 01 00 00       	mov    $0x106,%esi
  10e03c:	bf 07 e4 11 00       	mov    $0x11e407,%edi
  10e041:	e8 2a 4d ff ff       	call   102d70 <__assert_func>
  static return_type Read(const uint8_t *p, uoffset_t i) {
  10e046:	49 ff c4             	inc    %r12
    auto field_offset = GetOptionalFieldOffset(field);
  10e049:	be 04 00 00 00       	mov    $0x4,%esi
    p += i * sizeof(uoffset_t);
  10e04e:	4a 8d 04 a0          	lea    (%rax,%r12,4),%rax
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
  10e052:	8b 10                	mov    (%rax),%edx
  10e054:	48 01 d0             	add    %rdx,%rax
    auto field_offset = GetOptionalFieldOffset(field);
  10e057:	48 89 c7             	mov    %rax,%rdi
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
  10e05a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    auto field_offset = GetOptionalFieldOffset(field);
  10e05e:	e8 d1 f4 ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  10e063:	31 d2                	xor    %edx,%edx
  10e065:	66 85 c0             	test   %ax,%ax
  10e068:	74 0a                	je     10e074 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x13e>
  10e06a:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  10e06e:	0f b7 c0             	movzwl %ax,%eax
  10e071:	8b 14 01             	mov    (%rcx,%rax,1),%edx
      if (index >= opcodes->size()) {
  10e074:	48 8b 45 80          	mov    -0x80(%rbp),%rax
      const size_t index = op->opcode_index();
  10e078:	41 89 d6             	mov    %edx,%r14d
      if (index >= opcodes->size()) {
  10e07b:	3b 10                	cmp    (%rax),%edx
  10e07d:	72 0d                	jb     10e08c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x156>
        MicroPrintf("Missing registration for opcode_index %d\n", index);
  10e07f:	4c 89 f6             	mov    %r14,%rsi
  10e082:	bf 67 ee 11 00       	mov    $0x11ee67,%edi
  10e087:	e9 26 01 00 00       	jmp    10e1b2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x27c>
    p += i * sizeof(uoffset_t);
  10e08c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
                                          .node_and_registrations[i]
  10e090:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
  10e094:	48 8b 73 08          	mov    0x8(%rbx),%rsi
  10e098:	4e 8d 6c b0 04       	lea    0x4(%rax,%r14,4),%r13
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
  10e09d:	41 8b 45 00          	mov    0x0(%r13),%eax
  10e0a1:	49 01 c5             	add    %rax,%r13
                                          .node_and_registrations[i]
  10e0a4:	49 6b c4 58          	imul   $0x58,%r12,%rax
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
  10e0a8:	4c 89 ef             	mov    %r13,%rdi
                                          .node_and_registrations[i]
  10e0ab:	48 83 e8 58          	sub    $0x58,%rax
  10e0af:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  10e0b3:	48 8b 83 f8 00 00 00 	mov    0xf8(%rbx),%rax
  10e0ba:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
  10e0be:	48 03 0c 10          	add    (%rax,%rdx,1),%rcx
          GetRegistrationFromOpCode(opcode, op_resolver_, error_reporter_,
  10e0c2:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  10e0c6:	48 83 c1 50          	add    $0x50,%rcx
  10e0ca:	e8 b8 61 00 00       	call   114287 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
  10e0cf:	41 89 c7             	mov    %eax,%r15d
      if (status != kTfLiteOk) {
  10e0d2:	85 c0                	test   %eax,%eax
  10e0d4:	74 23                	je     10e0f9 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c3>
        MicroPrintf("Failed to get registration from op code %s\n ",
  10e0d6:	4c 89 ef             	mov    %r13,%rdi
  10e0d9:	e8 d3 62 00 00       	call   1143b1 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
  10e0de:	89 c7                	mov    %eax,%edi
  10e0e0:	e8 d5 50 00 00       	call   1131ba <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
  10e0e5:	bf 91 ee 11 00       	mov    $0x11ee91,%edi
  10e0ea:	48 89 c6             	mov    %rax,%rsi
  10e0ed:	31 c0                	xor    %eax,%eax
  10e0ef:	e8 f5 48 00 00       	call   1129e9 <_Z11MicroPrintfPKcz>
        return status;
  10e0f4:	e9 9a 01 00 00       	jmp    10e293 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x35d>
                                     .registration;
  10e0f9:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
                                     .node_and_registrations[i]
  10e0fd:	48 8b 83 f8 00 00 00 	mov    0xf8(%rbx),%rax
                                     .registration;
  10e104:	48 8b 04 08          	mov    (%rax,%rcx,1),%rax
  10e108:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
  10e10c:	48 8b 44 08 50       	mov    0x50(%rax,%rcx,1),%rax
      if (registration == nullptr) {
  10e111:	48 85 c0             	test   %rax,%rax
  10e114:	75 18                	jne    10e12e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1f8>
        MicroPrintf("Skipping op for opcode_index %d\n", index);
  10e116:	4c 89 f6             	mov    %r14,%rsi
  10e119:	bf be ee 11 00       	mov    $0x11eebe,%edi
  10e11e:	e8 c6 48 00 00       	call   1129e9 <_Z11MicroPrintfPKcz>
        return kTfLiteError;
  10e123:	41 bf 01 00 00 00    	mov    $0x1,%r15d
  10e129:	e9 65 01 00 00       	jmp    10e293 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x35d>
      BuiltinOperator op_type =
  10e12e:	44 8b 68 28          	mov    0x28(%rax),%r13d
      unsigned char* builtin_data = nullptr;
  10e132:	31 c0                	xor    %eax,%eax
    auto field_offset = GetOptionalFieldOffset(field);
  10e134:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  10e138:	be 0e 00 00 00       	mov    $0xe,%esi
  10e13d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
      if (op_type == BuiltinOperator_CUSTOM) {
  10e141:	41 83 fd 20          	cmp    $0x20,%r13d
  10e145:	75 2d                	jne    10e174 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x23e>
  10e147:	e8 e8 f3 ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10e14c:	66 85 c0             	test   %ax,%ax
  10e14f:	75 0b                	jne    10e15c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x226>
      size_t custom_data_size = 0;
  10e151:	45 31 ed             	xor    %r13d,%r13d
      const char* custom_data = nullptr;
  10e154:	45 31 f6             	xor    %r14d,%r14d
  10e157:	e9 82 00 00 00       	jmp    10e1de <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2a8>
    auto p = data_ + field_offset;
  10e15c:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  10e160:	0f b7 c0             	movzwl %ax,%eax
  10e163:	48 01 c8             	add    %rcx,%rax
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10e166:	8b 10                	mov    (%rax),%edx
  10e168:	48 01 d0             	add    %rdx,%rax
          custom_data_size = op->custom_options()->size();
  10e16b:	44 8b 28             	mov    (%rax),%r13d
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
  10e16e:	4c 8d 70 04          	lea    0x4(%rax),%r14
  uoffset_t size() const { return EndianScalar(length_); }
  10e172:	eb 6a                	jmp    10e1de <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x2a8>
    auto field_offset = GetOptionalFieldOffset(field);
  10e174:	e8 bb f3 ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10e179:	66 85 c0             	test   %ax,%ax
  10e17c:	74 12                	je     10e190 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x25a>
          MicroPrintf(
  10e17e:	44 89 ef             	mov    %r13d,%edi
  10e181:	e8 34 50 00 00       	call   1131ba <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
  10e186:	bf df ee 11 00       	mov    $0x11eedf,%edi
  10e18b:	48 89 c6             	mov    %rax,%rsi
  10e18e:	eb 22                	jmp    10e1b2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x27c>
            op_resolver_.GetOpDataParser(op_type);
  10e190:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
  10e194:	44 89 ee             	mov    %r13d,%esi
  10e197:	48 8b 07             	mov    (%rdi),%rax
  10e19a:	ff 50 40             	call   *0x40(%rax)
        if (parser == nullptr) {
  10e19d:	48 85 c0             	test   %rax,%rax
  10e1a0:	75 17                	jne    10e1b9 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x283>
          MicroPrintf("Did not find a parser for %s",
  10e1a2:	44 89 ef             	mov    %r13d,%edi
  10e1a5:	e8 10 50 00 00       	call   1131ba <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
  10e1aa:	bf 25 ef 11 00       	mov    $0x11ef25,%edi
  10e1af:	48 89 c6             	mov    %rax,%rsi
  10e1b2:	31 c0                	xor    %eax,%eax
  10e1b4:	e9 65 ff ff ff       	jmp    10e11e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1e8>
        TF_LITE_ENSURE_STATUS(parser(op, error_reporter_,
  10e1b9:	48 8b 73 10          	mov    0x10(%rbx),%rsi
  10e1bd:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  10e1c4:	48 8d 4d b8          	lea    -0x48(%rbp),%rcx
  10e1c8:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
  10e1cc:	ff d0                	call   *%rax
  10e1ce:	41 89 c7             	mov    %eax,%r15d
  10e1d1:	85 c0                	test   %eax,%eax
  10e1d3:	0f 84 78 ff ff ff    	je     10e151 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x21b>
  10e1d9:	e9 b5 00 00 00       	jmp    10e293 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x35d>
    return const_cast<Table *>(this)->GetPointer<P>(field);
  10e1de:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
  10e1e2:	4c 8b bb d0 00 00 00 	mov    0xd0(%rbx),%r15
  10e1e9:	be 06 00 00 00       	mov    $0x6,%esi
  10e1ee:	e8 2d f9 ff ff       	call   10db20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  10e1f3:	4c 89 ff             	mov    %r15,%rdi
  10e1f6:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  10e1fa:	48 89 c6             	mov    %rax,%rsi
  10e1fd:	e8 02 08 00 00       	call   10ea04 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
  10e202:	41 89 c7             	mov    %eax,%r15d
  10e205:	85 c0                	test   %eax,%eax
  10e207:	0f 85 86 00 00 00    	jne    10e293 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x35d>
  10e20d:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
      TF_LITE_ENSURE_STATUS(allocator_.FlatBufferVectorToTfLiteTypeArray(
  10e211:	4c 8b bb d0 00 00 00 	mov    0xd0(%rbx),%r15
  10e218:	be 08 00 00 00       	mov    $0x8,%esi
  10e21d:	e8 fe f8 ff ff       	call   10db20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  10e222:	4c 89 ff             	mov    %r15,%rdi
  10e225:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  10e229:	48 89 c6             	mov    %rax,%rsi
  10e22c:	e8 d3 07 00 00       	call   10ea04 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>
  10e231:	41 89 c7             	mov    %eax,%r15d
  10e234:	85 c0                	test   %eax,%eax
  10e236:	75 5b                	jne    10e293 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x35d>
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
  10e238:	48 8b 83 f8 00 00 00 	mov    0xf8(%rbx),%rax
  10e23f:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  10e243:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  10e247:	48 03 14 08          	add    (%rax,%rcx,1),%rdx
      *node = {};
  10e24b:	44 89 f8             	mov    %r15d,%eax
  10e24e:	b9 14 00 00 00       	mov    $0x14,%ecx
  10e253:	48 89 d7             	mov    %rdx,%rdi
  10e256:	f3 ab                	rep stos %eax,%es:(%rdi)
      node->inputs = inputs_array;
  10e258:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
      node->custom_initial_data = custom_data;
  10e25c:	4c 89 72 30          	mov    %r14,0x30(%rdx)
      node->custom_initial_data_size = custom_data_size;
  10e260:	44 89 6a 38          	mov    %r13d,0x38(%rdx)
      node->inputs = inputs_array;
  10e264:	48 89 02             	mov    %rax,(%rdx)
      node->outputs = outputs_array;
  10e267:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  10e26b:	48 89 42 08          	mov    %rax,0x8(%rdx)
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
  10e26f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  10e273:	48 89 42 28          	mov    %rax,0x28(%rdx)
    for (size_t i = 0; i < operators_size; ++i) {
  10e277:	e9 77 fd ff ff       	jmp    10dff3 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xbd>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
  10e27c:	48 ff 45 98          	incq   -0x68(%rbp)
  10e280:	e9 d9 fc ff ff       	jmp    10df5e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x28>
  return kTfLiteOk;
  10e285:	45 31 ff             	xor    %r15d,%r15d
  10e288:	eb 09                	jmp    10e293 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x35d>
  uoffset_t size() const { return EndianScalar(length_); }
  10e28a:	8b 04 25 00 00 00 00 	mov    0x0,%eax
  10e291:	0f 0b                	ud2    
}
  10e293:	48 83 c4 78          	add    $0x78,%rsp
  10e297:	44 89 f8             	mov    %r15d,%eax
  10e29a:	5b                   	pop    %rbx
  10e29b:	41 5c                	pop    %r12
  10e29d:	41 5d                	pop    %r13
  10e29f:	41 5e                	pop    %r14
  10e2a1:	41 5f                	pop    %r15
  10e2a3:	5d                   	pop    %rbp
  10e2a4:	c3                   	ret    
  10e2a5:	90                   	nop

000000000010e2a6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
  10e2a6:	55                   	push   %rbp
  10e2a7:	48 89 e5             	mov    %rsp,%rbp
  10e2aa:	41 57                	push   %r15
  10e2ac:	41 56                	push   %r14
  10e2ae:	41 55                	push   %r13
  10e2b0:	41 54                	push   %r12
  10e2b2:	53                   	push   %rbx
  10e2b3:	48 89 fb             	mov    %rdi,%rbx
  10e2b6:	48 83 ec 18          	sub    $0x18,%rsp
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
  10e2ba:	48 8b bf d0 00 00 00 	mov    0xd0(%rdi),%rdi
  10e2c1:	48 8b 33             	mov    (%rbx),%rsi
  10e2c4:	e8 59 05 00 00       	call   10e822 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
  if (allocations == nullptr) {
  10e2c9:	48 85 c0             	test   %rax,%rax
  10e2cc:	75 1f                	jne    10e2ed <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x47>
    TF_LITE_REPORT_ERROR(error_reporter_,
  10e2ce:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  10e2d2:	be 42 ef 11 00       	mov    $0x11ef42,%esi
  10e2d7:	31 c0                	xor    %eax,%eax
  10e2d9:	e8 96 18 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
  10e2de:	c7 83 14 01 00 00 01 	movl   $0x1,0x114(%rbx)
  10e2e5:	00 00 00 
    return kTfLiteError;
  10e2e8:	e9 fd 00 00 00       	jmp    10e3ea <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x144>
  10e2ed:	48 89 c6             	mov    %rax,%rsi
  graph_.SetSubgraphAllocations(allocations);
  10e2f0:	48 8d 83 d8 00 00 00 	lea    0xd8(%rbx),%rax
  10e2f7:	48 89 c7             	mov    %rax,%rdi
  10e2fa:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  10e2fe:	e8 51 f6 ff ff       	call   10d954 <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
  10e303:	48 89 df             	mov    %rbx,%rdi
  10e306:	e8 2b fc ff ff       	call   10df36 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
  10e30b:	85 c0                	test   %eax,%eax
  10e30d:	0f 85 6f 02 00 00    	jne    10e582 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2dc>
  context_.GetScratchBuffer = nullptr;
  10e313:	31 c0                	xor    %eax,%eax
  context_.GetExecutionPlan = GetGraph;
  10e315:	48 c7 43 20 ce dc 10 	movq   $0x10dcce,0x20(%rbx)
  10e31c:	00 
  graph_.InitSubgraphs();
  10e31d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  context_.AllocatePersistentBuffer = AllocatePersistentBuffer;
  10e321:	48 c7 83 88 00 00 00 	movq   $0x10dc5e,0x88(%rbx)
  10e328:	5e dc 10 00 
  context_.GetScratchBuffer = nullptr;
  10e32c:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
  10e333:	48 89 83 a0 00 00 00 	mov    %rax,0xa0(%rbx)
  graph_.InitSubgraphs();
  10e33a:	e8 6d f2 ff ff       	call   10d5ac <_ZN6tflite10MicroGraph13InitSubgraphsEv>
  graph_.PrepareSubgraphs();
  10e33f:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  context_.RequestScratchBufferInArena = RequestScratchBufferInArena;
  10e343:	48 c7 83 98 00 00 00 	movq   $0x10dcde,0x98(%rbx)
  10e34a:	de dc 10 00 
  graph_.PrepareSubgraphs();
  10e34e:	e8 a1 f3 ff ff       	call   10d6f4 <_ZN6tflite10MicroGraph16PrepareSubgraphsEv>
  context_.RequestScratchBufferInArena = nullptr;
  10e353:	31 d2                	xor    %edx,%edx
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
  10e355:	48 8b 33             	mov    (%rbx),%rsi
  context_.GetScratchBuffer = GetScratchBuffer;
  10e358:	48 c7 83 a0 00 00 00 	movq   $0x10dc70,0xa0(%rbx)
  10e35f:	70 dc 10 00 
  context_.RequestScratchBufferInArena = nullptr;
  10e363:	48 89 93 88 00 00 00 	mov    %rdx,0x88(%rbx)
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
  10e36a:	48 8b bb d0 00 00 00 	mov    0xd0(%rbx),%rdi
  10e371:	48 8d 8b 18 01 00 00 	lea    0x118(%rbx),%rcx
  context_.RequestScratchBufferInArena = nullptr;
  10e378:	48 89 93 98 00 00 00 	mov    %rdx,0x98(%rbx)
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
  10e37f:	48 8b 93 f8 00 00 00 	mov    0xf8(%rbx),%rdx
  10e386:	e8 8f 07 00 00       	call   10eb1a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
  10e38b:	85 c0                	test   %eax,%eax
  10e38d:	0f 85 ef 01 00 00    	jne    10e582 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2dc>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
  10e393:	4c 8b ab d0 00 00 00 	mov    0xd0(%rbx),%r13
          sizeof(TfLiteTensor*) * inputs_size()));
  10e39a:	48 8b 3b             	mov    (%rbx),%rdi
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
  10e39d:	49 8b 45 00          	mov    0x0(%r13),%rax
  10e3a1:	4c 8b 70 18          	mov    0x18(%rax),%r14
          sizeof(TfLiteTensor*) * inputs_size()));
  10e3a5:	e8 8e fa ff ff       	call   10de38 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
  10e3aa:	4c 89 ef             	mov    %r13,%rdi
  for (size_t i = 0; i < inputs_size(); ++i) {
  10e3ad:	45 31 ed             	xor    %r13d,%r13d
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
  10e3b0:	48 8d 34 c5 00 00 00 	lea    0x0(,%rax,8),%rsi
  10e3b7:	00 
  10e3b8:	41 ff d6             	call   *%r14
  input_tensors_ =
  10e3bb:	48 89 83 20 01 00 00 	mov    %rax,0x120(%rbx)
  if (input_tensors_ == nullptr) {
  10e3c2:	48 85 c0             	test   %rax,%rax
  10e3c5:	75 30                	jne    10e3f7 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x151>
    TF_LITE_REPORT_ERROR(
  10e3c7:	48 8b 3b             	mov    (%rbx),%rdi
  10e3ca:	4c 8b 63 10          	mov    0x10(%rbx),%r12
  10e3ce:	e8 65 fa ff ff       	call   10de38 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
  10e3d3:	be 65 ef 11 00       	mov    $0x11ef65,%esi
  10e3d8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  10e3df:	00 
  10e3e0:	4c 89 e7             	mov    %r12,%rdi
  10e3e3:	31 c0                	xor    %eax,%eax
  10e3e5:	e8 8a 17 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
  10e3ea:	b8 01 00 00 00       	mov    $0x1,%eax
  10e3ef:	e9 8e 01 00 00       	jmp    10e582 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2dc>
  for (size_t i = 0; i < inputs_size(); ++i) {
  10e3f4:	49 ff c5             	inc    %r13
  10e3f7:	48 8b 03             	mov    (%rbx),%rax
  10e3fa:	48 89 c7             	mov    %rax,%rdi
  10e3fd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  10e401:	e8 32 fa ff ff       	call   10de38 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
  10e406:	4c 8b b3 d0 00 00 00 	mov    0xd0(%rbx),%r14
  10e40d:	49 39 c5             	cmp    %rax,%r13
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
  10e410:	49 8b 06             	mov    (%r14),%rax
  for (size_t i = 0; i < inputs_size(); ++i) {
  10e413:	73 76                	jae    10e48b <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1e5>
    return *model_->subgraphs()->Get(0)->inputs();
  10e415:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
  10e419:	4c 8b 38             	mov    (%rax),%r15
  10e41c:	e8 29 f1 ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10e421:	31 f6                	xor    %esi,%esi
  10e423:	48 89 c7             	mov    %rax,%rdi
  10e426:	e8 4b f1 ff ff       	call   10d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
    return const_cast<Table *>(this)->GetPointer<P>(field);
  10e42b:	be 06 00 00 00       	mov    $0x6,%esi
  10e430:	48 89 c7             	mov    %rax,%rdi
  10e433:	e8 e8 f6 ff ff       	call   10db20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  10e438:	44 89 ee             	mov    %r13d,%esi
  10e43b:	48 89 c7             	mov    %rax,%rdi
  10e43e:	e8 17 f5 ff ff       	call   10d95a <_ZNK11flatbuffers6VectorIiE3GetEj>
  10e443:	45 31 c0             	xor    %r8d,%r8d
  10e446:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10e44a:	4c 89 f7             	mov    %r14,%rdi
  10e44d:	89 c1                	mov    %eax,%ecx
  10e44f:	48 8b 83 20 01 00 00 	mov    0x120(%rbx),%rax
  10e456:	48 8b 93 f8 00 00 00 	mov    0xf8(%rbx),%rdx
  10e45d:	4e 8d 24 e8          	lea    (%rax,%r13,8),%r12
  10e461:	41 ff d7             	call   *%r15
  10e464:	49 89 04 24          	mov    %rax,(%r12)
    if (input_tensors_[i] == nullptr) {
  10e468:	48 8b 83 20 01 00 00 	mov    0x120(%rbx),%rax
  10e46f:	4a 83 3c e8 00       	cmpq   $0x0,(%rax,%r13,8)
  10e474:	0f 85 7a ff ff ff    	jne    10e3f4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x14e>
      TF_LITE_REPORT_ERROR(error_reporter_,
  10e47a:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  10e47e:	4c 89 ea             	mov    %r13,%rdx
  10e481:	be ae ef 11 00       	mov    $0x11efae,%esi
  10e486:	e9 58 ff ff ff       	jmp    10e3e3 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x13d>
          sizeof(TfLiteTensor*) * outputs_size()));
  10e48b:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
  10e48f:	4c 8b 68 18          	mov    0x18(%rax),%r13
          sizeof(TfLiteTensor*) * outputs_size()));
  10e493:	e8 0a fa ff ff       	call   10dea2 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
  10e498:	4c 89 f7             	mov    %r14,%rdi
  10e49b:	48 8d 34 c5 00 00 00 	lea    0x0(,%rax,8),%rsi
  10e4a2:	00 
  10e4a3:	41 ff d5             	call   *%r13
  for (size_t i = 0; i < outputs_size(); ++i) {
  10e4a6:	45 31 ed             	xor    %r13d,%r13d
  output_tensors_ =
  10e4a9:	48 89 83 28 01 00 00 	mov    %rax,0x128(%rbx)
  if (output_tensors_ == nullptr) {
  10e4b0:	48 85 c0             	test   %rax,%rax
  10e4b3:	75 21                	jne    10e4d6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x230>
    TF_LITE_REPORT_ERROR(
  10e4b5:	48 8b 3b             	mov    (%rbx),%rdi
  10e4b8:	4c 8b 63 10          	mov    0x10(%rbx),%r12
  10e4bc:	e8 e1 f9 ff ff       	call   10dea2 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
  10e4c1:	be d3 ef 11 00       	mov    $0x11efd3,%esi
  10e4c6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  10e4cd:	00 
  10e4ce:	e9 0d ff ff ff       	jmp    10e3e0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x13a>
  for (size_t i = 0; i < outputs_size(); ++i) {
  10e4d3:	49 ff c5             	inc    %r13
  10e4d6:	48 8b 03             	mov    (%rbx),%rax
  10e4d9:	48 89 c7             	mov    %rax,%rdi
  10e4dc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  10e4e0:	e8 bd f9 ff ff       	call   10dea2 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
  10e4e5:	49 39 c5             	cmp    %rax,%r13
  10e4e8:	0f 83 80 00 00 00    	jae    10e56e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2c8>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
  10e4ee:	4c 8b bb d0 00 00 00 	mov    0xd0(%rbx),%r15
  const flatbuffers::Vector<int32_t>& outputs() const {
    return *model_->subgraphs()->Get(0)->outputs();
  10e4f5:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10e4f9:	49 8b 07             	mov    (%r15),%rax
  10e4fc:	4c 8b 30             	mov    (%rax),%r14
  10e4ff:	e8 46 f0 ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10e504:	31 f6                	xor    %esi,%esi
  10e506:	48 89 c7             	mov    %rax,%rdi
  10e509:	e8 68 f0 ff ff       	call   10d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  10e50e:	be 08 00 00 00       	mov    $0x8,%esi
  10e513:	48 89 c7             	mov    %rax,%rdi
  10e516:	e8 05 f6 ff ff       	call   10db20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  10e51b:	44 89 ee             	mov    %r13d,%esi
  10e51e:	48 89 c7             	mov    %rax,%rdi
  10e521:	e8 34 f4 ff ff       	call   10d95a <_ZNK11flatbuffers6VectorIiE3GetEj>
  10e526:	45 31 c0             	xor    %r8d,%r8d
  10e529:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10e52d:	4c 89 ff             	mov    %r15,%rdi
  10e530:	89 c1                	mov    %eax,%ecx
  10e532:	48 8b 83 28 01 00 00 	mov    0x128(%rbx),%rax
  10e539:	48 8b 93 f8 00 00 00 	mov    0xf8(%rbx),%rdx
  10e540:	4e 8d 24 e8          	lea    (%rax,%r13,8),%r12
  10e544:	41 ff d6             	call   *%r14
  10e547:	49 89 04 24          	mov    %rax,(%r12)
    if (output_tensors_[i] == nullptr) {
  10e54b:	48 8b 83 28 01 00 00 	mov    0x128(%rbx),%rax
  10e552:	4a 83 3c e8 00       	cmpq   $0x0,(%rax,%r13,8)
  10e557:	0f 85 76 ff ff ff    	jne    10e4d3 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22d>
      TF_LITE_REPORT_ERROR(error_reporter_,
  10e55d:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  10e561:	4c 89 ea             	mov    %r13,%rdx
  10e564:	be 1d f0 11 00       	mov    $0x11f01d,%esi
  10e569:	e9 75 fe ff ff       	jmp    10e3e3 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x13d>
  return graph_.ResetVariableTensors();
  10e56e:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10e572:	e8 0b f4 ff ff       	call   10d982 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
  10e577:	85 c0                	test   %eax,%eax
  10e579:	75 07                	jne    10e582 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2dc>
  tensors_allocated_ = true;
  10e57b:	c6 83 10 01 00 00 01 	movb   $0x1,0x110(%rbx)
}
  10e582:	48 83 c4 18          	add    $0x18,%rsp
  10e586:	5b                   	pop    %rbx
  10e587:	41 5c                	pop    %r12
  10e589:	41 5d                	pop    %r13
  10e58b:	41 5e                	pop    %r14
  10e58d:	41 5f                	pop    %r15
  10e58f:	5d                   	pop    %rbp
  10e590:	c3                   	ret    
  10e591:	90                   	nop

000000000010e592 <_ZN6tflite16MicroInterpreter6InvokeEv>:
TfLiteStatus MicroInterpreter::Invoke() {
  10e592:	55                   	push   %rbp
  10e593:	48 89 e5             	mov    %rsp,%rbp
  10e596:	53                   	push   %rbx
  10e597:	48 89 fb             	mov    %rdi,%rbx
  10e59a:	56                   	push   %rsi
  if (initialization_status_ != kTfLiteOk) {
  10e59b:	83 bf 14 01 00 00 00 	cmpl   $0x0,0x114(%rdi)
  10e5a2:	74 17                	je     10e5bb <_ZN6tflite16MicroInterpreter6InvokeEv+0x29>
    TF_LITE_REPORT_ERROR(error_reporter_,
  10e5a4:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
  10e5a8:	be 43 f0 11 00       	mov    $0x11f043,%esi
  10e5ad:	31 c0                	xor    %eax,%eax
  10e5af:	e8 c0 15 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
  10e5b4:	b8 01 00 00 00       	mov    $0x1,%eax
  10e5b9:	eb 23                	jmp    10e5de <_ZN6tflite16MicroInterpreter6InvokeEv+0x4c>
  if (!tensors_allocated_) {
  10e5bb:	80 bf 10 01 00 00 00 	cmpb   $0x0,0x110(%rdi)
  10e5c2:	74 11                	je     10e5d5 <_ZN6tflite16MicroInterpreter6InvokeEv+0x43>
}
  10e5c4:	59                   	pop    %rcx
  return graph_.InvokeSubgraph(0);
  10e5c5:	48 8d bb d8 00 00 00 	lea    0xd8(%rbx),%rdi
  10e5cc:	31 f6                	xor    %esi,%esi
}
  10e5ce:	5b                   	pop    %rbx
  10e5cf:	5d                   	pop    %rbp
  return graph_.InvokeSubgraph(0);
  10e5d0:	e9 17 f2 ff ff       	jmp    10d7ec <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
  10e5d5:	e8 cc fc ff ff       	call   10e2a6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
  10e5da:	85 c0                	test   %eax,%eax
  10e5dc:	74 e6                	je     10e5c4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x32>
}
  10e5de:	5a                   	pop    %rdx
  10e5df:	5b                   	pop    %rbx
  10e5e0:	5d                   	pop    %rbp
  10e5e1:	c3                   	ret    

000000000010e5e2 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEmm>:
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
      : memory_allocator_(memory_allocator) {}

  void* Allocate(size_t size, size_t alignment_hint) override {
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
  10e5e2:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  10e5e6:	48 8b 07             	mov    (%rdi),%rax
  10e5e9:	ff 60 18             	jmp    *0x18(%rax)

000000000010e5ec <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
  void Deallocate(void* data) override {
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
  10e5ec:	c3                   	ret    
  10e5ed:	90                   	nop

000000000010e5ee <_ZN6tflite14MicroAllocatorD1Ev>:
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}

MicroAllocator::~MicroAllocator() {}
  10e5ee:	c3                   	ret    
  10e5ef:	90                   	nop

000000000010e5f0 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEm>:
  model_is_allocating_ = false;
  return kTfLiteOk;
}

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
  10e5f0:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  10e5f4:	ba 10 00 00 00       	mov    $0x10,%edx
  10e5f9:	48 8b 07             	mov    (%rdi),%rax
  10e5fc:	48 8b 40 18          	mov    0x18(%rax),%rax
  10e600:	ff e0                	jmp    *%rax

000000000010e602 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
  }
  return tensor;
}

void MicroAllocator::ResetTempAllocations() {
  memory_allocator_->ResetTempAllocations();
  10e602:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  10e606:	48 8b 07             	mov    (%rdi),%rax
  10e609:	ff 60 28             	jmp    *0x28(%rax)

000000000010e60c <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:
  }
  return kTfLiteOk;
}

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
  10e60c:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  10e610:	ba 08 00 00 00       	mov    $0x8,%edx
  10e615:	be 70 00 00 00       	mov    $0x70,%esi
  10e61a:	48 8b 07             	mov    (%rdi),%rax
  10e61d:	48 8b 40 18          	mov    0x18(%rax),%rax
  10e621:	ff e0                	jmp    *%rax
  10e623:	90                   	nop

000000000010e624 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
  10e624:	c3                   	ret    
  10e625:	90                   	nop

000000000010e626 <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
  10e626:	e9 0d c6 00 00       	jmp    11ac38 <_ZdlPv>
  10e62b:	90                   	nop

000000000010e62c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
  10e62c:	e9 07 c6 00 00       	jmp    11ac38 <_ZdlPv>
  10e631:	90                   	nop

000000000010e632 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEm>:
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
}

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
  10e632:	55                   	push   %rbp
  10e633:	48 89 e5             	mov    %rsp,%rbp
  10e636:	53                   	push   %rbx
  10e637:	51                   	push   %rcx
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
  10e638:	48 85 f6             	test   %rsi,%rsi
  10e63b:	75 05                	jne    10e642 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEm+0x10>
  10e63d:	e8 82 37 00 00       	call   111dc4 <abort>

  if (scratch_buffer_request_count_ == 0) {
  10e642:	48 83 7f 28 00       	cmpq   $0x0,0x28(%rdi)
  10e647:	74 1d                	je     10e666 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEm+0x34>
  10e649:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  10e64d:	48 89 f3             	mov    %rsi,%rbx
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
  10e650:	48 8d 34 d5 00 00 00 	lea    0x0(,%rdx,8),%rsi
  10e657:	00 
  10e658:	ba 08 00 00 00       	mov    $0x8,%edx
  10e65d:	48 8b 07             	mov    (%rdi),%rax
  10e660:	ff 50 18             	call   *0x18(%rax)
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
  10e663:	48 89 03             	mov    %rax,(%rbx)
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));

  return kTfLiteOk;
}
  10e666:	5a                   	pop    %rdx
  10e667:	31 c0                	xor    %eax,%eax
  10e669:	5b                   	pop    %rbx
  10e66a:	5d                   	pop    %rbp
  10e66b:	c3                   	ret    

000000000010e66c <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
  10e66c:	55                   	push   %rbp
    auto field_offset = GetOptionalFieldOffset(field);
  10e66d:	be 08 00 00 00       	mov    $0x8,%esi
  10e672:	48 89 e5             	mov    %rsp,%rbp
  10e675:	53                   	push   %rbx
  10e676:	48 89 fb             	mov    %rdi,%rbx
  10e679:	51                   	push   %rcx
  10e67a:	e8 b5 ee ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
  10e67f:	31 d2                	xor    %edx,%edx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10e681:	66 85 c0             	test   %ax,%ax
  10e684:	74 0b                	je     10e691 <_ZNK6tflite22QuantizationParameters5scaleEv+0x25>
    auto p = data_ + field_offset;
  10e686:	0f b7 c0             	movzwl %ax,%eax
  10e689:	48 01 c3             	add    %rax,%rbx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10e68c:	8b 13                	mov    (%rbx),%edx
  10e68e:	48 01 da             	add    %rbx,%rdx
  }
  10e691:	48 89 d0             	mov    %rdx,%rax
  10e694:	5a                   	pop    %rdx
  10e695:	5b                   	pop    %rbx
  10e696:	5d                   	pop    %rbp
  10e697:	c3                   	ret    

000000000010e698 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
  10e698:	55                   	push   %rbp
    auto field_offset = GetOptionalFieldOffset(field);
  10e699:	be 0a 00 00 00       	mov    $0xa,%esi
  10e69e:	48 89 e5             	mov    %rsp,%rbp
  10e6a1:	53                   	push   %rbx
  10e6a2:	48 89 fb             	mov    %rdi,%rbx
  10e6a5:	51                   	push   %rcx
  10e6a6:	e8 89 ee ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
  10e6ab:	31 d2                	xor    %edx,%edx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10e6ad:	66 85 c0             	test   %ax,%ax
  10e6b0:	74 0b                	je     10e6bd <_ZNK6tflite22QuantizationParameters10zero_pointEv+0x25>
    auto p = data_ + field_offset;
  10e6b2:	0f b7 c0             	movzwl %ax,%eax
  10e6b5:	48 01 c3             	add    %rax,%rbx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10e6b8:	8b 13                	mov    (%rbx),%edx
  10e6ba:	48 01 da             	add    %rbx,%rdx
  }
  10e6bd:	48 89 d0             	mov    %rdx,%rax
  10e6c0:	5a                   	pop    %rdx
  10e6c1:	5b                   	pop    %rbx
  10e6c2:	5d                   	pop    %rbp
  10e6c3:	c3                   	ret    

000000000010e6c4 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
  10e6c4:	55                   	push   %rbp
    auto field_offset = GetOptionalFieldOffset(field);
  10e6c5:	be 06 00 00 00       	mov    $0x6,%esi
  10e6ca:	48 89 e5             	mov    %rsp,%rbp
  10e6cd:	53                   	push   %rbx
  10e6ce:	48 89 fb             	mov    %rdi,%rbx
  10e6d1:	51                   	push   %rcx
  10e6d2:	e8 5d ee ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
  10e6d7:	31 d2                	xor    %edx,%edx
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  10e6d9:	66 85 c0             	test   %ax,%ax
  10e6dc:	74 06                	je     10e6e4 <_ZNK6tflite6Tensor4typeEv+0x20>
  10e6de:	0f b7 c0             	movzwl %ax,%eax
  10e6e1:	8a 14 03             	mov    (%rbx,%rax,1),%dl
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
  10e6e4:	0f be c2             	movsbl %dl,%eax
  }
  10e6e7:	5a                   	pop    %rdx
  10e6e8:	5b                   	pop    %rbx
  10e6e9:	5d                   	pop    %rbp
  10e6ea:	c3                   	ret    
  10e6eb:	90                   	nop

000000000010e6ec <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
  10e6ec:	55                   	push   %rbp
    auto field_offset = GetOptionalFieldOffset(field);
  10e6ed:	be 0e 00 00 00       	mov    $0xe,%esi
  10e6f2:	48 89 e5             	mov    %rsp,%rbp
  10e6f5:	53                   	push   %rbx
  10e6f6:	48 89 fb             	mov    %rdi,%rbx
  10e6f9:	51                   	push   %rcx
  10e6fa:	e8 35 ee ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
  10e6ff:	31 d2                	xor    %edx,%edx
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  10e701:	66 85 c0             	test   %ax,%ax
  10e704:	74 06                	je     10e70c <_ZNK6tflite6Tensor11is_variableEv+0x20>
  10e706:	0f b7 c0             	movzwl %ax,%eax
  10e709:	8a 14 03             	mov    (%rbx,%rax,1),%dl
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
  10e70c:	84 d2                	test   %dl,%dl
  }
  10e70e:	5a                   	pop    %rdx
  10e70f:	5b                   	pop    %rbx
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
  10e710:	0f 95 c0             	setne  %al
  }
  10e713:	5d                   	pop    %rbp
  10e714:	c3                   	ret    
  10e715:	90                   	nop

000000000010e716 <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
  10e716:	55                   	push   %rbp
    auto field_offset = GetOptionalFieldOffset(field);
  10e717:	be 04 00 00 00       	mov    $0x4,%esi
  10e71c:	48 89 e5             	mov    %rsp,%rbp
  10e71f:	53                   	push   %rbx
  10e720:	48 89 fb             	mov    %rdi,%rbx
  10e723:	51                   	push   %rcx
  10e724:	e8 0b ee ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
  10e729:	31 d2                	xor    %edx,%edx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10e72b:	66 85 c0             	test   %ax,%ax
  10e72e:	74 0b                	je     10e73b <_ZNK6tflite8SubGraph7tensorsEv+0x25>
    auto p = data_ + field_offset;
  10e730:	0f b7 c0             	movzwl %ax,%eax
  10e733:	48 01 c3             	add    %rax,%rbx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10e736:	8b 13                	mov    (%rbx),%edx
  10e738:	48 01 da             	add    %rbx,%rdx
  }
  10e73b:	48 89 d0             	mov    %rdx,%rax
  10e73e:	5a                   	pop    %rdx
  10e73f:	5b                   	pop    %rbx
  10e740:	5d                   	pop    %rbp
  10e741:	c3                   	ret    

000000000010e742 <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
  10e742:	55                   	push   %rbp
    auto field_offset = GetOptionalFieldOffset(field);
  10e743:	be 0c 00 00 00       	mov    $0xc,%esi
  10e748:	48 89 e5             	mov    %rsp,%rbp
  10e74b:	53                   	push   %rbx
  10e74c:	48 89 fb             	mov    %rdi,%rbx
  10e74f:	51                   	push   %rcx
  10e750:	e8 df ed ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
  10e755:	31 d2                	xor    %edx,%edx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10e757:	66 85 c0             	test   %ax,%ax
  10e75a:	74 0b                	je     10e767 <_ZNK6tflite5Model7buffersEv+0x25>
    auto p = data_ + field_offset;
  10e75c:	0f b7 c0             	movzwl %ax,%eax
  10e75f:	48 01 c3             	add    %rax,%rbx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10e762:	8b 13                	mov    (%rbx),%edx
  10e764:	48 01 da             	add    %rbx,%rdx
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
  }
  10e767:	48 89 d0             	mov    %rdx,%rax
  10e76a:	5a                   	pop    %rdx
  10e76b:	5b                   	pop    %rbx
  10e76c:	5d                   	pop    %rbp
  10e76d:	c3                   	ret    

000000000010e76e <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
  10e76e:	55                   	push   %rbp
  10e76f:	48 89 e5             	mov    %rsp,%rbp
  10e772:	41 54                	push   %r12
  10e774:	53                   	push   %rbx
  TFLITE_DCHECK(memory_allocator != nullptr);
  10e775:	48 85 ff             	test   %rdi,%rdi
  10e778:	75 05                	jne    10e77f <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x11>
  10e77a:	e8 45 36 00 00       	call   111dc4 <abort>
  10e77f:	49 89 f4             	mov    %rsi,%r12
  TFLITE_DCHECK(error_reporter != nullptr);
  10e782:	48 85 f6             	test   %rsi,%rsi
  10e785:	74 f3                	je     10e77a <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0xc>
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
  10e787:	48 8b 07             	mov    (%rdi),%rax
  10e78a:	48 89 fb             	mov    %rdi,%rbx
  10e78d:	ba 08 00 00 00       	mov    $0x8,%edx
  10e792:	be 38 00 00 00       	mov    $0x38,%esi
  10e797:	ff 50 18             	call   *0x18(%rax)
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
  10e79a:	48 85 c0             	test   %rax,%rax
  10e79d:	74 1d                	je     10e7bc <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x4e>
      model_is_allocating_(false) {}
  10e79f:	31 d2                	xor    %edx,%edx
  10e7a1:	48 c7 00 60 d5 11 00 	movq   $0x11d560,(%rax)
    : memory_allocator_(memory_allocator),
  10e7a8:	48 89 58 08          	mov    %rbx,0x8(%rax)
      error_reporter_(error_reporter),
  10e7ac:	4c 89 60 18          	mov    %r12,0x18(%rax)
      model_is_allocating_(false) {}
  10e7b0:	c6 40 20 00          	movb   $0x0,0x20(%rax)
  10e7b4:	48 89 50 28          	mov    %rdx,0x28(%rax)
  10e7b8:	48 89 50 30          	mov    %rdx,0x30(%rax)
}
  10e7bc:	5b                   	pop    %rbx
  10e7bd:	41 5c                	pop    %r12
  10e7bf:	5d                   	pop    %rbp
  10e7c0:	c3                   	ret    
  10e7c1:	90                   	nop

000000000010e7c2 <_ZN6tflite14MicroAllocator6CreateEPhmPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
  10e7c2:	55                   	push   %rbp
  10e7c3:	48 89 e5             	mov    %rsp,%rbp
  10e7c6:	41 55                	push   %r13
  10e7c8:	49 89 f5             	mov    %rsi,%r13
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
  10e7cb:	be 10 00 00 00       	mov    $0x10,%esi
                                       ErrorReporter* error_reporter) {
  10e7d0:	41 54                	push   %r12
  10e7d2:	49 89 d4             	mov    %rdx,%r12
  10e7d5:	53                   	push   %rbx
  10e7d6:	48 89 fb             	mov    %rdi,%rbx
  10e7d9:	50                   	push   %rax
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
  10e7da:	e8 97 42 00 00       	call   112a76 <_ZN6tflite14AlignPointerUpEPhm>
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
  10e7df:	4a 8d 14 2b          	lea    (%rbx,%r13,1),%rdx
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
  10e7e3:	4c 89 e7             	mov    %r12,%rdi
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
  10e7e6:	48 89 c6             	mov    %rax,%rsi
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
  10e7e9:	48 29 c2             	sub    %rax,%rdx
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
  10e7ec:	e8 65 ec ff ff       	call   10d456 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhm>
}
  10e7f1:	5a                   	pop    %rdx
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
  10e7f2:	4c 89 e6             	mov    %r12,%rsi
}
  10e7f5:	5b                   	pop    %rbx
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
  10e7f6:	48 89 c7             	mov    %rax,%rdi
}
  10e7f9:	41 5c                	pop    %r12
  10e7fb:	41 5d                	pop    %r13
  10e7fd:	5d                   	pop    %rbp
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
  10e7fe:	e9 6b ff ff ff       	jmp    10e76e <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
  10e803:	90                   	nop

000000000010e804 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
  10e804:	31 c0                	xor    %eax,%eax

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
  10e806:	ba 08 00 00 00       	mov    $0x8,%edx
  10e80b:	be c0 00 00 00       	mov    $0xc0,%esi
  scratch_buffer_request_count_ = 0;
  10e810:	48 89 47 28          	mov    %rax,0x28(%rdi)
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
  10e814:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  10e818:	48 8b 07             	mov    (%rdi),%rax
  10e81b:	48 8b 40 10          	mov    0x10(%rax),%rax
  10e81f:	ff e0                	jmp    *%rax
  10e821:	90                   	nop

000000000010e822 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:
SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
  10e822:	55                   	push   %rbp
  10e823:	48 89 e5             	mov    %rsp,%rbp
  10e826:	41 56                	push   %r14
  10e828:	41 55                	push   %r13
  10e82a:	41 54                	push   %r12
  10e82c:	53                   	push   %rbx
  TFLITE_DCHECK(model != nullptr);
  10e82d:	48 85 f6             	test   %rsi,%rsi
  10e830:	75 05                	jne    10e837 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x15>
  10e832:	e8 8d 35 00 00       	call   111dc4 <abort>
  if (model_is_allocating_) {
  10e837:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
  10e83b:	48 89 fb             	mov    %rdi,%rbx
  10e83e:	74 12                	je     10e852 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x30>
    TF_LITE_REPORT_ERROR(error_reporter_,
  10e840:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
  10e844:	be 70 f0 11 00       	mov    $0x11f070,%esi
  10e849:	31 c0                	xor    %eax,%eax
  10e84b:	e8 24 13 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
  10e850:	eb 78                	jmp    10e8ca <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa8>
  model_is_allocating_ = true;
  10e852:	c6 47 20 01          	movb   $0x1,0x20(%rdi)
  uint8_t* data_allocator_buffer = memory_allocator_->AllocateFromTail(
  10e856:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  10e85a:	49 89 f5             	mov    %rsi,%r13
  10e85d:	ba 08 00 00 00       	mov    $0x8,%edx
  10e862:	be 10 00 00 00       	mov    $0x10,%esi
  10e867:	48 8b 07             	mov    (%rdi),%rax
  10e86a:	ff 50 18             	call   *0x18(%rax)
      new (data_allocator_buffer) MicroBuiltinDataAllocator(memory_allocator_);
  10e86d:	48 85 c0             	test   %rax,%rax
  10e870:	74 0f                	je     10e881 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x5f>
  10e872:	48 8b 53 08          	mov    0x8(%rbx),%rdx
      : memory_allocator_(memory_allocator) {}
  10e876:	48 c7 00 30 d5 11 00 	movq   $0x11d530,(%rax)
  10e87d:	48 89 50 08          	mov    %rdx,0x8(%rax)
  builtin_data_allocator_ =
  10e881:	48 89 43 10          	mov    %rax,0x10(%rbx)
  if (InitScratchBufferData() != kTfLiteOk) {
  10e885:	48 89 df             	mov    %rbx,%rdi
  10e888:	e8 77 ff ff ff       	call   10e804 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
  10e88d:	85 c0                	test   %eax,%eax
  10e88f:	75 39                	jne    10e8ca <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa8>
      memory_allocator_->AllocateFromTail(
  10e891:	4c 8b 63 08          	mov    0x8(%rbx),%r12
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
  10e895:	4c 89 ef             	mov    %r13,%rdi
      memory_allocator_->AllocateFromTail(
  10e898:	49 8b 04 24          	mov    (%r12),%rax
  10e89c:	4c 8b 70 18          	mov    0x18(%rax),%r14
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
  10e8a0:	e8 a5 ec ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
      memory_allocator_->AllocateFromTail(
  10e8a5:	4c 89 e7             	mov    %r12,%rdi
  10e8a8:	ba 08 00 00 00       	mov    $0x8,%edx
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
  10e8ad:	8b 30                	mov    (%rax),%esi
      memory_allocator_->AllocateFromTail(
  10e8af:	48 c1 e6 04          	shl    $0x4,%rsi
  10e8b3:	41 ff d6             	call   *%r14
  10e8b6:	49 89 c4             	mov    %rax,%r12
  if (output == nullptr) {
  10e8b9:	48 85 c0             	test   %rax,%rax
  10e8bc:	75 11                	jne    10e8cf <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xad>
    MicroPrintf("Failed to allocate memory for model metadata.");
  10e8be:	bf c5 f0 11 00       	mov    $0x11f0c5,%edi
  10e8c3:	31 c0                	xor    %eax,%eax
  10e8c5:	e8 1f 41 00 00       	call   1129e9 <_Z11MicroPrintfPKcz>
    return nullptr;
  10e8ca:	45 31 e4             	xor    %r12d,%r12d
  10e8cd:	eb 26                	jmp    10e8f5 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xd3>
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
  10e8cf:	48 8b 03             	mov    (%rbx),%rax
  10e8d2:	4c 89 e2             	mov    %r12,%rdx
  10e8d5:	4c 89 ee             	mov    %r13,%rsi
  10e8d8:	48 89 df             	mov    %rbx,%rdi
  10e8db:	ff 50 38             	call   *0x38(%rax)
  10e8de:	85 c0                	test   %eax,%eax
  10e8e0:	75 e8                	jne    10e8ca <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa8>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
  10e8e2:	48 8b 03             	mov    (%rbx),%rax
  10e8e5:	4c 89 e2             	mov    %r12,%rdx
  10e8e8:	4c 89 ee             	mov    %r13,%rsi
  10e8eb:	48 89 df             	mov    %rbx,%rdi
  10e8ee:	ff 50 30             	call   *0x30(%rax)
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
  10e8f1:	85 c0                	test   %eax,%eax
  10e8f3:	75 d5                	jne    10e8ca <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xa8>
}
  10e8f5:	5b                   	pop    %rbx
  10e8f6:	4c 89 e0             	mov    %r12,%rax
  10e8f9:	41 5c                	pop    %r12
  10e8fb:	41 5d                	pop    %r13
  10e8fd:	41 5e                	pop    %r14
  10e8ff:	5d                   	pop    %rbp
  10e900:	c3                   	ret    
  10e901:	90                   	nop

000000000010e902 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
  10e902:	55                   	push   %rbp
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
  10e903:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
  10e907:	48 89 e5             	mov    %rsp,%rbp
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
  10e90a:	e8 d3 eb ff ff       	call   10d4e2 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
  10e90f:	be 08 00 00 00       	mov    $0x8,%esi
                     alignof(internal::ScratchBufferRequest)));
}
  10e914:	5d                   	pop    %rbp
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
  10e915:	48 89 c7             	mov    %rax,%rdi
  10e918:	e9 59 41 00 00       	jmp    112a76 <_ZN6tflite14AlignPointerUpEPhm>
  10e91d:	90                   	nop

000000000010e91e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEmiPi>:
                                                         int* buffer_idx) {
  10e91e:	55                   	push   %rbp
  10e91f:	48 89 e5             	mov    %rsp,%rbp
  10e922:	41 55                	push   %r13
  10e924:	49 89 f5             	mov    %rsi,%r13
  10e927:	41 54                	push   %r12
  10e929:	49 89 cc             	mov    %rcx,%r12
  10e92c:	53                   	push   %rbx
  10e92d:	48 89 fb             	mov    %rdi,%rbx
  10e930:	41 50                	push   %r8
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
  10e932:	e8 cb ff ff ff       	call   10e902 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
  10e937:	48 8b 53 28          	mov    0x28(%rbx),%rdx
  10e93b:	31 f6                	xor    %esi,%esi
  size_t current_node_request_count = 0;
  10e93d:	31 c9                	xor    %ecx,%ecx
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
  10e93f:	48 39 f2             	cmp    %rsi,%rdx
  10e942:	74 16                	je     10e95a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEmiPi+0x3c>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
  10e944:	48 89 f7             	mov    %rsi,%rdi
  10e947:	48 c1 e7 04          	shl    $0x4,%rdi
  10e94b:	83 7c 38 08 ff       	cmpl   $0xffffffff,0x8(%rax,%rdi,1)
  10e950:	75 03                	jne    10e955 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEmiPi+0x37>
      ++current_node_request_count;
  10e952:	48 ff c1             	inc    %rcx
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
  10e955:	48 ff c6             	inc    %rsi
  10e958:	eb e5                	jmp    10e93f <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEmiPi+0x21>
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
  10e95a:	48 83 f9 0b          	cmp    $0xb,%rcx
  10e95e:	76 1c                	jbe    10e97c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEmiPi+0x5e>
    TF_LITE_REPORT_ERROR(
  10e960:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
  10e964:	ba 0c 00 00 00       	mov    $0xc,%edx
  10e969:	be f3 f0 11 00       	mov    $0x11f0f3,%esi
  10e96e:	31 c0                	xor    %eax,%eax
  10e970:	e8 ff 11 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
  10e975:	b8 01 00 00 00       	mov    $0x1,%eax
  10e97a:	eb 25                	jmp    10e9a1 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEmiPi+0x83>
      &requests[scratch_buffer_request_count_];
  10e97c:	48 c1 e2 04          	shl    $0x4,%rdx
  *current_request = {};
  10e980:	0f 57 c0             	xorps  %xmm0,%xmm0
  internal::ScratchBufferRequest* current_request =
  10e983:	48 01 d0             	add    %rdx,%rax
  *current_request = {};
  10e986:	0f 11 00             	movups %xmm0,(%rax)
  current_request->bytes = bytes;
  10e989:	4c 89 28             	mov    %r13,(%rax)
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
  10e98c:	c7 40 08 ff ff ff ff 	movl   $0xffffffff,0x8(%rax)
  *buffer_idx = scratch_buffer_request_count_;
  10e993:	48 8b 43 28          	mov    0x28(%rbx),%rax
  10e997:	41 89 04 24          	mov    %eax,(%r12)
  return kTfLiteOk;
  10e99b:	31 c0                	xor    %eax,%eax
  ++scratch_buffer_request_count_;
  10e99d:	48 ff 43 28          	incq   0x28(%rbx)
}
  10e9a1:	5a                   	pop    %rdx
  10e9a2:	5b                   	pop    %rbx
  10e9a3:	41 5c                	pop    %r12
  10e9a5:	41 5d                	pop    %r13
  10e9a7:	5d                   	pop    %rbp
  10e9a8:	c3                   	ret    
  10e9a9:	90                   	nop

000000000010e9aa <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
  10e9aa:	55                   	push   %rbp
  10e9ab:	48 89 e5             	mov    %rsp,%rbp
  10e9ae:	41 54                	push   %r12
  10e9b0:	41 89 f4             	mov    %esi,%r12d
  10e9b3:	53                   	push   %rbx
  ResetTempAllocations();
  10e9b4:	48 8b 07             	mov    (%rdi),%rax
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
  10e9b7:	48 89 fb             	mov    %rdi,%rbx
  ResetTempAllocations();
  10e9ba:	ff 50 10             	call   *0x10(%rax)
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
  10e9bd:	48 89 df             	mov    %rbx,%rdi
  10e9c0:	e8 3d ff ff ff       	call   10e902 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
  10e9c5:	31 c9                	xor    %ecx,%ecx
  10e9c7:	48 83 c0 08          	add    $0x8,%rax
  10e9cb:	48 8b 53 28          	mov    0x28(%rbx),%rdx
  10e9cf:	48 39 d1             	cmp    %rdx,%rcx
  10e9d2:	73 11                	jae    10e9e5 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x3b>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
  10e9d4:	83 38 ff             	cmpl   $0xffffffff,(%rax)
  10e9d7:	75 03                	jne    10e9dc <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x32>
      requests[i].node_idx = node_id;
  10e9d9:	44 89 20             	mov    %r12d,(%rax)
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
  10e9dc:	48 ff c1             	inc    %rcx
  10e9df:	48 83 c0 10          	add    $0x10,%rax
  10e9e3:	eb e6                	jmp    10e9cb <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x21>
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
  10e9e5:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
  10e9e9:	48 8d 72 0c          	lea    0xc(%rdx),%rsi
}
  10e9ed:	5b                   	pop    %rbx
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
  10e9ee:	ba 08 00 00 00       	mov    $0x8,%edx
}
  10e9f3:	41 5c                	pop    %r12
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
  10e9f5:	48 c1 e6 04          	shl    $0x4,%rsi
}
  10e9f9:	5d                   	pop    %rbp
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
  10e9fa:	48 8b 07             	mov    (%rdi),%rax
  10e9fd:	48 8b 40 10          	mov    0x10(%rax),%rax
  10ea01:	ff e0                	jmp    *%rax
  10ea03:	90                   	nop

000000000010ea04 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray>:
  TFLITE_DCHECK(error_reporter != nullptr);
  10ea04:	48 83 7f 18 00       	cmpq   $0x0,0x18(%rdi)
  10ea09:	75 09                	jne    10ea14 <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray+0x10>

TfLiteStatus MicroAllocator::FlatBufferVectorToTfLiteTypeArray(
    const flatbuffers::Vector<int32_t>* flatbuffer_array,
    TfLiteIntArray** result) {
  10ea0b:	55                   	push   %rbp
  10ea0c:	48 89 e5             	mov    %rsp,%rbp
  TFLITE_DCHECK(error_reporter != nullptr);
  10ea0f:	e8 b0 33 00 00       	call   111dc4 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
  10ea14:	48 85 f6             	test   %rsi,%rsi
  10ea17:	74 f2                	je     10ea0b <_ZN6tflite14MicroAllocator33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIiEEPP14TfLiteIntArray+0x7>
    *result = const_cast<kTfLiteArrayType*>(
  10ea19:	48 89 32             	mov    %rsi,(%rdx)
  return internal::FlatBufferVectorToTfLiteTypeArray(
      memory_allocator_, error_reporter_, flatbuffer_array, result);
}
  10ea1c:	31 c0                	xor    %eax,%eax
  10ea1e:	c3                   	ret    
  10ea1f:	90                   	nop

000000000010ea20 <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:

BuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
  return builtin_data_allocator_;
  10ea20:	48 8b 47 10          	mov    0x10(%rdi),%rax
}
  10ea24:	c3                   	ret    
  10ea25:	90                   	nop

000000000010ea26 <_ZNK11flatbuffers6VectorIxE3GetEj>:
    FLATBUFFERS_ASSERT(i < size());
  10ea26:	3b 37                	cmp    (%rdi),%esi
  10ea28:	72 1d                	jb     10ea47 <_ZNK11flatbuffers6VectorIxE3GetEj+0x21>
  return_type Get(uoffset_t i) const {
  10ea2a:	55                   	push   %rbp
    FLATBUFFERS_ASSERT(i < size());
  10ea2b:	b9 55 e3 11 00       	mov    $0x11e355,%ecx
  10ea30:	ba cb e6 11 00       	mov    $0x11e6cb,%edx
  10ea35:	be 06 01 00 00       	mov    $0x106,%esi
  10ea3a:	bf 07 e4 11 00       	mov    $0x11e407,%edi
  return_type Get(uoffset_t i) const {
  10ea3f:	48 89 e5             	mov    %rsp,%rbp
    FLATBUFFERS_ASSERT(i < size());
  10ea42:	e8 29 43 ff ff       	call   102d70 <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
  10ea47:	89 f6                	mov    %esi,%esi
    return IndirectHelper<T>::Read(Data(), i);
  10ea49:	48 8b 44 f7 04       	mov    0x4(%rdi,%rsi,8),%rax
  }
  10ea4e:	c3                   	ret    
  10ea4f:	90                   	nop

000000000010ea50 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>:
    FLATBUFFERS_ASSERT(i < size());
  10ea50:	3b 37                	cmp    (%rdi),%esi
  10ea52:	72 1d                	jb     10ea71 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x21>
  return_type Get(uoffset_t i) const {
  10ea54:	55                   	push   %rbp
    FLATBUFFERS_ASSERT(i < size());
  10ea55:	b9 55 e3 11 00       	mov    $0x11e355,%ecx
  10ea5a:	ba f2 e5 11 00       	mov    $0x11e5f2,%edx
  10ea5f:	be 06 01 00 00       	mov    $0x106,%esi
  10ea64:	bf 07 e4 11 00       	mov    $0x11e407,%edi
  return_type Get(uoffset_t i) const {
  10ea69:	48 89 e5             	mov    %rsp,%rbp
    FLATBUFFERS_ASSERT(i < size());
  10ea6c:	e8 ff 42 ff ff       	call   102d70 <__assert_func>
    p += i * sizeof(uoffset_t);
  10ea71:	89 f6                	mov    %esi,%esi
  10ea73:	48 8d 44 b7 04       	lea    0x4(%rdi,%rsi,4),%rax
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
  10ea78:	8b 10                	mov    (%rax),%edx
  10ea7a:	48 01 d0             	add    %rdx,%rax
  }
  10ea7d:	c3                   	ret    

000000000010ea7e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
                                               TfLiteEvalTensor* eval_tensors) {
  10ea7e:	55                   	push   %rbp
  10ea7f:	48 89 e5             	mov    %rsp,%rbp
  10ea82:	41 56                	push   %r14
  10ea84:	49 89 f6             	mov    %rsi,%r14
  10ea87:	41 55                	push   %r13
  10ea89:	49 89 fd             	mov    %rdi,%r13
  10ea8c:	41 54                	push   %r12
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
  10ea8e:	45 31 e4             	xor    %r12d,%r12d
                                               TfLiteEvalTensor* eval_tensors) {
  10ea91:	53                   	push   %rbx
  10ea92:	48 89 d3             	mov    %rdx,%rbx
  10ea95:	48 83 ec 10          	sub    $0x10,%rsp
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
  10ea99:	4c 89 f7             	mov    %r14,%rdi
  10ea9c:	e8 75 fc ff ff       	call   10e716 <_ZNK6tflite8SubGraph7tensorsEv>
  10eaa1:	48 89 c7             	mov    %rax,%rdi
  10eaa4:	8b 00                	mov    (%rax),%eax
  10eaa6:	49 39 c4             	cmp    %rax,%r12
  10eaa9:	73 61                	jae    10eb0c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x8e>
    auto* tensor = subgraph->tensors()->Get(i);
  10eaab:	44 89 e6             	mov    %r12d,%esi
  10eaae:	e8 9d ff ff ff       	call   10ea50 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
  10eab3:	48 89 c7             	mov    %rax,%rdi
    if (tensor->is_variable()) {
  10eab6:	e8 31 fc ff ff       	call   10e6ec <_ZNK6tflite6Tensor11is_variableEv>
  10eabb:	84 c0                	test   %al,%al
  10eabd:	74 44                	je     10eb03 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x85>
      TF_LITE_ENSURE_STATUS(
  10eabf:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  10eac3:	48 89 df             	mov    %rbx,%rdi
  10eac6:	e8 34 41 00 00       	call   112bff <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm>
  10eacb:	85 c0                	test   %eax,%eax
  10eacd:	75 3f                	jne    10eb0e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x90>
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
  10eacf:	49 8b 7d 08          	mov    0x8(%r13),%rdi
  10ead3:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  10ead7:	ba 10 00 00 00       	mov    $0x10,%edx
  10eadc:	48 8b 07             	mov    (%rdi),%rax
  10eadf:	ff 50 18             	call   *0x18(%rax)
      eval_tensors[i].data.data =
  10eae2:	48 89 03             	mov    %rax,(%rbx)
      if (eval_tensors[i].data.data == nullptr) {
  10eae5:	48 85 c0             	test   %rax,%rax
  10eae8:	75 19                	jne    10eb03 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x85>
        TF_LITE_REPORT_ERROR(error_reporter_,
  10eaea:	49 8b 7d 18          	mov    0x18(%r13),%rdi
  10eaee:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  10eaf2:	be 29 f1 11 00       	mov    $0x11f129,%esi
  10eaf7:	e8 78 10 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
  10eafc:	b8 01 00 00 00       	mov    $0x1,%eax
  10eb01:	eb 0b                	jmp    10eb0e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x90>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
  10eb03:	49 ff c4             	inc    %r12
  10eb06:	48 83 c3 18          	add    $0x18,%rbx
  10eb0a:	eb 8d                	jmp    10ea99 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x1b>
  return kTfLiteOk;
  10eb0c:	31 c0                	xor    %eax,%eax
}
  10eb0e:	5a                   	pop    %rdx
  10eb0f:	59                   	pop    %rcx
  10eb10:	5b                   	pop    %rbx
  10eb11:	41 5c                	pop    %r12
  10eb13:	41 5d                	pop    %r13
  10eb15:	41 5e                	pop    %r14
  10eb17:	5d                   	pop    %rbp
  10eb18:	c3                   	ret    
  10eb19:	90                   	nop

000000000010eb1a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle** scratch_buffer_handles) {
  10eb1a:	55                   	push   %rbp
  10eb1b:	48 89 e5             	mov    %rsp,%rbp
  10eb1e:	41 57                	push   %r15
  10eb20:	41 56                	push   %r14
  10eb22:	41 55                	push   %r13
  10eb24:	49 89 fd             	mov    %rdi,%r13
  10eb27:	41 54                	push   %r12
  10eb29:	53                   	push   %rbx
  10eb2a:	48 83 ec 18          	sub    $0x18,%rsp
  if (!model_is_allocating_) {
  10eb2e:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
    ScratchBufferHandle** scratch_buffer_handles) {
  10eb32:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
  if (!model_is_allocating_) {
  10eb36:	74 0c                	je     10eb44 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x2a>
  10eb38:	49 89 ce             	mov    %rcx,%r14
  10eb3b:	48 8d 5a 08          	lea    0x8(%rdx),%rbx
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
  10eb3f:	45 31 e4             	xor    %r12d,%r12d
  10eb42:	eb 62                	jmp    10eba6 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x8c>
    TF_LITE_REPORT_ERROR(error_reporter_,
  10eb44:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
  10eb48:	be 57 f1 11 00       	mov    $0x11f157,%esi
  10eb4d:	31 c0                	xor    %eax,%eax
  10eb4f:	e8 20 10 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
  10eb54:	b8 01 00 00 00       	mov    $0x1,%eax
  10eb59:	eb 7a                	jmp    10ebd5 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xbb>
    TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
  10eb5b:	49 8b 45 00          	mov    0x0(%r13),%rax
  10eb5f:	49 8b 55 28          	mov    0x28(%r13),%rdx
  10eb63:	4c 89 f6             	mov    %r14,%rsi
  10eb66:	4c 89 ef             	mov    %r13,%rdi
  10eb69:	ff 50 60             	call   *0x60(%rax)
  10eb6c:	85 c0                	test   %eax,%eax
  10eb6e:	75 65                	jne    10ebd5 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xbb>
    TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(
  10eb70:	49 8b 45 00          	mov    0x0(%r13),%rax
  10eb74:	49 8b 0e             	mov    (%r14),%rcx
  10eb77:	45 89 e0             	mov    %r12d,%r8d
  10eb7a:	4c 89 ef             	mov    %r13,%rdi
  10eb7d:	48 8b 13             	mov    (%rbx),%rdx
  10eb80:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10eb84:	ff 50 58             	call   *0x58(%rax)
  10eb87:	85 c0                	test   %eax,%eax
  10eb89:	75 4a                	jne    10ebd5 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xbb>
    TF_LITE_ENSURE_STATUS(AllocateVariables(
  10eb8b:	49 8b 45 00          	mov    0x0(%r13),%rax
  10eb8f:	48 8b 13             	mov    (%rbx),%rdx
  10eb92:	4c 89 fe             	mov    %r15,%rsi
  10eb95:	4c 89 ef             	mov    %r13,%rdi
  10eb98:	48 83 c3 10          	add    $0x10,%rbx
  10eb9c:	ff 50 40             	call   *0x40(%rax)
  10eb9f:	85 c0                	test   %eax,%eax
  10eba1:	75 32                	jne    10ebd5 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xbb>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
  10eba3:	49 ff c4             	inc    %r12
  10eba6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  10ebaa:	e8 9b e9 ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10ebaf:	48 89 c7             	mov    %rax,%rdi
  10ebb2:	8b 00                	mov    (%rax),%eax
  10ebb4:	49 39 c4             	cmp    %rax,%r12
  10ebb7:	73 15                	jae    10ebce <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0xb4>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  10ebb9:	44 89 e6             	mov    %r12d,%esi
  10ebbc:	e8 b5 e9 ff ff       	call   10d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  10ebc1:	49 89 c7             	mov    %rax,%r15
    TFLITE_DCHECK(subgraph != nullptr);
  10ebc4:	48 85 c0             	test   %rax,%rax
  10ebc7:	75 92                	jne    10eb5b <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x41>
  10ebc9:	e8 f6 31 00 00       	call   111dc4 <abort>
  model_is_allocating_ = false;
  10ebce:	41 c6 45 20 00       	movb   $0x0,0x20(%r13)
  return kTfLiteOk;
  10ebd3:	31 c0                	xor    %eax,%eax
}
  10ebd5:	48 83 c4 18          	add    $0x18,%rsp
  10ebd9:	5b                   	pop    %rbx
  10ebda:	41 5c                	pop    %r12
  10ebdc:	41 5d                	pop    %r13
  10ebde:	41 5e                	pop    %r14
  10ebe0:	41 5f                	pop    %r15
  10ebe2:	5d                   	pop    %rbp
  10ebe3:	c3                   	ret    

000000000010ebe4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
  10ebe4:	55                   	push   %rbp
  10ebe5:	48 89 e5             	mov    %rsp,%rbp
  10ebe8:	41 56                	push   %r14
  10ebea:	41 55                	push   %r13
  10ebec:	41 54                	push   %r12
  10ebee:	53                   	push   %rbx
  TFLITE_DCHECK(subgraph_allocations != nullptr);
  10ebef:	48 85 d2             	test   %rdx,%rdx
  10ebf2:	75 05                	jne    10ebf9 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x15>
  10ebf4:	e8 cb 31 00 00       	call   111dc4 <abort>
  10ebf9:	49 89 fc             	mov    %rdi,%r12
  10ebfc:	49 89 f6             	mov    %rsi,%r14
  10ebff:	49 89 d5             	mov    %rdx,%r13
  10ec02:	31 db                	xor    %ebx,%ebx
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
  10ec04:	4c 89 f7             	mov    %r14,%rdi
  10ec07:	e8 3e e9 ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10ec0c:	48 89 c7             	mov    %rax,%rdi
  10ec0f:	8b 00                	mov    (%rax),%eax
  10ec11:	48 39 c3             	cmp    %rax,%rbx
  10ec14:	73 56                	jae    10ec6c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x88>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  10ec16:	89 de                	mov    %ebx,%esi
  10ec18:	e8 59 e9 ff ff       	call   10d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  10ec1d:	48 89 c7             	mov    %rax,%rdi
    TFLITE_DCHECK(subgraph != nullptr);
  10ec20:	48 85 c0             	test   %rax,%rax
  10ec23:	74 cf                	je     10ebf4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
    uint32_t operators_size = NumSubgraphOperators(subgraph);
  10ec25:	e8 eb 44 00 00       	call   113115 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
        memory_allocator_->AllocateFromTail(
  10ec2a:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  10ec2f:	ba 08 00 00 00       	mov    $0x8,%edx
            sizeof(NodeAndRegistration) * operators_size,
  10ec34:	89 c6                	mov    %eax,%esi
        memory_allocator_->AllocateFromTail(
  10ec36:	48 8b 07             	mov    (%rdi),%rax
  10ec39:	48 6b f6 58          	imul   $0x58,%rsi,%rsi
  10ec3d:	ff 50 18             	call   *0x18(%rax)
    if (output == nullptr) {
  10ec40:	48 85 c0             	test   %rax,%rax
  10ec43:	75 16                	jne    10ec5b <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x77>
      TF_LITE_REPORT_ERROR(
  10ec45:	49 8b 7c 24 18       	mov    0x18(%r12),%rdi
  10ec4a:	be a2 f1 11 00       	mov    $0x11f1a2,%esi
  10ec4f:	e8 20 0f 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
  10ec54:	b8 01 00 00 00       	mov    $0x1,%eax
  10ec59:	eb 13                	jmp    10ec6e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8a>
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
  10ec5b:	48 89 da             	mov    %rbx,%rdx
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
  10ec5e:	48 ff c3             	inc    %rbx
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
  10ec61:	48 c1 e2 04          	shl    $0x4,%rdx
  10ec65:	49 89 44 15 00       	mov    %rax,0x0(%r13,%rdx,1)
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
  10ec6a:	eb 98                	jmp    10ec04 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x20>
  return kTfLiteOk;
  10ec6c:	31 c0                	xor    %eax,%eax
}
  10ec6e:	5b                   	pop    %rbx
  10ec6f:	41 5c                	pop    %r12
  10ec71:	41 5d                	pop    %r13
  10ec73:	41 5e                	pop    %r14
  10ec75:	5d                   	pop    %rbp
  10ec76:	c3                   	ret    
  10ec77:	90                   	nop

000000000010ec78 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
    int tensor_index, int subgraph_index) {
  10ec78:	55                   	push   %rbp
  10ec79:	48 89 e5             	mov    %rsp,%rbp
  10ec7c:	41 57                	push   %r15
  10ec7e:	49 89 ff             	mov    %rdi,%r15
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  10ec81:	48 89 f7             	mov    %rsi,%rdi
    int tensor_index, int subgraph_index) {
  10ec84:	41 56                	push   %r14
  10ec86:	41 55                	push   %r13
  10ec88:	49 89 d5             	mov    %rdx,%r13
  10ec8b:	41 54                	push   %r12
  10ec8d:	4d 63 e0             	movslq %r8d,%r12
  10ec90:	53                   	push   %rbx
  10ec91:	48 63 d9             	movslq %ecx,%rbx
  10ec94:	48 83 ec 18          	sub    $0x18,%rsp
  10ec98:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  10ec9c:	e8 a9 e8 ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10eca1:	44 89 e6             	mov    %r12d,%esi
  10eca4:	48 89 c7             	mov    %rax,%rdi
  10eca7:	e8 ca e8 ff ff       	call   10d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  TFLITE_DCHECK(subgraph != nullptr);
  10ecac:	48 85 c0             	test   %rax,%rax
  10ecaf:	75 05                	jne    10ecb6 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3e>
  10ecb1:	e8 0e 31 00 00       	call   111dc4 <abort>
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
  10ecb6:	49 8b 07             	mov    (%r15),%rax
  10ecb9:	4c 89 ff             	mov    %r15,%rdi
  10ecbc:	ff 50 48             	call   *0x48(%rax)
  if (PopulateTfLiteTensorFromFlatbuffer(
  10ecbf:	45 31 c9             	xor    %r9d,%r9d
  10ecc2:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10ecc6:	45 89 e0             	mov    %r12d,%r8d
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
  10ecc9:	49 89 c6             	mov    %rax,%r14
  if (PopulateTfLiteTensorFromFlatbuffer(
  10eccc:	49 8b 07             	mov    (%r15),%rax
  10eccf:	89 d9                	mov    %ebx,%ecx
  10ecd1:	4c 89 ff             	mov    %r15,%rdi
  10ecd4:	4c 89 f2             	mov    %r14,%rdx
  10ecd7:	ff 50 50             	call   *0x50(%rax)
  10ecda:	85 c0                	test   %eax,%eax
  10ecdc:	74 15                	je     10ecf3 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x7b>
    TF_LITE_REPORT_ERROR(error_reporter_,
  10ecde:	49 8b 7f 18          	mov    0x18(%r15),%rdi
  10ece2:	be d8 f1 11 00       	mov    $0x11f1d8,%esi
  10ece7:	31 c0                	xor    %eax,%eax
    return nullptr;
  10ece9:	45 31 f6             	xor    %r14d,%r14d
    TF_LITE_REPORT_ERROR(error_reporter_,
  10ecec:	e8 83 0e 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
  10ecf1:	eb 29                	jmp    10ed1c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa4>
  if (subgraph_allocations != nullptr) {
  10ecf3:	4d 85 ed             	test   %r13,%r13
  10ecf6:	74 24                	je     10ed1c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xa4>
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
  10ecf8:	49 c1 e4 04          	shl    $0x4,%r12
  10ecfc:	48 6b db 18          	imul   $0x18,%rbx,%rbx
  10ed00:	4d 01 e5             	add    %r12,%r13
  10ed03:	49 8b 45 08          	mov    0x8(%r13),%rax
  10ed07:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
    tensor->data.data =
  10ed0b:	49 89 46 08          	mov    %rax,0x8(%r14)
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
  10ed0f:	49 8b 45 08          	mov    0x8(%r13),%rax
  10ed13:	48 8b 44 18 08       	mov    0x8(%rax,%rbx,1),%rax
    tensor->dims =
  10ed18:	49 89 46 10          	mov    %rax,0x10(%r14)
}
  10ed1c:	48 83 c4 18          	add    $0x18,%rsp
  10ed20:	4c 89 f0             	mov    %r14,%rax
  10ed23:	5b                   	pop    %rbx
  10ed24:	41 5c                	pop    %r12
  10ed26:	41 5d                	pop    %r13
  10ed28:	41 5e                	pop    %r14
  10ed2a:	41 5f                	pop    %r15
  10ed2c:	5d                   	pop    %rbp
  10ed2d:	c3                   	ret    

000000000010ed2e <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
    int tensor_index, int subgraph_index) {
  10ed2e:	55                   	push   %rbp
  10ed2f:	48 89 e5             	mov    %rsp,%rbp
  10ed32:	41 57                	push   %r15
  10ed34:	49 89 ff             	mov    %rdi,%r15
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  10ed37:	48 89 f7             	mov    %rsi,%rdi
    int tensor_index, int subgraph_index) {
  10ed3a:	41 56                	push   %r14
  10ed3c:	41 55                	push   %r13
  10ed3e:	49 89 d5             	mov    %rdx,%r13
  10ed41:	41 54                	push   %r12
  10ed43:	4d 63 e0             	movslq %r8d,%r12
  10ed46:	53                   	push   %rbx
  10ed47:	48 63 d9             	movslq %ecx,%rbx
  10ed4a:	48 83 ec 18          	sub    $0x18,%rsp
  10ed4e:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
  10ed52:	e8 f3 e7 ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10ed57:	44 89 e6             	mov    %r12d,%esi
  10ed5a:	48 89 c7             	mov    %rax,%rdi
  10ed5d:	e8 14 e8 ff ff       	call   10d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  TFLITE_DCHECK(subgraph != nullptr);
  10ed62:	48 85 c0             	test   %rax,%rax
  10ed65:	75 05                	jne    10ed6c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x3e>
  10ed67:	e8 58 30 00 00       	call   111dc4 <abort>
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
  10ed6c:	49 8b 7f 08          	mov    0x8(%r15),%rdi
  10ed70:	ba 08 00 00 00       	mov    $0x8,%edx
  10ed75:	be 70 00 00 00       	mov    $0x70,%esi
  10ed7a:	48 8b 07             	mov    (%rdi),%rax
  10ed7d:	ff 50 20             	call   *0x20(%rax)
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
  10ed80:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10ed84:	41 b9 01 00 00 00    	mov    $0x1,%r9d
  10ed8a:	45 89 e0             	mov    %r12d,%r8d
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
  10ed8d:	49 89 c6             	mov    %rax,%r14
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
  10ed90:	49 8b 07             	mov    (%r15),%rax
  10ed93:	89 d9                	mov    %ebx,%ecx
  10ed95:	4c 89 ff             	mov    %r15,%rdi
  10ed98:	4c 89 f2             	mov    %r14,%rdx
  10ed9b:	ff 50 50             	call   *0x50(%rax)
  10ed9e:	85 c0                	test   %eax,%eax
  10eda0:	74 15                	je     10edb7 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x89>
    TF_LITE_REPORT_ERROR(
  10eda2:	49 8b 7f 18          	mov    0x18(%r15),%rdi
  10eda6:	be 22 f2 11 00       	mov    $0x11f222,%esi
  10edab:	31 c0                	xor    %eax,%eax
    return nullptr;
  10edad:	45 31 f6             	xor    %r14d,%r14d
    TF_LITE_REPORT_ERROR(
  10edb0:	e8 bf 0d 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
  10edb5:	eb 29                	jmp    10ede0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb2>
  if (subgraph_allocations != nullptr) {
  10edb7:	4d 85 ed             	test   %r13,%r13
  10edba:	74 24                	je     10ede0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0xb2>
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
  10edbc:	49 c1 e4 04          	shl    $0x4,%r12
  10edc0:	48 6b db 18          	imul   $0x18,%rbx,%rbx
  10edc4:	4d 01 e5             	add    %r12,%r13
  10edc7:	49 8b 45 08          	mov    0x8(%r13),%rax
  10edcb:	48 8b 04 18          	mov    (%rax,%rbx,1),%rax
    tensor->data.data =
  10edcf:	49 89 46 08          	mov    %rax,0x8(%r14)
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
  10edd3:	49 8b 45 08          	mov    0x8(%r13),%rax
  10edd7:	48 8b 44 18 08       	mov    0x8(%rax,%rbx,1),%rax
    tensor->dims =
  10eddc:	49 89 46 10          	mov    %rax,0x10(%r14)
}
  10ede0:	48 83 c4 18          	add    $0x18,%rsp
  10ede4:	4c 89 f0             	mov    %r14,%rax
  10ede7:	5b                   	pop    %rbx
  10ede8:	41 5c                	pop    %r12
  10edea:	41 5d                	pop    %r13
  10edec:	41 5e                	pop    %r14
  10edee:	41 5f                	pop    %r15
  10edf0:	5d                   	pop    %rbp
  10edf1:	c3                   	ret    

000000000010edf2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>:
    FLATBUFFERS_ASSERT(i < size());
  10edf2:	3b 37                	cmp    (%rdi),%esi
  10edf4:	72 1d                	jb     10ee13 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x21>
  return_type Get(uoffset_t i) const {
  10edf6:	55                   	push   %rbp
    FLATBUFFERS_ASSERT(i < size());
  10edf7:	b9 55 e3 11 00       	mov    $0x11e355,%ecx
  10edfc:	ba 66 f2 11 00       	mov    $0x11f266,%edx
  10ee01:	be 06 01 00 00       	mov    $0x106,%esi
  10ee06:	bf 07 e4 11 00       	mov    $0x11e407,%edi
  return_type Get(uoffset_t i) const {
  10ee0b:	48 89 e5             	mov    %rsp,%rbp
    FLATBUFFERS_ASSERT(i < size());
  10ee0e:	e8 5d 3f ff ff       	call   102d70 <__assert_func>
    p += i * sizeof(uoffset_t);
  10ee13:	89 f6                	mov    %esi,%esi
  10ee15:	48 8d 44 b7 04       	lea    0x4(%rdi,%rsi,4),%rax
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
  10ee1a:	8b 10                	mov    (%rax),%edx
  10ee1c:	48 01 d0             	add    %rdx,%rax
  }
  10ee1f:	c3                   	ret    

000000000010ee20 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:
    int subgraph_idx, bool allocate_temp) {
  10ee20:	55                   	push   %rbp
  10ee21:	48 89 e5             	mov    %rsp,%rbp
  10ee24:	41 57                	push   %r15
  10ee26:	41 89 cf             	mov    %ecx,%r15d
  10ee29:	41 56                	push   %r14
  10ee2b:	49 89 d6             	mov    %rdx,%r14
  10ee2e:	41 55                	push   %r13
  10ee30:	49 89 f5             	mov    %rsi,%r13
  10ee33:	41 54                	push   %r12
  10ee35:	49 89 fc             	mov    %rdi,%r12
  10ee38:	53                   	push   %rbx
  10ee39:	44 89 cb             	mov    %r9d,%ebx
  10ee3c:	48 83 ec 28          	sub    $0x28,%rsp
  10ee40:	44 89 45 bc          	mov    %r8d,-0x44(%rbp)
  return internal::InitializeTfLiteTensorFromFlatbuffer(
  10ee44:	4c 8b 47 18          	mov    0x18(%rdi),%r8
  10ee48:	48 89 f7             	mov    %rsi,%rdi
  10ee4b:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  10ee4f:	e8 ee f8 ff ff       	call   10e742 <_ZNK6tflite5Model7buffersEv>
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
  10ee54:	4c 89 ef             	mov    %r13,%rdi
  return internal::InitializeTfLiteTensorFromFlatbuffer(
  10ee57:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
  10ee5b:	e8 ea e6 ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10ee60:	8b 75 bc             	mov    -0x44(%rbp),%esi
  10ee63:	48 89 c7             	mov    %rax,%rdi
  10ee66:	e8 0b e7 ff ff       	call   10d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  10ee6b:	48 89 c7             	mov    %rax,%rdi
  10ee6e:	e8 a3 f8 ff ff       	call   10e716 <_ZNK6tflite8SubGraph7tensorsEv>
  10ee73:	44 89 fe             	mov    %r15d,%esi
  10ee76:	48 89 c7             	mov    %rax,%rdi
  10ee79:	e8 d2 fb ff ff       	call   10ea50 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
  return internal::InitializeTfLiteTensorFromFlatbuffer(
  10ee7e:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  10ee83:	0f b6 f3             	movzbl %bl,%esi
  10ee86:	4d 89 f1             	mov    %r14,%r9
  10ee89:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  10ee8d:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
}
  10ee91:	48 83 c4 28          	add    $0x28,%rsp
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
  10ee95:	48 89 c2             	mov    %rax,%rdx
}
  10ee98:	5b                   	pop    %rbx
  10ee99:	41 5c                	pop    %r12
  10ee9b:	41 5d                	pop    %r13
  10ee9d:	41 5e                	pop    %r14
  10ee9f:	41 5f                	pop    %r15
  10eea1:	5d                   	pop    %rbp
  return internal::InitializeTfLiteTensorFromFlatbuffer(
  10eea2:	e9 8f 43 00 00       	jmp    113236 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
  10eea7:	90                   	nop

000000000010eea8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
  10eea8:	55                   	push   %rbp
  10eea9:	48 89 e5             	mov    %rsp,%rbp
  10eeac:	41 57                	push   %r15
  10eeae:	41 56                	push   %r14
  10eeb0:	41 55                	push   %r13
  10eeb2:	41 54                	push   %r12
  10eeb4:	53                   	push   %rbx
  10eeb5:	48 83 ec 38          	sub    $0x38,%rsp
  10eeb9:	48 89 75 b8          	mov    %rsi,-0x48(%rbp)
  TFLITE_DCHECK(subgraph_allocations != nullptr);
  10eebd:	48 85 d2             	test   %rdx,%rdx
  10eec0:	75 05                	jne    10eec7 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1f>
  10eec2:	e8 fd 2e 00 00       	call   111dc4 <abort>
  10eec7:	48 89 fb             	mov    %rdi,%rbx
  10eeca:	49 89 d6             	mov    %rdx,%r14
  10eecd:	45 31 ed             	xor    %r13d,%r13d
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
  10eed0:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  10eed4:	e8 71 e6 ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10eed9:	48 89 c7             	mov    %rax,%rdi
  10eedc:	8b 00                	mov    (%rax),%eax
  10eede:	49 39 c5             	cmp    %rax,%r13
  10eee1:	0f 83 d3 00 00 00    	jae    10efba <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x112>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  10eee7:	44 89 ee             	mov    %r13d,%esi
  10eeea:	e8 87 e6 ff ff       	call   10d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
  10eeef:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    TFLITE_DCHECK(subgraph != nullptr);
  10eef3:	48 85 c0             	test   %rax,%rax
  10eef6:	74 ca                	je     10eec2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x1a>
    size_t alloc_count = subgraph->tensors()->size();
  10eef8:	48 89 c7             	mov    %rax,%rdi
  10eefb:	e8 16 f8 ff ff       	call   10e716 <_ZNK6tflite8SubGraph7tensorsEv>
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
  10ef00:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
  10ef04:	ba 08 00 00 00       	mov    $0x8,%edx
    size_t alloc_count = subgraph->tensors()->size();
  10ef09:	8b 00                	mov    (%rax),%eax
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
  10ef0b:	4c 6b e0 18          	imul   $0x18,%rax,%r12
    size_t alloc_count = subgraph->tensors()->size();
  10ef0f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
        reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
  10ef13:	48 8b 07             	mov    (%rdi),%rax
  10ef16:	4c 89 e6             	mov    %r12,%rsi
  10ef19:	ff 50 18             	call   *0x18(%rax)
  10ef1c:	49 89 c7             	mov    %rax,%r15
    if (tensors == nullptr) {
  10ef1f:	48 85 c0             	test   %rax,%rax
  10ef22:	75 7d                	jne    10efa1 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xf9>
      TF_LITE_REPORT_ERROR(
  10ef24:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
  10ef28:	4c 89 e2             	mov    %r12,%rdx
  10ef2b:	be 9b f3 11 00       	mov    $0x11f39b,%esi
  10ef30:	eb 61                	jmp    10ef93 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xeb>
    for (size_t i = 0; i < alloc_count; ++i) {
  10ef32:	49 ff c4             	inc    %r12
  10ef35:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  10ef39:	49 39 c4             	cmp    %rax,%r12
  10ef3c:	73 68                	jae    10efa6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xfe>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
  10ef3e:	48 8b 4b 18          	mov    0x18(%rbx),%rcx
  10ef42:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  10ef46:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  10ef4a:	e8 f3 f7 ff ff       	call   10e742 <_ZNK6tflite5Model7buffersEv>
          memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
  10ef4f:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
  10ef53:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
          memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
  10ef57:	e8 ba f7 ff ff       	call   10e716 <_ZNK6tflite8SubGraph7tensorsEv>
  10ef5c:	44 89 e6             	mov    %r12d,%esi
  10ef5f:	48 89 c7             	mov    %rax,%rdi
  10ef62:	e8 e9 fa ff ff       	call   10ea50 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
  10ef67:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
  10ef6b:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
          memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
  10ef6f:	48 89 c6             	mov    %rax,%rsi
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
  10ef72:	49 6b c4 18          	imul   $0x18,%r12,%rax
  10ef76:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  10ef7a:	4d 8d 04 07          	lea    (%r15,%rax,1),%r8
  10ef7e:	e8 2e 45 00 00       	call   1134b1 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
      if (status != kTfLiteOk) {
  10ef83:	85 c0                	test   %eax,%eax
  10ef85:	74 ab                	je     10ef32 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8a>
        TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
  10ef87:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
  10ef8b:	4c 89 e2             	mov    %r12,%rdx
  10ef8e:	be e2 f3 11 00       	mov    $0x11f3e2,%esi
  10ef93:	31 c0                	xor    %eax,%eax
  10ef95:	e8 da 0b 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
  10ef9a:	b8 01 00 00 00       	mov    $0x1,%eax
  10ef9f:	eb 1b                	jmp    10efbc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x114>
    for (size_t i = 0; i < alloc_count; ++i) {
  10efa1:	45 31 e4             	xor    %r12d,%r12d
  10efa4:	eb 8f                	jmp    10ef35 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8d>
    subgraph_allocations[subgraph_idx].tensors = tensors;
  10efa6:	4c 89 e8             	mov    %r13,%rax
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
  10efa9:	49 ff c5             	inc    %r13
    subgraph_allocations[subgraph_idx].tensors = tensors;
  10efac:	48 c1 e0 04          	shl    $0x4,%rax
  10efb0:	4d 89 7c 06 08       	mov    %r15,0x8(%r14,%rax,1)
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
  10efb5:	e9 16 ff ff ff       	jmp    10eed0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x28>
  return kTfLiteOk;
  10efba:	31 c0                	xor    %eax,%eax
}
  10efbc:	48 83 c4 38          	add    $0x38,%rsp
  10efc0:	5b                   	pop    %rbx
  10efc1:	41 5c                	pop    %r12
  10efc3:	41 5d                	pop    %r13
  10efc5:	41 5e                	pop    %r14
  10efc7:	41 5f                	pop    %r15
  10efc9:	5d                   	pop    %rbp
  10efca:	c3                   	ret    
  10efcb:	90                   	nop

000000000010efcc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi>:
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
  10efcc:	55                   	push   %rbp
  10efcd:	48 89 e5             	mov    %rsp,%rbp
  10efd0:	41 57                	push   %r15
  10efd2:	49 89 d7             	mov    %rdx,%r15
  10efd5:	41 56                	push   %r14
  10efd7:	49 89 fe             	mov    %rdi,%r14
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  10efda:	48 89 f7             	mov    %rsi,%rdi
    ScratchBufferHandle* scratch_buffer_handles, int subgraph_idx) {
  10efdd:	41 55                	push   %r13
  10efdf:	41 54                	push   %r12
  10efe1:	53                   	push   %rbx
  10efe2:	44 89 c3             	mov    %r8d,%ebx
  10efe5:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  10efec:	48 89 8d 28 ff ff ff 	mov    %rcx,-0xd8(%rbp)
  10eff3:	48 89 b5 68 ff ff ff 	mov    %rsi,-0x98(%rbp)
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  10effa:	e8 4b e5 ff ff       	call   10d54a <_ZNK6tflite5Model9subgraphsEv>
  10efff:	89 de                	mov    %ebx,%esi
  10f001:	48 89 c7             	mov    %rax,%rdi
  10f004:	e8 6d e5 ff ff       	call   10d576 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEj>
      subgraph->tensors()->size() + scratch_buffer_request_count_;
  10f009:	48 89 c7             	mov    %rax,%rdi
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  10f00c:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
      subgraph->tensors()->size() + scratch_buffer_request_count_;
  10f013:	e8 fe f6 ff ff       	call   10e716 <_ZNK6tflite8SubGraph7tensorsEv>
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
  10f018:	49 8b 7e 08          	mov    0x8(%r14),%rdi
  10f01c:	ba 08 00 00 00       	mov    $0x8,%edx
      subgraph->tensors()->size() + scratch_buffer_request_count_;
  10f021:	8b 00                	mov    (%rax),%eax
  10f023:	49 03 46 28          	add    0x28(%r14),%rax
  10f027:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
  10f02e:	48 89 c3             	mov    %rax,%rbx
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
  10f031:	48 8b 07             	mov    (%rdi),%rax
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
  10f034:	48 c1 e3 05          	shl    $0x5,%rbx
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
  10f038:	48 89 de             	mov    %rbx,%rsi
  10f03b:	ff 50 20             	call   *0x20(%rax)
  10f03e:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  if (allocation_info == nullptr) {
  10f045:	48 85 c0             	test   %rax,%rax
  10f048:	49 8b 46 18          	mov    0x18(%r14),%rax
  10f04c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  10f053:	75 17                	jne    10f06c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0xa0>
    TF_LITE_REPORT_ERROR(
  10f055:	48 89 c7             	mov    %rax,%rdi
  10f058:	48 89 da             	mov    %rbx,%rdx
  10f05b:	be 01 f4 11 00       	mov    $0x11f401,%esi
  10f060:	31 c0                	xor    %eax,%eax
  10f062:	e8 0d 0b 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
  10f067:	e9 f5 03 00 00       	jmp    10f461 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x495>
                                scratch_buffer_request_count_, error_reporter_);
  10f06c:	49 8b 46 28          	mov    0x28(%r14),%rax
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
  10f070:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
                                scratch_buffer_request_count_, error_reporter_);
  10f077:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
  10f07e:	e8 93 f6 ff ff       	call   10e716 <_ZNK6tflite8SubGraph7tensorsEv>
    auto field_offset = GetOptionalFieldOffset(field);
  10f083:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  10f08a:	be 10 00 00 00       	mov    $0x10,%esi
                                scratch_buffer_request_count_, error_reporter_);
  10f08f:	8b 00                	mov    (%rax),%eax
  10f091:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  10f098:	e8 97 e4 ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10f09d:	66 85 c0             	test   %ax,%ax
  10f0a0:	0f 84 3c 01 00 00    	je     10f1e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x216>
    auto p = data_ + field_offset;
  10f0a6:	0f b7 d8             	movzwl %ax,%ebx
  10f0a9:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
  10f0b0:	31 c9                	xor    %ecx,%ecx
  const int32_t* offline_planner_offsets = nullptr;
  10f0b2:	45 31 e4             	xor    %r12d,%r12d
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
  10f0b5:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  10f0bc:	48 01 c3             	add    %rax,%rbx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10f0bf:	8b 03                	mov    (%rbx),%eax
  10f0c1:	48 01 c3             	add    %rax,%rbx
  uoffset_t size() const { return EndianScalar(length_); }
  10f0c4:	8b 03                	mov    (%rbx),%eax
  10f0c6:	48 83 c3 04          	add    $0x4,%rbx
  10f0ca:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  10f0d0:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  10f0d7:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
  10f0de:	48 39 8d 50 ff ff ff 	cmp    %rcx,-0xb0(%rbp)
  10f0e5:	0f 83 fa 00 00 00    	jae    10f1e5 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x219>
    FLATBUFFERS_ASSERT(i < size());
  10f0eb:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  10f0f1:	39 85 50 ff ff ff    	cmp    %eax,-0xb0(%rbp)
  10f0f7:	72 0f                	jb     10f108 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x13c>
  10f0f9:	b9 55 e3 11 00       	mov    $0x11e355,%ecx
  10f0fe:	ba 42 f4 11 00       	mov    $0x11f442,%edx
  10f103:	e9 95 02 00 00       	jmp    10f39d <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x3d1>
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
  10f108:	44 8b 2b             	mov    (%rbx),%r13d
    auto field_offset = GetOptionalFieldOffset(field);
  10f10b:	be 04 00 00 00       	mov    $0x4,%esi
  10f110:	48 ff 85 50 ff ff ff 	incq   -0xb0(%rbp)
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
  10f117:	49 01 dd             	add    %rbx,%r13
    auto field_offset = GetOptionalFieldOffset(field);
  10f11a:	4c 89 ef             	mov    %r13,%rdi
  10f11d:	e8 12 e4 ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10f122:	31 ff                	xor    %edi,%edi
  10f124:	66 85 c0             	test   %ax,%ax
  10f127:	74 0b                	je     10f134 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x168>
    auto p = data_ + field_offset;
  10f129:	0f b7 c0             	movzwl %ax,%eax
  10f12c:	4c 01 e8             	add    %r13,%rax
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10f12f:	8b 38                	mov    (%rax),%edi
  10f131:	48 01 c7             	add    %rax,%rdi
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
  10f134:	48 83 c7 04          	add    $0x4,%rdi
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
  10f138:	ba 17 00 00 00       	mov    $0x17,%edx
  10f13d:	be 70 d2 11 00       	mov    $0x11d270,%esi
  10f142:	e8 d9 56 ff ff       	call   104820 <strncmp>
  10f147:	85 c0                	test   %eax,%eax
  10f149:	0f 85 8a 00 00 00    	jne    10f1d9 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20d>
            model->buffers();
  10f14f:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  10f156:	e8 e7 f5 ff ff       	call   10e742 <_ZNK6tflite5Model7buffersEv>
    auto field_offset = GetOptionalFieldOffset(field);
  10f15b:	be 06 00 00 00       	mov    $0x6,%esi
  10f160:	4c 89 ef             	mov    %r13,%rdi
  10f163:	49 89 c4             	mov    %rax,%r12
  10f166:	e8 c9 e3 ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  10f16b:	31 f6                	xor    %esi,%esi
  10f16d:	66 85 c0             	test   %ax,%ax
  10f170:	74 08                	je     10f17a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x1ae>
  10f172:	0f b7 c0             	movzwl %ax,%eax
  10f175:	41 8b 74 05 00       	mov    0x0(%r13,%rax,1),%esi
  return_type operator[](uoffset_t i) const { return Get(i); }
  10f17a:	4c 89 e7             	mov    %r12,%rdi
  10f17d:	e8 70 fc ff ff       	call   10edf2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>
    auto field_offset = GetOptionalFieldOffset(field);
  10f182:	be 04 00 00 00       	mov    $0x4,%esi
  10f187:	48 89 c7             	mov    %rax,%rdi
  return_type operator[](uoffset_t i) const { return Get(i); }
  10f18a:	49 89 c4             	mov    %rax,%r12
    auto field_offset = GetOptionalFieldOffset(field);
  10f18d:	e8 a2 e3 ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10f192:	66 85 c0             	test   %ax,%ax
  10f195:	0f 84 d0 02 00 00    	je     10f46b <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x49f>
    auto p = data_ + field_offset;
  10f19b:	0f b7 c0             	movzwl %ax,%eax
  10f19e:	49 01 c4             	add    %rax,%r12
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10f1a1:	41 8b 04 24          	mov    (%r12),%eax
  10f1a5:	49 01 c4             	add    %rax,%r12
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
  10f1a8:	41 8b 54 24 0c       	mov    0xc(%r12),%edx
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
  10f1ad:	49 83 c4 10          	add    $0x10,%r12
        if (tensor_count_ != nbr_tensors) {
  10f1b1:	48 39 95 60 ff ff ff 	cmp    %rdx,-0xa0(%rbp)
  10f1b8:	74 1f                	je     10f1d9 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x20d>
          TF_LITE_REPORT_ERROR(reporter_,
  10f1ba:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  10f1c1:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
  10f1c8:	be 1f f5 11 00       	mov    $0x11f51f,%esi
  10f1cd:	31 c0                	xor    %eax,%eax
  10f1cf:	e8 a0 09 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  TF_LITE_ENSURE_STATUS(
  10f1d4:	e9 88 02 00 00       	jmp    10f461 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x495>
  10f1d9:	48 83 c3 04          	add    $0x4,%rbx
  10f1dd:	e9 f5 fe ff ff       	jmp    10f0d7 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x10b>
  const int32_t* offline_planner_offsets = nullptr;
  10f1e2:	45 31 e4             	xor    %r12d,%r12d
  TFLITE_DCHECK(eval_tensors != nullptr);
  10f1e5:	4d 85 ff             	test   %r15,%r15
  10f1e8:	74 15                	je     10f1ff <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x233>
  10f1ea:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  for (size_t i = 0; i < tensor_count_; ++i) {
  10f1f1:	31 db                	xor    %ebx,%ebx
  10f1f3:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  TFLITE_DCHECK(eval_tensors != nullptr);
  10f1fa:	49 89 c5             	mov    %rax,%r13
  10f1fd:	eb 72                	jmp    10f271 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2a5>
  10f1ff:	e8 c0 2b 00 00       	call   111dc4 <abort>
    current->output_ptr = &(eval_tensors[i].data.data);
  10f204:	4d 89 7d 08          	mov    %r15,0x8(%r13)
    TF_LITE_ENSURE_STATUS(
  10f208:	4c 89 ee             	mov    %r13,%rsi
  10f20b:	4c 89 ff             	mov    %r15,%rdi
  10f20e:	e8 ec 39 00 00       	call   112bff <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm>
  10f213:	85 c0                	test   %eax,%eax
  10f215:	0f 85 59 04 00 00    	jne    10f674 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x6a8>
    current->first_created = -1;
  10f21b:	41 c7 45 10 ff ff ff 	movl   $0xffffffff,0x10(%r13)
  10f222:	ff 
    current->last_used = -1;
  10f223:	41 c7 45 14 ff ff ff 	movl   $0xffffffff,0x14(%r13)
  10f22a:	ff 
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
  10f22b:	49 83 3f 00          	cmpq   $0x0,(%r15)
  10f22f:	75 21                	jne    10f252 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x286>
                                (!subgraph->tensors()->Get(i)->is_variable());
  10f231:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
  10f238:	e8 d9 f4 ff ff       	call   10e716 <_ZNK6tflite8SubGraph7tensorsEv>
  10f23d:	89 de                	mov    %ebx,%esi
  10f23f:	48 89 c7             	mov    %rax,%rdi
  10f242:	e8 09 f8 ff ff       	call   10ea50 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
  10f247:	48 89 c7             	mov    %rax,%rdi
  10f24a:	e8 9d f4 ff ff       	call   10e6ec <_ZNK6tflite6Tensor11is_variableEv>
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
  10f24f:	83 f0 01             	xor    $0x1,%eax
  10f252:	41 88 45 1c          	mov    %al,0x1c(%r13)
      current->offline_offset = kOnlinePlannedBuffer;
  10f256:	83 c8 ff             	or     $0xffffffff,%eax
    if (offline_offsets) {
  10f259:	4d 85 e4             	test   %r12,%r12
  10f25c:	74 04                	je     10f262 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x296>
      current->offline_offset = offline_offsets[i];
  10f25e:	41 8b 04 9c          	mov    (%r12,%rbx,4),%eax
  10f262:	41 89 45 18          	mov    %eax,0x18(%r13)
  for (size_t i = 0; i < tensor_count_; ++i) {
  10f266:	48 ff c3             	inc    %rbx
  10f269:	49 83 c5 20          	add    $0x20,%r13
  10f26d:	49 83 c7 18          	add    $0x18,%r15
  10f271:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  10f278:	48 39 c3             	cmp    %rax,%rbx
  10f27b:	72 87                	jb     10f204 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x238>
  uint32_t operators_size = NumSubgraphOperators(subgraph);
  10f27d:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
  10f284:	31 db                	xor    %ebx,%ebx
  uint32_t operators_size = NumSubgraphOperators(subgraph);
  10f286:	e8 8a 3e 00 00       	call   113115 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
  10f28b:	41 89 c4             	mov    %eax,%r12d
    return const_cast<Table *>(this)->GetPointer<P>(field);
  10f28e:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
  10f295:	be 06 00 00 00       	mov    $0x6,%esi
  10f29a:	e8 81 e8 ff ff       	call   10db20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  10f29f:	48 89 c7             	mov    %rax,%rdi
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
  10f2a2:	8b 00                	mov    (%rax),%eax
  10f2a4:	48 39 c3             	cmp    %rax,%rbx
  10f2a7:	73 1f                	jae    10f2c8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2fc>
    const int tensor_index = subgraph->inputs()->Get(i);
  10f2a9:	89 de                	mov    %ebx,%esi
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
  10f2ab:	48 ff c3             	inc    %rbx
    const int tensor_index = subgraph->inputs()->Get(i);
  10f2ae:	e8 a7 e6 ff ff       	call   10d95a <_ZNK11flatbuffers6VectorIiE3GetEj>
    current->first_created = 0;
  10f2b3:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  10f2ba:	31 d2                	xor    %edx,%edx
    AllocationInfo* current = &info_[tensor_index];
  10f2bc:	48 98                	cltq   
    current->first_created = 0;
  10f2be:	48 c1 e0 05          	shl    $0x5,%rax
  10f2c2:	89 54 01 10          	mov    %edx,0x10(%rcx,%rax,1)
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
  10f2c6:	eb c6                	jmp    10f28e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2c2>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
  10f2c8:	31 db                	xor    %ebx,%ebx
  10f2ca:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
  10f2d1:	be 08 00 00 00       	mov    $0x8,%esi
    current->last_used = operators_size - 1;
  10f2d6:	45 8d 6c 24 ff       	lea    -0x1(%r12),%r13d
  10f2db:	e8 40 e8 ff ff       	call   10db20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  10f2e0:	48 89 c7             	mov    %rax,%rdi
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
  10f2e3:	8b 00                	mov    (%rax),%eax
  10f2e5:	48 39 c3             	cmp    %rax,%rbx
  10f2e8:	73 1e                	jae    10f308 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x33c>
    const int tensor_index = subgraph->outputs()->Get(i);
  10f2ea:	89 de                	mov    %ebx,%esi
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
  10f2ec:	48 ff c3             	inc    %rbx
    const int tensor_index = subgraph->outputs()->Get(i);
  10f2ef:	e8 66 e6 ff ff       	call   10d95a <_ZNK11flatbuffers6VectorIiE3GetEj>
    current->last_used = operators_size - 1;
  10f2f4:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
    AllocationInfo* current = &info_[tensor_index];
  10f2fb:	48 98                	cltq   
    current->last_used = operators_size - 1;
  10f2fd:	48 c1 e0 05          	shl    $0x5,%rax
  10f301:	44 89 6c 01 14       	mov    %r13d,0x14(%rcx,%rax,1)
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
  10f306:	eb c2                	jmp    10f2ca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x2fe>
  10f308:	49 c1 e4 02          	shl    $0x2,%r12
  10f30c:	eb 47                	jmp    10f355 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x389>
    p += i * sizeof(uoffset_t);
  10f30e:	4c 01 e3             	add    %r12,%rbx
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
  10f311:	45 31 ff             	xor    %r15d,%r15d
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
  10f314:	8b 03                	mov    (%rbx),%eax
  10f316:	48 01 c3             	add    %rax,%rbx
    return const_cast<Table *>(this)->GetPointer<P>(field);
  10f319:	48 89 df             	mov    %rbx,%rdi
  10f31c:	be 06 00 00 00       	mov    $0x6,%esi
  10f321:	e8 fa e7 ff ff       	call   10db20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  10f326:	48 89 c7             	mov    %rax,%rdi
  10f329:	8b 00                	mov    (%rax),%eax
  10f32b:	49 39 c7             	cmp    %rax,%r15
  10f32e:	72 7c                	jb     10f3ac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x3e0>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
  10f330:	45 31 ff             	xor    %r15d,%r15d
  10f333:	48 89 df             	mov    %rbx,%rdi
  10f336:	be 08 00 00 00       	mov    $0x8,%esi
  10f33b:	e8 e0 e7 ff ff       	call   10db20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  10f340:	48 89 c7             	mov    %rax,%rdi
  10f343:	8b 00                	mov    (%rax),%eax
  10f345:	49 39 c7             	cmp    %rax,%r15
  10f348:	0f 82 8f 00 00 00    	jb     10f3dd <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x411>
  for (int i = (operators_size - 1); i >= 0; --i) {
  10f34e:	41 ff cd             	dec    %r13d
  10f351:	49 83 ec 04          	sub    $0x4,%r12
  10f355:	45 85 ed             	test   %r13d,%r13d
  10f358:	0f 88 1f 01 00 00    	js     10f47d <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x4b1>
    auto field_offset = GetOptionalFieldOffset(field);
  10f35e:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
  10f365:	be 0a 00 00 00       	mov    $0xa,%esi
  10f36a:	e8 c5 e1 ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10f36f:	66 85 c0             	test   %ax,%ax
  10f372:	0f 84 fc 00 00 00    	je     10f474 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x4a8>
    auto p = data_ + field_offset;
  10f378:	0f b7 d8             	movzwl %ax,%ebx
  10f37b:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  10f382:	48 01 c3             	add    %rax,%rbx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10f385:	8b 03                	mov    (%rbx),%eax
  10f387:	48 01 c3             	add    %rax,%rbx
    FLATBUFFERS_ASSERT(i < size());
  10f38a:	44 3b 2b             	cmp    (%rbx),%r13d
  10f38d:	0f 82 7b ff ff ff    	jb     10f30e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x342>
  10f393:	b9 55 e3 11 00       	mov    $0x11e355,%ecx
  10f398:	ba 8a ed 11 00       	mov    $0x11ed8a,%edx
  10f39d:	be 06 01 00 00       	mov    $0x106,%esi
  10f3a2:	bf 07 e4 11 00       	mov    $0x11e407,%edi
  10f3a7:	e8 c4 39 ff ff       	call   102d70 <__assert_func>
      const int tensor_index = op->inputs()->Get(n);
  10f3ac:	44 89 fe             	mov    %r15d,%esi
  10f3af:	e8 a6 e5 ff ff       	call   10d95a <_ZNK11flatbuffers6VectorIiE3GetEj>
      AllocationInfo* current = &info_[tensor_index];
  10f3b4:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  10f3bb:	48 98                	cltq   
  10f3bd:	48 c1 e0 05          	shl    $0x5,%rax
  10f3c1:	48 01 c8             	add    %rcx,%rax
      if (((current->last_used == -1) || (current->last_used < i))) {
  10f3c4:	8b 50 14             	mov    0x14(%rax),%edx
  10f3c7:	83 fa ff             	cmp    $0xffffffff,%edx
  10f3ca:	74 05                	je     10f3d1 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x405>
  10f3cc:	41 39 d5             	cmp    %edx,%r13d
  10f3cf:	7e 04                	jle    10f3d5 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x409>
        current->last_used = i;
  10f3d1:	44 89 68 14          	mov    %r13d,0x14(%rax)
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
  10f3d5:	49 ff c7             	inc    %r15
  10f3d8:	e9 3c ff ff ff       	jmp    10f319 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x34d>
      const int tensor_index = op->outputs()->Get(n);
  10f3dd:	44 89 fe             	mov    %r15d,%esi
  10f3e0:	e8 75 e5 ff ff       	call   10d95a <_ZNK11flatbuffers6VectorIiE3GetEj>
      AllocationInfo* current = &info_[tensor_index];
  10f3e5:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  10f3ec:	48 98                	cltq   
  10f3ee:	48 c1 e0 05          	shl    $0x5,%rax
  10f3f2:	48 01 c8             	add    %rcx,%rax
      if ((current->first_created == -1) || (current->first_created > i)) {
  10f3f5:	8b 50 10             	mov    0x10(%rax),%edx
  10f3f8:	83 fa ff             	cmp    $0xffffffff,%edx
  10f3fb:	74 05                	je     10f402 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x436>
  10f3fd:	41 39 d5             	cmp    %edx,%r13d
  10f400:	7d 04                	jge    10f406 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x43a>
        current->first_created = i;
  10f402:	44 89 68 10          	mov    %r13d,0x10(%rax)
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
  10f406:	49 ff c7             	inc    %r15
  10f409:	e9 25 ff ff ff       	jmp    10f333 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x367>
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
  10f40e:	49 8b 7e 08          	mov    0x8(%r14),%rdi
  10f412:	be 10 00 00 00       	mov    $0x10,%esi
  10f417:	e8 cc e0 ff ff       	call   10d4e8 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEm>
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
  10f41c:	49 8b 7e 08          	mov    0x8(%r14),%rdi
  10f420:	ba 10 00 00 00       	mov    $0x10,%edx
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
  10f425:	48 89 c3             	mov    %rax,%rbx
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
  10f428:	48 8b 07             	mov    (%rdi),%rax
  10f42b:	48 89 de             	mov    %rbx,%rsi
  10f42e:	ff 50 20             	call   *0x20(%rax)
  10f431:	48 89 c6             	mov    %rax,%rsi
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
  10f434:	48 85 c0             	test   %rax,%rax
  10f437:	0f 85 b1 00 00 00    	jne    10f4ee <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x522>
  10f43d:	49 8b 7e 18          	mov    0x18(%r14),%rdi
  10f441:	b9 83 f5 11 00       	mov    $0x11f583,%ecx
  10f446:	ba d1 f5 11 00       	mov    $0x11f5d1,%edx
  10f44b:	31 c0                	xor    %eax,%eax
  10f44d:	41 b9 6a f5 11 00    	mov    $0x11f56a,%r9d
  10f453:	41 b8 d2 03 00 00    	mov    $0x3d2,%r8d
  10f459:	48 89 fe             	mov    %rdi,%rsi
  10f45c:	e8 9b 07 00 00       	call   10fbfc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
    return kTfLiteError;
  10f461:	b8 01 00 00 00       	mov    $0x1,%eax
  10f466:	e9 09 02 00 00       	jmp    10f674 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x6a8>
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
  10f46b:	8b 04 25 0c 00 00 00 	mov    0xc,%eax
  10f472:	eb 07                	jmp    10f47b <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x4af>
  uoffset_t size() const { return EndianScalar(length_); }
  10f474:	8b 04 25 00 00 00 00 	mov    0x0,%eax
  10f47b:	0f 0b                	ud2    
      GetScratchBufferRequests();
  10f47d:	4c 89 f7             	mov    %r14,%rdi
  10f480:	e8 7d f4 ff ff       	call   10e902 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
  10f485:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  10f48c:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  10f493:	48 8b bd 38 ff ff ff 	mov    -0xc8(%rbp),%rdi
  10f49a:	48 8b b5 28 ff ff ff 	mov    -0xd8(%rbp),%rsi
  10f4a1:	48 c1 e1 05          	shl    $0x5,%rcx
  10f4a5:	48 01 d1             	add    %rdx,%rcx
                                scratch_buffer_request_count_, error_reporter_);
  10f4a8:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
  10f4af:	48 01 d7             	add    %rdx,%rdi
  10f4b2:	48 39 fa             	cmp    %rdi,%rdx
  10f4b5:	0f 83 53 ff ff ff    	jae    10f40e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x442>
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
  10f4bb:	48 89 71 08          	mov    %rsi,0x8(%rcx)
    current->bytes = current_request->bytes;
  10f4bf:	4c 8b 00             	mov    (%rax),%r8
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
  10f4c2:	48 ff c2             	inc    %rdx
  10f4c5:	48 83 c6 08          	add    $0x8,%rsi
  10f4c9:	48 83 c1 20          	add    $0x20,%rcx
  10f4cd:	48 83 c0 10          	add    $0x10,%rax
    current->bytes = current_request->bytes;
  10f4d1:	4c 89 41 e0          	mov    %r8,-0x20(%rcx)
    current->first_created = current_request->node_idx;
  10f4d5:	44 8b 40 f8          	mov    -0x8(%rax),%r8d
    current->offline_offset = kOnlinePlannedBuffer;
  10f4d9:	c7 41 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%rcx)
    current->first_created = current_request->node_idx;
  10f4e0:	44 89 41 f0          	mov    %r8d,-0x10(%rcx)
    current->last_used = current_request->node_idx;
  10f4e4:	44 89 41 f4          	mov    %r8d,-0xc(%rcx)
    current->needs_allocating = true;
  10f4e8:	c6 41 fc 01          	movb   $0x1,-0x4(%rcx)
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
  10f4ec:	eb c4                	jmp    10f4b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x4e6>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
  10f4ee:	89 da                	mov    %ebx,%edx
  10f4f0:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
  for (size_t i = 0; i < allocation_info_size; ++i) {
  10f4f4:	31 db                	xor    %ebx,%ebx
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
  10f4f6:	e8 e7 01 00 00       	call   10f6e2 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
  10f4fb:	4d 8b 66 18          	mov    0x18(%r14),%r12
  for (size_t i = 0; i < allocation_info_size; ++i) {
  10f4ff:	48 39 9d 58 ff ff ff 	cmp    %rbx,-0xa8(%rbp)
  10f506:	74 62                	je     10f56a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x59e>
    if (current->needs_allocating) {
  10f508:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  10f50f:	80 78 1c 00          	cmpb   $0x0,0x1c(%rax)
  10f513:	75 0d                	jne    10f522 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x556>
  for (size_t i = 0; i < allocation_info_size; ++i) {
  10f515:	48 83 85 68 ff ff ff 	addq   $0x20,-0x98(%rbp)
  10f51c:	20 
  10f51d:	48 ff c3             	inc    %rbx
  10f520:	eb dd                	jmp    10f4ff <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x533>
          AlignSizeUp(current->bytes, kBufferAlignment);
  10f522:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  10f529:	be 10 00 00 00       	mov    $0x10,%esi
  10f52e:	48 8b 38             	mov    (%rax),%rdi
  10f531:	e8 63 35 00 00       	call   112a99 <_ZN6tflite11AlignSizeUpEmm>
        TF_LITE_ENSURE_STATUS(
  10f536:	4c 89 e6             	mov    %r12,%rsi
  10f539:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
          AlignSizeUp(current->bytes, kBufferAlignment);
  10f53d:	48 89 c2             	mov    %rax,%rdx
      if (current->offline_offset == kOnlinePlannedBuffer) {
  10f540:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  10f547:	44 8b 48 18          	mov    0x18(%rax),%r9d
  10f54b:	44 8b 40 14          	mov    0x14(%rax),%r8d
  10f54f:	8b 48 10             	mov    0x10(%rax),%ecx
  10f552:	41 83 f9 ff          	cmp    $0xffffffff,%r9d
  10f556:	75 07                	jne    10f55f <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x593>
        TF_LITE_ENSURE_STATUS(
  10f558:	e8 35 01 00 00       	call   10f692 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>
  10f55d:	eb 05                	jmp    10f564 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x598>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
  10f55f:	e8 d8 01 00 00       	call   10f73c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
  10f564:	85 c0                	test   %eax,%eax
  10f566:	74 ad                	je     10f515 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x549>
  10f568:	eb 50                	jmp    10f5ba <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x5ee>
  memory_allocator_->ResetTempAllocations();
  10f56a:	49 8b 7e 08          	mov    0x8(%r14),%rdi
  10f56e:	48 8b 07             	mov    (%rdi),%rax
  10f571:	ff 50 28             	call   *0x28(%rax)
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
  10f574:	49 8b 7e 08          	mov    0x8(%r14),%rdi
  10f578:	be 10 00 00 00       	mov    $0x10,%esi
  10f57d:	e8 66 df ff ff       	call   10d4e8 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEm>
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
  10f582:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
  10f586:	48 89 c3             	mov    %rax,%rbx
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
  10f589:	e8 6c 04 00 00       	call   10f9fa <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
  10f58e:	48 39 c3             	cmp    %rax,%rbx
  10f591:	73 41                	jae    10f5d4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x608>
    TF_LITE_REPORT_ERROR(
  10f593:	4d 8b 66 18          	mov    0x18(%r14),%r12
  10f597:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
  10f59b:	e8 5a 04 00 00       	call   10f9fa <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
  10f5a0:	48 89 d9             	mov    %rbx,%rcx
  10f5a3:	be e8 f5 11 00       	mov    $0x11f5e8,%esi
  10f5a8:	48 89 c2             	mov    %rax,%rdx
  10f5ab:	4c 89 e7             	mov    %r12,%rdi
  10f5ae:	31 c0                	xor    %eax,%eax
  10f5b0:	e8 bf 05 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
  10f5b5:	b8 01 00 00 00       	mov    $0x1,%eax
}
  10f5ba:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
  10f5be:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  10f5c4:	e8 bd 00 00 00       	call   10f686 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
  10f5c9:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  10f5cf:	e9 a0 00 00 00       	jmp    10f674 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x6a8>
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
  10f5d4:	49 8b 7e 08          	mov    0x8(%r14),%rdi
  for (size_t i = 0; i < allocation_info_size; ++i) {
  10f5d8:	45 31 ed             	xor    %r13d,%r13d
  int planner_index = 0;
  10f5db:	45 31 ff             	xor    %r15d,%r15d
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
  10f5de:	e8 ff de ff ff       	call   10d4e2 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
  10f5e3:	4c 8b a5 78 ff ff ff 	mov    -0x88(%rbp),%r12
  10f5ea:	48 89 c3             	mov    %rax,%rbx
  10f5ed:	49 8b 46 18          	mov    0x18(%r14),%rax
  10f5f1:	49 83 c4 08          	add    $0x8,%r12
  10f5f5:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  for (size_t i = 0; i < allocation_info_size; ++i) {
  10f5fc:	4c 39 ad 58 ff ff ff 	cmp    %r13,-0xa8(%rbp)
  10f603:	74 44                	je     10f649 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x67d>
    if (current->needs_allocating) {
  10f605:	41 80 7c 24 14 00    	cmpb   $0x0,0x14(%r12)
  10f60b:	74 33                	je     10f640 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x674>
      TF_LITE_ENSURE_STATUS(
  10f60d:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
  10f614:	48 8d 4d 84          	lea    -0x7c(%rbp),%rcx
  10f618:	44 89 fa             	mov    %r15d,%edx
  10f61b:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
      int offset = -1;
  10f61f:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
      TF_LITE_ENSURE_STATUS(
  10f626:	e8 23 04 00 00       	call   10fa4e <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>
  10f62b:	85 c0                	test   %eax,%eax
  10f62d:	75 8b                	jne    10f5ba <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x5ee>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
  10f62f:	48 63 45 84          	movslq -0x7c(%rbp),%rax
  10f633:	49 8b 14 24          	mov    (%r12),%rdx
      ++planner_index;
  10f637:	41 ff c7             	inc    %r15d
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
  10f63a:	48 01 d8             	add    %rbx,%rax
  10f63d:	48 89 02             	mov    %rax,(%rdx)
  for (size_t i = 0; i < allocation_info_size; ++i) {
  10f640:	49 ff c5             	inc    %r13
  10f643:	49 83 c4 20          	add    $0x20,%r12
  10f647:	eb b3                	jmp    10f5fc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x630>
  head_usage = planner.GetMaximumMemorySize();
  10f649:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
  10f64d:	e8 a8 03 00 00       	call   10f9fa <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
  if (max_head_buffer_usage_ < head_usage) {
  10f652:	49 39 46 30          	cmp    %rax,0x30(%r14)
  10f656:	73 04                	jae    10f65c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x690>
    max_head_buffer_usage_ = head_usage;
  10f658:	49 89 46 30          	mov    %rax,0x30(%r14)
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
  10f65c:	49 8b 7e 08          	mov    0x8(%r14),%rdi
  10f660:	49 8b 76 30          	mov    0x30(%r14),%rsi
  10f664:	ba 10 00 00 00       	mov    $0x10,%edx
  10f669:	48 8b 07             	mov    (%rdi),%rax
  10f66c:	ff 50 10             	call   *0x10(%rax)
  10f66f:	e9 46 ff ff ff       	jmp    10f5ba <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP16TfLiteEvalTensorPNS_19ScratchBufferHandleEi+0x5ee>
}
  10f674:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  10f67b:	5b                   	pop    %rbx
  10f67c:	41 5c                	pop    %r12
  10f67e:	41 5d                	pop    %r13
  10f680:	41 5e                	pop    %r14
  10f682:	41 5f                	pop    %r15
  10f684:	5d                   	pop    %rbp
  10f685:	c3                   	ret    

000000000010f686 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
}

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
  // We don't own the scratch buffer, so don't deallocate anything.
}
  10f686:	c3                   	ret    
  10f687:	90                   	nop

000000000010f688 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
                (memory_use + 1023) / 1024);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
  10f688:	8b 47 0c             	mov    0xc(%rdi),%eax
  10f68b:	c3                   	ret    

000000000010f68c <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
}
  10f68c:	e9 a7 b5 00 00       	jmp    11ac38 <_ZdlPv>
  10f691:	90                   	nop

000000000010f692 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
    int last_time_used) {
  10f692:	49 89 f9             	mov    %rdi,%r9
  10f695:	48 89 f7             	mov    %rsi,%rdi
  if (buffer_count_ >= max_buffer_count_) {
  10f698:	49 63 41 0c          	movslq 0xc(%r9),%rax
  10f69c:	41 8b 71 08          	mov    0x8(%r9),%esi
  10f6a0:	39 f0                	cmp    %esi,%eax
  10f6a2:	7c 19                	jl     10f6bd <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2b>
    int last_time_used) {
  10f6a4:	55                   	push   %rbp
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
  10f6a5:	89 f2                	mov    %esi,%edx
  10f6a7:	31 c0                	xor    %eax,%eax
  10f6a9:	be 36 f6 11 00       	mov    $0x11f636,%esi
    int last_time_used) {
  10f6ae:	48 89 e5             	mov    %rsp,%rbp
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
  10f6b1:	e8 be 04 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
  10f6b6:	b8 01 00 00 00       	mov    $0x1,%eax
}
  10f6bb:	5d                   	pop    %rbp
  10f6bc:	c3                   	ret    
  BufferRequirements* current = &requirements_[buffer_count_];
  10f6bd:	48 c1 e0 04          	shl    $0x4,%rax
  10f6c1:	49 03 41 10          	add    0x10(%r9),%rax
  current->size = size;
  10f6c5:	89 10                	mov    %edx,(%rax)
  current->first_time_used = first_time_used;
  10f6c7:	89 48 08             	mov    %ecx,0x8(%rax)
  current->last_time_used = last_time_used;
  10f6ca:	44 89 40 0c          	mov    %r8d,0xc(%rax)
  current->offline_offset = kOnlinePlannedBuffer;
  10f6ce:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%rax)
  return kTfLiteOk;
  10f6d5:	31 c0                	xor    %eax,%eax
  ++buffer_count_;
  10f6d7:	41 ff 41 0c          	incl   0xc(%r9)
  need_to_calculate_offsets_ = true;
  10f6db:	41 c6 41 40 01       	movb   $0x1,0x40(%r9)
}
  10f6e0:	c3                   	ret    
  10f6e1:	90                   	nop

000000000010f6e2 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
    : buffer_count_(0), need_to_calculate_offsets_(true) {
  10f6e2:	31 c0                	xor    %eax,%eax
  10f6e4:	48 c7 07 d8 d5 11 00 	movq   $0x11d5d8,(%rdi)
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
  10f6eb:	48 89 f9             	mov    %rdi,%rcx
    : buffer_count_(0), need_to_calculate_offsets_(true) {
  10f6ee:	89 47 0c             	mov    %eax,0xc(%rdi)
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
  10f6f1:	48 63 c2             	movslq %edx,%rax
  10f6f4:	31 d2                	xor    %edx,%edx
    : buffer_count_(0), need_to_calculate_offsets_(true) {
  10f6f6:	c6 47 40 01          	movb   $0x1,0x40(%rdi)
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
  10f6fa:	bf 28 00 00 00       	mov    $0x28,%edi
  10f6ff:	48 f7 f7             	div    %rdi
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
  10f702:	48 89 71 10          	mov    %rsi,0x10(%rcx)
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
  10f706:	89 41 08             	mov    %eax,0x8(%rcx)
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
  10f709:	48 98                	cltq   
  10f70b:	48 89 c2             	mov    %rax,%rdx
  10f70e:	48 c1 e2 04          	shl    $0x4,%rdx
  10f712:	48 01 d6             	add    %rdx,%rsi
  next_free += sizeof(int) * max_buffer_count_;
  10f715:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  10f71c:	00 
  next_free += sizeof(ListEntry) * max_buffer_count_;
  10f71d:	48 6b c0 0c          	imul   $0xc,%rax,%rax
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
  10f721:	48 89 71 18          	mov    %rsi,0x18(%rcx)
  next_free += sizeof(int) * max_buffer_count_;
  10f725:	48 01 d6             	add    %rdx,%rsi
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
  10f728:	48 89 71 20          	mov    %rsi,0x20(%rcx)
  next_free += sizeof(int) * max_buffer_count_;
  10f72c:	48 01 d6             	add    %rdx,%rsi
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
  10f72f:	48 89 71 28          	mov    %rsi,0x28(%rcx)
  next_free += sizeof(ListEntry) * max_buffer_count_;
  10f733:	48 01 c6             	add    %rax,%rsi
  10f736:	48 89 71 38          	mov    %rsi,0x38(%rcx)
}
  10f73a:	c3                   	ret    
  10f73b:	90                   	nop

000000000010f73c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
  10f73c:	55                   	push   %rbp
  10f73d:	48 89 e5             	mov    %rsp,%rbp
  10f740:	41 55                	push   %r13
  10f742:	41 54                	push   %r12
  10f744:	45 89 cc             	mov    %r9d,%r12d
  10f747:	53                   	push   %rbx
  10f748:	41 52                	push   %r10
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
  10f74a:	48 8b 07             	mov    (%rdi),%rax
  BufferRequirements* current = &requirements_[buffer_count_];
  10f74d:	4c 8b 6f 10          	mov    0x10(%rdi),%r13
  10f751:	48 63 5f 0c          	movslq 0xc(%rdi),%rbx
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
  10f755:	ff 50 10             	call   *0x10(%rax)
  10f758:	85 c0                	test   %eax,%eax
  10f75a:	75 0b                	jne    10f767 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x2b>
  current->offline_offset = offline_offset;
  10f75c:	48 c1 e3 04          	shl    $0x4,%rbx
  10f760:	45 89 64 1d 04       	mov    %r12d,0x4(%r13,%rbx,1)
  return kTfLiteOk;
  10f765:	eb 05                	jmp    10f76c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x30>
    return kTfLiteError;
  10f767:	b8 01 00 00 00       	mov    $0x1,%eax
}
  10f76c:	5a                   	pop    %rdx
  10f76d:	5b                   	pop    %rbx
  10f76e:	41 5c                	pop    %r12
  10f770:	41 5d                	pop    %r13
  10f772:	5d                   	pop    %rbp
  10f773:	c3                   	ret    

000000000010f774 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
      &requirements_[entry->requirements_index];
  10f774:	48 63 46 04          	movslq 0x4(%rsi),%rax
    const int last_time_used) const {
  10f778:	41 89 c8             	mov    %ecx,%r8d
    return false;
  10f77b:	31 c9                	xor    %ecx,%ecx
      &requirements_[entry->requirements_index];
  10f77d:	48 c1 e0 04          	shl    $0x4,%rax
  const BufferRequirements* entry_requirements =
  10f781:	48 03 47 10          	add    0x10(%rdi),%rax
  if (entry_requirements->first_time_used > last_time_used) {
  10f785:	44 39 40 08          	cmp    %r8d,0x8(%rax)
  10f789:	7f 06                	jg     10f791 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1d>
  if (first_time_used > entry_requirements->last_time_used) {
  10f78b:	39 50 0c             	cmp    %edx,0xc(%rax)
  10f78e:	0f 9d c1             	setge  %cl
}
  10f791:	89 c8                	mov    %ecx,%eax
  10f793:	c3                   	ret    

000000000010f794 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
  10f794:	41 89 c9             	mov    %ecx,%r9d
  if (start == nullptr) {
  10f797:	48 85 f6             	test   %rsi,%rsi
  10f79a:	75 0a                	jne    10f7a6 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x12>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
  10f79c:	48 63 77 34          	movslq 0x34(%rdi),%rsi
  10f7a0:	48 6b f6 0c          	imul   $0xc,%rsi,%rsi
  10f7a4:	eb 0f                	jmp    10f7b5 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x21>
    if (start->next_entry_index == -1) {
  10f7a6:	48 63 46 08          	movslq 0x8(%rsi),%rax
      return nullptr;
  10f7aa:	31 f6                	xor    %esi,%esi
    if (start->next_entry_index == -1) {
  10f7ac:	83 f8 ff             	cmp    $0xffffffff,%eax
  10f7af:	74 32                	je     10f7e3 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x4f>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
  10f7b1:	48 6b f0 0c          	imul   $0xc,%rax,%rsi
    const int last_time_used) {
  10f7b5:	55                   	push   %rbp
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
  10f7b6:	48 03 77 28          	add    0x28(%rdi),%rsi
    const int last_time_used) {
  10f7ba:	48 89 e5             	mov    %rsp,%rbp
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
  10f7bd:	44 89 c9             	mov    %r9d,%ecx
  10f7c0:	e8 af ff ff ff       	call   10f774 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
  10f7c5:	84 c0                	test   %al,%al
  10f7c7:	75 15                	jne    10f7de <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x4a>
    if (candidate_next_entry->next_entry_index == -1) {
  10f7c9:	48 63 76 08          	movslq 0x8(%rsi),%rsi
  10f7cd:	83 fe ff             	cmp    $0xffffffff,%esi
  10f7d0:	74 0a                	je     10f7dc <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x48>
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
  10f7d2:	48 6b f6 0c          	imul   $0xc,%rsi,%rsi
    candidate_next_entry =
  10f7d6:	48 03 77 28          	add    0x28(%rdi),%rsi
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
  10f7da:	eb e1                	jmp    10f7bd <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x29>
      return nullptr;
  10f7dc:	31 f6                	xor    %esi,%esi
}
  10f7de:	48 89 f0             	mov    %rsi,%rax
  10f7e1:	5d                   	pop    %rbp
  10f7e2:	c3                   	ret    
  10f7e3:	48 89 f0             	mov    %rsi,%rax
  10f7e6:	c3                   	ret    
  10f7e7:	90                   	nop

000000000010f7e8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
  10f7e8:	80 7f 40 00          	cmpb   $0x0,0x40(%rdi)
  10f7ec:	0f 84 07 02 00 00    	je     10f9f9 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x211>
  10f7f2:	8b 77 0c             	mov    0xc(%rdi),%esi
  10f7f5:	49 89 fa             	mov    %rdi,%r10
  10f7f8:	85 f6                	test   %esi,%esi
  10f7fa:	0f 84 f9 01 00 00    	je     10f9f9 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x211>
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
  10f800:	55                   	push   %rbp
  for (int i = 0; i < buffer_count_; ++i) {
  10f801:	31 c0                	xor    %eax,%eax
  int idx_from_head = 0;
  10f803:	31 c9                	xor    %ecx,%ecx
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
  10f805:	48 89 e5             	mov    %rsp,%rbp
  10f808:	41 57                	push   %r15
  10f80a:	41 56                	push   %r14
  10f80c:	41 55                	push   %r13
  10f80e:	41 54                	push   %r12
  10f810:	53                   	push   %rbx
  10f811:	48 83 ec 28          	sub    $0x28,%rsp
  need_to_calculate_offsets_ = false;
  10f815:	c6 47 40 00          	movb   $0x0,0x40(%rdi)
  for (int i = 0; i < buffer_count_; ++i) {
  10f819:	41 8b 52 0c          	mov    0xc(%r10),%edx
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
  10f81d:	4c 63 c1             	movslq %ecx,%r8
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
  10f820:	49 8b 7a 18          	mov    0x18(%r10),%rdi
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
  10f824:	4e 8d 0c 85 00 00 00 	lea    0x0(,%r8,4),%r9
  10f82b:	00 
  for (int i = 0; i < buffer_count_; ++i) {
  10f82c:	39 c2                	cmp    %eax,%edx
  10f82e:	7e 57                	jle    10f887 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x9f>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
  10f830:	4d 8b 5a 10          	mov    0x10(%r10),%r11
  10f834:	48 89 c2             	mov    %rax,%rdx
  10f837:	48 c1 e2 04          	shl    $0x4,%rdx
  10f83b:	49 01 d3             	add    %rdx,%r11
  10f83e:	41 83 7b 04 ff       	cmpl   $0xffffffff,0x4(%r11)
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
  10f843:	45 8b 0b             	mov    (%r11),%r9d
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
  10f846:	75 1d                	jne    10f865 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x7d>
      idx_from_tail--;
  10f848:	ff ce                	dec    %esi
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
  10f84a:	48 63 d6             	movslq %esi,%rdx
  10f84d:	44 89 0c 97          	mov    %r9d,(%rdi,%rdx,4)
      buffer_ids_sorted_[idx_from_tail] = i;
  10f851:	49 8b 7a 20          	mov    0x20(%r10),%rdi
  10f855:	89 04 97             	mov    %eax,(%rdi,%rdx,4)
      buffer_offsets_[i] = -1;
  10f858:	49 8b 52 38          	mov    0x38(%r10),%rdx
  10f85c:	c7 04 82 ff ff ff ff 	movl   $0xffffffff,(%rdx,%rax,4)
  10f863:	eb 1d                	jmp    10f882 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x9a>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
  10f865:	46 89 0c 87          	mov    %r9d,(%rdi,%r8,4)
      buffer_ids_sorted_[idx_from_head] = i;
  10f869:	49 8b 7a 20          	mov    0x20(%r10),%rdi
      idx_from_head++;
  10f86d:	ff c1                	inc    %ecx
      buffer_ids_sorted_[idx_from_head] = i;
  10f86f:	42 89 04 87          	mov    %eax,(%rdi,%r8,4)
      buffer_offsets_[i] = requirements_[i].offline_offset;
  10f873:	49 8b 7a 10          	mov    0x10(%r10),%rdi
  10f877:	8b 7c 17 04          	mov    0x4(%rdi,%rdx,1),%edi
  10f87b:	49 8b 52 38          	mov    0x38(%r10),%rdx
  10f87f:	89 3c 82             	mov    %edi,(%rdx,%rax,4)
  for (int i = 0; i < buffer_count_; ++i) {
  10f882:	48 ff c0             	inc    %rax
  10f885:	eb 92                	jmp    10f819 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x31>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
  10f887:	49 8b 72 20          	mov    0x20(%r10),%rsi
  10f88b:	29 ca                	sub    %ecx,%edx
  10f88d:	4c 01 cf             	add    %r9,%rdi
  10f890:	4c 01 ce             	add    %r9,%rsi
  10f893:	e8 a3 3c 00 00       	call   11353b <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
  10f898:	49 8b 5a 28          	mov    0x28(%r10),%rbx
  next_free_entry_ = 1;
  10f89c:	49 c7 42 30 01 00 00 	movq   $0x1,0x30(%r10)
  10f8a3:	00 
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
  10f8a4:	c7 43 08 ff ff ff ff 	movl   $0xffffffff,0x8(%rbx)
  int buffer_id = buffer_ids_sorted_[0];
  10f8ab:	49 8b 42 20          	mov    0x20(%r10),%rax
  10f8af:	48 63 00             	movslq (%rax),%rax
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
  10f8b2:	48 89 c2             	mov    %rax,%rdx
  first_entry->requirements_index = buffer_id;
  10f8b5:	89 43 04             	mov    %eax,0x4(%rbx)
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
  10f8b8:	48 c1 e2 04          	shl    $0x4,%rdx
  10f8bc:	49 03 52 10          	add    0x10(%r10),%rdx
  10f8c0:	83 7a 04 ff          	cmpl   $0xffffffff,0x4(%rdx)
  10f8c4:	75 09                	jne    10f8cf <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe7>
    buffer_offsets_[buffer_id] = 0;
  10f8c6:	49 8b 52 38          	mov    0x38(%r10),%rdx
  10f8ca:	31 c9                	xor    %ecx,%ecx
  10f8cc:	89 0c 82             	mov    %ecx,(%rdx,%rax,4)
  first_entry->offset = buffer_offsets_[buffer_id];
  10f8cf:	49 8b 52 38          	mov    0x38(%r10),%rdx
  for (int i = 1; i < buffer_count_; ++i) {
  10f8d3:	41 bd 04 00 00 00    	mov    $0x4,%r13d
  10f8d9:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  first_entry->offset = buffer_offsets_[buffer_id];
  10f8df:	8b 04 82             	mov    (%rdx,%rax,4),%eax
  10f8e2:	89 03                	mov    %eax,(%rbx)
  for (int i = 1; i < buffer_count_; ++i) {
  10f8e4:	45 39 62 0c          	cmp    %r12d,0xc(%r10)
  10f8e8:	0f 8e fc 00 00 00    	jle    10f9ea <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x202>
    buffer_id = buffer_ids_sorted_[i];
  10f8ee:	49 8b 42 20          	mov    0x20(%r10),%rax
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
  10f8f2:	4d 8b 4a 10          	mov    0x10(%r10),%r9
    buffer_id = buffer_ids_sorted_[i];
  10f8f6:	4e 63 3c 28          	movslq (%rax,%r13,1),%r15
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
  10f8fa:	4c 89 f8             	mov    %r15,%rax
    buffer_id = buffer_ids_sorted_[i];
  10f8fd:	4d 89 fe             	mov    %r15,%r14
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
  10f900:	48 c1 e0 04          	shl    $0x4,%rax
  10f904:	4c 01 c8             	add    %r9,%rax
    const int wanted_size = wanted_requirements->size;
  10f907:	8b 08                	mov    (%rax),%ecx
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
  10f909:	44 8b 58 04          	mov    0x4(%rax),%r11d
    const int wanted_first_time_used = wanted_requirements->first_time_used;
  10f90d:	8b 50 08             	mov    0x8(%rax),%edx
    const int wanted_size = wanted_requirements->size;
  10f910:	89 4d cc             	mov    %ecx,-0x34(%rbp)
    const int wanted_last_time_used = wanted_requirements->last_time_used;
  10f913:	8b 48 0c             	mov    0xc(%rax),%ecx
  10f916:	89 4d c8             	mov    %ecx,-0x38(%rbp)
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
  10f919:	41 83 fb ff          	cmp    $0xffffffff,%r11d
  10f91d:	75 4f                	jne    10f96e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x186>
      ListEntry* prior_entry = nullptr;
  10f91f:	31 c9                	xor    %ecx,%ecx
    int candidate_offset = 0;
  10f921:	45 31 db             	xor    %r11d,%r11d
  10f924:	48 89 ce             	mov    %rcx,%rsi
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
  10f927:	8b 4d c8             	mov    -0x38(%rbp),%ecx
  10f92a:	4c 89 d7             	mov    %r10,%rdi
  10f92d:	4c 89 4d b8          	mov    %r9,-0x48(%rbp)
  10f931:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10f935:	e8 5a fe ff ff       	call   10f794 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
        if (prior_entry) {
  10f93a:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  10f93e:	4c 8b 4d b8          	mov    -0x48(%rbp),%r9
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
  10f942:	48 89 c1             	mov    %rax,%rcx
        if (prior_entry) {
  10f945:	48 85 f6             	test   %rsi,%rsi
  10f948:	74 15                	je     10f95f <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x177>
              &requirements_[prior_entry->requirements_index];
  10f94a:	48 63 7e 04          	movslq 0x4(%rsi),%rdi
          const int prior_entry_offset =
  10f94e:	8b 06                	mov    (%rsi),%eax
              prior_entry->offset + candidate_requirements->size;
  10f950:	48 c1 e7 04          	shl    $0x4,%rdi
          const int prior_entry_offset =
  10f954:	41 03 04 39          	add    (%r9,%rdi,1),%eax
  10f958:	41 39 c3             	cmp    %eax,%r11d
  10f95b:	44 0f 4c d8          	cmovl  %eax,%r11d
        if (next_entry == nullptr) {
  10f95f:	48 85 c9             	test   %rcx,%rcx
  10f962:	74 0a                	je     10f96e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x186>
        const int gap = next_entry->offset - candidate_offset;
  10f964:	8b 01                	mov    (%rcx),%eax
  10f966:	44 29 d8             	sub    %r11d,%eax
        if (gap >= wanted_size) {
  10f969:	39 45 cc             	cmp    %eax,-0x34(%rbp)
  10f96c:	7f b6                	jg     10f924 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x13c>
    buffer_offsets_[buffer_id] = candidate_offset;
  10f96e:	49 8b 42 38          	mov    0x38(%r10),%rax
  10f972:	46 89 1c b8          	mov    %r11d,(%rax,%r15,4)
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
  10f976:	49 63 42 30          	movslq 0x30(%r10),%rax
  10f97a:	48 6b c0 0c          	imul   $0xc,%rax,%rax
  10f97e:	49 03 42 28          	add    0x28(%r10),%rax
    new_entry->offset = candidate_offset;
  10f982:	44 89 18             	mov    %r11d,(%rax)
    new_entry->requirements_index = buffer_id;
  10f985:	44 89 70 04          	mov    %r14d,0x4(%rax)
    const int new_entry_index = next_free_entry_;
  10f989:	41 8b 72 30          	mov    0x30(%r10),%esi
    ++next_free_entry_;
  10f98d:	8d 56 01             	lea    0x1(%rsi),%edx
  10f990:	41 89 52 30          	mov    %edx,0x30(%r10)
    if (first_entry->offset > candidate_offset) {
  10f994:	44 39 1b             	cmp    %r11d,(%rbx)
  10f997:	7e 0d                	jle    10f9a6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1be>
      first_entry->next_entry_index = first_entry_index_;
  10f999:	41 8b 52 34          	mov    0x34(%r10),%edx
  10f99d:	89 50 08             	mov    %edx,0x8(%rax)
      first_entry_index_ = new_entry_index;
  10f9a0:	41 89 72 34          	mov    %esi,0x34(%r10)
  10f9a4:	eb 35                	jmp    10f9db <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f3>
  10f9a6:	48 89 d9             	mov    %rbx,%rcx
        const int next_entry_index = current_entry->next_entry_index;
  10f9a9:	8b 79 08             	mov    0x8(%rcx),%edi
        if (next_entry_index == -1) {
  10f9ac:	83 ff ff             	cmp    $0xffffffff,%edi
  10f9af:	75 0c                	jne    10f9bd <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1d5>
          current_entry->next_entry_index = new_entry_index;
  10f9b1:	89 71 08             	mov    %esi,0x8(%rcx)
          new_entry->next_entry_index = -1;
  10f9b4:	c7 40 08 ff ff ff ff 	movl   $0xffffffff,0x8(%rax)
          break;
  10f9bb:	eb 1b                	jmp    10f9d8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f0>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
  10f9bd:	48 63 d7             	movslq %edi,%rdx
  10f9c0:	48 6b d2 0c          	imul   $0xc,%rdx,%rdx
  10f9c4:	49 03 52 28          	add    0x28(%r10),%rdx
        if (next_entry->offset > candidate_offset) {
  10f9c8:	44 39 1a             	cmp    %r11d,(%rdx)
  10f9cb:	7f 05                	jg     10f9d2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ea>
  10f9cd:	48 89 d1             	mov    %rdx,%rcx
  10f9d0:	eb d7                	jmp    10f9a9 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1c1>
          new_entry->next_entry_index = current_entry->next_entry_index;
  10f9d2:	89 78 08             	mov    %edi,0x8(%rax)
          current_entry->next_entry_index = new_entry_index;
  10f9d5:	89 71 08             	mov    %esi,0x8(%rcx)
          break;
  10f9d8:	48 89 d8             	mov    %rbx,%rax
  for (int i = 1; i < buffer_count_; ++i) {
  10f9db:	41 ff c4             	inc    %r12d
  10f9de:	49 83 c5 04          	add    $0x4,%r13
  10f9e2:	48 89 c3             	mov    %rax,%rbx
  10f9e5:	e9 fa fe ff ff       	jmp    10f8e4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xfc>
}
  10f9ea:	48 83 c4 28          	add    $0x28,%rsp
  10f9ee:	5b                   	pop    %rbx
  10f9ef:	41 5c                	pop    %r12
  10f9f1:	41 5d                	pop    %r13
  10f9f3:	41 5e                	pop    %r14
  10f9f5:	41 5f                	pop    %r15
  10f9f7:	5d                   	pop    %rbp
  10f9f8:	c3                   	ret    
  10f9f9:	c3                   	ret    

000000000010f9fa <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
  10f9fa:	55                   	push   %rbp
  10f9fb:	48 89 e5             	mov    %rsp,%rbp
  10f9fe:	53                   	push   %rbx
  10f9ff:	48 89 fb             	mov    %rdi,%rbx
  10fa02:	51                   	push   %rcx
  CalculateOffsetsIfNeeded();
  10fa03:	e8 e0 fd ff ff       	call   10f7e8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
    return 0;
  10fa08:	31 c9                	xor    %ecx,%ecx
  if (buffer_count_ == 0) {
  10fa0a:	83 7b 0c 00          	cmpl   $0x0,0xc(%rbx)
  10fa0e:	74 37                	je     10fa47 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x4d>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
  10fa10:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
  10fa14:	48 63 43 34          	movslq 0x34(%rbx),%rax
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
  10fa18:	48 6b c0 0c          	imul   $0xc,%rax,%rax
  10fa1c:	48 01 f8             	add    %rdi,%rax
  while (entry) {
  10fa1f:	48 85 c0             	test   %rax,%rax
  10fa22:	74 23                	je     10fa47 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x4d>
        &requirements_[entry->requirements_index];
  10fa24:	48 63 70 04          	movslq 0x4(%rax),%rsi
    const size_t current_size = entry->offset + requirements->size;
  10fa28:	8b 10                	mov    (%rax),%edx
    if (entry->next_entry_index == -1) {
  10fa2a:	48 63 40 08          	movslq 0x8(%rax),%rax
    const size_t current_size = entry->offset + requirements->size;
  10fa2e:	48 c1 e6 04          	shl    $0x4,%rsi
  10fa32:	48 03 73 10          	add    0x10(%rbx),%rsi
  10fa36:	03 16                	add    (%rsi),%edx
  10fa38:	48 63 d2             	movslq %edx,%rdx
  10fa3b:	48 39 d1             	cmp    %rdx,%rcx
  10fa3e:	48 0f 42 ca          	cmovb  %rdx,%rcx
    if (entry->next_entry_index == -1) {
  10fa42:	83 f8 ff             	cmp    $0xffffffff,%eax
  10fa45:	75 d1                	jne    10fa18 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1e>
}
  10fa47:	5a                   	pop    %rdx
  10fa48:	48 89 c8             	mov    %rcx,%rax
  10fa4b:	5b                   	pop    %rbx
  10fa4c:	5d                   	pop    %rbp
  10fa4d:	c3                   	ret    

000000000010fa4e <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
  10fa4e:	55                   	push   %rbp
  10fa4f:	48 89 e5             	mov    %rsp,%rbp
  10fa52:	41 56                	push   %r14
  10fa54:	49 89 f6             	mov    %rsi,%r14
  10fa57:	41 55                	push   %r13
  10fa59:	49 89 cd             	mov    %rcx,%r13
  10fa5c:	41 54                	push   %r12
  10fa5e:	49 89 fc             	mov    %rdi,%r12
  10fa61:	53                   	push   %rbx
  10fa62:	48 83 ec 10          	sub    $0x10,%rsp
  10fa66:	89 55 dc             	mov    %edx,-0x24(%rbp)
  CalculateOffsetsIfNeeded();
  10fa69:	e8 7a fd ff ff       	call   10f7e8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
  10fa6e:	8b 55 dc             	mov    -0x24(%rbp),%edx
  10fa71:	85 d2                	test   %edx,%edx
  10fa73:	78 07                	js     10fa7c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x2e>
  10fa75:	41 39 54 24 0c       	cmp    %edx,0xc(%r12)
  10fa7a:	7f 1b                	jg     10fa97 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x49>
    TF_LITE_REPORT_ERROR(error_reporter,
  10fa7c:	41 8b 4c 24 0c       	mov    0xc(%r12),%ecx
  10fa81:	be 53 f6 11 00       	mov    $0x11f653,%esi
  10fa86:	4c 89 f7             	mov    %r14,%rdi
  10fa89:	31 c0                	xor    %eax,%eax
  10fa8b:	e8 e4 00 00 00       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  10fa90:	b8 01 00 00 00       	mov    $0x1,%eax
  10fa95:	eb 11                	jmp    10faa8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x5a>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
  10fa97:	49 8b 44 24 38       	mov    0x38(%r12),%rax
  10fa9c:	48 63 da             	movslq %edx,%rbx
  10fa9f:	8b 04 98             	mov    (%rax,%rbx,4),%eax
  10faa2:	41 89 45 00          	mov    %eax,0x0(%r13)
  return kTfLiteOk;
  10faa6:	31 c0                	xor    %eax,%eax
}
  10faa8:	5a                   	pop    %rdx
  10faa9:	59                   	pop    %rcx
  10faaa:	5b                   	pop    %rbx
  10faab:	41 5c                	pop    %r12
  10faad:	41 5d                	pop    %r13
  10faaf:	41 5e                	pop    %r14
  10fab1:	5d                   	pop    %rbp
  10fab2:	c3                   	ret    
  10fab3:	90                   	nop

000000000010fab4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
        : allocator_(allocator) {}

    void operator()(void* data) { allocator_->Deallocate(data); }
  10fab4:	48 8b 07             	mov    (%rdi),%rax
  10fab7:	ff 60 08             	jmp    *0x8(%rax)

000000000010faba <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
  10faba:	55                   	push   %rbp
    auto field_offset = GetOptionalFieldOffset(field);
  10fabb:	be 0c 00 00 00       	mov    $0xc,%esi
  10fac0:	48 89 e5             	mov    %rsp,%rbp
  10fac3:	53                   	push   %rbx
  10fac4:	48 89 fb             	mov    %rdi,%rbx
  10fac7:	51                   	push   %rcx
  10fac8:	e8 67 da ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
  10facd:	31 d2                	xor    %edx,%edx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10facf:	66 85 c0             	test   %ax,%ax
  10fad2:	74 0b                	je     10fadf <_ZNK6tflite8Operator15builtin_optionsEv+0x25>
    auto p = data_ + field_offset;
  10fad4:	0f b7 c0             	movzwl %ax,%eax
  10fad7:	48 01 c3             	add    %rax,%rbx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  10fada:	8b 13                	mov    (%rbx),%edx
  10fadc:	48 01 da             	add    %rbx,%rdx
  }
  10fadf:	48 89 d0             	mov    %rdx,%rax
  10fae2:	5a                   	pop    %rdx
  10fae3:	5b                   	pop    %rbx
  10fae4:	5d                   	pop    %rbp
  10fae5:	c3                   	ret    

000000000010fae6 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
  10fae6:	55                   	push   %rbp
    auto field_offset = GetOptionalFieldOffset(field);
  10fae7:	0f b7 f6             	movzwl %si,%esi
  template<typename T> T GetField(voffset_t field, T defaultval) const {
  10faea:	48 89 e5             	mov    %rsp,%rbp
  10faed:	41 54                	push   %r12
  10faef:	49 89 fc             	mov    %rdi,%r12
  10faf2:	53                   	push   %rbx
  10faf3:	89 d3                	mov    %edx,%ebx
    auto field_offset = GetOptionalFieldOffset(field);
  10faf5:	e8 3a da ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  10fafa:	66 85 c0             	test   %ax,%ax
  10fafd:	74 07                	je     10fb06 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x20>
  10faff:	0f b7 c0             	movzwl %ax,%eax
  10fb02:	41 8a 1c 04          	mov    (%r12,%rax,1),%bl
  }
  10fb06:	89 d8                	mov    %ebx,%eax
  10fb08:	5b                   	pop    %rbx
  10fb09:	41 5c                	pop    %r12
  10fb0b:	5d                   	pop    %rbp
  10fb0c:	c3                   	ret    
  10fb0d:	90                   	nop

000000000010fb0e <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
  10fb0e:	55                   	push   %rbp
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
  10fb0f:	31 d2                	xor    %edx,%edx
  10fb11:	be 0a 00 00 00       	mov    $0xa,%esi
  tflite::BuiltinOptions builtin_options_type() const {
  10fb16:	48 89 e5             	mov    %rsp,%rbp
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
  10fb19:	e8 c8 ff ff ff       	call   10fae6 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
  }
  10fb1e:	5d                   	pop    %rbp
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
  10fb1f:	0f b6 c0             	movzbl %al,%eax
  }
  10fb22:	c3                   	ret    
  10fb23:	90                   	nop

000000000010fb24 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
  10fb24:	55                   	push   %rbp
    auto field_offset = GetOptionalFieldOffset(field);
  10fb25:	0f b7 f6             	movzwl %si,%esi
  template<typename T> T GetField(voffset_t field, T defaultval) const {
  10fb28:	48 89 e5             	mov    %rsp,%rbp
  10fb2b:	41 54                	push   %r12
  10fb2d:	49 89 fc             	mov    %rdi,%r12
  10fb30:	53                   	push   %rbx
  10fb31:	89 d3                	mov    %edx,%ebx
    auto field_offset = GetOptionalFieldOffset(field);
  10fb33:	e8 fc d9 ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  10fb38:	66 85 c0             	test   %ax,%ax
  10fb3b:	74 07                	je     10fb44 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_+0x20>
  10fb3d:	0f b7 c0             	movzwl %ax,%eax
  10fb40:	41 8b 1c 04          	mov    (%r12,%rax,1),%ebx
  }
  10fb44:	89 d8                	mov    %ebx,%eax
  10fb46:	5b                   	pop    %rbx
  10fb47:	41 5c                	pop    %r12
  10fb49:	5d                   	pop    %rbp
  10fb4a:	c3                   	ret    
  10fb4b:	90                   	nop

000000000010fb4c <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
  10fb4c:	55                   	push   %rbp
    auto field_offset = GetOptionalFieldOffset(field);
  10fb4d:	0f b7 f6             	movzwl %si,%esi
  template<typename T> T GetField(voffset_t field, T defaultval) const {
  10fb50:	48 89 e5             	mov    %rsp,%rbp
  10fb53:	41 54                	push   %r12
  10fb55:	49 89 fc             	mov    %rdi,%r12
  10fb58:	53                   	push   %rbx
  10fb59:	89 d3                	mov    %edx,%ebx
    auto field_offset = GetOptionalFieldOffset(field);
  10fb5b:	e8 d4 d9 ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  10fb60:	66 85 c0             	test   %ax,%ax
  10fb63:	74 07                	je     10fb6c <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x20>
  10fb65:	0f b7 c0             	movzwl %ax,%eax
  10fb68:	41 8a 1c 04          	mov    (%r12,%rax,1),%bl
  }
  10fb6c:	89 d8                	mov    %ebx,%eax
  10fb6e:	5b                   	pop    %rbx
  10fb6f:	41 5c                	pop    %r12
  10fb71:	5d                   	pop    %rbp
  10fb72:	c3                   	ret    
  10fb73:	90                   	nop

000000000010fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
  10fb74:	55                   	push   %rbp
  10fb75:	48 89 e5             	mov    %rsp,%rbp
  10fb78:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  10fb7f:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  10fb86:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  10fb8d:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  10fb94:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  10fb9b:	84 c0                	test   %al,%al
  10fb9d:	74 20                	je     10fbbf <_ZN6tflite13ErrorReporter6ReportEPKcz+0x4b>
  10fb9f:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  10fba3:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  10fba7:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  10fbab:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  10fbaf:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  10fbb3:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  10fbb7:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  10fbbb:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  va_list args;
  va_start(args, format);
  10fbbf:	48 8d 45 10          	lea    0x10(%rbp),%rax
  int code = Report(format, args);
  10fbc3:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  va_start(args, format);
  10fbca:	c7 85 38 ff ff ff 10 	movl   $0x10,-0xc8(%rbp)
  10fbd1:	00 00 00 
  10fbd4:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  10fbdb:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  10fbe2:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  int code = Report(format, args);
  10fbe9:	48 8b 07             	mov    (%rdi),%rax
  va_start(args, format);
  10fbec:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  10fbf3:	00 00 00 
  int code = Report(format, args);
  10fbf6:	ff 50 10             	call   *0x10(%rax)
  va_end(args);
  return code;
}
  10fbf9:	c9                   	leave  
  10fbfa:	c3                   	ret    
  10fbfb:	90                   	nop

000000000010fbfc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
  10fbfc:	55                   	push   %rbp
  10fbfd:	48 89 d6             	mov    %rdx,%rsi
  10fc00:	48 89 e5             	mov    %rsp,%rbp
  10fc03:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  10fc0a:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  10fc11:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  10fc18:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  10fc1f:	84 c0                	test   %al,%al
  10fc21:	74 20                	je     10fc43 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz+0x47>
  10fc23:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  10fc27:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  10fc2b:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  10fc2f:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  10fc33:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  10fc37:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  10fc3b:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  10fc3f:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  va_list args;
  va_start(args, format);
  10fc43:	48 8d 45 10          	lea    0x10(%rbp),%rax
  int code = Report(format, args);
  10fc47:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  va_start(args, format);
  10fc4e:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  10fc55:	00 00 00 
  10fc58:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  10fc5f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  10fc66:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  int code = Report(format, args);
  10fc6d:	48 8b 07             	mov    (%rdi),%rax
  va_start(args, format);
  10fc70:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  10fc77:	00 00 00 
  int code = Report(format, args);
  10fc7a:	ff 50 10             	call   *0x10(%rax)
  va_end(args);
  return code;
}
  10fc7d:	c9                   	leave  
  10fc7e:	c3                   	ret    
  10fc7f:	90                   	nop

000000000010fc80 <_ZN6tflite12RuntimeShapeD1Ev>:
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
    if (size_ > kMaxSmallSize) {
  10fc80:	83 3f 05             	cmpl   $0x5,(%rdi)
  10fc83:	7e 0e                	jle    10fc93 <_ZN6tflite12RuntimeShapeD1Ev+0x13>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
  10fc85:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  10fc89:	48 85 ff             	test   %rdi,%rdi
  10fc8c:	74 05                	je     10fc93 <_ZN6tflite12RuntimeShapeD1Ev+0x13>
  10fc8e:	e9 aa af 00 00       	jmp    11ac3d <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
  10fc93:	c3                   	ret    

000000000010fc94 <_ZNK6tflite12RuntimeShape4DimsEi>:

  inline int32_t DimensionsCount() const { return size_; }
  inline int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
  10fc94:	85 f6                	test   %esi,%esi
  10fc96:	79 09                	jns    10fca1 <_ZNK6tflite12RuntimeShape4DimsEi+0xd>
  inline int32_t Dims(int i) const {
  10fc98:	55                   	push   %rbp
  10fc99:	48 89 e5             	mov    %rsp,%rbp
    TFLITE_DCHECK_GE(i, 0);
  10fc9c:	e8 23 21 00 00       	call   111dc4 <abort>
    TFLITE_DCHECK_LT(i, size_);
  10fca1:	8b 07                	mov    (%rdi),%eax
  10fca3:	39 f0                	cmp    %esi,%eax
  10fca5:	7e f1                	jle    10fc98 <_ZNK6tflite12RuntimeShape4DimsEi+0x4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
  10fca7:	83 f8 05             	cmp    $0x5,%eax
  10fcaa:	48 63 f6             	movslq %esi,%rsi
  10fcad:	7e 08                	jle    10fcb7 <_ZNK6tflite12RuntimeShape4DimsEi+0x23>
  10fcaf:	48 8b 47 08          	mov    0x8(%rdi),%rax
  10fcb3:	8b 04 b0             	mov    (%rax,%rsi,4),%eax
  10fcb6:	c3                   	ret    
  10fcb7:	8b 44 b7 08          	mov    0x8(%rdi,%rsi,4),%eax
  }
  10fcbb:	c3                   	ret    

000000000010fcbc <_ZNK6tflite12RuntimeShape8FlatSizeEv>:

  inline int32_t* DimsData() {
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  inline const int32_t* DimsData() const {
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  10fcbc:	8b 0f                	mov    (%rdi),%ecx
  10fcbe:	48 8d 77 08          	lea    0x8(%rdi),%rsi
  10fcc2:	83 f9 05             	cmp    $0x5,%ecx
  10fcc5:	7e 04                	jle    10fccb <_ZNK6tflite12RuntimeShape8FlatSizeEv+0xf>
  10fcc7:	48 8b 77 08          	mov    0x8(%rdi),%rsi
  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
    int buffer_size = 1;
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
    for (int i = 0; i < size_; i++) {
  10fccb:	31 c0                	xor    %eax,%eax
    int buffer_size = 1;
  10fccd:	ba 01 00 00 00       	mov    $0x1,%edx
    for (int i = 0; i < size_; i++) {
  10fcd2:	39 c1                	cmp    %eax,%ecx
  10fcd4:	7e 09                	jle    10fcdf <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x23>
      buffer_size *= dims_data[i];
  10fcd6:	0f af 14 86          	imul   (%rsi,%rax,4),%edx
    for (int i = 0; i < size_; i++) {
  10fcda:	48 ff c0             	inc    %rax
  10fcdd:	eb f3                	jmp    10fcd2 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x16>
    }
    return buffer_size;
  }
  10fcdf:	89 d0                	mov    %edx,%eax
  10fce1:	c3                   	ret    

000000000010fce2 <_ZNKSt9bad_alloc4whatEv>:
  10fce2:	b8 2c 03 12 00       	mov    $0x12032c,%eax
  10fce7:	c3                   	ret    

000000000010fce8 <_ZNSt9bad_allocD1Ev>:
  10fce8:	48 c7 07 f8 d6 11 00 	movq   $0x11d6f8,(%rdi)
  10fcef:	e9 22 01 00 00       	jmp    10fe16 <_ZNSt9exceptionD1Ev>

000000000010fcf4 <_ZNSt9bad_allocD0Ev>:
  10fcf4:	55                   	push   %rbp
  10fcf5:	48 89 e5             	mov    %rsp,%rbp
  10fcf8:	48 83 ec 10          	sub    $0x10,%rsp
  10fcfc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10fd00:	e8 e3 ff ff ff       	call   10fce8 <_ZNSt9bad_allocD1Ev>
  10fd05:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10fd09:	be 08 00 00 00       	mov    $0x8,%esi
  10fd0e:	c9                   	leave  
  10fd0f:	e9 8a af 00 00       	jmp    11ac9e <_ZdlPvm>

000000000010fd14 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
  10fd14:	48 8b 05 ad 63 01 00 	mov    0x163ad(%rip),%rax        # 1260c8 <_ZN12_GLOBAL__N_114emergency_poolE+0x8>
  10fd1b:	48 8b 57 f0          	mov    -0x10(%rdi),%rdx
  10fd1f:	48 8d 4f f0          	lea    -0x10(%rdi),%rcx
  10fd23:	48 85 c0             	test   %rax,%rax
  10fd26:	74 09                	je     10fd31 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1d>
  10fd28:	48 8d 34 11          	lea    (%rcx,%rdx,1),%rsi
  10fd2c:	48 39 c6             	cmp    %rax,%rsi
  10fd2f:	73 06                	jae    10fd37 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x23>
  10fd31:	48 89 47 f8          	mov    %rax,-0x8(%rdi)
  10fd35:	eb 1a                	jmp    10fd51 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x3d>
  10fd37:	4c 8b 48 08          	mov    0x8(%rax),%r9
  10fd3b:	41 b8 c8 60 12 00    	mov    $0x1260c8,%r8d
  10fd41:	48 39 f0             	cmp    %rsi,%rax
  10fd44:	75 1f                	jne    10fd65 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x51>
  10fd46:	48 03 10             	add    (%rax),%rdx
  10fd49:	4c 89 4f f8          	mov    %r9,-0x8(%rdi)
  10fd4d:	48 89 57 f0          	mov    %rdx,-0x10(%rdi)
  10fd51:	48 89 0d 70 63 01 00 	mov    %rcx,0x16370(%rip)        # 1260c8 <_ZN12_GLOBAL__N_114emergency_poolE+0x8>
  10fd58:	c3                   	ret    
  10fd59:	4c 39 ce             	cmp    %r9,%rsi
  10fd5c:	73 12                	jae    10fd70 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x5c>
  10fd5e:	4c 8d 40 08          	lea    0x8(%rax),%r8
  10fd62:	4c 89 c8             	mov    %r9,%rax
  10fd65:	4c 8b 48 08          	mov    0x8(%rax),%r9
  10fd69:	4d 85 c9             	test   %r9,%r9
  10fd6c:	75 eb                	jne    10fd59 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x45>
  10fd6e:	eb 0d                	jmp    10fd7d <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x69>
  10fd70:	75 0b                	jne    10fd7d <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x69>
  10fd72:	48 03 16             	add    (%rsi),%rdx
  10fd75:	48 8b 76 08          	mov    0x8(%rsi),%rsi
  10fd79:	48 89 70 08          	mov    %rsi,0x8(%rax)
  10fd7d:	49 8b 00             	mov    (%r8),%rax
  10fd80:	48 8b 30             	mov    (%rax),%rsi
  10fd83:	4c 8d 0c 30          	lea    (%rax,%rsi,1),%r9
  10fd87:	4c 39 c9             	cmp    %r9,%rcx
  10fd8a:	75 07                	jne    10fd93 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x7f>
  10fd8c:	48 01 d6             	add    %rdx,%rsi
  10fd8f:	48 89 30             	mov    %rsi,(%rax)
  10fd92:	c3                   	ret    
  10fd93:	48 8b 40 08          	mov    0x8(%rax),%rax
  10fd97:	48 89 57 f0          	mov    %rdx,-0x10(%rdi)
  10fd9b:	48 89 47 f8          	mov    %rax,-0x8(%rdi)
  10fd9f:	49 8b 00             	mov    (%r8),%rax
  10fda2:	48 89 48 08          	mov    %rcx,0x8(%rax)
  10fda6:	c3                   	ret    
  10fda7:	90                   	nop

000000000010fda8 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>:
  10fda8:	b8 10 00 00 00       	mov    $0x10,%eax
  10fdad:	48 83 c7 10          	add    $0x10,%rdi
  10fdb1:	b9 c8 60 12 00       	mov    $0x1260c8,%ecx
  10fdb6:	48 39 c7             	cmp    %rax,%rdi
  10fdb9:	48 0f 42 f8          	cmovb  %rax,%rdi
  10fdbd:	48 8b 05 04 63 01 00 	mov    0x16304(%rip),%rax        # 1260c8 <_ZN12_GLOBAL__N_114emergency_poolE+0x8>
  10fdc4:	48 83 c7 0f          	add    $0xf,%rdi
  10fdc8:	48 83 e7 f0          	and    $0xfffffffffffffff0,%rdi
  10fdcc:	48 85 c0             	test   %rax,%rax
  10fdcf:	74 43                	je     10fe14 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x6c>
  10fdd1:	48 39 38             	cmp    %rdi,(%rax)
  10fdd4:	73 0a                	jae    10fde0 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x38>
  10fdd6:	48 8d 48 08          	lea    0x8(%rax),%rcx
  10fdda:	48 8b 40 08          	mov    0x8(%rax),%rax
  10fdde:	eb ec                	jmp    10fdcc <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x24>
  10fde0:	48 8b 10             	mov    (%rax),%rdx
  10fde3:	48 8b 70 08          	mov    0x8(%rax),%rsi
  10fde7:	49 89 d0             	mov    %rdx,%r8
  10fdea:	49 29 f8             	sub    %rdi,%r8
  10fded:	49 83 f8 0f          	cmp    $0xf,%r8
  10fdf1:	76 13                	jbe    10fe06 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x5e>
  10fdf3:	48 8d 14 38          	lea    (%rax,%rdi,1),%rdx
  10fdf7:	48 89 72 08          	mov    %rsi,0x8(%rdx)
  10fdfb:	48 8b 01             	mov    (%rcx),%rax
  10fdfe:	4c 89 02             	mov    %r8,(%rdx)
  10fe01:	48 89 38             	mov    %rdi,(%rax)
  10fe04:	eb 06                	jmp    10fe0c <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0+0x64>
  10fe06:	48 89 10             	mov    %rdx,(%rax)
  10fe09:	48 89 f2             	mov    %rsi,%rdx
  10fe0c:	48 89 11             	mov    %rdx,(%rcx)
  10fe0f:	48 83 c0 10          	add    $0x10,%rax
  10fe13:	c3                   	ret    
  10fe14:	c3                   	ret    
  10fe15:	90                   	nop

000000000010fe16 <_ZNSt9exceptionD1Ev>:
  10fe16:	c3                   	ret    
  10fe17:	90                   	nop

000000000010fe18 <_ZN12_GLOBAL__N_113constant_initD1Ev>:
  10fe18:	c3                   	ret    
  10fe19:	90                   	nop

000000000010fe1a <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
  10fe1a:	48 c7 07 e0 d7 11 00 	movq   $0x11d7e0,(%rdi)
  10fe21:	e9 50 02 00 00       	jmp    110076 <_ZN10__cxxabiv117__class_type_infoD1Ev>

000000000010fe26 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
  10fe26:	55                   	push   %rbp
  10fe27:	48 89 e5             	mov    %rsp,%rbp
  10fe2a:	48 83 ec 10          	sub    $0x10,%rsp
  10fe2e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10fe32:	e8 e3 ff ff ff       	call   10fe1a <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
  10fe37:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  10fe3b:	be 18 00 00 00       	mov    $0x18,%esi
  10fe40:	c9                   	leave  
  10fe41:	e9 58 ae 00 00       	jmp    11ac9e <_ZdlPvm>

000000000010fe46 <_ZNKSt9type_infoeqERKS_.isra.0>:
  10fe46:	b0 01                	mov    $0x1,%al
  10fe48:	48 39 f7             	cmp    %rsi,%rdi
  10fe4b:	74 1f                	je     10fe6c <_ZNKSt9type_infoeqERKS_.isra.0+0x26>
  10fe4d:	31 c0                	xor    %eax,%eax
  10fe4f:	80 3f 2a             	cmpb   $0x2a,(%rdi)
  10fe52:	74 18                	je     10fe6c <_ZNKSt9type_infoeqERKS_.isra.0+0x26>
  10fe54:	55                   	push   %rbp
  10fe55:	80 3e 2a             	cmpb   $0x2a,(%rsi)
  10fe58:	48 89 e5             	mov    %rsp,%rbp
  10fe5b:	75 03                	jne    10fe60 <_ZNKSt9type_infoeqERKS_.isra.0+0x1a>
  10fe5d:	48 ff c6             	inc    %rsi
  10fe60:	e8 bb 48 ff ff       	call   104720 <strcmp>
  10fe65:	5d                   	pop    %rbp
  10fe66:	85 c0                	test   %eax,%eax
  10fe68:	0f 94 c0             	sete   %al
  10fe6b:	c3                   	ret    
  10fe6c:	c3                   	ret    
  10fe6d:	90                   	nop

000000000010fe6e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
  10fe6e:	55                   	push   %rbp
  10fe6f:	48 89 e5             	mov    %rsp,%rbp
  10fe72:	41 57                	push   %r15
  10fe74:	41 56                	push   %r14
  10fe76:	49 89 fe             	mov    %rdi,%r14
  10fe79:	41 55                	push   %r13
  10fe7b:	41 89 d5             	mov    %edx,%r13d
  10fe7e:	41 54                	push   %r12
  10fe80:	53                   	push   %rbx
  10fe81:	4c 89 c3             	mov    %r8,%rbx
  10fe84:	48 83 ec 28          	sub    $0x28,%rsp
  10fe88:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  10fe8c:	4c 8b 7d 10          	mov    0x10(%rbp),%r15
  10fe90:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
  10fe94:	48 8b 71 08          	mov    0x8(%rcx),%rsi
  10fe98:	4c 8b 65 18          	mov    0x18(%rbp),%r12
  10fe9c:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
  10fea0:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
  10fea4:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
  10fea8:	e8 99 ff ff ff       	call   10fe46 <_ZNKSt9type_infoeqERKS_.isra.0>
  10fead:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  10feb1:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  10feb5:	84 c0                	test   %al,%al
  10feb7:	4c 8b 4d b0          	mov    -0x50(%rbp),%r9
  10febb:	74 3c                	je     10fef9 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8b>
  10febd:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  10fec2:	49 89 1c 24          	mov    %rbx,(%r12)
  10fec6:	45 89 6c 24 08       	mov    %r13d,0x8(%r12)
  10fecb:	78 1a                	js     10fee7 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x79>
  10fecd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  10fed1:	48 01 c3             	add    %rax,%rbx
  10fed4:	31 c0                	xor    %eax,%eax
  10fed6:	49 39 df             	cmp    %rbx,%r15
  10fed9:	0f 94 c0             	sete   %al
  10fedc:	8d 44 80 01          	lea    0x1(%rax,%rax,4),%eax
  10fee0:	41 89 44 24 10       	mov    %eax,0x10(%r12)
  10fee5:	eb 68                	jmp    10ff4f <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xe1>
  10fee7:	48 83 7d c8 fe       	cmpq   $0xfffffffffffffffe,-0x38(%rbp)
  10feec:	75 61                	jne    10ff4f <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xe1>
  10feee:	41 c7 44 24 10 01 00 	movl   $0x1,0x10(%r12)
  10fef5:	00 00 
  10fef7:	eb 56                	jmp    10ff4f <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xe1>
  10fef9:	4c 39 fb             	cmp    %r15,%rbx
  10fefc:	75 24                	jne    10ff22 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb4>
  10fefe:	49 8b 71 08          	mov    0x8(%r9),%rsi
  10ff02:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
  10ff06:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  10ff0a:	e8 37 ff ff ff       	call   10fe46 <_ZNKSt9type_infoeqERKS_.isra.0>
  10ff0f:	4c 8b 4d c0          	mov    -0x40(%rbp),%r9
  10ff13:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  10ff17:	84 c0                	test   %al,%al
  10ff19:	74 07                	je     10ff22 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb4>
  10ff1b:	45 89 6c 24 0c       	mov    %r13d,0xc(%r12)
  10ff20:	eb 2d                	jmp    10ff4f <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xe1>
  10ff22:	49 8b 7e 10          	mov    0x10(%r14),%rdi
  10ff26:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  10ff2a:	49 89 d8             	mov    %rbx,%r8
  10ff2d:	44 89 ea             	mov    %r13d,%edx
  10ff30:	48 8b 07             	mov    (%rdi),%rax
  10ff33:	4c 89 65 18          	mov    %r12,0x18(%rbp)
  10ff37:	4c 89 7d 10          	mov    %r15,0x10(%rbp)
  10ff3b:	48 8b 40 38          	mov    0x38(%rax),%rax
  10ff3f:	48 83 c4 28          	add    $0x28,%rsp
  10ff43:	5b                   	pop    %rbx
  10ff44:	41 5c                	pop    %r12
  10ff46:	41 5d                	pop    %r13
  10ff48:	41 5e                	pop    %r14
  10ff4a:	41 5f                	pop    %r15
  10ff4c:	5d                   	pop    %rbp
  10ff4d:	ff e0                	jmp    *%rax
  10ff4f:	48 83 c4 28          	add    $0x28,%rsp
  10ff53:	31 c0                	xor    %eax,%eax
  10ff55:	5b                   	pop    %rbx
  10ff56:	41 5c                	pop    %r12
  10ff58:	41 5d                	pop    %r13
  10ff5a:	41 5e                	pop    %r14
  10ff5c:	41 5f                	pop    %r15
  10ff5e:	5d                   	pop    %rbp
  10ff5f:	c3                   	ret    

000000000010ff60 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
  10ff60:	55                   	push   %rbp
  10ff61:	48 89 e5             	mov    %rsp,%rbp
  10ff64:	41 56                	push   %r14
  10ff66:	49 89 fe             	mov    %rdi,%r14
  10ff69:	41 55                	push   %r13
  10ff6b:	49 89 f5             	mov    %rsi,%r13
  10ff6e:	48 83 ec 20          	sub    $0x20,%rsp
  10ff72:	49 39 d0             	cmp    %rdx,%r8
  10ff75:	75 29                	jne    10ffa0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x40>
  10ff77:	48 8b 71 08          	mov    0x8(%rcx),%rsi
  10ff7b:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  10ff7f:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  10ff83:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  10ff87:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  10ff8b:	e8 b6 fe ff ff       	call   10fe46 <_ZNKSt9type_infoeqERKS_.isra.0>
  10ff90:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  10ff94:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10ff98:	84 c0                	test   %al,%al
  10ff9a:	4c 8b 45 d8          	mov    -0x28(%rbp),%r8
  10ff9e:	75 19                	jne    10ffb9 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x59>
  10ffa0:	49 8b 7e 10          	mov    0x10(%r14),%rdi
  10ffa4:	4c 89 ee             	mov    %r13,%rsi
  10ffa7:	48 8b 07             	mov    (%rdi),%rax
  10ffaa:	48 8b 40 40          	mov    0x40(%rax),%rax
  10ffae:	48 83 c4 20          	add    $0x20,%rsp
  10ffb2:	41 5d                	pop    %r13
  10ffb4:	41 5e                	pop    %r14
  10ffb6:	5d                   	pop    %rbp
  10ffb7:	ff e0                	jmp    *%rax
  10ffb9:	48 83 c4 20          	add    $0x20,%rsp
  10ffbd:	b8 06 00 00 00       	mov    $0x6,%eax
  10ffc2:	41 5d                	pop    %r13
  10ffc4:	41 5e                	pop    %r14
  10ffc6:	5d                   	pop    %rbp
  10ffc7:	c3                   	ret    

000000000010ffc8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
  10ffc8:	55                   	push   %rbp
  10ffc9:	48 89 e5             	mov    %rsp,%rbp
  10ffcc:	41 56                	push   %r14
  10ffce:	49 89 fe             	mov    %rdi,%r14
  10ffd1:	48 83 ec 28          	sub    $0x28,%rsp
  10ffd5:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  10ffd9:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  10ffdd:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  10ffe1:	e8 e4 00 00 00       	call   1100ca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  10ffe6:	84 c0                	test   %al,%al
  10ffe8:	75 20                	jne    11000a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x42>
  10ffea:	49 8b 7e 10          	mov    0x10(%r14),%rdi
  10ffee:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  10fff2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  10fff6:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  10fffa:	48 8b 07             	mov    (%rdi),%rax
  10fffd:	48 8b 40 30          	mov    0x30(%rax),%rax
  110001:	48 83 c4 28          	add    $0x28,%rsp
  110005:	41 5e                	pop    %r14
  110007:	5d                   	pop    %rbp
  110008:	ff e0                	jmp    *%rax
  11000a:	48 83 c4 28          	add    $0x28,%rsp
  11000e:	41 5e                	pop    %r14
  110010:	5d                   	pop    %rbp
  110011:	c3                   	ret    

0000000000110012 <_ZNSt9type_infoD1Ev>:
  110012:	c3                   	ret    
  110013:	90                   	nop

0000000000110014 <_ZNKSt9type_info14__is_pointer_pEv>:
  110014:	31 c0                	xor    %eax,%eax
  110016:	c3                   	ret    
  110017:	90                   	nop

0000000000110018 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
  110018:	55                   	push   %rbp
  110019:	31 c0                	xor    %eax,%eax
  11001b:	31 c9                	xor    %ecx,%ecx
  11001d:	48 89 e5             	mov    %rsp,%rbp
  110020:	53                   	push   %rbx
  110021:	48 89 d3             	mov    %rdx,%rbx
  110024:	48 83 ec 28          	sub    $0x28,%rsp
  110028:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  11002c:	b8 01 00 00 00       	mov    $0x1,%eax
  110031:	48 8b 12             	mov    (%rdx),%rdx
  110034:	48 c1 e0 24          	shl    $0x24,%rax
  110038:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  11003c:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  110040:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  110044:	48 8b 07             	mov    (%rdi),%rax
  110047:	ff 50 30             	call   *0x30(%rax)
  11004a:	8b 55 e0             	mov    -0x20(%rbp),%edx
  11004d:	31 c0                	xor    %eax,%eax
  11004f:	83 e2 06             	and    $0x6,%edx
  110052:	83 fa 06             	cmp    $0x6,%edx
  110055:	75 09                	jne    110060 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x48>
  110057:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  11005b:	48 89 03             	mov    %rax,(%rbx)
  11005e:	b0 01                	mov    $0x1,%al
  110060:	48 83 c4 28          	add    $0x28,%rsp
  110064:	5b                   	pop    %rbx
  110065:	5d                   	pop    %rbp
  110066:	c3                   	ret    
  110067:	90                   	nop

0000000000110068 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
  110068:	31 c0                	xor    %eax,%eax
  11006a:	49 39 d0             	cmp    %rdx,%r8
  11006d:	0f 94 c0             	sete   %al
  110070:	8d 44 80 01          	lea    0x1(%rax,%rax,4),%eax
  110074:	c3                   	ret    
  110075:	90                   	nop

0000000000110076 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
  110076:	48 c7 07 70 d8 11 00 	movq   $0x11d870,(%rdi)
  11007d:	e9 90 ff ff ff       	jmp    110012 <_ZNSt9type_infoD1Ev>

0000000000110082 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
  110082:	55                   	push   %rbp
  110083:	48 89 e5             	mov    %rsp,%rbp
  110086:	48 83 ec 10          	sub    $0x10,%rsp
  11008a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11008e:	e8 e3 ff ff ff       	call   110076 <_ZN10__cxxabiv117__class_type_infoD1Ev>
  110093:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  110097:	be 10 00 00 00       	mov    $0x10,%esi
  11009c:	c9                   	leave  
  11009d:	e9 fc ab 00 00       	jmp    11ac9e <_ZdlPvm>

00000000001100a2 <_ZNKSt9type_infoeqERKS_.isra.0>:
  1100a2:	b0 01                	mov    $0x1,%al
  1100a4:	48 39 f7             	cmp    %rsi,%rdi
  1100a7:	74 1f                	je     1100c8 <_ZNKSt9type_infoeqERKS_.isra.0+0x26>
  1100a9:	31 c0                	xor    %eax,%eax
  1100ab:	80 3f 2a             	cmpb   $0x2a,(%rdi)
  1100ae:	74 18                	je     1100c8 <_ZNKSt9type_infoeqERKS_.isra.0+0x26>
  1100b0:	55                   	push   %rbp
  1100b1:	80 3e 2a             	cmpb   $0x2a,(%rsi)
  1100b4:	48 89 e5             	mov    %rsp,%rbp
  1100b7:	75 03                	jne    1100bc <_ZNKSt9type_infoeqERKS_.isra.0+0x1a>
  1100b9:	48 ff c6             	inc    %rsi
  1100bc:	e8 5f 46 ff ff       	call   104720 <strcmp>
  1100c1:	5d                   	pop    %rbp
  1100c2:	85 c0                	test   %eax,%eax
  1100c4:	0f 94 c0             	sete   %al
  1100c7:	c3                   	ret    
  1100c8:	c3                   	ret    
  1100c9:	90                   	nop

00000000001100ca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
  1100ca:	55                   	push   %rbp
  1100cb:	48 89 e5             	mov    %rsp,%rbp
  1100ce:	41 54                	push   %r12
  1100d0:	49 89 d4             	mov    %rdx,%r12
  1100d3:	53                   	push   %rbx
  1100d4:	48 8b 76 08          	mov    0x8(%rsi),%rsi
  1100d8:	48 89 cb             	mov    %rcx,%rbx
  1100db:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  1100df:	e8 be ff ff ff       	call   1100a2 <_ZNKSt9type_infoeqERKS_.isra.0>
  1100e4:	84 c0                	test   %al,%al
  1100e6:	74 12                	je     1100fa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x30>
  1100e8:	4c 89 23             	mov    %r12,(%rbx)
  1100eb:	48 c7 43 10 10 00 00 	movq   $0x10,0x10(%rbx)
  1100f2:	00 
  1100f3:	c7 43 08 06 00 00 00 	movl   $0x6,0x8(%rbx)
  1100fa:	5b                   	pop    %rbx
  1100fb:	41 5c                	pop    %r12
  1100fd:	5d                   	pop    %rbp
  1100fe:	c3                   	ret    
  1100ff:	90                   	nop

0000000000110100 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
  110100:	55                   	push   %rbp
  110101:	48 89 e5             	mov    %rsp,%rbp
  110104:	41 57                	push   %r15
  110106:	41 56                	push   %r14
  110108:	49 89 ce             	mov    %rcx,%r14
  11010b:	41 55                	push   %r13
  11010d:	4d 89 c5             	mov    %r8,%r13
  110110:	41 54                	push   %r12
  110112:	41 89 d4             	mov    %edx,%r12d
  110115:	53                   	push   %rbx
  110116:	56                   	push   %rsi
  110117:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  11011b:	4c 8b 7f 08          	mov    0x8(%rdi),%r15
  11011f:	4c 3b 45 10          	cmp    0x10(%rbp),%r8
  110123:	75 16                	jne    11013b <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3b>
  110125:	49 8b 71 08          	mov    0x8(%r9),%rsi
  110129:	4c 89 ff             	mov    %r15,%rdi
  11012c:	e8 71 ff ff ff       	call   1100a2 <_ZNKSt9type_infoeqERKS_.isra.0>
  110131:	84 c0                	test   %al,%al
  110133:	74 06                	je     11013b <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3b>
  110135:	44 89 63 0c          	mov    %r12d,0xc(%rbx)
  110139:	eb 1e                	jmp    110159 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x59>
  11013b:	49 8b 76 08          	mov    0x8(%r14),%rsi
  11013f:	4c 89 ff             	mov    %r15,%rdi
  110142:	e8 5b ff ff ff       	call   1100a2 <_ZNKSt9type_infoeqERKS_.isra.0>
  110147:	84 c0                	test   %al,%al
  110149:	74 0e                	je     110159 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x59>
  11014b:	4c 89 2b             	mov    %r13,(%rbx)
  11014e:	44 89 63 08          	mov    %r12d,0x8(%rbx)
  110152:	c7 43 10 01 00 00 00 	movl   $0x1,0x10(%rbx)
  110159:	5a                   	pop    %rdx
  11015a:	31 c0                	xor    %eax,%eax
  11015c:	5b                   	pop    %rbx
  11015d:	41 5c                	pop    %r12
  11015f:	41 5d                	pop    %r13
  110161:	41 5e                	pop    %r14
  110163:	41 5f                	pop    %r15
  110165:	5d                   	pop    %rbp
  110166:	c3                   	ret    
  110167:	90                   	nop

0000000000110168 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
  110168:	55                   	push   %rbp
  110169:	48 89 e5             	mov    %rsp,%rbp
  11016c:	41 55                	push   %r13
  11016e:	41 89 cd             	mov    %ecx,%r13d
  110171:	41 54                	push   %r12
  110173:	49 89 fc             	mov    %rdi,%r12
  110176:	53                   	push   %rbx
  110177:	48 89 f3             	mov    %rsi,%rbx
  11017a:	48 83 ec 18          	sub    $0x18,%rsp
  11017e:	48 8b 76 08          	mov    0x8(%rsi),%rsi
  110182:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
  110186:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  11018a:	e8 13 ff ff ff       	call   1100a2 <_ZNKSt9type_infoeqERKS_.isra.0>
  11018f:	84 c0                	test   %al,%al
  110191:	75 23                	jne    1101b6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x4e>
  110193:	41 83 fd 03          	cmp    $0x3,%r13d
  110197:	77 1d                	ja     1101b6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x4e>
  110199:	48 8b 03             	mov    (%rbx),%rax
  11019c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  1101a0:	4c 89 e6             	mov    %r12,%rsi
  1101a3:	48 89 df             	mov    %rbx,%rdi
  1101a6:	48 8b 40 28          	mov    0x28(%rax),%rax
  1101aa:	48 83 c4 18          	add    $0x18,%rsp
  1101ae:	5b                   	pop    %rbx
  1101af:	41 5c                	pop    %r12
  1101b1:	41 5d                	pop    %r13
  1101b3:	5d                   	pop    %rbp
  1101b4:	ff e0                	jmp    *%rax
  1101b6:	48 83 c4 18          	add    $0x18,%rsp
  1101ba:	5b                   	pop    %rbx
  1101bb:	41 5c                	pop    %r12
  1101bd:	41 5d                	pop    %r13
  1101bf:	5d                   	pop    %rbp
  1101c0:	c3                   	ret    

00000000001101c1 <_OffsetAbsSyms>:
GEN_OFFSET_SYM(x86_boot_arg_t, boot_type);
GEN_OFFSET_SYM(x86_boot_arg_t, arg);

GEN_OFFSET_SYM(_thread_arch_t, flags);

GEN_ABS_SYM_END
  1101c1:	c3                   	ret    

00000000001101c2 <main>:
 * limitations under the License.
 */

#include "main_functions.h"

int main(int argc, char *argv[]) {
  1101c2:	55                   	push   %rbp
  1101c3:	48 89 e5             	mov    %rsp,%rbp
    setup();
  1101c6:	e8 07 00 00 00       	call   1101d2 <setup>

    while(1) {
        loop();
  1101cb:	e8 f7 01 00 00       	call   1103c7 <loop>
    while(1) {
  1101d0:	eb f9                	jmp    1101cb <main+0x9>

00000000001101d2 <setup>:
    static const char *label[] ={"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
    float   o_scale      = 0.0f;
    int32_t o_zero_point = 0;
}

void setup(void) {
  1101d2:	55                   	push   %rbp
  1101d3:	48 89 e5             	mov    %rsp,%rbp
  1101d6:	48 83 ec 40          	sub    $0x40,%rsp
    static tflite::MicroErrorReporter micro_error_reporter;
  1101da:	80 3d 57 5f 01 00 00 	cmpb   $0x0,0x15f57(%rip)        # 126138 <_ZGVZ5setupE20micro_error_reporter>
  1101e1:	75 1b                	jne    1101fe <setup+0x2c>
  1101e3:	ba 70 61 12 00       	mov    $0x126170,%edx
  1101e8:	be 18 29 14 00       	mov    $0x142918,%esi
  1101ed:	bf 6e d1 10 00       	mov    $0x10d16e,%edi
  1101f2:	c6 05 3f 5f 01 00 01 	movb   $0x1,0x15f3f(%rip)        # 126138 <_ZGVZ5setupE20micro_error_reporter>
  1101f9:	e8 f6 02 00 00       	call   1104f4 <__cxa_atexit>

    error_reporter = &micro_error_reporter;
  1101fe:	48 c7 05 5f 5f 01 00 	movq   $0x142918,0x15f5f(%rip)        # 126168 <_ZN12_GLOBAL__N_114error_reporterE>
  110205:	18 29 14 00 

    tensor_arena = (uint8_t *)malloc(tensor_arena_size);
  110209:	bf 20 cb 00 00       	mov    $0xcb20,%edi
  11020e:	e8 6d 32 ff ff       	call   103480 <malloc>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
  110213:	8b 15 87 0b 02 00    	mov    0x20b87(%rip),%edx        # 130da0 <mnist_tflite>
  110219:	48 89 05 20 5f 01 00 	mov    %rax,0x15f20(%rip)        # 126140 <_ZN12_GLOBAL__N_112tensor_arenaE>
    return data_ - ReadScalar<soffset_t>(data_);
  110220:	48 63 8a a0 0d 13 00 	movslq 0x130da0(%rdx),%rcx
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
  110227:	48 8d 82 a0 0d 13 00 	lea    0x130da0(%rdx),%rax

    model = tflite::GetModel(mnist_tflite);
  11022e:	48 89 05 2b 5f 01 00 	mov    %rax,0x15f2b(%rip)        # 126160 <_ZN12_GLOBAL__N_15modelE>
    return data_ - ReadScalar<soffset_t>(data_);
  110235:	48 29 c8             	sub    %rcx,%rax
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
  110238:	66 83 38 04          	cmpw   $0x4,(%rax)
  11023c:	76 13                	jbe    110251 <setup+0x7f>
  11023e:	0f b7 40 04          	movzwl 0x4(%rax),%eax
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  110242:	66 85 c0             	test   %ax,%ax
  110245:	74 0a                	je     110251 <setup+0x7f>
    if (model->version() != TFLITE_SCHEMA_VERSION) {
  110247:	83 bc 02 a0 0d 13 00 	cmpl   $0x3,0x130da0(%rdx,%rax,1)
  11024e:	03 
  11024f:	74 0c                	je     11025d <setup+0x8b>
        printf("Error loading the TFLite model\n");
  110251:	bf 2d e1 11 00       	mov    $0x11e12d,%edi
  110256:	e8 d5 3e ff ff       	call   104130 <puts>
        while(1);
  11025b:	eb fe                	jmp    11025b <setup+0x89>
    }

    resolver.AddFullyConnected();
  11025d:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  110261:	e8 b2 71 00 00       	call   117418 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED, registration,
  110266:	b9 2f 40 11 00       	mov    $0x11402f,%ecx
  11026b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  11026f:	be 09 00 00 00       	mov    $0x9,%esi
  110274:	bf 80 21 12 00       	mov    $0x122180,%edi
  110279:	e8 ba cf ff ff       	call   10d238 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
  11027e:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  110282:	e8 4f 64 00 00       	call   1166d6 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
    return AddBuiltin(BuiltinOperator_DEPTHWISE_CONV_2D,
  110287:	b9 f0 3e 11 00       	mov    $0x113ef0,%ecx
  11028c:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  110290:	be 04 00 00 00       	mov    $0x4,%esi
  110295:	bf 80 21 12 00       	mov    $0x122180,%edi
  11029a:	e8 99 cf ff ff       	call   10d238 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
    resolver.AddDepthwiseConv2D();
    resolver.AddConv2D();
  11029f:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  1102a3:	e8 f0 52 00 00       	call   115598 <_ZN6tflite16Register_CONV_2DEv>
    return AddBuiltin(BuiltinOperator_CONV_2D, registration, ParseConv2D);
  1102a8:	b9 c4 3d 11 00       	mov    $0x113dc4,%ecx
  1102ad:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  1102b1:	be 03 00 00 00       	mov    $0x3,%esi
  1102b6:	bf 80 21 12 00       	mov    $0x122180,%edi
  1102bb:	e8 78 cf ff ff       	call   10d238 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
                      tflite::Register_MAX_POOL_2D(), ParsePool);
  1102c0:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  1102c4:	e8 6f 74 00 00       	call   117738 <_ZN6tflite20Register_MAX_POOL_2DEv>
    return AddBuiltin(BuiltinOperator_MAX_POOL_2D,
  1102c9:	b9 60 41 11 00       	mov    $0x114160,%ecx
  1102ce:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  1102d2:	be 11 00 00 00       	mov    $0x11,%esi
  1102d7:	bf 80 21 12 00       	mov    $0x122180,%edi
  1102dc:	e8 57 cf ff ff       	call   10d238 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
  1102e1:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
  1102e5:	e8 ea 86 00 00       	call   1189d4 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
    return AddBuiltin(BuiltinOperator_RESHAPE,
  1102ea:	b9 d2 3c 11 00       	mov    $0x113cd2,%ecx
  1102ef:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  1102f3:	be 16 00 00 00       	mov    $0x16,%esi
  1102f8:	bf 80 21 12 00       	mov    $0x122180,%edi
  1102fd:	e8 36 cf ff ff       	call   10d238 <_ZN6tflite22MicroMutableOpResolverILj5EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
    resolver.AddMaxPool2D();
    resolver.AddReshape();

    static tflite::MicroInterpreter static_interpreter(
        model, resolver, tensor_arena, tensor_arena_size, error_reporter);
  110302:	80 3d 27 5e 01 00 00 	cmpb   $0x0,0x15e27(%rip)        # 126130 <_ZGVZ5setupE18static_interpreter>
  110309:	75 4a                	jne    110355 <setup+0x183>
  11030b:	50                   	push   %rax
  11030c:	ba 80 21 12 00       	mov    $0x122180,%edx
  110311:	bf 40 20 12 00       	mov    $0x122040,%edi
  110316:	41 b8 20 cb 00 00    	mov    $0xcb20,%r8d
  11031c:	6a 00                	push   $0x0
  11031e:	48 8b 0d 1b 5e 01 00 	mov    0x15e1b(%rip),%rcx        # 126140 <_ZN12_GLOBAL__N_112tensor_arenaE>
  110325:	48 8b 35 34 5e 01 00 	mov    0x15e34(%rip),%rsi        # 126160 <_ZN12_GLOBAL__N_15modelE>
  11032c:	4c 8b 0d 35 5e 01 00 	mov    0x15e35(%rip),%r9        # 126168 <_ZN12_GLOBAL__N_114error_reporterE>
  110333:	e8 50 da ff ff       	call   10dd88 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhmPNS_13ErrorReporterEPNS_13MicroProfilerE>
  110338:	5a                   	pop    %rdx
  110339:	be 40 20 12 00       	mov    $0x122040,%esi
  11033e:	59                   	pop    %rcx
  11033f:	ba 70 61 12 00       	mov    $0x126170,%edx
  110344:	bf 0c df 10 00       	mov    $0x10df0c,%edi
  110349:	c6 05 e0 5d 01 00 01 	movb   $0x1,0x15de0(%rip)        # 126130 <_ZGVZ5setupE18static_interpreter>
  110350:	e8 9f 01 00 00       	call   1104f4 <__cxa_atexit>

    interpreter = &static_interpreter;
  110355:	48 c7 05 f8 5d 01 00 	movq   $0x122040,0x15df8(%rip)        # 126158 <_ZN12_GLOBAL__N_111interpreterE>
  11035c:	40 20 12 00 

    TfLiteStatus allocate_status = interpreter->AllocateTensors();
  110360:	bf 40 20 12 00       	mov    $0x122040,%edi
  110365:	e8 3c df ff ff       	call   10e2a6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
    if (allocate_status != kTfLiteOk) {
  11036a:	85 c0                	test   %eax,%eax
  11036c:	74 0c                	je     11037a <setup+0x1a8>
        printf("Error allocating the tensors\n");
  11036e:	bf 4c e1 11 00       	mov    $0x11e14c,%edi
  110373:	e8 b8 3d ff ff       	call   104130 <puts>
        while(1);
  110378:	eb fe                	jmp    110378 <setup+0x1a6>
    }

    input = interpreter->input(0);
  11037a:	48 8b 3d d7 5d 01 00 	mov    0x15dd7(%rip),%rdi        # 126158 <_ZN12_GLOBAL__N_111interpreterE>
  110381:	31 f6                	xor    %esi,%esi
  110383:	e8 d4 da ff ff       	call   10de5c <_ZN6tflite16MicroInterpreter5inputEm>
    output = interpreter->output(0);
  110388:	48 8b 3d c9 5d 01 00 	mov    0x15dc9(%rip),%rdi        # 126158 <_ZN12_GLOBAL__N_111interpreterE>
  11038f:	31 f6                	xor    %esi,%esi
    input = interpreter->input(0);
  110391:	48 89 05 b8 5d 01 00 	mov    %rax,0x15db8(%rip)        # 126150 <_ZN12_GLOBAL__N_15inputE>
    output = interpreter->output(0);
  110398:	e8 29 db ff ff       	call   10dec6 <_ZN6tflite16MicroInterpreter6outputEm>
  11039d:	48 89 05 a4 5d 01 00 	mov    %rax,0x15da4(%rip)        # 126148 <_ZN12_GLOBAL__N_16outputE>

    const auto* o_quantization = reinterpret_cast<TfLiteAffineQuantization*>(output->quantization.params);
  1103a4:	48 8b 40 58          	mov    0x58(%rax),%rax
    o_scale      = o_quantization->scale->data[0];
  1103a8:	48 8b 10             	mov    (%rax),%rdx
    o_zero_point = o_quantization->zero_point->data[0];
  1103ab:	48 8b 40 08          	mov    0x8(%rax),%rax
    o_scale      = o_quantization->scale->data[0];
  1103af:	f3 0f 10 42 04       	movss  0x4(%rdx),%xmm0
    o_zero_point = o_quantization->zero_point->data[0];
  1103b4:	8b 40 04             	mov    0x4(%rax),%eax
    o_scale      = o_quantization->scale->data[0];
  1103b7:	f3 0f 11 05 85 5e 01 	movss  %xmm0,0x15e85(%rip)        # 126244 <_ZN12_GLOBAL__N_17o_scaleE>
  1103be:	00 
    o_zero_point = o_quantization->zero_point->data[0];
  1103bf:	89 05 7b 5e 01 00    	mov    %eax,0x15e7b(%rip)        # 126240 <_ZN12_GLOBAL__N_112o_zero_pointE>
}
  1103c5:	c9                   	leave  
  1103c6:	c3                   	ret    

00000000001103c7 <loop>:


void loop(void) {
  1103c7:	55                   	push   %rbp
    for(int i = 0; i < g_test_len; i++) {
        input->data.int8[i] = g_test[i];
  1103c8:	48 8b 35 81 5d 01 00 	mov    0x15d81(%rip),%rsi        # 126150 <_ZN12_GLOBAL__N_15inputE>
  1103cf:	31 c0                	xor    %eax,%eax
void loop(void) {
  1103d1:	48 89 e5             	mov    %rsp,%rbp
        input->data.int8[i] = g_test[i];
  1103d4:	8a 88 80 0a 13 00    	mov    0x130a80(%rax),%cl
  1103da:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  1103de:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
    for(int i = 0; i < g_test_len; i++) {
  1103e1:	48 ff c0             	inc    %rax
  1103e4:	48 3d 10 03 00 00    	cmp    $0x310,%rax
  1103ea:	75 e8                	jne    1103d4 <loop+0xd>
    }

    TfLiteStatus invoke_status = interpreter->Invoke();
  1103ec:	48 8b 3d 65 5d 01 00 	mov    0x15d65(%rip),%rdi        # 126158 <_ZN12_GLOBAL__N_111interpreterE>
  1103f3:	e8 9a e1 ff ff       	call   10e592 <_ZN6tflite16MicroInterpreter6InvokeEv>
    if (invoke_status != kTfLiteOk) {
  1103f8:	85 c0                	test   %eax,%eax
  1103fa:	74 0c                	je     110408 <loop+0x41>
        printf("Error running model inference\n");
  1103fc:	bf 69 e1 11 00       	mov    $0x11e169,%edi
  110401:	e8 2a 3d ff ff       	call   104130 <puts>
        while(1);
  110406:	eb fe                	jmp    110406 <loop+0x3f>

    size_t ix_max = 0;
    float  pb_max = 0;
    for (size_t ix = 0; ix < 10; ix++) {
        int8_t out_val = output->data.int8[ix];
        float  pb = ((float)out_val - o_zero_point) * o_scale;
  110408:	f3 0f 2a 1d 30 5e 01 	cvtsi2ssl 0x15e30(%rip),%xmm3        # 126240 <_ZN12_GLOBAL__N_112o_zero_pointE>
  11040f:	00 
        int8_t out_val = output->data.int8[ix];
  110410:	48 8b 05 31 5d 01 00 	mov    0x15d31(%rip),%rax        # 126148 <_ZN12_GLOBAL__N_16outputE>
    float  pb_max = 0;
  110417:	0f 57 c9             	xorps  %xmm1,%xmm1
    size_t ix_max = 0;
  11041a:	31 d2                	xor    %edx,%edx
        float  pb = ((float)out_val - o_zero_point) * o_scale;
  11041c:	f3 0f 10 15 20 5e 01 	movss  0x15e20(%rip),%xmm2        # 126244 <_ZN12_GLOBAL__N_17o_scaleE>
  110423:	00 
        int8_t out_val = output->data.int8[ix];
  110424:	48 8b 70 08          	mov    0x8(%rax),%rsi
    for (size_t ix = 0; ix < 10; ix++) {
  110428:	31 c0                	xor    %eax,%eax
        float  pb = ((float)out_val - o_zero_point) * o_scale;
  11042a:	0f be 0c 06          	movsbl (%rsi,%rax,1),%ecx
  11042e:	f3 0f 2a c1          	cvtsi2ss %ecx,%xmm0
  110432:	f3 0f 5c c3          	subss  %xmm3,%xmm0
  110436:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
        if(pb > pb_max) {
  11043a:	0f 2f c1             	comiss %xmm1,%xmm0
  11043d:	f3 0f 5f c1          	maxss  %xmm1,%xmm0
  110441:	48 0f 47 d0          	cmova  %rax,%rdx
    for (size_t ix = 0; ix < 10; ix++) {
  110445:	48 ff c0             	inc    %rax
  110448:	0f 28 c8             	movaps %xmm0,%xmm1
  11044b:	48 83 f8 0a          	cmp    $0xa,%rax
  11044f:	75 d9                	jne    11042a <loop+0x63>
    }
    else {
        printf("WRONG classification! %s\n", label[ix_max]);
    }
*/
	printf("Digit: %s\n", label[ix_max]);
  110451:	48 8b 34 d5 e0 c6 11 	mov    0x11c6e0(,%rdx,8),%rsi
  110458:	00 
  110459:	bf 87 e1 11 00       	mov    $0x11e187,%edi
  11045e:	31 c0                	xor    %eax,%eax
}
  110460:	5d                   	pop    %rbp
	printf("Digit: %s\n", label[ix_max]);
  110461:	e9 4a 3b ff ff       	jmp    103fb0 <printf>

0000000000110466 <_GLOBAL__sub_I_mnist_tflite>:
      : error_reporter_(error_reporter) {}
  110466:	31 d2                	xor    %edx,%edx
  110468:	31 c0                	xor    %eax,%eax
    tflite::MicroMutableOpResolver<5> resolver;
  11046a:	be 80 21 12 00       	mov    $0x122180,%esi
  11046f:	bf 70 d1 10 00       	mov    $0x10d170,%edi
  110474:	48 89 15 95 1e 01 00 	mov    %rdx,0x11e95(%rip)        # 122310 <_ZN12_GLOBAL__N_18resolverE+0x190>
  11047b:	ba 70 61 12 00       	mov    $0x126170,%edx
  110480:	48 c7 05 f5 1c 01 00 	movq   $0x11d310,0x11cf5(%rip)        # 122180 <_ZN12_GLOBAL__N_18resolverE>
  110487:	10 d3 11 00 
  11048b:	89 05 37 1e 01 00    	mov    %eax,0x11e37(%rip)        # 1222c8 <_ZN12_GLOBAL__N_18resolverE+0x148>
  110491:	89 05 71 1e 01 00    	mov    %eax,0x11e71(%rip)        # 122308 <_ZN12_GLOBAL__N_18resolverE+0x188>
  110497:	e9 58 00 00 00       	jmp    1104f4 <__cxa_atexit>

000000000011049c <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
  11049c:	55                   	push   %rbp
  11049d:	48 89 e5             	mov    %rsp,%rbp
	__do_global_ctors_aux();
  1104a0:	e8 26 00 00 00       	call   1104cb <__do_global_ctors_aux>
	__do_init_array_aux();
}
  1104a5:	5d                   	pop    %rbp
	__do_init_array_aux();
  1104a6:	e9 00 00 00 00       	jmp    1104ab <__do_init_array_aux>

00000000001104ab <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
  1104ab:	55                   	push   %rbp
  1104ac:	48 89 e5             	mov    %rsp,%rbp
  1104af:	53                   	push   %rbx
	for (func_ptr *func = __zephyr_init_array_start;
  1104b0:	bb 28 c1 11 00       	mov    $0x11c128,%ebx
{
  1104b5:	52                   	push   %rdx
		func < __zephyr_init_array_end;
  1104b6:	48 81 fb 40 c1 11 00 	cmp    $0x11c140,%rbx
  1104bd:	73 08                	jae    1104c7 <__do_init_array_aux+0x1c>
		func++) {
		(*func)();
  1104bf:	ff 13                	call   *(%rbx)
		func++) {
  1104c1:	48 83 c3 08          	add    $0x8,%rbx
  1104c5:	eb ef                	jmp    1104b6 <__do_init_array_aux+0xb>
	}
}
  1104c7:	58                   	pop    %rax
  1104c8:	5b                   	pop    %rbx
  1104c9:	5d                   	pop    %rbp
  1104ca:	c3                   	ret    

00000000001104cb <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
  1104cb:	55                   	push   %rbp
  1104cc:	48 89 e5             	mov    %rsp,%rbp
  1104cf:	53                   	push   %rbx
  1104d0:	52                   	push   %rdx
  1104d1:	8b 05 39 bc 00 00    	mov    0xbc39(%rip),%eax        # 11c110 <__ZEPHYR_CTOR_LIST__>
  1104d7:	48 8d 1c c5 10 c1 11 	lea    0x11c110(,%rax,8),%rbx
  1104de:	00 
	unsigned int nCtors;

	nCtors = (unsigned long)__ZEPHYR_CTOR_LIST__[0];

	while (nCtors >= 1U) {
  1104df:	48 81 fb 10 c1 11 00 	cmp    $0x11c110,%rbx
  1104e6:	74 08                	je     1104f0 <__do_global_ctors_aux+0x25>
		__ZEPHYR_CTOR_LIST__[nCtors--]();
  1104e8:	ff 13                	call   *(%rbx)
  1104ea:	48 83 eb 08          	sub    $0x8,%rbx
  1104ee:	eb ef                	jmp    1104df <__do_global_ctors_aux+0x14>
	}
}
  1104f0:	58                   	pop    %rax
  1104f1:	5b                   	pop    %rbx
  1104f2:	5d                   	pop    %rbp
  1104f3:	c3                   	ret    

00000000001104f4 <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
  1104f4:	31 c0                	xor    %eax,%eax
  1104f6:	c3                   	ret    

00000000001104f7 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
  1104f7:	ff 25 23 24 03 00    	jmp    *0x32423(%rip)        # 142920 <_char_out>

00000000001104fd <__printk_hook_install>:
	_char_out = fn;
  1104fd:	48 89 3d 1c 24 03 00 	mov    %rdi,0x3241c(%rip)        # 142920 <_char_out>
}
  110504:	c3                   	ret    

0000000000110505 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
  110505:	55                   	push   %rbp
  110506:	48 89 e5             	mov    %rsp,%rbp
  110509:	41 56                	push   %r14
  11050b:	41 55                	push   %r13
  11050d:	49 89 f5             	mov    %rsi,%r13
  110510:	41 54                	push   %r12
  110512:	49 89 fc             	mov    %rdi,%r12
  110515:	53                   	push   %rbx

static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	unsigned long key;

	__asm__ volatile ("pushfq; cli; popq %0" : "=g" (key) : : "memory");
  110516:	9c                   	pushf  
  110517:	fa                   	cli    
  110518:	41 5e                	pop    %r14
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
  11051a:	31 db                	xor    %ebx,%ebx
  11051c:	ba 01 00 00 00       	mov    $0x1,%edx
  110521:	48 89 d8             	mov    %rbx,%rax
  110524:	f0 48 0f b1 15 4b 5c 	lock cmpxchg %rdx,0x15c4b(%rip)        # 126178 <lock>
  11052b:	01 00 
	 */
	k.key = arch_irq_lock();

	z_spinlock_validate_pre(l);
#ifdef CONFIG_SMP
	while (!atomic_cas(&l->locked, 0, 1)) {
  11052d:	74 07                	je     110536 <vprintk+0x31>
		arch_spin_relax();
  11052f:	e8 7c 89 00 00       	call   118eb0 <arch_spin_relax>
  110534:	eb e6                	jmp    11051c <vprintk+0x17>
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
  110536:	45 31 c0             	xor    %r8d,%r8d
  110539:	4c 89 e9             	mov    %r13,%rcx
  11053c:	4c 89 e2             	mov    %r12,%rdx
  11053f:	31 f6                	xor    %esi,%esi
  110541:	bf f7 04 11 00       	mov    $0x1104f7,%edi
  110546:	e8 f7 06 00 00       	call   110c42 <z_cbvprintf_impl>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
  11054b:	48 87 1d 26 5c 01 00 	xchg   %rbx,0x15c26(%rip)        # 126178 <lock>

#endif /* CONFIG_PCIE_MSI */

static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  110552:	41 0f ba e6 09       	bt     $0x9,%r14d
  110557:	73 01                	jae    11055a <vprintk+0x55>
		__asm__ volatile ("sti" ::: "memory");
  110559:	fb                   	sti    

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
  11055a:	5b                   	pop    %rbx
  11055b:	41 5c                	pop    %r12
  11055d:	41 5d                	pop    %r13
  11055f:	41 5e                	pop    %r14
  110561:	5d                   	pop    %rbp
  110562:	c3                   	ret    

0000000000110563 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
  110563:	55                   	push   %rbp
  110564:	48 89 e5             	mov    %rsp,%rbp
  110567:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  11056e:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  110575:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  11057c:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  110583:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  11058a:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  110591:	84 c0                	test   %al,%al
  110593:	74 20                	je     1105b5 <printk+0x52>
  110595:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  110599:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  11059d:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  1105a1:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  1105a5:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  1105a9:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  1105ad:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  1105b1:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
	va_list ap;

	va_start(ap, fmt);
  1105b5:	48 8d 45 10          	lea    0x10(%rbp),%rax

	vprintk(fmt, ap);
  1105b9:	48 8d b5 38 ff ff ff 	lea    -0xc8(%rbp),%rsi
	va_start(ap, fmt);
  1105c0:	c7 85 38 ff ff ff 08 	movl   $0x8,-0xc8(%rbp)
  1105c7:	00 00 00 
  1105ca:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  1105d1:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  1105d8:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  1105df:	00 00 00 
  1105e2:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	vprintk(fmt, ap);
  1105e9:	e8 17 ff ff ff       	call   110505 <vprintk>

	va_end(ap);
}
  1105ee:	c9                   	leave  
  1105ef:	c3                   	ret    

00000000001105f0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
  1105f0:	55                   	push   %rbp
  1105f1:	48 89 f8             	mov    %rdi,%rax
  1105f4:	48 89 f7             	mov    %rsi,%rdi
  1105f7:	48 89 d6             	mov    %rdx,%rsi
  1105fa:	48 89 ca             	mov    %rcx,%rdx
  1105fd:	48 89 e5             	mov    %rsp,%rbp
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
  110600:	ff d0                	call   *%rax
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_Z_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_z_current_get();
  110602:	e8 89 8d 00 00       	call   119390 <z_impl_z_current_get>
  110607:	48 89 c7             	mov    %rax,%rdi
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
  11060a:	e8 6b 9b 00 00       	call   11a17a <z_impl_k_thread_abort>

000000000011060f <setup_bundle_data.constprop.0>:

static void setup_bundle_data(sys_bitarray_t *bitarray,
			      struct bundle_data *bd,
			      size_t offset, size_t num_bits)
{
	bd->sidx = offset / bundle_bitness(bitarray);
  11060f:	49 89 f1             	mov    %rsi,%r9
	bd->soff = offset % bundle_bitness(bitarray);
  110612:	48 89 f1             	mov    %rsi,%rcx
static void setup_bundle_data(sys_bitarray_t *bitarray,
  110615:	48 89 f8             	mov    %rdi,%rax
	bd->soff = offset % bundle_bitness(bitarray);
  110618:	83 e1 1f             	and    $0x1f,%ecx
	bd->sidx = offset / bundle_bitness(bitarray);
  11061b:	49 c1 e9 05          	shr    $0x5,%r9
	bd->soff = offset % bundle_bitness(bitarray);
  11061f:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
	bd->sidx = offset / bundle_bitness(bitarray);
  110623:	4c 89 0f             	mov    %r9,(%rdi)

	bd->eidx = (offset + num_bits - 1) / bundle_bitness(bitarray);
  110626:	48 8d 7c 16 ff       	lea    -0x1(%rsi,%rdx,1),%rdi
	bd->eoff = (offset + num_bits - 1) % bundle_bitness(bitarray);

	bd->smask = ~(BIT(bd->soff) - 1);
  11062b:	be 01 00 00 00       	mov    $0x1,%esi
	bd->eidx = (offset + num_bits - 1) / bundle_bitness(bitarray);
  110630:	49 89 f8             	mov    %rdi,%r8
	bd->smask = ~(BIT(bd->soff) - 1);
  110633:	48 89 f2             	mov    %rsi,%rdx
	bd->eoff = (offset + num_bits - 1) % bundle_bitness(bitarray);
  110636:	83 e7 1f             	and    $0x1f,%edi
	bd->smask = ~(BIT(bd->soff) - 1);
  110639:	48 d3 e2             	shl    %cl,%rdx
	bd->emask = (BIT(bd->eoff) - 1) | BIT(bd->eoff);
  11063c:	89 f9                	mov    %edi,%ecx
	bd->eidx = (offset + num_bits - 1) / bundle_bitness(bitarray);
  11063e:	49 c1 e8 05          	shr    $0x5,%r8
	bd->eoff = (offset + num_bits - 1) % bundle_bitness(bitarray);
  110642:	48 89 78 18          	mov    %rdi,0x18(%rax)
	bd->emask = (BIT(bd->eoff) - 1) | BIT(bd->eoff);
  110646:	48 d3 e6             	shl    %cl,%rsi
	bd->smask = ~(BIT(bd->soff) - 1);
  110649:	f7 da                	neg    %edx
	bd->eidx = (offset + num_bits - 1) / bundle_bitness(bitarray);
  11064b:	4c 89 40 08          	mov    %r8,0x8(%rax)
	bd->emask = (BIT(bd->eoff) - 1) | BIT(bd->eoff);
  11064f:	8d 4e ff             	lea    -0x1(%rsi),%ecx
	bd->smask = ~(BIT(bd->soff) - 1);
  110652:	89 50 20             	mov    %edx,0x20(%rax)
	bd->emask = (BIT(bd->eoff) - 1) | BIT(bd->eoff);
  110655:	09 f1                	or     %esi,%ecx
  110657:	89 48 24             	mov    %ecx,0x24(%rax)

	if (bd->sidx == bd->eidx) {
  11065a:	4d 39 c1             	cmp    %r8,%r9
  11065d:	75 05                	jne    110664 <setup_bundle_data.constprop.0+0x55>
		/* The region lies within the same bundle. So combine the masks. */
		bd->smask &= bd->emask;
  11065f:	21 ca                	and    %ecx,%edx
  110661:	89 50 20             	mov    %edx,0x20(%rax)
	}
}
  110664:	c3                   	ret    

0000000000110665 <set_region>:
 *                 prior call to match_region().
 */
static void set_region(sys_bitarray_t *bitarray, size_t offset,
		       size_t num_bits, bool to_set,
		       struct bundle_data *bd)
{
  110665:	55                   	push   %rbp
  110666:	49 89 fa             	mov    %rdi,%r10
  110669:	41 89 cb             	mov    %ecx,%r11d
  11066c:	48 89 e5             	mov    %rsp,%rbp
  11066f:	48 83 ec 30          	sub    $0x30,%rsp
	size_t idx;
	struct bundle_data bdata;

	if (bd == NULL) {
  110673:	4d 85 c0             	test   %r8,%r8
  110676:	75 0d                	jne    110685 <set_region+0x20>
		bd = &bdata;
		setup_bundle_data(bitarray, bd, offset, num_bits);
  110678:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  11067c:	e8 8e ff ff ff       	call   11060f <setup_bundle_data.constprop.0>
		bd = &bdata;
  110681:	4c 8d 45 d8          	lea    -0x28(%rbp),%r8
	}

	if (bd->sidx == bd->eidx) {
		/* Start/end at same bundle */
		if (to_set) {
			bitarray->bundles[bd->sidx] |= bd->smask;
  110685:	49 8b 42 08          	mov    0x8(%r10),%rax
	if (bd->sidx == bd->eidx) {
  110689:	49 8b 30             	mov    (%r8),%rsi
			bitarray->bundles[bd->sidx] |= bd->smask;
  11068c:	41 8b 50 20          	mov    0x20(%r8),%edx
  110690:	48 8d 0c b0          	lea    (%rax,%rsi,4),%rcx
  110694:	8b 01                	mov    (%rcx),%eax
	if (bd->sidx == bd->eidx) {
  110696:	49 3b 70 08          	cmp    0x8(%r8),%rsi
  11069a:	75 12                	jne    1106ae <set_region+0x49>
			bitarray->bundles[bd->sidx] |= bd->smask;
  11069c:	89 d6                	mov    %edx,%esi
  11069e:	f7 d6                	not    %esi
  1106a0:	21 c6                	and    %eax,%esi
  1106a2:	09 d0                	or     %edx,%eax
  1106a4:	45 84 db             	test   %r11b,%r11b
  1106a7:	0f 44 c6             	cmove  %esi,%eax
  1106aa:	89 01                	mov    %eax,(%rcx)
  1106ac:	eb 5f                	jmp    11070d <set_region+0xa8>
		/* Start/end at different bundle.
		 * So set/clear the bits in start and end bundles
		 * separately. For in-between bundles,
		 * set/clear all bits.
		 */
		if (to_set) {
  1106ae:	45 84 db             	test   %r11b,%r11b
  1106b1:	74 2c                	je     1106df <set_region+0x7a>
			bitarray->bundles[bd->sidx] |= bd->smask;
  1106b3:	09 d0                	or     %edx,%eax
  1106b5:	89 01                	mov    %eax,(%rcx)
			bitarray->bundles[bd->eidx] |= bd->emask;
  1106b7:	49 8b 42 08          	mov    0x8(%r10),%rax
  1106bb:	49 8b 50 08          	mov    0x8(%r8),%rdx
  1106bf:	41 8b 48 24          	mov    0x24(%r8),%ecx
  1106c3:	09 0c 90             	or     %ecx,(%rax,%rdx,4)
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
  1106c6:	49 8b 00             	mov    (%r8),%rax
  1106c9:	48 ff c0             	inc    %rax
  1106cc:	49 3b 40 08          	cmp    0x8(%r8),%rax
  1106d0:	73 3b                	jae    11070d <set_region+0xa8>
				bitarray->bundles[idx] = ~0U;
  1106d2:	49 8b 52 08          	mov    0x8(%r10),%rdx
  1106d6:	c7 04 82 ff ff ff ff 	movl   $0xffffffff,(%rdx,%rax,4)
  1106dd:	eb ea                	jmp    1106c9 <set_region+0x64>
			}
		} else {
			bitarray->bundles[bd->sidx] &= ~bd->smask;
  1106df:	f7 d2                	not    %edx
  1106e1:	21 c2                	and    %eax,%edx
  1106e3:	89 11                	mov    %edx,(%rcx)
			bitarray->bundles[bd->eidx] &= ~bd->emask;
  1106e5:	41 8b 40 24          	mov    0x24(%r8),%eax
  1106e9:	49 8b 48 08          	mov    0x8(%r8),%rcx
  1106ed:	49 8b 52 08          	mov    0x8(%r10),%rdx
  1106f1:	f7 d0                	not    %eax
  1106f3:	21 04 8a             	and    %eax,(%rdx,%rcx,4)
			for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
  1106f6:	49 8b 00             	mov    (%r8),%rax
  1106f9:	48 ff c0             	inc    %rax
  1106fc:	49 3b 40 08          	cmp    0x8(%r8),%rax
  110700:	73 0b                	jae    11070d <set_region+0xa8>
				bitarray->bundles[idx] = 0U;
  110702:	49 8b 52 08          	mov    0x8(%r10),%rdx
  110706:	31 c9                	xor    %ecx,%ecx
  110708:	89 0c 82             	mov    %ecx,(%rdx,%rax,4)
  11070b:	eb ec                	jmp    1106f9 <set_region+0x94>
			}
		}
	}
}
  11070d:	c9                   	leave  
  11070e:	c3                   	ret    

000000000011070f <match_region>:
{
  11070f:	55                   	push   %rbp
  110710:	41 89 cb             	mov    %ecx,%r11d
  110713:	48 89 e5             	mov    %rsp,%rbp
  110716:	41 55                	push   %r13
  110718:	49 89 fd             	mov    %rdi,%r13
	setup_bundle_data(bitarray, bd, offset, num_bits);
  11071b:	4c 89 c7             	mov    %r8,%rdi
{
  11071e:	41 54                	push   %r12
  110720:	41 89 cc             	mov    %ecx,%r12d
  110723:	53                   	push   %rbx
  110724:	4c 89 cb             	mov    %r9,%rbx
  110727:	41 52                	push   %r10
  110729:	4d 89 c2             	mov    %r8,%r10
	setup_bundle_data(bitarray, bd, offset, num_bits);
  11072c:	e8 de fe ff ff       	call   11060f <setup_bundle_data.constprop.0>
	if (bd->sidx == bd->eidx) {
  110731:	49 8b 12             	mov    (%r10),%rdx
  110734:	49 8b 72 08          	mov    0x8(%r10),%rsi
  110738:	49 8b 7d 08          	mov    0x8(%r13),%rdi
  11073c:	41 8b 42 20          	mov    0x20(%r10),%eax
  110740:	48 39 f2             	cmp    %rsi,%rdx
		bundle = bitarray->bundles[bd->sidx];
  110743:	8b 0c 97             	mov    (%rdi,%rdx,4),%ecx
	if (bd->sidx == bd->eidx) {
  110746:	75 14                	jne    11075c <match_region+0x4d>
		if (!match_set) {
  110748:	45 84 db             	test   %r11b,%r11b
  11074b:	75 02                	jne    11074f <match_region+0x40>
			bundle = ~bundle;
  11074d:	f7 d1                	not    %ecx
		if ((bundle & bd->smask) != bd->smask) {
  11074f:	89 c7                	mov    %eax,%edi
	return true;
  110751:	40 b6 01             	mov    $0x1,%sil
		if ((bundle & bd->smask) != bd->smask) {
  110754:	21 cf                	and    %ecx,%edi
  110756:	39 f8                	cmp    %edi,%eax
  110758:	75 14                	jne    11076e <match_region+0x5f>
  11075a:	eb 74                	jmp    1107d0 <match_region+0xc1>
	if (!match_set) {
  11075c:	45 84 db             	test   %r11b,%r11b
  11075f:	75 02                	jne    110763 <match_region+0x54>
		bundle = ~bundle;
  110761:	f7 d1                	not    %ecx
	if ((bundle & bd->smask) != bd->smask) {
  110763:	41 89 c0             	mov    %eax,%r8d
  110766:	41 21 c8             	and    %ecx,%r8d
  110769:	44 39 c0             	cmp    %r8d,%eax
  11076c:	74 06                	je     110774 <match_region+0x65>
		mismatch_bundle = ~bundle & bd->smask;
  11076e:	f7 d1                	not    %ecx
  110770:	21 c8                	and    %ecx,%eax
		goto mismatch;
  110772:	eb 3d                	jmp    1107b1 <match_region+0xa2>
	bundle = bitarray->bundles[bd->eidx];
  110774:	8b 04 b7             	mov    (%rdi,%rsi,4),%eax
	if (!match_set) {
  110777:	45 84 db             	test   %r11b,%r11b
  11077a:	75 02                	jne    11077e <match_region+0x6f>
		bundle = ~bundle;
  11077c:	f7 d0                	not    %eax
	if ((bundle & bd->emask) != bd->emask) {
  11077e:	41 8b 4a 24          	mov    0x24(%r10),%ecx
  110782:	41 89 c8             	mov    %ecx,%r8d
  110785:	41 21 c0             	and    %eax,%r8d
  110788:	44 39 c1             	cmp    %r8d,%ecx
  11078b:	74 17                	je     1107a4 <match_region+0x95>
		mismatch_bundle = ~bundle & bd->emask;
  11078d:	f7 d0                	not    %eax
		goto mismatch;
  11078f:	48 89 f2             	mov    %rsi,%rdx
		mismatch_bundle = ~bundle & bd->emask;
  110792:	21 c8                	and    %ecx,%eax
		goto mismatch;
  110794:	eb 1b                	jmp    1107b1 <match_region+0xa2>
		bundle = bitarray->bundles[idx];
  110796:	8b 04 97             	mov    (%rdi,%rdx,4),%eax
		if (match_set) {
  110799:	45 84 e4             	test   %r12b,%r12b
  11079c:	74 02                	je     1107a0 <match_region+0x91>
			bundle = ~bundle;
  11079e:	f7 d0                	not    %eax
		if (bundle != 0U) {
  1107a0:	85 c0                	test   %eax,%eax
  1107a2:	75 0d                	jne    1107b1 <match_region+0xa2>
	for (idx = bd->sidx + 1; idx < bd->eidx; idx++) {
  1107a4:	48 ff c2             	inc    %rdx
  1107a7:	48 39 f2             	cmp    %rsi,%rdx
  1107aa:	72 ea                	jb     110796 <match_region+0x87>
	return true;
  1107ac:	40 b6 01             	mov    $0x1,%sil
  1107af:	eb 1f                	jmp    1107d0 <match_region+0xc1>
	if (mismatch != NULL) {
  1107b1:	48 85 db             	test   %rbx,%rbx
  1107b4:	75 04                	jne    1107ba <match_region+0xab>
	return false;
  1107b6:	31 f6                	xor    %esi,%esi
  1107b8:	eb 16                	jmp    1107d0 <match_region+0xc1>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
  1107ba:	0f bc c0             	bsf    %eax,%eax
		mismatch_bit_off = find_lsb_set(mismatch_bundle) - 1;
  1107bd:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
  1107c2:	0f 44 c1             	cmove  %ecx,%eax
		mismatch_bit_off += mismatch_bundle_idx *
  1107c5:	48 c1 e2 05          	shl    $0x5,%rdx
		*mismatch = (uint32_t)mismatch_bit_off;
  1107c9:	01 d0                	add    %edx,%eax
  1107cb:	48 89 03             	mov    %rax,(%rbx)
  1107ce:	eb e6                	jmp    1107b6 <match_region+0xa7>
}
  1107d0:	5a                   	pop    %rdx
  1107d1:	89 f0                	mov    %esi,%eax
  1107d3:	5b                   	pop    %rbx
  1107d4:	41 5c                	pop    %r12
  1107d6:	41 5d                	pop    %r13
  1107d8:	5d                   	pop    %rbp
  1107d9:	c3                   	ret    

00000000001107da <atomic_clear.isra.0>:
  1107da:	31 c0                	xor    %eax,%eax
  1107dc:	48 87 07             	xchg   %rax,(%rdi)
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_clear(atomic_t *target)
{
	return atomic_set(target, 0);
}
  1107df:	c3                   	ret    

00000000001107e0 <set_clear_region>:
	return is_region_set_clear(bitarray, num_bits, offset, false);
}

static int set_clear_region(sys_bitarray_t *bitarray, size_t num_bits,
			    size_t offset, bool to_set)
{
  1107e0:	55                   	push   %rbp
  1107e1:	48 89 e5             	mov    %rsp,%rbp
  1107e4:	41 57                	push   %r15
  1107e6:	41 56                	push   %r14
  1107e8:	41 55                	push   %r13
  1107ea:	41 54                	push   %r12
  1107ec:	41 89 cc             	mov    %ecx,%r12d
  1107ef:	53                   	push   %rbx
  1107f0:	48 89 f3             	mov    %rsi,%rbx
  1107f3:	48 89 d6             	mov    %rdx,%rsi
	int ret;
	size_t off_end = offset + num_bits - 1;
  1107f6:	4c 8d 7c 13 ff       	lea    -0x1(%rbx,%rdx,1),%r15
{
  1107fb:	48 83 ec 18          	sub    $0x18,%rsp
  1107ff:	9c                   	pushf  
  110800:	fa                   	cli    
  110801:	41 5e                	pop    %r14
	while (!atomic_cas(&l->locked, 0, 1)) {
  110803:	4c 8d 6f 10          	lea    0x10(%rdi),%r13
	return __atomic_compare_exchange_n(target, &old_value, new_value,
  110807:	31 c0                	xor    %eax,%eax
  110809:	ba 01 00 00 00       	mov    $0x1,%edx
  11080e:	f0 49 0f b1 55 00    	lock cmpxchg %rdx,0x0(%r13)
  110814:	74 17                	je     11082d <set_clear_region+0x4d>
  110816:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  11081a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
		arch_spin_relax();
  11081e:	e8 8d 86 00 00       	call   118eb0 <arch_spin_relax>
  110823:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  110827:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  11082b:	eb da                	jmp    110807 <set_clear_region+0x27>

	if ((num_bits == 0)
	    || (num_bits > bitarray->num_bits)
	    || (offset >= bitarray->num_bits)
	    || (off_end >= bitarray->num_bits)) {
		ret = -EINVAL;
  11082d:	ba ea ff ff ff       	mov    $0xffffffea,%edx
	if ((num_bits == 0)
  110832:	48 85 db             	test   %rbx,%rbx
  110835:	74 2f                	je     110866 <set_clear_region+0x86>
	    || (num_bits > bitarray->num_bits)
  110837:	8b 07                	mov    (%rdi),%eax
	    || (offset >= bitarray->num_bits)
  110839:	48 39 c6             	cmp    %rax,%rsi
  11083c:	0f 93 c2             	setae  %dl
	    || (num_bits > bitarray->num_bits)
  11083f:	48 39 d8             	cmp    %rbx,%rax
  110842:	0f 92 c1             	setb   %cl
	    || (off_end >= bitarray->num_bits)) {
  110845:	08 ca                	or     %cl,%dl
  110847:	75 18                	jne    110861 <set_clear_region+0x81>
  110849:	49 39 c7             	cmp    %rax,%r15
  11084c:	73 13                	jae    110861 <set_clear_region+0x81>
		goto out;
	}

	set_region(bitarray, offset, num_bits, to_set, NULL);
  11084e:	48 89 da             	mov    %rbx,%rdx
  110851:	41 0f b6 cc          	movzbl %r12b,%ecx
  110855:	45 31 c0             	xor    %r8d,%r8d
  110858:	e8 08 fe ff ff       	call   110665 <set_region>
	ret = 0;
  11085d:	31 d2                	xor    %edx,%edx
  11085f:	eb 05                	jmp    110866 <set_clear_region+0x86>
		ret = -EINVAL;
  110861:	ba ea ff ff ff       	mov    $0xffffffea,%edx
	 * setting a zero and (because we hold the lock) know the existing
	 * state won't change due to a race.  But some architectures need
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
  110866:	4c 89 ef             	mov    %r13,%rdi
  110869:	e8 6c ff ff ff       	call   1107da <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11086e:	41 0f ba e6 09       	bt     $0x9,%r14d
  110873:	73 01                	jae    110876 <set_clear_region+0x96>
		__asm__ volatile ("sti" ::: "memory");
  110875:	fb                   	sti    

out:
	k_spin_unlock(&bitarray->lock, key);
	return ret;
}
  110876:	48 83 c4 18          	add    $0x18,%rsp
  11087a:	89 d0                	mov    %edx,%eax
  11087c:	5b                   	pop    %rbx
  11087d:	41 5c                	pop    %r12
  11087f:	41 5d                	pop    %r13
  110881:	41 5e                	pop    %r14
  110883:	41 5f                	pop    %r15
  110885:	5d                   	pop    %rbp
  110886:	c3                   	ret    

0000000000110887 <sys_bitarray_alloc>:
{
  110887:	55                   	push   %rbp
  110888:	48 89 e5             	mov    %rsp,%rbp
  11088b:	41 57                	push   %r15
  11088d:	49 89 f7             	mov    %rsi,%r15
  110890:	41 56                	push   %r14
  110892:	41 55                	push   %r13
  110894:	49 89 d5             	mov    %rdx,%r13
  110897:	41 54                	push   %r12
  110899:	53                   	push   %rbx
  11089a:	48 83 ec 48          	sub    $0x48,%rsp
  11089e:	9c                   	pushf  
  11089f:	fa                   	cli    
  1108a0:	8f 45 98             	pop    -0x68(%rbp)
	while (!atomic_cas(&l->locked, 0, 1)) {
  1108a3:	4c 8d 77 10          	lea    0x10(%rdi),%r14
  1108a7:	31 c0                	xor    %eax,%eax
  1108a9:	ba 01 00 00 00       	mov    $0x1,%edx
  1108ae:	f0 49 0f b1 16       	lock cmpxchg %rdx,(%r14)
  1108b3:	74 0f                	je     1108c4 <sys_bitarray_alloc+0x3d>
  1108b5:	48 89 7d 90          	mov    %rdi,-0x70(%rbp)
		arch_spin_relax();
  1108b9:	e8 f2 85 00 00       	call   118eb0 <arch_spin_relax>
  1108be:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  1108c2:	eb e3                	jmp    1108a7 <sys_bitarray_alloc+0x20>
	if ((num_bits == 0) || (num_bits > bitarray->num_bits)) {
  1108c4:	4d 85 ed             	test   %r13,%r13
  1108c7:	0f 84 99 00 00 00    	je     110966 <sys_bitarray_alloc+0xdf>
  1108cd:	4d 85 ff             	test   %r15,%r15
  1108d0:	0f 84 90 00 00 00    	je     110966 <sys_bitarray_alloc+0xdf>
  1108d6:	44 8b 27             	mov    (%rdi),%r12d
		ret = -EINVAL;
  1108d9:	ba ea ff ff ff       	mov    $0xffffffea,%edx
	if ((num_bits == 0) || (num_bits > bitarray->num_bits)) {
  1108de:	4d 39 fc             	cmp    %r15,%r12
  1108e1:	0f 82 84 00 00 00    	jb     11096b <sys_bitarray_alloc+0xe4>
	for (size_t idx = 0; idx < bitarray->num_bundles; idx++) {
  1108e7:	8b 4f 04             	mov    0x4(%rdi),%ecx
  1108ea:	31 d2                	xor    %edx,%edx
  1108ec:	89 d3                	mov    %edx,%ebx
  1108ee:	c1 e3 05             	shl    $0x5,%ebx
  1108f1:	48 39 ca             	cmp    %rcx,%rdx
  1108f4:	73 1c                	jae    110912 <sys_bitarray_alloc+0x8b>
		if (~bitarray->bundles[idx] == 0U) {
  1108f6:	48 8b 47 08          	mov    0x8(%rdi),%rax
  1108fa:	8b 04 90             	mov    (%rax,%rdx,4),%eax
  1108fd:	83 f8 ff             	cmp    $0xffffffff,%eax
  110900:	75 05                	jne    110907 <sys_bitarray_alloc+0x80>
	for (size_t idx = 0; idx < bitarray->num_bundles; idx++) {
  110902:	48 ff c2             	inc    %rdx
  110905:	eb e5                	jmp    1108ec <sys_bitarray_alloc+0x65>
		if (bitarray->bundles[idx] != 0U) {
  110907:	85 c0                	test   %eax,%eax
  110909:	74 07                	je     110912 <sys_bitarray_alloc+0x8b>
			off_start = find_lsb_set(~bitarray->bundles[idx]) - 1;
  11090b:	f7 d0                	not    %eax
  11090d:	0f bc c0             	bsf    %eax,%eax
			bit_idx += off_start;
  110910:	01 c3                	add    %eax,%ebx
	off_end = bitarray->num_bits - num_bits;
  110912:	4d 29 fc             	sub    %r15,%r12
	while (bit_idx <= off_end) {
  110915:	49 39 dc             	cmp    %rbx,%r12
  110918:	72 45                	jb     11095f <sys_bitarray_alloc+0xd8>
		if (match_region(bitarray, bit_idx, num_bits, false,
  11091a:	31 c9                	xor    %ecx,%ecx
  11091c:	4c 8d 4d a0          	lea    -0x60(%rbp),%r9
  110920:	4c 8d 45 a8          	lea    -0x58(%rbp),%r8
  110924:	4c 89 fa             	mov    %r15,%rdx
  110927:	48 89 de             	mov    %rbx,%rsi
  11092a:	48 89 7d 90          	mov    %rdi,-0x70(%rbp)
  11092e:	e8 dc fd ff ff       	call   11070f <match_region>
  110933:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
  110937:	84 c0                	test   %al,%al
  110939:	74 1c                	je     110957 <sys_bitarray_alloc+0xd0>
			set_region(bitarray, bit_idx, num_bits, true, &bd);
  11093b:	4c 89 fa             	mov    %r15,%rdx
  11093e:	4c 8d 45 a8          	lea    -0x58(%rbp),%r8
  110942:	b9 01 00 00 00       	mov    $0x1,%ecx
  110947:	48 89 de             	mov    %rbx,%rsi
  11094a:	e8 16 fd ff ff       	call   110665 <set_region>
			*offset = bit_idx;
  11094f:	49 89 5d 00          	mov    %rbx,0x0(%r13)
			ret = 0;
  110953:	31 d2                	xor    %edx,%edx
			break;
  110955:	eb 14                	jmp    11096b <sys_bitarray_alloc+0xe4>
		bit_idx = mismatch + 1;
  110957:	8b 45 a0             	mov    -0x60(%rbp),%eax
  11095a:	8d 58 01             	lea    0x1(%rax),%ebx
  11095d:	eb b6                	jmp    110915 <sys_bitarray_alloc+0x8e>
	ret = -ENOSPC;
  11095f:	ba e4 ff ff ff       	mov    $0xffffffe4,%edx
out:
  110964:	eb 05                	jmp    11096b <sys_bitarray_alloc+0xe4>
		ret = -EINVAL;
  110966:	ba ea ff ff ff       	mov    $0xffffffea,%edx
	atomic_clear(&l->locked);
  11096b:	4c 89 f7             	mov    %r14,%rdi
  11096e:	e8 67 fe ff ff       	call   1107da <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  110973:	0f ba 65 98 09       	btl    $0x9,-0x68(%rbp)
  110978:	73 01                	jae    11097b <sys_bitarray_alloc+0xf4>
		__asm__ volatile ("sti" ::: "memory");
  11097a:	fb                   	sti    
}
  11097b:	48 83 c4 48          	add    $0x48,%rsp
  11097f:	89 d0                	mov    %edx,%eax
  110981:	5b                   	pop    %rbx
  110982:	41 5c                	pop    %r12
  110984:	41 5d                	pop    %r13
  110986:	41 5e                	pop    %r14
  110988:	41 5f                	pop    %r15
  11098a:	5d                   	pop    %rbp
  11098b:	c3                   	ret    

000000000011098c <sys_bitarray_free>:
{
  11098c:	55                   	push   %rbp
  11098d:	48 89 e5             	mov    %rsp,%rbp
  110990:	41 57                	push   %r15
	size_t off_end = offset + num_bits - 1;
  110992:	4c 8d 7c 16 ff       	lea    -0x1(%rsi,%rdx,1),%r15
{
  110997:	41 56                	push   %r14
  110999:	49 89 d6             	mov    %rdx,%r14
  11099c:	41 55                	push   %r13
  11099e:	41 54                	push   %r12
  1109a0:	49 89 fc             	mov    %rdi,%r12
  1109a3:	53                   	push   %rbx
  1109a4:	48 89 f3             	mov    %rsi,%rbx
  1109a7:	48 83 ec 48          	sub    $0x48,%rsp
  1109ab:	9c                   	pushf  
  1109ac:	fa                   	cli    
  1109ad:	8f 45 98             	pop    -0x68(%rbp)
	while (!atomic_cas(&l->locked, 0, 1)) {
  1109b0:	4c 8d 6f 10          	lea    0x10(%rdi),%r13
  1109b4:	31 c0                	xor    %eax,%eax
  1109b6:	ba 01 00 00 00       	mov    $0x1,%edx
  1109bb:	f0 49 0f b1 55 00    	lock cmpxchg %rdx,0x0(%r13)
  1109c1:	74 07                	je     1109ca <sys_bitarray_free+0x3e>
		arch_spin_relax();
  1109c3:	e8 e8 84 00 00       	call   118eb0 <arch_spin_relax>
  1109c8:	eb ea                	jmp    1109b4 <sys_bitarray_free+0x28>
		ret = -EINVAL;
  1109ca:	ba ea ff ff ff       	mov    $0xffffffea,%edx
	if ((num_bits == 0)
  1109cf:	48 85 db             	test   %rbx,%rbx
  1109d2:	74 59                	je     110a2d <sys_bitarray_free+0xa1>
	    || (num_bits > bitarray->num_bits)
  1109d4:	41 8b 04 24          	mov    (%r12),%eax
	    || (offset >= bitarray->num_bits)
  1109d8:	49 39 c6             	cmp    %rax,%r14
  1109db:	0f 93 c2             	setae  %dl
	    || (num_bits > bitarray->num_bits)
  1109de:	48 39 d8             	cmp    %rbx,%rax
  1109e1:	0f 92 c1             	setb   %cl
	    || (off_end >= bitarray->num_bits)) {
  1109e4:	08 ca                	or     %cl,%dl
  1109e6:	75 40                	jne    110a28 <sys_bitarray_free+0x9c>
  1109e8:	49 39 c7             	cmp    %rax,%r15
  1109eb:	73 3b                	jae    110a28 <sys_bitarray_free+0x9c>
	if (match_region(bitarray, offset, num_bits, true, &bd, NULL)) {
  1109ed:	48 89 da             	mov    %rbx,%rdx
  1109f0:	45 31 c9             	xor    %r9d,%r9d
  1109f3:	4c 8d 45 a8          	lea    -0x58(%rbp),%r8
  1109f7:	b9 01 00 00 00       	mov    $0x1,%ecx
  1109fc:	4c 89 f6             	mov    %r14,%rsi
  1109ff:	4c 89 e7             	mov    %r12,%rdi
  110a02:	e8 08 fd ff ff       	call   11070f <match_region>
		ret = -EFAULT;
  110a07:	ba f2 ff ff ff       	mov    $0xfffffff2,%edx
	if (match_region(bitarray, offset, num_bits, true, &bd, NULL)) {
  110a0c:	84 c0                	test   %al,%al
  110a0e:	74 1d                	je     110a2d <sys_bitarray_free+0xa1>
		set_region(bitarray, offset, num_bits, false, &bd);
  110a10:	48 89 da             	mov    %rbx,%rdx
  110a13:	4c 8d 45 a8          	lea    -0x58(%rbp),%r8
  110a17:	31 c9                	xor    %ecx,%ecx
  110a19:	4c 89 f6             	mov    %r14,%rsi
  110a1c:	4c 89 e7             	mov    %r12,%rdi
  110a1f:	e8 41 fc ff ff       	call   110665 <set_region>
		ret = 0;
  110a24:	31 d2                	xor    %edx,%edx
  110a26:	eb 05                	jmp    110a2d <sys_bitarray_free+0xa1>
		ret = -EINVAL;
  110a28:	ba ea ff ff ff       	mov    $0xffffffea,%edx
	atomic_clear(&l->locked);
  110a2d:	4c 89 ef             	mov    %r13,%rdi
  110a30:	e8 a5 fd ff ff       	call   1107da <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  110a35:	0f ba 65 98 09       	btl    $0x9,-0x68(%rbp)
  110a3a:	73 01                	jae    110a3d <sys_bitarray_free+0xb1>
		__asm__ volatile ("sti" ::: "memory");
  110a3c:	fb                   	sti    
}
  110a3d:	48 83 c4 48          	add    $0x48,%rsp
  110a41:	89 d0                	mov    %edx,%eax
  110a43:	5b                   	pop    %rbx
  110a44:	41 5c                	pop    %r12
  110a46:	41 5d                	pop    %r13
  110a48:	41 5e                	pop    %r14
  110a4a:	41 5f                	pop    %r15
  110a4c:	5d                   	pop    %rbp
  110a4d:	c3                   	ret    

0000000000110a4e <sys_bitarray_test_and_set_region>:

int sys_bitarray_test_and_set_region(sys_bitarray_t *bitarray, size_t num_bits,
				     size_t offset, bool to_set)
{
  110a4e:	55                   	push   %rbp
  110a4f:	48 89 e5             	mov    %rsp,%rbp
  110a52:	41 57                	push   %r15
	struct bundle_data bd;

	__ASSERT_NO_MSG(bitarray != NULL);
	__ASSERT_NO_MSG(bitarray->num_bits > 0);

	size_t off_end = offset + num_bits - 1;
  110a54:	4c 8d 7c 16 ff       	lea    -0x1(%rsi,%rdx,1),%r15
{
  110a59:	41 56                	push   %r14
  110a5b:	41 55                	push   %r13
  110a5d:	41 54                	push   %r12
  110a5f:	49 89 d4             	mov    %rdx,%r12
  110a62:	53                   	push   %rbx
  110a63:	48 89 f3             	mov    %rsi,%rbx
  110a66:	48 83 ec 48          	sub    $0x48,%rsp
  110a6a:	9c                   	pushf  
  110a6b:	fa                   	cli    
  110a6c:	41 5e                	pop    %r14
	while (!atomic_cas(&l->locked, 0, 1)) {
  110a6e:	4c 8d 6f 10          	lea    0x10(%rdi),%r13
  110a72:	31 c0                	xor    %eax,%eax
  110a74:	ba 01 00 00 00       	mov    $0x1,%edx
  110a79:	f0 49 0f b1 55 00    	lock cmpxchg %rdx,0x0(%r13)
  110a7f:	74 15                	je     110a96 <sys_bitarray_test_and_set_region+0x48>
  110a81:	89 4d 94             	mov    %ecx,-0x6c(%rbp)
  110a84:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
		arch_spin_relax();
  110a88:	e8 23 84 00 00       	call   118eb0 <arch_spin_relax>
  110a8d:	8b 4d 94             	mov    -0x6c(%rbp),%ecx
  110a90:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  110a94:	eb dc                	jmp    110a72 <sys_bitarray_test_and_set_region+0x24>

	if ((num_bits == 0)
	    || (num_bits > bitarray->num_bits)
	    || (offset >= bitarray->num_bits)
	    || (off_end >= bitarray->num_bits)) {
		ret = -EINVAL;
  110a96:	ba ea ff ff ff       	mov    $0xffffffea,%edx
	if ((num_bits == 0)
  110a9b:	48 85 db             	test   %rbx,%rbx
  110a9e:	74 61                	je     110b01 <sys_bitarray_test_and_set_region+0xb3>
	    || (num_bits > bitarray->num_bits)
  110aa0:	8b 07                	mov    (%rdi),%eax
	    || (offset >= bitarray->num_bits)
  110aa2:	49 39 c4             	cmp    %rax,%r12
  110aa5:	0f 93 c2             	setae  %dl
	    || (num_bits > bitarray->num_bits)
  110aa8:	48 39 d8             	cmp    %rbx,%rax
  110aab:	40 0f 92 c6          	setb   %sil
	    || (off_end >= bitarray->num_bits)) {
  110aaf:	40 08 f2             	or     %sil,%dl
  110ab2:	75 48                	jne    110afc <sys_bitarray_test_and_set_region+0xae>
  110ab4:	49 39 c7             	cmp    %rax,%r15
  110ab7:	73 43                	jae    110afc <sys_bitarray_test_and_set_region+0xae>
		goto out;
	}

	region_clear = match_region(bitarray, offset, num_bits, !to_set, &bd, NULL);
  110ab9:	44 0f b6 f9          	movzbl %cl,%r15d
  110abd:	83 f1 01             	xor    $0x1,%ecx
  110ac0:	48 89 da             	mov    %rbx,%rdx
  110ac3:	45 31 c9             	xor    %r9d,%r9d
  110ac6:	0f b6 c9             	movzbl %cl,%ecx
  110ac9:	4c 8d 45 a8          	lea    -0x58(%rbp),%r8
  110acd:	4c 89 e6             	mov    %r12,%rsi
  110ad0:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  110ad4:	e8 36 fc ff ff       	call   11070f <match_region>
	if (region_clear) {
		set_region(bitarray, offset, num_bits, to_set, &bd);
		ret = 0;
	} else {
		ret = -EEXIST;
  110ad9:	ba ef ff ff ff       	mov    $0xffffffef,%edx
	if (region_clear) {
  110ade:	84 c0                	test   %al,%al
  110ae0:	74 1f                	je     110b01 <sys_bitarray_test_and_set_region+0xb3>
		set_region(bitarray, offset, num_bits, to_set, &bd);
  110ae2:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
  110ae6:	48 89 da             	mov    %rbx,%rdx
  110ae9:	4c 8d 45 a8          	lea    -0x58(%rbp),%r8
  110aed:	44 89 f9             	mov    %r15d,%ecx
  110af0:	4c 89 e6             	mov    %r12,%rsi
  110af3:	e8 6d fb ff ff       	call   110665 <set_region>
		ret = 0;
  110af8:	31 d2                	xor    %edx,%edx
  110afa:	eb 05                	jmp    110b01 <sys_bitarray_test_and_set_region+0xb3>
		ret = -EINVAL;
  110afc:	ba ea ff ff ff       	mov    $0xffffffea,%edx
	atomic_clear(&l->locked);
  110b01:	4c 89 ef             	mov    %r13,%rdi
  110b04:	e8 d1 fc ff ff       	call   1107da <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  110b09:	41 0f ba e6 09       	bt     $0x9,%r14d
  110b0e:	73 01                	jae    110b11 <sys_bitarray_test_and_set_region+0xc3>
		__asm__ volatile ("sti" ::: "memory");
  110b10:	fb                   	sti    
	}

out:
	k_spin_unlock(&bitarray->lock, key);
	return ret;
}
  110b11:	48 83 c4 48          	add    $0x48,%rsp
  110b15:	89 d0                	mov    %edx,%eax
  110b17:	5b                   	pop    %rbx
  110b18:	41 5c                	pop    %r12
  110b1a:	41 5d                	pop    %r13
  110b1c:	41 5e                	pop    %r14
  110b1e:	41 5f                	pop    %r15
  110b20:	5d                   	pop    %rbp
  110b21:	c3                   	ret    

0000000000110b22 <sys_bitarray_set_region>:

int sys_bitarray_set_region(sys_bitarray_t *bitarray, size_t num_bits,
			    size_t offset)
{
	return set_clear_region(bitarray, num_bits, offset, true);
  110b22:	b9 01 00 00 00       	mov    $0x1,%ecx
  110b27:	e9 b4 fc ff ff       	jmp    1107e0 <set_clear_region>

0000000000110b2c <extract_decimal>:
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
	const char *sp = *str;
  110b2c:	48 8b 17             	mov    (%rdi),%rdx
	size_t val = 0;
  110b2f:	31 c0                	xor    %eax,%eax

	while (isdigit((int)(unsigned char)*sp) != 0) {
  110b31:	48 0f be 0a          	movsbq (%rdx),%rcx
  110b35:	0f b6 f1             	movzbl %cl,%esi
  110b38:	f6 86 c1 ce 11 00 04 	testb  $0x4,0x11cec1(%rsi)
  110b3f:	74 0e                	je     110b4f <extract_decimal+0x23>
		val = 10U * val + *sp++ - '0';
  110b41:	48 6b c0 0a          	imul   $0xa,%rax,%rax
  110b45:	48 ff c2             	inc    %rdx
  110b48:	48 8d 44 08 d0       	lea    -0x30(%rax,%rcx,1),%rax
  110b4d:	eb e2                	jmp    110b31 <extract_decimal+0x5>
	}
	*str = sp;
  110b4f:	48 89 17             	mov    %rdx,(%rdi)
	return val;
}
  110b52:	c3                   	ret    

0000000000110b53 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
  110b53:	49 89 d1             	mov    %rdx,%r9
	bool upcase = isupper((int)conv->specifier) != 0;
  110b56:	0f b6 56 03          	movzbl 0x3(%rsi),%edx
{
  110b5a:	49 89 f8             	mov    %rdi,%r8
  110b5d:	48 89 f7             	mov    %rsi,%rdi
	switch (specifier) {
  110b60:	be 08 00 00 00       	mov    $0x8,%esi
  110b65:	44 8a 92 c1 ce 11 00 	mov    0x11cec1(%rdx),%r10b
	bool upcase = isupper((int)conv->specifier) != 0;
  110b6c:	48 89 d0             	mov    %rdx,%rax
  110b6f:	41 83 e2 03          	and    $0x3,%r10d
	switch (specifier) {
  110b73:	80 fa 6f             	cmp    $0x6f,%dl
  110b76:	74 3d                	je     110bb5 <encode_uint+0x62>
  110b78:	77 05                	ja     110b7f <encode_uint+0x2c>
		return 10;
  110b7a:	80 fa 58             	cmp    $0x58,%dl
  110b7d:	eb 05                	jmp    110b84 <encode_uint+0x31>
	switch (specifier) {
  110b7f:	83 e0 f7             	and    $0xfffffff7,%eax
		return 10;
  110b82:	3c 70                	cmp    $0x70,%al
  110b84:	be 10 00 00 00       	mov    $0x10,%esi
  110b89:	b8 0a 00 00 00       	mov    $0xa,%eax
  110b8e:	48 0f 45 f0          	cmovne %rax,%rsi
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
  110b92:	eb 21                	jmp    110bb5 <encode_uint+0x62>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
  110b94:	44 8d 5a 57          	lea    0x57(%rdx),%r11d
		*--bp = (lsv <= 9) ? ('0' + lsv)
  110b98:	41 80 fa 01          	cmp    $0x1,%r10b
  110b9c:	75 04                	jne    110ba2 <encode_uint+0x4f>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
  110b9e:	44 8d 5a 37          	lea    0x37(%rdx),%r11d
		*--bp = (lsv <= 9) ? ('0' + lsv)
  110ba2:	48 ff c9             	dec    %rcx
  110ba5:	44 88 19             	mov    %r11b,(%rcx)
		value /= radix;
	} while ((value != 0) && (bps < bp));
  110ba8:	49 39 f0             	cmp    %rsi,%r8
  110bab:	72 1c                	jb     110bc9 <encode_uint+0x76>
  110bad:	49 39 c9             	cmp    %rcx,%r9
  110bb0:	73 17                	jae    110bc9 <encode_uint+0x76>
		value /= radix;
  110bb2:	49 89 c0             	mov    %rax,%r8
		unsigned int lsv = (unsigned int)(value % radix);
  110bb5:	4c 89 c0             	mov    %r8,%rax
  110bb8:	31 d2                	xor    %edx,%edx
  110bba:	48 f7 f6             	div    %rsi
		*--bp = (lsv <= 9) ? ('0' + lsv)
  110bbd:	44 8d 5a 30          	lea    0x30(%rdx),%r11d
  110bc1:	48 83 fa 09          	cmp    $0x9,%rdx
  110bc5:	76 db                	jbe    110ba2 <encode_uint+0x4f>
  110bc7:	eb cb                	jmp    110b94 <encode_uint+0x41>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
  110bc9:	f6 07 20             	testb  $0x20,(%rdi)
  110bcc:	74 16                	je     110be4 <encode_uint+0x91>
		if (radix == 8) {
  110bce:	48 83 fe 08          	cmp    $0x8,%rsi
  110bd2:	75 06                	jne    110bda <encode_uint+0x87>
			conv->altform_0 = true;
  110bd4:	80 4f 02 08          	orb    $0x8,0x2(%rdi)
  110bd8:	eb 0a                	jmp    110be4 <encode_uint+0x91>
		} else if (radix == 16) {
  110bda:	48 83 fe 10          	cmp    $0x10,%rsi
  110bde:	75 04                	jne    110be4 <encode_uint+0x91>
			conv->altform_0c = true;
  110be0:	80 4f 02 10          	orb    $0x10,0x2(%rdi)
			;
		}
	}

	return bp;
}
  110be4:	48 89 c8             	mov    %rcx,%rax
  110be7:	c3                   	ret    

0000000000110be8 <outs>:
/* Outline function to emit all characters in [sp, ep). */
static int outs(cbprintf_cb out,
		void *ctx,
		const char *sp,
		const char *ep)
{
  110be8:	55                   	push   %rbp
  110be9:	48 89 e5             	mov    %rsp,%rbp
  110bec:	41 57                	push   %r15
  110bee:	49 89 ff             	mov    %rdi,%r15
  110bf1:	41 56                	push   %r14
  110bf3:	49 89 ce             	mov    %rcx,%r14
  110bf6:	41 55                	push   %r13
  110bf8:	49 89 f5             	mov    %rsi,%r13
  110bfb:	41 54                	push   %r12
  110bfd:	49 89 d4             	mov    %rdx,%r12
  110c00:	53                   	push   %rbx
	size_t count = 0;
  110c01:	31 db                	xor    %ebx,%ebx
{
  110c03:	41 50                	push   %r8

	while ((sp < ep) || ((ep == NULL) && *sp)) {
  110c05:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  110c09:	4c 39 f0             	cmp    %r14,%rax
  110c0c:	73 16                	jae    110c24 <outs+0x3c>
		int rc = out((int)*sp++, ctx);
  110c0e:	31 c0                	xor    %eax,%eax
  110c10:	41 0f be 3c 1c       	movsbl (%r12,%rbx,1),%edi
  110c15:	4c 89 ee             	mov    %r13,%rsi
  110c18:	41 ff d7             	call   *%r15

		if (rc < 0) {
  110c1b:	85 c0                	test   %eax,%eax
  110c1d:	78 17                	js     110c36 <outs+0x4e>
			return rc;
		}
		++count;
  110c1f:	48 ff c3             	inc    %rbx
  110c22:	eb e1                	jmp    110c05 <outs+0x1d>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
  110c24:	4d 85 f6             	test   %r14,%r14
  110c27:	74 04                	je     110c2d <outs+0x45>
	}

	return (int)count;
  110c29:	89 d8                	mov    %ebx,%eax
  110c2b:	eb 09                	jmp    110c36 <outs+0x4e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
  110c2d:	41 80 3c 1c 00       	cmpb   $0x0,(%r12,%rbx,1)
  110c32:	75 da                	jne    110c0e <outs+0x26>
  110c34:	eb f3                	jmp    110c29 <outs+0x41>
}
  110c36:	5a                   	pop    %rdx
  110c37:	5b                   	pop    %rbx
  110c38:	41 5c                	pop    %r12
  110c3a:	41 5d                	pop    %r13
  110c3c:	41 5e                	pop    %r14
  110c3e:	41 5f                	pop    %r15
  110c40:	5d                   	pop    %rbp
  110c41:	c3                   	ret    

0000000000110c42 <z_cbvprintf_impl>:

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
  110c42:	55                   	push   %rbp
  110c43:	49 89 d1             	mov    %rdx,%r9
  110c46:	48 89 e5             	mov    %rsp,%rbp
  110c49:	41 57                	push   %r15
  110c4b:	49 89 cf             	mov    %rcx,%r15
  110c4e:	41 56                	push   %r14
  110c50:	49 89 fe             	mov    %rdi,%r14
  110c53:	41 55                	push   %r13
  110c55:	41 54                	push   %r12
  110c57:	53                   	push   %rbx
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
  110c58:	31 db                	xor    %ebx,%ebx
{
  110c5a:	48 83 ec 68          	sub    $0x68,%rsp
  110c5e:	48 89 75 88          	mov    %rsi,-0x78(%rbp)
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
  110c62:	41 0f be 39          	movsbl (%r9),%edi
  110c66:	40 84 ff             	test   %dil,%dil
  110c69:	0f 84 8d 09 00 00    	je     1115fc <z_cbvprintf_impl+0x9ba>
		if (*fp != '%') {
			OUTC(*fp++);
  110c6f:	4d 8d 61 01          	lea    0x1(%r9),%r12
		if (*fp != '%') {
  110c73:	40 80 ff 25          	cmp    $0x25,%dil
  110c77:	74 09                	je     110c82 <z_cbvprintf_impl+0x40>
			OUTC(*fp++);
  110c79:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  110c7d:	e9 09 06 00 00       	jmp    11128b <z_cbvprintf_impl+0x649>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
  110c82:	31 c0                	xor    %eax,%eax
  110c84:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
  110c88:	b9 08 00 00 00       	mov    $0x8,%ecx
	if (*sp == '%') {
  110c8d:	41 80 79 01 25       	cmpb   $0x25,0x1(%r9)
		} state = {
  110c92:	f3 ab                	rep stos %eax,%es:(%rdi)
	if (*sp == '%') {
  110c94:	75 0d                	jne    110ca3 <z_cbvprintf_impl+0x61>
		conv->specifier = *sp++;
  110c96:	c6 45 c3 25          	movb   $0x25,-0x3d(%rbp)
  110c9a:	4d 8d 61 02          	lea    0x2(%r9),%r12
		return sp;
  110c9e:	e9 e9 02 00 00       	jmp    110f8c <z_cbvprintf_impl+0x34a>
  110ca3:	45 31 d2             	xor    %r10d,%r10d
  110ca6:	31 ff                	xor    %edi,%edi
  110ca8:	31 f6                	xor    %esi,%esi
  110caa:	31 d2                	xor    %edx,%edx
  110cac:	31 c9                	xor    %ecx,%ecx
		switch (*sp) {
  110cae:	41 8a 04 24          	mov    (%r12),%al
  110cb2:	3c 2b                	cmp    $0x2b,%al
  110cb4:	74 54                	je     110d0a <z_cbvprintf_impl+0xc8>
  110cb6:	7f 0a                	jg     110cc2 <z_cbvprintf_impl+0x80>
  110cb8:	3c 20                	cmp    $0x20,%al
  110cba:	74 52                	je     110d0e <z_cbvprintf_impl+0xcc>
  110cbc:	3c 23                	cmp    $0x23,%al
  110cbe:	74 53                	je     110d13 <z_cbvprintf_impl+0xd1>
  110cc0:	eb 08                	jmp    110cca <z_cbvprintf_impl+0x88>
  110cc2:	3c 2d                	cmp    $0x2d,%al
  110cc4:	74 52                	je     110d18 <z_cbvprintf_impl+0xd6>
  110cc6:	3c 30                	cmp    $0x30,%al
  110cc8:	74 52                	je     110d1c <z_cbvprintf_impl+0xda>
  110cca:	45 84 d2             	test   %r10b,%r10b
  110ccd:	74 04                	je     110cd3 <z_cbvprintf_impl+0x91>
  110ccf:	80 4d c0 40          	orb    $0x40,-0x40(%rbp)
  110cd3:	40 84 ff             	test   %dil,%dil
  110cd6:	74 04                	je     110cdc <z_cbvprintf_impl+0x9a>
  110cd8:	80 4d c0 20          	orb    $0x20,-0x40(%rbp)
  110cdc:	40 84 f6             	test   %sil,%sil
  110cdf:	74 04                	je     110ce5 <z_cbvprintf_impl+0xa3>
  110ce1:	80 4d c0 10          	orb    $0x10,-0x40(%rbp)
  110ce5:	84 d2                	test   %dl,%dl
  110ce7:	74 04                	je     110ced <z_cbvprintf_impl+0xab>
  110ce9:	80 4d c0 08          	orb    $0x8,-0x40(%rbp)
  110ced:	84 c9                	test   %cl,%cl
  110cef:	74 04                	je     110cf5 <z_cbvprintf_impl+0xb3>
  110cf1:	80 4d c0 04          	orb    $0x4,-0x40(%rbp)
	if (conv->flag_zero && conv->flag_dash) {
  110cf5:	8a 55 c0             	mov    -0x40(%rbp),%dl
  110cf8:	89 d1                	mov    %edx,%ecx
  110cfa:	83 e1 44             	and    $0x44,%ecx
  110cfd:	80 f9 44             	cmp    $0x44,%cl
  110d00:	75 22                	jne    110d24 <z_cbvprintf_impl+0xe2>
		conv->flag_zero = false;
  110d02:	83 e2 bf             	and    $0xffffffbf,%edx
  110d05:	88 55 c0             	mov    %dl,-0x40(%rbp)
  110d08:	eb 1a                	jmp    110d24 <z_cbvprintf_impl+0xe2>
		switch (*sp) {
  110d0a:	b2 01                	mov    $0x1,%dl
  110d0c:	eb 11                	jmp    110d1f <z_cbvprintf_impl+0xdd>
  110d0e:	40 b6 01             	mov    $0x1,%sil
  110d11:	eb 0c                	jmp    110d1f <z_cbvprintf_impl+0xdd>
  110d13:	40 b7 01             	mov    $0x1,%dil
  110d16:	eb 07                	jmp    110d1f <z_cbvprintf_impl+0xdd>
  110d18:	b1 01                	mov    $0x1,%cl
  110d1a:	eb 03                	jmp    110d1f <z_cbvprintf_impl+0xdd>
  110d1c:	41 b2 01             	mov    $0x1,%r10b
			++sp;
  110d1f:	49 ff c4             	inc    %r12
	} while (loop);
  110d22:	eb 8a                	jmp    110cae <z_cbvprintf_impl+0x6c>
	conv->width_present = true;
  110d24:	80 4d c0 80          	orb    $0x80,-0x40(%rbp)
  110d28:	4c 89 65 90          	mov    %r12,-0x70(%rbp)
	if (*sp == '*') {
  110d2c:	3c 2a                	cmp    $0x2a,%al
  110d2e:	75 09                	jne    110d39 <z_cbvprintf_impl+0xf7>
		conv->width_star = true;
  110d30:	80 4d c1 01          	orb    $0x1,-0x3f(%rbp)
		return ++sp;
  110d34:	49 ff c4             	inc    %r12
  110d37:	eb 3a                	jmp    110d73 <z_cbvprintf_impl+0x131>
	size_t width = extract_decimal(&sp);
  110d39:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  110d3d:	e8 ea fd ff ff       	call   110b2c <extract_decimal>
	if (sp != wp) {
  110d42:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
  110d46:	4c 39 e1             	cmp    %r12,%rcx
  110d49:	74 28                	je     110d73 <z_cbvprintf_impl+0x131>
		conv->width_value = width;
  110d4b:	89 45 c4             	mov    %eax,-0x3c(%rbp)
				      || (width != (size_t)conv->width_value));
  110d4e:	ba 01 00 00 00       	mov    $0x1,%edx
  110d53:	85 c0                	test   %eax,%eax
  110d55:	78 0c                	js     110d63 <z_cbvprintf_impl+0x121>
  110d57:	48 63 d0             	movslq %eax,%rdx
  110d5a:	48 39 c2             	cmp    %rax,%rdx
  110d5d:	0f 95 c2             	setne  %dl
  110d60:	0f b6 d2             	movzbl %dl,%edx
		conv->unsupported |= ((conv->width_value < 0)
  110d63:	8a 45 c0             	mov    -0x40(%rbp),%al
  110d66:	01 d2                	add    %edx,%edx
  110d68:	49 89 cc             	mov    %rcx,%r12
  110d6b:	83 e0 fd             	and    $0xfffffffd,%eax
  110d6e:	09 d0                	or     %edx,%eax
  110d70:	88 45 c0             	mov    %al,-0x40(%rbp)
	conv->prec_present = (*sp == '.');
  110d73:	41 8a 0c 24          	mov    (%r12),%cl
  110d77:	8a 45 c1             	mov    -0x3f(%rbp),%al
  110d7a:	80 f9 2e             	cmp    $0x2e,%cl
  110d7d:	0f 94 c2             	sete   %dl
  110d80:	83 e0 fd             	and    $0xfffffffd,%eax
  110d83:	01 d2                	add    %edx,%edx
  110d85:	09 d0                	or     %edx,%eax
  110d87:	88 45 c1             	mov    %al,-0x3f(%rbp)
	if (!conv->prec_present) {
  110d8a:	80 f9 2e             	cmp    $0x2e,%cl
  110d8d:	75 5c                	jne    110deb <z_cbvprintf_impl+0x1a9>
	++sp;
  110d8f:	49 8d 54 24 01       	lea    0x1(%r12),%rdx
	if (*sp == '*') {
  110d94:	41 80 7c 24 01 2a    	cmpb   $0x2a,0x1(%r12)
	++sp;
  110d9a:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
	if (*sp == '*') {
  110d9e:	75 0c                	jne    110dac <z_cbvprintf_impl+0x16a>
		conv->prec_star = true;
  110da0:	83 c8 04             	or     $0x4,%eax
		return ++sp;
  110da3:	49 83 c4 02          	add    $0x2,%r12
		conv->prec_star = true;
  110da7:	88 45 c1             	mov    %al,-0x3f(%rbp)
		return ++sp;
  110daa:	eb 3f                	jmp    110deb <z_cbvprintf_impl+0x1a9>
	size_t prec = extract_decimal(&sp);
  110dac:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  110db0:	e8 77 fd ff ff       	call   110b2c <extract_decimal>
			      || (prec != (size_t)conv->prec_value));
  110db5:	b9 01 00 00 00       	mov    $0x1,%ecx
	conv->prec_value = prec;
  110dba:	89 45 c8             	mov    %eax,-0x38(%rbp)
	size_t prec = extract_decimal(&sp);
  110dbd:	48 89 c2             	mov    %rax,%rdx
	conv->unsupported |= ((conv->prec_value < 0)
  110dc0:	8a 45 c0             	mov    -0x40(%rbp),%al
  110dc3:	d0 e8                	shr    %al
  110dc5:	83 e0 01             	and    $0x1,%eax
			      || (prec != (size_t)conv->prec_value));
  110dc8:	85 d2                	test   %edx,%edx
  110dca:	78 0c                	js     110dd8 <z_cbvprintf_impl+0x196>
  110dcc:	48 63 ca             	movslq %edx,%rcx
  110dcf:	48 39 d1             	cmp    %rdx,%rcx
  110dd2:	0f 95 c1             	setne  %cl
  110dd5:	0f b6 c9             	movzbl %cl,%ecx
	conv->unsupported |= ((conv->prec_value < 0)
  110dd8:	8a 55 c0             	mov    -0x40(%rbp),%dl
  110ddb:	09 c8                	or     %ecx,%eax
	return sp;
  110ddd:	4c 8b 65 90          	mov    -0x70(%rbp),%r12
	conv->unsupported |= ((conv->prec_value < 0)
  110de1:	01 c0                	add    %eax,%eax
  110de3:	83 e2 fd             	and    $0xfffffffd,%edx
  110de6:	09 d0                	or     %edx,%eax
  110de8:	88 45 c0             	mov    %al,-0x40(%rbp)
	switch (*sp) {
  110deb:	41 8a 04 24          	mov    (%r12),%al
  110def:	3c 6c                	cmp    $0x6c,%al
  110df1:	74 53                	je     110e46 <z_cbvprintf_impl+0x204>
  110df3:	7f 1d                	jg     110e12 <z_cbvprintf_impl+0x1d0>
  110df5:	3c 68                	cmp    $0x68,%al
  110df7:	74 2c                	je     110e25 <z_cbvprintf_impl+0x1e3>
  110df9:	3c 6a                	cmp    $0x6a,%al
  110dfb:	74 6b                	je     110e68 <z_cbvprintf_impl+0x226>
  110dfd:	3c 4c                	cmp    $0x4c,%al
  110dff:	75 7d                	jne    110e7e <z_cbvprintf_impl+0x23c>
		conv->unsupported = true;
  110e01:	8b 45 c0             	mov    -0x40(%rbp),%eax
  110e04:	66 25 fd 87          	and    $0x87fd,%ax
  110e08:	66 0d 02 40          	or     $0x4002,%ax
  110e0c:	66 89 45 c0          	mov    %ax,-0x40(%rbp)
		break;
  110e10:	eb 2f                	jmp    110e41 <z_cbvprintf_impl+0x1ff>
	switch (*sp) {
  110e12:	3c 74                	cmp    $0x74,%al
  110e14:	74 5d                	je     110e73 <z_cbvprintf_impl+0x231>
  110e16:	3c 7a                	cmp    $0x7a,%al
  110e18:	75 64                	jne    110e7e <z_cbvprintf_impl+0x23c>
		conv->length_mod = LENGTH_Z;
  110e1a:	8a 45 c1             	mov    -0x3f(%rbp),%al
  110e1d:	83 e0 87             	and    $0xffffff87,%eax
  110e20:	83 c8 30             	or     $0x30,%eax
  110e23:	eb 19                	jmp    110e3e <z_cbvprintf_impl+0x1fc>
		if (*++sp == 'h') {
  110e25:	41 80 7c 24 01 68    	cmpb   $0x68,0x1(%r12)
  110e2b:	8a 45 c1             	mov    -0x3f(%rbp),%al
  110e2e:	75 08                	jne    110e38 <z_cbvprintf_impl+0x1f6>
			conv->length_mod = LENGTH_HH;
  110e30:	83 e0 87             	and    $0xffffff87,%eax
  110e33:	83 c8 08             	or     $0x8,%eax
  110e36:	eb 1f                	jmp    110e57 <z_cbvprintf_impl+0x215>
			conv->length_mod = LENGTH_H;
  110e38:	83 e0 87             	and    $0xffffff87,%eax
  110e3b:	83 c8 10             	or     $0x10,%eax
  110e3e:	88 45 c1             	mov    %al,-0x3f(%rbp)
		if (*++sp == 'h') {
  110e41:	49 ff c4             	inc    %r12
  110e44:	eb 38                	jmp    110e7e <z_cbvprintf_impl+0x23c>
		if (*++sp == 'l') {
  110e46:	41 80 7c 24 01 6c    	cmpb   $0x6c,0x1(%r12)
  110e4c:	8a 45 c1             	mov    -0x3f(%rbp),%al
  110e4f:	75 0f                	jne    110e60 <z_cbvprintf_impl+0x21e>
			conv->length_mod = LENGTH_LL;
  110e51:	83 e0 87             	and    $0xffffff87,%eax
  110e54:	83 c8 20             	or     $0x20,%eax
  110e57:	88 45 c1             	mov    %al,-0x3f(%rbp)
			++sp;
  110e5a:	49 83 c4 02          	add    $0x2,%r12
  110e5e:	eb 1e                	jmp    110e7e <z_cbvprintf_impl+0x23c>
			conv->length_mod = LENGTH_L;
  110e60:	83 e0 87             	and    $0xffffff87,%eax
  110e63:	83 c8 18             	or     $0x18,%eax
  110e66:	eb d6                	jmp    110e3e <z_cbvprintf_impl+0x1fc>
		conv->length_mod = LENGTH_J;
  110e68:	8a 45 c1             	mov    -0x3f(%rbp),%al
  110e6b:	83 e0 87             	and    $0xffffff87,%eax
  110e6e:	83 c8 28             	or     $0x28,%eax
  110e71:	eb cb                	jmp    110e3e <z_cbvprintf_impl+0x1fc>
		conv->length_mod = LENGTH_T;
  110e73:	8a 45 c1             	mov    -0x3f(%rbp),%al
  110e76:	83 e0 87             	and    $0xffffff87,%eax
  110e79:	83 c8 38             	or     $0x38,%eax
  110e7c:	eb c0                	jmp    110e3e <z_cbvprintf_impl+0x1fc>
	conv->specifier = *sp++;
  110e7e:	41 8a 14 24          	mov    (%r12),%dl
		if (conv->length_mod == LENGTH_UPPER_L) {
  110e82:	8a 45 c1             	mov    -0x3f(%rbp),%al
	conv->specifier = *sp++;
  110e85:	49 8d 74 24 01       	lea    0x1(%r12),%rsi
  110e8a:	88 55 c3             	mov    %dl,-0x3d(%rbp)
	switch (conv->specifier) {
  110e8d:	80 fa 69             	cmp    $0x69,%dl
  110e90:	7f 43                	jg     110ed5 <z_cbvprintf_impl+0x293>
  110e92:	80 fa 40             	cmp    $0x40,%dl
  110e95:	0f 8e d2 00 00 00    	jle    110f6d <z_cbvprintf_impl+0x32b>
  110e9b:	8d 4a bf             	lea    -0x41(%rdx),%ecx
  110e9e:	bf 01 00 00 00       	mov    $0x1,%edi
  110ea3:	48 d3 e7             	shl    %cl,%rdi
  110ea6:	48 89 f9             	mov    %rdi,%rcx
  110ea9:	48 bf 71 00 00 00 71 	movabs $0x7100000071,%rdi
  110eb0:	00 00 00 
  110eb3:	48 85 f9             	test   %rdi,%rcx
  110eb6:	0f 85 8e 00 00 00    	jne    110f4a <z_cbvprintf_impl+0x308>
  110ebc:	bf 43 00 00 00       	mov    $0x43,%edi
  110ec1:	48 c1 e7 22          	shl    $0x22,%rdi
  110ec5:	48 85 f9             	test   %rdi,%rcx
  110ec8:	75 47                	jne    110f11 <z_cbvprintf_impl+0x2cf>
  110eca:	80 fa 58             	cmp    $0x58,%dl
  110ecd:	0f 85 9a 00 00 00    	jne    110f6d <z_cbvprintf_impl+0x32b>
  110ed3:	eb 55                	jmp    110f2a <z_cbvprintf_impl+0x2e8>
  110ed5:	8d 4a 92             	lea    -0x6e(%rdx),%ecx
  110ed8:	80 f9 0a             	cmp    $0xa,%cl
  110edb:	0f 87 8c 00 00 00    	ja     110f6d <z_cbvprintf_impl+0x32b>
  110ee1:	ba 01 00 00 00       	mov    $0x1,%edx
  110ee6:	48 d3 e2             	shl    %cl,%rdx
  110ee9:	f7 c2 82 04 00 00    	test   $0x482,%edx
  110eef:	75 39                	jne    110f2a <z_cbvprintf_impl+0x2e8>
  110ef1:	f6 c2 24             	test   $0x24,%dl
  110ef4:	75 64                	jne    110f5a <z_cbvprintf_impl+0x318>
  110ef6:	80 e2 01             	and    $0x1,%dl
  110ef9:	74 72                	je     110f6d <z_cbvprintf_impl+0x32b>
		conv->specifier_cat = SPECIFIER_PTR;
  110efb:	8a 55 c2             	mov    -0x3e(%rbp),%dl
		if (conv->length_mod == LENGTH_UPPER_L) {
  110efe:	83 e0 78             	and    $0x78,%eax
		conv->specifier_cat = SPECIFIER_PTR;
  110f01:	83 e2 f8             	and    $0xfffffff8,%edx
  110f04:	83 ca 03             	or     $0x3,%edx
		if (conv->length_mod == LENGTH_UPPER_L) {
  110f07:	3c 40                	cmp    $0x40,%al
		conv->specifier_cat = SPECIFIER_PTR;
  110f09:	88 55 c2             	mov    %dl,-0x3e(%rbp)
		if (conv->length_mod == LENGTH_UPPER_L) {
  110f0c:	0f 94 c1             	sete   %cl
  110f0f:	eb 62                	jmp    110f73 <z_cbvprintf_impl+0x331>
		conv->specifier_cat = SPECIFIER_SINT;
  110f11:	8a 4d c2             	mov    -0x3e(%rbp),%cl
		if (conv->length_mod == LENGTH_UPPER_L) {
  110f14:	83 e0 78             	and    $0x78,%eax
		conv->specifier_cat = SPECIFIER_SINT;
  110f17:	83 e1 f8             	and    $0xfffffff8,%ecx
  110f1a:	83 c9 01             	or     $0x1,%ecx
  110f1d:	88 4d c2             	mov    %cl,-0x3e(%rbp)
		if (conv->length_mod == LENGTH_UPPER_L) {
  110f20:	3c 40                	cmp    $0x40,%al
  110f22:	75 1d                	jne    110f41 <z_cbvprintf_impl+0x2ff>
			conv->invalid = true;
  110f24:	80 4d c0 01          	orb    $0x1,-0x40(%rbp)
  110f28:	eb 17                	jmp    110f41 <z_cbvprintf_impl+0x2ff>
		conv->specifier_cat = SPECIFIER_UINT;
  110f2a:	8a 55 c2             	mov    -0x3e(%rbp),%dl
		if (conv->length_mod == LENGTH_UPPER_L) {
  110f2d:	83 e0 78             	and    $0x78,%eax
		conv->specifier_cat = SPECIFIER_UINT;
  110f30:	83 e2 f8             	and    $0xfffffff8,%edx
  110f33:	83 ca 02             	or     $0x2,%edx
  110f36:	88 55 c2             	mov    %dl,-0x3e(%rbp)
		if (conv->length_mod == LENGTH_UPPER_L) {
  110f39:	3c 40                	cmp    $0x40,%al
  110f3b:	74 30                	je     110f6d <z_cbvprintf_impl+0x32b>
	bool unsupported = false;
  110f3d:	31 c9                	xor    %ecx,%ecx
  110f3f:	eb 32                	jmp    110f73 <z_cbvprintf_impl+0x331>
		if (conv->specifier == 'c') {
  110f41:	80 fa 63             	cmp    $0x63,%dl
  110f44:	75 f7                	jne    110f3d <z_cbvprintf_impl+0x2fb>
			unsupported = (conv->length_mod != LENGTH_NONE);
  110f46:	84 c0                	test   %al,%al
  110f48:	eb 1e                	jmp    110f68 <z_cbvprintf_impl+0x326>
		conv->specifier_cat = SPECIFIER_FP;
  110f4a:	8a 45 c2             	mov    -0x3e(%rbp),%al
			unsupported = true;
  110f4d:	b1 01                	mov    $0x1,%cl
		conv->specifier_cat = SPECIFIER_FP;
  110f4f:	83 e0 f8             	and    $0xfffffff8,%eax
  110f52:	83 c8 04             	or     $0x4,%eax
  110f55:	88 45 c2             	mov    %al,-0x3e(%rbp)
			break;
  110f58:	eb 19                	jmp    110f73 <z_cbvprintf_impl+0x331>
		conv->specifier_cat = SPECIFIER_PTR;
  110f5a:	8a 55 c2             	mov    -0x3e(%rbp),%dl
  110f5d:	83 e2 f8             	and    $0xfffffff8,%edx
  110f60:	83 ca 03             	or     $0x3,%edx
		if (conv->length_mod != LENGTH_NONE) {
  110f63:	a8 78                	test   $0x78,%al
		conv->specifier_cat = SPECIFIER_PTR;
  110f65:	88 55 c2             	mov    %dl,-0x3e(%rbp)
		if (conv->length_mod != LENGTH_NONE) {
  110f68:	0f 95 c1             	setne  %cl
  110f6b:	eb 06                	jmp    110f73 <z_cbvprintf_impl+0x331>
		conv->invalid = true;
  110f6d:	80 4d c0 01          	orb    $0x1,-0x40(%rbp)
		break;
  110f71:	eb ca                	jmp    110f3d <z_cbvprintf_impl+0x2fb>
	conv->unsupported |= unsupported;
  110f73:	8a 55 c0             	mov    -0x40(%rbp),%dl
	return sp;
  110f76:	49 89 f4             	mov    %rsi,%r12
	conv->unsupported |= unsupported;
  110f79:	89 d0                	mov    %edx,%eax
  110f7b:	83 e2 fd             	and    $0xfffffffd,%edx
  110f7e:	d0 e8                	shr    %al
  110f80:	83 e0 01             	and    $0x1,%eax
  110f83:	09 c8                	or     %ecx,%eax
  110f85:	01 c0                	add    %eax,%eax
  110f87:	09 c2                	or     %eax,%edx
  110f89:	88 55 c0             	mov    %dl,-0x40(%rbp)
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
  110f8c:	8a 4d c1             	mov    -0x3f(%rbp),%cl
  110f8f:	f6 c1 01             	test   $0x1,%cl
  110f92:	74 34                	je     110fc8 <z_cbvprintf_impl+0x386>
			width = va_arg(ap, int);
  110f94:	41 8b 17             	mov    (%r15),%edx
  110f97:	83 fa 2f             	cmp    $0x2f,%edx
  110f9a:	77 0e                	ja     110faa <z_cbvprintf_impl+0x368>
  110f9c:	89 d0                	mov    %edx,%eax
  110f9e:	83 c2 08             	add    $0x8,%edx
  110fa1:	49 03 47 10          	add    0x10(%r15),%rax
  110fa5:	41 89 17             	mov    %edx,(%r15)
  110fa8:	eb 0c                	jmp    110fb6 <z_cbvprintf_impl+0x374>
  110faa:	49 8b 47 08          	mov    0x8(%r15),%rax
  110fae:	48 8d 50 08          	lea    0x8(%rax),%rdx
  110fb2:	49 89 57 08          	mov    %rdx,0x8(%r15)
  110fb6:	8b 00                	mov    (%rax),%eax
  110fb8:	89 45 84             	mov    %eax,-0x7c(%rbp)

			if (width < 0) {
  110fbb:	85 c0                	test   %eax,%eax
  110fbd:	79 1c                	jns    110fdb <z_cbvprintf_impl+0x399>
				conv->flag_dash = true;
  110fbf:	80 4d c0 04          	orb    $0x4,-0x40(%rbp)
				width = -width;
  110fc3:	f7 5d 84             	negl   -0x7c(%rbp)
  110fc6:	eb 13                	jmp    110fdb <z_cbvprintf_impl+0x399>
			}
		} else if (conv->width_present) {
  110fc8:	80 7d c0 00          	cmpb   $0x0,-0x40(%rbp)
		int width = -1;
  110fcc:	c7 45 84 ff ff ff ff 	movl   $0xffffffff,-0x7c(%rbp)
		} else if (conv->width_present) {
  110fd3:	79 06                	jns    110fdb <z_cbvprintf_impl+0x399>
			width = conv->width_value;
  110fd5:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  110fd8:	89 45 84             	mov    %eax,-0x7c(%rbp)

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
  110fdb:	f6 c1 04             	test   $0x4,%cl
  110fde:	74 34                	je     111014 <z_cbvprintf_impl+0x3d2>
			int arg = va_arg(ap, int);
  110fe0:	41 8b 17             	mov    (%r15),%edx
  110fe3:	83 fa 2f             	cmp    $0x2f,%edx
  110fe6:	77 0e                	ja     110ff6 <z_cbvprintf_impl+0x3b4>
  110fe8:	89 d0                	mov    %edx,%eax
  110fea:	83 c2 08             	add    $0x8,%edx
  110fed:	49 03 47 10          	add    0x10(%r15),%rax
  110ff1:	41 89 17             	mov    %edx,(%r15)
  110ff4:	eb 0c                	jmp    111002 <z_cbvprintf_impl+0x3c0>
  110ff6:	49 8b 47 08          	mov    0x8(%r15),%rax
  110ffa:	48 8d 50 08          	lea    0x8(%rax),%rdx
  110ffe:	49 89 57 08          	mov    %rdx,0x8(%r15)
  111002:	44 8b 10             	mov    (%rax),%r10d

			if (arg < 0) {
  111005:	45 85 d2             	test   %r10d,%r10d
  111008:	79 13                	jns    11101d <z_cbvprintf_impl+0x3db>
				conv->prec_present = false;
  11100a:	80 65 c1 fd          	andb   $0xfd,-0x3f(%rbp)
		int precision = -1;
  11100e:	41 83 ca ff          	or     $0xffffffff,%r10d
  111012:	eb 09                	jmp    11101d <z_cbvprintf_impl+0x3db>
			} else {
				precision = arg;
			}
		} else if (conv->prec_present) {
  111014:	80 e1 02             	and    $0x2,%cl
  111017:	74 f5                	je     11100e <z_cbvprintf_impl+0x3cc>
			precision = conv->prec_value;
  111019:	44 8b 55 c8          	mov    -0x38(%rbp),%r10d
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
  11101d:	31 c0                	xor    %eax,%eax
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
  11101f:	8a 55 c1             	mov    -0x3f(%rbp),%dl
		conv->pad0_value = 0;
  111022:	48 89 45 c4          	mov    %rax,-0x3c(%rbp)
			= (enum specifier_cat_enum)conv->specifier_cat;
  111026:	8a 45 c2             	mov    -0x3e(%rbp),%al
			= (enum length_mod_enum)conv->length_mod;
  111029:	c0 ea 03             	shr    $0x3,%dl
  11102c:	83 e2 0f             	and    $0xf,%edx
		enum specifier_cat_enum specifier_cat
  11102f:	83 e0 07             	and    $0x7,%eax
		enum length_mod_enum length_mod
  111032:	0f b6 ca             	movzbl %dl,%ecx
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
  111035:	83 f8 01             	cmp    $0x1,%eax
  111038:	0f 85 bb 00 00 00    	jne    1110f9 <z_cbvprintf_impl+0x4b7>
			switch (length_mod) {
			default:
			case LENGTH_NONE:
			case LENGTH_HH:
			case LENGTH_H:
				value->sint = va_arg(ap, int);
  11103e:	41 8b 07             	mov    (%r15),%eax
			switch (length_mod) {
  111041:	80 fa 05             	cmp    $0x5,%dl
  111044:	0f 84 11 01 00 00    	je     11115b <z_cbvprintf_impl+0x519>
  11104a:	77 10                	ja     11105c <z_cbvprintf_impl+0x41a>
  11104c:	80 fa 03             	cmp    $0x3,%dl
  11104f:	74 61                	je     1110b2 <z_cbvprintf_impl+0x470>
  111051:	80 fa 04             	cmp    $0x4,%dl
  111054:	0f 84 01 01 00 00    	je     11115b <z_cbvprintf_impl+0x519>
  11105a:	eb 26                	jmp    111082 <z_cbvprintf_impl+0x440>
  11105c:	8d 72 0a             	lea    0xa(%rdx),%esi
  11105f:	83 e6 0f             	and    $0xf,%esi
  111062:	40 80 fe 01          	cmp    $0x1,%sil
  111066:	0f 86 ef 00 00 00    	jbe    11115b <z_cbvprintf_impl+0x519>
				value->sint = va_arg(ap, int);
  11106c:	83 f8 2f             	cmp    $0x2f,%eax
  11106f:	76 16                	jbe    111087 <z_cbvprintf_impl+0x445>
  111071:	49 8b 47 08          	mov    0x8(%r15),%rax
  111075:	48 8d 70 08          	lea    0x8(%rax),%rsi
  111079:	49 89 77 08          	mov    %rsi,0x8(%r15)
  11107d:	48 63 00             	movslq (%rax),%rax
				 */
				value->sint =
					(sint_value_type)va_arg(ap, ptrdiff_t);
				break;
			}
			if (length_mod == LENGTH_HH) {
  111080:	eb 61                	jmp    1110e3 <z_cbvprintf_impl+0x4a1>
				value->sint = va_arg(ap, int);
  111082:	83 f8 2f             	cmp    $0x2f,%eax
  111085:	77 0e                	ja     111095 <z_cbvprintf_impl+0x453>
  111087:	89 c6                	mov    %eax,%esi
  111089:	83 c0 08             	add    $0x8,%eax
  11108c:	49 03 77 10          	add    0x10(%r15),%rsi
  111090:	41 89 07             	mov    %eax,(%r15)
  111093:	eb 0c                	jmp    1110a1 <z_cbvprintf_impl+0x45f>
  111095:	49 8b 77 08          	mov    0x8(%r15),%rsi
  111099:	48 8d 46 08          	lea    0x8(%rsi),%rax
  11109d:	49 89 47 08          	mov    %rax,0x8(%r15)
  1110a1:	48 63 06             	movslq (%rsi),%rax
			if (length_mod == LENGTH_HH) {
  1110a4:	83 f9 01             	cmp    $0x1,%ecx
  1110a7:	75 3a                	jne    1110e3 <z_cbvprintf_impl+0x4a1>
				value->sint = (signed char)value->sint;
  1110a9:	48 0f be c0          	movsbq %al,%rax
  1110ad:	e9 6b 01 00 00       	jmp    11121d <z_cbvprintf_impl+0x5db>
				if (WCHAR_IS_SIGNED
  1110b2:	80 7d c3 63          	cmpb   $0x63,-0x3d(%rbp)
  1110b6:	0f 85 9f 00 00 00    	jne    11115b <z_cbvprintf_impl+0x519>
					value->sint = (wchar_t)va_arg(ap,
  1110bc:	83 f8 2f             	cmp    $0x2f,%eax
  1110bf:	77 0e                	ja     1110cf <z_cbvprintf_impl+0x48d>
  1110c1:	89 c1                	mov    %eax,%ecx
  1110c3:	83 c0 08             	add    $0x8,%eax
  1110c6:	49 03 4f 10          	add    0x10(%r15),%rcx
  1110ca:	41 89 07             	mov    %eax,(%r15)
  1110cd:	eb 0c                	jmp    1110db <z_cbvprintf_impl+0x499>
  1110cf:	49 8b 4f 08          	mov    0x8(%r15),%rcx
  1110d3:	48 8d 41 08          	lea    0x8(%rcx),%rax
  1110d7:	49 89 47 08          	mov    %rax,0x8(%r15)
  1110db:	48 63 01             	movslq (%rcx),%rax
  1110de:	e9 3a 01 00 00       	jmp    11121d <z_cbvprintf_impl+0x5db>
				value->sint = va_arg(ap, int);
  1110e3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
  1110e7:	48 0f bf c0          	movswq %ax,%rax
			} else if (length_mod == LENGTH_H) {
  1110eb:	83 f9 02             	cmp    $0x2,%ecx
  1110ee:	0f 84 29 01 00 00    	je     11121d <z_cbvprintf_impl+0x5db>
  1110f4:	e9 28 01 00 00       	jmp    111221 <z_cbvprintf_impl+0x5df>
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
  1110f9:	83 f8 02             	cmp    $0x2,%eax
  1110fc:	0f 85 9a 00 00 00    	jne    11119c <z_cbvprintf_impl+0x55a>
				value->sint = va_arg(ap, int);
  111102:	41 8b 07             	mov    (%r15),%eax
			switch (length_mod) {
  111105:	80 fa 05             	cmp    $0x5,%dl
  111108:	74 51                	je     11115b <z_cbvprintf_impl+0x519>
  11110a:	77 0c                	ja     111118 <z_cbvprintf_impl+0x4d6>
  11110c:	80 fa 03             	cmp    $0x3,%dl
  11110f:	74 4a                	je     11115b <z_cbvprintf_impl+0x519>
  111111:	80 fa 04             	cmp    $0x4,%dl
  111114:	74 45                	je     11115b <z_cbvprintf_impl+0x519>
  111116:	eb 0c                	jmp    111124 <z_cbvprintf_impl+0x4e2>
  111118:	8d 72 0a             	lea    0xa(%rdx),%esi
  11111b:	83 e6 0f             	and    $0xf,%esi
  11111e:	40 80 fe 01          	cmp    $0x1,%sil
  111122:	76 4a                	jbe    11116e <z_cbvprintf_impl+0x52c>
			default:
			case LENGTH_NONE:
			case LENGTH_HH:
			case LENGTH_H:
				value->uint = va_arg(ap, unsigned int);
  111124:	83 f8 2f             	cmp    $0x2f,%eax
  111127:	77 0e                	ja     111137 <z_cbvprintf_impl+0x4f5>
  111129:	89 c6                	mov    %eax,%esi
  11112b:	83 c0 08             	add    $0x8,%eax
  11112e:	49 03 77 10          	add    0x10(%r15),%rsi
  111132:	41 89 07             	mov    %eax,(%r15)
  111135:	eb 0c                	jmp    111143 <z_cbvprintf_impl+0x501>
  111137:	49 8b 77 08          	mov    0x8(%r15),%rsi
  11113b:	48 8d 46 08          	lea    0x8(%rsi),%rax
  11113f:	49 89 47 08          	mov    %rax,0x8(%r15)
  111143:	8b 36                	mov    (%rsi),%esi
  111145:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
			case LENGTH_T:		/* ptrdiff_t */
				value->uint =
					(uint_value_type)va_arg(ap, size_t);
				break;
			}
			if (length_mod == LENGTH_HH) {
  111149:	83 f9 01             	cmp    $0x1,%ecx
  11114c:	75 3d                	jne    11118b <z_cbvprintf_impl+0x549>
				value->uint = (unsigned char)value->uint;
  11114e:	48 81 65 b0 ff 00 00 	andq   $0xff,-0x50(%rbp)
  111155:	00 
  111156:	e9 c6 00 00 00       	jmp    111221 <z_cbvprintf_impl+0x5df>
					(uint_value_type)va_arg(ap,
  11115b:	83 f8 2f             	cmp    $0x2f,%eax
  11115e:	76 17                	jbe    111177 <z_cbvprintf_impl+0x535>
  111160:	49 8b 4f 08          	mov    0x8(%r15),%rcx
  111164:	48 8d 41 08          	lea    0x8(%rcx),%rax
  111168:	49 89 47 08          	mov    %rax,0x8(%r15)
  11116c:	eb 15                	jmp    111183 <z_cbvprintf_impl+0x541>
					(uint_value_type)va_arg(ap, size_t);
  11116e:	83 f8 2f             	cmp    $0x2f,%eax
  111171:	0f 87 97 00 00 00    	ja     11120e <z_cbvprintf_impl+0x5cc>
  111177:	89 c1                	mov    %eax,%ecx
  111179:	83 c0 08             	add    $0x8,%eax
  11117c:	49 03 4f 10          	add    0x10(%r15),%rcx
  111180:	41 89 07             	mov    %eax,(%r15)
				value->uint =
  111183:	48 8b 01             	mov    (%rcx),%rax
  111186:	e9 92 00 00 00       	jmp    11121d <z_cbvprintf_impl+0x5db>
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
  11118b:	0f b7 c6             	movzwl %si,%eax
			} else if (length_mod == LENGTH_H) {
  11118e:	83 f9 02             	cmp    $0x2,%ecx
  111191:	0f 84 86 00 00 00    	je     11121d <z_cbvprintf_impl+0x5db>
  111197:	e9 85 00 00 00       	jmp    111221 <z_cbvprintf_impl+0x5df>
			}
		} else if (specifier_cat == SPECIFIER_FP) {
  11119c:	83 f8 04             	cmp    $0x4,%eax
  11119f:	75 52                	jne    1111f3 <z_cbvprintf_impl+0x5b1>
			if (length_mod == LENGTH_UPPER_L) {
  1111a1:	83 f9 08             	cmp    $0x8,%ecx
  1111a4:	75 1b                	jne    1111c1 <z_cbvprintf_impl+0x57f>
				value->ldbl = va_arg(ap, long double);
  1111a6:	49 8b 47 08          	mov    0x8(%r15),%rax
  1111aa:	48 83 c0 0f          	add    $0xf,%rax
  1111ae:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  1111b2:	48 8d 48 10          	lea    0x10(%rax),%rcx
  1111b6:	49 89 4f 08          	mov    %rcx,0x8(%r15)
  1111ba:	db 28                	fldt   (%rax)
  1111bc:	db 7d b0             	fstpt  -0x50(%rbp)
  1111bf:	eb 60                	jmp    111221 <z_cbvprintf_impl+0x5df>
			} else {
				value->dbl = va_arg(ap, double);
  1111c1:	41 8b 4f 04          	mov    0x4(%r15),%ecx
  1111c5:	81 f9 af 00 00 00    	cmp    $0xaf,%ecx
  1111cb:	77 0f                	ja     1111dc <z_cbvprintf_impl+0x59a>
  1111cd:	89 c8                	mov    %ecx,%eax
  1111cf:	83 c1 10             	add    $0x10,%ecx
  1111d2:	49 03 47 10          	add    0x10(%r15),%rax
  1111d6:	41 89 4f 04          	mov    %ecx,0x4(%r15)
  1111da:	eb 0c                	jmp    1111e8 <z_cbvprintf_impl+0x5a6>
  1111dc:	49 8b 47 08          	mov    0x8(%r15),%rax
  1111e0:	48 8d 48 08          	lea    0x8(%rax),%rcx
  1111e4:	49 89 4f 08          	mov    %rcx,0x8(%r15)
  1111e8:	f2 0f 10 00          	movsd  (%rax),%xmm0
  1111ec:	f2 0f 11 45 b0       	movsd  %xmm0,-0x50(%rbp)
  1111f1:	eb 2e                	jmp    111221 <z_cbvprintf_impl+0x5df>
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
  1111f3:	83 f8 03             	cmp    $0x3,%eax
  1111f6:	75 29                	jne    111221 <z_cbvprintf_impl+0x5df>
			value->ptr = va_arg(ap, void *);
  1111f8:	41 8b 0f             	mov    (%r15),%ecx
  1111fb:	83 f9 2f             	cmp    $0x2f,%ecx
  1111fe:	77 0e                	ja     11120e <z_cbvprintf_impl+0x5cc>
  111200:	89 c8                	mov    %ecx,%eax
  111202:	83 c1 08             	add    $0x8,%ecx
  111205:	49 03 47 10          	add    0x10(%r15),%rax
  111209:	41 89 0f             	mov    %ecx,(%r15)
  11120c:	eb 0c                	jmp    11121a <z_cbvprintf_impl+0x5d8>
  11120e:	49 8b 47 08          	mov    0x8(%r15),%rax
  111212:	48 8d 48 08          	lea    0x8(%rax),%rcx
  111216:	49 89 4f 08          	mov    %rcx,0x8(%r15)
  11121a:	48 8b 00             	mov    (%rax),%rax
  11121d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
  111221:	8a 4d c0             	mov    -0x40(%rbp),%cl
  111224:	f6 c1 03             	test   $0x3,%cl
  111227:	74 24                	je     11124d <z_cbvprintf_impl+0x60b>
			OUTS(sp, fp);
  111229:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  11122d:	4c 89 e1             	mov    %r12,%rcx
  111230:	4c 89 ca             	mov    %r9,%rdx
  111233:	4c 89 f7             	mov    %r14,%rdi
  111236:	e8 ad f9 ff ff       	call   110be8 <outs>
  11123b:	85 c0                	test   %eax,%eax
  11123d:	0f 88 bb 03 00 00    	js     1115fe <z_cbvprintf_impl+0x9bc>
  111243:	48 98                	cltq   
  111245:	48 01 c3             	add    %rax,%rbx
			continue;
  111248:	e9 a7 03 00 00       	jmp    1115f4 <z_cbvprintf_impl+0x9b2>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
  11124d:	8a 45 c3             	mov    -0x3d(%rbp),%al
  111250:	3c 78                	cmp    $0x78,%al
  111252:	0f 87 9c 03 00 00    	ja     1115f4 <z_cbvprintf_impl+0x9b2>
  111258:	3c 62                	cmp    $0x62,%al
  11125a:	77 11                	ja     11126d <z_cbvprintf_impl+0x62b>
  11125c:	3c 25                	cmp    $0x25,%al
  11125e:	74 22                	je     111282 <z_cbvprintf_impl+0x640>
  111260:	3c 58                	cmp    $0x58,%al
  111262:	0f 84 af 00 00 00    	je     111317 <z_cbvprintf_impl+0x6d5>
  111268:	e9 87 03 00 00       	jmp    1115f4 <z_cbvprintf_impl+0x9b2>
  11126d:	83 e8 63             	sub    $0x63,%eax
  111270:	3c 15                	cmp    $0x15,%al
  111272:	0f 87 7c 03 00 00    	ja     1115f4 <z_cbvprintf_impl+0x9b2>
  111278:	0f b6 c0             	movzbl %al,%eax
  11127b:	ff 24 c5 58 d3 11 00 	jmp    *0x11d358(,%rax,8)
		case '%':
			OUTC('%');
  111282:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  111286:	bf 25 00 00 00       	mov    $0x25,%edi
  11128b:	31 c0                	xor    %eax,%eax
  11128d:	41 ff d6             	call   *%r14
  111290:	85 c0                	test   %eax,%eax
  111292:	0f 88 66 03 00 00    	js     1115fe <z_cbvprintf_impl+0x9bc>
  111298:	48 ff c3             	inc    %rbx
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
  11129b:	e9 54 03 00 00       	jmp    1115f4 <z_cbvprintf_impl+0x9b2>
			bps = (const char *)value->ptr;
  1112a0:	4c 8b 6d b0          	mov    -0x50(%rbp),%r13
			if (precision >= 0) {
  1112a4:	45 85 d2             	test   %r10d,%r10d
  1112a7:	78 19                	js     1112c2 <z_cbvprintf_impl+0x680>
				len = strnlen(bps, precision);
  1112a9:	49 63 f2             	movslq %r10d,%rsi
  1112ac:	4c 89 ef             	mov    %r13,%rdi
  1112af:	e8 2c 36 ff ff       	call   1048e0 <strnlen>
		if (bps == NULL) {
  1112b4:	4d 85 ed             	test   %r13,%r13
  1112b7:	0f 85 56 01 00 00    	jne    111413 <z_cbvprintf_impl+0x7d1>
  1112bd:	e9 32 03 00 00       	jmp    1115f4 <z_cbvprintf_impl+0x9b2>
				len = strlen(bps);
  1112c2:	4c 89 ef             	mov    %r13,%rdi
  1112c5:	e8 d6 34 ff ff       	call   1047a0 <strlen>
  1112ca:	e9 44 01 00 00       	jmp    111413 <z_cbvprintf_impl+0x7d1>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
  1112cf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
			bps = buf;
  1112d3:	4c 8d 6d 9a          	lea    -0x66(%rbp),%r13
		char sign = 0;
  1112d7:	45 31 c9             	xor    %r9d,%r9d
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
  1112da:	88 45 9a             	mov    %al,-0x66(%rbp)
			bpe = buf + 1;
  1112dd:	48 8d 45 9b          	lea    -0x65(%rbp),%rax
  1112e1:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
  1112e8:	b8 01 00 00 00       	mov    $0x1,%eax
  1112ed:	e9 78 01 00 00       	jmp    11146a <z_cbvprintf_impl+0x828>
				sign = '+';
  1112f2:	41 b1 2b             	mov    $0x2b,%r9b
			if (conv->flag_plus) {
  1112f5:	f6 c1 08             	test   $0x8,%cl
  1112f8:	75 08                	jne    111302 <z_cbvprintf_impl+0x6c0>
			} else if (conv->flag_space) {
  1112fa:	01 c9                	add    %ecx,%ecx
  1112fc:	83 e1 20             	and    $0x20,%ecx
  1112ff:	41 89 c9             	mov    %ecx,%r9d
			sint = value->sint;
  111302:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
			if (sint < 0) {
  111306:	48 85 c0             	test   %rax,%rax
  111309:	79 0f                	jns    11131a <z_cbvprintf_impl+0x6d8>
				value->uint = (uint_value_type)-sint;
  11130b:	48 f7 d8             	neg    %rax
				sign = '-';
  11130e:	41 b1 2d             	mov    $0x2d,%r9b
				value->uint = (uint_value_type)-sint;
  111311:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  111315:	eb 03                	jmp    11131a <z_cbvprintf_impl+0x6d8>
		switch (conv->specifier) {
  111317:	45 31 c9             	xor    %r9d,%r9d
			bps = encode_uint(value->uint, conv, buf, bpe);
  11131a:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  11131e:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  111322:	48 8d 55 9a          	lea    -0x66(%rbp),%rdx
  111326:	44 88 4d 80          	mov    %r9b,-0x80(%rbp)
  11132a:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  11132e:	44 89 95 78 ff ff ff 	mov    %r10d,-0x88(%rbp)
  111335:	e8 19 f8 ff ff       	call   110b53 <encode_uint>
			if (precision >= 0) {
  11133a:	44 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%r10d
  111341:	44 8a 4d 80          	mov    -0x80(%rbp),%r9b
			bps = encode_uint(value->uint, conv, buf, bpe);
  111345:	49 89 c5             	mov    %rax,%r13
			if (precision >= 0) {
  111348:	45 85 d2             	test   %r10d,%r10d
  11134b:	0f 88 db 00 00 00    	js     11142c <z_cbvprintf_impl+0x7ea>
				size_t len = bpe - bps;
  111351:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
				if (len < (size_t)precision) {
  111355:	49 63 d2             	movslq %r10d,%rdx
				conv->flag_zero = false;
  111358:	80 65 c0 bf          	andb   $0xbf,-0x40(%rbp)
				size_t len = bpe - bps;
  11135c:	4c 29 e8             	sub    %r13,%rax
				if (len < (size_t)precision) {
  11135f:	48 39 d0             	cmp    %rdx,%rax
  111362:	0f 83 c4 00 00 00    	jae    11142c <z_cbvprintf_impl+0x7ea>
					conv->pad0_value = precision - (int)len;
  111368:	41 29 c2             	sub    %eax,%r10d
  11136b:	44 89 55 c4          	mov    %r10d,-0x3c(%rbp)
  11136f:	e9 b8 00 00 00       	jmp    11142c <z_cbvprintf_impl+0x7ea>
			if (value->ptr != NULL) {
  111374:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  111378:	48 85 ff             	test   %rdi,%rdi
  11137b:	0f 84 d0 00 00 00    	je     111451 <z_cbvprintf_impl+0x80f>
				bps = encode_uint((uintptr_t)value->ptr, conv,
  111381:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  111385:	48 8d 55 9a          	lea    -0x66(%rbp),%rdx
  111389:	44 89 95 78 ff ff ff 	mov    %r10d,-0x88(%rbp)
  111390:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
  111394:	e8 ba f7 ff ff       	call   110b53 <encode_uint>
			if (precision >= 0) {
  111399:	44 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%r10d
		char sign = 0;
  1113a0:	45 31 c9             	xor    %r9d,%r9d
				bps = encode_uint((uintptr_t)value->ptr, conv,
  1113a3:	49 89 c5             	mov    %rax,%r13
				conv->altform_0c = true;
  1113a6:	66 8b 45 c2          	mov    -0x3e(%rbp),%ax
  1113aa:	66 25 ef 00          	and    $0xef,%ax
  1113ae:	66 0d 10 78          	or     $0x7810,%ax
  1113b2:	66 89 45 c2          	mov    %ax,-0x3e(%rbp)
			if (precision >= 0) {
  1113b6:	45 85 d2             	test   %r10d,%r10d
  1113b9:	79 96                	jns    111351 <z_cbvprintf_impl+0x70f>
		if (bps == NULL) {
  1113bb:	4d 85 ed             	test   %r13,%r13
  1113be:	0f 84 30 02 00 00    	je     1115f4 <z_cbvprintf_impl+0x9b2>
		size_t nj_len = (bpe - bps);
  1113c4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  1113c8:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
  1113cc:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  1113d3:	4c 29 e8             	sub    %r13,%rax
		int pad_len = 0;

		if (sign != 0) {
  1113d6:	e9 8f 00 00 00       	jmp    11146a <z_cbvprintf_impl+0x828>
				store_count(conv, value->ptr, count);
  1113db:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  1113df:	48 63 c3             	movslq %ebx,%rax
	switch ((enum length_mod_enum)conv->length_mod) {
  1113e2:	80 fa 07             	cmp    $0x7,%dl
  1113e5:	0f 87 09 02 00 00    	ja     1115f4 <z_cbvprintf_impl+0x9b2>
  1113eb:	0f b6 d2             	movzbl %dl,%edx
  1113ee:	ff 24 d5 08 d4 11 00 	jmp    *0x11d408(,%rdx,8)
		*(int *)dp = count;
  1113f5:	89 01                	mov    %eax,(%rcx)
		if (bps == NULL) {
  1113f7:	e9 f8 01 00 00       	jmp    1115f4 <z_cbvprintf_impl+0x9b2>
		*(signed char *)dp = (signed char)count;
  1113fc:	88 19                	mov    %bl,(%rcx)
		if (bps == NULL) {
  1113fe:	e9 f1 01 00 00       	jmp    1115f4 <z_cbvprintf_impl+0x9b2>
		*(short *)dp = (short)count;
  111403:	66 89 19             	mov    %bx,(%rcx)
		if (bps == NULL) {
  111406:	e9 e9 01 00 00       	jmp    1115f4 <z_cbvprintf_impl+0x9b2>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
  11140b:	48 89 01             	mov    %rax,(%rcx)
		if (bps == NULL) {
  11140e:	e9 e1 01 00 00       	jmp    1115f4 <z_cbvprintf_impl+0x9b2>
			bpe = bps + len;
  111413:	4c 01 e8             	add    %r13,%rax
		char sign = 0;
  111416:	45 31 c9             	xor    %r9d,%r9d
			bpe = bps + len;
  111419:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
		size_t nj_len = (bpe - bps);
  111420:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  111427:	4c 29 e8             	sub    %r13,%rax
		if (sign != 0) {
  11142a:	eb 3e                	jmp    11146a <z_cbvprintf_impl+0x828>
		if (bps == NULL) {
  11142c:	4d 85 ed             	test   %r13,%r13
  11142f:	0f 84 bf 01 00 00    	je     1115f4 <z_cbvprintf_impl+0x9b2>
		size_t nj_len = (bpe - bps);
  111435:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  111439:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
  11143d:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  111444:	4c 29 e8             	sub    %r13,%rax
		if (sign != 0) {
  111447:	45 84 c9             	test   %r9b,%r9b
  11144a:	74 1e                	je     11146a <z_cbvprintf_impl+0x828>
			nj_len += 1U;
  11144c:	48 ff c0             	inc    %rax
  11144f:	eb 19                	jmp    11146a <z_cbvprintf_impl+0x828>
  111451:	41 bd bc e1 11 00    	mov    $0x11e1bc,%r13d
		char sign = 0;
  111457:	45 31 c9             	xor    %r9d,%r9d
		size_t nj_len = (bpe - bps);
  11145a:	b8 05 00 00 00       	mov    $0x5,%eax
			bpe = bps + 5;
  11145f:	48 c7 85 78 ff ff ff 	movq   $0x11e1c1,-0x88(%rbp)
  111466:	c1 e1 11 00 
		}

		if (conv->altform_0c) {
  11146a:	8a 4d c2             	mov    -0x3e(%rbp),%cl
  11146d:	89 ce                	mov    %ecx,%esi
  11146f:	40 80 e6 10          	and    $0x10,%sil
  111473:	40 88 b5 77 ff ff ff 	mov    %sil,-0x89(%rbp)
  11147a:	74 06                	je     111482 <z_cbvprintf_impl+0x840>
			nj_len += 2U;
  11147c:	48 83 c0 02          	add    $0x2,%rax
  111480:	eb 0c                	jmp    11148e <z_cbvprintf_impl+0x84c>
		} else if (conv->altform_0) {
  111482:	89 ca                	mov    %ecx,%edx
  111484:	83 e2 08             	and    $0x8,%edx
			nj_len += 1U;
  111487:	80 fa 01             	cmp    $0x1,%dl
  11148a:	48 83 d8 ff          	sbb    $0xffffffffffffffff,%rax
		}

		nj_len += conv->pad0_value;
  11148e:	48 63 55 c4          	movslq -0x3c(%rbp),%rdx
  111492:	48 01 d0             	add    %rdx,%rax
		if (conv->pad_fp) {
  111495:	80 e1 40             	and    $0x40,%cl
		nj_len += conv->pad0_value;
  111498:	89 55 80             	mov    %edx,-0x80(%rbp)
		if (conv->pad_fp) {
  11149b:	74 07                	je     1114a4 <z_cbvprintf_impl+0x862>
			nj_len += conv->pad0_pre_exp;
  11149d:	48 63 55 c8          	movslq -0x38(%rbp),%rdx
  1114a1:	48 01 d0             	add    %rdx,%rax
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
  1114a4:	83 7d 84 00          	cmpl   $0x0,-0x7c(%rbp)
  1114a8:	7e 7e                	jle    111528 <z_cbvprintf_impl+0x8e6>
			width -= (int)nj_len;
  1114aa:	29 45 84             	sub    %eax,-0x7c(%rbp)

			if (!conv->flag_dash) {
  1114ad:	8a 45 c0             	mov    -0x40(%rbp),%al
  1114b0:	a8 04                	test   $0x4,%al
  1114b2:	75 74                	jne    111528 <z_cbvprintf_impl+0x8e6>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
  1114b4:	a8 40                	test   $0x40,%al
  1114b6:	74 27                	je     1114df <z_cbvprintf_impl+0x89d>
					if (sign != 0) {
  1114b8:	45 84 c9             	test   %r9b,%r9b
  1114bb:	74 29                	je     1114e6 <z_cbvprintf_impl+0x8a4>
						OUTC(sign);
  1114bd:	31 c0                	xor    %eax,%eax
  1114bf:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  1114c3:	41 0f be f9          	movsbl %r9b,%edi
  1114c7:	41 ff d6             	call   *%r14
  1114ca:	85 c0                	test   %eax,%eax
  1114cc:	0f 88 2c 01 00 00    	js     1115fe <z_cbvprintf_impl+0x9bc>
  1114d2:	48 ff c3             	inc    %rbx
						sign = 0;
					}
					pad = '0';
  1114d5:	b8 30 00 00 00       	mov    $0x30,%eax
						OUTC(sign);
  1114da:	45 31 c9             	xor    %r9d,%r9d
  1114dd:	eb 0c                	jmp    1114eb <z_cbvprintf_impl+0x8a9>
				char pad = ' ';
  1114df:	b8 20 00 00 00       	mov    $0x20,%eax
  1114e4:	eb 05                	jmp    1114eb <z_cbvprintf_impl+0x8a9>
					pad = '0';
  1114e6:	b8 30 00 00 00       	mov    $0x30,%eax
				}

				while (width-- > 0) {
					OUTC(pad);
  1114eb:	89 85 70 ff ff ff    	mov    %eax,-0x90(%rbp)
					pad = '0';
  1114f1:	8b 55 84             	mov    -0x7c(%rbp),%edx
				while (width-- > 0) {
  1114f4:	ff 4d 84             	decl   -0x7c(%rbp)
  1114f7:	85 d2                	test   %edx,%edx
  1114f9:	7e 2d                	jle    111528 <z_cbvprintf_impl+0x8e6>
					OUTC(pad);
  1114fb:	31 c0                	xor    %eax,%eax
  1114fd:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  111501:	44 88 8d 76 ff ff ff 	mov    %r9b,-0x8a(%rbp)
  111508:	8b bd 70 ff ff ff    	mov    -0x90(%rbp),%edi
  11150e:	41 ff d6             	call   *%r14
  111511:	85 c0                	test   %eax,%eax
  111513:	0f 88 e5 00 00 00    	js     1115fe <z_cbvprintf_impl+0x9bc>
				while (width-- > 0) {
  111519:	8b 55 84             	mov    -0x7c(%rbp),%edx
  11151c:	44 8a 8d 76 ff ff ff 	mov    -0x8a(%rbp),%r9b
					OUTC(pad);
  111523:	48 ff c3             	inc    %rbx
  111526:	eb cc                	jmp    1114f4 <z_cbvprintf_impl+0x8b2>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
  111528:	45 84 c9             	test   %r9b,%r9b
  11152b:	74 18                	je     111545 <z_cbvprintf_impl+0x903>
			OUTC(sign);
  11152d:	31 c0                	xor    %eax,%eax
  11152f:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  111533:	41 0f be f9          	movsbl %r9b,%edi
  111537:	41 ff d6             	call   *%r14
  11153a:	85 c0                	test   %eax,%eax
  11153c:	0f 88 bc 00 00 00    	js     1115fe <z_cbvprintf_impl+0x9bc>
  111542:	48 ff c3             	inc    %rbx
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
  111545:	8a 45 c2             	mov    -0x3e(%rbp),%al
  111548:	a8 10                	test   $0x10,%al
  11154a:	75 04                	jne    111550 <z_cbvprintf_impl+0x90e>
  11154c:	a8 08                	test   $0x8,%al
  11154e:	74 19                	je     111569 <z_cbvprintf_impl+0x927>
				OUTC('0');
  111550:	31 c0                	xor    %eax,%eax
  111552:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  111556:	bf 30 00 00 00       	mov    $0x30,%edi
  11155b:	41 ff d6             	call   *%r14
  11155e:	85 c0                	test   %eax,%eax
  111560:	0f 88 98 00 00 00    	js     1115fe <z_cbvprintf_impl+0x9bc>
  111566:	48 ff c3             	inc    %rbx
			}

			if (conv->altform_0c) {
  111569:	80 bd 77 ff ff ff 00 	cmpb   $0x0,-0x89(%rbp)
  111570:	74 14                	je     111586 <z_cbvprintf_impl+0x944>
				OUTC(conv->specifier);
  111572:	31 c0                	xor    %eax,%eax
  111574:	0f b6 7d c3          	movzbl -0x3d(%rbp),%edi
  111578:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  11157c:	41 ff d6             	call   *%r14
  11157f:	85 c0                	test   %eax,%eax
  111581:	78 7b                	js     1115fe <z_cbvprintf_impl+0x9bc>
  111583:	48 ff c3             	inc    %rbx
			}

			pad_len = conv->pad0_value;
			while (pad_len-- > 0) {
  111586:	8b 45 80             	mov    -0x80(%rbp),%eax
  111589:	01 d8                	add    %ebx,%eax
  11158b:	89 45 80             	mov    %eax,-0x80(%rbp)
  11158e:	8b 45 80             	mov    -0x80(%rbp),%eax
  111591:	29 d8                	sub    %ebx,%eax
  111593:	85 c0                	test   %eax,%eax
  111595:	7e 17                	jle    1115ae <z_cbvprintf_impl+0x96c>
				OUTC('0');
  111597:	31 c0                	xor    %eax,%eax
  111599:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  11159d:	bf 30 00 00 00       	mov    $0x30,%edi
  1115a2:	41 ff d6             	call   *%r14
  1115a5:	85 c0                	test   %eax,%eax
  1115a7:	78 55                	js     1115fe <z_cbvprintf_impl+0x9bc>
  1115a9:	48 ff c3             	inc    %rbx
  1115ac:	eb e0                	jmp    11158e <z_cbvprintf_impl+0x94c>
			}

			OUTS(bps, bpe);
  1115ae:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  1115b5:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  1115b9:	4c 89 ea             	mov    %r13,%rdx
  1115bc:	4c 89 f7             	mov    %r14,%rdi
  1115bf:	e8 24 f6 ff ff       	call   110be8 <outs>
  1115c4:	85 c0                	test   %eax,%eax
  1115c6:	78 36                	js     1115fe <z_cbvprintf_impl+0x9bc>
  1115c8:	44 8b 6d 84          	mov    -0x7c(%rbp),%r13d
  1115cc:	48 98                	cltq   
  1115ce:	48 01 c3             	add    %rax,%rbx
  1115d1:	41 01 dd             	add    %ebx,%r13d
		}

		/* Finish left justification */
		while (width > 0) {
  1115d4:	44 89 e8             	mov    %r13d,%eax
  1115d7:	29 d8                	sub    %ebx,%eax
  1115d9:	85 c0                	test   %eax,%eax
  1115db:	7e 17                	jle    1115f4 <z_cbvprintf_impl+0x9b2>
			OUTC(' ');
  1115dd:	31 c0                	xor    %eax,%eax
  1115df:	48 8b 75 88          	mov    -0x78(%rbp),%rsi
  1115e3:	bf 20 00 00 00       	mov    $0x20,%edi
  1115e8:	41 ff d6             	call   *%r14
  1115eb:	85 c0                	test   %eax,%eax
  1115ed:	78 0f                	js     1115fe <z_cbvprintf_impl+0x9bc>
  1115ef:	48 ff c3             	inc    %rbx
			--width;
  1115f2:	eb e0                	jmp    1115d4 <z_cbvprintf_impl+0x992>
  1115f4:	4d 89 e1             	mov    %r12,%r9
  1115f7:	e9 66 f6 ff ff       	jmp    110c62 <z_cbvprintf_impl+0x20>
		}
	}

	return count;
  1115fc:	89 d8                	mov    %ebx,%eax
#undef OUTS
#undef OUTC
}
  1115fe:	48 83 c4 68          	add    $0x68,%rsp
  111602:	5b                   	pop    %rbx
  111603:	41 5c                	pop    %r12
  111605:	41 5d                	pop    %r13
  111607:	41 5e                	pop    %r14
  111609:	41 5f                	pop    %r15
  11160b:	5d                   	pop    %rbp
  11160c:	c3                   	ret    

000000000011160d <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
  11160d:	c3                   	ret    

000000000011160e <sys_trace_idle>:

void sys_trace_isr_exit(void) {}

void sys_trace_isr_exit_to_scheduler(void) {}

void sys_trace_idle(void) {}
  11160e:	c3                   	ret    

000000000011160f <arch_cpu_idle>:
#include <zephyr/tracing/tracing.h>
#include <zephyr/arch/cpu.h>

__pinned_func
void arch_cpu_idle(void)
{
  11160f:	55                   	push   %rbp
  111610:	48 89 e5             	mov    %rsp,%rbp
	sys_trace_idle();
  111613:	e8 f6 ff ff ff       	call   11160e <sys_trace_idle>
	__asm__ volatile (
  111618:	fb                   	sti    
  111619:	f4                   	hlt    
	    "sti\n\t"
	    "hlt\n\t");
}
  11161a:	5d                   	pop    %rbp
  11161b:	c3                   	ret    

000000000011161c <z_x86_prep_c>:
/* Early global initialization functions, C domain. This runs only on the first
 * CPU for SMP systems.
 */
__boot_func
FUNC_NORETURN void z_x86_prep_c(void *arg)
{
  11161c:	55                   	push   %rbp
	x86_boot_arg_t *cpu_arg = arg;

	_kernel.cpus[0].nested = 0;
  11161d:	31 c0                	xor    %eax,%eax
  11161f:	89 05 db 24 01 00    	mov    %eax,0x124db(%rip)        # 123b00 <_kernel>
{
  111625:	48 89 e5             	mov    %rsp,%rbp

#ifdef CONFIG_MMU
	z_x86_mmu_init();
  111628:	e8 54 02 00 00       	call   111881 <z_x86_mmu_init>
#endif

#if defined(CONFIG_LOAPIC)
	z_loapic_enable(0);
  11162d:	31 ff                	xor    %edi,%edi
  11162f:	e8 0f 09 00 00       	call   111f43 <z_loapic_enable>
#endif

#ifdef CONFIG_X86_64
	x86_64_irq_init();
  111634:	e8 0c 04 00 00       	call   111a45 <x86_64_irq_init>
	} else {
		ARG_UNUSED(cpu_arg);
	}

#ifdef CONFIG_X86_VERY_EARLY_CONSOLE
	z_x86_early_serial_init();
  111639:	e8 a4 02 00 00       	call   1118e2 <z_x86_early_serial_init>
	 * This prevents parsing QEMU console output for the very first
	 * line where it needs to match from the beginning of the line.
	 * So add a dummy newline here so the next output is at
	 * the beginning of a line.
	 */
	arch_printk_char_out('\n');
  11163e:	bf 0a 00 00 00       	mov    $0xa,%edi
  111643:	e8 5d 02 00 00       	call   1118a5 <arch_printk_char_out>
		z_x86_set_stack_guard(z_interrupt_stacks[i]);
	}
#endif

#if defined(CONFIG_SMP)
	z_x86_ipi_setup();
  111648:	e8 fe 04 00 00       	call   111b4b <z_x86_ipi_setup>
#endif

	z_cstart();
  11164d:	e8 ac 75 00 00       	call   118bfe <z_cstart>

0000000000111652 <arch_system_halt>:
	return ret;
}

static ALWAYS_INLINE void sys_out32(uint32_t data, io_port_t port)
{
	__asm__ volatile("outl %0, %w1" :: "a"(data), "Nd"(port));
  111652:	89 f8                	mov    %edi,%eax
  111654:	e7 f4                	out    %eax,$0xf4

0000000000111656 <z_x86_unhandled_cpu_exception>:
}

__pinned_func
FUNC_NORETURN void z_x86_unhandled_cpu_exception(uintptr_t vector,
						 const z_arch_esf_t *esf)
{
  111656:	55                   	push   %rbp
	z_fatal_error(reason, esf);
  111657:	31 ff                	xor    %edi,%edi
{
  111659:	48 89 e5             	mov    %rsp,%rbp
	z_fatal_error(reason, esf);
  11165c:	e8 ea 73 00 00       	call   118a4b <z_fatal_error>

0000000000111661 <z_x86_page_fault_handler>:
};
#endif

__pinned_func
void z_x86_page_fault_handler(z_arch_esf_t *esf)
{
  111661:	55                   	push   %rbp
  111662:	48 89 fe             	mov    %rdi,%rsi
	z_fatal_error(reason, esf);
  111665:	31 ff                	xor    %edi,%edi
{
  111667:	48 89 e5             	mov    %rsp,%rbp
	z_fatal_error(reason, esf);
  11166a:	e8 dc 73 00 00       	call   118a4b <z_fatal_error>

000000000011166f <z_x86_do_kernel_oops>:
	CODE_UNREACHABLE;
}

__pinned_func
void z_x86_do_kernel_oops(const z_arch_esf_t *esf)
{
  11166f:	55                   	push   %rbp
	z_fatal_error(reason, esf);
  111670:	48 89 fe             	mov    %rdi,%rsi
  111673:	8b 7f 08             	mov    0x8(%rdi),%edi
{
  111676:	48 89 e5             	mov    %rsp,%rbp
	z_fatal_error(reason, esf);
  111679:	e8 cd 73 00 00       	call   118a4b <z_fatal_error>

000000000011167e <range_map_unlocked.isra.0>:

	return ret;
}

__pinned_func
static inline int range_map_unlocked(void *virt, uintptr_t phys, size_t size,
  11167e:	55                   	push   %rbp
  11167f:	48 89 e5             	mov    %rsp,%rbp
  111682:	41 57                	push   %r15
  111684:	41 56                	push   %r14
  111686:	49 89 fe             	mov    %rdi,%r14
  111689:	41 55                	push   %r13
  11168b:	49 89 f5             	mov    %rsi,%r13
  11168e:	41 54                	push   %r12
  111690:	49 89 d4             	mov    %rdx,%r12
  111693:	53                   	push   %rbx
  111694:	44 89 cb             	mov    %r9d,%ebx
  111697:	48 83 ec 28          	sub    $0x28,%rsp
  11169b:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  11169f:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  1116a3:	9c                   	pushf  
  1116a4:	fa                   	cli    
  1116a5:	8f 45 b8             	pop    -0x48(%rbp)
  1116a8:	45 31 ff             	xor    %r15d,%r15d
  1116ab:	ba 01 00 00 00       	mov    $0x1,%edx
  1116b0:	4c 89 f8             	mov    %r15,%rax
  1116b3:	f0 48 0f b1 15 c4 4a 	lock cmpxchg %rdx,0x14ac4(%rip)        # 126180 <x86_mmu_lock>
  1116ba:	01 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  1116bc:	74 07                	je     1116c5 <range_map_unlocked.isra.0+0x47>
		arch_spin_relax();
  1116be:	e8 ed 77 00 00       	call   118eb0 <arch_spin_relax>
  1116c3:	eb e6                	jmp    1116ab <range_map_unlocked.isra.0+0x2d>
	if ((size & (CONFIG_MMU_PAGE_SIZE - 1)) == 0U) {
  1116c5:	4c 89 e0             	mov    %r12,%rax
  1116c8:	41 89 d8             	mov    %ebx,%r8d
	for (size_t offset = 0; offset < size; offset += CONFIG_MMU_PAGE_SIZE) {
  1116cb:	31 ff                	xor    %edi,%edi
	CHECKIF(!((entry_flags & paging_levels[0].mask) == 0U)) {
  1116cd:	48 ba 00 f0 ff ff ff 	movabs $0x7ffffffffffff000,%rdx
  1116d4:	ff ff 7f 
	if ((size & (CONFIG_MMU_PAGE_SIZE - 1)) == 0U) {
  1116d7:	25 ff 0f 00 00       	and    $0xfff,%eax
	CHECKIF(!((entry_flags & paging_levels[0].mask) == 0U)) {
  1116dc:	48 23 55 c8          	and    -0x38(%rbp),%rdx
  1116e0:	41 83 e0 0c          	and    $0xc,%r8d
  1116e4:	48 09 d0             	or     %rdx,%rax
	if ((addr & (CONFIG_MMU_PAGE_SIZE - 1)) == 0U) {
  1116e7:	4c 89 ea             	mov    %r13,%rdx
  1116ea:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
	CHECKIF(!((entry_flags & paging_levels[0].mask) == 0U)) {
  1116f0:	48 09 d0             	or     %rdx,%rax
  1116f3:	0f 85 af 00 00 00    	jne    1117a8 <range_map_unlocked.isra.0+0x12a>
  1116f9:	89 d8                	mov    %ebx,%eax
  1116fb:	41 89 da             	mov    %ebx,%r10d
  1116fe:	83 e0 08             	and    $0x8,%eax
  111701:	41 83 e2 02          	and    $0x2,%r10d
  111705:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  111708:	e9 92 00 00 00       	jmp    11179f <range_map_unlocked.isra.0+0x121>
		uint8_t *dest_virt = (uint8_t *)virt + offset;
  11170d:	4d 8d 3c 3e          	lea    (%r14,%rdi,1),%r15
			entry_val = 0;
  111711:	45 31 db             	xor    %r11d,%r11d
		if (zero_entry) {
  111714:	45 85 c0             	test   %r8d,%r8d
  111717:	75 0c                	jne    111725 <range_map_unlocked.isra.0+0xa7>
			entry_val = (pentry_t)(phys + offset) | entry_flags;
  111719:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  11171d:	4d 8d 5c 3d 00       	lea    0x0(%r13,%rdi,1),%r11
  111722:	49 09 c3             	or     %rax,%r11
	return (((uintptr_t)virt >> paging_levels[level].shift) %
  111725:	4c 89 fa             	mov    %r15,%rdx
  111728:	be 40 c7 11 00       	mov    $0x11c740,%esi
  11172d:	48 c1 ea 24          	shr    $0x24,%rdx
		entryp = &table[index];
  111731:	81 e2 f8 0f 00 00    	and    $0xff8,%edx
  111737:	48 81 c2 00 90 14 00 	add    $0x149000,%rdx
		CHECKIF(!((*entryp & MMU_PS) == 0U)) {
  11173e:	4c 8b 0a             	mov    (%rdx),%r9
  111741:	41 f6 c1 80          	test   $0x80,%r9b
  111745:	75 48                	jne    11178f <range_map_unlocked.isra.0+0x111>
		CHECKIF(!(table != NULL)) {
  111747:	4c 23 0e             	and    (%rsi),%r9
  11174a:	74 43                	je     11178f <range_map_unlocked.isra.0+0x111>
	return (((uintptr_t)virt >> paging_levels[level].shift) %
  11174c:	8b 4e 28             	mov    0x28(%rsi),%ecx
  11174f:	4c 89 f8             	mov    %r15,%rax
  111752:	31 d2                	xor    %edx,%edx
  111754:	48 d3 e8             	shr    %cl,%rax
  111757:	48 f7 76 20          	divq   0x20(%rsi)
		if (level == PTE_LEVEL) {
  11175b:	48 83 c6 18          	add    $0x18,%rsi
  11175f:	b8 88 c7 11 00       	mov    $0x11c788,%eax
		entryp = &table[index];
  111764:	48 63 d2             	movslq %edx,%rdx
  111767:	49 8d 14 d1          	lea    (%r9,%rdx,8),%rdx
		if (level == PTE_LEVEL) {
  11176b:	48 39 f0             	cmp    %rsi,%rax
  11176e:	75 ce                	jne    11173e <range_map_unlocked.isra.0+0xc0>
			new_val = 0;
  111770:	31 c9                	xor    %ecx,%ecx
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
  111772:	48 8b 02             	mov    (%rdx),%rax
		} else if (clear) {
  111775:	83 7d b4 00          	cmpl   $0x0,-0x4c(%rbp)
  111779:	75 0d                	jne    111788 <range_map_unlocked.isra.0+0x10a>
			new_val = ((new_val & ~update_mask) |
  11177b:	4c 89 d9             	mov    %r11,%rcx
  11177e:	48 31 c1             	xor    %rax,%rcx
  111781:	48 23 4d c0          	and    -0x40(%rbp),%rcx
  111785:	48 31 c1             	xor    %rax,%rcx
	return __atomic_compare_exchange_n(target, &old_value, new_value,
  111788:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
	} while (atomic_pte_cas(pte, old_val, new_val) == false);
  11178d:	75 e1                	jne    111770 <range_map_unlocked.isra.0+0xf2>
	if (flush) {
  11178f:	45 85 d2             	test   %r10d,%r10d
  111792:	74 04                	je     111798 <range_map_unlocked.isra.0+0x11a>
	__asm__ ("invlpg %0" :: "m" (*page));
  111794:	41 0f 01 3f          	invlpg (%r15)
	for (size_t offset = 0; offset < size; offset += CONFIG_MMU_PAGE_SIZE) {
  111798:	48 81 c7 00 10 00 00 	add    $0x1000,%rdi
  11179f:	4c 39 e7             	cmp    %r12,%rdi
  1117a2:	0f 82 65 ff ff ff    	jb     11170d <range_map_unlocked.isra.0+0x8f>
	if ((options & OPTION_FLUSH) != 0U) {
  1117a8:	80 e3 02             	and    $0x2,%bl
  1117ab:	74 35                	je     1117e2 <range_map_unlocked.isra.0+0x164>
#ifdef DEVICE_MMIO_IS_IN_RAM
	base = z_loapic_regs;
#else
	base = CONFIG_LOAPIC_BASE_ADDRESS;
#endif
	return sys_read32(base + reg);
  1117ad:	48 8b 05 f4 49 01 00 	mov    0x149f4(%rip),%rax        # 1261a8 <z_loapic_regs>
  1117b4:	48 05 00 03 00 00    	add    $0x300,%rax

static ALWAYS_INLINE uint32_t sys_read32(mm_reg_t addr)
{
	uint32_t ret;

	__asm__ volatile("movl %1, %0"
  1117ba:	8b 00                	mov    (%rax),%eax
#ifndef CONFIG_X2APIC
	/*
	 * Legacy xAPIC mode: first wait for any previous IPI to be delivered.
	 */

	while (x86_read_xapic(LOAPIC_ICRLO) & LOAPIC_ICR_BUSY) {
  1117bc:	25 00 10 00 00       	and    $0x1000,%eax
  1117c1:	75 ea                	jne    1117ad <range_map_unlocked.isra.0+0x12f>
	sys_write32(val, base + reg);
  1117c3:	48 8b 1d de 49 01 00 	mov    0x149de(%rip),%rbx        # 1261a8 <z_loapic_regs>
	__asm__ volatile("movl %0, %1"
  1117ca:	89 83 10 03 00 00    	mov    %eax,0x310(%rbx)
  1117d0:	48 8b 05 d1 49 01 00 	mov    0x149d1(%rip),%rax        # 1261a8 <z_loapic_regs>
  1117d7:	ba 23 40 0c 00       	mov    $0xc4023,%edx
  1117dc:	89 90 00 03 00 00    	mov    %edx,0x300(%rax)
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
  1117e2:	31 c0                	xor    %eax,%eax
  1117e4:	48 87 05 95 49 01 00 	xchg   %rax,0x14995(%rip)        # 126180 <x86_mmu_lock>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  1117eb:	0f ba 65 b8 09       	btl    $0x9,-0x48(%rbp)
  1117f0:	73 01                	jae    1117f3 <range_map_unlocked.isra.0+0x175>
		__asm__ volatile ("sti" ::: "memory");
  1117f2:	fb                   	sti    
	key = k_spin_lock(&x86_mmu_lock);
	ret = range_map(virt, phys, size, entry_flags, mask, options);
	k_spin_unlock(&x86_mmu_lock, key);

	return ret;
}
  1117f3:	48 83 c4 28          	add    $0x28,%rsp
  1117f7:	5b                   	pop    %rbx
  1117f8:	41 5c                	pop    %r12
  1117fa:	41 5d                	pop    %r13
  1117fc:	41 5e                	pop    %r14
  1117fe:	41 5f                	pop    %r15
  111800:	5d                   	pop    %rbp
  111801:	c3                   	ret    

0000000000111802 <z_x86_tlb_ipi>:
 */
static inline void z_x86_cr3_set(uintptr_t phys)
{
	__ASSERT((phys & PTABLES_ALIGN) == 0U, "unaligned page tables");
#ifdef CONFIG_X86_64
	__asm__ volatile("movq %0, %%cr3\n\t" : : "r" (phys) : "memory");
  111802:	b8 00 90 14 00       	mov    $0x149000,%eax
  111807:	0f 22 d8             	mov    %rax,%cr3
}
  11180a:	c3                   	ret    

000000000011180b <arch_mem_map>:
	 *
	 * Support for PAT is not implemented yet. Many systems may have
	 * BIOS-populated MTRR values such that these cache settings are
	 * redundant.
	 */
	switch (flags & K_MEM_CACHE_MASK) {
  11180b:	89 c8                	mov    %ecx,%eax
}

/* map new region virt..virt+size to phys with provided arch-neutral flags */
__pinned_func
void arch_mem_map(void *virt, uintptr_t phys, size_t size, uint32_t flags)
{
  11180d:	49 89 f2             	mov    %rsi,%r10
  111810:	89 ce                	mov    %ecx,%esi
		entry_flags |= MMU_PWT;
  111812:	b9 09 00 00 00       	mov    $0x9,%ecx
  111817:	83 e0 07             	and    $0x7,%eax
	switch (flags & K_MEM_CACHE_MASK) {
  11181a:	83 f8 01             	cmp    $0x1,%eax
  11181d:	74 11                	je     111830 <arch_mem_map+0x25>
	pentry_t entry_flags = MMU_P;
  11181f:	83 f8 02             	cmp    $0x2,%eax
  111822:	b9 01 00 00 00       	mov    $0x1,%ecx
  111827:	b8 11 00 00 00       	mov    $0x11,%eax
  11182c:	48 0f 44 c8          	cmove  %rax,%rcx
	if ((flags & K_MEM_PERM_RW) != 0U) {
  111830:	40 f6 c6 08          	test   $0x8,%sil
  111834:	74 07                	je     11183d <arch_mem_map+0x32>
		entry_flags |= ENTRY_RW;
  111836:	48 81 c9 02 02 00 00 	or     $0x202,%rcx
	if ((flags & K_MEM_PERM_USER) != 0U) {
  11183d:	40 f6 c6 20          	test   $0x20,%sil
  111841:	74 07                	je     11184a <arch_mem_map+0x3f>
		entry_flags |= ENTRY_US;
  111843:	48 81 c9 04 04 00 00 	or     $0x404,%rcx
	if ((flags & K_MEM_PERM_EXEC) == 0U) {
  11184a:	40 80 e6 10          	and    $0x10,%sil
  11184e:	75 0d                	jne    11185d <arch_mem_map+0x52>
		entry_flags |= ENTRY_XD;
  111850:	48 b8 00 08 00 00 00 	movabs $0x8000000000000800,%rax
  111857:	00 00 80 
  11185a:	48 09 c1             	or     %rax,%rcx
	int ret;

	ret = range_map_unlocked(virt, phys, size, flags_to_entry(flags),
  11185d:	45 31 c9             	xor    %r9d,%r9d
  111860:	49 83 c8 ff          	or     $0xffffffffffffffff,%r8
  111864:	4c 89 d6             	mov    %r10,%rsi
  111867:	e9 12 fe ff ff       	jmp    11167e <range_map_unlocked.isra.0>

000000000011186c <arch_mem_unmap>:
	ARG_UNUSED(ret);
}

/* unmap region addr..addr+size, reset entries and flush TLB */
void arch_mem_unmap(void *addr, size_t size)
{
  11186c:	48 89 f2             	mov    %rsi,%rdx
	int ret;

	ret = range_map_unlocked((void *)addr, 0, size, 0, 0,
  11186f:	41 b9 0a 00 00 00    	mov    $0xa,%r9d
  111875:	45 31 c0             	xor    %r8d,%r8d
  111878:	31 c9                	xor    %ecx,%ecx
  11187a:	31 f6                	xor    %esi,%esi
  11187c:	e9 fd fd ff ff       	jmp    11167e <range_map_unlocked.isra.0>

0000000000111881 <z_x86_mmu_init>:

#ifdef CONFIG_X86_PAE
	identity_map_remove(0);
#endif
#endif
}
  111881:	c3                   	ret    

0000000000111882 <arch_reserved_pages_update>:

#ifdef CONFIG_ARCH_HAS_RESERVED_PAGE_FRAMES
__boot_func
static void mark_addr_page_reserved(uintptr_t addr, size_t len)
{
	uintptr_t pos = ROUND_DOWN(addr, CONFIG_MMU_PAGE_SIZE);
  111882:	31 c0                	xor    %eax,%eax
static inline struct z_page_frame *z_phys_to_page_frame(uintptr_t phys)
{
	__ASSERT(z_is_page_frame(phys),
		 "0x%lx not an SRAM physical address", phys);

	return &z_page_frames[(phys - Z_PHYS_RAM_START) /
  111884:	48 89 c2             	mov    %rax,%rdx
	uintptr_t end = ROUND_UP(addr + len, CONFIG_MMU_PAGE_SIZE);

	for (; pos < end; pos += CONFIG_MMU_PAGE_SIZE) {
  111887:	48 05 00 10 00 00    	add    $0x1000,%rax
  11188d:	48 c1 ea 0c          	shr    $0xc,%rdx
			continue;
		}

		struct z_page_frame *pf = z_phys_to_page_frame(pos);

		pf->flags |= Z_PAGE_FRAME_RESERVED;
  111891:	48 8d 14 d2          	lea    (%rdx,%rdx,8),%rdx
  111895:	80 8a c8 3c 12 00 02 	orb    $0x2,0x123cc8(%rdx)
	for (; pos < end; pos += CONFIG_MMU_PAGE_SIZE) {
  11189c:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  1118a2:	75 e0                	jne    111884 <arch_reserved_pages_update+0x2>
		}

		mark_addr_page_reserved(entry->base, entry->length);
	}
#endif /* CONFIG_X86_MEMMAP */
}
  1118a4:	c3                   	ret    

00000000001118a5 <arch_printk_char_out>:
	OUT(REG_THR, c);
}

int arch_printk_char_out(int c)
{
	if (!early_serial_init_done) {
  1118a5:	80 3d bc 49 01 00 00 	cmpb   $0x0,0x149bc(%rip)        # 126268 <early_serial_init_done>
  1118ac:	75 08                	jne    1118b6 <arch_printk_char_out+0x11>
		suppressed_chars++;
  1118ae:	ff 05 94 49 01 00    	incl   0x14994(%rip)        # 126248 <suppressed_chars>
		return c;
  1118b4:	eb 29                	jmp    1118df <arch_printk_char_out+0x3a>
	}

	if (c == '\n') {
  1118b6:	83 ff 0a             	cmp    $0xa,%edi
  1118b9:	75 12                	jne    1118cd <arch_printk_char_out+0x28>
	__asm__ volatile("inb %w1, %b0" : "=a"(ret) : "Nd"(port));
  1118bb:	ba fd 03 00 00       	mov    $0x3fd,%edx
  1118c0:	ec                   	in     (%dx),%al
	while ((IN(REG_LSR) & LSR_THRE) == 0) {
  1118c1:	a8 20                	test   $0x20,%al
  1118c3:	74 fb                	je     1118c0 <arch_printk_char_out+0x1b>
	__asm__ volatile("outb %b0, %w1" :: "a"(data), "Nd"(port));
  1118c5:	b0 0d                	mov    $0xd,%al
  1118c7:	ba f8 03 00 00       	mov    $0x3f8,%edx
  1118cc:	ee                   	out    %al,(%dx)
	__asm__ volatile("inb %w1, %b0" : "=a"(ret) : "Nd"(port));
  1118cd:	ba fd 03 00 00       	mov    $0x3fd,%edx
  1118d2:	ec                   	in     (%dx),%al
  1118d3:	a8 20                	test   $0x20,%al
  1118d5:	74 fb                	je     1118d2 <arch_printk_char_out+0x2d>
	__asm__ volatile("outb %b0, %w1" :: "a"(data), "Nd"(port));
  1118d7:	ba f8 03 00 00       	mov    $0x3f8,%edx
  1118dc:	89 f8                	mov    %edi,%eax
  1118de:	ee                   	out    %al,(%dx)
		serout('\r');
	}
	serout(c);
	return c;
}
  1118df:	89 f8                	mov    %edi,%eax
  1118e1:	c3                   	ret    

00000000001118e2 <z_x86_early_serial_init>:
  1118e2:	31 f6                	xor    %esi,%esi
  1118e4:	bf f9 03 00 00       	mov    $0x3f9,%edi
  1118e9:	89 f0                	mov    %esi,%eax
  1118eb:	89 fa                	mov    %edi,%edx
  1118ed:	ee                   	out    %al,(%dx)
  1118ee:	b9 fb 03 00 00       	mov    $0x3fb,%ecx
  1118f3:	b0 80                	mov    $0x80,%al
  1118f5:	89 ca                	mov    %ecx,%edx
  1118f7:	ee                   	out    %al,(%dx)
  1118f8:	b0 01                	mov    $0x1,%al
  1118fa:	ba f8 03 00 00       	mov    $0x3f8,%edx
  1118ff:	ee                   	out    %al,(%dx)
  111900:	89 f0                	mov    %esi,%eax
  111902:	89 fa                	mov    %edi,%edx
  111904:	ee                   	out    %al,(%dx)
  111905:	b0 03                	mov    $0x3,%al
  111907:	89 ca                	mov    %ecx,%edx
  111909:	ee                   	out    %al,(%dx)
  11190a:	ba fc 03 00 00       	mov    $0x3fc,%edx
  11190f:	ee                   	out    %al,(%dx)
  111910:	b0 07                	mov    $0x7,%al
  111912:	ba fa 03 00 00       	mov    $0x3fa,%edx
  111917:	ee                   	out    %al,(%dx)
	/* Turn on FIFO. Some hardware needs this before transmitting */
	OUT(REG_FCR, FCR_FIFO | FCR_FIFO_1 | FCR_RCVRCLR | FCR_XMITCLR);

	early_serial_init_done = true;

	if (suppressed_chars != 0U) {
  111918:	8b 35 2a 49 01 00    	mov    0x1492a(%rip),%esi        # 126248 <suppressed_chars>
	early_serial_init_done = true;
  11191e:	c6 05 43 49 01 00 01 	movb   $0x1,0x14943(%rip)        # 126268 <early_serial_init_done>
	if (suppressed_chars != 0U) {
  111925:	85 f6                	test   %esi,%esi
  111927:	74 0c                	je     111935 <z_x86_early_serial_init+0x53>
		printk("WARNING: %u chars lost before early serial init\n",
  111929:	bf c2 e1 11 00       	mov    $0x11e1c2,%edi
  11192e:	31 c0                	xor    %eax,%eax
  111930:	e9 2e ec ff ff       	jmp    110563 <printk>
		       suppressed_chars);
	}
}
  111935:	c3                   	ret    

0000000000111936 <z_loapic_ipi>:
	ipi |= vector;
  111936:	0f b6 d2             	movzbl %dl,%edx
  111939:	09 f2                	or     %esi,%edx
	return sys_read32(base + reg);
  11193b:	48 8b 05 66 48 01 00 	mov    0x14866(%rip),%rax        # 1261a8 <z_loapic_regs>
  111942:	48 05 00 03 00 00    	add    $0x300,%rax
	__asm__ volatile("movl %1, %0"
  111948:	8b 00                	mov    (%rax),%eax
	while (x86_read_xapic(LOAPIC_ICRLO) & LOAPIC_ICR_BUSY) {
  11194a:	0f ba e0 0c          	bt     $0xc,%eax
  11194e:	72 eb                	jb     11193b <z_loapic_ipi+0x5>
	sys_write32(val, base + reg);
  111950:	48 8b 05 51 48 01 00 	mov    0x14851(%rip),%rax        # 1261a8 <z_loapic_regs>
	}

	x86_write_xapic(LOAPIC_ICRHI, apic_id << 24);
  111957:	c1 e7 18             	shl    $0x18,%edi
	__asm__ volatile("movl %0, %1"
  11195a:	89 b8 10 03 00 00    	mov    %edi,0x310(%rax)
	sys_write32(val, base + reg);
  111960:	48 8b 05 41 48 01 00 	mov    0x14841(%rip),%rax        # 1261a8 <z_loapic_regs>
  111967:	89 90 00 03 00 00    	mov    %edx,0x300(%rax)
	 * x2APIC mode is greatly simplified: one write, no delivery status.
	 */

	x86_write_x2apic(LOAPIC_ICRLO, (((uint64_t) apic_id) << 32) | ipi);
#endif
}
  11196d:	c3                   	ret    

000000000011196e <arch_start_cpu>:
 * will enter the kernel at fn(arg), running on the specified stack.
 */

void arch_start_cpu(int cpu_num, k_thread_stack_t *stack, int sz,
		    arch_cpustart_t fn, void *arg)
{
  11196e:	55                   	push   %rbp
			/* We update the apic_id, x86_ap_start will need it. */
			x86_cpu_loapics[cpu_num] = cpu->apic_id;
		}
	}

	apic_id = x86_cpu_loapics[cpu_num];
  11196f:	48 63 ff             	movslq %edi,%rdi

	x86_cpuboot[cpu_num].sp = (uint64_t) Z_KERNEL_STACK_BUFFER(stack) + sz;
  111972:	48 63 d2             	movslq %edx,%rdx
  111975:	48 01 d6             	add    %rdx,%rsi
{
  111978:	48 89 e5             	mov    %rsp,%rbp
  11197b:	41 54                	push   %r12
	x86_cpuboot[cpu_num].stack_size = sz;
	x86_cpuboot[cpu_num].fn = fn;
	x86_cpuboot[cpu_num].arg = arg;

	z_loapic_ipi(apic_id, LOAPIC_ICR_IPI_INIT, 0);
  11197d:	44 0f b6 a7 64 29 14 	movzbl 0x142964(%rdi),%r12d
  111984:	00 
{
  111985:	53                   	push   %rbx
	x86_cpuboot[cpu_num].sp = (uint64_t) Z_KERNEL_STACK_BUFFER(stack) + sz;
  111986:	48 6b df 30          	imul   $0x30,%rdi,%rbx
	z_loapic_ipi(apic_id, LOAPIC_ICR_IPI_INIT, 0);
  11198a:	44 89 e7             	mov    %r12d,%edi
	x86_cpuboot[cpu_num].sp = (uint64_t) Z_KERNEL_STACK_BUFFER(stack) + sz;
  11198d:	48 89 b3 50 1a 14 00 	mov    %rsi,0x141a50(%rbx)
	z_loapic_ipi(apic_id, LOAPIC_ICR_IPI_INIT, 0);
  111994:	be 00 45 00 00       	mov    $0x4500,%esi
	x86_cpuboot[cpu_num].stack_size = sz;
  111999:	48 89 93 58 1a 14 00 	mov    %rdx,0x141a58(%rbx)
	z_loapic_ipi(apic_id, LOAPIC_ICR_IPI_INIT, 0);
  1119a0:	31 d2                	xor    %edx,%edx
	x86_cpuboot[cpu_num].fn = fn;
  1119a2:	48 89 8b 60 1a 14 00 	mov    %rcx,0x141a60(%rbx)
	x86_cpuboot[cpu_num].arg = arg;
  1119a9:	4c 89 83 68 1a 14 00 	mov    %r8,0x141a68(%rbx)
	z_loapic_ipi(apic_id, LOAPIC_ICR_IPI_INIT, 0);
  1119b0:	e8 81 ff ff ff       	call   111936 <z_loapic_ipi>
	z_impl_k_busy_wait(usec_to_wait);
  1119b5:	bf 10 27 00 00       	mov    $0x2710,%edi
  1119ba:	e8 25 70 00 00       	call   1189e4 <z_impl_k_busy_wait>
	uint8_t vector = ((unsigned long) x86_ap_start) >> 12;
  1119bf:	ba 0a 10 00 00       	mov    $0x100a,%edx
	k_busy_wait(10000);
	z_loapic_ipi(apic_id, LOAPIC_ICR_IPI_STARTUP, vector);
  1119c4:	be 00 46 00 00       	mov    $0x4600,%esi
  1119c9:	44 89 e7             	mov    %r12d,%edi
	uint8_t vector = ((unsigned long) x86_ap_start) >> 12;
  1119cc:	48 c1 ea 0c          	shr    $0xc,%rdx
	z_loapic_ipi(apic_id, LOAPIC_ICR_IPI_STARTUP, vector);
  1119d0:	0f b6 d2             	movzbl %dl,%edx
  1119d3:	e8 5e ff ff ff       	call   111936 <z_loapic_ipi>

	while (x86_cpuboot[cpu_num].ready == 0) {
  1119d8:	8b 83 40 1a 14 00    	mov    0x141a40(%rbx),%eax
  1119de:	85 c0                	test   %eax,%eax
  1119e0:	74 f6                	je     1119d8 <arch_start_cpu+0x6a>
	}
}
  1119e2:	5b                   	pop    %rbx
  1119e3:	41 5c                	pop    %r12
  1119e5:	5d                   	pop    %rbp
  1119e6:	c3                   	ret    

00000000001119e7 <z_x86_cpu_init>:

/* Per-CPU initialization, C domain. On the first CPU, z_x86_prep_c is the
 * next step. For other CPUs it is probably smp_init_top().
 */
FUNC_NORETURN void z_x86_cpu_init(struct x86_cpuboot *cpuboot)
{
  1119e7:	55                   	push   %rbp
  1119e8:	48 89 e5             	mov    %rsp,%rbp
  1119eb:	41 54                	push   %r12
  1119ed:	49 89 fc             	mov    %rdi,%r12
	x86_sse_init(NULL);
  1119f0:	31 ff                	xor    %edi,%edi
{
  1119f2:	53                   	push   %rbx

	/* The internal cpu_number is the index to x86_cpuboot[] */
	unsigned char cpu_num = (unsigned char)(cpuboot - x86_cpuboot);
  1119f3:	4c 89 e3             	mov    %r12,%rbx
  1119f6:	48 81 eb 40 1a 14 00 	sub    $0x141a40,%rbx
  1119fd:	48 c1 fb 04          	sar    $0x4,%rbx
	x86_sse_init(NULL);
  111a01:	e8 b5 f7 ee ff       	call   11bb <x86_sse_init>
	unsigned char cpu_num = (unsigned char)(cpuboot - x86_cpuboot);
  111a06:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
  111a0d:	aa aa aa 
  111a10:	48 0f af d8          	imul   %rax,%rbx

	if (cpu_num == 0U) {
  111a14:	84 db                	test   %bl,%bl
  111a16:	75 05                	jne    111a1d <z_x86_cpu_init+0x36>
		/* Only need to do these once per boot */
		z_bss_zero();
  111a18:	e8 39 71 00 00       	call   118b56 <z_bss_zero>
		z_data_copy();
	}

	z_loapic_enable(cpu_num);
  111a1d:	0f b6 fb             	movzbl %bl,%edi
  111a20:	e8 1e 05 00 00       	call   111f43 <z_loapic_enable>
	/* Mask applied to RFLAGS when making a syscall */
	z_x86_msr_write(X86_FMASK_MSR, EFLAGS_SYSCALL);
#endif

	/* Enter kernel, never return */
	cpuboot->ready++;
  111a25:	41 8b 04 24          	mov    (%r12),%eax
	cpuboot->fn(cpuboot->arg);
  111a29:	49 8b 7c 24 28       	mov    0x28(%r12),%rdi
	cpuboot->ready++;
  111a2e:	ff c0                	inc    %eax
  111a30:	41 89 04 24          	mov    %eax,(%r12)
	cpuboot->fn(cpuboot->arg);
  111a34:	41 ff 54 24 20       	call   *0x20(%r12)

0000000000111a39 <irq_spurious>:
#endif /* CONFIG_INTEL_VTD_ICTL */

static void irq_spurious(const void *arg)
{
	LOG_ERR("Spurious interrupt, vector %d\n", (uint32_t)(uint64_t)arg);
	z_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
  111a39:	31 f6                	xor    %esi,%esi
  111a3b:	bf 01 00 00 00       	mov    $0x1,%edi
  111a40:	e9 06 70 00 00       	jmp    118a4b <z_fatal_error>

0000000000111a45 <x86_64_irq_init>:
}

void x86_64_irq_init(void)
{
  111a45:	b8 20 00 00 00       	mov    $0x20,%eax
	for (int i = 0; i < NR_IRQ_VECTORS; i++) {
		x86_irq_funcs[i] = irq_spurious;
  111a4a:	48 c7 04 c5 20 29 12 	movq   $0x111a39,0x122920(,%rax,8)
  111a51:	00 39 1a 11 00 
		x86_irq_args[i] = (const void *)(long)(i + IV_IRQS);
  111a56:	48 89 04 c5 20 22 12 	mov    %rax,0x122220(,%rax,8)
  111a5d:	00 
	for (int i = 0; i < NR_IRQ_VECTORS; i++) {
  111a5e:	48 ff c0             	inc    %rax
  111a61:	48 3d 00 01 00 00    	cmp    $0x100,%rax
  111a67:	75 e1                	jne    111a4a <x86_64_irq_init+0x5>
	}
}
  111a69:	c3                   	ret    

0000000000111a6a <z_x86_allocate_vector>:

	if (priority >= MAX_PRIORITY) {
		priority = MAX_PRIORITY;
	}

	if (vector == -1) {
  111a6a:	89 f0                	mov    %esi,%eax
  111a6c:	83 fe ff             	cmp    $0xffffffff,%esi
  111a6f:	75 10                	jne    111a81 <z_x86_allocate_vector+0x17>
	if (priority >= MAX_PRIORITY) {
  111a71:	b8 0d 00 00 00       	mov    $0xd,%eax
  111a76:	39 c7                	cmp    %eax,%edi
  111a78:	0f 47 f8             	cmova  %eax,%edi
		vector = (priority * VECTORS_PER_PRIORITY) + IV_IRQS;
  111a7b:	8d 47 02             	lea    0x2(%rdi),%eax
  111a7e:	c1 e0 04             	shl    $0x4,%eax
	}

	for (i = 0; i < VECTORS_PER_PRIORITY; ++i, ++vector) {
  111a81:	8d 48 10             	lea    0x10(%rax),%ecx
		if (prev_vector != 1 && vector == prev_vector) {
  111a84:	83 fe 01             	cmp    $0x1,%esi
  111a87:	40 0f 95 c7          	setne  %dil
  111a8b:	39 c6                	cmp    %eax,%esi
  111a8d:	0f 94 c2             	sete   %dl
#ifdef CONFIG_IRQ_OFFLOAD
		if (vector == CONFIG_IRQ_OFFLOAD_VECTOR) {
			continue;
		}
#endif
		if (vector == Z_X86_OOPS_VECTOR) {
  111a90:	40 84 d7             	test   %dl,%dil
  111a93:	75 19                	jne    111aae <z_x86_allocate_vector+0x44>
  111a95:	83 f8 20             	cmp    $0x20,%eax
  111a98:	74 14                	je     111aae <z_x86_allocate_vector+0x44>
			continue;
		}

		if (x86_irq_funcs[vector - IV_IRQS] == irq_spurious) {
  111a9a:	8d 50 e0             	lea    -0x20(%rax),%edx
  111a9d:	48 63 d2             	movslq %edx,%rdx
  111aa0:	48 81 3c d5 20 2a 12 	cmpq   $0x111a39,0x122a20(,%rdx,8)
  111aa7:	00 39 1a 11 00 
  111aac:	74 09                	je     111ab7 <z_x86_allocate_vector+0x4d>
	for (i = 0; i < VECTORS_PER_PRIORITY; ++i, ++vector) {
  111aae:	ff c0                	inc    %eax
  111ab0:	39 c8                	cmp    %ecx,%eax
  111ab2:	75 d0                	jne    111a84 <z_x86_allocate_vector+0x1a>
			return vector;
		}
	}

	return -1;
  111ab4:	83 c8 ff             	or     $0xffffffff,%eax
}
  111ab7:	c3                   	ret    

0000000000111ab8 <z_x86_irq_connect_on_vector>:
void z_x86_irq_connect_on_vector(unsigned int irq,
				 uint8_t vector,
				 void (*func)(const void *arg),
				 const void *arg)
{
	_irq_to_interrupt_vector[irq] = vector;
  111ab8:	89 ff                	mov    %edi,%edi
  111aba:	40 88 b7 20 31 12 00 	mov    %sil,0x123120(%rdi)
	x86_irq_funcs[vector - IV_IRQS] = func;
  111ac1:	40 0f b6 f6          	movzbl %sil,%esi
  111ac5:	83 ee 20             	sub    $0x20,%esi
  111ac8:	48 63 f6             	movslq %esi,%rsi
  111acb:	48 89 14 f5 20 2a 12 	mov    %rdx,0x122a20(,%rsi,8)
  111ad2:	00 
	x86_irq_args[vector - IV_IRQS] = arg;
  111ad3:	48 89 0c f5 20 23 12 	mov    %rcx,0x122320(,%rsi,8)
  111ada:	00 
}
  111adb:	c3                   	ret    

0000000000111adc <arch_irq_connect_dynamic>:
 */

int arch_irq_connect_dynamic(unsigned int irq, unsigned int priority,
			     void (*func)(const void *arg),
			     const void *arg, uint32_t flags)
{
  111adc:	55                   	push   %rbp
  111add:	48 89 e5             	mov    %rsp,%rbp
  111ae0:	41 57                	push   %r15
  111ae2:	49 89 cf             	mov    %rcx,%r15
  111ae5:	41 56                	push   %r14
  111ae7:	49 89 d6             	mov    %rdx,%r14
  111aea:	41 55                	push   %r13
  111aec:	41 54                	push   %r12
  111aee:	41 89 fc             	mov    %edi,%r12d
  111af1:	53                   	push   %rbx
  111af2:	89 f3                	mov    %esi,%ebx
  111af4:	48 83 ec 18          	sub    $0x18,%rsp
  111af8:	44 89 45 cc          	mov    %r8d,-0x34(%rbp)
	uint32_t key;
	int vector;

	__ASSERT(irq <= CONFIG_MAX_IRQ_LINES, "IRQ %u out of range", irq);

	key = irq_lock();
  111afc:	e8 0c 88 00 00       	call   11a30d <z_smp_global_lock>

	vector = z_x86_allocate_vector(priority, -1);
  111b01:	89 df                	mov    %ebx,%edi
  111b03:	83 ce ff             	or     $0xffffffff,%esi
	key = irq_lock();
  111b06:	41 89 c5             	mov    %eax,%r13d
	vector = z_x86_allocate_vector(priority, -1);
  111b09:	e8 5c ff ff ff       	call   111a6a <z_x86_allocate_vector>
  111b0e:	89 c3                	mov    %eax,%ebx
	if (vector >= 0) {
  111b10:	85 c0                	test   %eax,%eax
  111b12:	78 1e                	js     111b32 <arch_irq_connect_dynamic+0x56>
			vtd_set_irte_vector(vtd, irte, vector);
			vtd_set_irte_irq(vtd, irte, irq);
		}
#endif /* CONFIG_INTEL_VTD_ICTL */

		z_irq_controller_irq_config(vector, irq, flags);
  111b14:	8b 55 cc             	mov    -0x34(%rbp),%edx
  111b17:	44 89 e6             	mov    %r12d,%esi
  111b1a:	89 c7                	mov    %eax,%edi
  111b1c:	e8 df 05 00 00       	call   112100 <z_irq_controller_irq_config>
		z_x86_irq_connect_on_vector(irq, vector, func, arg);
  111b21:	0f b6 f3             	movzbl %bl,%esi
  111b24:	4c 89 f9             	mov    %r15,%rcx
  111b27:	4c 89 f2             	mov    %r14,%rdx
  111b2a:	44 89 e7             	mov    %r12d,%edi
  111b2d:	e8 86 ff ff ff       	call   111ab8 <z_x86_irq_connect_on_vector>
	}

	irq_unlock(key);
  111b32:	44 89 ef             	mov    %r13d,%edi
  111b35:	e8 08 88 00 00       	call   11a342 <z_smp_global_unlock>
	return vector;
}
  111b3a:	48 83 c4 18          	add    $0x18,%rsp
  111b3e:	89 d8                	mov    %ebx,%eax
  111b40:	5b                   	pop    %rbx
  111b41:	41 5c                	pop    %r12
  111b43:	41 5d                	pop    %r13
  111b45:	41 5e                	pop    %r14
  111b47:	41 5f                	pop    %r15
  111b49:	5d                   	pop    %rbp
  111b4a:	c3                   	ret    

0000000000111b4b <z_x86_ipi_setup>:
	/*
	 * z_sched_ipi() doesn't have the same signature as a typical ISR, so
	 * we fudge it with a cast. the argument is ignored, no harm done.
	 */

	x86_irq_funcs[CONFIG_SCHED_IPI_VECTOR - IV_IRQS] =
  111b4b:	48 c7 05 da 0e 01 00 	movq   $0x1199fd,0x10eda(%rip)        # 122a30 <x86_irq_funcs+0x10>
  111b52:	fd 99 11 00 
		(void *) z_sched_ipi;

	/* TLB shootdown handling */
	x86_irq_funcs[CONFIG_TLB_IPI_VECTOR - IV_IRQS] = z_x86_tlb_ipi;
  111b56:	48 c7 05 d7 0e 01 00 	movq   $0x111802,0x10ed7(%rip)        # 122a38 <x86_irq_funcs+0x18>
  111b5d:	02 18 11 00 
}
  111b61:	c3                   	ret    

0000000000111b62 <arch_sched_ipi>:
	return sys_read32(base + reg);
  111b62:	48 8b 05 3f 46 01 00 	mov    0x1463f(%rip),%rax        # 1261a8 <z_loapic_regs>
  111b69:	48 05 00 03 00 00    	add    $0x300,%rax
	__asm__ volatile("movl %1, %0"
  111b6f:	8b 00                	mov    (%rax),%eax
	while (x86_read_xapic(LOAPIC_ICRLO) & LOAPIC_ICR_BUSY) {
  111b71:	25 00 10 00 00       	and    $0x1000,%eax
  111b76:	75 ea                	jne    111b62 <arch_sched_ipi>
	sys_write32(val, base + reg);
  111b78:	48 8b 0d 29 46 01 00 	mov    0x14629(%rip),%rcx        # 1261a8 <z_loapic_regs>
	__asm__ volatile("movl %0, %1"
  111b7f:	89 81 10 03 00 00    	mov    %eax,0x310(%rcx)
  111b85:	48 8b 05 1c 46 01 00 	mov    0x1461c(%rip),%rax        # 1261a8 <z_loapic_regs>
  111b8c:	ba 22 40 0c 00       	mov    $0xc4022,%edx
  111b91:	89 90 00 03 00 00    	mov    %edx,0x300(%rax)
 * assumes the use of a local APIC (but there's no other mechanism).
 */
void arch_sched_ipi(void)
{
	z_loapic_ipi(0, LOAPIC_ICR_IPI_OTHERS, CONFIG_SCHED_IPI_VECTOR);
}
  111b97:	c3                   	ret    

0000000000111b98 <arch_new_thread>:
};

void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
  111b98:	55                   	push   %rbp
	thread->arch.ss = X86_KERNEL_DS;
#else
	switch_entry = z_thread_entry;
#endif
	iframe = Z_STACK_PTR_TO_FRAME(struct x86_initial_frame, stack_ptr);
	iframe->rip = 0U;
  111b99:	31 f6                	xor    %esi,%esi
	iframe = Z_STACK_PTR_TO_FRAME(struct x86_initial_frame, stack_ptr);
  111b9b:	48 83 ea 08          	sub    $0x8,%rdx
{
  111b9f:	48 89 e5             	mov    %rsp,%rbp
  111ba2:	53                   	push   %rbx
  111ba3:	48 89 fb             	mov    %rdi,%rbx
  111ba6:	50                   	push   %rax
	 * thread->callee_saved.rip
	 */
	thread->arch.rdi = (long) entry;
	thread->arch.rsi = (long) p1;
	thread->arch.rdx = (long) p2;
	thread->arch.rcx = (long) p3;
  111ba7:	48 8b 45 10          	mov    0x10(%rbp),%rax
	iframe->rip = 0U;
  111bab:	48 89 32             	mov    %rsi,(%rdx)
	iframe = Z_STACK_PTR_TO_FRAME(struct x86_initial_frame, stack_ptr);
  111bae:	48 89 57 50          	mov    %rdx,0x50(%rdi)
	thread->callee_saved.rip = (long) switch_entry;
  111bb2:	48 c7 87 88 00 00 00 	movq   $0x1105f0,0x88(%rdi)
  111bb9:	f0 05 11 00 
	thread->callee_saved.rflags = EFLAGS_INITIAL;
  111bbd:	48 c7 87 90 00 00 00 	movq   $0x200,0x90(%rdi)
  111bc4:	00 02 00 00 
	thread->arch.rdi = (long) entry;
  111bc8:	48 89 8f f8 00 00 00 	mov    %rcx,0xf8(%rdi)
	thread->arch.rsi = (long) p1;
  111bcf:	4c 89 87 f0 00 00 00 	mov    %r8,0xf0(%rdi)
	thread->arch.rdx = (long) p2;
  111bd6:	4c 89 8f e8 00 00 00 	mov    %r9,0xe8(%rdi)
	thread->arch.rcx = (long) p3;
  111bdd:	48 89 87 e0 00 00 00 	mov    %rax,0xe0(%rdi)

	x86_sse_init(thread);
  111be4:	e8 d2 f5 ee ff       	call   11bb <x86_sse_init>

	thread->arch.flags = X86_THREAD_FLAG_ALL;
  111be9:	c6 83 d0 00 00 00 01 	movb   $0x1,0xd0(%rbx)
	thread->switch_handle = thread;
  111bf0:	48 89 9b b8 00 00 00 	mov    %rbx,0xb8(%rbx)
}
  111bf7:	5f                   	pop    %rdi
  111bf8:	5b                   	pop    %rbx
  111bf9:	5d                   	pop    %rbp
  111bfa:	c3                   	ret    

0000000000111bfb <z_x86_do_kernel_nmi>:
 * return true if NMI is handled, false otherwise
 */
__weak bool z_x86_do_kernel_nmi(const z_arch_esf_t *esf)
{
	return false;
}
  111bfb:	31 c0                	xor    %eax,%eax
  111bfd:	c3                   	ret    

0000000000111bfe <z_x86_exception>:

void z_x86_exception(z_arch_esf_t *esf)
{
  111bfe:	55                   	push   %rbp
  111bff:	48 89 e5             	mov    %rsp,%rbp
  111c02:	53                   	push   %rbx
  111c03:	48 89 fb             	mov    %rdi,%rbx
  111c06:	56                   	push   %rsi
	switch (esf->vector) {
  111c07:	48 8b bf 50 02 00 00 	mov    0x250(%rdi),%rdi
  111c0e:	48 83 ff 0e          	cmp    $0xe,%rdi
  111c12:	74 19                	je     111c2d <z_x86_exception+0x2f>
  111c14:	48 83 ff 20          	cmp    $0x20,%rdi
  111c18:	74 08                	je     111c22 <z_x86_exception+0x24>
  111c1a:	48 83 ff 02          	cmp    $0x2,%rdi
  111c1e:	75 2b                	jne    111c4b <z_x86_exception+0x4d>
  111c20:	eb 16                	jmp    111c38 <z_x86_exception+0x3a>
		break;
	default:
		z_x86_unhandled_cpu_exception(esf->vector, esf);
		CODE_UNREACHABLE;
	}
}
  111c22:	59                   	pop    %rcx
		z_x86_do_kernel_oops(esf);
  111c23:	48 89 df             	mov    %rbx,%rdi
}
  111c26:	5b                   	pop    %rbx
  111c27:	5d                   	pop    %rbp
		z_x86_do_kernel_oops(esf);
  111c28:	e9 42 fa ff ff       	jmp    11166f <z_x86_do_kernel_oops>
}
  111c2d:	5a                   	pop    %rdx
		z_x86_page_fault_handler(esf);
  111c2e:	48 89 df             	mov    %rbx,%rdi
}
  111c31:	5b                   	pop    %rbx
  111c32:	5d                   	pop    %rbp
		z_x86_page_fault_handler(esf);
  111c33:	e9 29 fa ff ff       	jmp    111661 <z_x86_page_fault_handler>
		if (!z_x86_do_kernel_nmi(esf)) {
  111c38:	48 89 df             	mov    %rbx,%rdi
  111c3b:	e8 bb ff ff ff       	call   111bfb <z_x86_do_kernel_nmi>
  111c40:	84 c0                	test   %al,%al
  111c42:	75 0f                	jne    111c53 <z_x86_exception+0x55>
			z_x86_unhandled_cpu_exception(esf->vector, esf);
  111c44:	48 8b bb 50 02 00 00 	mov    0x250(%rbx),%rdi
		z_x86_unhandled_cpu_exception(esf->vector, esf);
  111c4b:	48 89 de             	mov    %rbx,%rsi
  111c4e:	e8 03 fa ff ff       	call   111656 <z_x86_unhandled_cpu_exception>
}
  111c53:	58                   	pop    %rax
  111c54:	5b                   	pop    %rbx
  111c55:	5d                   	pop    %rbp
  111c56:	c3                   	ret    

0000000000111c57 <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
  111c57:	83 c8 ff             	or     $0xffffffff,%eax
  111c5a:	c3                   	ret    

0000000000111c5b <_stdin_hook_default>:
}

static unsigned char _stdin_hook_default(void)
{
	return 0;
}
  111c5b:	31 c0                	xor    %eax,%eax
  111c5d:	c3                   	ret    

0000000000111c5e <malloc_prepare>:
{
  111c5e:	55                   	push   %rbp
  111c5f:	48 89 e5             	mov    %rsp,%rbp
	max_heap_size = MIN(CONFIG_NEWLIB_LIBC_MAX_MAPPED_REGION_SIZE,
  111c62:	e8 b9 8d 00 00       	call   11aa20 <k_mem_free_get>
  111c67:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  111c6d:	76 12                	jbe    111c81 <malloc_prepare+0x23>
  111c6f:	48 c7 05 16 45 01 00 	movq   $0x100000,0x14516(%rip)        # 126190 <max_heap_size>
  111c76:	00 00 10 00 
  111c7a:	bf 00 00 10 00       	mov    $0x100000,%edi
  111c7f:	eb 14                	jmp    111c95 <malloc_prepare+0x37>
  111c81:	e8 9a 8d 00 00       	call   11aa20 <k_mem_free_get>
  111c86:	48 89 05 03 45 01 00 	mov    %rax,0x14503(%rip)        # 126190 <max_heap_size>
  111c8d:	48 89 c7             	mov    %rax,%rdi
	if (max_heap_size != 0) {
  111c90:	48 85 c0             	test   %rax,%rax
  111c93:	74 11                	je     111ca6 <malloc_prepare+0x48>
		heap_base = k_mem_map(max_heap_size, K_MEM_PERM_RW);
  111c95:	be 08 00 00 00       	mov    $0x8,%esi
  111c9a:	e8 2e 8c 00 00       	call   11a8cd <k_mem_map>
  111c9f:	48 89 05 f2 44 01 00 	mov    %rax,0x144f2(%rip)        # 126198 <heap_base>
}
  111ca6:	31 c0                	xor    %eax,%eax
  111ca8:	5d                   	pop    %rbp
  111ca9:	c3                   	ret    

0000000000111caa <__stdout_hook_install>:
	_stdout_hook = hook;
  111caa:	48 89 3d 7f 0c 03 00 	mov    %rdi,0x30c7f(%rip)        # 142930 <_stdout_hook>
}
  111cb1:	c3                   	ret    

0000000000111cb2 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
  111cb2:	55                   	push   %rbp
  111cb3:	48 89 e5             	mov    %rsp,%rbp
  111cb6:	41 56                	push   %r14
  111cb8:	49 89 fe             	mov    %rdi,%r14
  111cbb:	41 55                	push   %r13
  111cbd:	41 54                	push   %r12
  111cbf:	41 89 f4             	mov    %esi,%r12d
  111cc2:	53                   	push   %rbx
	int i = 0;

	for (i = 0; i < nbytes; i++) {
  111cc3:	31 db                	xor    %ebx,%ebx
  111cc5:	41 89 dd             	mov    %ebx,%r13d
  111cc8:	41 39 dc             	cmp    %ebx,%r12d
  111ccb:	7e 1b                	jle    111ce8 <z_impl_zephyr_read_stdin+0x36>
		*(buf + i) = _stdin_hook();
  111ccd:	ff 15 55 0c 03 00    	call   *0x30c55(%rip)        # 142928 <_stdin_hook>
  111cd3:	41 88 04 1e          	mov    %al,(%r14,%rbx,1)
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
  111cd7:	48 ff c3             	inc    %rbx
  111cda:	3c 0a                	cmp    $0xa,%al
  111cdc:	74 04                	je     111ce2 <z_impl_zephyr_read_stdin+0x30>
  111cde:	3c 0d                	cmp    $0xd,%al
  111ce0:	75 e3                	jne    111cc5 <z_impl_zephyr_read_stdin+0x13>
			i++;
  111ce2:	41 8d 45 01          	lea    0x1(%r13),%eax
  111ce6:	eb 02                	jmp    111cea <z_impl_zephyr_read_stdin+0x38>
  111ce8:	89 d8                	mov    %ebx,%eax
			break;
		}
	}
	return i;
}
  111cea:	5b                   	pop    %rbx
  111ceb:	41 5c                	pop    %r12
  111ced:	41 5d                	pop    %r13
  111cef:	41 5e                	pop    %r14
  111cf1:	5d                   	pop    %rbp
  111cf2:	c3                   	ret    

0000000000111cf3 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
  111cf3:	55                   	push   %rbp
  111cf4:	48 89 e5             	mov    %rsp,%rbp
  111cf7:	41 55                	push   %r13
  111cf9:	49 89 fd             	mov    %rdi,%r13
  111cfc:	41 54                	push   %r12
  111cfe:	41 89 f4             	mov    %esi,%r12d
  111d01:	53                   	push   %rbx
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
  111d02:	31 db                	xor    %ebx,%ebx
{
  111d04:	51                   	push   %rcx
	for (i = 0; i < nbytes; i++) {
  111d05:	41 39 dc             	cmp    %ebx,%r12d
  111d08:	7e 24                	jle    111d2e <z_impl_zephyr_write_stdout+0x3b>
		if (*(buf + i) == '\n') {
  111d0a:	41 80 7c 1d 00 0a    	cmpb   $0xa,0x0(%r13,%rbx,1)
  111d10:	75 0b                	jne    111d1d <z_impl_zephyr_write_stdout+0x2a>
			_stdout_hook('\r');
  111d12:	bf 0d 00 00 00       	mov    $0xd,%edi
  111d17:	ff 15 13 0c 03 00    	call   *0x30c13(%rip)        # 142930 <_stdout_hook>
		}
		_stdout_hook(*(buf + i));
  111d1d:	41 0f be 7c 1d 00    	movsbl 0x0(%r13,%rbx,1),%edi
  111d23:	48 ff c3             	inc    %rbx
  111d26:	ff 15 04 0c 03 00    	call   *0x30c04(%rip)        # 142930 <_stdout_hook>
	for (i = 0; i < nbytes; i++) {
  111d2c:	eb d7                	jmp    111d05 <z_impl_zephyr_write_stdout+0x12>
	}
	return nbytes;
}
  111d2e:	5a                   	pop    %rdx
  111d2f:	44 89 e0             	mov    %r12d,%eax
  111d32:	5b                   	pop    %rbx
  111d33:	41 5c                	pop    %r12
  111d35:	41 5d                	pop    %r13
  111d37:	5d                   	pop    %rbp
  111d38:	c3                   	ret    

0000000000111d39 <_read>:
#include <syscalls/zephyr_write_stdout_mrsh.c>
#endif

#ifndef CONFIG_POSIX_API
int _read(int fd, char *buf, int nbytes)
{
  111d39:	48 89 f7             	mov    %rsi,%rdi
  111d3c:	89 d6                	mov    %edx,%esi
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
  111d3e:	e9 6f ff ff ff       	jmp    111cb2 <z_impl_zephyr_read_stdin>

0000000000111d43 <_write>:
	return zephyr_read_stdin(buf, nbytes);
}
__weak FUNC_ALIAS(_read, read, int);

int _write(int fd, const void *buf, int nbytes)
{
  111d43:	48 89 f7             	mov    %rsi,%rdi
  111d46:	89 d6                	mov    %edx,%esi
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
  111d48:	e9 a6 ff ff ff       	jmp    111cf3 <z_impl_zephyr_write_stdout>

0000000000111d4d <_close>:
{
	return -1;
}
__weak FUNC_ALIAS(_open, open, int);

int _close(int file)
  111d4d:	83 c8 ff             	or     $0xffffffff,%eax
  111d50:	c3                   	ret    

0000000000111d51 <_lseek>:
__weak FUNC_ALIAS(_close, close, int);

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  111d51:	31 c0                	xor    %eax,%eax
  111d53:	c3                   	ret    

0000000000111d54 <_isatty>:
#define _write	write
#endif

int _isatty(int file)
{
	return file <= 2;
  111d54:	31 c0                	xor    %eax,%eax
  111d56:	83 ff 02             	cmp    $0x2,%edi
  111d59:	0f 9e c0             	setle  %al
}
  111d5c:	c3                   	ret    

0000000000111d5d <_fstat>:
}
__weak FUNC_ALIAS(_getpid, getpid, int);

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  111d5d:	c7 46 04 00 20 00 00 	movl   $0x2000,0x4(%rsi)
	return 0;
}
  111d64:	31 c0                	xor    %eax,%eax
  111d66:	c3                   	ret    

0000000000111d67 <_sbrk>:

void *_sbrk(intptr_t count)
{
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
  111d67:	48 8b 15 1a 44 01 00 	mov    0x1441a(%rip),%rdx        # 126188 <heap_sz>

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
  111d6e:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
  111d72:	48 01 d7             	add    %rdx,%rdi
  111d75:	48 3b 3d 14 44 01 00 	cmp    0x14414(%rip),%rdi        # 126190 <max_heap_size>
  111d7c:	73 11                	jae    111d8f <_sbrk+0x28>
	ptr = ((char *)HEAP_BASE) + heap_sz;
  111d7e:	48 8b 05 13 44 01 00 	mov    0x14413(%rip),%rax        # 126198 <heap_base>
		heap_sz += count;
  111d85:	48 89 3d fc 43 01 00 	mov    %rdi,0x143fc(%rip)        # 126188 <heap_sz>
	ptr = ((char *)HEAP_BASE) + heap_sz;
  111d8c:	48 01 d0             	add    %rdx,%rax
	}

	return ret;
}
  111d8f:	c3                   	ret    

0000000000111d90 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
  111d90:	55                   	push   %rbp
  111d91:	48 89 e5             	mov    %rsp,%rbp
  111d94:	53                   	push   %rbx
  111d95:	48 89 fb             	mov    %rdi,%rbx
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
  111d98:	bf 20 00 00 00       	mov    $0x20,%edi
{
  111d9d:	50                   	push   %rax
	*lock = malloc(sizeof(struct k_mutex));
  111d9e:	e8 dd 16 ff ff       	call   103480 <malloc>
  111da3:	48 89 03             	mov    %rax,(%rbx)
  111da6:	48 89 c7             	mov    %rax,%rdi
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
  111da9:	5a                   	pop    %rdx
  111daa:	5b                   	pop    %rbx
  111dab:	5d                   	pop    %rbp
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
  111dac:	e9 1b 71 00 00       	jmp    118ecc <z_impl_k_mutex_init>

0000000000111db1 <__retarget_lock_close_recursive>:
#define __lock_init(lock) __retarget_lock_init(&lock)
extern void __retarget_lock_init_recursive(_LOCK_T *lock);
#define __lock_init_recursive(lock) __retarget_lock_init_recursive(&lock)
extern void __retarget_lock_close(_LOCK_T lock);
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
  111db1:	e9 da 16 ff ff       	jmp    103490 <free>

0000000000111db6 <__retarget_lock_acquire_recursive>:
		union { uintptr_t x; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
  111db6:	48 83 ce ff          	or     $0xffffffffffffffff,%rsi
  111dba:	e9 22 71 00 00       	jmp    118ee1 <z_impl_k_mutex_lock>

0000000000111dbf <__retarget_lock_release_recursive>:
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  111dbf:	e9 9c 72 00 00       	jmp    119060 <z_impl_k_mutex_unlock>

0000000000111dc4 <abort>:

#include <stdlib.h>
#include <zephyr/kernel.h>

void abort(void)
{
  111dc4:	55                   	push   %rbp
	printk("abort()\n");
  111dc5:	bf f3 e1 11 00       	mov    $0x11e1f3,%edi
  111dca:	31 c0                	xor    %eax,%eax
{
  111dcc:	48 89 e5             	mov    %rsp,%rbp
	printk("abort()\n");
  111dcf:	e8 8f e7 ff ff       	call   110563 <printk>
	k_panic();
  111dd4:	48 c7 c0 04 00 00 00 	mov    $0x4,%rax
  111ddb:	cd 20                	int    $0x20

0000000000111ddd <__IoApicSet>:
 * @param offset Register offset (8 bits)
 * @param value Value to set the register
 */
__pinned_func
static void __IoApicSet(int32_t offset, uint32_t value)
{
  111ddd:	55                   	push   %rbp
  111dde:	48 89 e5             	mov    %rsp,%rbp
  111de1:	41 54                	push   %r12
  111de3:	41 89 f4             	mov    %esi,%r12d
  111de6:	53                   	push   %rbx
  111de7:	89 fb                	mov    %edi,%ebx

	/* lock interrupts to ensure indirect addressing works "atomically" */

	key = irq_lock();

	*(volatile uint32_t *)(IOAPIC_REG + IOAPIC_IND) = (unsigned char)offset;
  111de9:	0f b6 db             	movzbl %bl,%ebx
	key = irq_lock();
  111dec:	e8 1c 85 00 00       	call   11a30d <z_smp_global_lock>
  111df1:	89 c7                	mov    %eax,%edi
	*(volatile uint32_t *)(IOAPIC_REG + IOAPIC_IND) = (unsigned char)offset;
  111df3:	48 8b 05 a6 43 01 00 	mov    0x143a6(%rip),%rax        # 1261a0 <z_mmio_ram__ioapic_regs>
  111dfa:	89 18                	mov    %ebx,(%rax)
	*((volatile uint32_t *)(IOAPIC_REG + IOAPIC_DATA)) = value;
  111dfc:	48 8b 05 9d 43 01 00 	mov    0x1439d(%rip),%rax        # 1261a0 <z_mmio_ram__ioapic_regs>
  111e03:	44 89 60 10          	mov    %r12d,0x10(%rax)

	irq_unlock(key);
}
  111e07:	5b                   	pop    %rbx
  111e08:	41 5c                	pop    %r12
  111e0a:	5d                   	pop    %rbp
	irq_unlock(key);
  111e0b:	e9 32 85 00 00       	jmp    11a342 <z_smp_global_unlock>

0000000000111e10 <IoApicRedUpdateLo>:
 */
__pinned_func
static void IoApicRedUpdateLo(unsigned int irq,
				uint32_t value,
				uint32_t mask)
{
  111e10:	55                   	push   %rbp
  111e11:	48 89 e5             	mov    %rsp,%rbp
  111e14:	41 56                	push   %r14
  111e16:	41 55                	push   %r13
  111e18:	41 89 d5             	mov    %edx,%r13d
  111e1b:	41 54                	push   %r12
	int32_t offset = IOAPIC_REDTBL + (irq << 1); /* register offset */
  111e1d:	44 8d 64 3f 10       	lea    0x10(%rdi,%rdi,1),%r12d
{
  111e22:	53                   	push   %rbx
  111e23:	89 f3                	mov    %esi,%ebx
	key = irq_lock();
  111e25:	e8 e3 84 00 00       	call   11a30d <z_smp_global_lock>
  111e2a:	41 0f b6 d4          	movzbl %r12b,%edx
  111e2e:	89 c7                	mov    %eax,%edi
	*((volatile uint32_t *) (IOAPIC_REG + IOAPIC_IND)) = (unsigned char)offset;
  111e30:	48 8b 05 69 43 01 00 	mov    0x14369(%rip),%rax        # 1261a0 <z_mmio_ram__ioapic_regs>
  111e37:	89 10                	mov    %edx,(%rax)
	value = *((volatile uint32_t *)(IOAPIC_REG + IOAPIC_DATA));
  111e39:	48 8b 05 60 43 01 00 	mov    0x14360(%rip),%rax        # 1261a0 <z_mmio_ram__ioapic_regs>
  111e40:	44 8b 70 10          	mov    0x10(%rax),%r14d
	irq_unlock(key);
  111e44:	e8 f9 84 00 00       	call   11a342 <z_smp_global_unlock>
	__IoApicSet(offset, lower32);
  111e49:	44 89 e7             	mov    %r12d,%edi
	ioApicRedSetLo(irq, (ioApicRedGetLo(irq) & ~mask) | (value & mask));
  111e4c:	44 31 f3             	xor    %r14d,%ebx
  111e4f:	89 de                	mov    %ebx,%esi
}
  111e51:	5b                   	pop    %rbx
  111e52:	41 5c                	pop    %r12
	ioApicRedSetLo(irq, (ioApicRedGetLo(irq) & ~mask) | (value & mask));
  111e54:	44 21 ee             	and    %r13d,%esi
}
  111e57:	41 5d                	pop    %r13
	ioApicRedSetLo(irq, (ioApicRedGetLo(irq) & ~mask) | (value & mask));
  111e59:	44 31 f6             	xor    %r14d,%esi
}
  111e5c:	41 5e                	pop    %r14
  111e5e:	5d                   	pop    %rbp
	__IoApicSet(offset, lower32);
  111e5f:	e9 79 ff ff ff       	jmp    111ddd <__IoApicSet>

0000000000111e64 <ioapic_init>:
{
  111e64:	55                   	push   %rbp
{
#ifdef CONFIG_MMU
	/* Pass along flags and add that we want supervisor mode
	 * read-write access.
	 */
	z_phys_map((uint8_t **)virt_addr, phys_addr, size,
  111e65:	b9 0a 00 00 00       	mov    $0xa,%ecx
  111e6a:	ba 00 10 00 00       	mov    $0x1000,%edx
  111e6f:	be 00 00 c0 fe       	mov    $0xfec00000,%esi
  111e74:	bf a0 61 12 00       	mov    $0x1261a0,%edi
  111e79:	48 89 e5             	mov    %rsp,%rbp
  111e7c:	41 54                	push   %r12
	for (ix = 0; ix < ioapic_rtes; ix++) {
  111e7e:	45 31 e4             	xor    %r12d,%r12d
{
  111e81:	53                   	push   %rbx
  111e82:	e8 0f 8c 00 00       	call   11aa96 <z_phys_map>
	key = irq_lock();
  111e87:	e8 81 84 00 00       	call   11a30d <z_smp_global_lock>
  111e8c:	89 c7                	mov    %eax,%edi
	*((volatile uint32_t *) (IOAPIC_REG + IOAPIC_IND)) = (unsigned char)offset;
  111e8e:	48 8b 05 0b 43 01 00 	mov    0x1430b(%rip),%rax        # 1261a0 <z_mmio_ram__ioapic_regs>
  111e95:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
	value = *((volatile uint32_t *)(IOAPIC_REG + IOAPIC_DATA));
  111e9b:	48 8b 05 fe 42 01 00 	mov    0x142fe(%rip),%rax        # 1261a0 <z_mmio_ram__ioapic_regs>
  111ea2:	8b 58 10             	mov    0x10(%rax),%ebx
	irq_unlock(key);
  111ea5:	e8 98 84 00 00       	call   11a342 <z_smp_global_unlock>
			IOAPIC_MRE_MASK) >> IOAPIC_MRE_POS) + 1;
  111eaa:	c1 eb 10             	shr    $0x10,%ebx
  111ead:	0f b6 db             	movzbl %bl,%ebx
  111eb0:	ff c3                	inc    %ebx
  111eb2:	89 1d 94 43 01 00    	mov    %ebx,0x14394(%rip)        # 12624c <ioapic_rtes>
	for (ix = 0; ix < ioapic_rtes; ix++) {
  111eb8:	bb 11 00 00 00       	mov    $0x11,%ebx
  111ebd:	44 3b 25 88 43 01 00 	cmp    0x14388(%rip),%r12d        # 12624c <ioapic_rtes>
  111ec4:	73 21                	jae    111ee7 <ioapic_init+0x83>
	__IoApicSet(offset, upper32);
  111ec6:	89 df                	mov    %ebx,%edi
  111ec8:	be 00 00 00 ff       	mov    $0xff000000,%esi
	for (ix = 0; ix < ioapic_rtes; ix++) {
  111ecd:	41 ff c4             	inc    %r12d
	__IoApicSet(offset, upper32);
  111ed0:	e8 08 ff ff ff       	call   111ddd <__IoApicSet>
	int32_t offset = IOAPIC_REDTBL + (irq << 1); /* register offset */
  111ed5:	8d 7b ff             	lea    -0x1(%rbx),%edi
	__IoApicSet(offset, lower32);
  111ed8:	be 00 08 01 00       	mov    $0x10800,%esi
  111edd:	83 c3 02             	add    $0x2,%ebx
  111ee0:	e8 f8 fe ff ff       	call   111ddd <__IoApicSet>
	for (ix = 0; ix < ioapic_rtes; ix++) {
  111ee5:	eb d6                	jmp    111ebd <ioapic_init+0x59>
}
  111ee7:	5b                   	pop    %rbx
  111ee8:	31 c0                	xor    %eax,%eax
  111eea:	41 5c                	pop    %r12
  111eec:	5d                   	pop    %rbp
  111eed:	c3                   	ret    

0000000000111eee <z_ioapic_num_rtes>:
}
  111eee:	8b 05 58 43 01 00    	mov    0x14358(%rip),%eax        # 12624c <ioapic_rtes>
  111ef4:	c3                   	ret    

0000000000111ef5 <z_ioapic_irq_enable>:
	IoApicRedUpdateLo(irq, 0, IOAPIC_INT_MASK);
  111ef5:	ba 00 00 01 00       	mov    $0x10000,%edx
  111efa:	31 f6                	xor    %esi,%esi
  111efc:	e9 0f ff ff ff       	jmp    111e10 <IoApicRedUpdateLo>

0000000000111f01 <z_ioapic_irq_set>:
{
  111f01:	55                   	push   %rbp
  111f02:	48 89 e5             	mov    %rsp,%rbp
  111f05:	41 55                	push   %r13
  111f07:	41 89 d5             	mov    %edx,%r13d
  111f0a:	41 54                	push   %r12
	int32_t offset = IOAPIC_REDTBL + (irq << 1) + 1; /* register offset */
  111f0c:	44 8d 24 3f          	lea    (%rdi,%rdi,1),%r12d
{
  111f10:	53                   	push   %rbx
	int32_t offset = IOAPIC_REDTBL + (irq << 1) + 1; /* register offset */
  111f11:	41 8d 7c 24 11       	lea    0x11(%r12),%edi
{
  111f16:	89 f3                	mov    %esi,%ebx
	__IoApicSet(offset, upper32);
  111f18:	be 00 00 00 ff       	mov    $0xff000000,%esi
{
  111f1d:	50                   	push   %rax
	__IoApicSet(offset, upper32);
  111f1e:	e8 ba fe ff ff       	call   111ddd <__IoApicSet>
			(vector & IOAPIC_VEC_MASK) | flags;
  111f23:	0f b6 f3             	movzbl %bl,%esi
}
  111f26:	5a                   	pop    %rdx
	int32_t offset = IOAPIC_REDTBL + (irq << 1); /* register offset */
  111f27:	41 8d 7c 24 10       	lea    0x10(%r12),%edi
			(vector & IOAPIC_VEC_MASK) | flags;
  111f2c:	44 09 ee             	or     %r13d,%esi
}
  111f2f:	5b                   	pop    %rbx
  111f30:	41 5c                	pop    %r12
		rteValue = IOAPIC_INT_MASK | IOAPIC_LOGICAL |
  111f32:	81 ce 00 08 01 00    	or     $0x10800,%esi
}
  111f38:	41 5d                	pop    %r13
  111f3a:	5d                   	pop    %rbp
	__IoApicSet(offset, lower32);
  111f3b:	e9 9d fe ff ff       	jmp    111ddd <__IoApicSet>

0000000000111f40 <loapic_init>:
__boot_func
static int loapic_init(const struct device *unused)
{
	ARG_UNUSED(unused);
	return 0;
}
  111f40:	31 c0                	xor    %eax,%eax
  111f42:	c3                   	ret    

0000000000111f43 <z_loapic_enable>:
{
  111f43:	55                   	push   %rbp
  111f44:	b9 0a 00 00 00       	mov    $0xa,%ecx
  111f49:	be 00 00 e0 fe       	mov    $0xfee00000,%esi
  111f4e:	48 89 e5             	mov    %rsp,%rbp
  111f51:	53                   	push   %rbx
  111f52:	89 fb                	mov    %edi,%ebx
  111f54:	bf a8 61 12 00       	mov    $0x1261a8,%edi
  111f59:	52                   	push   %rdx
  111f5a:	ba 00 10 00 00       	mov    $0x1000,%edx
  111f5f:	e8 32 8b 00 00       	call   11aa96 <z_phys_map>
	x86_write_xapic(LOAPIC_LDR, 1 << (cpu_number + 24));
  111f64:	8d 4b 18             	lea    0x18(%rbx),%ecx
  111f67:	b8 01 00 00 00       	mov    $0x1,%eax
  111f6c:	48 8b 1d 35 42 01 00 	mov    0x14235(%rip),%rbx        # 1261a8 <z_loapic_regs>
  111f73:	d3 e0                	shl    %cl,%eax
  111f75:	89 83 d0 00 00 00    	mov    %eax,0xd0(%rbx)
	return sys_read32(base + reg);
  111f7b:	48 8b 05 26 42 01 00 	mov    0x14226(%rip),%rax        # 1261a8 <z_loapic_regs>
  111f82:	48 05 f0 00 00 00    	add    $0xf0,%rax
	__asm__ volatile("movl %1, %0"
  111f88:	8b 00                	mov    (%rax),%eax
	sys_write32(val, base + reg);
  111f8a:	48 8b 35 17 42 01 00 	mov    0x14217(%rip),%rsi        # 1261a8 <z_loapic_regs>
	x86_write_xapic(LOAPIC_SVR,
  111f91:	80 cc 01             	or     $0x1,%ah
	__asm__ volatile("movl %0, %1"
  111f94:	89 86 f0 00 00 00    	mov    %eax,0xf0(%rsi)
	return sys_read32(base + reg);
  111f9a:	48 8b 05 07 42 01 00 	mov    0x14207(%rip),%rax        # 1261a8 <z_loapic_regs>
	__asm__ volatile("movl %1, %0"
  111fa1:	8b 50 30             	mov    0x30(%rax),%edx
	sys_write32(val, base + reg);
  111fa4:	48 8b 05 fd 41 01 00 	mov    0x141fd(%rip),%rax        # 1261a8 <z_loapic_regs>
	loApicMaxLvt = (x86_read_loapic(LOAPIC_VER) & LOAPIC_MAXLVT_MASK) >> 16;
  111fab:	c1 ea 10             	shr    $0x10,%edx
	__asm__ volatile("movl %0, %1"
  111fae:	83 c9 ff             	or     $0xffffffff,%ecx
  111fb1:	89 88 e0 00 00 00    	mov    %ecx,0xe0(%rax)
  111fb7:	48 8b 05 ea 41 01 00 	mov    0x141ea(%rip),%rax        # 1261a8 <z_loapic_regs>
  111fbe:	48 8d 88 80 00 00 00 	lea    0x80(%rax),%rcx
  111fc5:	31 c0                	xor    %eax,%eax
  111fc7:	89 01                	mov    %eax,(%rcx)
  111fc9:	48 8b 3d d8 41 01 00 	mov    0x141d8(%rip),%rdi        # 1261a8 <z_loapic_regs>
  111fd0:	89 87 e0 03 00 00    	mov    %eax,0x3e0(%rdi)
  111fd6:	48 8b 1d cb 41 01 00 	mov    0x141cb(%rip),%rbx        # 1261a8 <z_loapic_regs>
  111fdd:	89 83 80 03 00 00    	mov    %eax,0x380(%rbx)
	return sys_read32(base + reg);
  111fe3:	48 8b 05 be 41 01 00 	mov    0x141be(%rip),%rax        # 1261a8 <z_loapic_regs>
  111fea:	48 05 50 03 00 00    	add    $0x350,%rax
	__asm__ volatile("movl %1, %0"
  111ff0:	8b 00                	mov    (%rax),%eax
	x86_write_loapic(LOAPIC_LINT0, (x86_read_loapic(LOAPIC_LINT0) &
  111ff2:	25 ff 58 fe ff       	and    $0xfffe58ff,%eax
	sys_write32(val, base + reg);
  111ff7:	48 8b 35 aa 41 01 00 	mov    0x141aa(%rip),%rsi        # 1261a8 <z_loapic_regs>
  111ffe:	80 cc 07             	or     $0x7,%ah
	__asm__ volatile("movl %0, %1"
  112001:	89 86 50 03 00 00    	mov    %eax,0x350(%rsi)
	return sys_read32(base + reg);
  112007:	48 8b 05 9a 41 01 00 	mov    0x1419a(%rip),%rax        # 1261a8 <z_loapic_regs>
  11200e:	48 05 60 03 00 00    	add    $0x360,%rax
	__asm__ volatile("movl %1, %0"
  112014:	8b 00                	mov    (%rax),%eax
	x86_write_loapic(LOAPIC_LINT1, (x86_read_loapic(LOAPIC_LINT1) &
  112016:	25 ff 58 fe ff       	and    $0xfffe58ff,%eax
	sys_write32(val, base + reg);
  11201b:	48 8b 3d 86 41 01 00 	mov    0x14186(%rip),%rdi        # 1261a8 <z_loapic_regs>
  112022:	80 cc 04             	or     $0x4,%ah
	__asm__ volatile("movl %0, %1"
  112025:	89 87 60 03 00 00    	mov    %eax,0x360(%rdi)
  11202b:	48 8b 05 76 41 01 00 	mov    0x14176(%rip),%rax        # 1261a8 <z_loapic_regs>
  112032:	48 8d 88 20 03 00 00 	lea    0x320(%rax),%rcx
  112039:	b8 00 00 01 00       	mov    $0x10000,%eax
  11203e:	89 01                	mov    %eax,(%rcx)
  112040:	48 8b 1d 61 41 01 00 	mov    0x14161(%rip),%rbx        # 1261a8 <z_loapic_regs>
  112047:	89 83 70 03 00 00    	mov    %eax,0x370(%rbx)
	if (loApicMaxLvt >= LOAPIC_LVT_P6) {
  11204d:	f6 c2 fc             	test   $0xfc,%dl
  112050:	74 1f                	je     112071 <z_loapic_enable+0x12e>
  112052:	48 8b 35 4f 41 01 00 	mov    0x1414f(%rip),%rsi        # 1261a8 <z_loapic_regs>
  112059:	89 86 40 03 00 00    	mov    %eax,0x340(%rsi)
	if (loApicMaxLvt >= LOAPIC_LVT_PENTIUM4) {
  11205f:	80 fa 04             	cmp    $0x4,%dl
  112062:	76 0d                	jbe    112071 <z_loapic_enable+0x12e>
  112064:	48 8b 3d 3d 41 01 00 	mov    0x1413d(%rip),%rdi        # 1261a8 <z_loapic_regs>
  11206b:	89 87 30 03 00 00    	mov    %eax,0x330(%rdi)
  112071:	48 8b 05 30 41 01 00 	mov    0x14130(%rip),%rax        # 1261a8 <z_loapic_regs>
  112078:	31 d2                	xor    %edx,%edx
  11207a:	89 90 b0 00 00 00    	mov    %edx,0xb0(%rax)
}
  112080:	58                   	pop    %rax
  112081:	5b                   	pop    %rbx
  112082:	5d                   	pop    %rbp
  112083:	c3                   	ret    

0000000000112084 <z_loapic_irq_base>:


__pinned_func
uint32_t z_loapic_irq_base(void)
{
	return z_ioapic_num_rtes();
  112084:	e9 65 fe ff ff       	jmp    111eee <z_ioapic_num_rtes>

0000000000112089 <z_loapic_int_vec_set>:
 */
__boot_func
void z_loapic_int_vec_set(unsigned int irq, /* IRQ number of the interrupt */
				  unsigned int vector /* vector to copy into the LVT */
				  )
{
  112089:	55                   	push   %rbp
  11208a:	48 89 e5             	mov    %rsp,%rbp
  11208d:	41 54                	push   %r12
  11208f:	41 89 f4             	mov    %esi,%r12d
  112092:	53                   	push   %rbx
  112093:	89 fb                	mov    %edi,%ebx

	/* update the 'vector' bits in the LVT */

	oldLevel = irq_lock();
	x86_write_loapic(LOAPIC_TIMER + (irq * 0x10),
		     (x86_read_loapic(LOAPIC_TIMER + (irq * 0x10)) &
  112095:	83 c3 32             	add    $0x32,%ebx
  112098:	c1 e3 04             	shl    $0x4,%ebx
	oldLevel = irq_lock();
  11209b:	e8 6d 82 00 00       	call   11a30d <z_smp_global_lock>
	return sys_read32(base + reg);
  1120a0:	89 da                	mov    %ebx,%edx
  1120a2:	89 c7                	mov    %eax,%edi
  1120a4:	48 8b 05 fd 40 01 00 	mov    0x140fd(%rip),%rax        # 1261a8 <z_loapic_regs>
  1120ab:	48 01 d0             	add    %rdx,%rax
	__asm__ volatile("movl %1, %0"
  1120ae:	8b 08                	mov    (%rax),%ecx
		     (x86_read_loapic(LOAPIC_TIMER + (irq * 0x10)) &
  1120b0:	30 c9                	xor    %cl,%cl
	sys_write32(val, base + reg);
  1120b2:	48 03 15 ef 40 01 00 	add    0x140ef(%rip),%rdx        # 1261a8 <z_loapic_regs>
	x86_write_loapic(LOAPIC_TIMER + (irq * 0x10),
  1120b9:	44 09 e1             	or     %r12d,%ecx
	__asm__ volatile("movl %0, %1"
  1120bc:	89 0a                	mov    %ecx,(%rdx)
		      ~LOAPIC_VECTOR) | vector);
	irq_unlock(oldLevel);
}
  1120be:	5b                   	pop    %rbx
  1120bf:	41 5c                	pop    %r12
  1120c1:	5d                   	pop    %rbp
	irq_unlock(oldLevel);
  1120c2:	e9 7b 82 00 00       	jmp    11a342 <z_smp_global_unlock>

00000000001120c7 <z_loapic_irq_enable>:
 *
 * This routine clears the interrupt mask bit in the LVT for the specified IRQ
 */
__pinned_func
void z_loapic_irq_enable(unsigned int irq)
{
  1120c7:	55                   	push   %rbp
  1120c8:	48 89 e5             	mov    %rsp,%rbp
  1120cb:	53                   	push   %rbx
  1120cc:	89 fb                	mov    %edi,%ebx
  1120ce:	50                   	push   %rax

	/* clear the mask bit in the LVT */

	oldLevel = irq_lock();
	x86_write_loapic(LOAPIC_TIMER + (irq * 0x10),
		     x86_read_loapic(LOAPIC_TIMER + (irq * 0x10)) &
  1120cf:	83 c3 32             	add    $0x32,%ebx
  1120d2:	c1 e3 04             	shl    $0x4,%ebx
	oldLevel = irq_lock();
  1120d5:	e8 33 82 00 00       	call   11a30d <z_smp_global_lock>
	return sys_read32(base + reg);
  1120da:	89 da                	mov    %ebx,%edx
  1120dc:	89 c7                	mov    %eax,%edi
  1120de:	48 8b 05 c3 40 01 00 	mov    0x140c3(%rip),%rax        # 1261a8 <z_loapic_regs>
  1120e5:	48 01 d0             	add    %rdx,%rax
	__asm__ volatile("movl %1, %0"
  1120e8:	8b 00                	mov    (%rax),%eax
	x86_write_loapic(LOAPIC_TIMER + (irq * 0x10),
  1120ea:	25 ff ff fe ff       	and    $0xfffeffff,%eax
	sys_write32(val, base + reg);
  1120ef:	48 03 15 b2 40 01 00 	add    0x140b2(%rip),%rdx        # 1261a8 <z_loapic_regs>
	__asm__ volatile("movl %0, %1"
  1120f6:	89 02                	mov    %eax,(%rdx)
		     ~LOAPIC_LVT_MASKED);
	irq_unlock(oldLevel);
}
  1120f8:	5a                   	pop    %rdx
  1120f9:	5b                   	pop    %rbx
  1120fa:	5d                   	pop    %rbp
	irq_unlock(oldLevel);
  1120fb:	e9 42 82 00 00       	jmp    11a342 <z_smp_global_unlock>

0000000000112100 <z_irq_controller_irq_config>:
 * @param flags interrupt flags
 */
__boot_func
void z_irq_controller_irq_config(unsigned int vector, unsigned int irq,
				 uint32_t flags)
{
  112100:	55                   	push   %rbp
  112101:	48 89 e5             	mov    %rsp,%rbp
  112104:	41 54                	push   %r12
  112106:	41 89 fc             	mov    %edi,%r12d
  112109:	53                   	push   %rbx
  11210a:	89 f3                	mov    %esi,%ebx
  11210c:	48 83 ec 10          	sub    $0x10,%rsp
  112110:	89 55 ec             	mov    %edx,-0x14(%rbp)
	__ASSERT(irq <= HARDWARE_IRQ_LIMIT, "invalid irq line");

	if (IS_IOAPIC_IRQ(irq)) {
  112113:	e8 6c ff ff ff       	call   112084 <z_loapic_irq_base>
  112118:	39 c3                	cmp    %eax,%ebx
  11211a:	73 14                	jae    112130 <z_irq_controller_irq_config+0x30>
		z_ioapic_irq_set(irq, vector, flags);
  11211c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  11211f:	44 89 e6             	mov    %r12d,%esi
	} else {
		z_loapic_int_vec_set(irq - z_loapic_irq_base(), vector);
	}
}
  112122:	59                   	pop    %rcx
		z_ioapic_irq_set(irq, vector, flags);
  112123:	89 df                	mov    %ebx,%edi
}
  112125:	41 58                	pop    %r8
  112127:	5b                   	pop    %rbx
  112128:	41 5c                	pop    %r12
  11212a:	5d                   	pop    %rbp
		z_ioapic_irq_set(irq, vector, flags);
  11212b:	e9 d1 fd ff ff       	jmp    111f01 <z_ioapic_irq_set>
		z_loapic_int_vec_set(irq - z_loapic_irq_base(), vector);
  112130:	e8 4f ff ff ff       	call   112084 <z_loapic_irq_base>
  112135:	44 89 e6             	mov    %r12d,%esi
  112138:	29 c3                	sub    %eax,%ebx
}
  11213a:	58                   	pop    %rax
  11213b:	5a                   	pop    %rdx
		z_loapic_int_vec_set(irq - z_loapic_irq_base(), vector);
  11213c:	89 df                	mov    %ebx,%edi
}
  11213e:	5b                   	pop    %rbx
  11213f:	41 5c                	pop    %r12
  112141:	5d                   	pop    %rbp
		z_loapic_int_vec_set(irq - z_loapic_irq_base(), vector);
  112142:	e9 42 ff ff ff       	jmp    112089 <z_loapic_int_vec_set>

0000000000112147 <arch_irq_enable>:
 * comments in _interrupt_vector_allocate() for more information regarding IRQ
 * virtualization.
 */
__pinned_func
void arch_irq_enable(unsigned int irq)
{
  112147:	55                   	push   %rbp
  112148:	48 89 e5             	mov    %rsp,%rbp
  11214b:	53                   	push   %rbx
  11214c:	89 fb                	mov    %edi,%ebx
  11214e:	51                   	push   %rcx
	if (IS_IOAPIC_IRQ(irq)) {
  11214f:	e8 30 ff ff ff       	call   112084 <z_loapic_irq_base>
  112154:	39 c3                	cmp    %eax,%ebx
  112156:	73 0a                	jae    112162 <arch_irq_enable+0x1b>
		z_ioapic_irq_enable(irq);
	} else {
		z_loapic_irq_enable(irq - z_loapic_irq_base());
	}
}
  112158:	5a                   	pop    %rdx
		z_ioapic_irq_enable(irq);
  112159:	89 df                	mov    %ebx,%edi
}
  11215b:	5b                   	pop    %rbx
  11215c:	5d                   	pop    %rbp
		z_ioapic_irq_enable(irq);
  11215d:	e9 93 fd ff ff       	jmp    111ef5 <z_ioapic_irq_enable>
		z_loapic_irq_enable(irq - z_loapic_irq_base());
  112162:	e8 1d ff ff ff       	call   112084 <z_loapic_irq_base>
  112167:	29 c3                	sub    %eax,%ebx
}
  112169:	58                   	pop    %rax
		z_loapic_irq_enable(irq - z_loapic_irq_base());
  11216a:	89 df                	mov    %ebx,%edi
}
  11216c:	5b                   	pop    %rbx
  11216d:	5d                   	pop    %rbp
		z_loapic_irq_enable(irq - z_loapic_irq_base());
  11216e:	e9 54 ff ff ff       	jmp    1120c7 <z_loapic_irq_enable>

0000000000112173 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
  112173:	55                   	push   %rbp
  112174:	48 89 e5             	mov    %rsp,%rbp
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
  112177:	bf e8 c0 11 00       	mov    $0x11c0e8,%edi
  11217c:	e8 a2 68 00 00       	call   118a23 <z_device_is_ready>
  112181:	89 c2                	mov    %eax,%edx
  112183:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
	if (!device_is_ready(uart_console_dev)) {
  112188:	84 d2                	test   %dl,%dl
  11218a:	74 16                	je     1121a2 <uart_console_init+0x2f>
	__stdout_hook_install(console_out);
  11218c:	bf a4 21 11 00       	mov    $0x1121a4,%edi
  112191:	e8 14 fb ff ff       	call   111caa <__stdout_hook_install>
	__printk_hook_install(console_out);
  112196:	bf a4 21 11 00       	mov    $0x1121a4,%edi
  11219b:	e8 5d e3 ff ff       	call   1104fd <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
  1121a0:	31 c0                	xor    %eax,%eax
}
  1121a2:	5d                   	pop    %rbp
  1121a3:	c3                   	ret    

00000000001121a4 <console_out>:
{
  1121a4:	55                   	push   %rbp
	if ('\n' == c) {
  1121a5:	83 ff 0a             	cmp    $0xa,%edi
{
  1121a8:	48 89 e5             	mov    %rsp,%rbp
  1121ab:	41 54                	push   %r12
  1121ad:	4c 8b 25 44 9f 00 00 	mov    0x9f44(%rip),%r12        # 11c0f8 <__device_dts_ord_27+0x10>
  1121b4:	53                   	push   %rbx
  1121b5:	89 fb                	mov    %edi,%ebx
	if ('\n' == c) {
  1121b7:	75 0f                	jne    1121c8 <console_out+0x24>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
  1121b9:	be 0d 00 00 00       	mov    $0xd,%esi
  1121be:	bf e8 c0 11 00       	mov    $0x11c0e8,%edi
  1121c3:	41 ff 54 24 08       	call   *0x8(%r12)
  1121c8:	bf e8 c0 11 00       	mov    $0x11c0e8,%edi
  1121cd:	0f b6 f3             	movzbl %bl,%esi
  1121d0:	41 ff 54 24 08       	call   *0x8(%r12)
}
  1121d5:	89 d8                	mov    %ebx,%eax
  1121d7:	5b                   	pop    %rbx
  1121d8:	41 5c                	pop    %r12
  1121da:	5d                   	pop    %rbp
  1121db:	c3                   	ret    

00000000001121dc <get_port>:

static inline uintptr_t get_port(const struct device *dev)
{
	uintptr_t port;
#if defined(CONFIG_UART_NS16550_ACCESS_IOPORT) || defined(CONFIG_UART_NS16550_SIMULT_ACCESS)
	const struct uart_ns16550_device_config *config = dev->config;
  1121dc:	48 8b 47 08          	mov    0x8(%rdi),%rax

	if (config->io_map) {
  1121e0:	80 78 29 00          	cmpb   $0x0,0x29(%rax)
  1121e4:	74 03                	je     1121e9 <get_port+0xd>
		port = config->port;
  1121e6:	8b 00                	mov    (%rax),%eax
  1121e8:	c3                   	ret    
	} else {
#else
	{
#endif
		port = DEVICE_MMIO_GET(dev);
  1121e9:	48 8b 47 20          	mov    0x20(%rdi),%rax
  1121ed:	48 8b 00             	mov    (%rax),%rax
	}

	return port;
}
  1121f0:	c3                   	ret    

00000000001121f1 <uart_ns16550_config_get>:

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_ns16550_config_get(const struct device *dev,
				   struct uart_config *cfg)
{
	struct uart_ns16550_dev_data *data = dev->data;
  1121f1:	48 8b 47 20          	mov    0x20(%rdi),%rax

	cfg->baudrate = data->uart_config.baudrate;
  1121f5:	8b 50 08             	mov    0x8(%rax),%edx
  1121f8:	89 16                	mov    %edx,(%rsi)
	cfg->parity = data->uart_config.parity;
  1121fa:	8a 50 0c             	mov    0xc(%rax),%dl
  1121fd:	88 56 04             	mov    %dl,0x4(%rsi)
	cfg->stop_bits = data->uart_config.stop_bits;
  112200:	8a 50 0d             	mov    0xd(%rax),%dl
  112203:	88 56 05             	mov    %dl,0x5(%rsi)
	cfg->data_bits = data->uart_config.data_bits;
  112206:	8a 50 0e             	mov    0xe(%rax),%dl
  112209:	88 56 06             	mov    %dl,0x6(%rsi)
	cfg->flow_ctrl = data->uart_config.flow_ctrl;
  11220c:	8a 40 0f             	mov    0xf(%rax),%al
  11220f:	88 46 07             	mov    %al,0x7(%rsi)

	return 0;
}
  112212:	31 c0                	xor    %eax,%eax
  112214:	c3                   	ret    

0000000000112215 <ns16550_outbyte.isra.0>:
static void ns16550_outbyte(const struct uart_ns16550_device_config *cfg,
  112215:	89 d0                	mov    %edx,%eax
	if (cfg->io_map) {
  112217:	40 84 ff             	test   %dil,%dil
  11221a:	74 04                	je     112220 <ns16550_outbyte.isra.0+0xb>
	__asm__ volatile("outb %b0, %w1" :: "a"(data), "Nd"(port));
  11221c:	89 f2                	mov    %esi,%edx
  11221e:	ee                   	out    %al,(%dx)
}
  11221f:	c3                   	ret    
	__asm__ volatile("movb %0, %1"
  112220:	88 16                	mov    %dl,(%rsi)
}
  112222:	c3                   	ret    

0000000000112223 <atomic_clear.isra.0>:
  112223:	31 c0                	xor    %eax,%eax
  112225:	48 87 07             	xchg   %rax,(%rdi)
}
  112228:	c3                   	ret    

0000000000112229 <uart_ns16550_poll_in>:
 * @param c Pointer to character
 *
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */
static int uart_ns16550_poll_in(const struct device *dev, unsigned char *c)
{
  112229:	55                   	push   %rbp
  11222a:	48 89 e5             	mov    %rsp,%rbp
  11222d:	41 57                	push   %r15
  11222f:	41 56                	push   %r14
  112231:	41 55                	push   %r13
  112233:	49 89 f5             	mov    %rsi,%r13
  112236:	41 54                	push   %r12
  112238:	53                   	push   %rbx
  112239:	48 89 fb             	mov    %rdi,%rbx
  11223c:	51                   	push   %rcx
	struct uart_ns16550_dev_data *data = dev->data;
  11223d:	4c 8b 67 20          	mov    0x20(%rdi),%r12
	const struct uart_ns16550_device_config * const dev_cfg = dev->config;
  112241:	4c 8b 7f 08          	mov    0x8(%rdi),%r15
  112245:	9c                   	pushf  
  112246:	fa                   	cli    
  112247:	41 5e                	pop    %r14
	while (!atomic_cas(&l->locked, 0, 1)) {
  112249:	49 83 c4 10          	add    $0x10,%r12
	return __atomic_compare_exchange_n(target, &old_value, new_value,
  11224d:	31 c0                	xor    %eax,%eax
  11224f:	ba 01 00 00 00       	mov    $0x1,%edx
  112254:	f0 49 0f b1 14 24    	lock cmpxchg %rdx,(%r12)
  11225a:	74 07                	je     112263 <uart_ns16550_poll_in+0x3a>
		arch_spin_relax();
  11225c:	e8 4f 6c 00 00       	call   118eb0 <arch_spin_relax>
  112261:	eb ea                	jmp    11224d <uart_ns16550_poll_in+0x24>
	int ret = -1;
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	if ((ns16550_inbyte(dev_cfg, LSR(dev)) & LSR_RXRDY) != 0) {
  112263:	48 89 df             	mov    %rbx,%rdi
  112266:	e8 71 ff ff ff       	call   1121dc <get_port>
	return config->reg_interval;
  11226b:	48 8b 53 08          	mov    0x8(%rbx),%rdx
	if ((ns16550_inbyte(dev_cfg, LSR(dev)) & LSR_RXRDY) != 0) {
  11226f:	0f b6 52 28          	movzbl 0x28(%rdx),%edx
  112273:	48 8d 14 92          	lea    (%rdx,%rdx,4),%rdx
  112277:	48 01 c2             	add    %rax,%rdx
	if (cfg->io_map) {
  11227a:	41 80 7f 29 00       	cmpb   $0x0,0x29(%r15)
  11227f:	74 03                	je     112284 <uart_ns16550_poll_in+0x5b>
	__asm__ volatile("inb %w1, %b0" : "=a"(ret) : "Nd"(port));
  112281:	ec                   	in     (%dx),%al
			return sys_in8(port);
  112282:	eb 02                	jmp    112286 <uart_ns16550_poll_in+0x5d>
	__asm__ volatile("movb %1, %0"
  112284:	8a 02                	mov    (%rdx),%al
	int ret = -1;
  112286:	83 ca ff             	or     $0xffffffff,%edx
	if ((ns16550_inbyte(dev_cfg, LSR(dev)) & LSR_RXRDY) != 0) {
  112289:	a8 01                	test   $0x1,%al
  11228b:	74 1d                	je     1122aa <uart_ns16550_poll_in+0x81>
		/* got a character */
		*c = ns16550_inbyte(dev_cfg, RDR(dev));
  11228d:	48 89 df             	mov    %rbx,%rdi
  112290:	e8 47 ff ff ff       	call   1121dc <get_port>
	if (cfg->io_map) {
  112295:	41 80 7f 29 00       	cmpb   $0x0,0x29(%r15)
		*c = ns16550_inbyte(dev_cfg, RDR(dev));
  11229a:	48 89 c2             	mov    %rax,%rdx
	if (cfg->io_map) {
  11229d:	74 03                	je     1122a2 <uart_ns16550_poll_in+0x79>
	__asm__ volatile("inb %w1, %b0" : "=a"(ret) : "Nd"(port));
  11229f:	ec                   	in     (%dx),%al
			return sys_in8(port);
  1122a0:	eb 02                	jmp    1122a4 <uart_ns16550_poll_in+0x7b>
	__asm__ volatile("movb %1, %0"
  1122a2:	8a 00                	mov    (%rax),%al
		*c = ns16550_inbyte(dev_cfg, RDR(dev));
  1122a4:	41 88 45 00          	mov    %al,0x0(%r13)
		ret = 0;
  1122a8:	31 d2                	xor    %edx,%edx
	atomic_clear(&l->locked);
  1122aa:	4c 89 e7             	mov    %r12,%rdi
  1122ad:	e8 71 ff ff ff       	call   112223 <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  1122b2:	41 0f ba e6 09       	bt     $0x9,%r14d
  1122b7:	73 01                	jae    1122ba <uart_ns16550_poll_in+0x91>
		__asm__ volatile ("sti" ::: "memory");
  1122b9:	fb                   	sti    
	}

	k_spin_unlock(&data->lock, key);

	return ret;
}
  1122ba:	89 d0                	mov    %edx,%eax
  1122bc:	5a                   	pop    %rdx
  1122bd:	5b                   	pop    %rbx
  1122be:	41 5c                	pop    %r12
  1122c0:	41 5d                	pop    %r13
  1122c2:	41 5e                	pop    %r14
  1122c4:	41 5f                	pop    %r15
  1122c6:	5d                   	pop    %rbp
  1122c7:	c3                   	ret    

00000000001122c8 <uart_ns16550_poll_out>:
 * @param dev UART device struct
 * @param c Character to send
 */
static void uart_ns16550_poll_out(const struct device *dev,
					   unsigned char c)
{
  1122c8:	55                   	push   %rbp
  1122c9:	48 89 e5             	mov    %rsp,%rbp
  1122cc:	41 57                	push   %r15
  1122ce:	41 56                	push   %r14
  1122d0:	41 55                	push   %r13
  1122d2:	41 89 f5             	mov    %esi,%r13d
  1122d5:	41 54                	push   %r12
  1122d7:	53                   	push   %rbx
  1122d8:	48 89 fb             	mov    %rdi,%rbx
  1122db:	52                   	push   %rdx
	struct uart_ns16550_dev_data *data = dev->data;
  1122dc:	4c 8b 67 20          	mov    0x20(%rdi),%r12
	const struct uart_ns16550_device_config * const dev_cfg = dev->config;
  1122e0:	4c 8b 77 08          	mov    0x8(%rdi),%r14
  1122e4:	9c                   	pushf  
  1122e5:	fa                   	cli    
  1122e6:	41 5f                	pop    %r15
	while (!atomic_cas(&l->locked, 0, 1)) {
  1122e8:	49 83 c4 10          	add    $0x10,%r12
  1122ec:	31 c0                	xor    %eax,%eax
  1122ee:	ba 01 00 00 00       	mov    $0x1,%edx
  1122f3:	f0 49 0f b1 14 24    	lock cmpxchg %rdx,(%r12)
  1122f9:	74 0d                	je     112308 <uart_ns16550_poll_out+0x40>
		arch_spin_relax();
  1122fb:	e8 b0 6b 00 00       	call   118eb0 <arch_spin_relax>
  112300:	eb ea                	jmp    1122ec <uart_ns16550_poll_out+0x24>
	__asm__ volatile("movb %1, %0"
  112302:	8a 02                	mov    (%rdx),%al
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	while ((ns16550_inbyte(dev_cfg, LSR(dev)) & LSR_THRE) == 0) {
  112304:	a8 20                	test   $0x20,%al
  112306:	75 21                	jne    112329 <uart_ns16550_poll_out+0x61>
  112308:	48 89 df             	mov    %rbx,%rdi
  11230b:	e8 cc fe ff ff       	call   1121dc <get_port>
	return config->reg_interval;
  112310:	48 8b 53 08          	mov    0x8(%rbx),%rdx
	while ((ns16550_inbyte(dev_cfg, LSR(dev)) & LSR_THRE) == 0) {
  112314:	0f b6 52 28          	movzbl 0x28(%rdx),%edx
  112318:	48 8d 14 92          	lea    (%rdx,%rdx,4),%rdx
  11231c:	48 01 c2             	add    %rax,%rdx
	if (cfg->io_map) {
  11231f:	41 80 7e 29 00       	cmpb   $0x0,0x29(%r14)
  112324:	74 dc                	je     112302 <uart_ns16550_poll_out+0x3a>
	__asm__ volatile("inb %w1, %b0" : "=a"(ret) : "Nd"(port));
  112326:	ec                   	in     (%dx),%al
			return sys_in8(port);
  112327:	eb db                	jmp    112304 <uart_ns16550_poll_out+0x3c>
	}

	ns16550_outbyte(dev_cfg, THR(dev), c);
  112329:	48 89 df             	mov    %rbx,%rdi
  11232c:	41 0f b6 d5          	movzbl %r13b,%edx
  112330:	e8 a7 fe ff ff       	call   1121dc <get_port>
  112335:	41 8a 7e 29          	mov    0x29(%r14),%dil
  112339:	48 89 c6             	mov    %rax,%rsi
  11233c:	e8 d4 fe ff ff       	call   112215 <ns16550_outbyte.isra.0>
	atomic_clear(&l->locked);
  112341:	4c 89 e7             	mov    %r12,%rdi
  112344:	e8 da fe ff ff       	call   112223 <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  112349:	41 0f ba e7 09       	bt     $0x9,%r15d
  11234e:	73 01                	jae    112351 <uart_ns16550_poll_out+0x89>
		__asm__ volatile ("sti" ::: "memory");
  112350:	fb                   	sti    

	k_spin_unlock(&data->lock, key);
}
  112351:	58                   	pop    %rax
  112352:	5b                   	pop    %rbx
  112353:	41 5c                	pop    %r12
  112355:	41 5d                	pop    %r13
  112357:	41 5e                	pop    %r14
  112359:	41 5f                	pop    %r15
  11235b:	5d                   	pop    %rbp
  11235c:	c3                   	ret    

000000000011235d <uart_ns16550_err_check>:
 *
 * @return one of UART_ERROR_OVERRUN, UART_ERROR_PARITY, UART_ERROR_FRAMING,
 * UART_BREAK if an error was detected, 0 otherwise.
 */
static int uart_ns16550_err_check(const struct device *dev)
{
  11235d:	55                   	push   %rbp
  11235e:	48 89 e5             	mov    %rsp,%rbp
  112361:	41 56                	push   %r14
  112363:	49 89 fe             	mov    %rdi,%r14
  112366:	41 55                	push   %r13
  112368:	41 54                	push   %r12
  11236a:	53                   	push   %rbx
	struct uart_ns16550_dev_data *data = dev->data;
  11236b:	48 8b 5f 20          	mov    0x20(%rdi),%rbx
	const struct uart_ns16550_device_config * const dev_cfg = dev->config;
  11236f:	4c 8b 6f 08          	mov    0x8(%rdi),%r13
  112373:	9c                   	pushf  
  112374:	fa                   	cli    
  112375:	41 5c                	pop    %r12
	while (!atomic_cas(&l->locked, 0, 1)) {
  112377:	48 83 c3 10          	add    $0x10,%rbx
  11237b:	31 c0                	xor    %eax,%eax
  11237d:	ba 01 00 00 00       	mov    $0x1,%edx
  112382:	f0 48 0f b1 13       	lock cmpxchg %rdx,(%rbx)
  112387:	74 07                	je     112390 <uart_ns16550_err_check+0x33>
		arch_spin_relax();
  112389:	e8 22 6b 00 00       	call   118eb0 <arch_spin_relax>
  11238e:	eb eb                	jmp    11237b <uart_ns16550_err_check+0x1e>
	k_spinlock_key_t key = k_spin_lock(&data->lock);
	int check = (ns16550_inbyte(dev_cfg, LSR(dev)) & LSR_EOB_MASK);
  112390:	4c 89 f7             	mov    %r14,%rdi
  112393:	e8 44 fe ff ff       	call   1121dc <get_port>
	return config->reg_interval;
  112398:	49 8b 56 08          	mov    0x8(%r14),%rdx
	int check = (ns16550_inbyte(dev_cfg, LSR(dev)) & LSR_EOB_MASK);
  11239c:	0f b6 52 28          	movzbl 0x28(%rdx),%edx
  1123a0:	48 8d 14 92          	lea    (%rdx,%rdx,4),%rdx
  1123a4:	48 01 c2             	add    %rax,%rdx
	if (cfg->io_map) {
  1123a7:	41 80 7d 29 00       	cmpb   $0x0,0x29(%r13)
  1123ac:	74 03                	je     1123b1 <uart_ns16550_err_check+0x54>
	__asm__ volatile("inb %w1, %b0" : "=a"(ret) : "Nd"(port));
  1123ae:	ec                   	in     (%dx),%al
			return sys_in8(port);
  1123af:	eb 02                	jmp    1123b3 <uart_ns16550_err_check+0x56>
	__asm__ volatile("movb %1, %0"
  1123b1:	8a 02                	mov    (%rdx),%al
	int check = (ns16550_inbyte(dev_cfg, LSR(dev)) & LSR_EOB_MASK);
  1123b3:	89 c2                	mov    %eax,%edx
	atomic_clear(&l->locked);
  1123b5:	48 89 df             	mov    %rbx,%rdi
  1123b8:	e8 66 fe ff ff       	call   112223 <atomic_clear.isra.0>
  1123bd:	83 e2 1e             	and    $0x1e,%edx
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  1123c0:	41 0f ba e4 09       	bt     $0x9,%r12d
  1123c5:	73 01                	jae    1123c8 <uart_ns16550_err_check+0x6b>
		__asm__ volatile ("sti" ::: "memory");
  1123c7:	fb                   	sti    

	k_spin_unlock(&data->lock, key);

	return check >> 1;
  1123c8:	89 d0                	mov    %edx,%eax
}
  1123ca:	5b                   	pop    %rbx
  1123cb:	41 5c                	pop    %r12
	return check >> 1;
  1123cd:	d1 f8                	sar    %eax
}
  1123cf:	41 5d                	pop    %r13
  1123d1:	41 5e                	pop    %r14
  1123d3:	5d                   	pop    %rbp
  1123d4:	c3                   	ret    

00000000001123d5 <uart_ns16550_configure>:
{
  1123d5:	55                   	push   %rbp
	uint32_t pclk = 0U;
  1123d6:	31 c0                	xor    %eax,%eax
{
  1123d8:	48 89 e5             	mov    %rsp,%rbp
  1123db:	41 57                	push   %r15
  1123dd:	41 56                	push   %r14
  1123df:	41 55                	push   %r13
  1123e1:	49 89 f5             	mov    %rsi,%r13
  1123e4:	41 54                	push   %r12
  1123e6:	53                   	push   %rbx
  1123e7:	48 89 fb             	mov    %rdi,%rbx
  1123ea:	48 83 ec 28          	sub    $0x28,%rsp
	struct uart_ns16550_dev_data * const dev_data = dev->data;
  1123ee:	4c 8b 7f 20          	mov    0x20(%rdi),%r15
	const struct uart_ns16550_device_config * const dev_cfg = dev->config;
  1123f2:	4c 8b 67 08          	mov    0x8(%rdi),%r12
	uint32_t pclk = 0U;
  1123f6:	89 45 cc             	mov    %eax,-0x34(%rbp)
  1123f9:	9c                   	pushf  
  1123fa:	fa                   	cli    
  1123fb:	8f 45 b0             	pop    -0x50(%rbp)
	while (!atomic_cas(&l->locked, 0, 1)) {
  1123fe:	4d 8d 77 10          	lea    0x10(%r15),%r14
  112402:	31 c0                	xor    %eax,%eax
  112404:	ba 01 00 00 00       	mov    $0x1,%edx
  112409:	f0 49 0f b1 16       	lock cmpxchg %rdx,(%r14)
  11240e:	74 07                	je     112417 <uart_ns16550_configure+0x42>
		arch_spin_relax();
  112410:	e8 9b 6a 00 00       	call   118eb0 <arch_spin_relax>
  112415:	eb eb                	jmp    112402 <uart_ns16550_configure+0x2d>
	if (dev_cfg->sys_clk_freq != 0U) {
  112417:	41 8b 44 24 10       	mov    0x10(%r12),%eax
  11241c:	85 c0                	test   %eax,%eax
  11241e:	74 05                	je     112425 <uart_ns16550_configure+0x50>
		pclk = dev_cfg->sys_clk_freq;
  112420:	89 45 cc             	mov    %eax,-0x34(%rbp)
  112423:	eb 39                	jmp    11245e <uart_ns16550_configure+0x89>
		if (!device_is_ready(dev_cfg->clock_dev)) {
  112425:	49 8b 7c 24 18       	mov    0x18(%r12),%rdi
  11242a:	e8 f4 65 00 00       	call   118a23 <z_device_is_ready>
  11242f:	84 c0                	test   %al,%al
  112431:	75 0a                	jne    11243d <uart_ns16550_configure+0x68>
			ret = -EINVAL;
  112433:	b9 ea ff ff ff       	mov    $0xffffffea,%ecx
  112438:	e9 34 02 00 00       	jmp    112671 <uart_ns16550_configure+0x29c>
		if (clock_control_get_rate(dev_cfg->clock_dev,
  11243d:	49 8b 7c 24 18       	mov    0x18(%r12),%rdi
					   dev_cfg->clock_subsys,
  112442:	49 8b 74 24 20       	mov    0x20(%r12),%rsi
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
  112447:	48 8b 47 10          	mov    0x10(%rdi),%rax
  11244b:	48 8b 40 18          	mov    0x18(%rax),%rax
  11244f:	48 85 c0             	test   %rax,%rax
  112452:	74 df                	je     112433 <uart_ns16550_configure+0x5e>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
  112454:	48 8d 55 cc          	lea    -0x34(%rbp),%rdx
  112458:	ff d0                	call   *%rax
		if (clock_control_get_rate(dev_cfg->clock_dev,
  11245a:	85 c0                	test   %eax,%eax
  11245c:	75 d5                	jne    112433 <uart_ns16550_configure+0x5e>
	set_baud_rate(dev, cfg->baudrate, pclk);
  11245e:	45 8b 4d 00          	mov    0x0(%r13),%r9d
  112462:	8b 45 cc             	mov    -0x34(%rbp),%eax
	if ((baud_rate != 0U) && (pclk != 0U)) {
  112465:	45 85 c9             	test   %r9d,%r9d
  112468:	0f 84 d1 00 00 00    	je     11253f <uart_ns16550_configure+0x16a>
  11246e:	85 c0                	test   %eax,%eax
  112470:	0f 84 c9 00 00 00    	je     11253f <uart_ns16550_configure+0x16a>
					/ baud_rate) >> 4;
  112476:	31 d2                	xor    %edx,%edx
		divisor = ((pclk + (baud_rate << 3))
  112478:	42 8d 04 c8          	lea    (%rax,%r9,8),%eax
	const struct uart_ns16550_device_config * const dev_cfg = dev->config;
  11247c:	4c 8b 43 08          	mov    0x8(%rbx),%r8
		lcr_cache = ns16550_inbyte(dev_cfg, LCR(dev));
  112480:	48 89 df             	mov    %rbx,%rdi
					/ baud_rate) >> 4;
  112483:	41 f7 f1             	div    %r9d
	struct uart_ns16550_dev_data * const dev_data = dev->data;
  112486:	4c 8b 5b 20          	mov    0x20(%rbx),%r11
		divisor = ((pclk + (baud_rate << 3))
  11248a:	41 89 c2             	mov    %eax,%r10d
					/ baud_rate) >> 4;
  11248d:	89 45 bc             	mov    %eax,-0x44(%rbp)
		lcr_cache = ns16550_inbyte(dev_cfg, LCR(dev));
  112490:	e8 47 fd ff ff       	call   1121dc <get_port>
  112495:	41 0f b6 50 28       	movzbl 0x28(%r8),%edx
		divisor = ((pclk + (baud_rate << 3))
  11249a:	41 c1 ea 04          	shr    $0x4,%r10d
		lcr_cache = ns16550_inbyte(dev_cfg, LCR(dev));
  11249e:	48 8d 14 52          	lea    (%rdx,%rdx,2),%rdx
  1124a2:	48 01 c2             	add    %rax,%rdx
	if (cfg->io_map) {
  1124a5:	41 80 78 29 00       	cmpb   $0x0,0x29(%r8)
  1124aa:	74 05                	je     1124b1 <uart_ns16550_configure+0xdc>
	__asm__ volatile("inb %w1, %b0" : "=a"(ret) : "Nd"(port));
  1124ac:	ec                   	in     (%dx),%al
  1124ad:	89 c1                	mov    %eax,%ecx
			return sys_in8(port);
  1124af:	eb 02                	jmp    1124b3 <uart_ns16550_configure+0xde>
	__asm__ volatile("movb %1, %0"
  1124b1:	8a 0a                	mov    (%rdx),%cl
		ns16550_outbyte(dev_cfg, LCR(dev), LCR_DLAB | lcr_cache);
  1124b3:	48 89 df             	mov    %rbx,%rdi
  1124b6:	89 ca                	mov    %ecx,%edx
  1124b8:	e8 1f fd ff ff       	call   1121dc <get_port>
	return config->reg_interval;
  1124bd:	48 8b 73 08          	mov    0x8(%rbx),%rsi
		ns16550_outbyte(dev_cfg, LCR(dev), LCR_DLAB | lcr_cache);
  1124c1:	41 8a 78 29          	mov    0x29(%r8),%dil
  1124c5:	83 ca 80             	or     $0xffffff80,%edx
  1124c8:	0f b6 d2             	movzbl %dl,%edx
  1124cb:	0f b6 76 28          	movzbl 0x28(%rsi),%esi
  1124cf:	48 8d 34 76          	lea    (%rsi,%rsi,2),%rsi
  1124d3:	48 01 c6             	add    %rax,%rsi
  1124d6:	e8 3a fd ff ff       	call   112215 <ns16550_outbyte.isra.0>
		ns16550_outbyte(dev_cfg, BRDL(dev), (unsigned char)(divisor & 0xff));
  1124db:	48 89 df             	mov    %rbx,%rdi
  1124de:	41 0f b6 d2          	movzbl %r10b,%edx
  1124e2:	e8 f5 fc ff ff       	call   1121dc <get_port>
  1124e7:	41 8a 78 29          	mov    0x29(%r8),%dil
  1124eb:	48 89 c6             	mov    %rax,%rsi
  1124ee:	e8 22 fd ff ff       	call   112215 <ns16550_outbyte.isra.0>
		ns16550_outbyte(dev_cfg, BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
  1124f3:	48 89 df             	mov    %rbx,%rdi
  1124f6:	e8 e1 fc ff ff       	call   1121dc <get_port>
	return config->reg_interval;
  1124fb:	48 8b 73 08          	mov    0x8(%rbx),%rsi
		ns16550_outbyte(dev_cfg, BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
  1124ff:	8b 55 bc             	mov    -0x44(%rbp),%edx
  112502:	41 8a 78 29          	mov    0x29(%r8),%dil
  112506:	0f b6 76 28          	movzbl 0x28(%rsi),%esi
  11250a:	c1 ea 0c             	shr    $0xc,%edx
  11250d:	0f b6 d2             	movzbl %dl,%edx
  112510:	48 01 c6             	add    %rax,%rsi
  112513:	e8 fd fc ff ff       	call   112215 <ns16550_outbyte.isra.0>
		ns16550_outbyte(dev_cfg, LCR(dev), lcr_cache);
  112518:	48 89 df             	mov    %rbx,%rdi
  11251b:	0f b6 d1             	movzbl %cl,%edx
  11251e:	e8 b9 fc ff ff       	call   1121dc <get_port>
	return config->reg_interval;
  112523:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
		ns16550_outbyte(dev_cfg, LCR(dev), lcr_cache);
  112527:	41 8a 78 29          	mov    0x29(%r8),%dil
  11252b:	0f b6 71 28          	movzbl 0x28(%rcx),%esi
  11252f:	48 8d 34 76          	lea    (%rsi,%rsi,2),%rsi
  112533:	48 01 c6             	add    %rax,%rsi
  112536:	e8 da fc ff ff       	call   112215 <ns16550_outbyte.isra.0>
		dev_data->uart_config.baudrate = baud_rate;
  11253b:	45 89 4b 08          	mov    %r9d,0x8(%r11)
	switch (cfg->data_bits) {
  11253f:	41 8a 55 06          	mov    0x6(%r13),%dl
		ret = -ENOTSUP;
  112543:	b9 7a ff ff ff       	mov    $0xffffff7a,%ecx
  112548:	80 fa 03             	cmp    $0x3,%dl
  11254b:	0f 87 20 01 00 00    	ja     112671 <uart_ns16550_configure+0x29c>
	switch (cfg->stop_bits) {
  112551:	41 8a 45 05          	mov    0x5(%r13),%al
  112555:	3c 01                	cmp    $0x1,%al
  112557:	74 0c                	je     112565 <uart_ns16550_configure+0x190>
  112559:	41 b0 04             	mov    $0x4,%r8b
  11255c:	3c 03                	cmp    $0x3,%al
  11255e:	74 08                	je     112568 <uart_ns16550_configure+0x193>
  112560:	e9 0c 01 00 00       	jmp    112671 <uart_ns16550_configure+0x29c>
		uart_cfg.stop_bits = LCR_1_STB;
  112565:	45 31 c0             	xor    %r8d,%r8d
	switch (cfg->parity) {
  112568:	41 8a 75 04          	mov    0x4(%r13),%sil
  11256c:	40 84 f6             	test   %sil,%sil
  11256f:	74 12                	je     112583 <uart_ns16550_configure+0x1ae>
		ret = -ENOTSUP;
  112571:	b9 7a ff ff ff       	mov    $0xffffff7a,%ecx
	switch (cfg->parity) {
  112576:	40 80 fe 02          	cmp    $0x2,%sil
  11257a:	0f 85 f1 00 00 00    	jne    112671 <uart_ns16550_configure+0x29c>
  112580:	40 b6 10             	mov    $0x10,%sil
	dev_data->uart_config = *cfg;
  112583:	49 8b 45 00          	mov    0x0(%r13),%rax
	ns16550_outbyte(dev_cfg, LCR(dev),
  112587:	48 89 df             	mov    %rbx,%rdi
  11258a:	44 09 c2             	or     %r8d,%edx
  11258d:	09 f2                	or     %esi,%edx
	dev_data->uart_config = *cfg;
  11258f:	49 89 47 08          	mov    %rax,0x8(%r15)
	ns16550_outbyte(dev_cfg, LCR(dev),
  112593:	0f b6 d2             	movzbl %dl,%edx
  112596:	e8 41 fc ff ff       	call   1121dc <get_port>
	return config->reg_interval;
  11259b:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
	ns16550_outbyte(dev_cfg, LCR(dev),
  11259f:	41 8a 7c 24 29       	mov    0x29(%r12),%dil
  1125a4:	0f b6 71 28          	movzbl 0x28(%rcx),%esi
  1125a8:	48 8d 34 76          	lea    (%rsi,%rsi,2),%rsi
  1125ac:	48 01 c6             	add    %rax,%rsi
  1125af:	e8 61 fc ff ff       	call   112215 <ns16550_outbyte.isra.0>
	ns16550_outbyte(dev_cfg, MDC(dev), mdc);
  1125b4:	48 89 df             	mov    %rbx,%rdi
  1125b7:	e8 20 fc ff ff       	call   1121dc <get_port>
	return config->reg_interval;
  1125bc:	48 8b 53 08          	mov    0x8(%rbx),%rdx
	ns16550_outbyte(dev_cfg, MDC(dev), mdc);
  1125c0:	41 8a 7c 24 29       	mov    0x29(%r12),%dil
  1125c5:	0f b6 72 28          	movzbl 0x28(%rdx),%esi
  1125c9:	ba 0b 00 00 00       	mov    $0xb,%edx
  1125ce:	c1 e6 02             	shl    $0x2,%esi
  1125d1:	48 63 f6             	movslq %esi,%rsi
  1125d4:	48 01 c6             	add    %rax,%rsi
  1125d7:	e8 39 fc ff ff       	call   112215 <ns16550_outbyte.isra.0>
	ns16550_outbyte(dev_cfg, FCR(dev),
  1125dc:	48 89 df             	mov    %rbx,%rdi
  1125df:	e8 f8 fb ff ff       	call   1121dc <get_port>
	return config->reg_interval;
  1125e4:	48 8b 53 08          	mov    0x8(%rbx),%rdx
	ns16550_outbyte(dev_cfg, FCR(dev),
  1125e8:	41 8a 7c 24 29       	mov    0x29(%r12),%dil
  1125ed:	0f b6 72 28          	movzbl 0x28(%rdx),%esi
  1125f1:	ba 87 00 00 00       	mov    $0x87,%edx
  1125f6:	01 f6                	add    %esi,%esi
  1125f8:	48 63 f6             	movslq %esi,%rsi
  1125fb:	48 01 c6             	add    %rax,%rsi
  1125fe:	e8 12 fc ff ff       	call   112215 <ns16550_outbyte.isra.0>
	if ((ns16550_inbyte(dev_cfg, IIR(dev)) & IIR_FE) == IIR_FE) {
  112603:	48 89 df             	mov    %rbx,%rdi
  112606:	e8 d1 fb ff ff       	call   1121dc <get_port>
	return config->reg_interval;
  11260b:	48 8b 53 08          	mov    0x8(%rbx),%rdx
	if ((ns16550_inbyte(dev_cfg, IIR(dev)) & IIR_FE) == IIR_FE) {
  11260f:	0f b6 52 28          	movzbl 0x28(%rdx),%edx
  112613:	01 d2                	add    %edx,%edx
  112615:	48 63 d2             	movslq %edx,%rdx
  112618:	48 01 c2             	add    %rax,%rdx
	if (cfg->io_map) {
  11261b:	41 80 7c 24 29 00    	cmpb   $0x0,0x29(%r12)
  112621:	74 03                	je     112626 <uart_ns16550_configure+0x251>
	__asm__ volatile("inb %w1, %b0" : "=a"(ret) : "Nd"(port));
  112623:	ec                   	in     (%dx),%al
			return sys_in8(port);
  112624:	eb 02                	jmp    112628 <uart_ns16550_configure+0x253>
	__asm__ volatile("movb %1, %0"
  112626:	8a 02                	mov    (%rdx),%al
	if ((ns16550_inbyte(dev_cfg, IIR(dev)) & IIR_FE) == IIR_FE) {
  112628:	83 e0 c0             	and    $0xffffffc0,%eax
		dev_data->fifo_size = 16;
  11262b:	b2 10                	mov    $0x10,%dl
	ns16550_inbyte(dev_cfg, RDR(dev));
  11262d:	48 89 df             	mov    %rbx,%rdi
		dev_data->fifo_size = 16;
  112630:	3c c0                	cmp    $0xc0,%al
  112632:	b0 01                	mov    $0x1,%al
  112634:	0f 44 c2             	cmove  %edx,%eax
  112637:	41 88 47 18          	mov    %al,0x18(%r15)
	ns16550_inbyte(dev_cfg, RDR(dev));
  11263b:	e8 9c fb ff ff       	call   1121dc <get_port>
	if (cfg->io_map) {
  112640:	41 80 7c 24 29 00    	cmpb   $0x0,0x29(%r12)
	ns16550_inbyte(dev_cfg, RDR(dev));
  112646:	48 89 c2             	mov    %rax,%rdx
	if (cfg->io_map) {
  112649:	74 03                	je     11264e <uart_ns16550_configure+0x279>
	__asm__ volatile("inb %w1, %b0" : "=a"(ret) : "Nd"(port));
  11264b:	ec                   	in     (%dx),%al
			return sys_in8(port);
  11264c:	eb 02                	jmp    112650 <uart_ns16550_configure+0x27b>
	__asm__ volatile("movb %1, %0"
  11264e:	8a 02                	mov    (%rdx),%al
	ns16550_outbyte(dev_cfg, IER(dev), 0x00);
  112650:	48 89 df             	mov    %rbx,%rdi
	int ret = 0;
  112653:	31 c9                	xor    %ecx,%ecx
	ns16550_outbyte(dev_cfg, IER(dev), 0x00);
  112655:	e8 82 fb ff ff       	call   1121dc <get_port>
	return config->reg_interval;
  11265a:	48 8b 53 08          	mov    0x8(%rbx),%rdx
	ns16550_outbyte(dev_cfg, IER(dev), 0x00);
  11265e:	41 8a 7c 24 29       	mov    0x29(%r12),%dil
  112663:	0f b6 72 28          	movzbl 0x28(%rdx),%esi
  112667:	31 d2                	xor    %edx,%edx
  112669:	48 01 c6             	add    %rax,%rsi
  11266c:	e8 a4 fb ff ff       	call   112215 <ns16550_outbyte.isra.0>
	atomic_clear(&l->locked);
  112671:	4c 89 f7             	mov    %r14,%rdi
  112674:	e8 aa fb ff ff       	call   112223 <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  112679:	0f ba 65 b0 09       	btl    $0x9,-0x50(%rbp)
  11267e:	73 01                	jae    112681 <uart_ns16550_configure+0x2ac>
		__asm__ volatile ("sti" ::: "memory");
  112680:	fb                   	sti    
};
  112681:	48 83 c4 28          	add    $0x28,%rsp
  112685:	89 c8                	mov    %ecx,%eax
  112687:	5b                   	pop    %rbx
  112688:	41 5c                	pop    %r12
  11268a:	41 5d                	pop    %r13
  11268c:	41 5e                	pop    %r14
  11268e:	41 5f                	pop    %r15
  112690:	5d                   	pop    %rbp
  112691:	c3                   	ret    

0000000000112692 <uart_ns16550_init>:
{
  112692:	55                   	push   %rbp
  112693:	48 89 e5             	mov    %rsp,%rbp
  112696:	41 54                	push   %r12
  112698:	53                   	push   %rbx
	const struct uart_ns16550_device_config *dev_cfg = dev->config;
  112699:	48 8b 47 08          	mov    0x8(%rdi),%rax
{
  11269d:	48 89 fb             	mov    %rdi,%rbx
	struct uart_ns16550_dev_data *data = dev->data;
  1126a0:	4c 8b 67 20          	mov    0x20(%rdi),%r12
		if (!dev_cfg->io_map) {
  1126a4:	80 78 29 00          	cmpb   $0x0,0x29(%rax)
  1126a8:	75 14                	jne    1126be <uart_ns16550_init+0x2c>
  1126aa:	48 8b 50 08          	mov    0x8(%rax),%rdx
  1126ae:	48 8b 30             	mov    (%rax),%rsi
  1126b1:	b9 0a 00 00 00       	mov    $0xa,%ecx
  1126b6:	4c 89 e7             	mov    %r12,%rdi
  1126b9:	e8 d8 83 00 00       	call   11aa96 <z_phys_map>
	ret = uart_ns16550_configure(dev, &data->uart_config);
  1126be:	49 8d 74 24 08       	lea    0x8(%r12),%rsi
  1126c3:	48 89 df             	mov    %rbx,%rdi
}
  1126c6:	5b                   	pop    %rbx
  1126c7:	41 5c                	pop    %r12
  1126c9:	5d                   	pop    %rbp
	ret = uart_ns16550_configure(dev, &data->uart_config);
  1126ca:	e9 06 fd ff ff       	jmp    1123d5 <uart_ns16550_configure>

00000000001126cf <hpet_counter_get>:
 * @return Value of Main Counter
 */
static inline uint64_t hpet_counter_get(void)
{
#ifdef CONFIG_64BIT
	uint64_t val = sys_read64(MAIN_COUNTER_LOW_REG);
  1126cf:	48 8b 05 f2 3a 01 00 	mov    0x13af2(%rip),%rax        # 1261c8 <z_mmio_ram__hpet_regs>
  1126d6:	48 05 f0 00 00 00    	add    $0xf0,%rax
	__asm__ volatile("movq %1, %0"
  1126dc:	48 8b 00             	mov    (%rax),%rax
		low = sys_read32(MAIN_COUNTER_LOW_REG);
	} while (high != sys_read32(MAIN_COUNTER_HIGH_REG));

	return ((uint64_t)high << 32) | low;
#endif
}
  1126df:	c3                   	ret    

00000000001126e0 <atomic_clear.constprop.0.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
  1126e0:	31 c0                	xor    %eax,%eax
  1126e2:	48 87 05 d7 3a 01 00 	xchg   %rax,0x13ad7(%rip)        # 1261c0 <lock>
}
  1126e9:	c3                   	ret    

00000000001126ea <hpet_isr>:
	}
}

__isr
static void hpet_isr(const void *arg)
{
  1126ea:	55                   	push   %rbp
  1126eb:	48 89 e5             	mov    %rsp,%rbp
  1126ee:	41 54                	push   %r12
  1126f0:	53                   	push   %rbx
	__asm__ volatile ("pushfq; cli; popq %0" : "=g" (key) : : "memory");
  1126f1:	9c                   	pushf  
  1126f2:	fa                   	cli    
  1126f3:	5b                   	pop    %rbx
	return __atomic_compare_exchange_n(target, &old_value, new_value,
  1126f4:	45 31 e4             	xor    %r12d,%r12d
  1126f7:	ba 01 00 00 00       	mov    $0x1,%edx
  1126fc:	4c 89 e0             	mov    %r12,%rax
  1126ff:	f0 48 0f b1 15 b8 3a 	lock cmpxchg %rdx,0x13ab8(%rip)        # 1261c0 <lock>
  112706:	01 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  112708:	74 07                	je     112711 <hpet_isr+0x27>
		arch_spin_relax();
  11270a:	e8 a1 67 00 00       	call   118eb0 <arch_spin_relax>
  11270f:	eb e6                	jmp    1126f7 <hpet_isr+0xd>
	ARG_UNUSED(arg);

	k_spinlock_key_t key = k_spin_lock(&lock);

	uint64_t now = hpet_counter_get();
  112711:	e8 b9 ff ff ff       	call   1126cf <hpet_counter_get>
		/* Qemu in SMP mode has observed the clock going
		 * "backwards" relative to interrupts already received
		 * on the other CPU, despite the HPET being
		 * theoretically a global device.
		 */
		int64_t diff = (int64_t)(now - last_count);
  112716:	48 8b 35 9b 3a 01 00 	mov    0x13a9b(%rip),%rsi        # 1261b8 <last_count>

		if (last_count && diff < 0) {
  11271d:	48 39 f0             	cmp    %rsi,%rax
  112720:	79 07                	jns    112729 <hpet_isr+0x3f>
  112722:	48 85 f6             	test   %rsi,%rsi
  112725:	48 0f 45 c6          	cmovne %rsi,%rax
			now = last_count;
		}
	}
	uint32_t dticks = (uint32_t)((now - last_count) / cyc_per_tick);
  112729:	8b 0d 21 3b 01 00    	mov    0x13b21(%rip),%ecx        # 126250 <cyc_per_tick>
  11272f:	48 29 f0             	sub    %rsi,%rax
  112732:	31 d2                	xor    %edx,%edx
  112734:	48 f7 f1             	div    %rcx
  112737:	48 89 c7             	mov    %rax,%rdi

	last_count += (uint64_t)dticks * cyc_per_tick;
  11273a:	89 c0                	mov    %eax,%eax
	last_tick += dticks;
  11273c:	48 01 05 6d 3a 01 00 	add    %rax,0x13a6d(%rip)        # 1261b0 <last_tick>
	last_count += (uint64_t)dticks * cyc_per_tick;
  112743:	48 0f af c8          	imul   %rax,%rcx
	last_elapsed = 0;
  112747:	31 c0                	xor    %eax,%eax
  112749:	89 05 05 3b 01 00    	mov    %eax,0x13b05(%rip)        # 126254 <last_elapsed>
	last_count += (uint64_t)dticks * cyc_per_tick;
  11274f:	48 01 f1             	add    %rsi,%rcx
  112752:	48 89 0d 5f 3a 01 00 	mov    %rcx,0x13a5f(%rip)        # 1261b8 <last_count>
	atomic_clear(&l->locked);
  112759:	e8 82 ff ff ff       	call   1126e0 <atomic_clear.constprop.0.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11275e:	0f ba e3 09          	bt     $0x9,%ebx
  112762:	73 01                	jae    112765 <hpet_isr+0x7b>
		__asm__ volatile ("sti" ::: "memory");
  112764:	fb                   	sti    
		hpet_timer_comparator_set_safe(next);
	}

	k_spin_unlock(&lock, key);
	sys_clock_announce(dticks);
}
  112765:	5b                   	pop    %rbx
  112766:	41 5c                	pop    %r12
  112768:	5d                   	pop    %rbp
	sys_clock_announce(dticks);
  112769:	e9 50 7e 00 00       	jmp    11a5be <sys_clock_announce>

000000000011276e <hpet_timer_comparator_set_safe>:
{
  11276e:	55                   	push   %rbp
	sys_write64(val, TIMER0_COMPARATOR_LOW_REG);
  11276f:	48 8b 05 52 3a 01 00 	mov    0x13a52(%rip),%rax        # 1261c8 <z_mmio_ram__hpet_regs>
{
  112776:	48 89 e5             	mov    %rsp,%rbp
	__asm__ volatile("movq %0, %1"
  112779:	48 89 b8 08 01 00 00 	mov    %rdi,0x108(%rax)
	uint64_t now = hpet_counter_get();
  112780:	e8 4a ff ff ff       	call   1126cf <hpet_counter_get>
	if (unlikely((int64_t)(next - now) <= 0)) {
  112785:	48 29 c7             	sub    %rax,%rdi
  112788:	48 85 ff             	test   %rdi,%rdi
  11278b:	7f 27                	jg     1127b4 <hpet_timer_comparator_set_safe+0x46>
		uint32_t bump = 1;
  11278d:	b9 01 00 00 00       	mov    $0x1,%ecx
			next = now + bump;
  112792:	89 ca                	mov    %ecx,%edx
			bump *= 2;
  112794:	01 c9                	add    %ecx,%ecx
			next = now + bump;
  112796:	48 01 c2             	add    %rax,%rdx
	sys_write64(val, TIMER0_COMPARATOR_LOW_REG);
  112799:	48 8b 05 28 3a 01 00 	mov    0x13a28(%rip),%rax        # 1261c8 <z_mmio_ram__hpet_regs>
  1127a0:	48 89 90 08 01 00 00 	mov    %rdx,0x108(%rax)
			now = hpet_counter_get();
  1127a7:	e8 23 ff ff ff       	call   1126cf <hpet_counter_get>
		} while ((int64_t)(next - now) <= 0);
  1127ac:	48 29 c2             	sub    %rax,%rdx
  1127af:	48 85 d2             	test   %rdx,%rdx
  1127b2:	7e de                	jle    112792 <hpet_timer_comparator_set_safe+0x24>
}
  1127b4:	5d                   	pop    %rbp
  1127b5:	c3                   	ret    

00000000001127b6 <sys_clock_driver_init>:
	hpet_gconf_set(reg);
}

__boot_func
static int sys_clock_driver_init(void)
{
  1127b6:	55                   	push   %rbp
  1127b7:	b9 0a 00 00 00       	mov    $0xa,%ecx
  1127bc:	ba 00 04 00 00       	mov    $0x400,%edx
  1127c1:	be 00 00 d0 fe       	mov    $0xfed00000,%esi
  1127c6:	bf c8 61 12 00       	mov    $0x1261c8,%edi
  1127cb:	48 89 e5             	mov    %rsp,%rbp
  1127ce:	e8 c3 82 00 00       	call   11aa96 <z_phys_map>
	ARG_UNUSED(z_clock_hw_cycles_per_sec);

	DEVICE_MMIO_TOPLEVEL_MAP(hpet_regs, K_MEM_CACHE_NONE);

#if DT_INST_IRQ_HAS_CELL(0, sense)
	IRQ_CONNECT(DT_INST_IRQN(0),
  1127d3:	45 31 c0             	xor    %r8d,%r8d
  1127d6:	31 c9                	xor    %ecx,%ecx
  1127d8:	ba ea 26 11 00       	mov    $0x1126ea,%edx
  1127dd:	be 04 00 00 00       	mov    $0x4,%esi
  1127e2:	bf 02 00 00 00       	mov    $0x2,%edi
  1127e7:	e8 f0 f2 ff ff       	call   111adc <arch_irq_connect_dynamic>
	return sys_read32(TIMER0_CONF_REG);
  1127ec:	48 8b 05 d5 39 01 00 	mov    0x139d5(%rip),%rax        # 1261c8 <z_mmio_ram__hpet_regs>
  1127f3:	48 05 00 01 00 00    	add    $0x100,%rax
	__asm__ volatile("movl %1, %0"
  1127f9:	8b 00                	mov    (%rax),%eax
	val |= TIMER_CONF_INT_ENABLE;
  1127fb:	25 f7 80 ff ff       	and    $0xffff80f7,%eax
	sys_write32(val, TIMER0_CONF_REG);
  112800:	48 8b 35 c1 39 01 00 	mov    0x139c1(%rip),%rsi        # 1261c8 <z_mmio_ram__hpet_regs>
	val |= TIMER_CONF_INT_ENABLE;
  112807:	0d 04 04 00 00       	or     $0x404,%eax
	__asm__ volatile("movl %0, %1"
  11280c:	89 86 00 01 00 00    	mov    %eax,0x100(%rsi)
	IRQ_CONNECT(DT_INST_IRQN(0),
		    DT_INST_IRQ(0, priority),
		    hpet_isr, 0, 0);
#endif
	config_timer0(DT_INST_IRQN(0));
	irq_enable(DT_INST_IRQN(0));
  112812:	bf 02 00 00 00       	mov    $0x2,%edi
  112817:	e8 2b f9 ff ff       	call   112147 <arch_irq_enable>
	return sys_read32(CLK_PERIOD_REG);
  11281c:	48 8b 05 a5 39 01 00 	mov    0x139a5(%rip),%rax        # 1261c8 <z_mmio_ram__hpet_regs>
	__asm__ volatile("movl %1, %0"
  112823:	8b 48 04             	mov    0x4(%rax),%ecx

#ifdef CONFIG_TIMER_READS_ITS_FREQUENCY_AT_RUNTIME
	hz = (uint32_t)(HPET_COUNTER_CLK_PERIOD / hpet_counter_clk_period_get());
  112826:	48 b8 00 80 c6 a4 7e 	movabs $0x38d7ea4c68000,%rax
  11282d:	8d 03 00 
  112830:	89 c9                	mov    %ecx,%ecx
  112832:	31 d2                	xor    %edx,%edx
  112834:	48 f7 f1             	div    %rcx
	z_clock_hw_cycles_per_sec = hz;
	cyc_per_tick = hz / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
  112837:	b9 64 00 00 00       	mov    $0x64,%ecx
  11283c:	31 d2                	xor    %edx,%edx
	z_clock_hw_cycles_per_sec = hz;
  11283e:	89 05 1c 01 03 00    	mov    %eax,0x3011c(%rip)        # 142960 <z_clock_hw_cycles_per_sec>
	cyc_per_tick = hz / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
  112844:	f7 f1                	div    %ecx
  112846:	89 05 04 3a 01 00    	mov    %eax,0x13a04(%rip)        # 126250 <cyc_per_tick>
	return sys_read32(GCONF_REG);
  11284c:	48 8b 05 75 39 01 00 	mov    0x13975(%rip),%rax        # 1261c8 <z_mmio_ram__hpet_regs>
  112853:	48 83 c0 10          	add    $0x10,%rax
  112857:	8b 00                	mov    (%rax),%eax
	sys_write32(val, GCONF_REG);
  112859:	48 8b 35 68 39 01 00 	mov    0x13968(%rip),%rsi        # 1261c8 <z_mmio_ram__hpet_regs>
	 * nothing in Zephyr disables the PIT which then fires
	 * interrupts into the same IRQ.  But that means we're then
	 * forced to use IRQ2 contra the way the kconfig IRQ selection
	 * is supposed to work.  Should fix this.
	 */
	reg |= GCONF_LR;
  112860:	83 c8 03             	or     $0x3,%eax
	__asm__ volatile("movl %0, %1"
  112863:	89 46 10             	mov    %eax,0x10(%rsi)
#endif

	hpet_gconf_set(reg);

	last_tick = hpet_counter_get() / cyc_per_tick;
  112866:	e8 64 fe ff ff       	call   1126cf <hpet_counter_get>
  11286b:	8b 3d df 39 01 00    	mov    0x139df(%rip),%edi        # 126250 <cyc_per_tick>
  112871:	31 d2                	xor    %edx,%edx
  112873:	48 f7 f7             	div    %rdi
  112876:	48 89 05 33 39 01 00 	mov    %rax,0x13933(%rip)        # 1261b0 <last_tick>
	last_count = last_tick * cyc_per_tick;
  11287d:	48 0f af c7          	imul   %rdi,%rax
	hpet_timer_comparator_set_safe(last_count + cyc_per_tick);
  112881:	48 01 c7             	add    %rax,%rdi
	last_count = last_tick * cyc_per_tick;
  112884:	48 89 05 2d 39 01 00 	mov    %rax,0x1392d(%rip)        # 1261b8 <last_count>
	hpet_timer_comparator_set_safe(last_count + cyc_per_tick);
  11288b:	e8 de fe ff ff       	call   11276e <hpet_timer_comparator_set_safe>

	return 0;
}
  112890:	31 c0                	xor    %eax,%eax
  112892:	5d                   	pop    %rbp
  112893:	c3                   	ret    

0000000000112894 <smp_timer_init>:
}
  112894:	c3                   	ret    

0000000000112895 <sys_clock_set_timeout>:
{
  112895:	55                   	push   %rbp
  112896:	48 89 e5             	mov    %rsp,%rbp
  112899:	41 55                	push   %r13
  11289b:	41 54                	push   %r12
  11289d:	53                   	push   %rbx
  11289e:	52                   	push   %rdx
	if (ticks == K_TICKS_FOREVER && idle) {
  11289f:	83 ff ff             	cmp    $0xffffffff,%edi
  1128a2:	75 26                	jne    1128ca <sys_clock_set_timeout+0x35>
  1128a4:	40 84 f6             	test   %sil,%sil
  1128a7:	74 1c                	je     1128c5 <sys_clock_set_timeout+0x30>
	return sys_read32(GCONF_REG);
  1128a9:	48 8b 05 18 39 01 00 	mov    0x13918(%rip),%rax        # 1261c8 <z_mmio_ram__hpet_regs>
  1128b0:	48 83 c0 10          	add    $0x10,%rax
	__asm__ volatile("movl %1, %0"
  1128b4:	8b 00                	mov    (%rax),%eax
	sys_write32(val, GCONF_REG);
  1128b6:	48 8b 0d 0b 39 01 00 	mov    0x1390b(%rip),%rcx        # 1261c8 <z_mmio_ram__hpet_regs>
		reg &= ~GCONF_ENABLE;
  1128bd:	83 e0 fe             	and    $0xfffffffe,%eax
	__asm__ volatile("movl %0, %1"
  1128c0:	89 41 10             	mov    %eax,0x10(%rcx)
}
  1128c3:	eb 6e                	jmp    112933 <sys_clock_set_timeout+0x9e>
	ticks = ticks == K_TICKS_FOREVER ? HPET_MAX_TICKS : ticks;
  1128c5:	83 ff ff             	cmp    $0xffffffff,%edi
  1128c8:	74 09                	je     1128d3 <sys_clock_set_timeout+0x3e>
	ticks = CLAMP(ticks, 0, HPET_MAX_TICKS/2);
  1128ca:	45 31 e4             	xor    %r12d,%r12d
  1128cd:	85 ff                	test   %edi,%edi
  1128cf:	7f 07                	jg     1128d8 <sys_clock_set_timeout+0x43>
  1128d1:	eb 12                	jmp    1128e5 <sys_clock_set_timeout+0x50>
	ticks = ticks == K_TICKS_FOREVER ? HPET_MAX_TICKS : ticks;
  1128d3:	bf ff ff ff 7f       	mov    $0x7fffffff,%edi
	ticks = CLAMP(ticks, 0, HPET_MAX_TICKS/2);
  1128d8:	41 bc ff ff ff 3f    	mov    $0x3fffffff,%r12d
  1128de:	44 39 e7             	cmp    %r12d,%edi
  1128e1:	44 0f 4e e7          	cmovle %edi,%r12d
	__asm__ volatile ("pushfq; cli; popq %0" : "=g" (key) : : "memory");
  1128e5:	9c                   	pushf  
  1128e6:	fa                   	cli    
  1128e7:	5b                   	pop    %rbx
  1128e8:	45 31 ed             	xor    %r13d,%r13d
  1128eb:	ba 01 00 00 00       	mov    $0x1,%edx
  1128f0:	4c 89 e8             	mov    %r13,%rax
  1128f3:	f0 48 0f b1 15 c4 38 	lock cmpxchg %rdx,0x138c4(%rip)        # 1261c0 <lock>
  1128fa:	01 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  1128fc:	74 07                	je     112905 <sys_clock_set_timeout+0x70>
		arch_spin_relax();
  1128fe:	e8 ad 65 00 00       	call   118eb0 <arch_spin_relax>
  112903:	eb e6                	jmp    1128eb <sys_clock_set_timeout+0x56>
	uint64_t cyc = (last_tick + last_elapsed + ticks) * cyc_per_tick;
  112905:	8b 05 45 39 01 00    	mov    0x13945(%rip),%eax        # 126250 <cyc_per_tick>
  11290b:	8b 3d 43 39 01 00    	mov    0x13943(%rip),%edi        # 126254 <last_elapsed>
  112911:	4d 63 e4             	movslq %r12d,%r12
  112914:	48 03 3d 95 38 01 00 	add    0x13895(%rip),%rdi        # 1261b0 <last_tick>
  11291b:	4c 01 e7             	add    %r12,%rdi
  11291e:	48 0f af f8          	imul   %rax,%rdi
	hpet_timer_comparator_set_safe(cyc);
  112922:	e8 47 fe ff ff       	call   11276e <hpet_timer_comparator_set_safe>
	atomic_clear(&l->locked);
  112927:	e8 b4 fd ff ff       	call   1126e0 <atomic_clear.constprop.0.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11292c:	0f ba e3 09          	bt     $0x9,%ebx
  112930:	73 01                	jae    112933 <sys_clock_set_timeout+0x9e>
		__asm__ volatile ("sti" ::: "memory");
  112932:	fb                   	sti    
}
  112933:	58                   	pop    %rax
  112934:	5b                   	pop    %rbx
  112935:	41 5c                	pop    %r12
  112937:	41 5d                	pop    %r13
  112939:	5d                   	pop    %rbp
  11293a:	c3                   	ret    

000000000011293b <sys_clock_elapsed>:
{
  11293b:	55                   	push   %rbp
  11293c:	48 89 e5             	mov    %rsp,%rbp
  11293f:	41 54                	push   %r12
  112941:	53                   	push   %rbx
  112942:	9c                   	pushf  
  112943:	fa                   	cli    
  112944:	5b                   	pop    %rbx
  112945:	45 31 e4             	xor    %r12d,%r12d
  112948:	ba 01 00 00 00       	mov    $0x1,%edx
  11294d:	4c 89 e0             	mov    %r12,%rax
  112950:	f0 48 0f b1 15 67 38 	lock cmpxchg %rdx,0x13867(%rip)        # 1261c0 <lock>
  112957:	01 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  112959:	74 07                	je     112962 <sys_clock_elapsed+0x27>
		arch_spin_relax();
  11295b:	e8 50 65 00 00       	call   118eb0 <arch_spin_relax>
  112960:	eb e6                	jmp    112948 <sys_clock_elapsed+0xd>
	uint64_t now = hpet_counter_get();
  112962:	e8 68 fd ff ff       	call   1126cf <hpet_counter_get>
	uint32_t ret = (uint32_t)((now - last_count) / cyc_per_tick);
  112967:	8b 0d e3 38 01 00    	mov    0x138e3(%rip),%ecx        # 126250 <cyc_per_tick>
  11296d:	31 d2                	xor    %edx,%edx
  11296f:	48 2b 05 42 38 01 00 	sub    0x13842(%rip),%rax        # 1261b8 <last_count>
  112976:	48 f7 f1             	div    %rcx
	last_elapsed = ret;
  112979:	89 05 d5 38 01 00    	mov    %eax,0x138d5(%rip)        # 126254 <last_elapsed>
	uint32_t ret = (uint32_t)((now - last_count) / cyc_per_tick);
  11297f:	89 c2                	mov    %eax,%edx
	atomic_clear(&l->locked);
  112981:	e8 5a fd ff ff       	call   1126e0 <atomic_clear.constprop.0.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  112986:	0f ba e3 09          	bt     $0x9,%ebx
  11298a:	73 01                	jae    11298d <sys_clock_elapsed+0x52>
		__asm__ volatile ("sti" ::: "memory");
  11298c:	fb                   	sti    
}
  11298d:	5b                   	pop    %rbx
  11298e:	89 d0                	mov    %edx,%eax
  112990:	41 5c                	pop    %r12
  112992:	5d                   	pop    %rbp
  112993:	c3                   	ret    

0000000000112994 <sys_clock_cycle_get_32>:
{
  112994:	55                   	push   %rbp
  112995:	48 89 e5             	mov    %rsp,%rbp
	return (uint32_t)hpet_counter_get();
  112998:	e8 32 fd ff ff       	call   1126cf <hpet_counter_get>
}
  11299d:	5d                   	pop    %rbp
  11299e:	c3                   	ret    

000000000011299f <DebugLog>:
extern "C" void DebugLog(const char* s) {
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  // Reusing TF_LITE_STRIP_ERROR_STRINGS to disable DebugLog completely to get
  // maximum reduction in binary size. This is because we have DebugLog calls
  // via TF_LITE_CHECK that are not stubbed out by TF_LITE_REPORT_ERROR.
  fprintf(stderr, "%s", s);
  11299f:	48 8b 05 a2 ff 02 00 	mov    0x2ffa2(%rip),%rax        # 142948 <_impure_ptr>
  1129a6:	48 8b 70 18          	mov    0x18(%rax),%rsi
  1129aa:	e9 71 05 ff ff       	jmp    102f20 <fputs>

00000000001129af <_ZN12_GLOBAL__N_13LogEPKcP13__va_list_tag>:
void Log(const char* format, va_list args) {
  1129af:	55                   	push   %rbp
  1129b0:	48 89 fa             	mov    %rdi,%rdx
  1129b3:	48 89 f1             	mov    %rsi,%rcx
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
  1129b6:	be 00 01 00 00       	mov    $0x100,%esi
void Log(const char* format, va_list args) {
  1129bb:	48 89 e5             	mov    %rsp,%rbp
  1129be:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
  1129c5:	48 8d bd 00 ff ff ff 	lea    -0x100(%rbp),%rdi
  1129cc:	e8 ff 02 00 00       	call   112cd0 <MicroVsnprintf>
  DebugLog(log_buffer);
  1129d1:	48 8d bd 00 ff ff ff 	lea    -0x100(%rbp),%rdi
  1129d8:	e8 c2 ff ff ff       	call   11299f <DebugLog>
  DebugLog("\r\n");
  1129dd:	bf 52 e3 11 00       	mov    $0x11e352,%edi
  1129e2:	e8 b8 ff ff ff       	call   11299f <DebugLog>
}
  1129e7:	c9                   	leave  
  1129e8:	c3                   	ret    

00000000001129e9 <_Z11MicroPrintfPKcz>:
void MicroPrintf(const char* format, ...) {
  1129e9:	55                   	push   %rbp
  1129ea:	48 89 e5             	mov    %rsp,%rbp
  1129ed:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  1129f4:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  1129fb:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  112a02:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  112a09:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  112a10:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  112a17:	84 c0                	test   %al,%al
  112a19:	74 20                	je     112a3b <_Z11MicroPrintfPKcz+0x52>
  112a1b:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  112a1f:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  112a23:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  112a27:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  112a2b:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  112a2f:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  112a33:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  112a37:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  va_start(args, format);
  112a3b:	48 8d 45 10          	lea    0x10(%rbp),%rax
  Log(format, args);
  112a3f:	48 8d b5 38 ff ff ff 	lea    -0xc8(%rbp),%rsi
  va_start(args, format);
  112a46:	c7 85 38 ff ff ff 08 	movl   $0x8,-0xc8(%rbp)
  112a4d:	00 00 00 
  112a50:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  112a57:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  112a5e:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  112a65:	00 00 00 
  112a68:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  Log(format, args);
  112a6f:	e8 3b ff ff ff       	call   1129af <_ZN12_GLOBAL__N_13LogEPKcP13__va_list_tag>
}
  112a74:	c9                   	leave  
  112a75:	c3                   	ret    

0000000000112a76 <_ZN6tflite14AlignPointerUpEPhm>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
  112a76:	48 8d 4c 3e ff       	lea    -0x1(%rsi,%rdi,1),%rcx
  112a7b:	31 d2                	xor    %edx,%edx
  112a7d:	48 89 c8             	mov    %rcx,%rax
  112a80:	48 f7 f6             	div    %rsi
  112a83:	48 89 c8             	mov    %rcx,%rax
  112a86:	48 29 d0             	sub    %rdx,%rax
  return aligned_result;
}
  112a89:	c3                   	ret    

0000000000112a8a <_ZN6tflite16AlignPointerDownEPhm>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
  112a8a:	48 89 f8             	mov    %rdi,%rax
  112a8d:	31 d2                	xor    %edx,%edx
  112a8f:	48 f7 f6             	div    %rsi
  112a92:	48 89 f8             	mov    %rdi,%rax
  112a95:	48 29 d0             	sub    %rdx,%rax
  return aligned_result;
}
  112a98:	c3                   	ret    

0000000000112a99 <_ZN6tflite11AlignSizeUpEmm>:

size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
  112a99:	48 8d 4c 3e ff       	lea    -0x1(%rsi,%rdi,1),%rcx
  112a9e:	31 d2                	xor    %edx,%edx
  112aa0:	48 89 c8             	mov    %rcx,%rax
  112aa3:	48 f7 f6             	div    %rsi
  112aa6:	48 89 c8             	mov    %rcx,%rax
  112aa9:	48 29 d0             	sub    %rdx,%rax
  return aligned_size;
}
  112aac:	c3                   	ret    

0000000000112aad <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  112aad:	89 f9                	mov    %edi,%ecx
  switch (type) {
  112aaf:	83 ff 0a             	cmp    $0xa,%edi
  112ab2:	77 3e                	ja     112af2 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x45>
  112ab4:	83 ff 02             	cmp    $0x2,%edi
  112ab7:	77 0e                	ja     112ac7 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x1a>
  112ab9:	ff c9                	dec    %ecx
  112abb:	b8 01 00 00 00       	mov    $0x1,%eax
  112ac0:	83 f9 01             	cmp    $0x1,%ecx
  112ac3:	76 50                	jbe    112b15 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x68>
  112ac5:	eb 66                	jmp    112b2d <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x80>
  112ac7:	ba 01 00 00 00       	mov    $0x1,%edx
  112acc:	48 d3 e2             	shl    %cl,%rdx
  112acf:	f7 c2 48 02 00 00    	test   $0x248,%edx
  112ad5:	75 45                	jne    112b1c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x6f>
  112ad7:	f7 c2 10 01 00 00    	test   $0x110,%edx
  112add:	75 44                	jne    112b23 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x76>
  112adf:	b8 02 00 00 00       	mov    $0x2,%eax
  112ae4:	f7 c2 80 04 00 00    	test   $0x480,%edx
  112aea:	75 3c                	jne    112b28 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x7b>
  112aec:	b8 01 00 00 00       	mov    $0x1,%eax
  112af1:	c3                   	ret    
  112af2:	83 ff 0d             	cmp    $0xd,%edi
  112af5:	74 2c                	je     112b23 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x76>
  112af7:	77 12                	ja     112b0b <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x5e>
  112af9:	31 c0                	xor    %eax,%eax
  112afb:	83 ff 0b             	cmp    $0xb,%edi
  112afe:	0f 95 c0             	setne  %al
  112b01:	48 8d 04 c5 08 00 00 	lea    0x8(,%rax,8),%rax
  112b08:	00 
  112b09:	eb 1d                	jmp    112b28 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x7b>
  112b0b:	b8 01 00 00 00       	mov    $0x1,%eax
  112b10:	83 ff 10             	cmp    $0x10,%edi
  112b13:	75 18                	jne    112b2d <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x80>
  112b15:	b8 04 00 00 00       	mov    $0x4,%eax
  112b1a:	eb 0c                	jmp    112b28 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x7b>
  112b1c:	b8 01 00 00 00       	mov    $0x1,%eax
  112b21:	eb 05                	jmp    112b28 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm+0x7b>
  112b23:	b8 08 00 00 00       	mov    $0x8,%eax
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
  112b28:	48 89 06             	mov    %rax,(%rsi)
      *size = sizeof(double) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
  112b2b:	31 c0                	xor    %eax,%eax
}
  112b2d:	c3                   	ret    

0000000000112b2e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
  112b2e:	55                   	push   %rbp
  112b2f:	48 89 e5             	mov    %rsp,%rbp
  112b32:	41 55                	push   %r13
  112b34:	49 89 d5             	mov    %rdx,%r13
  112b37:	41 54                	push   %r12
  112b39:	49 89 f4             	mov    %rsi,%r12
    return data_ - ReadScalar<soffset_t>(data_);
  112b3c:	48 89 fe             	mov    %rdi,%rsi
  112b3f:	53                   	push   %rbx
  112b40:	48 83 ec 18          	sub    $0x18,%rsp
  112b44:	48 63 07             	movslq (%rdi),%rax
  112b47:	48 29 c6             	sub    %rax,%rsi
  112b4a:	66 44 8b 0e          	mov    (%rsi),%r9w
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
  112b4e:	66 41 83 f9 04       	cmp    $0x4,%r9w
  112b53:	76 6d                	jbe    112bc2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0x94>
  112b55:	0f b7 46 04          	movzwl 0x4(%rsi),%eax
  112b59:	49 89 f8             	mov    %rdi,%r8
  112b5c:	48 89 c2             	mov    %rax,%rdx
    auto p = data_ + field_offset;
  112b5f:	48 01 f8             	add    %rdi,%rax
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  112b62:	66 85 d2             	test   %dx,%dx
  112b65:	74 3d                	je     112ba4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0x76>
  112b67:	8b 10                	mov    (%rax),%edx
  int element_count = 1;
  112b69:	bb 01 00 00 00       	mov    $0x1,%ebx
  112b6e:	48 01 d0             	add    %rdx,%rax
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
  112b71:	31 d2                	xor    %edx,%edx
  uoffset_t size() const { return EndianScalar(length_); }
  112b73:	44 8b 10             	mov    (%rax),%r10d
  112b76:	4c 89 d7             	mov    %r10,%rdi
  112b79:	4c 39 d2             	cmp    %r10,%rdx
  112b7c:	73 2b                	jae    112ba9 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0x7b>
    FLATBUFFERS_ASSERT(i < size());
  112b7e:	39 fa                	cmp    %edi,%edx
  112b80:	72 19                	jb     112b9b <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0x6d>
  112b82:	b9 55 e3 11 00       	mov    $0x11e355,%ecx
  112b87:	ba 60 e3 11 00       	mov    $0x11e360,%edx
  112b8c:	be 06 01 00 00       	mov    $0x106,%esi
  112b91:	bf 07 e4 11 00       	mov    $0x11e407,%edi
  112b96:	e8 d5 01 ff ff       	call   102d70 <__assert_func>
  static return_type Read(const uint8_t *p, uoffset_t i) {
  112b9b:	48 ff c2             	inc    %rdx
      element_count *= flatbuffer_tensor.shape()->Get(n);
  112b9e:	0f af 1c 90          	imul   (%rax,%rdx,4),%ebx
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
  112ba2:	eb d5                	jmp    112b79 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0x4b>
  int element_count = 1;
  112ba4:	bb 01 00 00 00       	mov    $0x1,%ebx
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  112ba9:	31 ff                	xor    %edi,%edi
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
  112bab:	66 41 83 f9 06       	cmp    $0x6,%r9w
  112bb0:	76 17                	jbe    112bc9 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0x9b>
  112bb2:	0f b7 46 06          	movzwl 0x6(%rsi),%eax
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  112bb6:	66 85 c0             	test   %ax,%ax
  112bb9:	74 0e                	je     112bc9 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0x9b>
  112bbb:	41 0f be 3c 00       	movsbl (%r8,%rax,1),%edi
  112bc0:	eb 07                	jmp    112bc9 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0x9b>
  112bc2:	bb 01 00 00 00       	mov    $0x1,%ebx
  112bc7:	31 ff                	xor    %edi,%edi
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
  112bc9:	48 89 ca             	mov    %rcx,%rdx
  112bcc:	48 8d 75 dc          	lea    -0x24(%rbp),%rsi
  112bd0:	e8 92 10 00 00       	call   113c67 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
  112bd5:	85 c0                	test   %eax,%eax
  112bd7:	75 1b                	jne    112bf4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0xc6>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
  112bd9:	8b 7d dc             	mov    -0x24(%rbp),%edi
  112bdc:	4c 89 ee             	mov    %r13,%rsi
  112bdf:	e8 c9 fe ff ff       	call   112aad <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm>
  112be4:	85 c0                	test   %eax,%eax
  112be6:	75 0c                	jne    112bf4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE+0xc6>
  *bytes = element_count * (*type_size);
  112be8:	48 63 db             	movslq %ebx,%rbx
  112beb:	49 0f af 5d 00       	imul   0x0(%r13),%rbx
  112bf0:	49 89 1c 24          	mov    %rbx,(%r12)
  return kTfLiteOk;
}
  112bf4:	48 83 c4 18          	add    $0x18,%rsp
  112bf8:	5b                   	pop    %rbx
  112bf9:	41 5c                	pop    %r12
  112bfb:	41 5d                	pop    %r13
  112bfd:	5d                   	pop    %rbp
  112bfe:	c3                   	ret    

0000000000112bff <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
  112bff:	55                   	push   %rbp
  112c00:	48 89 e5             	mov    %rsp,%rbp
  112c03:	48 83 ec 10          	sub    $0x10,%rsp
  TFLITE_DCHECK(out_bytes != nullptr);
  112c07:	48 85 f6             	test   %rsi,%rsi
  112c0a:	75 05                	jne    112c11 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm+0x12>
  112c0c:	e8 b3 f1 ff ff       	call   111dc4 <abort>

  int element_count = 1;
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
  112c11:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  112c15:	49 89 f1             	mov    %rsi,%r9
  int element_count = 1;
  112c18:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  if (eval_tensor->dims != nullptr) {
  112c1e:	48 85 d2             	test   %rdx,%rdx
  112c21:	74 13                	je     112c36 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm+0x37>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
  112c23:	8b 0a                	mov    (%rdx),%ecx
  112c25:	31 c0                	xor    %eax,%eax
  112c27:	39 c1                	cmp    %eax,%ecx
  112c29:	7e 0b                	jle    112c36 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm+0x37>
      element_count *= eval_tensor->dims->data[n];
  112c2b:	44 0f af 44 82 04    	imul   0x4(%rdx,%rax,4),%r8d
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
  112c31:	48 ff c0             	inc    %rax
  112c34:	eb f1                	jmp    112c27 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm+0x28>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
  112c36:	8b 7f 10             	mov    0x10(%rdi),%edi
  112c39:	48 8d 75 f8          	lea    -0x8(%rbp),%rsi
  112c3d:	e8 6b fe ff ff       	call   112aad <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm>
  112c42:	85 c0                	test   %eax,%eax
  112c44:	75 0b                	jne    112c51 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPm+0x52>
  *out_bytes = element_count * type_size;
  112c46:	4d 63 c0             	movslq %r8d,%r8
  112c49:	4c 0f af 45 f8       	imul   -0x8(%rbp),%r8
  112c4e:	4d 89 01             	mov    %r8,(%r9)
  return kTfLiteOk;
}
  112c51:	c9                   	leave  
  112c52:	c3                   	ret    

0000000000112c53 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
}

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
  char* current = main;
  112c53:	48 89 f8             	mov    %rdi,%rax
  while (*current != 0) {
  112c56:	80 38 00             	cmpb   $0x0,(%rax)
  112c59:	74 05                	je     112c60 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0xd>
    ++current;
  112c5b:	48 ff c0             	inc    %rax
  112c5e:	eb f6                	jmp    112c56 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x3>
  }
  char* current_end = main + (main_max_length - 1);
  112c60:	48 63 f6             	movslq %esi,%rsi
  112c63:	48 8d 74 37 ff       	lea    -0x1(%rdi,%rsi,1),%rsi
  while ((*to_append != 0) && (current < current_end)) {
  112c68:	8a 0a                	mov    (%rdx),%cl
  112c6a:	48 39 f0             	cmp    %rsi,%rax
  112c6d:	73 0e                	jae    112c7d <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  112c6f:	84 c9                	test   %cl,%cl
  112c71:	74 0a                	je     112c7d <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
    *current = *to_append;
  112c73:	88 08                	mov    %cl,(%rax)
    ++current;
    ++to_append;
  112c75:	48 ff c2             	inc    %rdx
    ++current;
  112c78:	48 ff c0             	inc    %rax
    ++to_append;
  112c7b:	eb eb                	jmp    112c68 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x15>
  }
  *current = 0;
  112c7d:	c6 00 00             	movb   $0x0,(%rax)
  return current;
}
  112c80:	c3                   	ret    

0000000000112c81 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
  112c81:	41 89 d0             	mov    %edx,%r8d
  112c84:	48 89 f1             	mov    %rsi,%rcx
  char* start = buffer;
  do {
    int32_t digit = i % base;
  112c87:	89 f8                	mov    %edi,%eax
  112c89:	31 d2                	xor    %edx,%edx
  112c8b:	41 f7 f0             	div    %r8d
    char character;
    if (digit < 10) {
      character = '0' + digit;
    } else {
      character = 'a' + (digit - 10);
  112c8e:	44 8d 4a 57          	lea    0x57(%rdx),%r9d
    if (digit < 10) {
  112c92:	83 fa 09             	cmp    $0x9,%edx
  112c95:	77 04                	ja     112c9b <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x1a>
      character = '0' + digit;
  112c97:	44 8d 4a 30          	lea    0x30(%rdx),%r9d
    }
    *buffer++ = character;
  112c9b:	48 8d 51 01          	lea    0x1(%rcx),%rdx
  112c9f:	44 88 4a ff          	mov    %r9b,-0x1(%rdx)
    i /= base;
  } while (i > 0);
  112ca3:	44 39 c7             	cmp    %r8d,%edi
  112ca6:	72 07                	jb     112caf <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x2e>
    *buffer++ = character;
  112ca8:	48 89 d1             	mov    %rdx,%rcx
    i /= base;
  112cab:	89 c7                	mov    %eax,%edi
  112cad:	eb d8                	jmp    112c87 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x6>
  *buffer = 0;
  112caf:	c6 41 01 00          	movb   $0x0,0x1(%rcx)
  while (p1 < p2) {
  112cb3:	48 39 ce             	cmp    %rcx,%rsi
  112cb6:	73 14                	jae    112ccc <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x4b>
    char tmp = *p1;
  112cb8:	8a 06                	mov    (%rsi),%al
    *p1++ = *p2;
  112cba:	40 8a 39             	mov    (%rcx),%dil
    *p2-- = tmp;
  112cbd:	48 ff c9             	dec    %rcx
    *p1++ = *p2;
  112cc0:	48 ff c6             	inc    %rsi
  112cc3:	40 88 7e ff          	mov    %dil,-0x1(%rsi)
    *p2-- = tmp;
  112cc7:	88 41 01             	mov    %al,0x1(%rcx)
  112cca:	eb e7                	jmp    112cb3 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x32>
  ReverseStringInPlace(start, buffer);
  return buffer;
}
  112ccc:	48 89 d0             	mov    %rdx,%rax
  112ccf:	c3                   	ret    

0000000000112cd0 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
  112cd0:	55                   	push   %rbp
  int output_index = 0;
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
  112cd1:	8d 46 ff             	lea    -0x1(%rsi),%eax
                              va_list args) {
  112cd4:	49 89 cb             	mov    %rcx,%r11
  int output_index = 0;
  112cd7:	45 31 d2             	xor    %r10d,%r10d
                              va_list args) {
  112cda:	48 89 e5             	mov    %rsp,%rbp
  112cdd:	41 57                	push   %r15
  112cdf:	41 56                	push   %r14
  112ce1:	49 89 fe             	mov    %rdi,%r14
  112ce4:	41 55                	push   %r13
  112ce6:	41 54                	push   %r12
  112ce8:	53                   	push   %rbx
  112ce9:	48 89 d3             	mov    %rdx,%rbx
  112cec:	48 83 ec 68          	sub    $0x68,%rsp
  const int usable_length = len - 1;
  112cf0:	89 45 8c             	mov    %eax,-0x74(%rbp)
  while (*current != '\0' && output_index < usable_length) {
  112cf3:	8a 13                	mov    (%rbx),%dl
      current++;
      switch (*current) {
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
            output[output_index++] = '\0';
  112cf5:	49 63 ca             	movslq %r10d,%rcx
  112cf8:	4d 8d 2c 0e          	lea    (%r14,%rcx,1),%r13
  while (*current != '\0' && output_index < usable_length) {
  112cfc:	84 d2                	test   %dl,%dl
  112cfe:	0f 84 df 03 00 00    	je     1130e3 <MicroVsnprintf+0x413>
  112d04:	8b 45 8c             	mov    -0x74(%rbp),%eax
  112d07:	41 39 c2             	cmp    %eax,%r10d
  112d0a:	0f 8d d3 03 00 00    	jge    1130e3 <MicroVsnprintf+0x413>
      current++;
  112d10:	48 8d 43 01          	lea    0x1(%rbx),%rax
    if (*current == '%') {
  112d14:	80 fa 25             	cmp    $0x25,%dl
  112d17:	0f 85 b7 03 00 00    	jne    1130d4 <MicroVsnprintf+0x404>
      switch (*current) {
  112d1d:	8a 53 01             	mov    0x1(%rbx),%dl
  112d20:	80 fa 66             	cmp    $0x66,%dl
  112d23:	0f 84 40 01 00 00    	je     112e69 <MicroVsnprintf+0x199>
  112d29:	7f 28                	jg     112d53 <MicroVsnprintf+0x83>
  112d2b:	80 fa 63             	cmp    $0x63,%dl
  112d2e:	0f 84 23 03 00 00    	je     113057 <MicroVsnprintf+0x387>
  112d34:	80 fa 64             	cmp    $0x64,%dl
  112d37:	74 36                	je     112d6f <MicroVsnprintf+0x9f>
  112d39:	80 fa 25             	cmp    $0x25,%dl
  112d3c:	0f 85 99 03 00 00    	jne    1130db <MicroVsnprintf+0x40b>
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
          current++;
          break;
        case '%':
          output[output_index++] = *current++;
  112d42:	41 c6 45 00 25       	movb   $0x25,0x0(%r13)
  112d47:	48 8d 43 02          	lea    0x2(%rbx),%rax
  112d4b:	41 ff c2             	inc    %r10d
          break;
  112d4e:	e9 88 03 00 00       	jmp    1130db <MicroVsnprintf+0x40b>
      switch (*current) {
  112d53:	80 fa 75             	cmp    $0x75,%dl
  112d56:	74 63                	je     112dbb <MicroVsnprintf+0xeb>
  112d58:	80 fa 78             	cmp    $0x78,%dl
  112d5b:	0f 84 a9 00 00 00    	je     112e0a <MicroVsnprintf+0x13a>
  112d61:	80 fa 73             	cmp    $0x73,%dl
  112d64:	0f 84 1d 03 00 00    	je     113087 <MicroVsnprintf+0x3b7>
  112d6a:	e9 6c 03 00 00       	jmp    1130db <MicroVsnprintf+0x40b>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
  112d6f:	8b 45 8c             	mov    -0x74(%rbp),%eax
  112d72:	44 29 d0             	sub    %r10d,%eax
  112d75:	83 f8 0a             	cmp    $0xa,%eax
  112d78:	0f 8e 65 03 00 00    	jle    1130e3 <MicroVsnprintf+0x413>
              FormatInt32(&output[output_index], va_arg(args, int32_t));
  112d7e:	41 8b 13             	mov    (%r11),%edx
  112d81:	83 fa 2f             	cmp    $0x2f,%edx
  112d84:	77 0e                	ja     112d94 <MicroVsnprintf+0xc4>
  112d86:	89 d0                	mov    %edx,%eax
  112d88:	83 c2 08             	add    $0x8,%edx
  112d8b:	49 03 43 10          	add    0x10(%r11),%rax
  112d8f:	41 89 13             	mov    %edx,(%r11)
  112d92:	eb 0c                	jmp    112da0 <MicroVsnprintf+0xd0>
  112d94:	49 8b 43 08          	mov    0x8(%r11),%rax
  112d98:	48 8d 50 08          	lea    0x8(%rax),%rdx
  112d9c:	49 89 53 08          	mov    %rdx,0x8(%r11)
  112da0:	8b 38                	mov    (%rax),%edi
            output[output_index++] = '\0';
  112da2:	4c 89 ee             	mov    %r13,%rsi
  if (i < 0) {
  112da5:	85 ff                	test   %edi,%edi
  112da7:	79 0b                	jns    112db4 <MicroVsnprintf+0xe4>
    *buffer++ = '-';
  112da9:	41 c6 45 00 2d       	movb   $0x2d,0x0(%r13)
  112dae:	49 8d 75 01          	lea    0x1(%r13),%rsi
    u = -u;
  112db2:	f7 df                	neg    %edi
  return FastUInt32ToBufferLeft(u, buffer, 10);
  112db4:	ba 0a 00 00 00       	mov    $0xa,%edx
  112db9:	eb 3b                	jmp    112df6 <MicroVsnprintf+0x126>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
  112dbb:	8b 45 8c             	mov    -0x74(%rbp),%eax
  112dbe:	44 29 d0             	sub    %r10d,%eax
  112dc1:	83 f8 0a             	cmp    $0xa,%eax
  112dc4:	0f 8e 19 03 00 00    	jle    1130e3 <MicroVsnprintf+0x413>
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
  112dca:	41 8b 13             	mov    (%r11),%edx
  112dcd:	83 fa 2f             	cmp    $0x2f,%edx
  112dd0:	77 0e                	ja     112de0 <MicroVsnprintf+0x110>
  112dd2:	89 d0                	mov    %edx,%eax
  112dd4:	83 c2 08             	add    $0x8,%edx
  112dd7:	49 03 43 10          	add    0x10(%r11),%rax
  112ddb:	41 89 13             	mov    %edx,(%r11)
  112dde:	eb 0c                	jmp    112dec <MicroVsnprintf+0x11c>
  112de0:	49 8b 43 08          	mov    0x8(%r11),%rax
  112de4:	48 8d 50 08          	lea    0x8(%rax),%rdx
  112de8:	49 89 53 08          	mov    %rdx,0x8(%r11)
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
  112dec:	8b 38                	mov    (%rax),%edi
  112dee:	ba 0a 00 00 00       	mov    $0xa,%edx
  112df3:	4c 89 ee             	mov    %r13,%rsi
  112df6:	e8 86 fe ff ff       	call   112c81 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  112dfb:	4c 29 e8             	sub    %r13,%rax
          output_index +=
  112dfe:	41 01 c2             	add    %eax,%r10d
          current++;
  112e01:	48 8d 43 02          	lea    0x2(%rbx),%rax
          break;
  112e05:	e9 d1 02 00 00       	jmp    1130db <MicroVsnprintf+0x40b>
          if (usable_length - output_index < kMaxHexCharsNeeded) {
  112e0a:	8b 55 8c             	mov    -0x74(%rbp),%edx
            output[output_index++] = '\0';
  112e0d:	41 8d 42 01          	lea    0x1(%r10),%eax
          if (usable_length - output_index < kMaxHexCharsNeeded) {
  112e11:	44 29 d2             	sub    %r10d,%edx
  112e14:	83 fa 09             	cmp    $0x9,%edx
  112e17:	0f 8e ca 02 00 00    	jle    1130e7 <MicroVsnprintf+0x417>
          output[output_index++] = 'x';
  112e1d:	48 98                	cltq   
          output[output_index++] = '0';
  112e1f:	41 c6 45 00 30       	movb   $0x30,0x0(%r13)
          output[output_index++] = 'x';
  112e24:	41 83 c2 02          	add    $0x2,%r10d
  112e28:	41 c6 04 06 78       	movb   $0x78,(%r14,%rax,1)
              FormatHex(&output[output_index], va_arg(args, uint32_t));
  112e2d:	41 8b 13             	mov    (%r11),%edx
  112e30:	83 fa 2f             	cmp    $0x2f,%edx
  112e33:	77 0e                	ja     112e43 <MicroVsnprintf+0x173>
  112e35:	89 d0                	mov    %edx,%eax
  112e37:	83 c2 08             	add    $0x8,%edx
  112e3a:	49 03 43 10          	add    0x10(%r11),%rax
  112e3e:	41 89 13             	mov    %edx,(%r11)
  112e41:	eb 0c                	jmp    112e4f <MicroVsnprintf+0x17f>
  112e43:	49 8b 43 08          	mov    0x8(%r11),%rax
  112e47:	48 8d 50 08          	lea    0x8(%rax),%rdx
  112e4b:	49 89 53 08          	mov    %rdx,0x8(%r11)
  112e4f:	4d 63 e2             	movslq %r10d,%r12
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
  112e52:	8b 38                	mov    (%rax),%edi
  112e54:	ba 10 00 00 00       	mov    $0x10,%edx
              FormatHex(&output[output_index], va_arg(args, uint32_t));
  112e59:	4d 01 f4             	add    %r14,%r12
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
  112e5c:	4c 89 e6             	mov    %r12,%rsi
  112e5f:	e8 1d fe ff ff       	call   112c81 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  112e64:	4c 29 e0             	sub    %r12,%rax
  112e67:	eb 95                	jmp    112dfe <MicroVsnprintf+0x12e>
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
  112e69:	8b 45 8c             	mov    -0x74(%rbp),%eax
  112e6c:	f3 0f 10 0d 74 b1 00 	movss  0xb174(%rip),%xmm1        # 11dfe8 <p05.0+0x20>
  112e73:	00 
  112e74:	44 29 d0             	sub    %r10d,%eax
  112e77:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  112e7b:	0f 2f c8             	comiss %xmm0,%xmm1
  112e7e:	0f 87 5f 02 00 00    	ja     1130e3 <MicroVsnprintf+0x413>
              FormatFloat(&output[output_index], va_arg(args, double));
  112e84:	41 8b 53 04          	mov    0x4(%r11),%edx
  112e88:	81 fa af 00 00 00    	cmp    $0xaf,%edx
  112e8e:	77 0f                	ja     112e9f <MicroVsnprintf+0x1cf>
  112e90:	89 d0                	mov    %edx,%eax
  112e92:	83 c2 10             	add    $0x10,%edx
  112e95:	49 03 43 10          	add    0x10(%r11),%rax
  112e99:	41 89 53 04          	mov    %edx,0x4(%r11)
  112e9d:	eb 0c                	jmp    112eab <MicroVsnprintf+0x1db>
  112e9f:	49 8b 43 08          	mov    0x8(%r11),%rax
  112ea3:	48 8d 50 08          	lea    0x8(%rax),%rdx
  112ea7:	49 89 53 08          	mov    %rdx,0x8(%r11)
  memcpy(&u, &f, sizeof(int32_t));
  112eab:	f2 0f 5a 10          	cvtsd2ss (%rax),%xmm2
  112eaf:	66 0f 7e d0          	movd   %xmm2,%eax
  char* current_end = buffer + (kFastToBufferSize - 1);
  112eb3:	4d 8d 65 2f          	lea    0x2f(%r13),%r12
            output[output_index++] = '\0';
  112eb7:	4c 89 ef             	mov    %r13,%rdi
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
  112eba:	89 c2                	mov    %eax,%edx
  const uint32_t fraction = (u & fraction_mask);
  112ebc:	89 c6                	mov    %eax,%esi
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
  112ebe:	c1 ea 17             	shr    $0x17,%edx
  const uint32_t fraction = (u & fraction_mask);
  112ec1:	81 e6 ff ff 7f 00    	and    $0x7fffff,%esi
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
  112ec7:	0f b6 ca             	movzbl %dl,%ecx
  112eca:	89 4d 84             	mov    %ecx,-0x7c(%rbp)
  112ecd:	83 e9 7f             	sub    $0x7f,%ecx
  112ed0:	89 4d 88             	mov    %ecx,-0x78(%rbp)
  if (u & sign_mask) {
  112ed3:	85 c0                	test   %eax,%eax
  112ed5:	79 09                	jns    112ee0 <MicroVsnprintf+0x210>
    *current = '-';
  112ed7:	41 c6 45 00 2d       	movb   $0x2d,0x0(%r13)
    current += 1;
  112edc:	49 8d 7d 01          	lea    0x1(%r13),%rdi
  if (exponent == 128) {
  112ee0:	81 7d 88 80 00 00 00 	cmpl   $0x80,-0x78(%rbp)
  *current = 0;
  112ee7:	c6 07 00             	movb   $0x0,(%rdi)
  if (exponent == 128) {
  112eea:	75 19                	jne    112f05 <MicroVsnprintf+0x235>
      current = StrCatStr(current, (current_end - current), "Inf");
  112eec:	41 29 fc             	sub    %edi,%r12d
  112eef:	ba 4a e5 11 00       	mov    $0x11e54a,%edx
    if (fraction == 0) {
  112ef4:	85 f6                	test   %esi,%esi
  112ef6:	74 05                	je     112efd <MicroVsnprintf+0x22d>
      current = StrCatStr(current, (current_end - current), "NaN");
  112ef8:	ba 4e e5 11 00       	mov    $0x11e54e,%edx
  112efd:	44 89 e6             	mov    %r12d,%esi
  112f00:	e9 3f 01 00 00       	jmp    113044 <MicroVsnprintf+0x374>
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
  112f05:	48 b8 03 04 08 0b 0d 	movabs $0x12110e0d0b080403,%rax
  112f0c:	0e 11 12 
  112f0f:	48 8d 55 93          	lea    -0x6d(%rbp),%rdx
  112f13:	4c 8d 4d a0          	lea    -0x60(%rbp),%r9
  112f17:	48 89 45 93          	mov    %rax,-0x6d(%rbp)
  112f1b:	48 b8 0e 11 12 13 14 	movabs $0x171615141312110e,%rax
  112f22:	15 16 17 
  112f25:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  uint32_t scaled_fraction = fraction;
  112f29:	89 f0                	mov    %esi,%eax
    scaled_fraction += (fraction >> scale_shifts[i]);
  112f2b:	0f be 0a             	movsbl (%rdx),%ecx
  112f2e:	41 89 f0             	mov    %esi,%r8d
  for (int i = 0; i < scale_shifts_size; ++i) {
  112f31:	48 ff c2             	inc    %rdx
    scaled_fraction += (fraction >> scale_shifts[i]);
  112f34:	41 d3 e8             	shr    %cl,%r8d
  112f37:	44 01 c0             	add    %r8d,%eax
  for (int i = 0; i < scale_shifts_size; ++i) {
  112f3a:	4c 39 ca             	cmp    %r9,%rdx
  112f3d:	75 ec                	jne    112f2b <MicroVsnprintf+0x25b>
  current += 1;
  112f3f:	48 8d 4f 02          	lea    0x2(%rdi),%rcx
  if (current_end - current <= kMaxFractionalDigits) {
  112f43:	4d 89 e7             	mov    %r12,%r15
  *current = '1';
  112f46:	66 c7 07 31 2e       	movw   $0x2e31,(%rdi)
  if (current_end - current <= kMaxFractionalDigits) {
  112f4b:	49 29 cf             	sub    %rcx,%r15
  *current = 0;
  112f4e:	c6 47 02 00          	movb   $0x0,0x2(%rdi)
  if (current_end - current <= kMaxFractionalDigits) {
  112f52:	49 83 ff 07          	cmp    $0x7,%r15
  112f56:	0f 8e f0 00 00 00    	jle    11304c <MicroVsnprintf+0x37c>
    *(current + i) = '0';
  112f5c:	c7 47 03 30 30 30 30 	movl   $0x30303030,0x3(%rdi)
  FastUInt32ToBufferLeft(number, number_string, base);
  112f63:	ba 0a 00 00 00       	mov    $0xa,%edx
  112f68:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
    *(current + i) = '0';
  112f6c:	66 c7 47 07 30 30    	movw   $0x3030,0x7(%rdi)
  FastUInt32ToBufferLeft(number, number_string, base);
  112f72:	89 c7                	mov    %eax,%edi
  112f74:	48 89 8d 78 ff ff ff 	mov    %rcx,-0x88(%rbp)
  112f7b:	e8 01 fd ff ff       	call   112c81 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
  112f80:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
  112f87:	44 89 fe             	mov    %r15d,%esi
  112f8a:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  112f8e:	e8 c0 fc ff ff       	call   112c53 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  int fraction_digits = current - previous;
  112f93:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
  112f9a:	ba 07 00 00 00       	mov    $0x7,%edx
  int fraction_digits = current - previous;
  112f9f:	48 89 c6             	mov    %rax,%rsi
  *current = '0';
  112fa2:	c6 00 30             	movb   $0x30,(%rax)
  return StrCatStr(main, main_max_length, number_string);
  112fa5:	48 89 c7             	mov    %rax,%rdi
  int fraction_digits = current - previous;
  112fa8:	48 29 ce             	sub    %rcx,%rsi
  112fab:	41 89 f7             	mov    %esi,%r15d
  if (leading_zeros != 0) {
  112fae:	29 f2                	sub    %esi,%edx
  112fb0:	74 3e                	je     112ff0 <MicroVsnprintf+0x320>
      *(current + leading_zeros) = *current;
  112fb2:	48 63 d2             	movslq %edx,%rdx
    for (int i = 0; i < fraction_digits; i++) {
  112fb5:	41 89 f9             	mov    %edi,%r9d
  112fb8:	41 29 c1             	sub    %eax,%r9d
  112fbb:	45 39 cf             	cmp    %r9d,%r15d
  112fbe:	7e 10                	jle    112fd0 <MicroVsnprintf+0x300>
      *(current + leading_zeros) = *current;
  112fc0:	44 8a 48 ff          	mov    -0x1(%rax),%r9b
      current--;
  112fc4:	48 ff c8             	dec    %rax
      *(current + leading_zeros) = *current;
  112fc7:	44 88 0c 10          	mov    %r9b,(%rax,%rdx,1)
      *current = '0';
  112fcb:	c6 00 30             	movb   $0x30,(%rax)
    for (int i = 0; i < fraction_digits; i++) {
  112fce:	eb e5                	jmp    112fb5 <MicroVsnprintf+0x2e5>
    current += kMaxFractionalDigits;
  112fd0:	89 f0                	mov    %esi,%eax
  112fd2:	31 d2                	xor    %edx,%edx
  112fd4:	48 f7 d8             	neg    %rax
  112fd7:	85 f6                	test   %esi,%esi
  112fd9:	48 0f 48 c2          	cmovs  %rdx,%rax
  112fdd:	48 8d 7c 07 07       	lea    0x7(%rdi,%rax,1),%rdi
  112fe2:	eb 0c                	jmp    112ff0 <MicroVsnprintf+0x320>
  while (*(current - 1) == '0' && (current - 1) > previous) {
  112fe4:	48 8d 47 ff          	lea    -0x1(%rdi),%rax
  112fe8:	48 39 c1             	cmp    %rax,%rcx
  112feb:	73 09                	jae    112ff6 <MicroVsnprintf+0x326>
  112fed:	48 89 c7             	mov    %rax,%rdi
  112ff0:	80 7f ff 30          	cmpb   $0x30,-0x1(%rdi)
  112ff4:	74 ee                	je     112fe4 <MicroVsnprintf+0x314>
  *current = 0;
  112ff6:	c6 07 00             	movb   $0x0,(%rdi)
  current = StrCatStr(current, (current_end - current), "*2^");
  112ff9:	44 89 e6             	mov    %r12d,%esi
  112ffc:	ba 52 e5 11 00       	mov    $0x11e552,%edx
  113001:	29 fe                	sub    %edi,%esi
  113003:	e8 4b fc ff ff       	call   112c53 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  113008:	48 8d 75 a0          	lea    -0x60(%rbp),%rsi
  current = StrCatInt32(current, (current_end - current), exponent);
  11300c:	41 29 c4             	sub    %eax,%r12d
  if (i < 0) {
  11300f:	83 7d 88 00          	cmpl   $0x0,-0x78(%rbp)
  current = StrCatStr(current, (current_end - current), "*2^");
  113013:	49 89 c7             	mov    %rax,%r15
  if (i < 0) {
  113016:	79 15                	jns    11302d <MicroVsnprintf+0x35d>
    u = -u;
  113018:	8b 4d 84             	mov    -0x7c(%rbp),%ecx
  11301b:	b8 7f 00 00 00       	mov    $0x7f,%eax
    *buffer++ = '-';
  113020:	c6 45 a0 2d          	movb   $0x2d,-0x60(%rbp)
  113024:	48 8d 75 a1          	lea    -0x5f(%rbp),%rsi
    u = -u;
  113028:	29 c8                	sub    %ecx,%eax
  11302a:	89 45 88             	mov    %eax,-0x78(%rbp)
  return FastUInt32ToBufferLeft(u, buffer, 10);
  11302d:	8b 7d 88             	mov    -0x78(%rbp),%edi
  113030:	ba 0a 00 00 00       	mov    $0xa,%edx
  113035:	e8 47 fc ff ff       	call   112c81 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
  11303a:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  11303e:	44 89 e6             	mov    %r12d,%esi
  113041:	4c 89 ff             	mov    %r15,%rdi
  113044:	e8 0a fc ff ff       	call   112c53 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  113049:	48 89 c1             	mov    %rax,%rcx
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
  11304c:	4c 29 e9             	sub    %r13,%rcx
          output_index +=
  11304f:	41 01 ca             	add    %ecx,%r10d
          current++;
  113052:	e9 aa fd ff ff       	jmp    112e01 <MicroVsnprintf+0x131>
        case 'c':
          if (usable_length - output_index < 1) {
            output[output_index++] = '\0';
            return output_index;
          }
          output[output_index++] = va_arg(args, int32_t);
  113057:	41 8b 13             	mov    (%r11),%edx
  11305a:	83 fa 2f             	cmp    $0x2f,%edx
  11305d:	77 0e                	ja     11306d <MicroVsnprintf+0x39d>
  11305f:	89 d0                	mov    %edx,%eax
  113061:	83 c2 08             	add    $0x8,%edx
  113064:	49 03 43 10          	add    0x10(%r11),%rax
  113068:	41 89 13             	mov    %edx,(%r11)
  11306b:	eb 0c                	jmp    113079 <MicroVsnprintf+0x3a9>
  11306d:	49 8b 43 08          	mov    0x8(%r11),%rax
  113071:	48 8d 50 08          	lea    0x8(%rax),%rdx
  113075:	49 89 53 08          	mov    %rdx,0x8(%r11)
  113079:	8b 00                	mov    (%rax),%eax
  11307b:	41 ff c2             	inc    %r10d
  11307e:	41 88 45 00          	mov    %al,0x0(%r13)
          current++;
  113082:	e9 7a fd ff ff       	jmp    112e01 <MicroVsnprintf+0x131>
          break;
        case 's':
          char* string = va_arg(args, char*);
  113087:	41 8b 13             	mov    (%r11),%edx
  11308a:	83 fa 2f             	cmp    $0x2f,%edx
  11308d:	77 0e                	ja     11309d <MicroVsnprintf+0x3cd>
  11308f:	89 d0                	mov    %edx,%eax
  113091:	83 c2 08             	add    $0x8,%edx
  113094:	49 03 43 10          	add    0x10(%r11),%rax
  113098:	41 89 13             	mov    %edx,(%r11)
  11309b:	eb 0c                	jmp    1130a9 <MicroVsnprintf+0x3d9>
  11309d:	49 8b 43 08          	mov    0x8(%r11),%rax
  1130a1:	48 8d 50 08          	lea    0x8(%rax),%rdx
  1130a5:	49 89 53 08          	mov    %rdx,0x8(%r11)
  1130a9:	48 8b 10             	mov    (%rax),%rdx
          int string_idx = 0;
          while (string_idx + output_index < usable_length &&
  1130ac:	48 89 c8             	mov    %rcx,%rax
                 string[string_idx] != '\0') {
  1130af:	48 29 ca             	sub    %rcx,%rdx
          while (string_idx + output_index < usable_length &&
  1130b2:	44 39 55 8c          	cmp    %r10d,-0x74(%rbp)
  1130b6:	7e 14                	jle    1130cc <MicroVsnprintf+0x3fc>
                 string[string_idx] != '\0') {
  1130b8:	8a 0c 02             	mov    (%rdx,%rax,1),%cl
          while (string_idx + output_index < usable_length &&
  1130bb:	41 83 c2 02          	add    $0x2,%r10d
  1130bf:	84 c9                	test   %cl,%cl
  1130c1:	74 09                	je     1130cc <MicroVsnprintf+0x3fc>
            output[output_index++] = string[string_idx++];
  1130c3:	41 88 0c 06          	mov    %cl,(%r14,%rax,1)
  1130c7:	48 ff c0             	inc    %rax
  1130ca:	eb e6                	jmp    1130b2 <MicroVsnprintf+0x3e2>
  1130cc:	41 89 c2             	mov    %eax,%r10d
          }
          current++;
  1130cf:	e9 2d fd ff ff       	jmp    112e01 <MicroVsnprintf+0x131>
      }
    } else {
      output[output_index++] = *current++;
  1130d4:	41 88 55 00          	mov    %dl,0x0(%r13)
  1130d8:	41 ff c2             	inc    %r10d
          while (string_idx + output_index < usable_length &&
  1130db:	48 89 c3             	mov    %rax,%rbx
  1130de:	e9 10 fc ff ff       	jmp    112cf3 <MicroVsnprintf+0x23>
    }
  }
  output[output_index++] = '\0';
  1130e3:	41 8d 42 01          	lea    0x1(%r10),%eax
            output[output_index++] = '\0';
  1130e7:	41 c6 45 00 00       	movb   $0x0,0x0(%r13)
  return output_index;
}
  1130ec:	48 83 c4 68          	add    $0x68,%rsp
  1130f0:	5b                   	pop    %rbx
  1130f1:	41 5c                	pop    %r12
  1130f3:	41 5d                	pop    %r13
  1130f5:	41 5e                	pop    %r14
  1130f7:	41 5f                	pop    %r15
  1130f9:	5d                   	pop    %rbp
  1130fa:	c3                   	ret    

00000000001130fb <_ZN6tflite12ElementCountERK14TfLiteIntArray>:

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
  1130fb:	8b 0f                	mov    (%rdi),%ecx
  1130fd:	31 c0                	xor    %eax,%eax
  int result = 1;
  1130ff:	ba 01 00 00 00       	mov    $0x1,%edx
  for (int i = 0; i < dims.size; ++i) {
  113104:	39 c1                	cmp    %eax,%ecx
  113106:	7e 0a                	jle    113112 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x17>
    result *= dims.data[i];
  113108:	0f af 54 87 04       	imul   0x4(%rdi,%rax,4),%edx
  for (int i = 0; i < dims.size; ++i) {
  11310d:	48 ff c0             	inc    %rax
  113110:	eb f2                	jmp    113104 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x9>
  }
  return result;
}
  113112:	89 d0                	mov    %edx,%eax
  113114:	c3                   	ret    

0000000000113115 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
    return data_ - ReadScalar<soffset_t>(data_);
  113115:	48 63 07             	movslq (%rdi),%rax
  113118:	48 89 fa             	mov    %rdi,%rdx
  11311b:	48 29 c2             	sub    %rax,%rdx
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
  if (subgraph->operators() != nullptr) {
    return subgraph->operators()->size();
  } else {
    return 0;
  11311e:	31 c0                	xor    %eax,%eax
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
  113120:	66 83 3a 0a          	cmpw   $0xa,(%rdx)
  113124:	76 11                	jbe    113137 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x22>
  113126:	0f b7 4a 0a          	movzwl 0xa(%rdx),%ecx
    auto p = data_ + field_offset;
  11312a:	48 01 cf             	add    %rcx,%rdi
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  11312d:	66 85 c9             	test   %cx,%cx
  113130:	74 05                	je     113137 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x22>
  113132:	8b 07                	mov    (%rdi),%eax
  uoffset_t size() const { return EndianScalar(length_); }
  113134:	8b 04 07             	mov    (%rdi,%rax,1),%eax
  }
}
  113137:	c3                   	ret    

0000000000113138 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
    return data_ - ReadScalar<soffset_t>(data_);
  113138:	48 63 17             	movslq (%rdi),%rdx
  11313b:	48 89 f8             	mov    %rdi,%rax
  11313e:	48 29 d0             	sub    %rdx,%rax
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
  113141:	66 83 38 08          	cmpw   $0x8,(%rax)
  113145:	76 43                	jbe    11318a <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x52>
  113147:	0f b7 50 08          	movzwl 0x8(%rax),%edx
    auto p = data_ + field_offset;
  11314b:	48 01 d7             	add    %rdx,%rdi
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  11314e:	66 85 d2             	test   %dx,%dx
  113151:	74 37                	je     11318a <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x52>
  113153:	8b 07                	mov    (%rdi),%eax
  113155:	48 01 c7             	add    %rax,%rdi
    FLATBUFFERS_ASSERT(i < size());
  113158:	3b 37                	cmp    (%rdi),%esi
  11315a:	72 1d                	jb     113179 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x41>
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
  11315c:	55                   	push   %rbp
  11315d:	b9 55 e3 11 00       	mov    $0x11e355,%ecx
  113162:	ba 6d e4 11 00       	mov    $0x11e46d,%edx
  113167:	be 06 01 00 00       	mov    $0x106,%esi
  11316c:	bf 07 e4 11 00       	mov    $0x11e407,%edi
  113171:	48 89 e5             	mov    %rsp,%rbp
  113174:	e8 f7 fb fe ff       	call   102d70 <__assert_func>
    p += i * sizeof(uoffset_t);
  113179:	89 f6                	mov    %esi,%esi
  11317b:	48 8d 7c b7 04       	lea    0x4(%rdi,%rsi,4),%rdi
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
  113180:	8b 07                	mov    (%rdi),%eax
  113182:	48 01 c7             	add    %rax,%rdi
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  return NumSubgraphOperators(subgraph);
  113185:	e9 8b ff ff ff       	jmp    113115 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
  uoffset_t size() const { return EndianScalar(length_); }
  11318a:	8b 04 25 00 00 00 00 	mov    0x0,%eax
  113191:	0f 0b                	ud2    

0000000000113193 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
  113193:	48 63 47 28          	movslq 0x28(%rdi),%rax
  113197:	83 f8 20             	cmp    $0x20,%eax
  11319a:	75 06                	jne    1131a2 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0xf>
    return registration->custom_name;
  11319c:	48 8b 57 30          	mov    0x30(%rdi),%rdx
  1131a0:	eb 14                	jmp    1131b6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x23>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
  1131a2:	ba 54 e3 11 00       	mov    $0x11e354,%edx
  return (v < low) || (high < v);
  1131a7:	3d 91 00 00 00       	cmp    $0x91,%eax
  1131ac:	77 08                	ja     1131b6 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x23>
  return EnumNamesBuiltinOperator()[index];
  1131ae:	48 8b 14 c5 60 c8 11 	mov    0x11c860(,%rax,8),%rdx
  1131b5:	00 
}
  1131b6:	48 89 d0             	mov    %rdx,%rax
  1131b9:	c3                   	ret    

00000000001131ba <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
  1131ba:	b8 54 e3 11 00       	mov    $0x11e354,%eax
  1131bf:	81 ff 91 00 00 00    	cmp    $0x91,%edi
  1131c5:	77 0a                	ja     1131d1 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x17>
  const size_t index = static_cast<size_t>(e);
  1131c7:	89 ff                	mov    %edi,%edi
  return EnumNamesBuiltinOperator()[index];
  1131c9:	48 8b 04 fd 60 c8 11 	mov    0x11c860(,%rdi,8),%rax
  1131d0:	00 
}
  1131d1:	c3                   	ret    

00000000001131d2 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
  1131d2:	55                   	push   %rbp
  1131d3:	48 89 e5             	mov    %rsp,%rbp
  1131d6:	41 54                	push   %r12
  1131d8:	49 89 f4             	mov    %rsi,%r12
    auto field_offset = GetOptionalFieldOffset(field);
  1131db:	be 08 00 00 00       	mov    $0x8,%esi
  1131e0:	53                   	push   %rbx
  1131e1:	48 89 fb             	mov    %rdi,%rbx
  1131e4:	e8 4b a3 ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
  1131e9:	31 f6                	xor    %esi,%esi
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  1131eb:	66 85 c0             	test   %ax,%ax
  1131ee:	74 06                	je     1131f6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x24>
  1131f0:	0f b7 c0             	movzwl %ax,%eax
  1131f3:	8b 34 03             	mov    (%rbx,%rax,1),%esi
  return_type operator[](uoffset_t i) const { return Get(i); }
  1131f6:	4c 89 e7             	mov    %r12,%rdi
  1131f9:	e8 f4 bb ff ff       	call   10edf2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>
  1131fe:	48 89 c3             	mov    %rax,%rbx
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
  113201:	48 85 c0             	test   %rax,%rax
  113204:	74 28                	je     11322e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x5c>
    auto field_offset = GetOptionalFieldOffset(field);
  113206:	be 04 00 00 00       	mov    $0x4,%esi
  11320b:	48 89 c7             	mov    %rax,%rdi
  11320e:	e8 21 a3 ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
  113213:	0f b7 d0             	movzwl %ax,%edx
  113216:	48 01 da             	add    %rbx,%rdx
  void* out_buffer = nullptr;
  113219:	31 db                	xor    %ebx,%ebx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  11321b:	66 85 c0             	test   %ax,%ax
  11321e:	74 0e                	je     11322e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x5c>
  113220:	8b 02                	mov    (%rdx),%eax
  113222:	48 01 d0             	add    %rdx,%rax
      if (array->size()) {
  113225:	83 38 00             	cmpl   $0x0,(%rax)
  113228:	74 04                	je     11322e <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x5c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
  11322a:	48 8d 58 04          	lea    0x4(%rax),%rbx
}
  11322e:	48 89 d8             	mov    %rbx,%rax
  113231:	5b                   	pop    %rbx
  113232:	41 5c                	pop    %r12
  113234:	5d                   	pop    %rbp
  113235:	c3                   	ret    

0000000000113236 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
  113236:	55                   	push   %rbp
  113237:	48 89 e5             	mov    %rsp,%rbp
  11323a:	41 57                	push   %r15
  11323c:	41 56                	push   %r14
  11323e:	41 55                	push   %r13
  113240:	41 54                	push   %r12
  113242:	53                   	push   %rbx
  113243:	48 83 ec 38          	sub    $0x38,%rsp
  113247:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  11324b:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  TFLITE_DCHECK(result != nullptr);
  11324f:	4d 85 c9             	test   %r9,%r9
  113252:	75 05                	jne    113259 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x23>
  113254:	e8 6b eb ff ff       	call   111dc4 <abort>
  *result = {};
  113259:	31 c0                	xor    %eax,%eax
  11325b:	49 89 fe             	mov    %rdi,%r14
  11325e:	b9 1c 00 00 00       	mov    $0x1c,%ecx
  113263:	4c 89 cf             	mov    %r9,%rdi
  113266:	f3 ab                	rep stos %eax,%es:(%rdi)
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
  113268:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  11326c:	4d 89 c7             	mov    %r8,%r15
  11326f:	4c 89 cb             	mov    %r9,%rbx
  113272:	41 89 f4             	mov    %esi,%r12d
  113275:	e8 4a b4 ff ff       	call   10e6c4 <_ZNK6tflite6Tensor4typeEv>
  11327a:	4c 89 fa             	mov    %r15,%rdx
  11327d:	48 89 de             	mov    %rbx,%rsi
  113280:	89 c7                	mov    %eax,%edi
  113282:	e8 e0 09 00 00       	call   113c67 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
  113287:	41 89 c5             	mov    %eax,%r13d
  11328a:	85 c0                	test   %eax,%eax
  11328c:	0f 85 0d 02 00 00    	jne    11349f <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x269>
  result->is_variable = flatbuffer_tensor.is_variable();
  113292:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  113296:	e8 51 b4 ff ff       	call   10e6ec <_ZNK6tflite6Tensor11is_variableEv>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
  11329b:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  11329f:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  result->is_variable = flatbuffer_tensor.is_variable();
  1132a3:	88 43 4d             	mov    %al,0x4d(%rbx)
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
  1132a6:	e8 27 ff ff ff       	call   1131d2 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
  1132ab:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  1132af:	48 8d 73 28          	lea    0x28(%rbx),%rsi
  1132b3:	4c 89 f9             	mov    %r15,%rcx
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
  1132b6:	48 89 43 08          	mov    %rax,0x8(%rbx)
    result->allocation_type = kTfLiteArenaRw;
  1132ba:	48 f7 d8             	neg    %rax
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
  1132bd:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
    result->allocation_type = kTfLiteArenaRw;
  1132c1:	19 c0                	sbb    %eax,%eax
  1132c3:	83 c0 02             	add    $0x2,%eax
  1132c6:	89 43 20             	mov    %eax,0x20(%rbx)
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
  1132c9:	e8 60 f8 ff ff       	call   112b2e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPmS3_PNS_13ErrorReporterE>
  1132ce:	41 89 c5             	mov    %eax,%r13d
  1132d1:	85 c0                	test   %eax,%eax
  1132d3:	0f 85 c6 01 00 00    	jne    11349f <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x269>
    return const_cast<Table *>(this)->GetPointer<P>(field);
  1132d9:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  1132dd:	be 04 00 00 00       	mov    $0x4,%esi
  1132e2:	e8 39 a8 ff ff       	call   10db20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  if (flatbuffer_tensor.shape() == nullptr) {
  1132e7:	48 85 c0             	test   %rax,%rax
  1132ea:	75 0a                	jne    1132f6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc0>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
  1132ec:	48 c7 43 10 ec df 11 	movq   $0x11dfec,0x10(%rbx)
  1132f3:	00 
  1132f4:	eb 0d                	jmp    113303 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xcd>
  TFLITE_DCHECK(error_reporter != nullptr);
  1132f6:	4d 85 ff             	test   %r15,%r15
  1132f9:	0f 84 55 ff ff ff    	je     113254 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1e>
    *result = const_cast<kTfLiteArrayType*>(
  1132ff:	48 89 43 10          	mov    %rax,0x10(%rbx)
    auto field_offset = GetOptionalFieldOffset(field);
  113303:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  113307:	be 0c 00 00 00       	mov    $0xc,%esi
  11330c:	e8 23 a2 ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  113311:	66 85 c0             	test   %ax,%ax
  113314:	0f 84 85 01 00 00    	je     11349f <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x269>
    auto p = data_ + field_offset;
  11331a:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  11331e:	0f b7 c0             	movzwl %ax,%eax
  113321:	48 01 c1             	add    %rax,%rcx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  113324:	8b 11                	mov    (%rcx),%edx
    auto p = data_ + field_offset;
  113326:	48 89 c8             	mov    %rcx,%rax
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  113329:	48 01 d0             	add    %rdx,%rax
  if (src_quantization && src_quantization->scale() &&
  11332c:	48 89 c7             	mov    %rax,%rdi
  11332f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  113333:	e8 34 b3 ff ff       	call   10e66c <_ZNK6tflite22QuantizationParameters5scaleEv>
  113338:	48 85 c0             	test   %rax,%rax
  11333b:	0f 84 5e 01 00 00    	je     11349f <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x269>
  113341:	83 38 00             	cmpl   $0x0,(%rax)
  113344:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  113348:	0f 84 51 01 00 00    	je     11349f <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x269>
      src_quantization->zero_point() &&
  11334e:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  113352:	e8 41 b3 ff ff       	call   10e698 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
      (src_quantization->scale()->size() > 0) &&
  113357:	48 85 c0             	test   %rax,%rax
  11335a:	0f 84 3f 01 00 00    	je     11349f <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x269>
      src_quantization->zero_point() &&
  113360:	83 38 00             	cmpl   $0x0,(%rax)
  113363:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  113367:	0f 84 32 01 00 00    	je     11349f <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x269>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
  11336d:	f3 0f 10 42 04       	movss  0x4(%rdx),%xmm0
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
  113372:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    result->params.scale = src_quantization->scale()->Get(0);
  113376:	f3 0f 11 43 18       	movss  %xmm0,0x18(%rbx)
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
  11337b:	e8 18 b3 ff ff       	call   10e698 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
  113380:	31 f6                	xor    %esi,%esi
  113382:	48 89 c7             	mov    %rax,%rdi
  113385:	e8 9c b6 ff ff       	call   10ea26 <_ZNK11flatbuffers6VectorIxE3GetEj>
    int channels = src_quantization->scale()->size();
  11338a:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    result->params.zero_point =
  11338e:	89 43 1c             	mov    %eax,0x1c(%rbx)
    int channels = src_quantization->scale()->size();
  113391:	e8 d6 b2 ff ff       	call   10e66c <_ZNK6tflite22QuantizationParameters5scaleEv>
            ? reinterpret_cast<TfLiteAffineQuantization*>(
  113396:	45 84 e4             	test   %r12b,%r12b
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
  113399:	ba 08 00 00 00       	mov    $0x8,%edx
  11339e:	4c 89 f7             	mov    %r14,%rdi
    int channels = src_quantization->scale()->size();
  1133a1:	8b 00                	mov    (%rax),%eax
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
  1133a3:	be 18 00 00 00       	mov    $0x18,%esi
    int channels = src_quantization->scale()->size();
  1133a8:	89 45 b0             	mov    %eax,-0x50(%rbp)
    TfLiteAffineQuantization* quantization =
  1133ab:	49 8b 06             	mov    (%r14),%rax
            ? reinterpret_cast<TfLiteAffineQuantization*>(
  1133ae:	74 25                	je     1133d5 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x19f>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
  1133b0:	ff 50 20             	call   *0x20(%rax)
  1133b3:	49 89 c4             	mov    %rax,%r12
    if (quantization == nullptr) {
  1133b6:	48 85 c0             	test   %rax,%rax
  1133b9:	75 2e                	jne    1133e9 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1b3>
      TF_LITE_REPORT_ERROR(error_reporter,
  1133bb:	be 3f f3 11 00       	mov    $0x11f33f,%esi
  1133c0:	4c 89 ff             	mov    %r15,%rdi
  1133c3:	31 c0                	xor    %eax,%eax
      return kTfLiteError;
  1133c5:	41 bd 01 00 00 00    	mov    $0x1,%r13d
      TF_LITE_REPORT_ERROR(error_reporter,
  1133cb:	e8 a4 c7 ff ff       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
  1133d0:	e9 ca 00 00 00       	jmp    11349f <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x269>
                  allocator->AllocateFromTail(
  1133d5:	ff 50 18             	call   *0x18(%rax)
  1133d8:	49 89 c4             	mov    %rax,%r12
    if (quantization == nullptr) {
  1133db:	48 85 c0             	test   %rax,%rax
  1133de:	74 db                	je     1133bb <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x185>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
  1133e0:	49 8b 06             	mov    (%r14),%rax
  1133e3:	48 8b 48 18          	mov    0x18(%rax),%rcx
  1133e7:	eb 07                	jmp    1133f0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ba>
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
  1133e9:	49 8b 06             	mov    (%r14),%rax
  1133ec:	48 8b 48 20          	mov    0x20(%rax),%rcx
                  TfLiteIntArrayGetSizeInBytes(channels),
  1133f0:	8b 7d b0             	mov    -0x50(%rbp),%edi
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
  1133f3:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
                  TfLiteIntArrayGetSizeInBytes(channels),
  1133f7:	e8 7d 01 00 00       	call   113579 <TfLiteIntArrayGetSizeInBytes>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
  1133fc:	4c 89 f7             	mov    %r14,%rdi
  1133ff:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  113403:	ba 04 00 00 00       	mov    $0x4,%edx
  113408:	48 63 f0             	movslq %eax,%rsi
  11340b:	ff d1                	call   *%rcx
      TF_LITE_REPORT_ERROR(error_reporter,
  11340d:	be 6d f3 11 00       	mov    $0x11f36d,%esi
    quantization->zero_point =
  113412:	49 89 44 24 08       	mov    %rax,0x8(%r12)
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
  113417:	49 89 c6             	mov    %rax,%r14
    if (quantization->zero_point == nullptr) {
  11341a:	48 85 c0             	test   %rax,%rax
  11341d:	74 a1                	je     1133c0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x18a>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
  11341f:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  113423:	e8 44 b2 ff ff       	call   10e66c <_ZNK6tflite22QuantizationParameters5scaleEv>
  TFLITE_DCHECK(error_reporter != nullptr);
  113428:	4d 85 ff             	test   %r15,%r15
  11342b:	0f 84 23 fe ff ff    	je     113254 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1e>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
  113431:	48 85 c0             	test   %rax,%rax
  113434:	0f 84 1a fe ff ff    	je     113254 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1e>
    *result = const_cast<kTfLiteArrayType*>(
  11343a:	49 89 04 24          	mov    %rax,(%r12)
    quantization->zero_point->size = channels;
  11343e:	8b 45 b0             	mov    -0x50(%rbp),%eax
  113441:	41 89 06             	mov    %eax,(%r14)
    int* zero_point_data = quantization->zero_point->data;
  113444:	4d 8b 7c 24 08       	mov    0x8(%r12),%r15
    for (int i = 0; i < channels; i++) {
  113449:	45 31 f6             	xor    %r14d,%r14d
  11344c:	44 39 75 b0          	cmp    %r14d,-0x50(%rbp)
  113450:	7e 1e                	jle    113470 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x23a>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
  113452:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  113456:	e8 3d b2 ff ff       	call   10e698 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
  11345b:	44 89 f6             	mov    %r14d,%esi
  11345e:	48 89 c7             	mov    %rax,%rdi
  113461:	e8 c0 b5 ff ff       	call   10ea26 <_ZNK11flatbuffers6VectorIxE3GetEj>
  113466:	43 89 44 b7 04       	mov    %eax,0x4(%r15,%r14,4)
    for (int i = 0; i < channels; i++) {
  11346b:	49 ff c6             	inc    %r14
  11346e:	eb dc                	jmp    11344c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x216>
    auto field_offset = GetOptionalFieldOffset(field);
  113470:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  113474:	be 10 00 00 00       	mov    $0x10,%esi
  113479:	e8 b6 a0 ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  11347e:	31 d2                	xor    %edx,%edx
  113480:	66 85 c0             	test   %ax,%ax
  113483:	74 0a                	je     11348f <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x259>
  113485:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  113489:	0f b7 c0             	movzwl %ax,%eax
  11348c:	8b 14 01             	mov    (%rcx,%rax,1),%edx
    quantization->quantized_dimension = src_quantization->quantized_dimension();
  11348f:	41 89 54 24 10       	mov    %edx,0x10(%r12)
    result->quantization = {kTfLiteAffineQuantization, quantization};
  113494:	c7 43 50 01 00 00 00 	movl   $0x1,0x50(%rbx)
  11349b:	4c 89 63 58          	mov    %r12,0x58(%rbx)
}
  11349f:	48 83 c4 38          	add    $0x38,%rsp
  1134a3:	44 89 e8             	mov    %r13d,%eax
  1134a6:	5b                   	pop    %rbx
  1134a7:	41 5c                	pop    %r12
  1134a9:	41 5d                	pop    %r13
  1134ab:	41 5e                	pop    %r14
  1134ad:	41 5f                	pop    %r15
  1134af:	5d                   	pop    %rbp
  1134b0:	c3                   	ret    

00000000001134b1 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
  1134b1:	55                   	push   %rbp
  *result = {};
  1134b2:	31 c0                	xor    %eax,%eax
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
  1134b4:	48 89 e5             	mov    %rsp,%rbp
  1134b7:	41 57                	push   %r15
  1134b9:	49 89 d7             	mov    %rdx,%r15
  1134bc:	41 56                	push   %r14
  1134be:	49 89 ce             	mov    %rcx,%r14
  *result = {};
  1134c1:	b9 06 00 00 00       	mov    $0x6,%ecx
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
  1134c6:	41 55                	push   %r13
  1134c8:	41 54                	push   %r12
  1134ca:	49 89 f4             	mov    %rsi,%r12
  1134cd:	53                   	push   %rbx
  1134ce:	4c 89 c3             	mov    %r8,%rbx
  1134d1:	57                   	push   %rdi
  *result = {};
  1134d2:	4c 89 c7             	mov    %r8,%rdi
  1134d5:	f3 ab                	rep stos %eax,%es:(%rdi)
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
  1134d7:	48 89 f7             	mov    %rsi,%rdi
  1134da:	e8 e5 b1 ff ff       	call   10e6c4 <_ZNK6tflite6Tensor4typeEv>
  1134df:	48 8d 73 10          	lea    0x10(%rbx),%rsi
  1134e3:	4c 89 f2             	mov    %r14,%rdx
  1134e6:	89 c7                	mov    %eax,%edi
  1134e8:	e8 7a 07 00 00       	call   113c67 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
  1134ed:	41 89 c5             	mov    %eax,%r13d
  1134f0:	85 c0                	test   %eax,%eax
  1134f2:	75 38                	jne    11352c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x7b>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
  1134f4:	4c 89 fe             	mov    %r15,%rsi
  1134f7:	4c 89 e7             	mov    %r12,%rdi
  1134fa:	e8 d3 fc ff ff       	call   1131d2 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    return const_cast<Table *>(this)->GetPointer<P>(field);
  1134ff:	be 04 00 00 00       	mov    $0x4,%esi
  113504:	4c 89 e7             	mov    %r12,%rdi
  113507:	48 89 03             	mov    %rax,(%rbx)
  11350a:	e8 11 a6 ff ff       	call   10db20 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  if (flatbuffer_tensor.shape() == nullptr) {
  11350f:	48 85 c0             	test   %rax,%rax
  113512:	75 0a                	jne    11351e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6d>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
  113514:	48 c7 43 08 ec df 11 	movq   $0x11dfec,0x8(%rbx)
  11351b:	00 
  11351c:	eb 0e                	jmp    11352c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x7b>
  TFLITE_DCHECK(error_reporter != nullptr);
  11351e:	4d 85 f6             	test   %r14,%r14
  113521:	75 05                	jne    113528 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x77>
  113523:	e8 9c e8 ff ff       	call   111dc4 <abort>
    *result = const_cast<kTfLiteArrayType*>(
  113528:	48 89 43 08          	mov    %rax,0x8(%rbx)
}
  11352c:	5a                   	pop    %rdx
  11352d:	44 89 e8             	mov    %r13d,%eax
  113530:	5b                   	pop    %rbx
  113531:	41 5c                	pop    %r12
  113533:	41 5d                	pop    %r13
  113535:	41 5e                	pop    %r14
  113537:	41 5f                	pop    %r15
  113539:	5d                   	pop    %rbp
  11353a:	c3                   	ret    

000000000011353b <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
    for (int i = 1; i < size; ++i) {
  11353b:	b8 01 00 00 00       	mov    $0x1,%eax
    any_swapped = false;
  113540:	31 c9                	xor    %ecx,%ecx
    for (int i = 1; i < size; ++i) {
  113542:	39 c2                	cmp    %eax,%edx
  113544:	7e 2e                	jle    113574 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x39>
      if (values[i - 1] < values[i]) {
  113546:	44 8b 44 87 fc       	mov    -0x4(%rdi,%rax,4),%r8d
  11354b:	44 8b 0c 87          	mov    (%rdi,%rax,4),%r9d
  11354f:	45 39 c8             	cmp    %r9d,%r8d
  113552:	7d 1b                	jge    11356f <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x34>
        values[i - 1] = values[i];
  113554:	44 89 4c 87 fc       	mov    %r9d,-0x4(%rdi,%rax,4)
        values[i] = value_temp;
  113559:	44 89 04 87          	mov    %r8d,(%rdi,%rax,4)
        ids[i - 1] = ids[i];
  11355d:	44 8b 04 86          	mov    (%rsi,%rax,4),%r8d
        const int id_temp = ids[i - 1];
  113561:	8b 4c 86 fc          	mov    -0x4(%rsi,%rax,4),%ecx
        ids[i - 1] = ids[i];
  113565:	44 89 44 86 fc       	mov    %r8d,-0x4(%rsi,%rax,4)
        ids[i] = id_temp;
  11356a:	89 0c 86             	mov    %ecx,(%rsi,%rax,4)
        any_swapped = true;
  11356d:	b1 01                	mov    $0x1,%cl
    for (int i = 1; i < size; ++i) {
  11356f:	48 ff c0             	inc    %rax
  113572:	eb ce                	jmp    113542 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x7>
  do {
  113574:	84 c9                	test   %cl,%cl
  113576:	75 c3                	jne    11353b <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
}
  113578:	c3                   	ret    

0000000000113579 <TfLiteIntArrayGetSizeInBytes>:
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
  113579:	8d 04 bd 04 00 00 00 	lea    0x4(,%rdi,4),%eax
}
  113580:	c3                   	ret    

0000000000113581 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  113581:	b8 7c f6 11 00       	mov    $0x11f67c,%eax
  113586:	83 ff 10             	cmp    $0x10,%edi
  113589:	77 0a                	ja     113595 <TfLiteTypeGetName+0x14>
  11358b:	89 ff                	mov    %edi,%edi
  11358d:	48 8b 04 fd 00 cd 11 	mov    0x11cd00(,%rdi,8),%rax
  113594:	00 
      return "RESOURCE";
    case kTfLiteVariant:
      return "VARIANT";
  }
  return "Unknown type";
}
  113595:	c3                   	ret    

0000000000113596 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
  if (double_multiplier == 0.) {
  113596:	0f 57 c9             	xorps  %xmm1,%xmm1
                        int* shift) {
  113599:	55                   	push   %rbp
  if (double_multiplier == 0.) {
  11359a:	66 0f 2e c1          	ucomisd %xmm1,%xmm0
                        int* shift) {
  11359e:	48 89 e5             	mov    %rsp,%rbp
  1135a1:	41 54                	push   %r12
  1135a3:	49 89 fc             	mov    %rdi,%r12
  1135a6:	53                   	push   %rbx
  1135a7:	48 89 f3             	mov    %rsi,%rbx
  if (double_multiplier == 0.) {
  1135aa:	7a 0a                	jp     1135b6 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x20>
  1135ac:	75 08                	jne    1135b6 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x20>
    *quantized_multiplier = 0;
    *shift = 0;
  1135ae:	31 d2                	xor    %edx,%edx
  1135b0:	89 17                	mov    %edx,(%rdi)
  1135b2:	89 16                	mov    %edx,(%rsi)
    return;
  1135b4:	eb 41                	jmp    1135f7 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x61>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
  1135b6:	48 89 df             	mov    %rbx,%rdi
  1135b9:	e8 52 f6 fe ff       	call   102c10 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
  1135be:	f2 0f 59 05 42 a0 00 	mulsd  0xa042(%rip),%xmm0        # 11d608 <_ZTVN6tflite19GreedyMemoryPlannerE+0x40>
  1135c5:	00 
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
  1135c6:	e8 c5 f6 fe ff       	call   102c90 <round>
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
  1135cb:	ba 00 00 00 80       	mov    $0x80000000,%edx
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
  1135d0:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
  TFLITE_CHECK(q_fixed <= (1ll << 31));
  1135d5:	48 39 d0             	cmp    %rdx,%rax
  1135d8:	7e 05                	jle    1135df <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x49>
  1135da:	e8 e5 e7 ff ff       	call   111dc4 <abort>
  if (q_fixed == (1ll << 31)) {
  1135df:	75 07                	jne    1135e8 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x52>
    q_fixed /= 2;
    ++*shift;
  1135e1:	ff 03                	incl   (%rbx)
    q_fixed /= 2;
  1135e3:	b8 00 00 00 40       	mov    $0x40000000,%eax
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
  1135e8:	83 3b e1             	cmpl   $0xffffffe1,(%rbx)
  1135eb:	7d 06                	jge    1135f3 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x5d>
    *shift = 0;
  1135ed:	31 c0                	xor    %eax,%eax
  1135ef:	89 03                	mov    %eax,(%rbx)
    q_fixed = 0;
  1135f1:	31 c0                	xor    %eax,%eax
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
  1135f3:	41 89 04 24          	mov    %eax,(%r12)
}
  1135f7:	5b                   	pop    %rbx
  1135f8:	41 5c                	pop    %r12
  1135fa:	5d                   	pop    %rbp
  1135fb:	c3                   	ret    

00000000001135fc <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:
namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
  if (context->tensors != nullptr) {
  1135fc:	48 8b 47 10          	mov    0x10(%rdi),%rax
  113600:	48 85 c0             	test   %rax,%rax
  113603:	75 06                	jne    11360b <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0xf>
    return &context->tensors[tensor_index];
  } else {
    return context->GetTensor(context, tensor_index);
  113605:	ff a7 a0 00 00 00    	jmp    *0xa0(%rdi)
    return &context->tensors[tensor_index];
  11360b:	48 63 f6             	movslq %esi,%rsi
  11360e:	48 6b f6 70          	imul   $0x70,%rsi,%rsi
  113612:	48 01 f0             	add    %rsi,%rax
  }
}
  113615:	c3                   	ret    

0000000000113616 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
  const float tmp = TfLiteRound(f / scale);
  113616:	f3 0f 5e c8          	divss  %xmm0,%xmm1
                             int32_t zero_point, float f, int32_t& q) {
  11361a:	55                   	push   %rbp
  11361b:	48 89 e5             	mov    %rsp,%rbp
  11361e:	41 55                	push   %r13
  113620:	49 89 d5             	mov    %rdx,%r13
  113623:	41 54                	push   %r12
  113625:	49 89 fc             	mov    %rdi,%r12
  113628:	53                   	push   %rbx
  113629:	89 f3                	mov    %esi,%ebx
  11362b:	51                   	push   %rcx
  11362c:	f3 0f 5a c1          	cvtss2sd %xmm1,%xmm0
  113630:	e8 5b f6 fe ff       	call   102c90 <round>
  113635:	f2 0f 5a c0          	cvtsd2ss %xmm0,%xmm0
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
  113639:	0f 2f 05 b0 a9 00 00 	comiss 0xa9b0(%rip),%xmm0        # 11dff0 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x4>
  113640:	72 1b                	jb     11365d <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi+0x47>
  113642:	f3 0f 10 0d aa a9 00 	movss  0xa9aa(%rip),%xmm1        # 11dff4 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x8>
  113649:	00 
  11364a:	0f 2f c8             	comiss %xmm0,%xmm1
  11364d:	72 0e                	jb     11365d <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi+0x47>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
  q = zero_point + static_cast<int32_t>(tmp);
  11364f:	f3 0f 2c c0          	cvttss2si %xmm0,%eax
  113653:	01 d8                	add    %ebx,%eax
  113655:	41 89 45 00          	mov    %eax,0x0(%r13)
  return kTfLiteOk;
  113659:	31 c0                	xor    %eax,%eax
  11365b:	eb 24                	jmp    113681 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi+0x6b>
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
  11365d:	31 c0                	xor    %eax,%eax
  11365f:	41 b8 f4 f6 11 00    	mov    $0x11f6f4,%r8d
  113665:	b9 59 01 00 00       	mov    $0x159,%ecx
  11366a:	4c 89 e7             	mov    %r12,%rdi
  11366d:	ba 1a f7 11 00       	mov    $0x11f71a,%edx
  113672:	be d1 f5 11 00       	mov    $0x11f5d1,%esi
  113677:	41 ff 54 24 28       	call   *0x28(%r12)
  11367c:	b8 01 00 00 00       	mov    $0x1,%eax
}
  113681:	5a                   	pop    %rdx
  113682:	5b                   	pop    %rbx
  113683:	41 5c                	pop    %r12
  113685:	41 5d                	pop    %r13
  113687:	5d                   	pop    %rbp
  113688:	c3                   	ret    

0000000000113689 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi.constprop.0>:
  if (index >= 0 && index < max_size) {
  113689:	85 ff                	test   %edi,%edi
  11368b:	78 0b                	js     113698 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi.constprop.0+0xf>
  11368d:	39 f7                	cmp    %esi,%edi
  11368f:	7d 07                	jge    113698 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi.constprop.0+0xf>
    const int tensor_index = tensor_indices[index];
  113691:	48 63 ff             	movslq %edi,%rdi
  113694:	8b 04 ba             	mov    (%rdx,%rdi,4),%eax
    if (tensor_index != kTfLiteOptionalTensor) {
  113697:	c3                   	ret    
  return -1;
  113698:	83 c8 ff             	or     $0xffffffff,%eax
}
  11369b:	c3                   	ret    

000000000011369c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>:
inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
  11369c:	55                   	push   %rbp
  11369d:	48 89 f9             	mov    %rdi,%rcx
  1136a0:	89 d7                	mov    %edx,%edi
      context, index, node->inputs->size, node->inputs->data);
  1136a2:	48 8d 56 04          	lea    0x4(%rsi),%rdx
  const int tensor_index = ValidateTensorIndexing(
  1136a6:	8b 36                	mov    (%rsi),%esi
inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
  1136a8:	48 89 e5             	mov    %rsp,%rbp
  const int tensor_index = ValidateTensorIndexing(
  1136ab:	e8 d9 ff ff ff       	call   113689 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi.constprop.0>
  if (tensor_index < 0) {
  1136b0:	85 c0                	test   %eax,%eax
  1136b2:	78 0b                	js     1136bf <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0+0x23>
  1136b4:	89 c6                	mov    %eax,%esi
  return GetTensorAtIndex(context, tensor_index);
  1136b6:	48 89 cf             	mov    %rcx,%rdi
}
  1136b9:	5d                   	pop    %rbp
  return GetTensorAtIndex(context, tensor_index);
  1136ba:	e9 3d ff ff ff       	jmp    1135fc <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
  1136bf:	31 c0                	xor    %eax,%eax
  1136c1:	5d                   	pop    %rbp
  1136c2:	c3                   	ret    

00000000001136c3 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
  return GetMutableInput(context, node, index);
  1136c3:	48 8b 36             	mov    (%rsi),%rsi
  1136c6:	e9 d1 ff ff ff       	jmp    11369c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>

00000000001136cb <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                        int index) {
  1136cb:	55                   	push   %rbp
      context, index, node->outputs->size, node->outputs->data);
  1136cc:	48 8b 46 08          	mov    0x8(%rsi),%rax
                        int index) {
  1136d0:	48 89 f9             	mov    %rdi,%rcx
  1136d3:	89 d7                	mov    %edx,%edi
  const int tensor_index = ValidateTensorIndexing(
  1136d5:	8b 30                	mov    (%rax),%esi
      context, index, node->outputs->size, node->outputs->data);
  1136d7:	48 8d 50 04          	lea    0x4(%rax),%rdx
                        int index) {
  1136db:	48 89 e5             	mov    %rsp,%rbp
  const int tensor_index = ValidateTensorIndexing(
  1136de:	e8 a6 ff ff ff       	call   113689 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi.constprop.0>
  if (tensor_index < 0) {
  1136e3:	85 c0                	test   %eax,%eax
  1136e5:	78 0b                	js     1136f2 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x27>
  1136e7:	89 c6                	mov    %eax,%esi
  return GetTensorAtIndex(context, tensor_index);
  1136e9:	48 89 cf             	mov    %rcx,%rdi
}
  1136ec:	5d                   	pop    %rbp
  return GetTensorAtIndex(context, tensor_index);
  1136ed:	e9 0a ff ff ff       	jmp    1135fc <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
}
  1136f2:	31 c0                	xor    %eax,%eax
  1136f4:	5d                   	pop    %rbp
  1136f5:	c3                   	ret    

00000000001136f6 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
  1136f6:	48 8b 36             	mov    (%rsi),%rsi
  1136f9:	e9 9e ff ff ff       	jmp    11369c <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei.isra.0>

00000000001136fe <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
      static_cast<double>(input->params.scale * filter->params.scale);
  1136fe:	f3 0f 10 46 18       	movss  0x18(%rsi),%xmm0
  113703:	f3 0f 59 42 18       	mulss  0x18(%rdx),%xmm0
  TF_LITE_ENSURE(context, input_product_scale >= 0);
  113708:	0f 57 c9             	xorps  %xmm1,%xmm1
  11370b:	0f 2f c1             	comiss %xmm1,%xmm0
  11370e:	73 25                	jae    113735 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x37>
                                              double* multiplier) {
  113710:	55                   	push   %rbp
  TF_LITE_ENSURE(context, input_product_scale >= 0);
  113711:	31 c0                	xor    %eax,%eax
  113713:	41 b8 66 f7 11 00    	mov    $0x11f766,%r8d
  113719:	b9 4b 01 00 00       	mov    $0x14b,%ecx
  11371e:	ba 1a f7 11 00       	mov    $0x11f71a,%edx
  113723:	be d1 f5 11 00       	mov    $0x11f5d1,%esi
                                              double* multiplier) {
  113728:	48 89 e5             	mov    %rsp,%rbp
  TF_LITE_ENSURE(context, input_product_scale >= 0);
  11372b:	ff 57 28             	call   *0x28(%rdi)
  11372e:	b8 01 00 00 00       	mov    $0x1,%eax
}
  113733:	5d                   	pop    %rbp
  113734:	c3                   	ret    
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
  113735:	f3 0f 5a 49 18       	cvtss2sd 0x18(%rcx),%xmm1
  const double input_product_scale =
  11373a:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
  11373e:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
  return kTfLiteOk;
  113742:	31 c0                	xor    %eax,%eax
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
  113744:	f2 41 0f 11 00       	movsd  %xmm0,(%r8)
}
  113749:	c3                   	ret    

000000000011374a <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
                                              double* multiplier) {
  11374a:	48 89 c8             	mov    %rcx,%rax
  const double input_product_scale = static_cast<double>(input->params.scale) *
  11374d:	f3 0f 5a 46 18       	cvtss2sd 0x18(%rsi),%xmm0
                                              double* multiplier) {
  113752:	4c 89 c1             	mov    %r8,%rcx
                                     static_cast<double>(filter->params.scale);
  113755:	f3 0f 5a 4a 18       	cvtss2sd 0x18(%rdx),%xmm1
  const double input_product_scale = static_cast<double>(input->params.scale) *
  11375a:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
                                              double* multiplier) {
  11375e:	4d 89 c8             	mov    %r9,%r8
  if (bias) {
  113761:	48 85 c0             	test   %rax,%rax
  113764:	74 27                	je     11378d <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x43>
    const double bias_scale = static_cast<double>(bias->params.scale);
  113766:	f3 0f 5a 48 18       	cvtss2sd 0x18(%rax),%xmm1
    const double scale_diff = std::abs(input_product_scale - bias_scale);
  11376b:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
  11376f:	0f 54 05 1a 9b 00 00 	andps  0x9b1a(%rip),%xmm0        # 11d290 <_ZN6tflite12_GLOBAL__N_1L24kOfflineMemAllocMetadataE+0x20>
    const double output_scale = static_cast<double>(output->params.scale);
  113776:	f3 0f 5a 49 18       	cvtss2sd 0x18(%rcx),%xmm1
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
  11377b:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
  11377f:	f2 0f 10 0d b1 9e 00 	movsd  0x9eb1(%rip),%xmm1        # 11d638 <_ZTVN6tflite19GreedyMemoryPlannerE+0x70>
  113786:	00 
  113787:	66 0f 2f c8          	comisd %xmm0,%xmm1
  11378b:	72 05                	jb     113792 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x48>
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
  11378d:	e9 6c ff ff ff       	jmp    1136fe <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
                                              double* multiplier) {
  113792:	55                   	push   %rbp
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
  113793:	31 c0                	xor    %eax,%eax
  113795:	41 b8 7f f7 11 00    	mov    $0x11f77f,%r8d
  11379b:	b9 3e 01 00 00       	mov    $0x13e,%ecx
  1137a0:	ba 1a f7 11 00       	mov    $0x11f71a,%edx
  1137a5:	be d1 f5 11 00       	mov    $0x11f5d1,%esi
                                              double* multiplier) {
  1137aa:	48 89 e5             	mov    %rsp,%rbp
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
  1137ad:	ff 57 28             	call   *0x28(%rdi)
}
  1137b0:	b8 01 00 00 00       	mov    $0x1,%eax
  1137b5:	5d                   	pop    %rbp
  1137b6:	c3                   	ret    

00000000001137b7 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
  1137b7:	55                   	push   %rbp
  1137b8:	89 f0                	mov    %esi,%eax
  1137ba:	48 89 e5             	mov    %rsp,%rbp
  1137bd:	41 56                	push   %r14
  1137bf:	41 55                	push   %r13
  1137c1:	4d 89 c5             	mov    %r8,%r13
  1137c4:	41 54                	push   %r12
  1137c6:	49 89 cc             	mov    %rcx,%r12
  1137c9:	53                   	push   %rbx
  1137ca:	48 83 ec 20          	sub    $0x20,%rsp
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
  1137ce:	8b 0a                	mov    (%rdx),%ecx
  1137d0:	83 f9 03             	cmp    $0x3,%ecx
  1137d3:	74 2e                	je     113803 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x4c>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
  1137d5:	83 f9 09             	cmp    $0x9,%ecx
  1137d8:	74 33                	je     11380d <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x56>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
  1137da:	83 f9 07             	cmp    $0x7,%ecx
  1137dd:	74 3b                	je     11381a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x63>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
  1137df:	31 c0                	xor    %eax,%eax
  1137e1:	41 b8 a1 f7 11 00    	mov    $0x11f7a1,%r8d
  1137e7:	b9 91 01 00 00       	mov    $0x191,%ecx
  1137ec:	ba 1a f7 11 00       	mov    $0x11f71a,%edx
  1137f1:	be d1 f5 11 00       	mov    $0x11f5d1,%esi
  1137f6:	ff 57 28             	call   *0x28(%rdi)
  1137f9:	b8 01 00 00 00       	mov    $0x1,%eax
  1137fe:	e9 02 01 00 00       	jmp    113905 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x14e>
    qmax = std::numeric_limits<uint8_t>::max();
  113803:	bb ff 00 00 00       	mov    $0xff,%ebx
    qmin = std::numeric_limits<uint8_t>::min();
  113808:	45 31 f6             	xor    %r14d,%r14d
  11380b:	eb 18                	jmp    113825 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x6e>
    qmax = std::numeric_limits<int8_t>::max();
  11380d:	bb 7f 00 00 00       	mov    $0x7f,%ebx
    qmin = std::numeric_limits<int8_t>::min();
  113812:	41 be 80 ff ff ff    	mov    $0xffffff80,%r14d
  113818:	eb 0b                	jmp    113825 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x6e>
    qmax = std::numeric_limits<int16_t>::max();
  11381a:	bb ff 7f 00 00       	mov    $0x7fff,%ebx
    qmin = std::numeric_limits<int16_t>::min();
  11381f:	41 be 00 80 ff ff    	mov    $0xffff8000,%r14d
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
  113825:	f3 0f 10 42 18       	movss  0x18(%rdx),%xmm0
  11382a:	8b 72 1c             	mov    0x1c(%rdx),%esi
  if (activation == kTfLiteActRelu) {
  11382d:	83 f8 01             	cmp    $0x1,%eax
  113830:	75 27                	jne    113859 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xa2>
    TF_LITE_ENSURE_OK(context,
  113832:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  113836:	0f 57 c9             	xorps  %xmm1,%xmm1
  113839:	e8 d8 fd ff ff       	call   113616 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi>
  11383e:	85 c0                	test   %eax,%eax
  113840:	0f 85 bf 00 00 00    	jne    113905 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x14e>
    *act_min = std::max(qmin, tmp_q);
  113846:	8b 45 dc             	mov    -0x24(%rbp),%eax
  113849:	44 39 f0             	cmp    %r14d,%eax
  11384c:	41 0f 4c c6          	cmovl  %r14d,%eax
  113850:	41 89 04 24          	mov    %eax,(%r12)
    *act_max = qmax;
  113854:	e9 9e 00 00 00       	jmp    1138f7 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x140>
  } else if (activation == kTfLiteActRelu6) {
  113859:	83 f8 03             	cmp    $0x3,%eax
  11385c:	75 3c                	jne    11389a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xe3>
    TF_LITE_ENSURE_OK(context,
  11385e:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  113862:	0f 57 c9             	xorps  %xmm1,%xmm1
  113865:	89 75 c0             	mov    %esi,-0x40(%rbp)
  113868:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11386c:	f3 0f 11 45 c4       	movss  %xmm0,-0x3c(%rbp)
  113871:	e8 a0 fd ff ff       	call   113616 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi>
  113876:	85 c0                	test   %eax,%eax
  113878:	0f 85 87 00 00 00    	jne    113905 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x14e>
    *act_min = std::max(qmin, tmp_q);
  11387e:	8b 45 dc             	mov    -0x24(%rbp),%eax
    TF_LITE_ENSURE_OK(context,
  113881:	f3 0f 10 0d 6f a7 00 	movss  0xa76f(%rip),%xmm1        # 11dff8 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0xc>
  113888:	00 
  113889:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    *act_min = std::max(qmin, tmp_q);
  11388d:	44 39 f0             	cmp    %r14d,%eax
  113890:	41 0f 4c c6          	cmovl  %r14d,%eax
  113894:	41 89 04 24          	mov    %eax,(%r12)
    TF_LITE_ENSURE_OK(context,
  113898:	eb 40                	jmp    1138da <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x123>
  } else if (activation == kTfLiteActReluN1To1) {
  11389a:	83 f8 02             	cmp    $0x2,%eax
  11389d:	75 60                	jne    1138ff <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x148>
    TF_LITE_ENSURE_OK(context,
  11389f:	f3 0f 10 0d 55 a7 00 	movss  0xa755(%rip),%xmm1        # 11dffc <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x10>
  1138a6:	00 
  1138a7:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  1138ab:	89 75 c0             	mov    %esi,-0x40(%rbp)
  1138ae:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  1138b2:	f3 0f 11 45 c4       	movss  %xmm0,-0x3c(%rbp)
  1138b7:	e8 5a fd ff ff       	call   113616 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi>
  1138bc:	85 c0                	test   %eax,%eax
  1138be:	75 45                	jne    113905 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x14e>
    *act_min = std::max(qmin, tmp_q);
  1138c0:	8b 45 dc             	mov    -0x24(%rbp),%eax
    TF_LITE_ENSURE_OK(context,
  1138c3:	f3 0f 10 0d 35 a7 00 	movss  0xa735(%rip),%xmm1        # 11e000 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x14>
  1138ca:	00 
  1138cb:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
    *act_min = std::max(qmin, tmp_q);
  1138cf:	44 39 f0             	cmp    %r14d,%eax
  1138d2:	41 0f 4c c6          	cmovl  %r14d,%eax
  1138d6:	41 89 04 24          	mov    %eax,(%r12)
    TF_LITE_ENSURE_OK(context,
  1138da:	8b 75 c0             	mov    -0x40(%rbp),%esi
  1138dd:	f3 0f 10 45 c4       	movss  -0x3c(%rbp),%xmm0
  1138e2:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  1138e6:	e8 2b fd ff ff       	call   113616 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextfifRi>
  1138eb:	85 c0                	test   %eax,%eax
  1138ed:	75 16                	jne    113905 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x14e>
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
  1138ef:	8b 45 dc             	mov    -0x24(%rbp),%eax
  1138f2:	39 c3                	cmp    %eax,%ebx
  1138f4:	0f 4f d8             	cmovg  %eax,%ebx
    *act_max = std::min(qmax, tmp_q);
  1138f7:	41 89 5d 00          	mov    %ebx,0x0(%r13)
  return kTfLiteOk;
  1138fb:	31 c0                	xor    %eax,%eax
  1138fd:	eb 06                	jmp    113905 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x14e>
    *act_min = qmin;
  1138ff:	45 89 34 24          	mov    %r14d,(%r12)
    *act_max = qmax;
  113903:	eb f2                	jmp    1138f7 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x140>
                                               output, act_min, act_max);
}
  113905:	48 83 c4 20          	add    $0x20,%rsp
  113909:	5b                   	pop    %rbx
  11390a:	41 5c                	pop    %r12
  11390c:	41 5d                	pop    %r13
  11390e:	41 5e                	pop    %r14
  113910:	5d                   	pop    %rbp
  113911:	c3                   	ret    

0000000000113912 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>:
    int num_channels) {
  113912:	55                   	push   %rbp
  113913:	48 89 e5             	mov    %rsp,%rbp
  113916:	41 57                	push   %r15
  113918:	41 56                	push   %r14
  11391a:	4d 89 ce             	mov    %r9,%r14
  11391d:	41 55                	push   %r13
  11391f:	41 54                	push   %r12
  113921:	53                   	push   %rbx
  113922:	48 89 fb             	mov    %rdi,%rbx
  113925:	48 83 ec 78          	sub    $0x78,%rsp
  113929:	48 8b 45 10          	mov    0x10(%rbp),%rax
  11392d:	4c 8b 7d 18          	mov    0x18(%rbp),%r15
  113931:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
  113935:	4c 8b 55 30          	mov    0x30(%rbp),%r10
  113939:	4c 8b 5d 38          	mov    0x38(%rbp),%r11
  11393d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  113941:	48 8b 45 20          	mov    0x20(%rbp),%rax
  113945:	44 8b 4d 40          	mov    0x40(%rbp),%r9d
  113949:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  11394d:	48 8b 45 28          	mov    0x28(%rbp),%rax
  113951:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
  113955:	8b 46 50             	mov    0x50(%rsi),%eax
  113958:	83 f8 01             	cmp    $0x1,%eax
  11395b:	74 16                	je     113973 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x61>
  11395d:	6a 01                	push   $0x1
  11395f:	41 b9 a7 f7 11 00    	mov    $0x11f7a7,%r9d
  113965:	41 b8 c1 f7 11 00    	mov    $0x11f7c1,%r8d
  11396b:	b9 da 00 00 00       	mov    $0xda,%ecx
  113970:	50                   	push   %rax
  113971:	eb 1c                	jmp    11398f <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x7d>
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
  113973:	8b 42 50             	mov    0x50(%rdx),%eax
  113976:	83 f8 01             	cmp    $0x1,%eax
  113979:	74 32                	je     1139ad <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x9b>
  11397b:	6a 01                	push   $0x1
  11397d:	41 b9 a7 f7 11 00    	mov    $0x11f7a7,%r9d
  113983:	41 b8 f4 f7 11 00    	mov    $0x11f7f4,%r8d
  113989:	b9 dc 00 00 00       	mov    $0xdc,%ecx
  11398e:	50                   	push   %rax
  11398f:	ba 1a f7 11 00       	mov    $0x11f71a,%edx
  113994:	31 c0                	xor    %eax,%eax
  113996:	be da f7 11 00       	mov    $0x11f7da,%esi
  11399b:	48 89 df             	mov    %rbx,%rdi
  11399e:	ff 53 28             	call   *0x28(%rbx)
  1139a1:	58                   	pop    %rax
  1139a2:	5a                   	pop    %rdx
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
  1139a3:	b8 01 00 00 00       	mov    $0x1,%eax
  1139a8:	e9 11 02 00 00       	jmp    113bbe <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2ac>
  const auto* affine_quantization =
  1139ad:	48 8b 42 58          	mov    0x58(%rdx),%rax
  TF_LITE_ENSURE(context, affine_quantization);
  1139b1:	48 85 c0             	test   %rax,%rax
  1139b4:	75 17                	jne    1139cd <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xbb>
  1139b6:	41 b8 0e f8 11 00    	mov    $0x11f80e,%r8d
  1139bc:	b9 e7 00 00 00       	mov    $0xe7,%ecx
  1139c1:	ba 1a f7 11 00       	mov    $0x11f71a,%edx
  1139c6:	be d1 f5 11 00       	mov    $0x11f5d1,%esi
  1139cb:	eb 4b                	jmp    113a18 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x106>
  1139cd:	4d 89 c5             	mov    %r8,%r13
  TF_LITE_ENSURE(context, affine_quantization->scale);
  1139d0:	4c 8b 00             	mov    (%rax),%r8
  1139d3:	4d 85 c0             	test   %r8,%r8
  1139d6:	75 0d                	jne    1139e5 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xd3>
  1139d8:	41 b8 22 f8 11 00    	mov    $0x11f822,%r8d
  1139de:	b9 e8 00 00 00       	mov    $0xe8,%ecx
  1139e3:	eb 24                	jmp    113a09 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xf7>
  const bool is_per_channel = affine_quantization->scale->size > 1;
  1139e5:	41 8b 08             	mov    (%r8),%ecx
  1139e8:	49 89 f4             	mov    %rsi,%r12
  if (is_per_channel) {
  1139eb:	83 f9 01             	cmp    $0x1,%ecx
  1139ee:	0f 8e 8f 00 00 00    	jle    113a83 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x171>
    TF_LITE_ENSURE(context,
  1139f4:	8b 3e                	mov    (%rsi),%edi
  1139f6:	8d 77 f9             	lea    -0x7(%rdi),%esi
  1139f9:	83 e6 fd             	and    $0xfffffffd,%esi
  1139fc:	74 1f                	je     113a1d <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x10b>
  1139fe:	41 b8 3d f8 11 00    	mov    $0x11f83d,%r8d
  113a04:	b9 ec 00 00 00       	mov    $0xec,%ecx
  113a09:	ba 1a f7 11 00       	mov    $0x11f71a,%edx
  113a0e:	be d1 f5 11 00       	mov    $0x11f5d1,%esi
  113a13:	48 89 df             	mov    %rbx,%rdi
  113a16:	31 c0                	xor    %eax,%eax
  113a18:	ff 53 28             	call   *0x28(%rbx)
  113a1b:	eb 86                	jmp    1139a3 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x91>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
  113a1d:	8b 32                	mov    (%rdx),%esi
  113a1f:	83 fe 09             	cmp    $0x9,%esi
  113a22:	74 19                	je     113a3d <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x12b>
  113a24:	6a 09                	push   $0x9
  113a26:	41 b9 77 f8 11 00    	mov    $0x11f877,%r9d
  113a2c:	41 b8 83 f8 11 00    	mov    $0x11f883,%r8d
  113a32:	b9 ee 00 00 00       	mov    $0xee,%ecx
  113a37:	56                   	push   %rsi
  113a38:	e9 52 ff ff ff       	jmp    11398f <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x7d>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
  113a3d:	44 39 c9             	cmp    %r9d,%ecx
  113a40:	74 19                	je     113a5b <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x149>
  113a42:	41 51                	push   %r9
  113a44:	41 b8 9d f8 11 00    	mov    $0x11f89d,%r8d
  113a4a:	41 b9 90 f8 11 00    	mov    $0x11f890,%r9d
  113a50:	51                   	push   %rcx
  113a51:	b9 ef 00 00 00       	mov    $0xef,%ecx
  113a56:	e9 34 ff ff ff       	jmp    11398f <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x7d>
    TF_LITE_ENSURE_EQ(
  113a5b:	48 8b 72 10          	mov    0x10(%rdx),%rsi
  113a5f:	48 63 40 10          	movslq 0x10(%rax),%rax
  113a63:	8b 44 86 04          	mov    0x4(%rsi,%rax,4),%eax
  113a67:	39 c8                	cmp    %ecx,%eax
  113a69:	74 18                	je     113a83 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x171>
  113a6b:	50                   	push   %rax
  113a6c:	41 b9 be f8 11 00    	mov    $0x11f8be,%r9d
  113a72:	41 b8 90 f8 11 00    	mov    $0x11f890,%r8d
  113a78:	51                   	push   %rcx
  113a79:	b9 f0 00 00 00       	mov    $0xf0,%ecx
  113a7e:	e9 0c ff ff ff       	jmp    11398f <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x7d>
  const float input_scale = input->params.scale;
  113a83:	f3 41 0f 10 54 24 18 	movss  0x18(%r12),%xmm2
  const float output_scale = output->params.scale;
  113a8a:	f3 41 0f 10 5d 18    	movss  0x18(%r13),%xmm3
  for (int i = 0; i < num_channels; ++i) {
  113a90:	31 c0                	xor    %eax,%eax
  113a92:	41 39 c1             	cmp    %eax,%r9d
  113a95:	0f 8e a7 00 00 00    	jle    113b42 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x230>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
  113a9b:	83 f9 01             	cmp    $0x1,%ecx
  113a9e:	7e 09                	jle    113aa9 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x197>
  113aa0:	f3 41 0f 10 4c 80 04 	movss  0x4(%r8,%rax,4),%xmm1
  113aa7:	eb 06                	jmp    113aaf <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x19d>
  113aa9:	f3 41 0f 10 48 04    	movss  0x4(%r8),%xmm1
    const double effective_output_scale = static_cast<double>(input_scale) *
  113aaf:	f3 0f 5a c2          	cvtss2sd %xmm2,%xmm0
    const double filter_scale = static_cast<double>(scale);
  113ab3:	f3 0f 5a c9          	cvtss2sd %xmm1,%xmm1
    const double effective_output_scale = static_cast<double>(input_scale) *
  113ab7:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
                                          static_cast<double>(output_scale);
  113abb:	f3 0f 5a cb          	cvtss2sd %xmm3,%xmm1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
  113abf:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  113ac3:	48 8d 7d c4          	lea    -0x3c(%rbp),%rdi
  113ac7:	44 89 4d 88          	mov    %r9d,-0x78(%rbp)
  113acb:	4c 89 9d 68 ff ff ff 	mov    %r11,-0x98(%rbp)
  113ad2:	4c 89 95 70 ff ff ff 	mov    %r10,-0x90(%rbp)
  113ad9:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
    const double effective_output_scale = static_cast<double>(input_scale) *
  113ae0:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
  113ae4:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  113ae8:	89 4d 8c             	mov    %ecx,-0x74(%rbp)
  113aeb:	4c 89 45 90          	mov    %r8,-0x70(%rbp)
  113aef:	f3 0f 11 55 98       	movss  %xmm2,-0x68(%rbp)
                                          static_cast<double>(output_scale);
  113af4:	f3 0f 11 5d 9c       	movss  %xmm3,-0x64(%rbp)
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
  113af9:	e8 98 fa ff ff       	call   113596 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    per_channel_multiplier[i] = significand;
  113afe:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  113b02:	8b 75 c4             	mov    -0x3c(%rbp),%esi
  113b05:	4c 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%r10
    per_channel_shift[i] = channel_shift;
  113b0c:	4c 8b 9d 68 ff ff ff 	mov    -0x98(%rbp),%r11
  113b13:	44 8b 4d 88          	mov    -0x78(%rbp),%r9d
  113b17:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  113b1e:	8b 4d 8c             	mov    -0x74(%rbp),%ecx
  113b21:	4c 8b 45 90          	mov    -0x70(%rbp),%r8
    per_channel_multiplier[i] = significand;
  113b25:	41 89 34 82          	mov    %esi,(%r10,%rax,4)
    per_channel_shift[i] = channel_shift;
  113b29:	8b 75 c8             	mov    -0x38(%rbp),%esi
  113b2c:	f3 0f 10 55 98       	movss  -0x68(%rbp),%xmm2
  113b31:	f3 0f 10 5d 9c       	movss  -0x64(%rbp),%xmm3
  113b36:	41 89 34 83          	mov    %esi,(%r11,%rax,4)
  for (int i = 0; i < num_channels; ++i) {
  113b3a:	48 ff c0             	inc    %rax
  113b3d:	e9 50 ff ff ff       	jmp    113a92 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x180>
  if (input->type == kTfLiteUInt8) {
  113b42:	41 83 3c 24 03       	cmpl   $0x3,(%r12)
  113b47:	75 3c                	jne    113b85 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x273>
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
  113b49:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  113b4d:	4c 8d 4d c8          	lea    -0x38(%rbp),%r9
  113b51:	4d 89 e8             	mov    %r13,%r8
  113b54:	4c 89 e6             	mov    %r12,%rsi
    double real_multiplier = 0.0;
  113b57:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  113b5e:	00 
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
  113b5f:	48 89 df             	mov    %rbx,%rdi
  113b62:	e8 e3 fb ff ff       	call   11374a <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
  113b67:	85 c0                	test   %eax,%eax
  113b69:	75 53                	jne    113bbe <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2ac>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
  113b6b:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  113b6f:	f2 0f 10 45 c8       	movsd  -0x38(%rbp),%xmm0
  113b74:	48 8d 75 c4          	lea    -0x3c(%rbp),%rsi
  113b78:	e8 19 fa ff ff       	call   113596 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    *shift = -exponent;
  113b7d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  113b80:	f7 d8                	neg    %eax
  113b82:	41 89 07             	mov    %eax,(%r15)
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
  113b85:	41 8b 14 24          	mov    (%r12),%edx
  113b89:	89 d0                	mov    %edx,%eax
  113b8b:	83 e0 fb             	and    $0xfffffffb,%eax
  113b8e:	83 f8 03             	cmp    $0x3,%eax
  113b91:	74 07                	je     113b9a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x288>
  return kTfLiteOk;
  113b93:	31 c0                	xor    %eax,%eax
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
  113b95:	83 fa 09             	cmp    $0x9,%edx
  113b98:	75 24                	jne    113bbe <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x2ac>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
  113b9a:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
  113b9e:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  113ba2:	4c 89 ea             	mov    %r13,%rdx
  113ba5:	48 89 df             	mov    %rbx,%rdi
  113ba8:	41 8b 36             	mov    (%r14),%esi
}
  113bab:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  113baf:	5b                   	pop    %rbx
  113bb0:	41 5c                	pop    %r12
  113bb2:	41 5d                	pop    %r13
  113bb4:	41 5e                	pop    %r14
  113bb6:	41 5f                	pop    %r15
  113bb8:	5d                   	pop    %rbp
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
  113bb9:	e9 f9 fb ff ff       	jmp    1137b7 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
}
  113bbe:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  113bc2:	5b                   	pop    %rbx
  113bc3:	41 5c                	pop    %r12
  113bc5:	41 5d                	pop    %r13
  113bc7:	41 5e                	pop    %r14
  113bc9:	41 5f                	pop    %r15
  113bcb:	5d                   	pop    %rbp
  113bcc:	c3                   	ret    

0000000000113bcd <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:

// Converts the flatbuffer padding enum to what is used at runtime.
TfLitePadding ConvertPadding(Padding padding) {
  switch (padding) {
    case Padding_SAME:
      return kTfLitePaddingSame;
  113bcd:	b8 01 00 00 00       	mov    $0x1,%eax
  switch (padding) {
  113bd2:	85 ff                	test   %edi,%edi
  113bd4:	74 09                	je     113bdf <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x12>
  113bd6:	31 c0                	xor    %eax,%eax
  113bd8:	ff cf                	dec    %edi
  113bda:	0f 94 c0             	sete   %al
  113bdd:	01 c0                	add    %eax,%eax
    case Padding_VALID:
      return kTfLitePaddingValid;
  }
  return kTfLitePaddingUnknown;
}
  113bdf:	c3                   	ret    

0000000000113be0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  TFLITE_DCHECK(op != nullptr);
  113be0:	48 85 ff             	test   %rdi,%rdi
  113be3:	75 09                	jne    113bee <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe>
                             void** builtin_data) {
  113be5:	55                   	push   %rbp
  113be6:	48 89 e5             	mov    %rsp,%rbp
  TFLITE_DCHECK(op != nullptr);
  113be9:	e8 d6 e1 ff ff       	call   111dc4 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
  113bee:	48 85 f6             	test   %rsi,%rsi
  113bf1:	74 f2                	je     113be5 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5>
  TFLITE_DCHECK(allocator != nullptr);
  113bf3:	48 85 d2             	test   %rdx,%rdx
  113bf6:	74 ed                	je     113be5 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5>
  TFLITE_DCHECK(builtin_data != nullptr);
  113bf8:	48 85 c9             	test   %rcx,%rcx
  113bfb:	74 e8                	je     113be5 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5>
  113bfd:	c3                   	ret    

0000000000113bfe <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>:
TfLiteStatus FlatBufferIntVectorToArray(
  113bfe:	55                   	push   %rbp
  113bff:	49 89 f8             	mov    %rdi,%r8
  113c02:	48 89 d7             	mov    %rdx,%rdi
  113c05:	48 89 ca             	mov    %rcx,%rdx
  113c08:	48 89 e5             	mov    %rsp,%rbp
  if (!flat_vector) {
  113c0b:	4d 85 c0             	test   %r8,%r8
  113c0e:	75 09                	jne    113c19 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x1b>
    TF_LITE_REPORT_ERROR(error_reporter,
  113c10:	be fb f8 11 00       	mov    $0x11f8fb,%esi
  113c15:	31 c0                	xor    %eax,%eax
  113c17:	eb 10                	jmp    113c29 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x2b>
    size_t num_dimensions = flat_vector->size();
  113c19:	41 8b 08             	mov    (%r8),%ecx
      for (size_t i = 0; i < num_dimensions; ++i) {
  113c1c:	31 c0                	xor    %eax,%eax
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
  113c1e:	48 83 f9 08          	cmp    $0x8,%rcx
  113c22:	76 1c                	jbe    113c40 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x42>
      TF_LITE_REPORT_ERROR(
  113c24:	be 29 f9 11 00       	mov    $0x11f929,%esi
  113c29:	e8 46 bf ff ff       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
  113c2e:	b8 01 00 00 00       	mov    $0x1,%eax
  113c33:	eb 30                	jmp    113c65 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x67>
  static return_type Read(const uint8_t *p, uoffset_t i) {
  113c35:	48 ff c0             	inc    %rax
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
  113c38:	41 8b 14 80          	mov    (%r8,%rax,4),%edx
        buffer[i] = flat_vector->Get(i);
  113c3c:	89 54 86 fc          	mov    %edx,-0x4(%rsi,%rax,4)
      for (size_t i = 0; i < num_dimensions; ++i) {
  113c40:	48 39 c8             	cmp    %rcx,%rax
  113c43:	73 1e                	jae    113c63 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x65>
    FLATBUFFERS_ASSERT(i < size());
  113c45:	41 3b 00             	cmp    (%r8),%eax
  113c48:	72 eb                	jb     113c35 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x37>
  113c4a:	b9 55 e3 11 00       	mov    $0x11e355,%ecx
  113c4f:	ba 60 e3 11 00       	mov    $0x11e360,%edx
  113c54:	be 06 01 00 00       	mov    $0x106,%esi
  113c59:	bf 07 e4 11 00       	mov    $0x11e407,%edi
  113c5e:	e8 0d f1 fe ff       	call   102d70 <__assert_func>
  return kTfLiteOk;
  113c63:	31 c0                	xor    %eax,%eax
}
  113c65:	5d                   	pop    %rbp
  113c66:	c3                   	ret    

0000000000113c67 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
  113c67:	89 f8                	mov    %edi,%eax
  switch (tensor_type) {
  113c69:	83 ff 0f             	cmp    $0xf,%edi
  113c6c:	77 44                	ja     113cb2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x4b>
  113c6e:	89 fa                	mov    %edi,%edx
  113c70:	ff 24 d5 40 d6 11 00 	jmp    *0x11d640(,%rdx,8)
  113c77:	b8 0a 00 00 00       	mov    $0xa,%eax
  113c7c:	eb 05                	jmp    113c83 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
  113c7e:	b8 01 00 00 00       	mov    $0x1,%eax
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
      return kTfLiteOk;
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
  113c83:	89 06                	mov    %eax,(%rsi)
      return kTfLiteOk;
  113c85:	31 c0                	xor    %eax,%eax
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
  113c87:	c3                   	ret    
      return kTfLiteOk;
  113c88:	b8 0b 00 00 00       	mov    $0xb,%eax
  113c8d:	eb f4                	jmp    113c83 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      return kTfLiteOk;
  113c8f:	b8 10 00 00 00       	mov    $0x10,%eax
  113c94:	eb ed                	jmp    113c83 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      return kTfLiteOk;
  113c96:	b8 0d 00 00 00       	mov    $0xd,%eax
  113c9b:	eb e6                	jmp    113c83 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      return kTfLiteOk;
  113c9d:	b8 0c 00 00 00       	mov    $0xc,%eax
  113ca2:	eb df                	jmp    113c83 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      return kTfLiteOk;
  113ca4:	b8 0e 00 00 00       	mov    $0xe,%eax
  113ca9:	eb d8                	jmp    113c83 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      return kTfLiteOk;
  113cab:	b8 0f 00 00 00       	mov    $0xf,%eax
  113cb0:	eb d1                	jmp    113c83 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
                               ErrorReporter* error_reporter) {
  113cb2:	55                   	push   %rbp
  113cb3:	48 89 d7             	mov    %rdx,%rdi
      *type = kTfLiteNoType;
  113cb6:	31 d2                	xor    %edx,%edx
  113cb8:	89 16                	mov    %edx,(%rsi)
      TF_LITE_REPORT_ERROR(error_reporter,
  113cba:	89 c2                	mov    %eax,%edx
  113cbc:	be 6a f9 11 00       	mov    $0x11f96a,%esi
  113cc1:	31 c0                	xor    %eax,%eax
                               ErrorReporter* error_reporter) {
  113cc3:	48 89 e5             	mov    %rsp,%rbp
      TF_LITE_REPORT_ERROR(error_reporter,
  113cc6:	e8 a9 be ff ff       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
  113ccb:	b8 01 00 00 00       	mov    $0x1,%eax
}
  113cd0:	5d                   	pop    %rbp
  113cd1:	c3                   	ret    

0000000000113cd2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
  113cd2:	55                   	push   %rbp
  113cd3:	48 89 e5             	mov    %rsp,%rbp
  113cd6:	41 57                	push   %r15
  113cd8:	49 89 cf             	mov    %rcx,%r15
  113cdb:	41 56                	push   %r14
  113cdd:	49 89 f6             	mov    %rsi,%r14
  113ce0:	41 55                	push   %r13
  113ce2:	49 89 d5             	mov    %rdx,%r13
  113ce5:	41 54                	push   %r12
  113ce7:	53                   	push   %rbx
  113ce8:	48 89 fb             	mov    %rdi,%rbx
  113ceb:	48 83 ec 18          	sub    $0x18,%rsp
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
  113cef:	e8 ec fe ff ff       	call   113be0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
  113cf4:	49 8b 45 00          	mov    0x0(%r13),%rax
  113cf8:	ba 04 00 00 00       	mov    $0x4,%edx
  113cfd:	4c 89 ef             	mov    %r13,%rdi
  113d00:	be 24 00 00 00       	mov    $0x24,%esi
  113d05:	ff 10                	call   *(%rax)
    return new (allocated_memory) T();
  113d07:	48 85 c0             	test   %rax,%rax
  113d0a:	75 2a                	jne    113d36 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
  113d0c:	41 b9 8e f9 11 00    	mov    $0x11f98e,%r9d
  113d12:	b9 a0 f9 11 00       	mov    $0x11f9a0,%ecx
  113d17:	4c 89 f6             	mov    %r14,%rsi
  113d1a:	31 c0                	xor    %eax,%eax
  113d1c:	41 b8 c3 06 00 00    	mov    $0x6c3,%r8d
  113d22:	ba d1 f5 11 00       	mov    $0x11f5d1,%edx
  113d27:	4c 89 f7             	mov    %r14,%rdi
  113d2a:	e8 cd be ff ff       	call   10fbfc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
  113d2f:	b8 01 00 00 00       	mov    $0x1,%eax
  113d34:	eb 7f                	jmp    113db5 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe3>
  113d36:	49 89 c4             	mov    %rax,%r12
  113d39:	b9 09 00 00 00       	mov    $0x9,%ecx
  113d3e:	31 c0                	xor    %eax,%eax
  113d40:	4c 89 e7             	mov    %r12,%rdi
  113d43:	f3 ab                	rep stos %eax,%es:(%rdi)
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
  113d45:	48 89 df             	mov    %rbx,%rdi
  113d48:	e8 c1 bd ff ff       	call   10fb0e <_ZNK6tflite8Operator20builtin_options_typeEv>
  113d4d:	83 f8 11             	cmp    $0x11,%eax
  113d50:	75 4b                	jne    113d9d <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcb>
  113d52:	48 89 df             	mov    %rbx,%rdi
  113d55:	e8 60 bd ff ff       	call   10faba <_ZNK6tflite8Operator15builtin_optionsEv>
  113d5a:	48 89 c3             	mov    %rax,%rbx

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();

  if (schema_params != nullptr) {
  113d5d:	48 85 c0             	test   %rax,%rax
  113d60:	74 3b                	je     113d9d <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcb>
    auto field_offset = GetOptionalFieldOffset(field);
  113d62:	be 04 00 00 00       	mov    $0x4,%esi
  113d67:	48 89 c7             	mov    %rax,%rdi
  113d6a:	e8 c5 97 ff ff       	call   10d534 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  113d6f:	66 85 c0             	test   %ax,%ax
  113d72:	74 29                	je     113d9d <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcb>
    auto p = data_ + field_offset;
  113d74:	0f b7 c0             	movzwl %ax,%eax
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
    if (new_shape != nullptr) {
      TF_LITE_ENSURE_STATUS(
  113d77:	b9 f8 f9 11 00       	mov    $0x11f9f8,%ecx
  113d7c:	4c 89 f2             	mov    %r14,%rdx
  113d7f:	4c 89 e6             	mov    %r12,%rsi
  113d82:	48 01 c3             	add    %rax,%rbx
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  113d85:	8b 03                	mov    (%rbx),%eax
  113d87:	48 01 c3             	add    %rax,%rbx
  113d8a:	48 89 df             	mov    %rbx,%rdi
  113d8d:	e8 6c fe ff ff       	call   113bfe <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>
  113d92:	85 c0                	test   %eax,%eax
  113d94:	75 0e                	jne    113da4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd2>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
  113d96:	8b 03                	mov    (%rbx),%eax
  113d98:	41 89 44 24 20       	mov    %eax,0x20(%r12)
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  113d9d:	4d 89 27             	mov    %r12,(%r15)
  return kTfLiteOk;
  113da0:	31 c0                	xor    %eax,%eax
  113da2:	eb 11                	jmp    113db5 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe3>
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
	  get_deleter()(std::move(__ptr));
  113da4:	4c 89 e6             	mov    %r12,%rsi
  113da7:	4c 89 ef             	mov    %r13,%rdi
  113daa:	89 45 cc             	mov    %eax,-0x34(%rbp)
  113dad:	e8 02 bd ff ff       	call   10fab4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
  113db2:	8b 45 cc             	mov    -0x34(%rbp),%eax
}
  113db5:	48 83 c4 18          	add    $0x18,%rsp
  113db9:	5b                   	pop    %rbx
  113dba:	41 5c                	pop    %r12
  113dbc:	41 5d                	pop    %r13
  113dbe:	41 5e                	pop    %r14
  113dc0:	41 5f                	pop    %r15
  113dc2:	5d                   	pop    %rbp
  113dc3:	c3                   	ret    

0000000000113dc4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
  113dc4:	55                   	push   %rbp
  113dc5:	48 89 e5             	mov    %rsp,%rbp
  113dc8:	41 56                	push   %r14
  113dca:	49 89 f6             	mov    %rsi,%r14
  113dcd:	41 55                	push   %r13
  113dcf:	49 89 cd             	mov    %rcx,%r13
  113dd2:	41 54                	push   %r12
  113dd4:	49 89 fc             	mov    %rdi,%r12
  113dd7:	53                   	push   %rbx
  113dd8:	48 89 d3             	mov    %rdx,%rbx
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
  113ddb:	e8 00 fe ff ff       	call   113be0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
  113de0:	48 8b 03             	mov    (%rbx),%rax
  113de3:	ba 04 00 00 00       	mov    $0x4,%edx
  113de8:	48 89 df             	mov    %rbx,%rdi
  113deb:	be 18 00 00 00       	mov    $0x18,%esi
  113df0:	ff 10                	call   *(%rax)
    return new (allocated_memory) T();
  113df2:	48 85 c0             	test   %rax,%rax
  113df5:	75 2d                	jne    113e24 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
  113df7:	41 b9 8e f9 11 00    	mov    $0x11f98e,%r9d
  113dfd:	b9 a0 f9 11 00       	mov    $0x11f9a0,%ecx
  113e02:	4c 89 f6             	mov    %r14,%rsi
  113e05:	31 c0                	xor    %eax,%eax
  113e07:	41 b8 4d 04 00 00    	mov    $0x44d,%r8d
  113e0d:	ba d1 f5 11 00       	mov    $0x11f5d1,%edx
  113e12:	4c 89 f7             	mov    %r14,%rdi
  113e15:	e8 e2 bd ff ff       	call   10fbfc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
  113e1a:	b8 01 00 00 00       	mov    $0x1,%eax
  113e1f:	e9 c3 00 00 00       	jmp    113ee7 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x123>
  113e24:	45 31 f6             	xor    %r14d,%r14d
  113e27:	48 89 c7             	mov    %rax,%rdi
  113e2a:	48 89 c3             	mov    %rax,%rbx
  113e2d:	b9 06 00 00 00       	mov    $0x6,%ecx
  113e32:	44 89 f0             	mov    %r14d,%eax
  113e35:	f3 ab                	rep stos %eax,%es:(%rdi)
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
  113e37:	4c 89 e7             	mov    %r12,%rdi
  113e3a:	e8 cf bc ff ff       	call   10fb0e <_ZNK6tflite8Operator20builtin_options_typeEv>
  113e3f:	ff c8                	dec    %eax
  113e41:	0f 85 9a 00 00 00    	jne    113ee1 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11d>
  113e47:	4c 89 e7             	mov    %r12,%rdi
  113e4a:	e8 6b bc ff ff       	call   10faba <_ZNK6tflite8Operator15builtin_optionsEv>
  113e4f:	49 89 c4             	mov    %rax,%r12
  if (schema_params != nullptr) {
  113e52:	48 85 c0             	test   %rax,%rax
  113e55:	0f 84 86 00 00 00    	je     113ee1 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11d>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
  113e5b:	31 d2                	xor    %edx,%edx
  113e5d:	be 04 00 00 00       	mov    $0x4,%esi
  113e62:	48 89 c7             	mov    %rax,%rdi
  113e65:	e8 e2 bc ff ff       	call   10fb4c <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_W, 0);
  113e6a:	31 d2                	xor    %edx,%edx
  113e6c:	be 06 00 00 00       	mov    $0x6,%esi
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
  113e71:	0f be f8             	movsbl %al,%edi
    params->padding = ConvertPadding(schema_params->padding());
  113e74:	e8 54 fd ff ff       	call   113bcd <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
  113e79:	4c 89 e7             	mov    %r12,%rdi
  113e7c:	89 03                	mov    %eax,(%rbx)
  113e7e:	e8 a1 bc ff ff       	call   10fb24 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
  113e83:	31 d2                	xor    %edx,%edx
  113e85:	be 08 00 00 00       	mov    $0x8,%esi
  113e8a:	4c 89 e7             	mov    %r12,%rdi
    params->stride_width = schema_params->stride_w();
  113e8d:	89 43 04             	mov    %eax,0x4(%rbx)
  113e90:	e8 8f bc ff ff       	call   10fb24 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  113e95:	31 d2                	xor    %edx,%edx
  113e97:	be 0a 00 00 00       	mov    $0xa,%esi
  113e9c:	4c 89 e7             	mov    %r12,%rdi
    params->stride_height = schema_params->stride_h();
  113e9f:	89 43 08             	mov    %eax,0x8(%rbx)
  113ea2:	e8 a5 bc ff ff       	call   10fb4c <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
  113ea7:	be 0c 00 00 00       	mov    $0xc,%esi
  113eac:	4c 89 e7             	mov    %r12,%rdi
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  113eaf:	0f be c0             	movsbl %al,%eax
  113eb2:	8d 50 ff             	lea    -0x1(%rax),%edx
  113eb5:	83 fa 05             	cmp    $0x5,%edx
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
  113eb8:	ba 01 00 00 00       	mov    $0x1,%edx
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  113ebd:	41 0f 43 c6          	cmovae %r14d,%eax
    params->activation =
  113ec1:	89 43 0c             	mov    %eax,0xc(%rbx)
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
  113ec4:	e8 5b bc ff ff       	call   10fb24 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
  113ec9:	ba 01 00 00 00       	mov    $0x1,%edx
  113ece:	be 0e 00 00 00       	mov    $0xe,%esi
  113ed3:	4c 89 e7             	mov    %r12,%rdi
    params->dilation_width_factor = schema_params->dilation_w_factor();
  113ed6:	89 43 10             	mov    %eax,0x10(%rbx)
  113ed9:	e8 46 bc ff ff       	call   10fb24 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->dilation_height_factor = schema_params->dilation_h_factor();
  113ede:	89 43 14             	mov    %eax,0x14(%rbx)
  *builtin_data = params.release();
  113ee1:	49 89 5d 00          	mov    %rbx,0x0(%r13)
  return kTfLiteOk;
  113ee5:	31 c0                	xor    %eax,%eax
}
  113ee7:	5b                   	pop    %rbx
  113ee8:	41 5c                	pop    %r12
  113eea:	41 5d                	pop    %r13
  113eec:	41 5e                	pop    %r14
  113eee:	5d                   	pop    %rbp
  113eef:	c3                   	ret    

0000000000113ef0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                  void** builtin_data) {
  113ef0:	55                   	push   %rbp
  113ef1:	48 89 e5             	mov    %rsp,%rbp
  113ef4:	41 56                	push   %r14
  113ef6:	49 89 f6             	mov    %rsi,%r14
  113ef9:	41 55                	push   %r13
  113efb:	49 89 cd             	mov    %rcx,%r13
  113efe:	41 54                	push   %r12
  113f00:	49 89 fc             	mov    %rdi,%r12
  113f03:	53                   	push   %rbx
  113f04:	48 89 d3             	mov    %rdx,%rbx
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
  113f07:	e8 d4 fc ff ff       	call   113be0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
  113f0c:	48 8b 03             	mov    (%rbx),%rax
  113f0f:	ba 04 00 00 00       	mov    $0x4,%edx
  113f14:	48 89 df             	mov    %rbx,%rdi
  113f17:	be 1c 00 00 00       	mov    $0x1c,%esi
  113f1c:	ff 10                	call   *(%rax)
    return new (allocated_memory) T();
  113f1e:	48 85 c0             	test   %rax,%rax
  113f21:	75 2d                	jne    113f50 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
  113f23:	41 b9 8e f9 11 00    	mov    $0x11f98e,%r9d
  113f29:	b9 a0 f9 11 00       	mov    $0x11f9a0,%ecx
  113f2e:	4c 89 f6             	mov    %r14,%rsi
  113f31:	31 c0                	xor    %eax,%eax
  113f33:	41 b8 a2 04 00 00    	mov    $0x4a2,%r8d
  113f39:	ba d1 f5 11 00       	mov    $0x11f5d1,%edx
  113f3e:	4c 89 f7             	mov    %r14,%rdi
  113f41:	e8 b6 bc ff ff       	call   10fbfc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
  113f46:	b8 01 00 00 00       	mov    $0x1,%eax
  113f4b:	e9 d6 00 00 00       	jmp    114026 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>
  113f50:	45 31 f6             	xor    %r14d,%r14d
  113f53:	48 89 c7             	mov    %rax,%rdi
  113f56:	48 89 c3             	mov    %rax,%rbx
  113f59:	b9 07 00 00 00       	mov    $0x7,%ecx
  113f5e:	44 89 f0             	mov    %r14d,%eax
  113f61:	f3 ab                	rep stos %eax,%es:(%rdi)
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
  113f63:	4c 89 e7             	mov    %r12,%rdi
  113f66:	e8 a3 bb ff ff       	call   10fb0e <_ZNK6tflite8Operator20builtin_options_typeEv>
  113f6b:	83 f8 02             	cmp    $0x2,%eax
  113f6e:	0f 85 ac 00 00 00    	jne    114020 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>
  113f74:	4c 89 e7             	mov    %r12,%rdi
  113f77:	e8 3e bb ff ff       	call   10faba <_ZNK6tflite8Operator15builtin_optionsEv>
  113f7c:	49 89 c4             	mov    %rax,%r12
  if (schema_params != nullptr) {
  113f7f:	48 85 c0             	test   %rax,%rax
  113f82:	0f 84 98 00 00 00    	je     114020 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
  113f88:	31 d2                	xor    %edx,%edx
  113f8a:	be 04 00 00 00       	mov    $0x4,%esi
  113f8f:	48 89 c7             	mov    %rax,%rdi
  113f92:	e8 b5 bb ff ff       	call   10fb4c <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_W, 0);
  113f97:	31 d2                	xor    %edx,%edx
  113f99:	be 06 00 00 00       	mov    $0x6,%esi
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
  113f9e:	0f be f8             	movsbl %al,%edi
    params->padding = ConvertPadding(schema_params->padding());
  113fa1:	e8 27 fc ff ff       	call   113bcd <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
  113fa6:	4c 89 e7             	mov    %r12,%rdi
  113fa9:	89 03                	mov    %eax,(%rbx)
  113fab:	e8 74 bb ff ff       	call   10fb24 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
  113fb0:	31 d2                	xor    %edx,%edx
  113fb2:	be 08 00 00 00       	mov    $0x8,%esi
  113fb7:	4c 89 e7             	mov    %r12,%rdi
    params->stride_width = schema_params->stride_w();
  113fba:	89 43 04             	mov    %eax,0x4(%rbx)
  113fbd:	e8 62 bb ff ff       	call   10fb24 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
  113fc2:	31 d2                	xor    %edx,%edx
  113fc4:	be 0a 00 00 00       	mov    $0xa,%esi
  113fc9:	4c 89 e7             	mov    %r12,%rdi
    params->stride_height = schema_params->stride_h();
  113fcc:	89 43 08             	mov    %eax,0x8(%rbx)
  113fcf:	e8 50 bb ff ff       	call   10fb24 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  113fd4:	31 d2                	xor    %edx,%edx
  113fd6:	be 0c 00 00 00       	mov    $0xc,%esi
  113fdb:	4c 89 e7             	mov    %r12,%rdi
    params->depth_multiplier = schema_params->depth_multiplier();
  113fde:	89 43 0c             	mov    %eax,0xc(%rbx)
  113fe1:	e8 66 bb ff ff       	call   10fb4c <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
  113fe6:	be 0e 00 00 00       	mov    $0xe,%esi
  113feb:	4c 89 e7             	mov    %r12,%rdi
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  113fee:	0f be c0             	movsbl %al,%eax
  113ff1:	8d 50 ff             	lea    -0x1(%rax),%edx
  113ff4:	83 fa 05             	cmp    $0x5,%edx
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
  113ff7:	ba 01 00 00 00       	mov    $0x1,%edx
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  113ffc:	41 0f 43 c6          	cmovae %r14d,%eax
    params->activation =
  114000:	89 43 10             	mov    %eax,0x10(%rbx)
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
  114003:	e8 1c bb ff ff       	call   10fb24 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
  114008:	ba 01 00 00 00       	mov    $0x1,%edx
  11400d:	be 10 00 00 00       	mov    $0x10,%esi
  114012:	4c 89 e7             	mov    %r12,%rdi
    params->dilation_width_factor = schema_params->dilation_w_factor();
  114015:	89 43 14             	mov    %eax,0x14(%rbx)
  114018:	e8 07 bb ff ff       	call   10fb24 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->dilation_height_factor = schema_params->dilation_h_factor();
  11401d:	89 43 18             	mov    %eax,0x18(%rbx)
  *builtin_data = params.release();
  114020:	49 89 5d 00          	mov    %rbx,0x0(%r13)
  return kTfLiteOk;
  114024:	31 c0                	xor    %eax,%eax
}
  114026:	5b                   	pop    %rbx
  114027:	41 5c                	pop    %r12
  114029:	41 5d                	pop    %r13
  11402b:	41 5e                	pop    %r14
  11402d:	5d                   	pop    %rbp
  11402e:	c3                   	ret    

000000000011402f <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                 void** builtin_data) {
  11402f:	55                   	push   %rbp
  114030:	48 89 e5             	mov    %rsp,%rbp
  114033:	41 57                	push   %r15
  114035:	49 89 cf             	mov    %rcx,%r15
  114038:	41 56                	push   %r14
  11403a:	49 89 f6             	mov    %rsi,%r14
  11403d:	41 55                	push   %r13
  11403f:	49 89 d5             	mov    %rdx,%r13
  114042:	41 54                	push   %r12
  114044:	49 89 fc             	mov    %rdi,%r12
  114047:	53                   	push   %rbx
  114048:	41 50                	push   %r8
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
  11404a:	e8 91 fb ff ff       	call   113be0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
  11404f:	49 8b 45 00          	mov    0x0(%r13),%rax
  114053:	ba 04 00 00 00       	mov    $0x4,%edx
  114058:	4c 89 ef             	mov    %r13,%rdi
  11405b:	be 0c 00 00 00       	mov    $0xc,%esi
  114060:	ff 10                	call   *(%rax)
    return new (allocated_memory) T();
  114062:	48 85 c0             	test   %rax,%rax
  114065:	75 2d                	jne    114094 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x65>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
  114067:	41 b9 8e f9 11 00    	mov    $0x11f98e,%r9d
  11406d:	b9 a0 f9 11 00       	mov    $0x11f9a0,%ecx
  114072:	4c 89 f6             	mov    %r14,%rsi
  114075:	31 c0                	xor    %eax,%eax
  114077:	41 b8 1d 05 00 00    	mov    $0x51d,%r8d
  11407d:	ba d1 f5 11 00       	mov    $0x11f5d1,%edx
  114082:	4c 89 f7             	mov    %r14,%rdi
  114085:	e8 72 bb ff ff       	call   10fbfc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
  11408a:	b8 01 00 00 00       	mov    $0x1,%eax
  11408f:	e9 c0 00 00 00       	jmp    114154 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x125>
  114094:	31 c9                	xor    %ecx,%ecx
  114096:	31 f6                	xor    %esi,%esi
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
  114098:	4c 89 e7             	mov    %r12,%rdi
  11409b:	48 89 c3             	mov    %rax,%rbx
  11409e:	48 89 08             	mov    %rcx,(%rax)
  1140a1:	89 70 08             	mov    %esi,0x8(%rax)
  1140a4:	e8 65 ba ff ff       	call   10fb0e <_ZNK6tflite8Operator20builtin_options_typeEv>
  1140a9:	83 f8 08             	cmp    $0x8,%eax
  1140ac:	0f 85 9d 00 00 00    	jne    11414f <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>
  1140b2:	4c 89 e7             	mov    %r12,%rdi
  1140b5:	e8 00 ba ff ff       	call   10faba <_ZNK6tflite8Operator15builtin_optionsEv>
  1140ba:	49 89 c4             	mov    %rax,%r12
  if (schema_params != nullptr) {
  1140bd:	48 85 c0             	test   %rax,%rax
  1140c0:	0f 84 89 00 00 00    	je     11414f <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  1140c6:	31 d2                	xor    %edx,%edx
  1140c8:	be 04 00 00 00       	mov    $0x4,%esi
  1140cd:	48 89 c7             	mov    %rax,%rdi
  1140d0:	e8 77 ba ff ff       	call   10fb4c <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
  1140d5:	be 08 00 00 00       	mov    $0x8,%esi
  1140da:	4c 89 e7             	mov    %r12,%rdi
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  1140dd:	0f be c0             	movsbl %al,%eax
  1140e0:	8d 50 ff             	lea    -0x1(%rax),%edx
  1140e3:	83 fa 05             	cmp    $0x5,%edx
  1140e6:	ba 00 00 00 00       	mov    $0x0,%edx
  1140eb:	0f 43 c2             	cmovae %edx,%eax
    params->activation =
  1140ee:	89 03                	mov    %eax,(%rbx)
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
  1140f0:	e8 f1 b9 ff ff       	call   10fae6 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
  1140f5:	be 0a 00 00 00       	mov    $0xa,%esi
  1140fa:	4c 89 e7             	mov    %r12,%rdi
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
  1140fd:	84 c0                	test   %al,%al
    params->keep_num_dims = schema_params->keep_num_dims();
  1140ff:	0f 95 43 08          	setne  0x8(%rbx)
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
  114103:	31 d2                	xor    %edx,%edx
  114105:	e8 dc b9 ff ff       	call   10fae6 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
  11410a:	be 06 00 00 00       	mov    $0x6,%esi
  11410f:	4c 89 e7             	mov    %r12,%rdi
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
  114112:	84 c0                	test   %al,%al
    params->asymmetric_quantize_inputs =
  114114:	0f 95 43 09          	setne  0x9(%rbx)
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
  114118:	31 d2                	xor    %edx,%edx
  11411a:	e8 2d ba ff ff       	call   10fb4c <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (schema_params->weights_format()) {
  11411f:	84 c0                	test   %al,%al
  114121:	74 2c                	je     11414f <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>
  114123:	fe c8                	dec    %al
  114125:	75 09                	jne    114130 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x101>
        params->weights_format =
  114127:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%rbx)
        break;
  11412e:	eb 1f                	jmp    11414f <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>
        TF_LITE_REPORT_ERROR(error_reporter,
  114130:	4c 89 f7             	mov    %r14,%rdi
  114133:	be 00 fa 11 00       	mov    $0x11fa00,%esi
  114138:	31 c0                	xor    %eax,%eax
  11413a:	e8 35 ba ff ff       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  11413f:	48 89 de             	mov    %rbx,%rsi
  114142:	4c 89 ef             	mov    %r13,%rdi
  114145:	e8 6a b9 ff ff       	call   10fab4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
  11414a:	e9 3b ff ff ff       	jmp    11408a <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5b>
  *builtin_data = params.release();
  11414f:	49 89 1f             	mov    %rbx,(%r15)
  return kTfLiteOk;
  114152:	31 c0                	xor    %eax,%eax
}
  114154:	5a                   	pop    %rdx
  114155:	5b                   	pop    %rbx
  114156:	41 5c                	pop    %r12
  114158:	41 5d                	pop    %r13
  11415a:	41 5e                	pop    %r14
  11415c:	41 5f                	pop    %r15
  11415e:	5d                   	pop    %rbp
  11415f:	c3                   	ret    

0000000000114160 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       BuiltinDataAllocator* allocator, void** builtin_data) {
  114160:	55                   	push   %rbp
  114161:	48 89 e5             	mov    %rsp,%rbp
  114164:	41 56                	push   %r14
  114166:	49 89 f6             	mov    %rsi,%r14
  114169:	41 55                	push   %r13
  11416b:	49 89 cd             	mov    %rcx,%r13
  11416e:	41 54                	push   %r12
  114170:	49 89 fc             	mov    %rdi,%r12
  114173:	53                   	push   %rbx
  114174:	48 89 d3             	mov    %rdx,%rbx
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
  114177:	e8 64 fa ff ff       	call   113be0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
  11417c:	48 8b 03             	mov    (%rbx),%rax
  11417f:	ba 04 00 00 00       	mov    $0x4,%edx
  114184:	48 89 df             	mov    %rbx,%rdi
  114187:	be 28 00 00 00       	mov    $0x28,%esi
  11418c:	ff 10                	call   *(%rax)
    return new (allocated_memory) T();
  11418e:	48 85 c0             	test   %rax,%rax
  114191:	75 2d                	jne    1141c0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
  114193:	41 b9 8e f9 11 00    	mov    $0x11f98e,%r9d
  114199:	b9 a0 f9 11 00       	mov    $0x11f9a0,%ecx
  11419e:	4c 89 f6             	mov    %r14,%rsi
  1141a1:	31 c0                	xor    %eax,%eax
  1141a3:	41 b8 61 06 00 00    	mov    $0x661,%r8d
  1141a9:	ba d1 f5 11 00       	mov    $0x11f5d1,%edx
  1141ae:	4c 89 f7             	mov    %r14,%rdi
  1141b1:	e8 46 ba ff ff       	call   10fbfc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
  1141b6:	b8 01 00 00 00       	mov    $0x1,%eax
  1141bb:	e9 be 00 00 00       	jmp    11427e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11e>
  1141c0:	45 31 f6             	xor    %r14d,%r14d
  1141c3:	48 89 c7             	mov    %rax,%rdi
  1141c6:	48 89 c3             	mov    %rax,%rbx
  1141c9:	b9 0a 00 00 00       	mov    $0xa,%ecx
  1141ce:	44 89 f0             	mov    %r14d,%eax
  1141d1:	f3 ab                	rep stos %eax,%es:(%rdi)
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
  1141d3:	4c 89 e7             	mov    %r12,%rdi
  1141d6:	e8 33 b9 ff ff       	call   10fb0e <_ZNK6tflite8Operator20builtin_options_typeEv>
  1141db:	83 f8 05             	cmp    $0x5,%eax
  1141de:	0f 85 94 00 00 00    	jne    114278 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>
  1141e4:	4c 89 e7             	mov    %r12,%rdi
  1141e7:	e8 ce b8 ff ff       	call   10faba <_ZNK6tflite8Operator15builtin_optionsEv>
  1141ec:	49 89 c4             	mov    %rax,%r12
  if (schema_params != nullptr) {
  1141ef:	48 85 c0             	test   %rax,%rax
  1141f2:	0f 84 80 00 00 00    	je     114278 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
  1141f8:	31 d2                	xor    %edx,%edx
  1141fa:	be 04 00 00 00       	mov    $0x4,%esi
  1141ff:	48 89 c7             	mov    %rax,%rdi
  114202:	e8 45 b9 ff ff       	call   10fb4c <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_W, 0);
  114207:	31 d2                	xor    %edx,%edx
  114209:	be 06 00 00 00       	mov    $0x6,%esi
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
  11420e:	0f be f8             	movsbl %al,%edi
    params->padding = ConvertPadding(schema_params->padding());
  114211:	e8 b7 f9 ff ff       	call   113bcd <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
  114216:	4c 89 e7             	mov    %r12,%rdi
  114219:	89 03                	mov    %eax,(%rbx)
  11421b:	e8 04 b9 ff ff       	call   10fb24 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
  114220:	31 d2                	xor    %edx,%edx
  114222:	be 08 00 00 00       	mov    $0x8,%esi
  114227:	4c 89 e7             	mov    %r12,%rdi
    params->stride_width = schema_params->stride_w();
  11422a:	89 43 04             	mov    %eax,0x4(%rbx)
  11422d:	e8 f2 b8 ff ff       	call   10fb24 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
  114232:	31 d2                	xor    %edx,%edx
  114234:	be 0a 00 00 00       	mov    $0xa,%esi
  114239:	4c 89 e7             	mov    %r12,%rdi
    params->stride_height = schema_params->stride_h();
  11423c:	89 43 08             	mov    %eax,0x8(%rbx)
  11423f:	e8 e0 b8 ff ff       	call   10fb24 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
  114244:	31 d2                	xor    %edx,%edx
  114246:	be 0c 00 00 00       	mov    $0xc,%esi
  11424b:	4c 89 e7             	mov    %r12,%rdi
    params->filter_width = schema_params->filter_width();
  11424e:	89 43 0c             	mov    %eax,0xc(%rbx)
  114251:	e8 ce b8 ff ff       	call   10fb24 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
  114256:	31 d2                	xor    %edx,%edx
  114258:	be 0e 00 00 00       	mov    $0xe,%esi
  11425d:	4c 89 e7             	mov    %r12,%rdi
    params->filter_height = schema_params->filter_height();
  114260:	89 43 10             	mov    %eax,0x10(%rbx)
  114263:	e8 e4 b8 ff ff       	call   10fb4c <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
  114268:	0f be c0             	movsbl %al,%eax
  11426b:	8d 50 ff             	lea    -0x1(%rax),%edx
  11426e:	83 fa 05             	cmp    $0x5,%edx
  114271:	41 0f 43 c6          	cmovae %r14d,%eax
    params->activation =
  114275:	89 43 14             	mov    %eax,0x14(%rbx)
  *builtin_data = params.release();
  114278:	49 89 5d 00          	mov    %rbx,0x0(%r13)
  return kTfLiteOk;
  11427c:	31 c0                	xor    %eax,%eax
}
  11427e:	5b                   	pop    %rbx
  11427f:	41 5c                	pop    %r12
  114281:	41 5d                	pop    %r13
  114283:	41 5e                	pop    %r14
  114285:	5d                   	pop    %rbp
  114286:	c3                   	ret    

0000000000114287 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
  114287:	55                   	push   %rbp
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
  114288:	31 c0                	xor    %eax,%eax
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
  11428a:	48 89 e5             	mov    %rsp,%rbp
  11428d:	41 57                	push   %r15
  11428f:	49 89 f7             	mov    %rsi,%r15
  114292:	41 56                	push   %r14
  114294:	49 89 ce             	mov    %rcx,%r14
  114297:	41 55                	push   %r13
  114299:	49 89 d5             	mov    %rdx,%r13
  11429c:	41 54                	push   %r12
  11429e:	49 89 fc             	mov    %rdi,%r12
  1142a1:	53                   	push   %rbx
  1142a2:	48 83 ec 18          	sub    $0x18,%rsp
  *registration = nullptr;
  1142a6:	48 89 01             	mov    %rax,(%rcx)
  auto builtin_code = GetBuiltinCode(opcode);
  1142a9:	e8 03 01 00 00       	call   1143b1 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
    return data_ - ReadScalar<soffset_t>(data_);
  1142ae:	4c 89 e1             	mov    %r12,%rcx
  1142b1:	89 c3                	mov    %eax,%ebx
  1142b3:	49 63 04 24          	movslq (%r12),%rax
  1142b7:	48 29 c1             	sub    %rax,%rcx
  1142ba:	66 8b 01             	mov    (%rcx),%ax
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
  1142bd:	66 83 f8 08          	cmp    $0x8,%ax
  1142c1:	76 2b                	jbe    1142ee <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x67>
  1142c3:	0f b7 41 08          	movzwl 0x8(%rcx),%eax
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  1142c7:	66 85 c0             	test   %ax,%ax
  1142ca:	75 0f                	jne    1142db <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x54>
  1142cc:	ba 01 00 00 00       	mov    $0x1,%edx
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX) {
  1142d1:	81 fb 91 00 00 00    	cmp    $0x91,%ebx
  1142d7:	7e 0e                	jle    1142e7 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x60>
  1142d9:	eb 1b                	jmp    1142f6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x6f>
  1142db:	81 fb 91 00 00 00    	cmp    $0x91,%ebx
  1142e1:	7f 13                	jg     1142f6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x6f>
  1142e3:	41 8b 14 04          	mov    (%r12,%rax,1),%edx
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
  1142e7:	83 fb 20             	cmp    $0x20,%ebx
  1142ea:	75 27                	jne    114313 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x8c>
  1142ec:	eb 76                	jmp    114364 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xdd>
  if (builtin_code > BuiltinOperator_MAX) {
  1142ee:	81 fb 91 00 00 00    	cmp    $0x91,%ebx
  1142f4:	7e 13                	jle    114309 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x82>
    TF_LITE_REPORT_ERROR(
  1142f6:	89 da                	mov    %ebx,%edx
  1142f8:	be 2a fa 11 00       	mov    $0x11fa2a,%esi
  1142fd:	4c 89 ef             	mov    %r13,%rdi
  114300:	31 c0                	xor    %eax,%eax
  114302:	e8 6d b8 ff ff       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
  114307:	eb 49                	jmp    114352 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xcb>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
  114309:	83 fb 20             	cmp    $0x20,%ebx
  11430c:	74 4b                	je     114359 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd2>
  11430e:	ba 01 00 00 00       	mov    $0x1,%edx
    *registration = op_resolver.FindOp(builtin_code, version);
  114313:	49 8b 07             	mov    (%r15),%rax
  114316:	89 55 cc             	mov    %edx,-0x34(%rbp)
  114319:	89 de                	mov    %ebx,%esi
  11431b:	4c 89 ff             	mov    %r15,%rdi
  11431e:	ff 10                	call   *(%rax)
  TfLiteStatus status = kTfLiteOk;
  114320:	31 c9                	xor    %ecx,%ecx
    if (*registration == nullptr) {
  114322:	8b 55 cc             	mov    -0x34(%rbp),%edx
  114325:	48 85 c0             	test   %rax,%rax
    *registration = op_resolver.FindOp(builtin_code, version);
  114328:	49 89 06             	mov    %rax,(%r14)
    if (*registration == nullptr) {
  11432b:	75 73                	jne    1143a0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x119>
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_ARGS)) return "";
  11432d:	b8 54 e3 11 00       	mov    $0x11e354,%eax
  return (v < low) || (high < v);
  114332:	85 db                	test   %ebx,%ebx
  114334:	78 08                	js     11433e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb7>
  return EnumNamesBuiltinOperator()[index];
  114336:	48 8b 04 dd 60 c8 11 	mov    0x11c860(,%rbx,8),%rax
  11433d:	00 
      TF_LITE_REPORT_ERROR(
  11433e:	89 d1                	mov    %edx,%ecx
  114340:	be 7e fa 11 00       	mov    $0x11fa7e,%esi
  114345:	48 89 c2             	mov    %rax,%rdx
  114348:	4c 89 ef             	mov    %r13,%rdi
  11434b:	31 c0                	xor    %eax,%eax
  11434d:	e8 22 b8 ff ff       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
  114352:	b9 01 00 00 00       	mov    $0x1,%ecx
  114357:	eb 47                	jmp    1143a0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x119>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
  114359:	66 83 f8 06          	cmp    $0x6,%ax
  11435d:	76 30                	jbe    11438f <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x108>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  11435f:	ba 01 00 00 00       	mov    $0x1,%edx
  114364:	0f b7 49 06          	movzwl 0x6(%rcx),%ecx
    auto p = data_ + field_offset;
  114368:	49 01 cc             	add    %rcx,%r12
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
  11436b:	66 85 c9             	test   %cx,%cx
  11436e:	74 1f                	je     11438f <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x108>
  114370:	41 8b 04 24          	mov    (%r12),%eax
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
  } else {
    const char* name = opcode->custom_code()->c_str();
    *registration = op_resolver.FindOp(name, version);
  114374:	4c 89 ff             	mov    %r15,%rdi
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
  114377:	49 8d 74 04 04       	lea    0x4(%r12,%rax,1),%rsi
  11437c:	49 8b 07             	mov    (%r15),%rax
  11437f:	ff 50 08             	call   *0x8(%rax)
    if (*registration == nullptr) {
  114382:	31 c9                	xor    %ecx,%ecx
  114384:	48 85 c0             	test   %rax,%rax
    *registration = op_resolver.FindOp(name, version);
  114387:	49 89 06             	mov    %rax,(%r14)
    if (*registration == nullptr) {
  11438a:	0f 94 c1             	sete   %cl
  11438d:	eb 11                	jmp    1143a0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x119>
    TF_LITE_REPORT_ERROR(
  11438f:	be 20 fb 11 00       	mov    $0x11fb20,%esi
  114394:	4c 89 ef             	mov    %r13,%rdi
  114397:	31 c0                	xor    %eax,%eax
  114399:	e8 d6 b7 ff ff       	call   10fb74 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
  11439e:	eb b2                	jmp    114352 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xcb>
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
  1143a0:	48 83 c4 18          	add    $0x18,%rsp
  1143a4:	89 c8                	mov    %ecx,%eax
  1143a6:	5b                   	pop    %rbx
  1143a7:	41 5c                	pop    %r12
  1143a9:	41 5d                	pop    %r13
  1143ab:	41 5e                	pop    %r14
  1143ad:	41 5f                	pop    %r15
  1143af:	5d                   	pop    %rbp
  1143b0:	c3                   	ret    

00000000001143b1 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
  1143b1:	48 85 ff             	test   %rdi,%rdi
  1143b4:	75 09                	jne    1143bf <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0xe>
BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
  1143b6:	55                   	push   %rbp
  1143b7:	48 89 e5             	mov    %rsp,%rbp
  TFLITE_DCHECK(op_code != nullptr);
  1143ba:	e8 05 da ff ff       	call   111dc4 <abort>
    return data_ - ReadScalar<soffset_t>(data_);
  1143bf:	48 63 17             	movslq (%rdi),%rdx
  1143c2:	48 89 f8             	mov    %rdi,%rax
  1143c5:	48 29 d0             	sub    %rdx,%rax
  1143c8:	66 44 8b 00          	mov    (%rax),%r8w
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
  1143cc:	66 41 83 f8 04       	cmp    $0x4,%r8w
  1143d1:	76 42                	jbe    114415 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x64>
  1143d3:	0f b7 50 04          	movzwl 0x4(%rax),%edx
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  1143d7:	66 85 d2             	test   %dx,%dx
  1143da:	75 18                	jne    1143f4 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x43>
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
  1143dc:	31 d2                	xor    %edx,%edx
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
  1143de:	66 41 83 f8 0a       	cmp    $0xa,%r8w
  1143e3:	76 34                	jbe    114419 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x68>
  1143e5:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  1143e9:	66 85 c0             	test   %ax,%ax
  1143ec:	74 2b                	je     114419 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x68>
  1143ee:	31 f6                	xor    %esi,%esi

  return std::max(
      op_code->builtin_code(),
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
  1143f0:	31 d2                	xor    %edx,%edx
  1143f2:	eb 18                	jmp    11440c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x5b>
  1143f4:	0f be 14 17          	movsbl (%rdi,%rdx,1),%edx
  1143f8:	31 c9                	xor    %ecx,%ecx
  1143fa:	89 d6                	mov    %edx,%esi
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
  1143fc:	66 41 83 f8 0a       	cmp    $0xa,%r8w
  114401:	76 0c                	jbe    11440f <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x5e>
  114403:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
  114407:	66 85 c0             	test   %ax,%ax
  11440a:	74 03                	je     11440f <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x5e>
  11440c:	8b 0c 07             	mov    (%rdi,%rax,1),%ecx
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
  11440f:	39 ce                	cmp    %ecx,%esi
  114411:	7f 06                	jg     114419 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x68>
  114413:	eb 02                	jmp    114417 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x66>
  114415:	31 c9                	xor    %ecx,%ecx
  114417:	89 ca                	mov    %ecx,%edx
}
  114419:	89 d0                	mov    %edx,%eax
  11441b:	c3                   	ret    

000000000011441c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:
// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
  TFLITE_DCHECK(context != nullptr);
  11441c:	48 85 ff             	test   %rdi,%rdi
  11441f:	75 09                	jne    11442a <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0xe>
                                             int index) {
  114421:	55                   	push   %rbp
  114422:	48 89 e5             	mov    %rsp,%rbp
  TFLITE_DCHECK(context != nullptr);
  114425:	e8 9a d9 ff ff       	call   111dc4 <abort>
  TFLITE_DCHECK(node != nullptr);
  11442a:	48 85 f6             	test   %rsi,%rsi
  11442d:	74 f2                	je     114421 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x5>
  return context->GetEvalTensor(context, node->inputs->data[index]);
  11442f:	48 8b 06             	mov    (%rsi),%rax
  114432:	48 63 d2             	movslq %edx,%rdx
  114435:	8b 74 90 04          	mov    0x4(%rax,%rdx,4),%esi
  114439:	ff a7 a8 00 00 00    	jmp    *0xa8(%rdi)

000000000011443f <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
  11443f:	48 85 ff             	test   %rdi,%rdi
  114442:	75 09                	jne    11444d <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0xe>
                                       const TfLiteNode* node, int index) {
  114444:	55                   	push   %rbp
  114445:	48 89 e5             	mov    %rsp,%rbp
  TFLITE_DCHECK(context != nullptr);
  114448:	e8 77 d9 ff ff       	call   111dc4 <abort>
  TFLITE_DCHECK(node != nullptr);
  11444d:	48 85 f6             	test   %rsi,%rsi
  114450:	74 f2                	je     114444 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x5>
  return context->GetEvalTensor(context, node->outputs->data[index]);
  114452:	48 8b 46 08          	mov    0x8(%rsi),%rax
  114456:	48 63 d2             	movslq %edx,%rdx
  114459:	8b 74 90 04          	mov    0x4(%rax,%rdx,4),%esi
  11445d:	ff a7 a8 00 00 00    	jmp    *0xa8(%rdi)

0000000000114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
  114463:	83 3f 04             	cmpl   $0x4,(%rdi)
  114466:	74 09                	je     114471 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xe>
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
  114468:	55                   	push   %rbp
  114469:	48 89 e5             	mov    %rsp,%rbp
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
  11446c:	e8 53 d9 ff ff       	call   111dc4 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
  114471:	85 f6                	test   %esi,%esi
  114473:	78 f3                	js     114468 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x5>
  114475:	48 89 f8             	mov    %rdi,%rax
  114478:	39 77 08             	cmp    %esi,0x8(%rdi)
  11447b:	7e eb                	jle    114468 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x5>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
  11447d:	85 d2                	test   %edx,%edx
  11447f:	78 e7                	js     114468 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x5>
  114481:	8b 7f 0c             	mov    0xc(%rdi),%edi
  114484:	39 d7                	cmp    %edx,%edi
  114486:	7e e0                	jle    114468 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x5>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
  114488:	85 c9                	test   %ecx,%ecx
  11448a:	78 dc                	js     114468 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x5>
  11448c:	44 8b 50 10          	mov    0x10(%rax),%r10d
  114490:	41 39 ca             	cmp    %ecx,%r10d
  114493:	7e d3                	jle    114468 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x5>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
  114495:	45 85 c0             	test   %r8d,%r8d
  114498:	78 ce                	js     114468 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x5>
  11449a:	44 8b 48 14          	mov    0x14(%rax),%r9d
  11449e:	45 39 c1             	cmp    %r8d,%r9d
  1144a1:	7e c5                	jle    114468 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x5>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
  1144a3:	0f af fe             	imul   %esi,%edi
  1144a6:	8d 04 17             	lea    (%rdi,%rdx,1),%eax
  1144a9:	41 0f af c2          	imul   %r10d,%eax
  1144ad:	01 c8                	add    %ecx,%eax
  1144af:	41 0f af c1          	imul   %r9d,%eax
  1144b3:	44 01 c0             	add    %r8d,%eax
}
  1144b6:	c3                   	ret    

00000000001144b7 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcm>:

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  1144b7:	48 8b 47 70          	mov    0x70(%rdi),%rax
  1144bb:	48 85 c0             	test   %rax,%rax
  1144be:	75 09                	jne    1144c9 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcm+0x12>
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  1144c0:	55                   	push   %rbp
  1144c1:	48 89 e5             	mov    %rsp,%rbp
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  1144c4:	e8 fb d8 ff ff       	call   111dc4 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
  1144c9:	be 40 00 00 00       	mov    $0x40,%esi
  1144ce:	ff e0                	jmp    *%rax

00000000001144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
  1144d0:	55                   	push   %rbp
  1144d1:	48 89 e5             	mov    %rsp,%rbp
  1144d4:	41 55                	push   %r13
  1144d6:	41 89 cd             	mov    %ecx,%r13d
  1144d9:	41 54                	push   %r12
  1144db:	49 89 d4             	mov    %rdx,%r12
  1144de:	53                   	push   %rbx
  1144df:	41 50                	push   %r8
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
  1144e1:	e8 ae b7 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  1144e6:	44 89 ee             	mov    %r13d,%esi
  1144e9:	4c 89 e7             	mov    %r12,%rdi
  1144ec:	89 c3                	mov    %eax,%ebx
  1144ee:	e8 a1 b7 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  1144f3:	39 c3                	cmp    %eax,%ebx
  1144f5:	74 05                	je     1144fc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2c>
  1144f7:	e8 c8 d8 ff ff       	call   111dc4 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
}
  1144fc:	5a                   	pop    %rdx
  1144fd:	89 d8                	mov    %ebx,%eax
  1144ff:	5b                   	pop    %rbx
  114500:	41 5c                	pop    %r12
  114502:	41 5d                	pop    %r13
  114504:	5d                   	pop    %rbp
  114505:	c3                   	ret    

0000000000114506 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
  114506:	55                   	push   %rbp
  114507:	48 89 f8             	mov    %rdi,%rax
  11450a:	48 89 e5             	mov    %rsp,%rbp
  11450d:	41 57                	push   %r15
  11450f:	41 56                	push   %r14
  114511:	41 55                	push   %r13
  114513:	41 54                	push   %r12
  114515:	53                   	push   %rbx
  114516:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
  11451d:	8b 5f 14             	mov    0x14(%rdi),%ebx
    int8_t* output_data) {
  114520:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
  const int32_t output_offset = params.output_offset;

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
  114524:	44 8b 70 28          	mov    0x28(%rax),%r14d
  const int pad_width = params.padding_values.width;
  114528:	0f bf 4f 02          	movswl 0x2(%rdi),%ecx
    int8_t* output_data) {
  11452c:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  114530:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  const int dilation_width_factor = params.dilation_width_factor;
  114537:	66 8b 77 0e          	mov    0xe(%rdi),%si
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
  11453b:	89 5d 90             	mov    %ebx,-0x70(%rbp)
  const int stride_width = params.stride_width;
  11453e:	66 8b 5f 0a          	mov    0xa(%rdi),%bx
  const int dilation_width_factor = params.dilation_width_factor;
  114542:	66 89 75 98          	mov    %si,-0x68(%rbp)
  const int dilation_height_factor = params.dilation_height_factor;
  114546:	8b 77 10             	mov    0x10(%rdi),%esi
  const int stride_width = params.stride_width;
  114549:	66 89 5d 9a          	mov    %bx,-0x66(%rbp)
  const int32_t output_activation_max = params.quantized_activation_max;
  11454d:	44 8b 78 2c          	mov    0x2c(%rax),%r15d
  const int dilation_height_factor = params.dilation_height_factor;
  114551:	66 89 75 96          	mov    %si,-0x6a(%rbp)
  const int stride_height = params.stride_height;
  114555:	8b 5f 0c             	mov    0xc(%rdi),%ebx
  const int pad_height = params.padding_values.height;
  114558:	0f bf 77 04          	movswl 0x4(%rdi),%esi
  const int32_t output_offset = params.output_offset;
  11455c:	8b 7f 1c             	mov    0x1c(%rdi),%edi
    int8_t* output_data) {
  11455f:	48 89 95 50 ff ff ff 	mov    %rdx,-0xb0(%rbp)
  114566:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
  const int pad_width = params.padding_values.width;
  11456d:	89 4d 8c             	mov    %ecx,-0x74(%rbp)
  const int pad_height = params.padding_values.height;
  114570:	89 75 88             	mov    %esi,-0x78(%rbp)
  const int32_t output_offset = params.output_offset;
  114573:	89 7d 84             	mov    %edi,-0x7c(%rbp)

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
  114576:	45 39 fe             	cmp    %r15d,%r14d
  114579:	7e 05                	jle    114580 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x7a>
  11457b:	e8 44 d8 ff ff       	call   111dc4 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
  114580:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  114584:	83 38 04             	cmpl   $0x4,(%rax)
  114587:	75 f2                	jne    11457b <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x75>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
  114589:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  11458d:	83 38 04             	cmpl   $0x4,(%rax)
  114590:	75 e9                	jne    11457b <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x75>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
  114592:	48 8b 45 28          	mov    0x28(%rbp),%rax
  114596:	83 38 04             	cmpl   $0x4,(%rax)
  114599:	75 e0                	jne    11457b <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x75>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  11459b:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  11459f:	31 c9                	xor    %ecx,%ecx
  1145a1:	31 f6                	xor    %esi,%esi
  1145a3:	48 89 c2             	mov    %rax,%rdx
  1145a6:	e8 25 ff ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  1145ab:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  1145af:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  1145b3:	b9 03 00 00 00       	mov    $0x3,%ecx
  1145b8:	be 03 00 00 00       	mov    $0x3,%esi
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  1145bd:	89 45 80             	mov    %eax,-0x80(%rbp)
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  1145c0:	e8 0b ff ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  1145c5:	48 8b 55 28          	mov    0x28(%rbp),%rdx
  1145c9:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  1145cd:	31 f6                	xor    %esi,%esi
  1145cf:	b9 03 00 00 00       	mov    $0x3,%ecx
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  1145d4:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  1145da:	e8 f1 fe ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
  1145df:	48 83 7d 20 00       	cmpq   $0x0,0x20(%rbp)
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  1145e4:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  if (bias_data) {
  1145e7:	74 10                	je     1145f9 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf3>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
  1145e9:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  1145ed:	e8 ca b6 ff ff       	call   10fcbc <_ZNK6tflite12RuntimeShape8FlatSizeEv>
  1145f2:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  1145f5:	39 c8                	cmp    %ecx,%eax
  1145f7:	75 82                	jne    11457b <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x75>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
  1145f9:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  1145fd:	be 01 00 00 00       	mov    $0x1,%esi
  114602:	e8 8d b6 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
  114607:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  11460b:	be 02 00 00 00       	mov    $0x2,%esi
  const int input_height = input_shape.Dims(1);
  114610:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  const int input_width = input_shape.Dims(2);
  114616:	e8 79 b6 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
  11461b:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  11461f:	be 01 00 00 00       	mov    $0x1,%esi
  const int input_width = input_shape.Dims(2);
  114624:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  const int filter_height = filter_shape.Dims(1);
  11462a:	e8 65 b6 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
  11462f:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  114633:	be 02 00 00 00       	mov    $0x2,%esi
  const int filter_height = filter_shape.Dims(1);
  114638:	89 85 70 ff ff ff    	mov    %eax,-0x90(%rbp)
  const int filter_width = filter_shape.Dims(2);
  11463e:	e8 51 b6 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
  114643:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  114647:	be 01 00 00 00       	mov    $0x1,%esi
  const int filter_width = filter_shape.Dims(2);
  11464c:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  const int output_height = output_shape.Dims(1);
  114652:	e8 3d b6 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
  114657:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  11465b:	be 02 00 00 00       	mov    $0x2,%esi
  const int output_height = output_shape.Dims(1);
  114660:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
  const int output_width = output_shape.Dims(2);
  114666:	e8 29 b6 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
  11466b:	31 ff                	xor    %edi,%edi
  const int output_width = output_shape.Dims(2);
  11466d:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
  for (int batch = 0; batch < batches; ++batch) {
  114673:	0f bf c3             	movswl %bx,%eax
  114676:	89 7d bc             	mov    %edi,-0x44(%rbp)
  114679:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
  11467f:	8b 5d 80             	mov    -0x80(%rbp),%ebx
  114682:	39 5d bc             	cmp    %ebx,-0x44(%rbp)
  114685:	0f 8d b2 02 00 00    	jge    11493d <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x437>
  11468b:	8b 45 88             	mov    -0x78(%rbp),%eax
  11468e:	f7 d8                	neg    %eax
  114690:	89 45 a0             	mov    %eax,-0x60(%rbp)
    for (int out_y = 0; out_y < output_height; ++out_y) {
  114693:	31 c0                	xor    %eax,%eax
  114695:	89 45 b8             	mov    %eax,-0x48(%rbp)
  114698:	0f bf 45 9a          	movswl -0x66(%rbp),%eax
  11469c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
  1146a2:	8b 9d 68 ff ff ff    	mov    -0x98(%rbp),%ebx
  1146a8:	39 5d b8             	cmp    %ebx,-0x48(%rbp)
  1146ab:	0f 8d 84 02 00 00    	jge    114935 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x42f>
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
  1146b1:	8b 45 8c             	mov    -0x74(%rbp),%eax
  1146b4:	31 f6                	xor    %esi,%esi
  1146b6:	89 75 b4             	mov    %esi,-0x4c(%rbp)
  1146b9:	f7 d8                	neg    %eax
  1146bb:	89 45 9c             	mov    %eax,-0x64(%rbp)
  1146be:	0f bf 45 96          	movswl -0x6a(%rbp),%eax
  1146c2:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  1146c8:	8b 9d 64 ff ff ff    	mov    -0x9c(%rbp),%ebx
  1146ce:	39 5d b4             	cmp    %ebx,-0x4c(%rbp)
  1146d1:	0f 8d 4d 02 00 00    	jge    114924 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x41e>
  1146d7:	45 31 e4             	xor    %r12d,%r12d
  1146da:	44 89 65 a8          	mov    %r12d,-0x58(%rbp)
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
  1146de:	44 39 65 a4          	cmp    %r12d,-0x5c(%rbp)
  1146e2:	0f 8e 2b 02 00 00    	jle    114913 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x40d>
          int32_t acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
  1146e8:	31 d2                	xor    %edx,%edx
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
  1146ea:	44 8b 4d a0          	mov    -0x60(%rbp),%r9d
  1146ee:	44 0f bf 5d 98       	movswl -0x68(%rbp),%r11d
          int32_t acc = 0;
  1146f3:	31 db                	xor    %ebx,%ebx
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
  1146f5:	89 55 b0             	mov    %edx,-0x50(%rbp)
  1146f8:	8b bd 70 ff ff ff    	mov    -0x90(%rbp),%edi
  1146fe:	39 7d b0             	cmp    %edi,-0x50(%rbp)
  114701:	0f 8d fa 00 00 00    	jge    114801 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2fb>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
  114707:	31 c9                	xor    %ecx,%ecx
  114709:	44 8b 55 9c          	mov    -0x64(%rbp),%r10d
  11470d:	89 4d ac             	mov    %ecx,-0x54(%rbp)
  114710:	8b b5 6c ff ff ff    	mov    -0x94(%rbp),%esi
  114716:	39 75 ac             	cmp    %esi,-0x54(%rbp)
  114719:	0f 8d d1 00 00 00    	jge    1147f0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ea>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
  11471f:	44 89 c8             	mov    %r9d,%eax
  114722:	44 09 d0             	or     %r10d,%eax
  114725:	0f 88 ba 00 00 00    	js     1147e5 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2df>
  11472b:	44 39 95 74 ff ff ff 	cmp    %r10d,-0x8c(%rbp)
  114732:	0f 8e ad 00 00 00    	jle    1147e5 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2df>
  114738:	44 39 8d 78 ff ff ff 	cmp    %r9d,-0x88(%rbp)
  11473f:	0f 8e a0 00 00 00    	jle    1147e5 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2df>

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
  114745:	45 31 c0             	xor    %r8d,%r8d
  114748:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  11474e:	41 39 c0             	cmp    %eax,%r8d
  114751:	0f 8d 8e 00 00 00    	jge    1147e5 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2df>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
  114757:	8b 75 bc             	mov    -0x44(%rbp),%esi
  11475a:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  11475e:	44 89 d1             	mov    %r10d,%ecx
  114761:	44 89 ca             	mov    %r9d,%edx
  114764:	44 89 9d 30 ff ff ff 	mov    %r11d,-0xd0(%rbp)
  11476b:	44 89 95 34 ff ff ff 	mov    %r10d,-0xcc(%rbp)
  114772:	44 89 8d 38 ff ff ff 	mov    %r9d,-0xc8(%rbp)
  114779:	44 89 85 3c ff ff ff 	mov    %r8d,-0xc4(%rbp)
  114780:	e8 de fc ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                int32_t filter_val = filter_data[Offset(
  114785:	44 8b 85 3c ff ff ff 	mov    -0xc4(%rbp),%r8d
  11478c:	8b 4d ac             	mov    -0x54(%rbp),%ecx
  11478f:	8b 55 b0             	mov    -0x50(%rbp),%edx
  114792:	8b 75 a8             	mov    -0x58(%rbp),%esi
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
  114795:	4c 63 e8             	movslq %eax,%r13
                int32_t filter_val = filter_data[Offset(
  114798:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  11479c:	e8 c2 fc ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
  1147a1:	48 8b b5 48 ff ff ff 	mov    -0xb8(%rbp),%rsi
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
  1147a8:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
  1147ac:	8b 7d 90             	mov    -0x70(%rbp),%edi
                int32_t filter_val = filter_data[Offset(
  1147af:	48 98                	cltq   
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
  1147b1:	44 8b 85 3c ff ff ff 	mov    -0xc4(%rbp),%r8d
                                                      in_x, in_channel)];
  1147b8:	42 0f be 14 2e       	movsbl (%rsi,%r13,1),%edx
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
  1147bd:	0f be 04 01          	movsbl (%rcx,%rax,1),%eax
  1147c1:	44 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%r9d
  1147c8:	44 8b 95 34 ff ff ff 	mov    -0xcc(%rbp),%r10d
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
  1147cf:	41 ff c0             	inc    %r8d
                acc += filter_val * (input_val + input_offset);
  1147d2:	01 fa                	add    %edi,%edx
  1147d4:	44 8b 9d 30 ff ff ff 	mov    -0xd0(%rbp),%r11d
  1147db:	0f af d0             	imul   %eax,%edx
  1147de:	01 d3                	add    %edx,%ebx
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
  1147e0:	e9 63 ff ff ff       	jmp    114748 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x242>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
  1147e5:	ff 45 ac             	incl   -0x54(%rbp)
  1147e8:	45 01 da             	add    %r11d,%r10d
  1147eb:	e9 20 ff ff ff       	jmp    114710 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20a>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
  1147f0:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
  1147f6:	ff 45 b0             	incl   -0x50(%rbp)
  1147f9:	41 01 c1             	add    %eax,%r9d
  1147fc:	e9 f7 fe ff ff       	jmp    1146f8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f2>
              }
            }
          }

          if (bias_data) {
  114801:	48 83 7d 20 00       	cmpq   $0x0,0x20(%rbp)
  114806:	74 08                	je     114810 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x30a>
            acc += bias_data[out_channel];
  114808:	48 8b 45 20          	mov    0x20(%rbp),%rax
  11480c:	42 03 1c a0          	add    (%rax,%r12,4),%ebx
          }
          acc = MultiplyByQuantizedMultiplier(
  114810:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
  114817:	31 c9                	xor    %ecx,%ecx
  int right_shift = shift > 0 ? 0 : -shift;
  114819:	be 00 00 00 00       	mov    $0x0,%esi
  11481e:	42 8b 14 a0          	mov    (%rax,%r12,4),%edx
  114822:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  int left_shift = shift > 0 ? shift : 0;
  114829:	85 d2                	test   %edx,%edx
  11482b:	4a 63 04 a0          	movslq (%rax,%r12,4),%rax
  11482f:	0f 49 ca             	cmovns %edx,%ecx
  int right_shift = shift > 0 ? 0 : -shift;
  114832:	7f 04                	jg     114838 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x332>
  114834:	89 d6                	mov    %edx,%esi
  114836:	f7 de                	neg    %esi
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
  114838:	d3 e3                	shl    %cl,%ebx
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  11483a:	39 d8                	cmp    %ebx,%eax
  11483c:	0f 94 c1             	sete   %cl
  11483f:	81 fb 00 00 00 80    	cmp    $0x80000000,%ebx
  std::int64_t a_64(a);
  114845:	48 63 db             	movslq %ebx,%rbx
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  114848:	0f 94 c2             	sete   %dl
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
  11484b:	48 0f af d8          	imul   %rax,%rbx
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
  11484f:	48 89 d8             	mov    %rbx,%rax
  114852:	48 c1 f8 3f          	sar    $0x3f,%rax
  114856:	25 01 00 00 80       	and    $0x80000001,%eax
  11485b:	05 00 00 00 40       	add    $0x40000000,%eax
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  114860:	84 d1                	test   %dl,%cl
  114862:	74 1c                	je     114880 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x37a>
// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
  assert(exponent <= 31);
  114864:	83 fe 1f             	cmp    $0x1f,%esi
  114867:	7f 1c                	jg     114885 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x37f>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
  114869:	89 f1                	mov    %esi,%ecx
  11486b:	ba 01 00 00 00       	mov    $0x1,%edx
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  114870:	bf ff ff ff 7f       	mov    $0x7fffffff,%edi
  return a ? BitNot(zero) : zero;
  114875:	31 c0                	xor    %eax,%eax
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
  114877:	48 d3 e2             	shl    %cl,%rdx
  11487a:	ff ca                	dec    %edx
  return a & b;
  11487c:	89 d1                	mov    %edx,%ecx
  11487e:	eb 42                	jmp    1148c2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3bc>
  assert(exponent <= 31);
  114880:	83 fe 1f             	cmp    $0x1f,%esi
  114883:	7e 19                	jle    11489e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x398>
  114885:	b9 57 fb 11 00       	mov    $0x11fb57,%ecx
  11488a:	ba 66 fb 11 00       	mov    $0x11fb66,%edx
  11488f:	be 67 01 00 00       	mov    $0x167,%esi
  114894:	bf bb fb 11 00       	mov    $0x11fbbb,%edi
  114899:	e8 d2 e4 fe ff       	call   102d70 <__assert_func>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  11489e:	48 98                	cltq   
  1148a0:	b9 00 00 00 80       	mov    $0x80000000,%ecx
  1148a5:	48 01 d8             	add    %rbx,%rax
  1148a8:	48 99                	cqto   
  1148aa:	48 f7 f9             	idiv   %rcx
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
  1148ad:	89 f1                	mov    %esi,%ecx
  1148af:	ba 01 00 00 00       	mov    $0x1,%edx
  1148b4:	48 d3 e2             	shl    %cl,%rdx
  1148b7:	ff ca                	dec    %edx
  return a & b;
  1148b9:	89 d1                	mov    %edx,%ecx
  std::int32_t ab_x2_high32 =
  1148bb:	89 c7                	mov    %eax,%edi
  return a & b;
  1148bd:	21 c1                	and    %eax,%ecx
  return a ? BitNot(zero) : zero;
  1148bf:	c1 f8 1f             	sar    $0x1f,%eax
  return a >> offset;
  1148c2:	d1 fa                	sar    %edx
  return a & b;
  1148c4:	83 e0 01             	and    $0x1,%eax
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
  1148c7:	44 8b 45 a8          	mov    -0x58(%rbp),%r8d
  return a + b;
  1148cb:	01 d0                	add    %edx,%eax
  1148cd:	8b 55 b8             	mov    -0x48(%rbp),%edx
  return a ? BitNot(zero) : zero;
  1148d0:	39 c8                	cmp    %ecx,%eax
  return a >> offset;
  1148d2:	89 f1                	mov    %esi,%ecx
  1148d4:	8b 75 bc             	mov    -0x44(%rbp),%esi
  return a & b;
  1148d7:	0f 9c c0             	setl   %al
  return a >> offset;
  1148da:	d3 ff                	sar    %cl,%edi
  1148dc:	8b 4d b4             	mov    -0x4c(%rbp),%ecx
  return a & b;
  1148df:	0f b6 c0             	movzbl %al,%eax
  return a + b;
  1148e2:	01 c7                	add    %eax,%edi
          acc += output_offset;
  1148e4:	8b 45 84             	mov    -0x7c(%rbp),%eax
  1148e7:	01 c7                	add    %eax,%edi
  1148e9:	44 39 f7             	cmp    %r14d,%edi
  1148ec:	41 0f 4c fe          	cmovl  %r14d,%edi
  1148f0:	44 39 ff             	cmp    %r15d,%edi
  1148f3:	89 fb                	mov    %edi,%ebx
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
  1148f5:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  1148f9:	41 0f 4f df          	cmovg  %r15d,%ebx
  1148fd:	49 ff c4             	inc    %r12
  114900:	e8 5e fb ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  114905:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  114909:	48 98                	cltq   
  11490b:	88 1c 01             	mov    %bl,(%rcx,%rax,1)
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
  11490e:	e9 c7 fd ff ff       	jmp    1146da <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1d4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
  114913:	8b 9d 44 ff ff ff    	mov    -0xbc(%rbp),%ebx
  114919:	ff 45 b4             	incl   -0x4c(%rbp)
  11491c:	01 5d 9c             	add    %ebx,-0x64(%rbp)
  11491f:	e9 a4 fd ff ff       	jmp    1146c8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c2>
    for (int out_y = 0; out_y < output_height; ++out_y) {
  114924:	8b 9d 40 ff ff ff    	mov    -0xc0(%rbp),%ebx
  11492a:	ff 45 b8             	incl   -0x48(%rbp)
  11492d:	01 5d a0             	add    %ebx,-0x60(%rbp)
  114930:	e9 6d fd ff ff       	jmp    1146a2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19c>
  for (int batch = 0; batch < batches; ++batch) {
  114935:	ff 45 bc             	incl   -0x44(%rbp)
  114938:	e9 42 fd ff ff       	jmp    11467f <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x179>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
  11493d:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  114944:	5b                   	pop    %rbx
  114945:	41 5c                	pop    %r12
  114947:	41 5d                	pop    %r13
  114949:	41 5e                	pop    %r14
  11494b:	41 5f                	pop    %r15
  11494d:	5d                   	pop    %rbp
  11494e:	c3                   	ret    

000000000011494f <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int16_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const std::int64_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
  11494f:	55                   	push   %rbp
  114950:	48 89 f8             	mov    %rdi,%rax
  114953:	48 89 e5             	mov    %rsp,%rbp
  114956:	41 57                	push   %r15
  114958:	41 56                	push   %r14
  11495a:	41 55                	push   %r13
  11495c:	41 54                	push   %r12
  11495e:	53                   	push   %rbx
  11495f:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  // Get parameters.
  const int stride_width = params.stride_width;
  114966:	66 8b 5f 0a          	mov    0xa(%rdi),%bx
    int16_t* output_data) {
  11496a:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
  const int32_t output_activation_max = params.quantized_activation_max;
  11496e:	44 8b 70 2c          	mov    0x2c(%rax),%r14d
  const int pad_width = params.padding_values.width;
  114972:	0f bf 48 02          	movswl 0x2(%rax),%ecx
    int16_t* output_data) {
  114976:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  const int stride_width = params.stride_width;
  11497d:	66 89 5d 9a          	mov    %bx,-0x66(%rbp)
  const int stride_height = params.stride_height;
  114981:	8b 5f 0c             	mov    0xc(%rdi),%ebx
  const int dilation_width_factor = params.dilation_width_factor;
  114984:	66 8b 7f 0e          	mov    0xe(%rdi),%di
  const int pad_height = params.padding_values.height;
  114988:	0f bf 70 04          	movswl 0x4(%rax),%esi
    int16_t* output_data) {
  11498c:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  114990:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  const int dilation_width_factor = params.dilation_width_factor;
  114997:	66 89 7d 98          	mov    %di,-0x68(%rbp)
  const int dilation_height_factor = params.dilation_height_factor;
  11499b:	8b 78 10             	mov    0x10(%rax),%edi
    int16_t* output_data) {
  11499e:	4c 89 85 50 ff ff ff 	mov    %r8,-0xb0(%rbp)
  const int dilation_height_factor = params.dilation_height_factor;
  1149a5:	66 89 7d 96          	mov    %di,-0x6a(%rbp)
  const int32_t output_activation_min = params.quantized_activation_min;
  1149a9:	8b 78 28             	mov    0x28(%rax),%edi
  const int pad_width = params.padding_values.width;
  1149ac:	89 4d 90             	mov    %ecx,-0x70(%rbp)
  const int pad_height = params.padding_values.height;
  1149af:	89 75 8c             	mov    %esi,-0x74(%rbp)
  const int32_t output_activation_min = params.quantized_activation_min;
  1149b2:	89 7d b8             	mov    %edi,-0x48(%rbp)

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
  1149b5:	44 39 f7             	cmp    %r14d,%edi
  1149b8:	7e 05                	jle    1149bf <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x70>
  1149ba:	e8 05 d4 ff ff       	call   111dc4 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
  1149bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1149c3:	83 38 04             	cmpl   $0x4,(%rax)
  1149c6:	75 f2                	jne    1149ba <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x6b>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
  1149c8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  1149cc:	83 38 04             	cmpl   $0x4,(%rax)
  1149cf:	75 e9                	jne    1149ba <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x6b>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
  1149d1:	48 8b 45 28          	mov    0x28(%rbp),%rax
  1149d5:	83 38 04             	cmpl   $0x4,(%rax)
  1149d8:	75 e0                	jne    1149ba <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x6b>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  1149da:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  1149de:	31 c9                	xor    %ecx,%ecx
  1149e0:	31 f6                	xor    %esi,%esi
  1149e2:	48 89 c2             	mov    %rax,%rdx
  1149e5:	e8 e6 fa ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  1149ea:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  1149ee:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  1149f2:	b9 03 00 00 00       	mov    $0x3,%ecx
  1149f7:	be 03 00 00 00       	mov    $0x3,%esi
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  1149fc:	89 45 88             	mov    %eax,-0x78(%rbp)
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  1149ff:	e8 cc fa ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  114a04:	48 8b 55 28          	mov    0x28(%rbp),%rdx
  114a08:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  114a0c:	31 f6                	xor    %esi,%esi
  114a0e:	b9 03 00 00 00       	mov    $0x3,%ecx
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  114a13:	89 45 84             	mov    %eax,-0x7c(%rbp)
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  114a16:	e8 b5 fa ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
  114a1b:	48 83 7d 20 00       	cmpq   $0x0,0x20(%rbp)
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  114a20:	89 45 a0             	mov    %eax,-0x60(%rbp)
  if (bias_data) {
  114a23:	74 10                	je     114a35 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0xe6>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
  114a25:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  114a29:	e8 8e b2 ff ff       	call   10fcbc <_ZNK6tflite12RuntimeShape8FlatSizeEv>
  114a2e:	8b 4d a0             	mov    -0x60(%rbp),%ecx
  114a31:	39 c8                	cmp    %ecx,%eax
  114a33:	75 85                	jne    1149ba <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x6b>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
  114a35:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  114a39:	be 01 00 00 00       	mov    $0x1,%esi
  114a3e:	e8 51 b2 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
  114a43:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  114a47:	be 02 00 00 00       	mov    $0x2,%esi
  const int input_height = input_shape.Dims(1);
  114a4c:	89 45 80             	mov    %eax,-0x80(%rbp)
  const int input_width = input_shape.Dims(2);
  114a4f:	e8 40 b2 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
  114a54:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  114a58:	be 01 00 00 00       	mov    $0x1,%esi
  const int input_width = input_shape.Dims(2);
  114a5d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
  const int filter_height = filter_shape.Dims(1);
  114a63:	e8 2c b2 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
  114a68:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  114a6c:	be 02 00 00 00       	mov    $0x2,%esi
  const int filter_height = filter_shape.Dims(1);
  114a71:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  const int filter_width = filter_shape.Dims(2);
  114a77:	e8 18 b2 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
  114a7c:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  114a80:	be 01 00 00 00       	mov    $0x1,%esi
  const int filter_width = filter_shape.Dims(2);
  114a85:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  const int output_height = output_shape.Dims(1);
  114a8b:	e8 04 b2 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
  114a90:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  114a94:	be 02 00 00 00       	mov    $0x2,%esi
  const int output_height = output_shape.Dims(1);
  114a99:	89 85 70 ff ff ff    	mov    %eax,-0x90(%rbp)
  const int output_width = output_shape.Dims(2);
  114a9f:	e8 f0 b1 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
  114aa4:	31 f6                	xor    %esi,%esi
  const int output_width = output_shape.Dims(2);
  114aa6:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  for (int batch = 0; batch < batches; ++batch) {
  114aac:	0f bf c3             	movswl %bx,%eax
  114aaf:	89 75 bc             	mov    %esi,-0x44(%rbp)
  114ab2:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
  114ab8:	8b 5d 88             	mov    -0x78(%rbp),%ebx
  114abb:	39 5d bc             	cmp    %ebx,-0x44(%rbp)
  114abe:	0f 8d 8b 02 00 00    	jge    114d4f <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x400>
  114ac4:	8b 45 8c             	mov    -0x74(%rbp),%eax
  114ac7:	f7 d8                	neg    %eax
  114ac9:	89 45 a8             	mov    %eax,-0x58(%rbp)
    for (int out_y = 0; out_y < output_height; ++out_y) {
  114acc:	31 c0                	xor    %eax,%eax
  114ace:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  114ad1:	0f bf 45 9a          	movswl -0x66(%rbp),%eax
  114ad5:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  114adb:	8b 9d 70 ff ff ff    	mov    -0x90(%rbp),%ebx
  114ae1:	39 5d b4             	cmp    %ebx,-0x4c(%rbp)
  114ae4:	0f 8d 5d 02 00 00    	jge    114d47 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x3f8>
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
  114aea:	8b 45 90             	mov    -0x70(%rbp),%eax
  114aed:	31 c9                	xor    %ecx,%ecx
  114aef:	89 4d b0             	mov    %ecx,-0x50(%rbp)
  114af2:	f7 d8                	neg    %eax
  114af4:	89 45 9c             	mov    %eax,-0x64(%rbp)
  114af7:	0f bf 45 96          	movswl -0x6a(%rbp),%eax
  114afb:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
  114b01:	8b 9d 6c ff ff ff    	mov    -0x94(%rbp),%ebx
  114b07:	39 5d b0             	cmp    %ebx,-0x50(%rbp)
  114b0a:	0f 8d 26 02 00 00    	jge    114d36 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x3e7>
  114b10:	31 db                	xor    %ebx,%ebx
  114b12:	89 5d a4             	mov    %ebx,-0x5c(%rbp)
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
  114b15:	39 5d a0             	cmp    %ebx,-0x60(%rbp)
  114b18:	0f 8e 07 02 00 00    	jle    114d25 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x3d6>
          std::int64_t acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
  114b1e:	31 d2                	xor    %edx,%edx
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
  114b20:	44 8b 4d a8          	mov    -0x58(%rbp),%r9d
  114b24:	44 0f bf 5d 98       	movswl -0x68(%rbp),%r11d
          std::int64_t acc = 0;
  114b29:	45 31 e4             	xor    %r12d,%r12d
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
  114b2c:	89 55 ac             	mov    %edx,-0x54(%rbp)
  114b2f:	8b 8d 78 ff ff ff    	mov    -0x88(%rbp),%ecx
  114b35:	39 4d ac             	cmp    %ecx,-0x54(%rbp)
  114b38:	0f 8d f1 00 00 00    	jge    114c2f <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2e0>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
  114b3e:	44 8b 55 9c          	mov    -0x64(%rbp),%r10d
  114b42:	45 31 ff             	xor    %r15d,%r15d
  114b45:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  114b4b:	41 39 c7             	cmp    %eax,%r15d
  114b4e:	0f 8d ca 00 00 00    	jge    114c1e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2cf>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
  114b54:	44 89 c8             	mov    %r9d,%eax
  114b57:	44 09 d0             	or     %r10d,%eax
  114b5a:	0f 88 b3 00 00 00    	js     114c13 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2c4>
  114b60:	44 39 95 7c ff ff ff 	cmp    %r10d,-0x84(%rbp)
  114b67:	0f 8e a6 00 00 00    	jle    114c13 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2c4>
  114b6d:	44 39 4d 80          	cmp    %r9d,-0x80(%rbp)
  114b71:	0f 8e 9c 00 00 00    	jle    114c13 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2c4>

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
  114b77:	45 31 c0             	xor    %r8d,%r8d
  114b7a:	8b 45 84             	mov    -0x7c(%rbp),%eax
  114b7d:	41 39 c0             	cmp    %eax,%r8d
  114b80:	0f 8d 8d 00 00 00    	jge    114c13 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2c4>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
  114b86:	8b 75 bc             	mov    -0x44(%rbp),%esi
  114b89:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  114b8d:	44 89 d1             	mov    %r10d,%ecx
  114b90:	44 89 ca             	mov    %r9d,%edx
  114b93:	44 89 9d 38 ff ff ff 	mov    %r11d,-0xc8(%rbp)
  114b9a:	44 89 95 3c ff ff ff 	mov    %r10d,-0xc4(%rbp)
  114ba1:	44 89 8d 40 ff ff ff 	mov    %r9d,-0xc0(%rbp)
  114ba8:	44 89 85 44 ff ff ff 	mov    %r8d,-0xbc(%rbp)
  114baf:	e8 af f8 ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                int32_t filter_val = filter_data[Offset(
  114bb4:	8b 55 ac             	mov    -0x54(%rbp),%edx
  114bb7:	8b 75 a4             	mov    -0x5c(%rbp),%esi
  114bba:	44 89 f9             	mov    %r15d,%ecx
  114bbd:	44 8b 85 44 ff ff ff 	mov    -0xbc(%rbp),%r8d
  114bc4:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
  114bc8:	4c 63 e8             	movslq %eax,%r13
                int32_t filter_val = filter_data[Offset(
  114bcb:	e8 93 f8 ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
  114bd0:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
  114bd7:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
                int32_t filter_val = filter_data[Offset(
  114bdb:	48 98                	cltq   
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
  114bdd:	44 8b 85 44 ff ff ff 	mov    -0xbc(%rbp),%r8d
  114be4:	44 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%r9d
                                                      in_x, in_channel)];
  114beb:	42 0f bf 14 6e       	movswl (%rsi,%r13,2),%edx
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
  114bf0:	0f be 04 07          	movsbl (%rdi,%rax,1),%eax
  114bf4:	44 8b 95 3c ff ff ff 	mov    -0xc4(%rbp),%r10d
  114bfb:	44 8b 9d 38 ff ff ff 	mov    -0xc8(%rbp),%r11d
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
  114c02:	41 ff c0             	inc    %r8d
                // int64_t += int8_t * int16_t so the highest value we can
                // get from each accumulation is [-127, 127] * ([-32768,
                // 32767] -
                // [-32768, 32767]), which is [-8322945, 8322945].
                // log2(8322945) = 22.99.
                acc += filter_val * input_val;
  114c05:	0f af d0             	imul   %eax,%edx
  114c08:	48 63 d2             	movslq %edx,%rdx
  114c0b:	49 01 d4             	add    %rdx,%r12
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
  114c0e:	e9 67 ff ff ff       	jmp    114b7a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x22b>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
  114c13:	41 ff c7             	inc    %r15d
  114c16:	45 01 da             	add    %r11d,%r10d
  114c19:	e9 27 ff ff ff       	jmp    114b45 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1f6>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
  114c1e:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
  114c24:	ff 45 ac             	incl   -0x54(%rbp)
  114c27:	41 01 c1             	add    %eax,%r9d
  114c2a:	e9 00 ff ff ff       	jmp    114b2f <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1e0>
              }
            }
          }
          if (bias_data) {
  114c2f:	48 83 7d 20 00       	cmpq   $0x0,0x20(%rbp)
  114c34:	74 08                	je     114c3e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x2ef>
            acc += bias_data[out_channel];
  114c36:	48 8b 45 20          	mov    0x20(%rbp),%rax
  114c3a:	4c 03 24 d8          	add    (%rax,%rbx,8),%r12
          }
          int32_t scaled_acc = MultiplyByQuantizedMultiplier(
  114c3e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  114c45:	8b 34 98             	mov    (%rax,%rbx,4),%esi
  114c48:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  114c4f:	8b 04 98             	mov    (%rax,%rbx,4),%eax
  //
  // Assumptions: The following input ranges are assumed
  // - quantize_scale>=0  (the usual range is (1<<30) to (1>>31)-1)
  // - scaling is chosen so final scaled result fits in int32_t
  // - input x is in the range -(1<<47) <= x < (1<<47)
  assert(quantized_multiplier >= 0);
  114c52:	85 c0                	test   %eax,%eax
  114c54:	79 11                	jns    114c67 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x318>
  114c56:	b9 14 fc 11 00       	mov    $0x11fc14,%ecx
  114c5b:	ba 2e fc 11 00       	mov    $0x11fc2e,%edx
  114c60:	be b3 00 00 00       	mov    $0xb3,%esi
  114c65:	eb 17                	jmp    114c7e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x32f>
  assert(shift >= -31 && shift < 8);
  114c67:	8d 56 1f             	lea    0x1f(%rsi),%edx
  114c6a:	83 fa 26             	cmp    $0x26,%edx
  114c6d:	76 19                	jbe    114c88 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x339>
  114c6f:	b9 c4 fc 11 00       	mov    $0x11fcc4,%ecx
  114c74:	ba 2e fc 11 00       	mov    $0x11fc2e,%edx
  114c79:	be b4 00 00 00       	mov    $0xb4,%esi
  114c7e:	bf 73 fc 11 00       	mov    $0x11fc73,%edi
  114c83:	e8 e8 e0 fe ff       	call   102d70 <__assert_func>
  assert(x >= -(static_cast<int64_t>(1) << 47) &&
  114c88:	48 b9 ff ff ff ff ff 	movabs $0xffffffffffff,%rcx
  114c8f:	ff 00 00 
  114c92:	ba 01 00 00 00       	mov    $0x1,%edx
  114c97:	48 c1 e2 2f          	shl    $0x2f,%rdx
  114c9b:	4c 01 e2             	add    %r12,%rdx
  114c9e:	48 39 d1             	cmp    %rdx,%rcx
  114ca1:	73 11                	jae    114cb4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x365>
  114ca3:	b9 de fc 11 00       	mov    $0x11fcde,%ecx
  114ca8:	ba 2e fc 11 00       	mov    $0x11fc2e,%edx
  114cad:	be b5 00 00 00       	mov    $0xb5,%esi
  114cb2:	eb ca                	jmp    114c7e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x32f>
         x < (static_cast<int64_t>(1) << 47));

  int32_t reduced_multiplier = (quantized_multiplier < 0x7FFF0000)
                                   ? ((quantized_multiplier + (1 << 15)) >> 16)
  114cb4:	ba ff 7f 00 00       	mov    $0x7fff,%edx
  114cb9:	3d ff ff fe 7f       	cmp    $0x7ffeffff,%eax
  114cbe:	7f 0b                	jg     114ccb <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x37c>
  114cc0:	05 00 80 00 00       	add    $0x8000,%eax
  114cc5:	c1 f8 10             	sar    $0x10,%eax
  114cc8:	48 63 d0             	movslq %eax,%rdx
                                   : 0x7FFF;
  int total_shift = 15 - shift;
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
  114ccb:	49 0f af d4          	imul   %r12,%rdx
  114ccf:	b9 0e 00 00 00       	mov    $0xe,%ecx
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          scaled_acc = std::max(scaled_acc, output_activation_min);
          scaled_acc = std::min(scaled_acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
  114cd4:	44 8b 45 a4          	mov    -0x5c(%rbp),%r8d
  114cd8:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  114cdc:	29 f1                	sub    %esi,%ecx
  114cde:	b8 01 00 00 00       	mov    $0x1,%eax
  114ce3:	48 d3 e0             	shl    %cl,%rax
  int total_shift = 15 - shift;
  114ce6:	b9 0f 00 00 00       	mov    $0xf,%ecx
  114ceb:	29 f1                	sub    %esi,%ecx
  x = (x * (int64_t)reduced_multiplier) + ((int64_t)1 << (total_shift - 1));
  114ced:	48 01 d0             	add    %rdx,%rax
  114cf0:	8b 75 bc             	mov    -0x44(%rbp),%esi
  114cf3:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  int32_t result = x >> total_shift;
  114cf6:	48 d3 f8             	sar    %cl,%rax
  114cf9:	39 45 b8             	cmp    %eax,-0x48(%rbp)
  114cfc:	0f 4d 45 b8          	cmovge -0x48(%rbp),%eax
  114d00:	8b 4d b0             	mov    -0x50(%rbp),%ecx
  114d03:	44 39 f0             	cmp    %r14d,%eax
  114d06:	41 0f 4f c6          	cmovg  %r14d,%eax
  114d0a:	48 ff c3             	inc    %rbx
  114d0d:	41 89 c4             	mov    %eax,%r12d
  114d10:	e8 4e f7 ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  114d15:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  114d19:	48 98                	cltq   
  114d1b:	66 44 89 24 41       	mov    %r12w,(%rcx,%rax,2)
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
  114d20:	e9 ed fd ff ff       	jmp    114b12 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1c3>
      for (int out_x = 0; out_x < output_width; ++out_x) {
  114d25:	8b 9d 4c ff ff ff    	mov    -0xb4(%rbp),%ebx
  114d2b:	ff 45 b0             	incl   -0x50(%rbp)
  114d2e:	01 5d 9c             	add    %ebx,-0x64(%rbp)
  114d31:	e9 cb fd ff ff       	jmp    114b01 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x1b2>
    for (int out_y = 0; out_y < output_height; ++out_y) {
  114d36:	8b 9d 48 ff ff ff    	mov    -0xb8(%rbp),%ebx
  114d3c:	ff 45 b4             	incl   -0x4c(%rbp)
  114d3f:	01 5d a8             	add    %ebx,-0x58(%rbp)
  114d42:	e9 94 fd ff ff       	jmp    114adb <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x18c>
  for (int batch = 0; batch < batches; ++batch) {
  114d47:	ff 45 bc             	incl   -0x44(%rbp)
  114d4a:	e9 69 fd ff ff       	jmp    114ab8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps+0x169>
              static_cast<int16_t>(scaled_acc);
        }
      }
    }
  }
}
  114d4f:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  114d56:	5b                   	pop    %rbx
  114d57:	41 5c                	pop    %r12
  114d59:	41 5d                	pop    %r13
  114d5b:	41 5e                	pop    %r14
  114d5d:	41 5f                	pop    %r15
  114d5f:	5d                   	pop    %rbp
  114d60:	c3                   	ret    

0000000000114d61 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  114d61:	55                   	push   %rbp
  114d62:	48 89 e5             	mov    %rsp,%rbp
  114d65:	41 57                	push   %r15
  114d67:	41 56                	push   %r14
  114d69:	49 89 fe             	mov    %rdi,%r14
  114d6c:	41 55                	push   %r13
  114d6e:	49 89 f5             	mov    %rsi,%r13
  114d71:	41 54                	push   %r12
  114d73:	53                   	push   %rbx
  114d74:	31 db                	xor    %ebx,%ebx
  114d76:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
  return GetMutableEvalInput(context, node, index);
  114d7d:	8b 15 8d 92 00 00    	mov    0x928d(%rip),%edx        # 11e010 <_ZN6tflite16kConvInputTensorE>
  114d83:	e8 94 f6 ff ff       	call   11441c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  114d88:	8b 15 7e 92 00 00    	mov    0x927e(%rip),%edx        # 11e00c <_ZN6tflite18kConvWeightsTensorE>
  114d8e:	4c 89 ee             	mov    %r13,%rsi
  114d91:	4c 89 f7             	mov    %r14,%rdi
  114d94:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
  114d9b:	e8 7c f6 ff ff       	call   11441c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  114da0:	49 89 c4             	mov    %rax,%r12
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}

inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
  114da3:	49 8b 45 00          	mov    0x0(%r13),%rax
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
  114da7:	83 38 03             	cmpl   $0x3,(%rax)
  114daa:	75 14                	jne    114dc0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f>
  114dac:	8b 15 56 92 00 00    	mov    0x9256(%rip),%edx        # 11e008 <_ZN6tflite15kConvBiasTensorE>
  114db2:	4c 89 ee             	mov    %r13,%rsi
  114db5:	4c 89 f7             	mov    %r14,%rdi
  114db8:	e8 5f f6 ff ff       	call   11441c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  114dbd:	48 89 c3             	mov    %rax,%rbx
  TFLITE_DCHECK(context != nullptr);
  114dc0:	4d 85 f6             	test   %r14,%r14
  114dc3:	75 05                	jne    114dca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x69>
  114dc5:	e8 fa cf ff ff       	call   111dc4 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
  114dca:	49 8b 45 08          	mov    0x8(%r13),%rax
  114dce:	48 63 0d 2f 92 00 00 	movslq 0x922f(%rip),%rcx        # 11e004 <_ZN6tflite17kConvOutputTensorE>
  114dd5:	4c 89 f7             	mov    %r14,%rdi
  114dd8:	8b 74 88 04          	mov    0x4(%rax,%rcx,4),%esi
  114ddc:	41 ff 96 a8 00 00 00 	call   *0xa8(%r14)
          : nullptr;
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);

  TFLITE_DCHECK(node->builtin_data != nullptr);
  114de3:	49 8b 55 28          	mov    0x28(%r13),%rdx
  114de7:	48 89 95 a0 fe ff ff 	mov    %rdx,-0x160(%rbp)
  114dee:	48 85 d2             	test   %rdx,%rdx
  114df1:	74 d2                	je     114dc5 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x64>
  const auto& params =
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
  114df3:	4d 8b 6d 20          	mov    0x20(%r13),%r13
  114df7:	4d 85 ed             	test   %r13,%r13
  114dfa:	74 c9                	je     114dc5 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x64>
  const auto& data = *(static_cast<const OpDataConv*>(node->user_data));

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
  114dfc:	48 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%rdx
  114e03:	8b 48 10             	mov    0x10(%rax),%ecx
  114e06:	44 8b 7a 10          	mov    0x10(%rdx),%r15d
  114e0a:	41 39 cf             	cmp    %ecx,%r15d
  114e0d:	74 2d                	je     114e3c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xdb>
  114e0f:	51                   	push   %rcx
  114e10:	41 b9 2b fd 11 00    	mov    $0x11fd2b,%r9d
  114e16:	41 b8 38 fd 11 00    	mov    $0x11fd38,%r8d
  114e1c:	4c 89 f7             	mov    %r14,%rdi
  114e1f:	41 57                	push   %r15
  114e21:	b9 37 00 00 00       	mov    $0x37,%ecx
  114e26:	ba 44 fd 11 00       	mov    $0x11fd44,%edx
  114e2b:	31 c0                	xor    %eax,%eax
  114e2d:	be da f7 11 00       	mov    $0x11f7da,%esi
  114e32:	41 ff 56 28          	call   *0x28(%r14)
  114e36:	41 58                	pop    %r8
  114e38:	41 59                	pop    %r9
  114e3a:	eb 27                	jmp    114e63 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
  TF_LITE_ENSURE_MSG(
  114e3c:	41 8b 4c 24 10       	mov    0x10(%r12),%ecx
  114e41:	41 39 cf             	cmp    %ecx,%r15d
  114e44:	74 27                	je     114e6d <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10c>
  114e46:	83 f9 09             	cmp    $0x9,%ecx
  114e49:	75 0a                	jne    114e55 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf4>
  114e4b:	41 83 ff 07          	cmp    $0x7,%r15d
  114e4f:	0f 84 1a 05 00 00    	je     11536f <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60e>
  114e55:	be 8f fd 11 00       	mov    $0x11fd8f,%esi
  114e5a:	4c 89 f7             	mov    %r14,%rdi
  114e5d:	31 c0                	xor    %eax,%eax
  114e5f:	41 ff 56 28          	call   *0x28(%r14)
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
  114e63:	b8 01 00 00 00       	mov    $0x1,%eax
  114e68:	e9 1c 07 00 00       	jmp    115589 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x828>
      context,
      input->type == filter->type ||
          (input->type == kTfLiteInt16 && filter->type == kTfLiteInt8),
      "Hybrid models are not supported on TFLite Micro.");

  switch (input->type) {  // Already know in/out types are same.
  114e6d:	41 83 ff 07          	cmp    $0x7,%r15d
  114e71:	0f 84 f8 04 00 00    	je     11536f <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60e>
  114e77:	41 83 ff 09          	cmp    $0x9,%r15d
  114e7b:	0f 84 e8 05 00 00    	je     115469 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x708>
  114e81:	41 83 ff 01          	cmp    $0x1,%r15d
  114e85:	0f 85 db 06 00 00    	jne    115566 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x805>
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
          tflite::micro::GetTensorData<float>(output),
          tflite::micro::GetTensorShape(nullptr), nullptr);
  114e8b:	31 f6                	xor    %esi,%esi
  114e8d:	48 8d bd 38 ff ff ff 	lea    -0xc8(%rbp),%rdi
  114e94:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
  114e9b:	e8 a5 26 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
}

// Returns data for a TfLiteEvalTensor struct.
template <typename T>
T* GetTensorData(TfLiteEvalTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
  114ea0:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
          tflite::micro::GetTensorShape(output),
  114ea7:	48 8d bd 18 ff ff ff 	lea    -0xe8(%rbp),%rdi
  114eae:	48 8b 10             	mov    (%rax),%rdx
  114eb1:	48 89 c6             	mov    %rax,%rsi
  114eb4:	48 89 95 78 fe ff ff 	mov    %rdx,-0x188(%rbp)
  114ebb:	e8 85 26 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
  114ec0:	48 85 db             	test   %rbx,%rbx
  114ec3:	0f 84 fc fe ff ff    	je     114dc5 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x64>
          tflite::micro::GetTensorShape(bias),
  114ec9:	48 89 de             	mov    %rbx,%rsi
  114ecc:	48 8d bd f8 fe ff ff 	lea    -0x108(%rbp),%rdi
  return reinterpret_cast<const T*>(tensor->data.raw);
  114ed3:	4c 8b 33             	mov    (%rbx),%r14
  114ed6:	e8 6a 26 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  114edb:	49 8b 04 24          	mov    (%r12),%rax
          tflite::micro::GetTensorShape(filter),
  114edf:	4c 89 e6             	mov    %r12,%rsi
  114ee2:	48 8d bd d8 fe ff ff 	lea    -0x128(%rbp),%rdi
  114ee9:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  114ef0:	e8 50 26 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  114ef5:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
          ConvParamsFloat(params, data), tflite::micro::GetTensorShape(input),
  114efc:	48 8b b5 a8 fe ff ff 	mov    -0x158(%rbp),%rsi
  114f03:	48 8d bd b8 fe ff ff 	lea    -0x148(%rbp),%rdi
  114f0a:	48 8b 00             	mov    (%rax),%rax
  114f0d:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  114f14:	e8 2c 26 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  114f19:	48 8b b5 a0 fe ff ff 	mov    -0x160(%rbp),%rsi
  114f20:	4c 89 ea             	mov    %r13,%rdx
  114f23:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
  114f27:	e8 a9 06 00 00       	call   1155d5 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
  const int stride_width = params.stride_width;
  114f2c:	66 8b 45 a2          	mov    -0x5e(%rbp),%ax
  const int stride_height = params.stride_height;
  114f30:	8b 5d a4             	mov    -0x5c(%rbp),%ebx
  const int dilation_width_factor = params.dilation_width_factor;
  const int dilation_height_factor = params.dilation_height_factor;
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
  const float output_activation_min = params.float_activation_min;
  114f33:	f3 0f 10 65 c8       	movss  -0x38(%rbp),%xmm4
  const float output_activation_max = params.float_activation_max;
  114f38:	f3 0f 10 6d cc       	movss  -0x34(%rbp),%xmm5
  const int stride_width = params.stride_width;
  114f3d:	66 89 85 76 fe ff ff 	mov    %ax,-0x18a(%rbp)
  const int dilation_width_factor = params.dilation_width_factor;
  114f44:	66 8b 45 a6          	mov    -0x5a(%rbp),%ax
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
  114f48:	83 bd b8 fe ff ff 04 	cmpl   $0x4,-0x148(%rbp)
  const float output_activation_min = params.float_activation_min;
  114f4f:	f3 0f 11 a5 64 fe ff 	movss  %xmm4,-0x19c(%rbp)
  114f56:	ff 
  const int dilation_width_factor = params.dilation_width_factor;
  114f57:	66 89 85 74 fe ff ff 	mov    %ax,-0x18c(%rbp)
  const int dilation_height_factor = params.dilation_height_factor;
  114f5e:	8b 45 a8             	mov    -0x58(%rbp),%eax
  const float output_activation_max = params.float_activation_max;
  114f61:	f3 0f 11 ad 60 fe ff 	movss  %xmm5,-0x1a0(%rbp)
  114f68:	ff 
  const int dilation_height_factor = params.dilation_height_factor;
  114f69:	66 89 85 72 fe ff ff 	mov    %ax,-0x18e(%rbp)
  const int pad_width = params.padding_values.width;
  114f70:	0f bf 45 9a          	movswl -0x66(%rbp),%eax
  114f74:	89 85 6c fe ff ff    	mov    %eax,-0x194(%rbp)
  const int pad_height = params.padding_values.height;
  114f7a:	0f bf 45 9c          	movswl -0x64(%rbp),%eax
  114f7e:	89 85 68 fe ff ff    	mov    %eax,-0x198(%rbp)
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
  114f84:	0f 85 3b fe ff ff    	jne    114dc5 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x64>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
  114f8a:	83 bd d8 fe ff ff 04 	cmpl   $0x4,-0x128(%rbp)
  114f91:	0f 85 2e fe ff ff    	jne    114dc5 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x64>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
  114f97:	83 bd 18 ff ff ff 04 	cmpl   $0x4,-0xe8(%rbp)
  114f9e:	0f 85 21 fe ff ff    	jne    114dc5 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x64>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  114fa4:	31 c9                	xor    %ecx,%ecx
  114fa6:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  114fad:	31 f6                	xor    %esi,%esi
  114faf:	48 8d bd b8 fe ff ff 	lea    -0x148(%rbp),%rdi
  114fb6:	e8 15 f5 ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  114fbb:	b9 03 00 00 00       	mov    $0x3,%ecx
  114fc0:	48 8d 95 d8 fe ff ff 	lea    -0x128(%rbp),%rdx
  114fc7:	be 03 00 00 00       	mov    $0x3,%esi
  114fcc:	48 8d bd b8 fe ff ff 	lea    -0x148(%rbp),%rdi
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  114fd3:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%rbp)
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  114fd9:	e8 f2 f4 ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  114fde:	b9 03 00 00 00       	mov    $0x3,%ecx
  114fe3:	31 f6                	xor    %esi,%esi
  114fe5:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  114fec:	48 8d bd d8 fe ff ff 	lea    -0x128(%rbp),%rdi
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  114ff3:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%rbp)
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  114ff9:	e8 d2 f4 ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  114ffe:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%rbp)
  if (bias_data) {
  115004:	4d 85 f6             	test   %r14,%r14
  115007:	74 18                	je     115021 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
  115009:	48 8d bd f8 fe ff ff 	lea    -0x108(%rbp),%rdi
  115010:	e8 a7 ac ff ff       	call   10fcbc <_ZNK6tflite12RuntimeShape8FlatSizeEv>
  115015:	39 85 84 fe ff ff    	cmp    %eax,-0x17c(%rbp)
  11501b:	0f 85 a4 fd ff ff    	jne    114dc5 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x64>
  }
  const int input_height = input_shape.Dims(1);
  115021:	be 01 00 00 00       	mov    $0x1,%esi
  115026:	48 8d bd b8 fe ff ff 	lea    -0x148(%rbp),%rdi
  11502d:	e8 62 ac ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
  115032:	be 02 00 00 00       	mov    $0x2,%esi
  115037:	48 8d bd b8 fe ff ff 	lea    -0x148(%rbp),%rdi
  const int input_height = input_shape.Dims(1);
  11503e:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%rbp)
  const int input_width = input_shape.Dims(2);
  115044:	e8 4b ac ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
  115049:	be 01 00 00 00       	mov    $0x1,%esi
  11504e:	48 8d bd d8 fe ff ff 	lea    -0x128(%rbp),%rdi
  const int input_width = input_shape.Dims(2);
  115055:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%rbp)
  const int filter_height = filter_shape.Dims(1);
  11505b:	e8 34 ac ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
  115060:	be 02 00 00 00       	mov    $0x2,%esi
  115065:	48 8d bd d8 fe ff ff 	lea    -0x128(%rbp),%rdi
  const int filter_height = filter_shape.Dims(1);
  11506c:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
  const int filter_width = filter_shape.Dims(2);
  115072:	e8 1d ac ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
  115077:	be 01 00 00 00       	mov    $0x1,%esi
  11507c:	48 8d bd 18 ff ff ff 	lea    -0xe8(%rbp),%rdi
  const int filter_width = filter_shape.Dims(2);
  115083:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
  const int output_height = output_shape.Dims(1);
  115089:	e8 06 ac ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
  11508e:	48 8d bd 18 ff ff ff 	lea    -0xe8(%rbp),%rdi
  115095:	be 02 00 00 00       	mov    $0x2,%esi
  const int output_height = output_shape.Dims(1);
  11509a:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%rbp)
  const int output_width = output_shape.Dims(2);
  1150a0:	e8 ef ab ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
  1150a5:	31 ff                	xor    %edi,%edi
  const int output_width = output_shape.Dims(2);
  1150a7:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%rbp)
  for (int batch = 0; batch < batches; ++batch) {
  1150ad:	0f bf c3             	movswl %bx,%eax
  1150b0:	89 bd a8 fe ff ff    	mov    %edi,-0x158(%rbp)
  1150b6:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%rbp)
  1150bc:	8b 8d a8 fe ff ff    	mov    -0x158(%rbp),%ecx
  1150c2:	39 8d 5c fe ff ff    	cmp    %ecx,-0x1a4(%rbp)
  1150c8:	0f 8e 5e 02 00 00    	jle    11532c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5cb>
  1150ce:	8b 85 68 fe ff ff    	mov    -0x198(%rbp),%eax
    for (int out_y = 0; out_y < output_height; ++out_y) {
  1150d4:	45 31 ff             	xor    %r15d,%r15d
  1150d7:	f7 d8                	neg    %eax
  1150d9:	89 85 90 fe ff ff    	mov    %eax,-0x170(%rbp)
  1150df:	0f bf 85 76 fe ff ff 	movswl -0x18a(%rbp),%eax
  1150e6:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%rbp)
  1150ec:	44 39 bd 44 fe ff ff 	cmp    %r15d,-0x1bc(%rbp)
  1150f3:	0f 8e 28 02 00 00    	jle    115321 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c0>
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
  1150f9:	8b 85 6c fe ff ff    	mov    -0x194(%rbp),%eax
  1150ff:	31 f6                	xor    %esi,%esi
  115101:	89 b5 a0 fe ff ff    	mov    %esi,-0x160(%rbp)
  115107:	f7 d8                	neg    %eax
  115109:	89 85 88 fe ff ff    	mov    %eax,-0x178(%rbp)
  11510f:	0f bf 85 72 fe ff ff 	movswl -0x18e(%rbp),%eax
  115116:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%rbp)
  11511c:	8b 9d a0 fe ff ff    	mov    -0x160(%rbp),%ebx
  115122:	39 9d 40 fe ff ff    	cmp    %ebx,-0x1c0(%rbp)
  115128:	0f 8e df 01 00 00    	jle    11530d <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ac>
  11512e:	45 31 e4             	xor    %r12d,%r12d
  115131:	44 89 a5 80 fe ff ff 	mov    %r12d,-0x180(%rbp)
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
  115138:	44 39 a5 84 fe ff ff 	cmp    %r12d,-0x17c(%rbp)
  11513f:	0f 8e b1 01 00 00    	jle    1152f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x595>
  115145:	8b 9d 90 fe ff ff    	mov    -0x170(%rbp),%ebx
  11514b:	44 0f bf 9d 74 fe ff 	movswl -0x18c(%rbp),%r11d
  115152:	ff 
          float total = 0.f;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
  115153:	45 31 ed             	xor    %r13d,%r13d
          float total = 0.f;
  115156:	0f 57 c9             	xorps  %xmm1,%xmm1
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
  115159:	44 39 ad 4c fe ff ff 	cmp    %r13d,-0x1b4(%rbp)
  115160:	0f 8e 1e 01 00 00    	jle    115284 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x523>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
  115166:	31 c9                	xor    %ecx,%ecx
  115168:	44 8b 95 88 fe ff ff 	mov    -0x178(%rbp),%r10d
  11516f:	89 8d 98 fe ff ff    	mov    %ecx,-0x168(%rbp)
  115175:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
  11517b:	39 95 48 fe ff ff    	cmp    %edx,-0x1b8(%rbp)
  115181:	0f 8e ed 00 00 00    	jle    115274 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x513>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
  115187:	44 89 d0             	mov    %r10d,%eax
  11518a:	09 d8                	or     %ebx,%eax
  11518c:	0f 88 d4 00 00 00    	js     115266 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x505>
  115192:	44 39 95 50 fe ff ff 	cmp    %r10d,-0x1b0(%rbp)
  115199:	0f 8e c7 00 00 00    	jle    115266 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x505>
  11519f:	39 9d 54 fe ff ff    	cmp    %ebx,-0x1ac(%rbp)
  1151a5:	0f 8e bb 00 00 00    	jle    115266 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x505>

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
  1151ab:	45 31 c0             	xor    %r8d,%r8d
  1151ae:	44 39 85 58 fe ff ff 	cmp    %r8d,-0x1a8(%rbp)
  1151b5:	0f 8e ab 00 00 00    	jle    115266 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x505>
                float input_value = input_data[Offset(input_shape, batch, in_y,
  1151bb:	8b b5 a8 fe ff ff    	mov    -0x158(%rbp),%esi
  1151c1:	44 89 d1             	mov    %r10d,%ecx
  1151c4:	89 da                	mov    %ebx,%edx
  1151c6:	48 8d bd b8 fe ff ff 	lea    -0x148(%rbp),%rdi
  1151cd:	44 89 9d 10 fe ff ff 	mov    %r11d,-0x1f0(%rbp)
  1151d4:	44 89 95 18 fe ff ff 	mov    %r10d,-0x1e8(%rbp)
  1151db:	f3 0f 11 8d 14 fe ff 	movss  %xmm1,-0x1ec(%rbp)
  1151e2:	ff 
  1151e3:	44 89 85 20 fe ff ff 	mov    %r8d,-0x1e0(%rbp)
  1151ea:	e8 74 f2 ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
  1151ef:	48 8b 8d 30 fe ff ff 	mov    -0x1d0(%rbp),%rcx
                float filter_value = filter_data[Offset(
  1151f6:	44 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%r8d
  1151fd:	44 89 ea             	mov    %r13d,%edx
                float input_value = input_data[Offset(input_shape, batch, in_y,
  115200:	48 98                	cltq   
                float filter_value = filter_data[Offset(
  115202:	8b b5 80 fe ff ff    	mov    -0x180(%rbp),%esi
  115208:	48 8d bd d8 fe ff ff 	lea    -0x128(%rbp),%rdi
                                                      in_x, in_channel)];
  11520f:	f3 0f 10 04 81       	movss  (%rcx,%rax,4),%xmm0
                float filter_value = filter_data[Offset(
  115214:	8b 8d 98 fe ff ff    	mov    -0x168(%rbp),%ecx
                                                      in_x, in_channel)];
  11521a:	f3 0f 11 85 1c fe ff 	movss  %xmm0,-0x1e4(%rbp)
  115221:	ff 
                float filter_value = filter_data[Offset(
  115222:	e8 3c f2 ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
                total += (input_value * filter_value);
  115227:	48 8b 8d 38 fe ff ff 	mov    -0x1c8(%rbp),%rcx
  11522e:	f3 0f 10 85 1c fe ff 	movss  -0x1e4(%rbp),%xmm0
  115235:	ff 
                float filter_value = filter_data[Offset(
  115236:	48 98                	cltq   
                total += (input_value * filter_value);
  115238:	f3 0f 10 8d 14 fe ff 	movss  -0x1ec(%rbp),%xmm1
  11523f:	ff 
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
  115240:	44 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%r8d
                total += (input_value * filter_value);
  115247:	f3 0f 59 04 81       	mulss  (%rcx,%rax,4),%xmm0
  11524c:	44 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%r10d
  115253:	44 8b 9d 10 fe ff ff 	mov    -0x1f0(%rbp),%r11d
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
  11525a:	41 ff c0             	inc    %r8d
                total += (input_value * filter_value);
  11525d:	f3 0f 58 c8          	addss  %xmm0,%xmm1
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
  115261:	e9 48 ff ff ff       	jmp    1151ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x44d>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
  115266:	ff 85 98 fe ff ff    	incl   -0x168(%rbp)
  11526c:	45 01 da             	add    %r11d,%r10d
  11526f:	e9 01 ff ff ff       	jmp    115175 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x414>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
  115274:	8b 85 2c fe ff ff    	mov    -0x1d4(%rbp),%eax
  11527a:	41 ff c5             	inc    %r13d
  11527d:	01 c3                	add    %eax,%ebx
  11527f:	e9 d5 fe ff ff       	jmp    115159 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f8>
              }
            }
          }
          float bias_value = 0.0f;
  115284:	0f 57 c0             	xorps  %xmm0,%xmm0
          if (bias_data) {
  115287:	4d 85 f6             	test   %r14,%r14
  11528a:	74 06                	je     115292 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x531>
            bias_value = bias_data[out_channel];
  11528c:	f3 43 0f 10 04 a6    	movss  (%r14,%r12,4),%xmm0
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
  115292:	f3 0f 58 c1          	addss  %xmm1,%xmm0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
  115296:	8b 8d a0 fe ff ff    	mov    -0x160(%rbp),%ecx
  11529c:	44 89 fa             	mov    %r15d,%edx
  11529f:	49 ff c4             	inc    %r12
  1152a2:	44 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%r8d
  1152a9:	8b b5 a8 fe ff ff    	mov    -0x158(%rbp),%esi
  1152af:	48 8d bd 18 ff ff ff 	lea    -0xe8(%rbp),%rdi
              ActivationFunctionWithMinMax(total + bias_value,
  1152b6:	f3 0f 11 85 98 fe ff 	movss  %xmm0,-0x168(%rbp)
  1152bd:	ff 
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
  1152be:	e8 a0 f1 ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
	return __b;
  1152c3:	f3 0f 10 95 64 fe ff 	movss  -0x19c(%rbp),%xmm2
  1152ca:	ff 
  1152cb:	f3 0f 10 85 98 fe ff 	movss  -0x168(%rbp),%xmm0
  1152d2:	ff 
	return __b;
  1152d3:	f3 0f 10 9d 60 fe ff 	movss  -0x1a0(%rbp),%xmm3
  1152da:	ff 
  1152db:	48 8b 9d 78 fe ff ff 	mov    -0x188(%rbp),%rbx
  1152e2:	48 98                	cltq   
	return __b;
  1152e4:	f3 0f 5f d0          	maxss  %xmm0,%xmm2
	return __b;
  1152e8:	f3 0f 5d da          	minss  %xmm2,%xmm3
  1152ec:	f3 0f 11 1c 83       	movss  %xmm3,(%rbx,%rax,4)
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
  1152f1:	e9 3b fe ff ff       	jmp    115131 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d0>
      for (int out_x = 0; out_x < output_width; ++out_x) {
  1152f6:	8b 9d 28 fe ff ff    	mov    -0x1d8(%rbp),%ebx
  1152fc:	ff 85 a0 fe ff ff    	incl   -0x160(%rbp)
  115302:	01 9d 88 fe ff ff    	add    %ebx,-0x178(%rbp)
  115308:	e9 0f fe ff ff       	jmp    11511c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3bb>
    for (int out_y = 0; out_y < output_height; ++out_y) {
  11530d:	8b 9d 24 fe ff ff    	mov    -0x1dc(%rbp),%ebx
  115313:	41 ff c7             	inc    %r15d
  115316:	01 9d 90 fe ff ff    	add    %ebx,-0x170(%rbp)
  11531c:	e9 cb fd ff ff       	jmp    1150ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38b>
  for (int batch = 0; batch < batches; ++batch) {
  115321:	ff 85 a8 fe ff ff    	incl   -0x158(%rbp)
  115327:	e9 90 fd ff ff       	jmp    1150bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x35b>
  11532c:	48 8d bd b8 fe ff ff 	lea    -0x148(%rbp),%rdi
  115333:	e8 48 a9 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
  115338:	48 8d bd d8 fe ff ff 	lea    -0x128(%rbp),%rdi
  11533f:	e8 3c a9 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
  115344:	48 8d bd f8 fe ff ff 	lea    -0x108(%rbp),%rdi
  11534b:	e8 30 a9 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
  115350:	48 8d bd 18 ff ff ff 	lea    -0xe8(%rbp),%rdi
  115357:	e8 24 a9 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(nullptr), nullptr);
  11535c:	48 8d bd 38 ff ff ff 	lea    -0xc8(%rbp),%rdi
  115363:	e8 18 a9 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
  115368:	31 c0                	xor    %eax,%eax
  11536a:	e9 1a 02 00 00       	jmp    115589 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x828>
          tflite::micro::GetTensorShape(output),
  11536f:	48 89 c6             	mov    %rax,%rsi
  115372:	48 8d bd 58 ff ff ff 	lea    -0xa8(%rbp),%rdi
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
  115379:	4c 8b 38             	mov    (%rax),%r15
  11537c:	e8 c4 21 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  115381:	48 85 db             	test   %rbx,%rbx
  115384:	0f 84 3b fa ff ff    	je     114dc5 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x64>
  return reinterpret_cast<const T*>(tensor->data.raw);
  11538a:	48 8b 0b             	mov    (%rbx),%rcx
          tflite::micro::GetTensorShape(bias),
  11538d:	4c 8d b5 78 ff ff ff 	lea    -0x88(%rbp),%r14
  115394:	48 89 de             	mov    %rbx,%rsi
  115397:	4c 89 f7             	mov    %r14,%rdi
  11539a:	48 89 8d 90 fe ff ff 	mov    %rcx,-0x170(%rbp)
  1153a1:	e8 9f 21 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(filter),
  1153a6:	4c 89 e6             	mov    %r12,%rsi
  1153a9:	48 8d bd 38 ff ff ff 	lea    -0xc8(%rbp),%rdi
  1153b0:	49 8b 1c 24          	mov    (%r12),%rbx
  1153b4:	e8 8c 21 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  1153b9:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
  1153c0:	48 8d bd 18 ff ff ff 	lea    -0xe8(%rbp),%rdi
  1153c7:	4c 8b 00             	mov    (%rax),%r8
  1153ca:	48 89 c6             	mov    %rax,%rsi
  1153cd:	4c 89 85 98 fe ff ff 	mov    %r8,-0x168(%rbp)
  1153d4:	e8 6c 21 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  1153d9:	49 8b 45 30          	mov    0x30(%r13),%rax
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
  1153dd:	4c 89 ea             	mov    %r13,%rdx
  1153e0:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
  1153e4:	48 8b b5 a0 fe ff ff 	mov    -0x160(%rbp),%rsi
  1153eb:	4d 8b 65 28          	mov    0x28(%r13),%r12
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
  1153ef:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
  1153f6:	e8 87 02 00 00       	call   115682 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
      reference_integer_ops::ConvPerChannel(
  1153fb:	48 8d 85 58 ff ff ff 	lea    -0xa8(%rbp),%rax
  115402:	4c 89 e6             	mov    %r12,%rsi
  115405:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
  115409:	52                   	push   %rdx
  11540a:	4c 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%r9
  115411:	41 57                	push   %r15
  115413:	50                   	push   %rax
  115414:	48 8b 8d 90 fe ff ff 	mov    -0x170(%rbp),%rcx
  11541b:	51                   	push   %rcx
  11541c:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
  115423:	41 56                	push   %r14
  115425:	53                   	push   %rbx
  115426:	4c 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%r8
  11542d:	48 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%rdx
  115434:	e8 16 f5 ff ff       	call   11494f <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKsS8_PKaS8_PKxS8_Ps>
  115439:	48 83 c4 30          	add    $0x30,%rsp
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
  11543d:	48 8d bd 18 ff ff ff 	lea    -0xe8(%rbp),%rdi
  115444:	e8 37 a8 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
  115449:	48 8d bd 38 ff ff ff 	lea    -0xc8(%rbp),%rdi
  115450:	e8 2b a8 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
  115455:	4c 89 f7             	mov    %r14,%rdi
  115458:	e8 23 a8 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
  11545d:	48 8d bd 58 ff ff ff 	lea    -0xa8(%rbp),%rdi
  115464:	e9 fa fe ff ff       	jmp    115363 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x602>
          tflite::micro::GetTensorShape(output),
  115469:	48 89 c6             	mov    %rax,%rsi
  11546c:	48 8d bd 78 ff ff ff 	lea    -0x88(%rbp),%rdi
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
  115473:	4c 8b 30             	mov    (%rax),%r14
  115476:	e8 ca 20 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  11547b:	48 85 db             	test   %rbx,%rbx
  11547e:	0f 84 41 f9 ff ff    	je     114dc5 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x64>
  return reinterpret_cast<const T*>(tensor->data.raw);
  115484:	48 8b 0b             	mov    (%rbx),%rcx
          tflite::micro::GetTensorShape(bias),
  115487:	4c 8d bd 58 ff ff ff 	lea    -0xa8(%rbp),%r15
  11548e:	48 89 de             	mov    %rbx,%rsi
  115491:	4c 89 ff             	mov    %r15,%rdi
  115494:	48 89 8d 88 fe ff ff 	mov    %rcx,-0x178(%rbp)
  11549b:	e8 a5 20 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  1154a0:	49 8b 04 24          	mov    (%r12),%rax
          tflite::micro::GetTensorShape(filter),
  1154a4:	4c 89 e6             	mov    %r12,%rsi
  1154a7:	48 8d bd 38 ff ff ff 	lea    -0xc8(%rbp),%rdi
  1154ae:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
  1154b5:	e8 8b 20 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  1154ba:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
  1154c1:	48 8d bd 18 ff ff ff 	lea    -0xe8(%rbp),%rdi
  1154c8:	4c 8b 00             	mov    (%rax),%r8
  1154cb:	48 89 c6             	mov    %rax,%rsi
  1154ce:	4c 89 85 98 fe ff ff 	mov    %r8,-0x168(%rbp)
  1154d5:	e8 6b 20 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
  1154da:	4c 89 ea             	mov    %r13,%rdx
  1154dd:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
  1154e1:	49 8b 5d 30          	mov    0x30(%r13),%rbx
          ConvParamsQuantized(params, data), data.per_channel_output_multiplier,
  1154e5:	48 8b b5 a0 fe ff ff 	mov    -0x160(%rbp),%rsi
  1154ec:	4d 8b 65 28          	mov    0x28(%r13),%r12
  1154f0:	e8 8d 01 00 00       	call   115682 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
      reference_integer_ops::ConvPerChannel(
  1154f5:	48 89 da             	mov    %rbx,%rdx
  1154f8:	4c 89 e6             	mov    %r12,%rsi
  1154fb:	48 8d 7d 98          	lea    -0x68(%rbp),%rdi
  1154ff:	50                   	push   %rax
  115500:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  115507:	4c 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%r9
  11550e:	41 56                	push   %r14
  115510:	50                   	push   %rax
  115511:	48 8b 8d 88 fe ff ff 	mov    -0x178(%rbp),%rcx
  115518:	51                   	push   %rcx
  115519:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
  115520:	41 57                	push   %r15
  115522:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  115529:	50                   	push   %rax
  11552a:	4c 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%r8
  115531:	e8 d0 ef ff ff       	call   114506 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
  115536:	48 83 c4 30          	add    $0x30,%rsp
          data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
  11553a:	48 8d bd 18 ff ff ff 	lea    -0xe8(%rbp),%rdi
  115541:	e8 3a a7 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
  115546:	48 8d bd 38 ff ff ff 	lea    -0xc8(%rbp),%rdi
  11554d:	e8 2e a7 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
  115552:	4c 89 ff             	mov    %r15,%rdi
  115555:	e8 26 a7 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
  11555a:	48 8d bd 78 ff ff ff 	lea    -0x88(%rbp),%rdi
  115561:	e9 fd fd ff ff       	jmp    115363 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x602>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
  115566:	44 89 ff             	mov    %r15d,%edi
  115569:	49 8b 5e 28          	mov    0x28(%r14),%rbx
  11556d:	e8 0f e0 ff ff       	call   113581 <TfLiteTypeGetName>
  115572:	44 89 f9             	mov    %r15d,%ecx
  115575:	be 0b fe 11 00       	mov    $0x11fe0b,%esi
  11557a:	4c 89 f7             	mov    %r14,%rdi
  11557d:	48 89 c2             	mov    %rax,%rdx
  115580:	31 c0                	xor    %eax,%eax
  115582:	ff d3                	call   *%rbx
      return kTfLiteError;
  115584:	e9 da f8 ff ff       	jmp    114e63 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x102>
}
  115589:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  11558d:	5b                   	pop    %rbx
  11558e:	41 5c                	pop    %r12
  115590:	41 5d                	pop    %r13
  115592:	41 5e                	pop    %r14
  115594:	41 5f                	pop    %r15
  115596:	5d                   	pop    %rbp
  115597:	c3                   	ret    

0000000000115598 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
  115598:	48 89 f8             	mov    %rdi,%rax
          /*prepare=*/ConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
  11559b:	be 80 c1 11 00       	mov    $0x11c180,%esi
  1155a0:	b9 10 00 00 00       	mov    $0x10,%ecx
  1155a5:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
}
  1155a7:	c3                   	ret    

00000000001155a8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
  1155a8:	85 c9                	test   %ecx,%ecx
  1155aa:	74 26                	je     1155d2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x2a>

  switch (padding) {
  1155ac:	83 ff 01             	cmp    $0x1,%edi
  1155af:	74 09                	je     1155ba <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x12>
  1155b1:	83 ff 02             	cmp    $0x2,%edi
  1155b4:	74 0a                	je     1155c0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x18>
  1155b6:	31 c9                	xor    %ecx,%ecx
  1155b8:	eb 18                	jmp    1155d2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x2a>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
  1155ba:	8d 44 0e ff          	lea    -0x1(%rsi,%rcx,1),%eax
  1155be:	eb 0d                	jmp    1155cd <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x25>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  1155c0:	ff ca                	dec    %edx
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
  1155c2:	8d 04 31             	lea    (%rcx,%rsi,1),%eax
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  1155c5:	41 0f af d0          	imul   %r8d,%edx
  1155c9:	ff c2                	inc    %edx
      return (image_size + stride - effective_filter_size) / stride;
  1155cb:	29 d0                	sub    %edx,%eax
  1155cd:	99                   	cltd   
  1155ce:	f7 f9                	idiv   %ecx
  1155d0:	89 c1                	mov    %eax,%ecx
    default:
      return 0;
  }
}
  1155d2:	89 c8                	mov    %ecx,%eax
  1155d4:	c3                   	ret    

00000000001155d5 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
const int kConvQuantizedDimension = 0;

// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
  1155d5:	55                   	push   %rbp
  1155d6:	48 89 e5             	mov    %rsp,%rbp
  1155d9:	41 55                	push   %r13
  1155db:	49 89 d5             	mov    %rdx,%r13
  1155de:	41 54                	push   %r12
  1155e0:	49 89 f4             	mov    %rsi,%r12
  1155e3:	53                   	push   %rbx
  1155e4:	48 89 fb             	mov    %rdi,%rbx
  1155e7:	51                   	push   %rcx
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
  1155e8:	8b 46 0c             	mov    0xc(%rsi),%eax
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
  1155eb:	83 f8 01             	cmp    $0x1,%eax
  1155ee:	74 14                	je     115604 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x2f>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
  1155f0:	83 f8 03             	cmp    $0x3,%eax
  1155f3:	74 1c                	je     115611 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x3c>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
  1155f5:	f3 0f 10 0d 1b 8a 00 	movss  0x8a1b(%rip),%xmm1        # 11e018 <_ZN6tflite16kConvInputTensorE+0x8>
  1155fc:	00 
  1155fd:	83 f8 02             	cmp    $0x2,%eax
  115600:	75 05                	jne    115607 <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x32>
  115602:	eb 1a                	jmp    11561e <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x49>
  115604:	0f 57 c9             	xorps  %xmm1,%xmm1
  115607:	f3 0f 10 05 05 8a 00 	movss  0x8a05(%rip),%xmm0        # 11e014 <_ZN6tflite16kConvInputTensorE+0x4>
  11560e:	00 
  11560f:	eb 1d                	jmp    11562e <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x59>
  115611:	f3 0f 10 05 df 89 00 	movss  0x89df(%rip),%xmm0        # 11dff8 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0xc>
  115618:	00 
  115619:	0f 57 c9             	xorps  %xmm1,%xmm1
  11561c:	eb 10                	jmp    11562e <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE+0x59>
  11561e:	f3 0f 10 0d d6 89 00 	movss  0x89d6(%rip),%xmm1        # 11dffc <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x10>
  115625:	00 
  115626:	f3 0f 10 05 d2 89 00 	movss  0x89d2(%rip),%xmm0        # 11e000 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x14>
  11562d:	00 
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
  11562e:	41 8b 3c 24          	mov    (%r12),%edi
    *activation_min = 0;
  115632:	f3 0f 11 4b 30       	movss  %xmm1,0x30(%rbx)
    *activation_max = std::numeric_limits<T>::max();
  115637:	f3 0f 11 43 34       	movss  %xmm0,0x34(%rbx)
  11563c:	e8 6a 1f 00 00       	call   1175ab <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  115641:	88 03                	mov    %al,(%rbx)
  op_params.padding_values.width = data.padding.width;
  115643:	41 8b 45 00          	mov    0x0(%r13),%eax
  115647:	66 89 43 02          	mov    %ax,0x2(%rbx)
  op_params.padding_values.height = data.padding.height;
  11564b:	41 8b 45 04          	mov    0x4(%r13),%eax
  11564f:	66 89 43 04          	mov    %ax,0x4(%rbx)
  op_params.stride_width = params.stride_width;
  115653:	41 8b 44 24 04       	mov    0x4(%r12),%eax
  115658:	66 89 43 0a          	mov    %ax,0xa(%rbx)
  op_params.stride_height = params.stride_height;
  11565c:	41 8b 44 24 08       	mov    0x8(%r12),%eax
  115661:	66 89 43 0c          	mov    %ax,0xc(%rbx)
  op_params.dilation_width_factor = params.dilation_width_factor;
  115665:	41 8b 44 24 10       	mov    0x10(%r12),%eax
  11566a:	66 89 43 0e          	mov    %ax,0xe(%rbx)
  op_params.dilation_height_factor = params.dilation_height_factor;
  11566e:	41 8b 44 24 14       	mov    0x14(%r12),%eax
  115673:	66 89 43 10          	mov    %ax,0x10(%rbx)
  return op_params;
}
  115677:	48 89 d8             	mov    %rbx,%rax
  11567a:	5a                   	pop    %rdx
  11567b:	5b                   	pop    %rbx
  11567c:	41 5c                	pop    %r12
  11567e:	41 5d                	pop    %r13
  115680:	5d                   	pop    %rbp
  115681:	c3                   	ret    

0000000000115682 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
  115682:	55                   	push   %rbp
  115683:	48 89 e5             	mov    %rsp,%rbp
  115686:	41 55                	push   %r13
  115688:	49 89 f5             	mov    %rsi,%r13
  11568b:	41 54                	push   %r12
  11568d:	49 89 d4             	mov    %rdx,%r12
  115690:	53                   	push   %rbx
  115691:	48 89 fb             	mov    %rdi,%rbx
  115694:	50                   	push   %rax
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
  115695:	8b 42 10             	mov    0x10(%rdx),%eax
  115698:	f7 d8                	neg    %eax
  11569a:	89 47 14             	mov    %eax,0x14(%rdi)
  op_params.weights_offset = -data.filter_zero_point;
  11569d:	8b 42 14             	mov    0x14(%rdx),%eax
  1156a0:	f7 d8                	neg    %eax
  1156a2:	89 47 18             	mov    %eax,0x18(%rdi)
  op_params.output_offset = data.output_zero_point;
  1156a5:	48 8b 42 18          	mov    0x18(%rdx),%rax
  1156a9:	48 89 47 1c          	mov    %rax,0x1c(%rdi)
  op_params.output_multiplier = data.output_multiplier;
  op_params.output_shift = -data.output_shift;
  1156ad:	8b 42 20             	mov    0x20(%rdx),%eax
  1156b0:	f7 d8                	neg    %eax
  1156b2:	89 47 24             	mov    %eax,0x24(%rdi)
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
  1156b5:	8b 3e                	mov    (%rsi),%edi
  1156b7:	e8 ef 1e 00 00       	call   1175ab <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  1156bc:	88 03                	mov    %al,(%rbx)
  op_params.padding_values.height = data.padding.height;
  1156be:	41 8b 44 24 04       	mov    0x4(%r12),%eax
  1156c3:	66 89 43 04          	mov    %ax,0x4(%rbx)
  op_params.padding_values.width = data.padding.width;
  1156c7:	41 8b 04 24          	mov    (%r12),%eax
  1156cb:	66 89 43 02          	mov    %ax,0x2(%rbx)
  op_params.stride_height = params.stride_height;
  1156cf:	41 8b 45 08          	mov    0x8(%r13),%eax
  1156d3:	66 89 43 0c          	mov    %ax,0xc(%rbx)
  op_params.stride_width = params.stride_width;
  1156d7:	41 8b 45 04          	mov    0x4(%r13),%eax
  1156db:	66 89 43 0a          	mov    %ax,0xa(%rbx)
  op_params.dilation_height_factor = params.dilation_height_factor;
  1156df:	41 8b 45 14          	mov    0x14(%r13),%eax
  1156e3:	66 89 43 10          	mov    %ax,0x10(%rbx)
  op_params.dilation_width_factor = params.dilation_width_factor;
  1156e7:	41 8b 45 10          	mov    0x10(%r13),%eax
  1156eb:	66 89 43 0e          	mov    %ax,0xe(%rbx)
  op_params.quantized_activation_min = data.output_activation_min;
  1156ef:	49 8b 44 24 38       	mov    0x38(%r12),%rax
  1156f4:	48 89 43 28          	mov    %rax,0x28(%rbx)
  op_params.quantized_activation_max = data.output_activation_max;
  return op_params;
}
  1156f8:	48 89 d8             	mov    %rbx,%rax
  1156fb:	5a                   	pop    %rdx
  1156fc:	5b                   	pop    %rbx
  1156fd:	41 5c                	pop    %r12
  1156ff:	41 5d                	pop    %r13
  115701:	5d                   	pop    %rbp
  115702:	c3                   	ret    

0000000000115703 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
  115703:	55                   	push   %rbp
  115704:	48 89 e5             	mov    %rsp,%rbp
  115707:	41 57                	push   %r15
  115709:	41 56                	push   %r14
  11570b:	41 55                	push   %r13
  11570d:	41 54                	push   %r12
  11570f:	53                   	push   %rbx
  115710:	48 83 ec 38          	sub    $0x38,%rsp
  bool has_bias = node->inputs->size == 3;
  115714:	48 8b 06             	mov    (%rsi),%rax
                                 OpDataConv* data) {
  115717:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11571b:	89 4d b8             	mov    %ecx,-0x48(%rbp)
  11571e:	48 8b 5d 30          	mov    0x30(%rbp),%rbx
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
  115722:	8b 00                	mov    (%rax),%eax
                                 OpDataConv* data) {
  115724:	44 89 45 b4          	mov    %r8d,-0x4c(%rbp)
  115728:	44 89 4d b0          	mov    %r9d,-0x50(%rbp)
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
  11572c:	83 e8 02             	sub    $0x2,%eax
  11572f:	83 f8 01             	cmp    $0x1,%eax
  115732:	76 1a                	jbe    11574e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4b>
  115734:	41 b8 27 fe 11 00    	mov    $0x11fe27,%r8d
  11573a:	b9 56 00 00 00       	mov    $0x56,%ecx
  11573f:	ba 4b fe 11 00       	mov    $0x11fe4b,%edx
  115744:	be d1 f5 11 00       	mov    $0x11f5d1,%esi
  115749:	e9 3f 01 00 00       	jmp    11588d <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18a>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
  11574e:	48 8b 46 08          	mov    0x8(%rsi),%rax
  115752:	49 89 f4             	mov    %rsi,%r12
  115755:	8b 00                	mov    (%rax),%eax
  115757:	83 f8 01             	cmp    $0x1,%eax
  11575a:	74 33                	je     11578f <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x8c>
  11575c:	6a 01                	push   $0x1
  11575e:	b9 57 00 00 00       	mov    $0x57,%ecx
  115763:	ba 4b fe 11 00       	mov    $0x11fe4b,%edx
  115768:	41 b9 48 02 12 00    	mov    $0x120248,%r9d
  11576e:	50                   	push   %rax
  11576f:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  115773:	41 b8 9d fe 11 00    	mov    $0x11fe9d,%r8d
  115779:	be da f7 11 00       	mov    $0x11f7da,%esi
  11577e:	31 c0                	xor    %eax,%eax
  115780:	ff 57 28             	call   *0x28(%rdi)
  115783:	5a                   	pop    %rdx
  115784:	59                   	pop    %rcx
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
  115785:	b8 01 00 00 00       	mov    $0x1,%eax
  11578a:	e9 a5 01 00 00       	jmp    115934 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x231>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
  11578f:	8b 42 14             	mov    0x14(%rdx),%eax
      params.dilation_width_factor, height, width, filter_height, filter_width,
  115792:	44 8b 6a 10          	mov    0x10(%rdx),%r13d
  115796:	49 89 d7             	mov    %rdx,%r15
  auto padding = params.padding;
  115799:	8b 3a                	mov    (%rdx),%edi
      params.stride_height, params.stride_width, params.dilation_height_factor,
  11579b:	44 8b 72 08          	mov    0x8(%rdx),%r14d
  11579f:	89 45 c0             	mov    %eax,-0x40(%rbp)
  1157a2:	8b 42 04             	mov    0x4(%rdx),%eax

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
  1157a5:	45 89 e8             	mov    %r13d,%r8d
  1157a8:	8b 55 b0             	mov    -0x50(%rbp),%edx
  1157ab:	8b 75 b8             	mov    -0x48(%rbp),%esi
  1157ae:	89 7d a8             	mov    %edi,-0x58(%rbp)
  1157b1:	89 c1                	mov    %eax,%ecx
  1157b3:	89 45 bc             	mov    %eax,-0x44(%rbp)
  1157b6:	e8 ed fd ff ff       	call   1155a8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
  1157bb:	8b 55 10             	mov    0x10(%rbp),%edx
  1157be:	8b 75 b4             	mov    -0x4c(%rbp),%esi
  1157c1:	44 89 f1             	mov    %r14d,%ecx
  1157c4:	8b 7d a8             	mov    -0x58(%rbp),%edi
  1157c7:	44 8b 45 c0          	mov    -0x40(%rbp),%r8d
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
  1157cb:	89 45 ac             	mov    %eax,-0x54(%rbp)
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
  1157ce:	e8 d5 fd ff ff       	call   1155a8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  1157d3:	8b 75 10             	mov    0x10(%rbp),%esi
      ((out_size - 1) * stride + effective_filter_size - in_size);
  1157d6:	8b 7d bc             	mov    -0x44(%rbp),%edi
  total_padding = total_padding > 0 ? total_padding : 0;
  1157d9:	b9 00 00 00 00       	mov    $0x0,%ecx
      ((out_size - 1) * stride + effective_filter_size - in_size);
  1157de:	ff c8                	dec    %eax
  1157e0:	41 0f af c6          	imul   %r14d,%eax
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  1157e4:	8d 56 ff             	lea    -0x1(%rsi),%edx
  1157e7:	8b 75 c0             	mov    -0x40(%rbp),%esi
  1157ea:	0f af d6             	imul   %esi,%edx
  int total_padding =
  1157ed:	8b 75 b4             	mov    -0x4c(%rbp),%esi
      ((out_size - 1) * stride + effective_filter_size - in_size);
  1157f0:	8d 44 02 01          	lea    0x1(%rdx,%rax,1),%eax
  total_padding = total_padding > 0 ? total_padding : 0;
  1157f4:	ba 00 00 00 00       	mov    $0x0,%edx
  int total_padding =
  1157f9:	29 f0                	sub    %esi,%eax
  1157fb:	8b 75 b8             	mov    -0x48(%rbp),%esi
  total_padding = total_padding > 0 ? total_padding : 0;
  1157fe:	0f 48 c2             	cmovs  %edx,%eax
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  115801:	8b 55 b0             	mov    -0x50(%rbp),%edx
  115804:	ff ca                	dec    %edx
  115806:	41 0f af d5          	imul   %r13d,%edx
      ((out_size - 1) * stride + effective_filter_size - in_size);
  11580a:	44 8b 6d ac          	mov    -0x54(%rbp),%r13d
  11580e:	41 ff cd             	dec    %r13d
  115811:	44 0f af ef          	imul   %edi,%r13d
      padding, &out_height, &out_width);

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
  115815:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  115819:	42 8d 54 2a 01       	lea    0x1(%rdx,%r13,1),%edx
  int total_padding =
  11581e:	29 f2                	sub    %esi,%edx
  115820:	4c 89 e6             	mov    %r12,%rsi
  total_padding = total_padding > 0 ? total_padding : 0;
  115823:	0f 48 d1             	cmovs  %ecx,%edx
  return total_padding / 2;
  115826:	89 d1                	mov    %edx,%ecx
  *offset = total_padding % 2;
  115828:	83 e2 01             	and    $0x1,%edx
  return total_padding / 2;
  11582b:	d1 f9                	sar    %ecx
  *offset = total_padding % 2;
  11582d:	89 53 08             	mov    %edx,0x8(%rbx)
  115830:	31 d2                	xor    %edx,%edx
  return total_padding / 2;
  115832:	89 0b                	mov    %ecx,(%rbx)
  115834:	89 c1                	mov    %eax,%ecx
  *offset = total_padding % 2;
  115836:	83 e0 01             	and    $0x1,%eax
  return total_padding / 2;
  115839:	d1 f9                	sar    %ecx
  *offset = total_padding % 2;
  11583b:	89 43 0c             	mov    %eax,0xc(%rbx)
  return total_padding / 2;
  11583e:	89 4b 04             	mov    %ecx,0x4(%rbx)
  115841:	e8 7d de ff ff       	call   1136c3 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  115846:	49 89 c5             	mov    %rax,%r13
  TF_LITE_ENSURE(context, input != nullptr);
  115849:	48 85 c0             	test   %rax,%rax
  11584c:	75 0d                	jne    11585b <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x158>
  11584e:	41 b8 b1 fe 11 00    	mov    $0x11feb1,%r8d
  115854:	b9 61 00 00 00       	mov    $0x61,%ecx
  115859:	eb 24                	jmp    11587f <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x17c>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
  11585b:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  11585f:	ba 01 00 00 00       	mov    $0x1,%edx
  115864:	4c 89 e6             	mov    %r12,%rsi
  115867:	e8 57 de ff ff       	call   1136c3 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  11586c:	49 89 c6             	mov    %rax,%r14
  TF_LITE_ENSURE(context, filter != nullptr);
  11586f:	48 85 c0             	test   %rax,%rax
  115872:	75 23                	jne    115897 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x194>
  115874:	41 b8 c2 fe 11 00    	mov    $0x11fec2,%r8d
  11587a:	b9 63 00 00 00       	mov    $0x63,%ecx
  11587f:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  115883:	ba 4b fe 11 00       	mov    $0x11fe4b,%edx
  115888:	be d1 f5 11 00       	mov    $0x11f5d1,%esi
  11588d:	31 c0                	xor    %eax,%eax
  11588f:	ff 57 28             	call   *0x28(%rdi)
  115892:	e9 ee fe ff ff       	jmp    115785 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x82>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
  115897:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  11589b:	4c 89 e6             	mov    %r12,%rsi
  11589e:	ba 02 00 00 00       	mov    $0x2,%edx
  1158a3:	e8 4e de ff ff       	call   1136f6 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
  1158a8:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  1158ac:	31 d2                	xor    %edx,%edx
  1158ae:	4c 89 e6             	mov    %r12,%rsi
      GetOptionalInputTensor(context, node, kConvBiasTensor);
  1158b1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
  1158b5:	e8 11 de ff ff       	call   1136cb <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
  1158ba:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  1158be:	48 85 c0             	test   %rax,%rax
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
  1158c1:	49 89 c4             	mov    %rax,%r12
  TF_LITE_ENSURE(context, output != nullptr);
  1158c4:	75 0d                	jne    1158d3 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d0>
  1158c6:	41 b8 d4 fe 11 00    	mov    $0x11fed4,%r8d
  1158cc:	b9 67 00 00 00       	mov    $0x67,%ecx
  1158d1:	eb ac                	jmp    11587f <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x17c>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
  1158d3:	83 7d 28 01          	cmpl   $0x1,0x28(%rbp)
  1158d7:	75 1a                	jne    1158f3 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier, data->per_channel_output_shift,
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
  1158d9:	41 8b 45 1c          	mov    0x1c(%r13),%eax
  1158dd:	89 43 10             	mov    %eax,0x10(%rbx)
  data->filter_zero_point = filter->params.zero_point;
  1158e0:	41 8b 46 1c          	mov    0x1c(%r14),%eax
  1158e4:	89 43 14             	mov    %eax,0x14(%rbx)
  data->output_zero_point = output->params.zero_point;
  1158e7:	41 8b 44 24 1c       	mov    0x1c(%r12),%eax
  1158ec:	89 43 18             	mov    %eax,0x18(%rbx)

  return kTfLiteOk;
  1158ef:	31 c0                	xor    %eax,%eax
  1158f1:	eb 41                	jmp    115934 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x231>
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
  1158f3:	50                   	push   %rax
    int output_channels = filter->dims->data[kConvQuantizedDimension];
  1158f4:	49 8b 46 10          	mov    0x10(%r14),%rax
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
  1158f8:	4d 8d 4f 0c          	lea    0xc(%r15),%r9
  1158fc:	4d 89 e0             	mov    %r12,%r8
  1158ff:	4c 89 f2             	mov    %r14,%rdx
  115902:	4c 89 ee             	mov    %r13,%rsi
  115905:	8b 40 04             	mov    0x4(%rax),%eax
  115908:	50                   	push   %rax
  115909:	48 8d 43 3c          	lea    0x3c(%rbx),%rax
  11590d:	ff 73 30             	push   0x30(%rbx)
  115910:	ff 73 28             	push   0x28(%rbx)
  115913:	50                   	push   %rax
  115914:	48 8d 43 38          	lea    0x38(%rbx),%rax
  115918:	50                   	push   %rax
  115919:	48 8d 43 20          	lea    0x20(%rbx),%rax
  11591d:	50                   	push   %rax
  11591e:	48 8d 43 1c          	lea    0x1c(%rbx),%rax
  115922:	50                   	push   %rax
  115923:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  115927:	e8 e6 df ff ff       	call   113912 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
  11592c:	48 83 c4 40          	add    $0x40,%rsp
  115930:	85 c0                	test   %eax,%eax
  115932:	74 a5                	je     1158d9 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d6>
}
  115934:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  115938:	5b                   	pop    %rbx
  115939:	41 5c                	pop    %r12
  11593b:	41 5d                	pop    %r13
  11593d:	41 5e                	pop    %r14
  11593f:	41 5f                	pop    %r15
  115941:	5d                   	pop    %rbp
  115942:	c3                   	ret    

0000000000115943 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ConvPrepare(TfLiteContext* context, TfLiteNode* node) {
  115943:	55                   	push   %rbp
  115944:	48 89 e5             	mov    %rsp,%rbp
  115947:	41 57                	push   %r15
  115949:	41 56                	push   %r14
  11594b:	41 55                	push   %r13
  11594d:	41 54                	push   %r12
  11594f:	53                   	push   %rbx
  115950:	48 83 ec 38          	sub    $0x38,%rsp
  TFLITE_DCHECK(node->user_data != nullptr);
  115954:	4c 8b 66 20          	mov    0x20(%rsi),%r12
  115958:	4d 85 e4             	test   %r12,%r12
  11595b:	75 05                	jne    115962 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1f>
  11595d:	e8 62 c4 ff ff       	call   111dc4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
  115962:	48 8b 46 28          	mov    0x28(%rsi),%rax
  115966:	48 89 f3             	mov    %rsi,%rbx
  115969:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  11596d:	48 85 c0             	test   %rax,%rax
  115970:	74 eb                	je     11595d <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
  115972:	31 d2                	xor    %edx,%edx
  115974:	49 89 ff             	mov    %rdi,%r15
  115977:	e8 4f dd ff ff       	call   1136cb <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  11597c:	49 89 c5             	mov    %rax,%r13
  TF_LITE_ENSURE(context, output != nullptr);
  11597f:	48 85 c0             	test   %rax,%rax
  115982:	75 0d                	jne    115991 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x4e>
  115984:	41 b8 d4 fe 11 00    	mov    $0x11fed4,%r8d
  11598a:	b9 86 00 00 00       	mov    $0x86,%ecx
  11598f:	eb 20                	jmp    1159b1 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
  115991:	31 d2                	xor    %edx,%edx
  115993:	48 89 de             	mov    %rbx,%rsi
  115996:	4c 89 ff             	mov    %r15,%rdi
  115999:	e8 25 dd ff ff       	call   1136c3 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  11599e:	49 89 c6             	mov    %rax,%r14
  TF_LITE_ENSURE(context, input != nullptr);
  1159a1:	48 85 c0             	test   %rax,%rax
  1159a4:	75 28                	jne    1159ce <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x8b>
  1159a6:	41 b8 b1 fe 11 00    	mov    $0x11feb1,%r8d
  1159ac:	b9 88 00 00 00       	mov    $0x88,%ecx
  1159b1:	ba 4b fe 11 00       	mov    $0x11fe4b,%edx
  1159b6:	be d1 f5 11 00       	mov    $0x11f5d1,%esi
  1159bb:	4c 89 ff             	mov    %r15,%rdi
  1159be:	31 c0                	xor    %eax,%eax
  1159c0:	41 ff 57 28          	call   *0x28(%r15)
  TF_LITE_ENSURE(context, output != nullptr);
  1159c4:	b8 01 00 00 00       	mov    $0x1,%eax
  1159c9:	e9 61 01 00 00       	jmp    115b2f <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1ec>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
  1159ce:	ba 01 00 00 00       	mov    $0x1,%edx
  1159d3:	48 89 de             	mov    %rbx,%rsi
  1159d6:	4c 89 ff             	mov    %r15,%rdi
  1159d9:	e8 e5 dc ff ff       	call   1136c3 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  1159de:	48 89 c2             	mov    %rax,%rdx
  TF_LITE_ENSURE(context, filter != nullptr);
  1159e1:	48 85 c0             	test   %rax,%rax
  1159e4:	75 0d                	jne    1159f3 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0xb0>
  1159e6:	41 b8 c2 fe 11 00    	mov    $0x11fec2,%r8d
  1159ec:	b9 8a 00 00 00       	mov    $0x8a,%ecx
  1159f1:	eb be                	jmp    1159b1 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x6e>

  const int input_width = input->dims->data[2];
  1159f3:	49 8b 46 10          	mov    0x10(%r14),%rax
  const int input_height = input->dims->data[1];
  const int filter_width = filter->dims->data[2];
  const int filter_height = filter->dims->data[1];
  const int output_width = output->dims->data[2];
  1159f7:	49 8b 75 10          	mov    0x10(%r13),%rsi
  const int filter_width = filter->dims->data[2];
  1159fb:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  const int output_height = output->dims->data[1];

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
  1159ff:	4c 89 ff             	mov    %r15,%rdi
  const int input_width = input->dims->data[2];
  115a02:	8b 48 0c             	mov    0xc(%rax),%ecx
  const int input_height = input->dims->data[1];
  115a05:	44 8b 40 08          	mov    0x8(%rax),%r8d
  const int filter_width = filter->dims->data[2];
  115a09:	48 8b 42 10          	mov    0x10(%rdx),%rax
  const int output_height = output->dims->data[1];
  115a0d:	44 8b 5e 08          	mov    0x8(%rsi),%r11d
  const int output_width = output->dims->data[2];
  115a11:	44 8b 6e 0c          	mov    0xc(%rsi),%r13d
  const int input_width = input->dims->data[2];
  115a15:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
          context, num_channels * sizeof(int32_t)));
  115a18:	48 63 70 04          	movslq 0x4(%rax),%rsi
  const int filter_width = filter->dims->data[2];
  115a1c:	44 8b 48 0c          	mov    0xc(%rax),%r9d
  const int input_height = input->dims->data[1];
  115a20:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
  const int filter_height = filter->dims->data[1];
  115a24:	44 8b 50 08          	mov    0x8(%rax),%r10d
  const int output_height = output->dims->data[1];
  115a28:	44 89 5d c0          	mov    %r11d,-0x40(%rbp)
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
  115a2c:	48 c1 e6 02          	shl    $0x2,%rsi
  const int filter_width = filter->dims->data[2];
  115a30:	44 89 4d b0          	mov    %r9d,-0x50(%rbp)
  const int filter_height = filter->dims->data[1];
  115a34:	44 89 55 b4          	mov    %r10d,-0x4c(%rbp)
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
  115a38:	48 89 75 b8          	mov    %rsi,-0x48(%rbp)
  115a3c:	41 ff 57 70          	call   *0x70(%r15)
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
  115a40:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  115a44:	4c 89 ff             	mov    %r15,%rdi
  data->per_channel_output_multiplier =
  115a47:	49 89 44 24 28       	mov    %rax,0x28(%r12)
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
  115a4c:	41 ff 57 70          	call   *0x70(%r15)
          context, num_channels * sizeof(int32_t)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
  115a50:	44 8b 5d c0          	mov    -0x40(%rbp),%r11d
  115a54:	44 8b 55 b4          	mov    -0x4c(%rbp),%r10d
  115a58:	44 8b 4d b0          	mov    -0x50(%rbp),%r9d
  115a5c:	44 8b 45 a4          	mov    -0x5c(%rbp),%r8d
  data->per_channel_output_shift =
  115a60:	49 89 44 24 30       	mov    %rax,0x30(%r12)
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
  115a65:	41 8b 0e             	mov    (%r14),%ecx
  115a68:	8d 41 f9             	lea    -0x7(%rcx),%eax
  115a6b:	83 e0 fd             	and    $0xfffffffd,%eax
  115a6e:	0f 85 9b 00 00 00    	jne    115b0f <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1cc>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
  115a74:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  115a78:	8b 42 50             	mov    0x50(%rdx),%eax
  115a7b:	83 f8 01             	cmp    $0x1,%eax
  115a7e:	74 16                	je     115a96 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x153>
  115a80:	6a 01                	push   $0x1
  115a82:	41 b9 a7 f7 11 00    	mov    $0x11f7a7,%r9d
  115a88:	41 b8 f4 f7 11 00    	mov    $0x11f7f4,%r8d
  115a8e:	b9 9e 00 00 00       	mov    $0x9e,%ecx
  115a93:	50                   	push   %rax
  115a94:	eb 5f                	jmp    115af5 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1b2>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
  115a96:	48 8b 72 58          	mov    0x58(%rdx),%rsi
        static_cast<TfLiteAffineQuantization*>(filter->quantization.params);
    TFLITE_DCHECK(affine_quantization != nullptr);
  115a9a:	48 85 f6             	test   %rsi,%rsi
  115a9d:	0f 84 ba fe ff ff    	je     11595d <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
  115aa3:	48 8b 06             	mov    (%rsi),%rax
  115aa6:	48 85 c0             	test   %rax,%rax
  115aa9:	0f 84 ae fe ff ff    	je     11595d <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
  115aaf:	48 8b 76 08          	mov    0x8(%rsi),%rsi
  115ab3:	48 85 f6             	test   %rsi,%rsi
  115ab6:	0f 84 a1 fe ff ff    	je     11595d <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a>

    TF_LITE_ENSURE(context,
  115abc:	8b 00                	mov    (%rax),%eax
  115abe:	83 f8 01             	cmp    $0x1,%eax
  115ac1:	74 19                	je     115adc <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x199>
  115ac3:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  115ac7:	3b 42 04             	cmp    0x4(%rdx),%eax
  115aca:	74 10                	je     115adc <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x199>
  115acc:	41 b8 e6 fe 11 00    	mov    $0x11fee6,%r8d
  115ad2:	b9 a7 00 00 00       	mov    $0xa7,%ecx
  115ad7:	e9 d5 fe ff ff       	jmp    1159b1 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
                   affine_quantization->scale->size == 1 ||
                       affine_quantization->scale->size ==
                           filter->dims->data[kConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
  115adc:	8b 16                	mov    (%rsi),%edx
  115ade:	39 d0                	cmp    %edx,%eax
  115ae0:	74 2d                	je     115b0f <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x1cc>
  115ae2:	52                   	push   %rdx
  115ae3:	41 b9 5f ff 11 00    	mov    $0x11ff5f,%r9d
  115ae9:	41 b8 9d f8 11 00    	mov    $0x11f89d,%r8d
  115aef:	b9 ab 00 00 00       	mov    $0xab,%ecx
  115af4:	50                   	push   %rax
  115af5:	ba 4b fe 11 00       	mov    $0x11fe4b,%edx
  115afa:	be da f7 11 00       	mov    $0x11f7da,%esi
  115aff:	4c 89 ff             	mov    %r15,%rdi
  115b02:	31 c0                	xor    %eax,%eax
  115b04:	41 ff 57 28          	call   *0x28(%r15)
  115b08:	5a                   	pop    %rdx
  115b09:	59                   	pop    %rcx
  115b0a:	e9 b5 fe ff ff       	jmp    1159c4 <_ZN6tflite11ConvPrepareEP13TfLiteContextP10TfLiteNode+0x81>
                      affine_quantization->zero_point->size);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
  115b0f:	50                   	push   %rax
  115b10:	48 89 de             	mov    %rbx,%rsi
  115b13:	4c 89 ff             	mov    %r15,%rdi
  115b16:	41 54                	push   %r12
  115b18:	51                   	push   %rcx
  115b19:	41 53                	push   %r11
  115b1b:	41 55                	push   %r13
  115b1d:	41 52                	push   %r10
  115b1f:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  115b22:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  115b26:	e8 d8 fb ff ff       	call   115703 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
  115b2b:	48 83 c4 30          	add    $0x30,%rsp
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
  115b2f:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  115b33:	5b                   	pop    %rbx
  115b34:	41 5c                	pop    %r12
  115b36:	41 5d                	pop    %r13
  115b38:	41 5e                	pop    %r14
  115b3a:	41 5f                	pop    %r15
  115b3c:	5d                   	pop    %rbp
  115b3d:	c3                   	ret    

0000000000115b3e <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcm>:

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  115b3e:	48 8b 47 70          	mov    0x70(%rdi),%rax
  115b42:	48 85 c0             	test   %rax,%rax
  115b45:	75 09                	jne    115b50 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcm+0x12>
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  115b47:	55                   	push   %rbp
  115b48:	48 89 e5             	mov    %rsp,%rbp
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  115b4b:	e8 74 c2 ff ff       	call   111dc4 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataConv));
  115b50:	be 40 00 00 00       	mov    $0x40,%esi
  115b55:	ff e0                	jmp    *%rax

0000000000115b57 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
  115b57:	55                   	push   %rbp
  115b58:	48 89 e5             	mov    %rsp,%rbp
  115b5b:	41 57                	push   %r15
  115b5d:	41 56                	push   %r14
  115b5f:	41 55                	push   %r13
  115b61:	41 54                	push   %r12
  115b63:	53                   	push   %rbx
  115b64:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  115b6b:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  const int stride_width = params.stride_width;
  const int stride_height = params.stride_height;
  const int dilation_width_factor = params.dilation_width_factor;
  const int dilation_height_factor = params.dilation_height_factor;
  115b6f:	8b 4f 10             	mov    0x10(%rdi),%ecx
  const int stride_width = params.stride_width;
  115b72:	66 8b 5f 0a          	mov    0xa(%rdi),%bx
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
  const int depth_multiplier = params.depth_multiplier;
  const float output_activation_min = params.float_activation_min;
  115b76:	f3 0f 10 67 30       	movss  0x30(%rdi),%xmm4
    float* output_data) {
  115b7b:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  const int dilation_width_factor = params.dilation_width_factor;
  115b82:	66 8b 57 0e          	mov    0xe(%rdi),%dx
  const float output_activation_max = params.float_activation_max;
  115b86:	f3 0f 10 6f 34       	movss  0x34(%rdi),%xmm5
  const int dilation_height_factor = params.dilation_height_factor;
  115b8b:	66 89 4d 94          	mov    %cx,-0x6c(%rbp)
  const int pad_height = params.padding_values.height;
  115b8f:	8b 4f 04             	mov    0x4(%rdi),%ecx
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
  115b92:	83 3e 04             	cmpl   $0x4,(%rsi)
  const int stride_width = params.stride_width;
  115b95:	66 89 5d a8          	mov    %bx,-0x58(%rbp)
  const int dilation_width_factor = params.dilation_width_factor;
  115b99:	66 89 55 96          	mov    %dx,-0x6a(%rbp)
  const int pad_width = params.padding_values.width;
  115b9d:	66 8b 57 02          	mov    0x2(%rdi),%dx
  const int pad_height = params.padding_values.height;
  115ba1:	66 89 4d 90          	mov    %cx,-0x70(%rbp)
  const int depth_multiplier = params.depth_multiplier;
  115ba5:	0f bf 4f 12          	movswl 0x12(%rdi),%ecx
    float* output_data) {
  115ba9:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
  const int stride_height = params.stride_height;
  115bad:	0f bf 5f 0c          	movswl 0xc(%rdi),%ebx
    float* output_data) {
  115bb1:	4c 89 85 50 ff ff ff 	mov    %r8,-0xb0(%rbp)
  const int pad_width = params.padding_values.width;
  115bb8:	66 89 55 92          	mov    %dx,-0x6e(%rbp)
  const int depth_multiplier = params.depth_multiplier;
  115bbc:	66 89 4d aa          	mov    %cx,-0x56(%rbp)
  115bc0:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  const float output_activation_min = params.float_activation_min;
  115bc3:	f3 0f 11 65 8c       	movss  %xmm4,-0x74(%rbp)
  const float output_activation_max = params.float_activation_max;
  115bc8:	f3 0f 11 6d 88       	movss  %xmm5,-0x78(%rbp)
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
  115bcd:	74 05                	je     115bd4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7d>
  115bcf:	e8 f0 c1 ff ff       	call   111dc4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
  115bd4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  115bd8:	83 38 04             	cmpl   $0x4,(%rax)
  115bdb:	75 f2                	jne    115bcf <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x78>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
  115bdd:	48 8b 45 18          	mov    0x18(%rbp),%rax
  115be1:	83 38 04             	cmpl   $0x4,(%rax)
  115be4:	75 e9                	jne    115bcf <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x78>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  115be6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  115bea:	31 c9                	xor    %ecx,%ecx
  115bec:	48 89 c2             	mov    %rax,%rdx
  115bef:	31 f6                	xor    %esi,%esi
  115bf1:	4d 89 cc             	mov    %r9,%r12
  115bf4:	e8 d7 e8 ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
  115bf9:	48 8b 55 18          	mov    0x18(%rbp),%rdx
  115bfd:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  115c01:	b9 03 00 00 00       	mov    $0x3,%ecx
  115c06:	be 03 00 00 00       	mov    $0x3,%esi
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  115c0b:	89 45 84             	mov    %eax,-0x7c(%rbp)
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
  115c0e:	e8 bd e8 ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
  115c13:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  115c17:	be 01 00 00 00       	mov    $0x1,%esi
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
  115c1c:	41 89 c5             	mov    %eax,%r13d
  const int input_height = input_shape.Dims(1);
  115c1f:	e8 70 a0 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
  115c24:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  115c28:	be 02 00 00 00       	mov    $0x2,%esi
  const int input_height = input_shape.Dims(1);
  115c2d:	89 45 80             	mov    %eax,-0x80(%rbp)
  const int input_width = input_shape.Dims(2);
  115c30:	e8 5f a0 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
  115c35:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  115c39:	be 03 00 00 00       	mov    $0x3,%esi
  const int input_width = input_shape.Dims(2);
  115c3e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
  const int input_depth = input_shape.Dims(3);
  115c44:	e8 4b a0 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
  115c49:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  115c4d:	be 01 00 00 00       	mov    $0x1,%esi
  const int input_depth = input_shape.Dims(3);
  115c52:	41 89 c7             	mov    %eax,%r15d
  const int filter_height = filter_shape.Dims(1);
  115c55:	e8 3a a0 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
  115c5a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  115c5e:	be 02 00 00 00       	mov    $0x2,%esi
  const int filter_height = filter_shape.Dims(1);
  115c63:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  const int filter_width = filter_shape.Dims(2);
  115c69:	e8 26 a0 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
  115c6e:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  115c72:	be 01 00 00 00       	mov    $0x1,%esi
  const int filter_width = filter_shape.Dims(2);
  115c77:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  const int output_height = output_shape.Dims(1);
  115c7d:	e8 12 a0 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
  115c82:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  115c86:	be 02 00 00 00       	mov    $0x2,%esi
  const int output_height = output_shape.Dims(1);
  115c8b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%rbp)
  const int output_width = output_shape.Dims(2);
  115c91:	e8 fe 9f ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
  115c96:	44 8b 75 a4          	mov    -0x5c(%rbp),%r14d
  const int output_width = output_shape.Dims(2);
  115c9a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
  115ca0:	45 0f af f7          	imul   %r15d,%r14d
  115ca4:	45 39 ee             	cmp    %r13d,%r14d
  115ca7:	0f 85 22 ff ff ff    	jne    115bcf <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x78>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
  115cad:	4c 89 e7             	mov    %r12,%rdi
  115cb0:	e8 07 a0 ff ff       	call   10fcbc <_ZNK6tflite12RuntimeShape8FlatSizeEv>

  for (int b = 0; b < batches; ++b) {
  115cb5:	31 ff                	xor    %edi,%edi
  115cb7:	89 9d 44 ff ff ff    	mov    %ebx,-0xbc(%rbp)
  115cbd:	89 7d bc             	mov    %edi,-0x44(%rbp)
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
  115cc0:	44 39 f0             	cmp    %r14d,%eax
  115cc3:	0f 85 06 ff ff ff    	jne    115bcf <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x78>
  for (int b = 0; b < batches; ++b) {
  115cc9:	8b 55 84             	mov    -0x7c(%rbp),%edx
  115ccc:	39 55 bc             	cmp    %edx,-0x44(%rbp)
  115ccf:	0f 8d 41 02 00 00    	jge    115f16 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x3bf>
  115cd5:	0f bf 45 90          	movswl -0x70(%rbp),%eax
  115cd9:	f7 d8                	neg    %eax
  115cdb:	89 45 98             	mov    %eax,-0x68(%rbp)
    for (int out_y = 0; out_y < output_height; ++out_y) {
  115cde:	31 c0                	xor    %eax,%eax
  115ce0:	89 45 b8             	mov    %eax,-0x48(%rbp)
  115ce3:	0f bf 45 a8          	movswl -0x58(%rbp),%eax
  115ce7:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
  115ced:	8b 9d 70 ff ff ff    	mov    -0x90(%rbp),%ebx
  115cf3:	39 5d b8             	cmp    %ebx,-0x48(%rbp)
  115cf6:	0f 8d 12 02 00 00    	jge    115f0e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x3b7>
  115cfc:	0f bf 45 92          	movswl -0x6e(%rbp),%eax
      for (int out_x = 0; out_x < output_width; ++out_x) {
  115d00:	31 d2                	xor    %edx,%edx
  115d02:	89 55 b4             	mov    %edx,-0x4c(%rbp)
  115d05:	f7 d8                	neg    %eax
  115d07:	89 45 9c             	mov    %eax,-0x64(%rbp)
  115d0a:	0f bf 45 aa          	movswl -0x56(%rbp),%eax
  115d0e:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  115d14:	8b 9d 6c ff ff ff    	mov    -0x94(%rbp),%ebx
  115d1a:	39 5d b4             	cmp    %ebx,-0x4c(%rbp)
  115d1d:	0f 8d da 01 00 00    	jge    115efd <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x3a6>
  115d23:	0f bf 45 94          	movswl -0x6c(%rbp),%eax
        for (int ic = 0; ic < input_depth; ++ic) {
  115d27:	31 c9                	xor    %ecx,%ecx
      for (int out_x = 0; out_x < output_width; ++out_x) {
  115d29:	45 31 e4             	xor    %r12d,%r12d
        for (int ic = 0; ic < input_depth; ++ic) {
  115d2c:	89 4d b0             	mov    %ecx,-0x50(%rbp)
  115d2f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
  115d35:	44 39 7d b0          	cmp    %r15d,-0x50(%rbp)
  115d39:	0f 8d ad 01 00 00    	jge    115eec <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x395>
  115d3f:	48 8b 5d 10          	mov    0x10(%rbp),%rbx
  115d43:	49 63 c4             	movslq %r12d,%rax
  115d46:	48 8d 04 83          	lea    (%rbx,%rax,4),%rax
  115d4a:	31 db                	xor    %ebx,%ebx
  115d4c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
          for (int m = 0; m < depth_multiplier; m++) {
  115d53:	39 5d a4             	cmp    %ebx,-0x5c(%rbp)
  115d56:	0f 8e 7f 01 00 00    	jle    115edb <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x384>
            const int oc = m + ic * depth_multiplier;
  115d5c:	41 8d 04 1c          	lea    (%r12,%rbx,1),%eax
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            float total = 0.f;
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
  115d60:	44 8b 55 98          	mov    -0x68(%rbp),%r10d
  115d64:	44 0f bf 5d 96       	movswl -0x6a(%rbp),%r11d
  115d69:	45 31 ed             	xor    %r13d,%r13d
            const int oc = m + ic * depth_multiplier;
  115d6c:	89 45 a0             	mov    %eax,-0x60(%rbp)
            float total = 0.f;
  115d6f:	0f 57 c0             	xorps  %xmm0,%xmm0
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
  115d72:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
  115d78:	41 39 c5             	cmp    %eax,%r13d
  115d7b:	0f 8d fb 00 00 00    	jge    115e7c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x325>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
  115d81:	44 89 d0             	mov    %r10d,%eax
  115d84:	44 8b 4d 9c          	mov    -0x64(%rbp),%r9d
  115d88:	f7 d0                	not    %eax
  115d8a:	c1 e8 1f             	shr    $0x1f,%eax
                    (in_y < input_height)) {
  115d8d:	44 39 55 80          	cmp    %r10d,-0x80(%rbp)
  115d91:	41 0f 9f c6          	setg   %r14b
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
  115d95:	31 f6                	xor    %esi,%esi
  115d97:	89 75 ac             	mov    %esi,-0x54(%rbp)
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
  115d9a:	41 21 c6             	and    %eax,%r14d
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
  115d9d:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
  115da3:	39 55 ac             	cmp    %edx,-0x54(%rbp)
  115da6:	0f 8d bf 00 00 00    	jge    115e6b <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x314>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
  115dac:	45 85 c9             	test   %r9d,%r9d
  115daf:	0f 88 ab 00 00 00    	js     115e60 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x309>
  115db5:	44 39 8d 7c ff ff ff 	cmp    %r9d,-0x84(%rbp)
  115dbc:	0f 8e 9e 00 00 00    	jle    115e60 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x309>
  115dc2:	45 84 f6             	test   %r14b,%r14b
  115dc5:	0f 84 95 00 00 00    	je     115e60 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x309>
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
  115dcb:	44 8b 45 b0          	mov    -0x50(%rbp),%r8d
  115dcf:	8b 75 bc             	mov    -0x44(%rbp),%esi
  115dd2:	44 89 c9             	mov    %r9d,%ecx
  115dd5:	44 89 d2             	mov    %r10d,%edx
  115dd8:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  115ddc:	44 89 9d 30 ff ff ff 	mov    %r11d,-0xd0(%rbp)
  115de3:	44 89 8d 38 ff ff ff 	mov    %r9d,-0xc8(%rbp)
  115dea:	44 89 95 3c ff ff ff 	mov    %r10d,-0xc4(%rbp)
  115df1:	f3 0f 11 85 34 ff ff 	movss  %xmm0,-0xcc(%rbp)
  115df8:	ff 
  115df9:	e8 65 e6 ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                  float filter_value = filter_data[Offset(
  115dfe:	44 8b 45 a0          	mov    -0x60(%rbp),%r8d
  115e02:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  115e06:	31 f6                	xor    %esi,%esi
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
  115e08:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
  115e0f:	48 98                	cltq   
                  float filter_value = filter_data[Offset(
  115e11:	44 89 ea             	mov    %r13d,%edx
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
  115e14:	f3 0f 10 0c 81       	movss  (%rcx,%rax,4),%xmm1
                  float filter_value = filter_data[Offset(
  115e19:	8b 4d ac             	mov    -0x54(%rbp),%ecx
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
  115e1c:	f3 0f 11 8d 40 ff ff 	movss  %xmm1,-0xc0(%rbp)
  115e23:	ff 
                  float filter_value = filter_data[Offset(
  115e24:	e8 3a e6 ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      filter_shape, 0, filter_y, filter_x, oc)];
                  total += (input_value * filter_value);
  115e29:	48 8b b5 50 ff ff ff 	mov    -0xb0(%rbp),%rsi
  115e30:	f3 0f 10 8d 40 ff ff 	movss  -0xc0(%rbp),%xmm1
  115e37:	ff 
                  float filter_value = filter_data[Offset(
  115e38:	48 98                	cltq   
                  total += (input_value * filter_value);
  115e3a:	f3 0f 10 85 34 ff ff 	movss  -0xcc(%rbp),%xmm0
  115e41:	ff 
  115e42:	44 8b 9d 30 ff ff ff 	mov    -0xd0(%rbp),%r11d
  115e49:	f3 0f 59 0c 86       	mulss  (%rsi,%rax,4),%xmm1
  115e4e:	44 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%r9d
  115e55:	44 8b 95 3c ff ff ff 	mov    -0xc4(%rbp),%r10d
  115e5c:	f3 0f 58 c1          	addss  %xmm1,%xmm0
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
  115e60:	ff 45 ac             	incl   -0x54(%rbp)
  115e63:	45 01 d9             	add    %r11d,%r9d
  115e66:	e9 32 ff ff ff       	jmp    115d9d <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x246>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
  115e6b:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
  115e71:	41 ff c5             	inc    %r13d
  115e74:	41 01 c2             	add    %eax,%r10d
  115e77:	e9 f6 fe ff ff       	jmp    115d72 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21b>
                }
              }
            }
            float bias_value = 0.0f;
            if (bias_data) {
  115e7c:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
            float bias_value = 0.0f;
  115e81:	0f 57 c9             	xorps  %xmm1,%xmm1
            if (bias_data) {
  115e84:	74 0c                	je     115e92 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x33b>
              bias_value = bias_data[oc];
  115e86:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  115e8d:	f3 0f 10 0c 98       	movss  (%rax,%rbx,4),%xmm1
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
  115e92:	f3 0f 58 c1          	addss  %xmm1,%xmm0
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
  115e96:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  115e9a:	44 8b 45 a0          	mov    -0x60(%rbp),%r8d
  115e9e:	48 ff c3             	inc    %rbx
  115ea1:	8b 4d b4             	mov    -0x4c(%rbp),%ecx
  115ea4:	8b 55 b8             	mov    -0x48(%rbp),%edx
  115ea7:	8b 75 bc             	mov    -0x44(%rbp),%esi
                ActivationFunctionWithMinMax(total + bias_value,
  115eaa:	f3 0f 11 45 ac       	movss  %xmm0,-0x54(%rbp)
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
  115eaf:	e8 af e5 ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
	return __b;
  115eb4:	f3 0f 10 55 8c       	movss  -0x74(%rbp),%xmm2
  115eb9:	f3 0f 10 45 ac       	movss  -0x54(%rbp),%xmm0
	return __b;
  115ebe:	f3 0f 10 5d 88       	movss  -0x78(%rbp),%xmm3
  115ec3:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  115ec7:	48 98                	cltq   
	return __b;
  115ec9:	f3 0f 5f d0          	maxss  %xmm0,%xmm2
	return __b;
  115ecd:	f3 0f 5d da          	minss  %xmm2,%xmm3
  115ed1:	f3 0f 11 1c 87       	movss  %xmm3,(%rdi,%rax,4)
          for (int m = 0; m < depth_multiplier; m++) {
  115ed6:	e9 78 fe ff ff       	jmp    115d53 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1fc>
        for (int ic = 0; ic < input_depth; ++ic) {
  115edb:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  115ee1:	ff 45 b0             	incl   -0x50(%rbp)
  115ee4:	41 01 c4             	add    %eax,%r12d
  115ee7:	e9 49 fe ff ff       	jmp    115d35 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1de>
      for (int out_x = 0; out_x < output_width; ++out_x) {
  115eec:	8b 9d 48 ff ff ff    	mov    -0xb8(%rbp),%ebx
  115ef2:	ff 45 b4             	incl   -0x4c(%rbp)
  115ef5:	01 5d 9c             	add    %ebx,-0x64(%rbp)
  115ef8:	e9 17 fe ff ff       	jmp    115d14 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1bd>
    for (int out_y = 0; out_y < output_height; ++out_y) {
  115efd:	8b b5 44 ff ff ff    	mov    -0xbc(%rbp),%esi
  115f03:	ff 45 b8             	incl   -0x48(%rbp)
  115f06:	01 75 98             	add    %esi,-0x68(%rbp)
  115f09:	e9 df fd ff ff       	jmp    115ced <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x196>
  for (int b = 0; b < batches; ++b) {
  115f0e:	ff 45 bc             	incl   -0x44(%rbp)
  115f11:	e9 b3 fd ff ff       	jmp    115cc9 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x172>
          }
        }
      }
    }
  }
}
  115f16:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
  115f1d:	5b                   	pop    %rbx
  115f1e:	41 5c                	pop    %r12
  115f20:	41 5d                	pop    %r13
  115f22:	41 5e                	pop    %r14
  115f24:	41 5f                	pop    %r15
  115f26:	5d                   	pop    %rbp
  115f27:	c3                   	ret    

0000000000115f28 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
  115f28:	55                   	push   %rbp
  115f29:	48 89 f8             	mov    %rdi,%rax
  115f2c:	48 89 e5             	mov    %rsp,%rbp
  115f2f:	41 57                	push   %r15
  115f31:	41 56                	push   %r14
  115f33:	41 55                	push   %r13
  115f35:	41 54                	push   %r12
  115f37:	53                   	push   %rbx
  115f38:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  115f3f:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
  const int stride_height = params.stride_height;
  const int dilation_width_factor = params.dilation_width_factor;
  const int dilation_height_factor = params.dilation_height_factor;
  const int pad_width = params.padding_values.width;
  115f43:	66 8b 4f 02          	mov    0x2(%rdi),%cx
    int8_t* output_data) {
  115f47:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  const int dilation_width_factor = params.dilation_width_factor;
  115f4e:	66 8b 77 0e          	mov    0xe(%rdi),%si
  const int stride_width = params.stride_width;
  115f52:	66 8b 5f 0a          	mov    0xa(%rdi),%bx
  const int pad_width = params.padding_values.width;
  115f56:	66 89 8d 7e ff ff ff 	mov    %cx,-0x82(%rbp)
  const int dilation_width_factor = params.dilation_width_factor;
  115f5d:	66 89 75 82          	mov    %si,-0x7e(%rbp)
  const int dilation_height_factor = params.dilation_height_factor;
  115f61:	8b 77 10             	mov    0x10(%rdi),%esi
  const int pad_height = params.padding_values.height;
  const int depth_multiplier = params.depth_multiplier;
  115f64:	0f bf 4f 12          	movswl 0x12(%rdi),%ecx
  const int stride_width = params.stride_width;
  115f68:	66 89 5d 98          	mov    %bx,-0x68(%rbp)
  const int dilation_height_factor = params.dilation_height_factor;
  115f6c:	66 89 75 80          	mov    %si,-0x80(%rbp)
  const int pad_height = params.padding_values.height;
  115f70:	8b 77 04             	mov    0x4(%rdi),%esi
  const int depth_multiplier = params.depth_multiplier;
  115f73:	66 89 4d 9a          	mov    %cx,-0x66(%rbp)
  const int stride_height = params.stride_height;
  115f77:	0f bf 5f 0c          	movswl 0xc(%rdi),%ebx
  const int pad_height = params.padding_values.height;
  115f7b:	66 89 b5 7c ff ff ff 	mov    %si,-0x84(%rbp)
  const int32_t input_offset = params.input_offset;
  115f82:	8b 7f 14             	mov    0x14(%rdi),%edi
  const int32_t output_offset = params.output_offset;
  const int32_t output_activation_min = params.quantized_activation_min;
  115f85:	8b 70 28             	mov    0x28(%rax),%esi
  const int depth_multiplier = params.depth_multiplier;
  115f88:	89 4d 94             	mov    %ecx,-0x6c(%rbp)
  const int32_t output_offset = params.output_offset;
  115f8b:	8b 48 1c             	mov    0x1c(%rax),%ecx
    int8_t* output_data) {
  115f8e:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  115f95:	4c 89 85 40 ff ff ff 	mov    %r8,-0xc0(%rbp)
  115f9c:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  const int32_t input_offset = params.input_offset;
  115fa0:	89 bd 78 ff ff ff    	mov    %edi,-0x88(%rbp)
  const int32_t output_offset = params.output_offset;
  115fa6:	89 8d 74 ff ff ff    	mov    %ecx,-0x8c(%rbp)
  const int32_t output_activation_min = params.quantized_activation_min;
  115fac:	89 75 b8             	mov    %esi,-0x48(%rbp)
  const int32_t output_activation_max = params.quantized_activation_max;
  115faf:	44 8b 70 2c          	mov    0x2c(%rax),%r14d

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
  115fb3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  115fb7:	83 38 04             	cmpl   $0x4,(%rax)
  115fba:	74 05                	je     115fc1 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x99>
  115fbc:	e8 03 be ff ff       	call   111dc4 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
  115fc1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  115fc5:	83 38 04             	cmpl   $0x4,(%rax)
  115fc8:	75 f2                	jne    115fbc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x94>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
  115fca:	48 8b 45 28          	mov    0x28(%rbp),%rax
  115fce:	83 38 04             	cmpl   $0x4,(%rax)
  115fd1:	75 e9                	jne    115fbc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x94>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
  115fd3:	44 39 75 b8          	cmp    %r14d,-0x48(%rbp)
  115fd7:	7f e3                	jg     115fbc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x94>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  115fd9:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  115fdd:	31 c9                	xor    %ecx,%ecx
  115fdf:	48 89 c2             	mov    %rax,%rdx
  115fe2:	31 f6                	xor    %esi,%esi
  115fe4:	e8 e7 e4 ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
  115fe9:	48 8b 55 28          	mov    0x28(%rbp),%rdx
  115fed:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  115ff1:	b9 03 00 00 00       	mov    $0x3,%ecx
  115ff6:	be 03 00 00 00       	mov    $0x3,%esi
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  115ffb:	89 85 70 ff ff ff    	mov    %eax,-0x90(%rbp)
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
  116001:	e8 ca e4 ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
  116006:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  11600a:	be 01 00 00 00       	mov    $0x1,%esi
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
  11600f:	41 89 c4             	mov    %eax,%r12d
  const int input_height = input_shape.Dims(1);
  116012:	e8 7d 9c ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
  116017:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  11601b:	be 02 00 00 00       	mov    $0x2,%esi
  const int input_height = input_shape.Dims(1);
  116020:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  const int input_width = input_shape.Dims(2);
  116026:	e8 69 9c ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
  11602b:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  11602f:	be 03 00 00 00       	mov    $0x3,%esi
  const int input_width = input_shape.Dims(2);
  116034:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
  const int input_depth = input_shape.Dims(3);
  11603a:	e8 55 9c ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
  11603f:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  116043:	be 01 00 00 00       	mov    $0x1,%esi
  const int input_depth = input_shape.Dims(3);
  116048:	89 45 90             	mov    %eax,-0x70(%rbp)
  const int filter_height = filter_shape.Dims(1);
  11604b:	e8 44 9c ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
  116050:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  116054:	be 02 00 00 00       	mov    $0x2,%esi
  const int filter_height = filter_shape.Dims(1);
  116059:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
  const int filter_width = filter_shape.Dims(2);
  11605f:	e8 30 9c ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
  116064:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  116068:	be 01 00 00 00       	mov    $0x1,%esi
  const int filter_width = filter_shape.Dims(2);
  11606d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  const int output_height = output_shape.Dims(1);
  116073:	e8 1c 9c ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
  116078:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  11607c:	be 02 00 00 00       	mov    $0x2,%esi
  const int output_height = output_shape.Dims(1);
  116081:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
  const int output_width = output_shape.Dims(2);
  116087:	e8 08 9c ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
  11608c:	44 8b 6d 94          	mov    -0x6c(%rbp),%r13d
  const int output_width = output_shape.Dims(2);
  116090:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
  116096:	8b 45 90             	mov    -0x70(%rbp),%eax
  116099:	44 0f af e8          	imul   %eax,%r13d
  11609d:	45 39 e5             	cmp    %r12d,%r13d
  1160a0:	0f 85 16 ff ff ff    	jne    115fbc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x94>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
  1160a6:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  1160aa:	e8 0d 9c ff ff       	call   10fcbc <_ZNK6tflite12RuntimeShape8FlatSizeEv>

  for (int batch = 0; batch < batches; ++batch) {
  1160af:	45 31 c9             	xor    %r9d,%r9d
  1160b2:	89 9d 30 ff ff ff    	mov    %ebx,-0xd0(%rbp)
  1160b8:	44 89 4d bc          	mov    %r9d,-0x44(%rbp)
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
  1160bc:	44 39 e8             	cmp    %r13d,%eax
  1160bf:	0f 85 f7 fe ff ff    	jne    115fbc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x94>
  for (int batch = 0; batch < batches; ++batch) {
  1160c5:	8b 9d 70 ff ff ff    	mov    -0x90(%rbp),%ebx
  1160cb:	39 5d bc             	cmp    %ebx,-0x44(%rbp)
  1160ce:	0f 8d f0 02 00 00    	jge    1163c4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x49c>
  1160d4:	0f bf 85 7c ff ff ff 	movswl -0x84(%rbp),%eax
  1160db:	f7 d8                	neg    %eax
  1160dd:	89 45 88             	mov    %eax,-0x78(%rbp)
    for (int out_y = 0; out_y < output_height; ++out_y) {
  1160e0:	31 c0                	xor    %eax,%eax
  1160e2:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  1160e5:	0f bf 45 98          	movswl -0x68(%rbp),%eax
  1160e9:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
  1160ef:	8b bd 5c ff ff ff    	mov    -0xa4(%rbp),%edi
  1160f5:	39 7d b4             	cmp    %edi,-0x4c(%rbp)
  1160f8:	0f 8d be 02 00 00    	jge    1163bc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x494>
  1160fe:	0f bf 85 7e ff ff ff 	movswl -0x82(%rbp),%eax
      for (int out_x = 0; out_x < output_width; ++out_x) {
  116105:	31 d2                	xor    %edx,%edx
  116107:	89 55 b0             	mov    %edx,-0x50(%rbp)
  11610a:	f7 d8                	neg    %eax
  11610c:	89 45 84             	mov    %eax,-0x7c(%rbp)
  11610f:	0f bf 45 9a          	movswl -0x66(%rbp),%eax
  116113:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)
  116119:	8b 9d 58 ff ff ff    	mov    -0xa8(%rbp),%ebx
  11611f:	39 5d b0             	cmp    %ebx,-0x50(%rbp)
  116122:	0f 8d 83 02 00 00    	jge    1163ab <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x483>
  116128:	0f bf 45 80          	movswl -0x80(%rbp),%eax
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
  11612c:	31 c9                	xor    %ecx,%ecx
  11612e:	89 4d 9c             	mov    %ecx,-0x64(%rbp)
  116131:	89 4d ac             	mov    %ecx,-0x54(%rbp)
  116134:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
  11613a:	8b 5d 90             	mov    -0x70(%rbp),%ebx
  11613d:	39 5d ac             	cmp    %ebx,-0x54(%rbp)
  116140:	0f 8d 54 02 00 00    	jge    11639a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x472>
          for (int m = 0; m < depth_multiplier; ++m) {
  116146:	31 f6                	xor    %esi,%esi
  116148:	48 63 45 9c          	movslq -0x64(%rbp),%rax
  11614c:	89 75 a8             	mov    %esi,-0x58(%rbp)
  11614f:	4c 8d 2c 85 00 00 00 	lea    0x0(,%rax,4),%r13
  116156:	00 
  116157:	8b 5d 94             	mov    -0x6c(%rbp),%ebx
  11615a:	39 5d a8             	cmp    %ebx,-0x58(%rbp)
  11615d:	0f 8d 26 02 00 00    	jge    116389 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x461>
            const int output_channel = m + in_channel * depth_multiplier;
  116163:	8b 5d 9c             	mov    -0x64(%rbp),%ebx
  116166:	8b 45 a8             	mov    -0x58(%rbp),%eax
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32_t acc = 0;
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
  116169:	45 31 c0             	xor    %r8d,%r8d
  11616c:	44 8b 55 88          	mov    -0x78(%rbp),%r10d
  116170:	44 0f bf 5d 82       	movswl -0x7e(%rbp),%r11d
  116175:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
            const int output_channel = m + in_channel * depth_multiplier;
  116179:	01 d8                	add    %ebx,%eax
            int32_t acc = 0;
  11617b:	31 db                	xor    %ebx,%ebx
            const int output_channel = m + in_channel * depth_multiplier;
  11617d:	89 45 8c             	mov    %eax,-0x74(%rbp)
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
  116180:	8b 8d 64 ff ff ff    	mov    -0x9c(%rbp),%ecx
  116186:	39 4d a4             	cmp    %ecx,-0x5c(%rbp)
  116189:	0f 8d e0 00 00 00    	jge    11626f <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x347>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
  11618f:	44 89 d0             	mov    %r10d,%eax
  116192:	44 8b 4d 84          	mov    -0x7c(%rbp),%r9d
  116196:	f7 d0                	not    %eax
  116198:	c1 e8 1f             	shr    $0x1f,%eax
                    (in_y < input_height);
  11619b:	44 39 95 6c ff ff ff 	cmp    %r10d,-0x94(%rbp)
  1161a2:	41 0f 9f c7          	setg   %r15b
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
  1161a6:	31 ff                	xor    %edi,%edi
  1161a8:	89 7d a0             	mov    %edi,-0x60(%rbp)
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
  1161ab:	41 21 c7             	and    %eax,%r15d
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
  1161ae:	8b bd 60 ff ff ff    	mov    -0xa0(%rbp),%edi
  1161b4:	39 7d a0             	cmp    %edi,-0x60(%rbp)
  1161b7:	0f 8d a1 00 00 00    	jge    11625e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x336>
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
  1161bd:	45 85 c9             	test   %r9d,%r9d
  1161c0:	0f 88 8d 00 00 00    	js     116253 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x32b>
  1161c6:	44 39 8d 68 ff ff ff 	cmp    %r9d,-0x98(%rbp)
  1161cd:	0f 8e 80 00 00 00    	jle    116253 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x32b>
  1161d3:	45 84 ff             	test   %r15b,%r15b
  1161d6:	74 7b                	je     116253 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x32b>
                if (is_point_inside_image) {
                  int32_t input_val = input_data[Offset(
  1161d8:	44 8b 45 ac          	mov    -0x54(%rbp),%r8d
  1161dc:	8b 75 bc             	mov    -0x44(%rbp),%esi
  1161df:	44 89 c9             	mov    %r9d,%ecx
  1161e2:	44 89 d2             	mov    %r10d,%edx
  1161e5:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  1161e9:	44 89 9d 24 ff ff ff 	mov    %r11d,-0xdc(%rbp)
  1161f0:	44 89 8d 28 ff ff ff 	mov    %r9d,-0xd8(%rbp)
  1161f7:	44 89 95 2c ff ff ff 	mov    %r10d,-0xd4(%rbp)
  1161fe:	e8 60 e2 ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_shape, batch, in_y, in_x, in_channel)];
                  int32_t filter_val = filter_data[Offset(
  116203:	8b 4d a0             	mov    -0x60(%rbp),%ecx
  116206:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  116209:	31 f6                	xor    %esi,%esi
  11620b:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
  11620f:	44 8b 45 8c          	mov    -0x74(%rbp),%r8d
                  int32_t input_val = input_data[Offset(
  116213:	4c 63 e0             	movslq %eax,%r12
                  int32_t filter_val = filter_data[Offset(
  116216:	e8 48 e2 ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_shape, batch, in_y, in_x, in_channel)];
  11621b:	48 8b bd 40 ff ff ff 	mov    -0xc0(%rbp),%rdi
                      filter_shape, 0, filter_y, filter_x, output_channel)];
  116222:	48 8b 75 10          	mov    0x10(%rbp),%rsi
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
  116226:	8b 8d 78 ff ff ff    	mov    -0x88(%rbp),%ecx
                  int32_t filter_val = filter_data[Offset(
  11622c:	48 98                	cltq   
                  acc += filter_val * (input_val + input_offset);
  11622e:	44 8b 9d 24 ff ff ff 	mov    -0xdc(%rbp),%r11d
                      input_shape, batch, in_y, in_x, in_channel)];
  116235:	42 0f be 14 27       	movsbl (%rdi,%r12,1),%edx
                      filter_shape, 0, filter_y, filter_x, output_channel)];
  11623a:	0f be 04 06          	movsbl (%rsi,%rax,1),%eax
                  acc += filter_val * (input_val + input_offset);
  11623e:	44 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%r9d
  116245:	44 8b 95 2c ff ff ff 	mov    -0xd4(%rbp),%r10d
  11624c:	01 ca                	add    %ecx,%edx
  11624e:	0f af d0             	imul   %eax,%edx
  116251:	01 d3                	add    %edx,%ebx
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
  116253:	ff 45 a0             	incl   -0x60(%rbp)
  116256:	45 01 d9             	add    %r11d,%r9d
  116259:	e9 50 ff ff ff       	jmp    1161ae <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x286>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
  11625e:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  116264:	ff 45 a4             	incl   -0x5c(%rbp)
  116267:	41 01 c2             	add    %eax,%r10d
  11626a:	e9 11 ff ff ff       	jmp    116180 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x258>
                }
              }
            }
            if (bias_data) {
  11626f:	48 83 7d 20 00       	cmpq   $0x0,0x20(%rbp)
  116274:	74 08                	je     11627e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x356>
              acc += bias_data[output_channel];
  116276:	48 8b 45 20          	mov    0x20(%rbp),%rax
  11627a:	42 03 1c 28          	add    (%rax,%r13,1),%ebx
            }
            acc = MultiplyByQuantizedMultiplier(
  11627e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  int left_shift = shift > 0 ? shift : 0;
  116285:	31 c9                	xor    %ecx,%ecx
  int right_shift = shift > 0 ? 0 : -shift;
  116287:	be 00 00 00 00       	mov    $0x0,%esi
  11628c:	42 8b 14 28          	mov    (%rax,%r13,1),%edx
  116290:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  int left_shift = shift > 0 ? shift : 0;
  116297:	85 d2                	test   %edx,%edx
  116299:	4a 63 04 28          	movslq (%rax,%r13,1),%rax
  11629d:	0f 49 ca             	cmovns %edx,%ecx
  int right_shift = shift > 0 ? 0 : -shift;
  1162a0:	7f 04                	jg     1162a6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x37e>
  1162a2:	89 d6                	mov    %edx,%esi
  1162a4:	f7 de                	neg    %esi
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
  1162a6:	d3 e3                	shl    %cl,%ebx
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  1162a8:	39 d8                	cmp    %ebx,%eax
  1162aa:	0f 94 c1             	sete   %cl
  1162ad:	81 fb 00 00 00 80    	cmp    $0x80000000,%ebx
  std::int64_t a_64(a);
  1162b3:	48 63 db             	movslq %ebx,%rbx
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  1162b6:	0f 94 c2             	sete   %dl
  std::int64_t ab_64 = a_64 * b_64;
  1162b9:	48 0f af d8          	imul   %rax,%rbx
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
  1162bd:	48 89 d8             	mov    %rbx,%rax
  1162c0:	48 c1 f8 3f          	sar    $0x3f,%rax
  1162c4:	25 01 00 00 80       	and    $0x80000001,%eax
  1162c9:	05 00 00 00 40       	add    $0x40000000,%eax
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  1162ce:	84 d1                	test   %dl,%cl
  1162d0:	74 1c                	je     1162ee <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3c6>
  assert(exponent <= 31);
  1162d2:	83 fe 1f             	cmp    $0x1f,%esi
  1162d5:	7f 1c                	jg     1162f3 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3cb>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
  1162d7:	89 f1                	mov    %esi,%ecx
  1162d9:	ba 01 00 00 00       	mov    $0x1,%edx
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  1162de:	bf ff ff ff 7f       	mov    $0x7fffffff,%edi
  return a ? BitNot(zero) : zero;
  1162e3:	31 c0                	xor    %eax,%eax
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
  1162e5:	48 d3 e2             	shl    %cl,%rdx
  1162e8:	ff ca                	dec    %edx
  return a & b;
  1162ea:	89 d1                	mov    %edx,%ecx
  1162ec:	eb 42                	jmp    116330 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x408>
  assert(exponent <= 31);
  1162ee:	83 fe 1f             	cmp    $0x1f,%esi
  1162f1:	7e 19                	jle    11630c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3e4>
  1162f3:	b9 57 fb 11 00       	mov    $0x11fb57,%ecx
  1162f8:	ba 66 fb 11 00       	mov    $0x11fb66,%edx
  1162fd:	be 67 01 00 00       	mov    $0x167,%esi
  116302:	bf bb fb 11 00       	mov    $0x11fbbb,%edi
  116307:	e8 64 ca fe ff       	call   102d70 <__assert_func>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  11630c:	48 98                	cltq   
  11630e:	b9 00 00 00 80       	mov    $0x80000000,%ecx
  116313:	48 01 d8             	add    %rbx,%rax
  116316:	48 99                	cqto   
  116318:	48 f7 f9             	idiv   %rcx
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
  11631b:	89 f1                	mov    %esi,%ecx
  11631d:	ba 01 00 00 00       	mov    $0x1,%edx
  116322:	48 d3 e2             	shl    %cl,%rdx
  116325:	ff ca                	dec    %edx
  return a & b;
  116327:	89 d1                	mov    %edx,%ecx
  std::int32_t ab_x2_high32 =
  116329:	89 c7                	mov    %eax,%edi
  return a & b;
  11632b:	21 c1                	and    %eax,%ecx
  return a ? BitNot(zero) : zero;
  11632d:	c1 f8 1f             	sar    $0x1f,%eax
  return a >> offset;
  116330:	d1 fa                	sar    %edx
  return a & b;
  116332:	83 e0 01             	and    $0x1,%eax
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
            acc = std::max(acc, output_activation_min);
            acc = std::min(acc, output_activation_max);
            output_data[Offset(output_shape, batch, out_y, out_x,
  116335:	44 8b 45 8c          	mov    -0x74(%rbp),%r8d
  return a + b;
  116339:	01 d0                	add    %edx,%eax
  11633b:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  return a ? BitNot(zero) : zero;
  11633e:	39 c8                	cmp    %ecx,%eax
  return a >> offset;
  116340:	89 f1                	mov    %esi,%ecx
  116342:	8b 75 bc             	mov    -0x44(%rbp),%esi
  return a & b;
  116345:	0f 9c c0             	setl   %al
  return a >> offset;
  116348:	d3 ff                	sar    %cl,%edi
  11634a:	8b 4d b0             	mov    -0x50(%rbp),%ecx
  return a & b;
  11634d:	0f b6 c0             	movzbl %al,%eax
  return a + b;
  116350:	01 c7                	add    %eax,%edi
            acc += output_offset;
  116352:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  116358:	01 c7                	add    %eax,%edi
  11635a:	8b 45 b8             	mov    -0x48(%rbp),%eax
  11635d:	39 c7                	cmp    %eax,%edi
  11635f:	0f 4c f8             	cmovl  %eax,%edi
  116362:	44 39 f7             	cmp    %r14d,%edi
  116365:	89 fb                	mov    %edi,%ebx
            output_data[Offset(output_shape, batch, out_y, out_x,
  116367:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  11636b:	41 0f 4f de          	cmovg  %r14d,%ebx
  11636f:	49 83 c5 04          	add    $0x4,%r13
  116373:	e8 eb e0 ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                               output_channel)] = static_cast<int8_t>(acc);
  116378:	48 8b 75 30          	mov    0x30(%rbp),%rsi
          for (int m = 0; m < depth_multiplier; ++m) {
  11637c:	ff 45 a8             	incl   -0x58(%rbp)
            output_data[Offset(output_shape, batch, out_y, out_x,
  11637f:	48 98                	cltq   
                               output_channel)] = static_cast<int8_t>(acc);
  116381:	88 1c 06             	mov    %bl,(%rsi,%rax,1)
          for (int m = 0; m < depth_multiplier; ++m) {
  116384:	e9 ce fd ff ff       	jmp    116157 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22f>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
  116389:	8b 9d 38 ff ff ff    	mov    -0xc8(%rbp),%ebx
  11638f:	ff 45 ac             	incl   -0x54(%rbp)
  116392:	01 5d 9c             	add    %ebx,-0x64(%rbp)
  116395:	e9 a0 fd ff ff       	jmp    11613a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x212>
      for (int out_x = 0; out_x < output_width; ++out_x) {
  11639a:	8b 9d 34 ff ff ff    	mov    -0xcc(%rbp),%ebx
  1163a0:	ff 45 b0             	incl   -0x50(%rbp)
  1163a3:	01 5d 84             	add    %ebx,-0x7c(%rbp)
  1163a6:	e9 6e fd ff ff       	jmp    116119 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f1>
    for (int out_y = 0; out_y < output_height; ++out_y) {
  1163ab:	8b 9d 30 ff ff ff    	mov    -0xd0(%rbp),%ebx
  1163b1:	ff 45 b4             	incl   -0x4c(%rbp)
  1163b4:	01 5d 88             	add    %ebx,-0x78(%rbp)
  1163b7:	e9 33 fd ff ff       	jmp    1160ef <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1c7>
  for (int batch = 0; batch < batches; ++batch) {
  1163bc:	ff 45 bc             	incl   -0x44(%rbp)
  1163bf:	e9 01 fd ff ff       	jmp    1160c5 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19d>
          }
        }
      }
    }
  }
}
  1163c4:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  1163cb:	5b                   	pop    %rbx
  1163cc:	41 5c                	pop    %r12
  1163ce:	41 5d                	pop    %r13
  1163d0:	41 5e                	pop    %r14
  1163d2:	41 5f                	pop    %r15
  1163d4:	5d                   	pop    %rbp
  1163d5:	c3                   	ret    

00000000001163d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  1163d6:	55                   	push   %rbp
  1163d7:	48 89 e5             	mov    %rsp,%rbp
  1163da:	41 57                	push   %r15
  1163dc:	41 56                	push   %r14
  1163de:	41 55                	push   %r13
  1163e0:	41 54                	push   %r12
  1163e2:	53                   	push   %rbx
  1163e3:	48 81 ec f8 00 00 00 	sub    $0xf8,%rsp
  TFLITE_DCHECK(node->user_data != nullptr);
  1163ea:	4c 8b 6e 20          	mov    0x20(%rsi),%r13
  1163ee:	4d 85 ed             	test   %r13,%r13
  1163f1:	75 05                	jne    1163f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22>
  1163f3:	e8 cc b9 ff ff       	call   111dc4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
  1163f8:	48 8b 46 28          	mov    0x28(%rsi),%rax
  1163fc:	49 89 f7             	mov    %rsi,%r15
  1163ff:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
  116406:	48 85 c0             	test   %rax,%rax
  116409:	74 e8                	je     1163f3 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d>
  11640b:	49 89 fe             	mov    %rdi,%r14
  TFLITE_DCHECK(context != nullptr);
  11640e:	48 85 ff             	test   %rdi,%rdi
  116411:	74 e0                	je     1163f3 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d>
  return context->GetEvalTensor(context, node->outputs->data[index]);
  116413:	48 63 15 02 7c 00 00 	movslq 0x7c02(%rip),%rdx        # 11e01c <_ZN6tflite26kDepthwiseConvOutputTensorE>
  11641a:	48 8b 46 08          	mov    0x8(%rsi),%rax
  11641e:	8b 74 90 04          	mov    0x4(%rax,%rdx,4),%esi
  116422:	ff 97 a8 00 00 00    	call   *0xa8(%rdi)
  return GetMutableEvalInput(context, node, index);
  116428:	8b 15 fa 7b 00 00    	mov    0x7bfa(%rip),%edx        # 11e028 <_ZN6tflite25kDepthwiseConvInputTensorE>
  11642e:	4c 89 fe             	mov    %r15,%rsi
  116431:	4c 89 f7             	mov    %r14,%rdi
  return context->GetEvalTensor(context, node->outputs->data[index]);
  116434:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  return GetMutableEvalInput(context, node, index);
  11643b:	e8 dc df ff ff       	call   11441c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  116440:	8b 15 de 7b 00 00    	mov    0x7bde(%rip),%edx        # 11e024 <_ZN6tflite27kDepthwiseConvWeightsTensorE>
  116446:	4c 89 fe             	mov    %r15,%rsi
  116449:	4c 89 f7             	mov    %r14,%rdi
  11644c:	49 89 c4             	mov    %rax,%r12
  11644f:	e8 c8 df ff ff       	call   11441c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
  116454:	49 8b 17             	mov    (%r15),%rdx
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
  116457:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  11645e:	48 89 c3             	mov    %rax,%rbx
  116461:	31 c0                	xor    %eax,%eax
  116463:	83 3a 03             	cmpl   $0x3,(%rdx)
  116466:	75 18                	jne    116480 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa>
  116468:	8b 15 b2 7b 00 00    	mov    0x7bb2(%rip),%edx        # 11e020 <_ZN6tflite24kDepthwiseConvBiasTensorE>
  11646e:	4c 89 fe             	mov    %r15,%rsi
  116471:	4c 89 f7             	mov    %r14,%rdi
  116474:	e8 a3 df ff ff       	call   11441c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  116479:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
          : nullptr;

  switch (input->type) {  // Already know in/out types are same.
  116480:	45 8b 7c 24 10       	mov    0x10(%r12),%r15d
  116485:	41 83 ff 01          	cmp    $0x1,%r15d
  116489:	74 0f                	je     11649a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
  11648b:	41 83 ff 09          	cmp    $0x9,%r15d
  11648f:	0f 84 00 01 00 00    	je     116595 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1bf>
  116495:	e9 0a 02 00 00       	jmp    1166a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ce>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
  11649a:	45 31 f6             	xor    %r14d,%r14d
  11649d:	48 85 c9             	test   %rcx,%rcx
  1164a0:	74 03                	je     1164a5 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcf>
  1164a2:	4c 8b 31             	mov    (%rcx),%r14
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
  1164a5:	48 89 ce             	mov    %rcx,%rsi
  1164a8:	48 8d bd 28 ff ff ff 	lea    -0xd8(%rbp),%rdi
  1164af:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  1164b6:	e8 8a 10 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  1164bb:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  1164c2:	48 85 c0             	test   %rax,%rax
  1164c5:	0f 84 28 ff ff ff    	je     1163f3 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d>
          tflite::micro::GetTensorShape(bias),
  1164cb:	48 89 c6             	mov    %rax,%rsi
  1164ce:	48 8d bd 08 ff ff ff 	lea    -0xf8(%rbp),%rdi
  return reinterpret_cast<const T*>(tensor->data.raw);
  1164d5:	4c 8b 38             	mov    (%rax),%r15
  1164d8:	e8 68 10 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  1164dd:	48 85 db             	test   %rbx,%rbx
  1164e0:	0f 84 0d ff ff ff    	je     1163f3 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d>
  return reinterpret_cast<const T*>(tensor->data.raw);
  1164e6:	4c 8b 03             	mov    (%rbx),%r8
          tflite::micro::GetTensorShape(filter),
  1164e9:	48 89 de             	mov    %rbx,%rsi
  1164ec:	48 8d bd 68 ff ff ff 	lea    -0x98(%rbp),%rdi
  1164f3:	4c 89 85 f0 fe ff ff 	mov    %r8,-0x110(%rbp)
  1164fa:	e8 46 10 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(input),
  1164ff:	4c 89 e6             	mov    %r12,%rsi
  116502:	48 8d bd 48 ff ff ff 	lea    -0xb8(%rbp),%rdi
  116509:	49 8b 1c 24          	mov    (%r12),%rbx
  11650d:	e8 33 10 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          DepthwiseConvParamsFloat(params, data),
  116512:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
  116519:	4c 89 ea             	mov    %r13,%rdx
  11651c:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
  116520:	e8 c1 01 00 00       	call   1166e6 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
      tflite::reference_ops::DepthwiseConv(
  116525:	48 8d 85 28 ff ff ff 	lea    -0xd8(%rbp),%rax
  11652c:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
  116530:	52                   	push   %rdx
  116531:	4c 8d 8d 08 ff ff ff 	lea    -0xf8(%rbp),%r9
  116538:	48 89 da             	mov    %rbx,%rdx
  11653b:	48 8d 8d 68 ff ff ff 	lea    -0x98(%rbp),%rcx
  116542:	41 56                	push   %r14
  116544:	48 8d b5 48 ff ff ff 	lea    -0xb8(%rbp),%rsi
  11654b:	50                   	push   %rax
  11654c:	41 57                	push   %r15
  11654e:	4c 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%r8
  116555:	e8 fd f5 ff ff       	call   115b57 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
  11655a:	48 83 c4 20          	add    $0x20,%rsp
          tflite::micro::GetTensorShape(input),
  11655e:	48 8d bd 48 ff ff ff 	lea    -0xb8(%rbp),%rdi
  116565:	e8 16 97 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
  11656a:	48 8d bd 68 ff ff ff 	lea    -0x98(%rbp),%rdi
  116571:	e8 0a 97 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
  116576:	48 8d bd 08 ff ff ff 	lea    -0xf8(%rbp),%rdi
  11657d:	e8 fe 96 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
  116582:	48 8d bd 28 ff ff ff 	lea    -0xd8(%rbp),%rdi
  116589:	e8 f2 96 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
  11658e:	31 c0                	xor    %eax,%eax
  116590:	e9 32 01 00 00       	jmp    1166c7 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f1>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
  116595:	45 31 f6             	xor    %r14d,%r14d
  116598:	48 85 c9             	test   %rcx,%rcx
  11659b:	74 03                	je     1165a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ca>
  11659d:	4c 8b 31             	mov    (%rcx),%r14
          tflite::micro::GetTensorShape(output),
  1165a0:	48 89 ce             	mov    %rcx,%rsi
  1165a3:	48 8d bd 68 ff ff ff 	lea    -0x98(%rbp),%rdi
  1165aa:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  1165b1:	e8 8f 0f 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  1165b6:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  1165bd:	48 85 c0             	test   %rax,%rax
  1165c0:	0f 84 2d fe ff ff    	je     1163f3 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d>
          tflite::micro::GetTensorShape(bias),
  1165c6:	48 89 c6             	mov    %rax,%rsi
  1165c9:	48 8d bd 48 ff ff ff 	lea    -0xb8(%rbp),%rdi
  return reinterpret_cast<const T*>(tensor->data.raw);
  1165d0:	4c 8b 38             	mov    (%rax),%r15
  1165d3:	e8 6d 0f 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  1165d8:	48 85 db             	test   %rbx,%rbx
  1165db:	0f 84 12 fe ff ff    	je     1163f3 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d>
  return reinterpret_cast<const T*>(tensor->data.raw);
  1165e1:	48 8b 03             	mov    (%rbx),%rax
          tflite::micro::GetTensorShape(filter),
  1165e4:	48 89 de             	mov    %rbx,%rsi
  1165e7:	48 8d bd 28 ff ff ff 	lea    -0xd8(%rbp),%rdi
  1165ee:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  1165f5:	e8 4b 0f 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  1165fa:	4d 8b 04 24          	mov    (%r12),%r8
          tflite::micro::GetTensorShape(input),
  1165fe:	4c 89 e6             	mov    %r12,%rsi
  116601:	48 8d bd 08 ff ff ff 	lea    -0xf8(%rbp),%rdi
  116608:	4c 89 85 f0 fe ff ff 	mov    %r8,-0x110(%rbp)
  11660f:	e8 31 0f 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          DepthwiseConvParamsQuantized(params, data),
  116614:	4c 89 ea             	mov    %r13,%rdx
  116617:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
          data.per_channel_output_multiplier, data.per_channel_output_shift,
  11661b:	49 8b 5d 30          	mov    0x30(%r13),%rbx
          DepthwiseConvParamsQuantized(params, data),
  11661f:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
          data.per_channel_output_multiplier, data.per_channel_output_shift,
  116626:	4d 8b 65 28          	mov    0x28(%r13),%r12
          DepthwiseConvParamsQuantized(params, data),
  11662a:	e8 6d 01 00 00       	call   11679c <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
      reference_integer_ops::DepthwiseConvPerChannel(
  11662f:	48 89 da             	mov    %rbx,%rdx
  116632:	4c 89 e6             	mov    %r12,%rsi
  116635:	48 8d 7d 88          	lea    -0x78(%rbp),%rdi
  116639:	50                   	push   %rax
  11663a:	48 8d 85 68 ff ff ff 	lea    -0x98(%rbp),%rax
  116641:	4c 8d 8d 28 ff ff ff 	lea    -0xd8(%rbp),%r9
  116648:	41 56                	push   %r14
  11664a:	48 8d 8d 08 ff ff ff 	lea    -0xf8(%rbp),%rcx
  116651:	50                   	push   %rax
  116652:	48 8d 85 48 ff ff ff 	lea    -0xb8(%rbp),%rax
  116659:	41 57                	push   %r15
  11665b:	50                   	push   %rax
  11665c:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  116663:	50                   	push   %rax
  116664:	4c 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%r8
  11666b:	e8 b8 f8 ff ff       	call   115f28 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
  116670:	48 83 c4 30          	add    $0x30,%rsp
          tflite::micro::GetTensorShape(input),
  116674:	48 8d bd 08 ff ff ff 	lea    -0xf8(%rbp),%rdi
  11667b:	e8 00 96 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
  116680:	48 8d bd 28 ff ff ff 	lea    -0xd8(%rbp),%rdi
  116687:	e8 f4 95 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
  11668c:	48 8d bd 48 ff ff ff 	lea    -0xb8(%rbp),%rdi
  116693:	e8 e8 95 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
  116698:	48 8d bd 68 ff ff ff 	lea    -0x98(%rbp),%rdi
  11669f:	e9 e5 fe ff ff       	jmp    116589 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b3>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
  1166a4:	44 89 ff             	mov    %r15d,%edi
  1166a7:	49 8b 5e 28          	mov    0x28(%r14),%rbx
  1166ab:	e8 d1 ce ff ff       	call   113581 <TfLiteTypeGetName>
  1166b0:	44 89 f9             	mov    %r15d,%ecx
  1166b3:	be 0b fe 11 00       	mov    $0x11fe0b,%esi
  1166b8:	4c 89 f7             	mov    %r14,%rdi
  1166bb:	48 89 c2             	mov    %rax,%rdx
  1166be:	31 c0                	xor    %eax,%eax
  1166c0:	ff d3                	call   *%rbx
      return kTfLiteError;
  1166c2:	b8 01 00 00 00       	mov    $0x1,%eax
}
  1166c7:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  1166cb:	5b                   	pop    %rbx
  1166cc:	41 5c                	pop    %r12
  1166ce:	41 5d                	pop    %r13
  1166d0:	41 5e                	pop    %r14
  1166d2:	41 5f                	pop    %r15
  1166d4:	5d                   	pop    %rbp
  1166d5:	c3                   	ret    

00000000001166d6 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
  1166d6:	48 89 f8             	mov    %rdi,%rax
          /*prepare=*/DepthwiseConvPrepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
  1166d9:	be c0 c1 11 00       	mov    $0x11c1c0,%esi
  1166de:	b9 10 00 00 00       	mov    $0x10,%ecx
  1166e3:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
}
  1166e5:	c3                   	ret    

00000000001166e6 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
const int kDepthwiseConvQuantizedDimension = 3;

// Returns a DepthwiseParams struct with all the parameters needed for a
// float computation.
DepthwiseParams DepthwiseConvParamsFloat(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
  1166e6:	55                   	push   %rbp
  1166e7:	48 89 e5             	mov    %rsp,%rbp
  1166ea:	41 55                	push   %r13
  1166ec:	49 89 d5             	mov    %rdx,%r13
  1166ef:	41 54                	push   %r12
  1166f1:	49 89 f4             	mov    %rsi,%r12
  1166f4:	53                   	push   %rbx
  1166f5:	48 89 fb             	mov    %rdi,%rbx
  1166f8:	51                   	push   %rcx
  DepthwiseParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
  1166f9:	8b 46 10             	mov    0x10(%rsi),%eax
  if (activation == kTfLiteActRelu) {
  1166fc:	83 f8 01             	cmp    $0x1,%eax
  1166ff:	74 14                	je     116715 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x2f>
  } else if (activation == kTfLiteActRelu6) {
  116701:	83 f8 03             	cmp    $0x3,%eax
  116704:	74 1c                	je     116722 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x3c>
  } else if (activation == kTfLiteActReluN1To1) {
  116706:	f3 0f 10 0d 0a 79 00 	movss  0x790a(%rip),%xmm1        # 11e018 <_ZN6tflite16kConvInputTensorE+0x8>
  11670d:	00 
  11670e:	83 f8 02             	cmp    $0x2,%eax
  116711:	75 05                	jne    116718 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x32>
  116713:	eb 1a                	jmp    11672f <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x49>
  116715:	0f 57 c9             	xorps  %xmm1,%xmm1
  116718:	f3 0f 10 05 f4 78 00 	movss  0x78f4(%rip),%xmm0        # 11e014 <_ZN6tflite16kConvInputTensorE+0x4>
  11671f:	00 
  116720:	eb 1d                	jmp    11673f <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x59>
  116722:	f3 0f 10 05 ce 78 00 	movss  0x78ce(%rip),%xmm0        # 11dff8 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0xc>
  116729:	00 
  11672a:	0f 57 c9             	xorps  %xmm1,%xmm1
  11672d:	eb 10                	jmp    11673f <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE+0x59>
  11672f:	f3 0f 10 0d c5 78 00 	movss  0x78c5(%rip),%xmm1        # 11dffc <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x10>
  116736:	00 
  116737:	f3 0f 10 05 c1 78 00 	movss  0x78c1(%rip),%xmm0        # 11e000 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x14>
  11673e:	00 
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
  11673f:	41 8b 3c 24          	mov    (%r12),%edi
    *activation_min = 0;
  116743:	f3 0f 11 4b 30       	movss  %xmm1,0x30(%rbx)
    *activation_max = std::numeric_limits<T>::max();
  116748:	f3 0f 11 43 34       	movss  %xmm0,0x34(%rbx)
  11674d:	e8 59 0e 00 00       	call   1175ab <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  116752:	88 03                	mov    %al,(%rbx)
  op_params.padding_values.width = data.padding.width;
  116754:	41 8b 45 00          	mov    0x0(%r13),%eax
  116758:	66 89 43 02          	mov    %ax,0x2(%rbx)
  op_params.padding_values.height = data.padding.height;
  11675c:	41 8b 45 04          	mov    0x4(%r13),%eax
  116760:	66 89 43 04          	mov    %ax,0x4(%rbx)
  op_params.stride_width = params.stride_width;
  116764:	41 8b 44 24 04       	mov    0x4(%r12),%eax
  116769:	66 89 43 0a          	mov    %ax,0xa(%rbx)
  op_params.stride_height = params.stride_height;
  11676d:	41 8b 44 24 08       	mov    0x8(%r12),%eax
  116772:	66 89 43 0c          	mov    %ax,0xc(%rbx)
  op_params.dilation_width_factor = params.dilation_width_factor;
  116776:	41 8b 44 24 14       	mov    0x14(%r12),%eax
  11677b:	66 89 43 0e          	mov    %ax,0xe(%rbx)
  op_params.dilation_height_factor = params.dilation_height_factor;
  11677f:	41 8b 44 24 18       	mov    0x18(%r12),%eax
  116784:	66 89 43 10          	mov    %ax,0x10(%rbx)
  op_params.depth_multiplier = params.depth_multiplier;
  116788:	41 8b 44 24 0c       	mov    0xc(%r12),%eax
  11678d:	66 89 43 12          	mov    %ax,0x12(%rbx)
  return op_params;
}
  116791:	48 89 d8             	mov    %rbx,%rax
  116794:	5a                   	pop    %rdx
  116795:	5b                   	pop    %rbx
  116796:	41 5c                	pop    %r12
  116798:	41 5d                	pop    %r13
  11679a:	5d                   	pop    %rbp
  11679b:	c3                   	ret    

000000000011679c <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:

// Returns a DepthwiseParams struct with all the parameters needed for a
// quantized computation.
DepthwiseParams DepthwiseConvParamsQuantized(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
  11679c:	55                   	push   %rbp
  11679d:	48 89 e5             	mov    %rsp,%rbp
  1167a0:	41 55                	push   %r13
  1167a2:	49 89 f5             	mov    %rsi,%r13
  1167a5:	41 54                	push   %r12
  1167a7:	49 89 d4             	mov    %rdx,%r12
  1167aa:	53                   	push   %rbx
  1167ab:	48 89 fb             	mov    %rdi,%rbx
  1167ae:	50                   	push   %rax
  DepthwiseParams op_params;
  op_params.input_offset = -data.input_zero_point;
  1167af:	8b 42 10             	mov    0x10(%rdx),%eax
  1167b2:	f7 d8                	neg    %eax
  1167b4:	89 47 14             	mov    %eax,0x14(%rdi)
  op_params.weights_offset = -data.filter_zero_point;
  1167b7:	8b 42 14             	mov    0x14(%rdx),%eax
  1167ba:	f7 d8                	neg    %eax
  1167bc:	89 47 18             	mov    %eax,0x18(%rdi)
  op_params.output_offset = data.output_zero_point;
  1167bf:	48 8b 42 18          	mov    0x18(%rdx),%rax
  1167c3:	48 89 47 1c          	mov    %rax,0x1c(%rdi)
  op_params.output_multiplier = data.output_multiplier;
  op_params.output_shift = -data.output_shift;
  1167c7:	8b 42 20             	mov    0x20(%rdx),%eax
  1167ca:	f7 d8                	neg    %eax
  1167cc:	89 47 24             	mov    %eax,0x24(%rdi)
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
  1167cf:	8b 3e                	mov    (%rsi),%edi
  1167d1:	e8 d5 0d 00 00       	call   1175ab <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
  1167d6:	88 03                	mov    %al,(%rbx)
  op_params.padding_values.height = data.padding.height;
  1167d8:	41 8b 44 24 04       	mov    0x4(%r12),%eax
  1167dd:	66 89 43 04          	mov    %ax,0x4(%rbx)
  op_params.padding_values.width = data.padding.width;
  1167e1:	41 8b 04 24          	mov    (%r12),%eax
  1167e5:	66 89 43 02          	mov    %ax,0x2(%rbx)
  op_params.stride_height = params.stride_height;
  1167e9:	41 8b 45 08          	mov    0x8(%r13),%eax
  1167ed:	66 89 43 0c          	mov    %ax,0xc(%rbx)
  op_params.stride_width = params.stride_width;
  1167f1:	41 8b 45 04          	mov    0x4(%r13),%eax
  1167f5:	66 89 43 0a          	mov    %ax,0xa(%rbx)
  op_params.dilation_height_factor = params.dilation_height_factor;
  1167f9:	41 8b 45 18          	mov    0x18(%r13),%eax
  1167fd:	66 89 43 10          	mov    %ax,0x10(%rbx)
  op_params.dilation_width_factor = params.dilation_width_factor;
  116801:	41 8b 45 14          	mov    0x14(%r13),%eax
  116805:	66 89 43 0e          	mov    %ax,0xe(%rbx)
  op_params.depth_multiplier = params.depth_multiplier;
  116809:	41 8b 45 0c          	mov    0xc(%r13),%eax
  11680d:	66 89 43 12          	mov    %ax,0x12(%rbx)
  op_params.quantized_activation_min = data.output_activation_min;
  116811:	49 8b 44 24 38       	mov    0x38(%r12),%rax
  116816:	48 89 43 28          	mov    %rax,0x28(%rbx)
  op_params.quantized_activation_max = data.output_activation_max;
  return op_params;
}
  11681a:	48 89 d8             	mov    %rbx,%rax
  11681d:	5a                   	pop    %rdx
  11681e:	5b                   	pop    %rbx
  11681f:	41 5c                	pop    %r12
  116821:	41 5d                	pop    %r13
  116823:	5d                   	pop    %rbp
  116824:	c3                   	ret    

0000000000116825 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
  116825:	55                   	push   %rbp
  116826:	48 89 e5             	mov    %rsp,%rbp
  116829:	41 57                	push   %r15
  11682b:	41 56                	push   %r14
  11682d:	41 55                	push   %r13
  11682f:	41 54                	push   %r12
  116831:	53                   	push   %rbx
  116832:	48 83 ec 38          	sub    $0x38,%rsp
  bool has_bias = node->inputs->size == 3;
  116836:	48 8b 06             	mov    (%rsi),%rax
    const TfLiteType data_type, OpDataConv* data) {
  116839:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11683d:	89 4d b8             	mov    %ecx,-0x48(%rbp)
  116840:	48 8b 5d 30          	mov    0x30(%rbp),%rbx
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
  116844:	8b 00                	mov    (%rax),%eax
    const TfLiteType data_type, OpDataConv* data) {
  116846:	44 89 45 b4          	mov    %r8d,-0x4c(%rbp)
  11684a:	44 89 4d b0          	mov    %r9d,-0x50(%rbp)
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
  11684e:	83 e8 02             	sub    $0x2,%eax
  116851:	83 f8 01             	cmp    $0x1,%eax
  116854:	76 1a                	jbe    116870 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4b>
  116856:	41 b8 27 fe 11 00    	mov    $0x11fe27,%r8d
  11685c:	b9 57 00 00 00       	mov    $0x57,%ecx
  116861:	ba 85 ff 11 00       	mov    $0x11ff85,%edx
  116866:	be d1 f5 11 00       	mov    $0x11f5d1,%esi
  11686b:	e9 44 01 00 00       	jmp    1169b4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18f>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
  116870:	48 8b 46 08          	mov    0x8(%rsi),%rax
  116874:	49 89 f4             	mov    %rsi,%r12
  116877:	8b 00                	mov    (%rax),%eax
  116879:	83 f8 01             	cmp    $0x1,%eax
  11687c:	74 33                	je     1168b1 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x8c>
  11687e:	6a 01                	push   $0x1
  116880:	b9 58 00 00 00       	mov    $0x58,%ecx
  116885:	ba 85 ff 11 00       	mov    $0x11ff85,%edx
  11688a:	41 b9 48 02 12 00    	mov    $0x120248,%r9d
  116890:	50                   	push   %rax
  116891:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  116895:	41 b8 9d fe 11 00    	mov    $0x11fe9d,%r8d
  11689b:	be da f7 11 00       	mov    $0x11f7da,%esi
  1168a0:	31 c0                	xor    %eax,%eax
  1168a2:	ff 57 28             	call   *0x28(%rdi)
  1168a5:	5a                   	pop    %rdx
  1168a6:	59                   	pop    %rcx
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
  1168a7:	b8 01 00 00 00       	mov    $0x1,%eax
  1168ac:	e9 af 01 00 00       	jmp    116a60 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x23b>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
  1168b1:	8b 42 18             	mov    0x18(%rdx),%eax
      params.dilation_width_factor, height, width, filter_height, filter_width,
  1168b4:	44 8b 6a 14          	mov    0x14(%rdx),%r13d
  1168b8:	49 89 d7             	mov    %rdx,%r15
  auto padding = params.padding;
  1168bb:	8b 3a                	mov    (%rdx),%edi
      params.stride_height, params.stride_width, params.dilation_height_factor,
  1168bd:	44 8b 72 08          	mov    0x8(%rdx),%r14d
  1168c1:	89 45 c0             	mov    %eax,-0x40(%rbp)
  1168c4:	8b 42 04             	mov    0x4(%rdx),%eax
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
  1168c7:	45 89 e8             	mov    %r13d,%r8d
  1168ca:	8b 55 b0             	mov    -0x50(%rbp),%edx
  1168cd:	8b 75 b8             	mov    -0x48(%rbp),%esi
  1168d0:	89 7d a8             	mov    %edi,-0x58(%rbp)
  1168d3:	89 c1                	mov    %eax,%ecx
  1168d5:	89 45 bc             	mov    %eax,-0x44(%rbp)
  1168d8:	e8 cb ec ff ff       	call   1155a8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
  1168dd:	8b 55 10             	mov    0x10(%rbp),%edx
  1168e0:	8b 75 b4             	mov    -0x4c(%rbp),%esi
  1168e3:	44 89 f1             	mov    %r14d,%ecx
  1168e6:	8b 7d a8             	mov    -0x58(%rbp),%edi
  1168e9:	44 8b 45 c0          	mov    -0x40(%rbp),%r8d
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
  1168ed:	89 45 ac             	mov    %eax,-0x54(%rbp)
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
  1168f0:	e8 b3 ec ff ff       	call   1155a8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  1168f5:	8b 75 10             	mov    0x10(%rbp),%esi
      ((out_size - 1) * stride + effective_filter_size - in_size);
  1168f8:	8b 7d bc             	mov    -0x44(%rbp),%edi
  total_padding = total_padding > 0 ? total_padding : 0;
  1168fb:	b9 00 00 00 00       	mov    $0x0,%ecx
      ((out_size - 1) * stride + effective_filter_size - in_size);
  116900:	ff c8                	dec    %eax
  116902:	41 0f af c6          	imul   %r14d,%eax
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  116906:	8d 56 ff             	lea    -0x1(%rsi),%edx
  116909:	8b 75 c0             	mov    -0x40(%rbp),%esi
  11690c:	0f af d6             	imul   %esi,%edx
  int total_padding =
  11690f:	8b 75 b4             	mov    -0x4c(%rbp),%esi
      ((out_size - 1) * stride + effective_filter_size - in_size);
  116912:	8d 44 02 01          	lea    0x1(%rdx,%rax,1),%eax
  total_padding = total_padding > 0 ? total_padding : 0;
  116916:	ba 00 00 00 00       	mov    $0x0,%edx
  int total_padding =
  11691b:	29 f0                	sub    %esi,%eax
  11691d:	8b 75 b8             	mov    -0x48(%rbp),%esi
  total_padding = total_padding > 0 ? total_padding : 0;
  116920:	0f 48 c2             	cmovs  %edx,%eax
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  116923:	8b 55 b0             	mov    -0x50(%rbp),%edx
  116926:	ff ca                	dec    %edx
  116928:	41 0f af d5          	imul   %r13d,%edx
      ((out_size - 1) * stride + effective_filter_size - in_size);
  11692c:	44 8b 6d ac          	mov    -0x54(%rbp),%r13d
  116930:	41 ff cd             	dec    %r13d
  116933:	44 0f af ef          	imul   %edi,%r13d
      padding, &out_height, &out_width);

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
  116937:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  11693b:	42 8d 54 2a 01       	lea    0x1(%rdx,%r13,1),%edx
  int total_padding =
  116940:	29 f2                	sub    %esi,%edx
  116942:	4c 89 e6             	mov    %r12,%rsi
  total_padding = total_padding > 0 ? total_padding : 0;
  116945:	0f 48 d1             	cmovs  %ecx,%edx
  return total_padding / 2;
  116948:	89 d1                	mov    %edx,%ecx
  *offset = total_padding % 2;
  11694a:	83 e2 01             	and    $0x1,%edx
  return total_padding / 2;
  11694d:	d1 f9                	sar    %ecx
  *offset = total_padding % 2;
  11694f:	89 53 08             	mov    %edx,0x8(%rbx)
  116952:	8b 15 b8 76 00 00    	mov    0x76b8(%rip),%edx        # 11e010 <_ZN6tflite16kConvInputTensorE>
  return total_padding / 2;
  116958:	89 0b                	mov    %ecx,(%rbx)
  11695a:	89 c1                	mov    %eax,%ecx
  *offset = total_padding % 2;
  11695c:	83 e0 01             	and    $0x1,%eax
  return total_padding / 2;
  11695f:	d1 f9                	sar    %ecx
  *offset = total_padding % 2;
  116961:	89 43 0c             	mov    %eax,0xc(%rbx)
  return total_padding / 2;
  116964:	89 4b 04             	mov    %ecx,0x4(%rbx)
  116967:	e8 57 cd ff ff       	call   1136c3 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  11696c:	49 89 c5             	mov    %rax,%r13
  TF_LITE_ENSURE(context, input != nullptr);
  11696f:	48 85 c0             	test   %rax,%rax
  116972:	75 0d                	jne    116981 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x15c>
  116974:	41 b8 b1 fe 11 00    	mov    $0x11feb1,%r8d
  11697a:	b9 62 00 00 00       	mov    $0x62,%ecx
  11697f:	eb 25                	jmp    1169a6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x181>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
  116981:	8b 15 85 76 00 00    	mov    0x7685(%rip),%edx        # 11e00c <_ZN6tflite18kConvWeightsTensorE>
  116987:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  11698b:	4c 89 e6             	mov    %r12,%rsi
  11698e:	e8 30 cd ff ff       	call   1136c3 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  116993:	49 89 c6             	mov    %rax,%r14
  TF_LITE_ENSURE(context, filter != nullptr);
  116996:	48 85 c0             	test   %rax,%rax
  116999:	75 23                	jne    1169be <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x199>
  11699b:	41 b8 c2 fe 11 00    	mov    $0x11fec2,%r8d
  1169a1:	b9 64 00 00 00       	mov    $0x64,%ecx
  1169a6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  1169aa:	ba 85 ff 11 00       	mov    $0x11ff85,%edx
  1169af:	be d1 f5 11 00       	mov    $0x11f5d1,%esi
  1169b4:	31 c0                	xor    %eax,%eax
  1169b6:	ff 57 28             	call   *0x28(%rdi)
  1169b9:	e9 e9 fe ff ff       	jmp    1168a7 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x82>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
  1169be:	8b 15 44 76 00 00    	mov    0x7644(%rip),%edx        # 11e008 <_ZN6tflite15kConvBiasTensorE>
  1169c4:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  1169c8:	4c 89 e6             	mov    %r12,%rsi
  1169cb:	e8 26 cd ff ff       	call   1136f6 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
  1169d0:	8b 15 2e 76 00 00    	mov    0x762e(%rip),%edx        # 11e004 <_ZN6tflite17kConvOutputTensorE>
  1169d6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  1169da:	4c 89 e6             	mov    %r12,%rsi
      GetOptionalInputTensor(context, node, kConvBiasTensor);
  1169dd:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
  1169e1:	e8 e5 cc ff ff       	call   1136cb <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
  1169e6:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  1169ea:	48 85 c0             	test   %rax,%rax
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
  1169ed:	49 89 c4             	mov    %rax,%r12
  TF_LITE_ENSURE(context, output != nullptr);
  1169f0:	75 0d                	jne    1169ff <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1da>
  1169f2:	41 b8 d4 fe 11 00    	mov    $0x11fed4,%r8d
  1169f8:	b9 68 00 00 00       	mov    $0x68,%ecx
  1169fd:	eb a7                	jmp    1169a6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x181>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
  1169ff:	83 7d 28 01          	cmpl   $0x1,0x28(%rbp)
  116a03:	75 1a                	jne    116a1f <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fa>
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier, data->per_channel_output_shift,
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
  116a05:	41 8b 45 1c          	mov    0x1c(%r13),%eax
  116a09:	89 43 10             	mov    %eax,0x10(%rbx)
  data->filter_zero_point = filter->params.zero_point;
  116a0c:	41 8b 46 1c          	mov    0x1c(%r14),%eax
  116a10:	89 43 14             	mov    %eax,0x14(%rbx)
  data->output_zero_point = output->params.zero_point;
  116a13:	41 8b 44 24 1c       	mov    0x1c(%r12),%eax
  116a18:	89 43 18             	mov    %eax,0x18(%rbx)

  return kTfLiteOk;
  116a1b:	31 c0                	xor    %eax,%eax
  116a1d:	eb 41                	jmp    116a60 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x23b>
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
  116a1f:	50                   	push   %rax
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
  116a20:	49 8b 46 10          	mov    0x10(%r14),%rax
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
  116a24:	4d 8d 4f 10          	lea    0x10(%r15),%r9
  116a28:	4d 89 e0             	mov    %r12,%r8
  116a2b:	4c 89 f2             	mov    %r14,%rdx
  116a2e:	4c 89 ee             	mov    %r13,%rsi
  116a31:	8b 40 10             	mov    0x10(%rax),%eax
  116a34:	50                   	push   %rax
  116a35:	48 8d 43 3c          	lea    0x3c(%rbx),%rax
  116a39:	ff 73 30             	push   0x30(%rbx)
  116a3c:	ff 73 28             	push   0x28(%rbx)
  116a3f:	50                   	push   %rax
  116a40:	48 8d 43 38          	lea    0x38(%rbx),%rax
  116a44:	50                   	push   %rax
  116a45:	48 8d 43 20          	lea    0x20(%rbx),%rax
  116a49:	50                   	push   %rax
  116a4a:	48 8d 43 1c          	lea    0x1c(%rbx),%rax
  116a4e:	50                   	push   %rax
  116a4f:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
  116a53:	e8 ba ce ff ff       	call   113912 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
  116a58:	48 83 c4 40          	add    $0x40,%rsp
  116a5c:	85 c0                	test   %eax,%eax
  116a5e:	74 a5                	je     116a05 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e0>
}
  116a60:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  116a64:	5b                   	pop    %rbx
  116a65:	41 5c                	pop    %r12
  116a67:	41 5d                	pop    %r13
  116a69:	41 5e                	pop    %r14
  116a6b:	41 5f                	pop    %r15
  116a6d:	5d                   	pop    %rbp
  116a6e:	c3                   	ret    

0000000000116a6f <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus DepthwiseConvPrepare(TfLiteContext* context, TfLiteNode* node) {
  116a6f:	55                   	push   %rbp
  116a70:	48 89 e5             	mov    %rsp,%rbp
  116a73:	41 57                	push   %r15
  116a75:	41 56                	push   %r14
  116a77:	41 55                	push   %r13
  116a79:	41 54                	push   %r12
  116a7b:	53                   	push   %rbx
  116a7c:	48 83 ec 38          	sub    $0x38,%rsp
  TFLITE_DCHECK(node->user_data != nullptr);
  116a80:	4c 8b 66 20          	mov    0x20(%rsi),%r12
  116a84:	4d 85 e4             	test   %r12,%r12
  116a87:	75 05                	jne    116a8e <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1f>
  116a89:	e8 36 b3 ff ff       	call   111dc4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
  116a8e:	48 8b 46 28          	mov    0x28(%rsi),%rax
  116a92:	48 89 f3             	mov    %rsi,%rbx
  116a95:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  116a99:	48 85 c0             	test   %rax,%rax
  116a9c:	74 eb                	je     116a89 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a>

  OpDataConv* data = static_cast<OpDataConv*>(node->user_data);
  const auto& params =
      *(static_cast<const TfLiteDepthwiseConvParams*>(node->builtin_data));

  TfLiteTensor* output = GetOutput(context, node, kDepthwiseConvOutputTensor);
  116a9e:	31 d2                	xor    %edx,%edx
  116aa0:	49 89 ff             	mov    %rdi,%r15
  116aa3:	e8 23 cc ff ff       	call   1136cb <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  116aa8:	49 89 c5             	mov    %rax,%r13
  TF_LITE_ENSURE(context, output != nullptr);
  116aab:	48 85 c0             	test   %rax,%rax
  116aae:	75 0d                	jne    116abd <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x4e>
  116ab0:	41 b8 d4 fe 11 00    	mov    $0x11fed4,%r8d
  116ab6:	b9 87 00 00 00       	mov    $0x87,%ecx
  116abb:	eb 20                	jmp    116add <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
  const TfLiteTensor* input =
      GetInput(context, node, kDepthwiseConvInputTensor);
  116abd:	31 d2                	xor    %edx,%edx
  116abf:	48 89 de             	mov    %rbx,%rsi
  116ac2:	4c 89 ff             	mov    %r15,%rdi
  116ac5:	e8 f9 cb ff ff       	call   1136c3 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  116aca:	49 89 c6             	mov    %rax,%r14
  TF_LITE_ENSURE(context, input != nullptr);
  116acd:	48 85 c0             	test   %rax,%rax
  116ad0:	75 28                	jne    116afa <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x8b>
  116ad2:	41 b8 b1 fe 11 00    	mov    $0x11feb1,%r8d
  116ad8:	b9 8a 00 00 00       	mov    $0x8a,%ecx
  116add:	ba 85 ff 11 00       	mov    $0x11ff85,%edx
  116ae2:	be d1 f5 11 00       	mov    $0x11f5d1,%esi
  116ae7:	4c 89 ff             	mov    %r15,%rdi
  116aea:	31 c0                	xor    %eax,%eax
  116aec:	41 ff 57 28          	call   *0x28(%r15)
  TF_LITE_ENSURE(context, output != nullptr);
  116af0:	b8 01 00 00 00       	mov    $0x1,%eax
  116af5:	e9 5e 01 00 00       	jmp    116c58 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1e9>
  const TfLiteTensor* filter =
      GetInput(context, node, kDepthwiseConvWeightsTensor);
  116afa:	ba 01 00 00 00       	mov    $0x1,%edx
  116aff:	48 89 de             	mov    %rbx,%rsi
  116b02:	4c 89 ff             	mov    %r15,%rdi
  116b05:	e8 b9 cb ff ff       	call   1136c3 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  116b0a:	48 89 c2             	mov    %rax,%rdx
  TF_LITE_ENSURE(context, filter != nullptr);
  116b0d:	48 85 c0             	test   %rax,%rax
  116b10:	75 0d                	jne    116b1f <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0xb0>
  116b12:	41 b8 c2 fe 11 00    	mov    $0x11fec2,%r8d
  116b18:	b9 8d 00 00 00       	mov    $0x8d,%ecx
  116b1d:	eb be                	jmp    116add <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x6e>

  const int input_width = input->dims->data[2];
  116b1f:	49 8b 46 10          	mov    0x10(%r14),%rax
  const int input_height = input->dims->data[1];
  const int filter_width = filter->dims->data[2];
  const int filter_height = filter->dims->data[1];
  const int output_width = output->dims->data[2];
  116b23:	49 8b 75 10          	mov    0x10(%r13),%rsi
  const int filter_width = filter->dims->data[2];
  116b27:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  const int output_height = output->dims->data[1];

  // Dynamically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
  116b2b:	4c 89 ff             	mov    %r15,%rdi
  const int input_width = input->dims->data[2];
  116b2e:	8b 48 0c             	mov    0xc(%rax),%ecx
  const int input_height = input->dims->data[1];
  116b31:	44 8b 40 08          	mov    0x8(%rax),%r8d
  const int filter_width = filter->dims->data[2];
  116b35:	48 8b 42 10          	mov    0x10(%rdx),%rax
  const int output_height = output->dims->data[1];
  116b39:	44 8b 5e 08          	mov    0x8(%rsi),%r11d
  const int output_width = output->dims->data[2];
  116b3d:	44 8b 6e 0c          	mov    0xc(%rsi),%r13d
  const int input_width = input->dims->data[2];
  116b41:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
          context, num_channels * sizeof(int32_t)));
  116b44:	48 63 70 10          	movslq 0x10(%rax),%rsi
  const int filter_width = filter->dims->data[2];
  116b48:	44 8b 48 0c          	mov    0xc(%rax),%r9d
  const int input_height = input->dims->data[1];
  116b4c:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
  const int filter_height = filter->dims->data[1];
  116b50:	44 8b 50 08          	mov    0x8(%rax),%r10d
  const int output_height = output->dims->data[1];
  116b54:	44 89 5d c0          	mov    %r11d,-0x40(%rbp)
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
  116b58:	48 c1 e6 02          	shl    $0x2,%rsi
  const int filter_width = filter->dims->data[2];
  116b5c:	44 89 4d b0          	mov    %r9d,-0x50(%rbp)
  const int filter_height = filter->dims->data[1];
  116b60:	44 89 55 b4          	mov    %r10d,-0x4c(%rbp)
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
  116b64:	48 89 75 b8          	mov    %rsi,-0x48(%rbp)
  116b68:	41 ff 57 70          	call   *0x70(%r15)
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
  116b6c:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  116b70:	4c 89 ff             	mov    %r15,%rdi
  data->per_channel_output_multiplier =
  116b73:	49 89 44 24 28       	mov    %rax,0x28(%r12)
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
  116b78:	41 ff 57 70          	call   *0x70(%r15)
          context, num_channels * sizeof(int32_t)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
  116b7c:	44 8b 5d c0          	mov    -0x40(%rbp),%r11d
  116b80:	44 8b 55 b4          	mov    -0x4c(%rbp),%r10d
  116b84:	44 8b 4d b0          	mov    -0x50(%rbp),%r9d
  116b88:	44 8b 45 a4          	mov    -0x5c(%rbp),%r8d
  data->per_channel_output_shift =
  116b8c:	49 89 44 24 30       	mov    %rax,0x30(%r12)
  if (input->type == kTfLiteInt8) {
  116b91:	41 8b 0e             	mov    (%r14),%ecx
  116b94:	83 f9 09             	cmp    $0x9,%ecx
  116b97:	0f 85 9b 00 00 00    	jne    116c38 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1c9>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
  116b9d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  116ba1:	8b 42 50             	mov    0x50(%rdx),%eax
  116ba4:	83 f8 01             	cmp    $0x1,%eax
  116ba7:	74 16                	je     116bbf <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x150>
  116ba9:	6a 01                	push   $0x1
  116bab:	41 b9 a7 f7 11 00    	mov    $0x11f7a7,%r9d
  116bb1:	41 b8 f4 f7 11 00    	mov    $0x11f7f4,%r8d
  116bb7:	b9 a1 00 00 00       	mov    $0xa1,%ecx
  116bbc:	50                   	push   %rax
  116bbd:	eb 5f                	jmp    116c1e <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1af>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
  116bbf:	48 8b 72 58          	mov    0x58(%rdx),%rsi
        static_cast<TfLiteAffineQuantization*>(filter->quantization.params);
    TFLITE_DCHECK(affine_quantization != nullptr);
  116bc3:	48 85 f6             	test   %rsi,%rsi
  116bc6:	0f 84 bd fe ff ff    	je     116a89 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a>
    TFLITE_DCHECK(affine_quantization->scale != nullptr);
  116bcc:	48 8b 06             	mov    (%rsi),%rax
  116bcf:	48 85 c0             	test   %rax,%rax
  116bd2:	0f 84 b1 fe ff ff    	je     116a89 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a>
    TFLITE_DCHECK(affine_quantization->zero_point != nullptr);
  116bd8:	48 8b 76 08          	mov    0x8(%rsi),%rsi
  116bdc:	48 85 f6             	test   %rsi,%rsi
  116bdf:	0f 84 a4 fe ff ff    	je     116a89 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1a>

    TF_LITE_ENSURE(
  116be5:	8b 00                	mov    (%rax),%eax
  116be7:	83 f8 01             	cmp    $0x1,%eax
  116bea:	74 19                	je     116c05 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x196>
  116bec:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  116bf0:	3b 42 10             	cmp    0x10(%rdx),%eax
  116bf3:	74 10                	je     116c05 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x196>
  116bf5:	41 b8 e1 ff 11 00    	mov    $0x11ffe1,%r8d
  116bfb:	b9 aa 00 00 00       	mov    $0xaa,%ecx
  116c00:	e9 d8 fe ff ff       	jmp    116add <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
        context, affine_quantization->scale->size == 1 ||
                     affine_quantization->scale->size ==
                         filter->dims->data[kDepthwiseConvQuantizedDimension]);

    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
  116c05:	8b 16                	mov    (%rsi),%edx
  116c07:	39 d0                	cmp    %edx,%eax
  116c09:	74 2d                	je     116c38 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x1c9>
  116c0b:	52                   	push   %rdx
  116c0c:	41 b9 5f ff 11 00    	mov    $0x11ff5f,%r9d
  116c12:	41 b8 9d f8 11 00    	mov    $0x11f89d,%r8d
  116c18:	b9 af 00 00 00       	mov    $0xaf,%ecx
  116c1d:	50                   	push   %rax
  116c1e:	ba 85 ff 11 00       	mov    $0x11ff85,%edx
  116c23:	be da f7 11 00       	mov    $0x11f7da,%esi
  116c28:	4c 89 ff             	mov    %r15,%rdi
  116c2b:	31 c0                	xor    %eax,%eax
  116c2d:	41 ff 57 28          	call   *0x28(%r15)
  116c31:	5a                   	pop    %rdx
  116c32:	59                   	pop    %rcx
  116c33:	e9 b8 fe ff ff       	jmp    116af0 <_ZN6tflite20DepthwiseConvPrepareEP13TfLiteContextP10TfLiteNode+0x81>
                      affine_quantization->zero_point->size);
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
  116c38:	50                   	push   %rax
  116c39:	48 89 de             	mov    %rbx,%rsi
  116c3c:	4c 89 ff             	mov    %r15,%rdi
  116c3f:	41 54                	push   %r12
  116c41:	51                   	push   %rcx
  116c42:	41 53                	push   %r11
  116c44:	41 55                	push   %r13
  116c46:	41 52                	push   %r10
  116c48:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  116c4b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  116c4f:	e8 d1 fb ff ff       	call   116825 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
  116c54:	48 83 c4 30          	add    $0x30,%rsp
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, input->type, data));

  return kTfLiteOk;
}
  116c58:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  116c5c:	5b                   	pop    %rbx
  116c5d:	41 5c                	pop    %r12
  116c5f:	41 5d                	pop    %r13
  116c61:	41 5e                	pop    %r14
  116c63:	41 5f                	pop    %r15
  116c65:	5d                   	pop    %rbp
  116c66:	c3                   	ret    

0000000000116c67 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcm>:

namespace tflite {
namespace {

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  116c67:	48 8b 47 70          	mov    0x70(%rdi),%rax
  116c6b:	48 85 c0             	test   %rax,%rax
  116c6e:	75 09                	jne    116c79 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcm+0x12>
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  116c70:	55                   	push   %rbp
  116c71:	48 89 e5             	mov    %rsp,%rbp
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  116c74:	e8 4b b1 ff ff       	call   111dc4 <abort>
  return context->AllocatePersistentBuffer(context,
  116c79:	be 20 00 00 00       	mov    $0x20,%esi
  116c7e:	ff e0                	jmp    *%rax

0000000000116c80 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
                                           sizeof(OpDataFullyConnected));
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  116c80:	55                   	push   %rbp
  116c81:	48 89 e5             	mov    %rsp,%rbp
  116c84:	41 57                	push   %r15
  116c86:	41 56                	push   %r14
  116c88:	41 55                	push   %r13
  116c8a:	41 54                	push   %r12
  116c8c:	53                   	push   %rbx
  116c8d:	48 83 ec 18          	sub    $0x18,%rsp
  TFLITE_DCHECK(node->user_data != nullptr);
  116c91:	4c 8b 7e 20          	mov    0x20(%rsi),%r15
  116c95:	4d 85 ff             	test   %r15,%r15
  116c98:	75 05                	jne    116c9f <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f>
  116c9a:	e8 25 b1 ff ff       	call   111dc4 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
  116c9f:	4c 8b 76 28          	mov    0x28(%rsi),%r14
  116ca3:	49 89 f4             	mov    %rsi,%r12
  116ca6:	4d 85 f6             	test   %r14,%r14
  116ca9:	74 ef                	je     116c9a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a>
  auto* data = static_cast<OpDataFullyConnected*>(node->user_data);
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input =
      GetInput(context, node, kFullyConnectedInputTensor);
  116cab:	8b 15 87 73 00 00    	mov    0x7387(%rip),%edx        # 11e038 <_ZN6tflite26kFullyConnectedInputTensorE>
  116cb1:	48 89 fb             	mov    %rdi,%rbx
  116cb4:	e8 0a ca ff ff       	call   1136c3 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  116cb9:	49 89 c5             	mov    %rax,%r13
  TF_LITE_ENSURE(context, input != nullptr);
  116cbc:	48 85 c0             	test   %rax,%rax
  116cbf:	75 0d                	jne    116cce <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4e>
  116cc1:	41 b8 b1 fe 11 00    	mov    $0x11feb1,%r8d
  116cc7:	b9 2f 00 00 00       	mov    $0x2f,%ecx
  116ccc:	eb 21                	jmp    116cef <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6f>
  const TfLiteTensor* filter =
      GetInput(context, node, kFullyConnectedWeightsTensor);
  116cce:	8b 15 60 73 00 00    	mov    0x7360(%rip),%edx        # 11e034 <_ZN6tflite28kFullyConnectedWeightsTensorE>
  116cd4:	4c 89 e6             	mov    %r12,%rsi
  116cd7:	48 89 df             	mov    %rbx,%rdi
  116cda:	e8 e4 c9 ff ff       	call   1136c3 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, filter != nullptr);
  116cdf:	48 85 c0             	test   %rax,%rax
  116ce2:	75 27                	jne    116d0b <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8b>
  116ce4:	41 b8 c2 fe 11 00    	mov    $0x11fec2,%r8d
  116cea:	b9 32 00 00 00       	mov    $0x32,%ecx
  116cef:	ba 63 00 12 00       	mov    $0x120063,%edx
  116cf4:	be d1 f5 11 00       	mov    $0x11f5d1,%esi
  116cf9:	48 89 df             	mov    %rbx,%rdi
  116cfc:	31 c0                	xor    %eax,%eax
  116cfe:	ff 53 28             	call   *0x28(%rbx)
  TF_LITE_ENSURE(context, input != nullptr);
  116d01:	b8 01 00 00 00       	mov    $0x1,%eax
  116d06:	e9 c7 00 00 00       	jmp    116dd2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x152>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
  116d0b:	8b 15 1f 73 00 00    	mov    0x731f(%rip),%edx        # 11e030 <_ZN6tflite25kFullyConnectedBiasTensorE>
  116d11:	4c 89 e6             	mov    %r12,%rsi
  116d14:	48 89 df             	mov    %rbx,%rdi
  116d17:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  116d1b:	e8 d6 c9 ff ff       	call   1136f6 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
  116d20:	8b 15 06 73 00 00    	mov    0x7306(%rip),%edx        # 11e02c <_ZN6tflite27kFullyConnectedOutputTensorE>
  116d26:	4c 89 e6             	mov    %r12,%rsi
  116d29:	48 89 df             	mov    %rbx,%rdi
      GetOptionalInputTensor(context, node, kFullyConnectedBiasTensor);
  116d2c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  TfLiteTensor* output = GetOutput(context, node, kFullyConnectedOutputTensor);
  116d30:	e8 96 c9 ff ff       	call   1136cb <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
  116d35:	4c 8b 4d c8          	mov    -0x38(%rbp),%r9
  116d39:	4c 8b 45 c0          	mov    -0x40(%rbp),%r8
  116d3d:	48 85 c0             	test   %rax,%rax
  116d40:	75 1a                	jne    116d5c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xdc>
  116d42:	41 b8 d4 fe 11 00    	mov    $0x11fed4,%r8d
  116d48:	b9 36 00 00 00       	mov    $0x36,%ecx
  116d4d:	ba 63 00 12 00       	mov    $0x120063,%edx
  116d52:	48 89 df             	mov    %rbx,%rdi
  116d55:	be d1 f5 11 00       	mov    $0x11f5d1,%esi
  116d5a:	eb a2                	jmp    116cfe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x7e>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  116d5c:	41 8b 55 00          	mov    0x0(%r13),%edx
  116d60:	8b 38                	mov    (%rax),%edi
  116d62:	39 fa                	cmp    %edi,%edx
  116d64:	74 42                	je     116da8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x128>
  116d66:	4c 8b 73 28          	mov    0x28(%rbx),%r14
  116d6a:	e8 12 c8 ff ff       	call   113581 <TfLiteTypeGetName>
  116d6f:	41 8b 7d 00          	mov    0x0(%r13),%edi
  116d73:	49 89 c4             	mov    %rax,%r12
  116d76:	e8 06 c8 ff ff       	call   113581 <TfLiteTypeGetName>
  116d7b:	41 54                	push   %r12
  116d7d:	be b9 00 12 00       	mov    $0x1200b9,%esi
  116d82:	48 89 df             	mov    %rbx,%rdi
  116d85:	50                   	push   %rax
  116d86:	41 b9 2b fd 11 00    	mov    $0x11fd2b,%r9d
  116d8c:	41 b8 38 fd 11 00    	mov    $0x11fd38,%r8d
  116d92:	31 c0                	xor    %eax,%eax
  116d94:	b9 38 00 00 00       	mov    $0x38,%ecx
  116d99:	ba 63 00 12 00       	mov    $0x120063,%edx
  116d9e:	41 ff d6             	call   *%r14
  116da1:	5e                   	pop    %rsi
  116da2:	5f                   	pop    %rdi
  116da3:	e9 59 ff ff ff       	jmp    116d01 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x81>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
  116da8:	41 3b 10             	cmp    (%r8),%edx
  116dab:	74 12                	je     116dbf <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13f>
  116dad:	be d3 00 12 00       	mov    $0x1200d3,%esi
  116db2:	48 89 df             	mov    %rbx,%rdi
  116db5:	31 c0                	xor    %eax,%eax
  116db7:	ff 53 28             	call   *0x28(%rbx)
  116dba:	e9 42 ff ff ff       	jmp    116d01 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x81>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpDataFullyConnected(context, params->activation, input->type,
  116dbf:	41 57                	push   %r15
  116dc1:	4c 89 e9             	mov    %r13,%rcx
  116dc4:	48 89 df             	mov    %rbx,%rdi
  116dc7:	50                   	push   %rax
  116dc8:	41 8b 36             	mov    (%r14),%esi
  116dcb:	e8 d1 06 00 00       	call   1174a1 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
  116dd0:	5a                   	pop    %rdx
  116dd1:	59                   	pop    %rcx
                                       input, filter, bias, output, data);
}
  116dd2:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  116dd6:	5b                   	pop    %rbx
  116dd7:	41 5c                	pop    %r12
  116dd9:	41 5d                	pop    %r13
  116ddb:	41 5e                	pop    %r14
  116ddd:	41 5f                	pop    %r15
  116ddf:	5d                   	pop    %rbp
  116de0:	c3                   	ret    

0000000000116de1 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  116de1:	55                   	push   %rbp
  116de2:	48 89 e5             	mov    %rsp,%rbp
  116de5:	41 57                	push   %r15
  116de7:	41 56                	push   %r14
  116de9:	41 55                	push   %r13
  116deb:	41 54                	push   %r12
  116ded:	53                   	push   %rbx
  116dee:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
  TFLITE_DCHECK(node->builtin_data != nullptr);
  116df5:	48 8b 46 28          	mov    0x28(%rsi),%rax
  116df9:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
  116e00:	48 85 c0             	test   %rax,%rax
  116e03:	75 05                	jne    116e0a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29>
  116e05:	e8 ba af ff ff       	call   111dc4 <abort>
  return GetMutableEvalInput(context, node, index);
  116e0a:	8b 15 28 72 00 00    	mov    0x7228(%rip),%edx        # 11e038 <_ZN6tflite26kFullyConnectedInputTensorE>
  116e10:	48 89 fb             	mov    %rdi,%rbx
  116e13:	49 89 f6             	mov    %rsi,%r14
  116e16:	e8 01 d6 ff ff       	call   11441c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  116e1b:	8b 15 13 72 00 00    	mov    0x7213(%rip),%edx        # 11e034 <_ZN6tflite28kFullyConnectedWeightsTensorE>
  116e21:	4c 89 f6             	mov    %r14,%rsi
  116e24:	48 89 df             	mov    %rbx,%rdi
  116e27:	49 89 c7             	mov    %rax,%r15
  116e2a:	e8 ed d5 ff ff       	call   11441c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  116e2f:	8b 15 fb 71 00 00    	mov    0x71fb(%rip),%edx        # 11e030 <_ZN6tflite25kFullyConnectedBiasTensorE>
  116e35:	4c 89 f6             	mov    %r14,%rsi
  116e38:	48 89 df             	mov    %rbx,%rdi
  116e3b:	49 89 c4             	mov    %rax,%r12
  116e3e:	e8 d9 d5 ff ff       	call   11441c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  116e43:	49 89 c5             	mov    %rax,%r13
  TFLITE_DCHECK(context != nullptr);
  116e46:	48 85 db             	test   %rbx,%rbx
  116e49:	74 ba                	je     116e05 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24>
  return context->GetEvalTensor(context, node->outputs->data[index]);
  116e4b:	49 8b 46 08          	mov    0x8(%r14),%rax
  116e4f:	48 63 15 d6 71 00 00 	movslq 0x71d6(%rip),%rdx        # 11e02c <_ZN6tflite27kFullyConnectedOutputTensorE>
  116e56:	48 89 df             	mov    %rbx,%rdi
  116e59:	8b 74 90 04          	mov    0x4(%rax,%rdx,4),%esi
  116e5d:	ff 93 a8 00 00 00    	call   *0xa8(%rbx)
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
  116e63:	4d 8b 76 20          	mov    0x20(%r14),%r14
  116e67:	48 89 c6             	mov    %rax,%rsi
  116e6a:	4d 85 f6             	test   %r14,%r14
  116e6d:	74 96                	je     116e05 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24>
  const auto& data =
      *(static_cast<const OpDataFullyConnected*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
  116e6f:	41 8b 4f 10          	mov    0x10(%r15),%ecx
  116e73:	83 f9 01             	cmp    $0x1,%ecx
  116e76:	74 0e                	je     116e86 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa5>
  116e78:	83 f9 09             	cmp    $0x9,%ecx
  116e7b:	0f 84 0a 02 00 00    	je     11708b <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2aa>
  116e81:	e9 54 05 00 00       	jmp    1173da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f9>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
  116e86:	45 31 f6             	xor    %r14d,%r14d
  116e89:	48 85 c0             	test   %rax,%rax
  116e8c:	74 03                	je     116e91 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb0>
  116e8e:	4c 8b 30             	mov    (%rax),%r14
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(filter),
          tflite::micro::GetTensorData<float>(filter),
          tflite::micro::GetTensorShape(bias),
          tflite::micro::GetTensorData<float>(bias),
          tflite::micro::GetTensorShape(output),
  116e91:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  116e98:	e8 a8 06 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  116e9d:	4d 85 ed             	test   %r13,%r13
  116ea0:	0f 84 5f ff ff ff    	je     116e05 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24>
          tflite::micro::GetTensorShape(bias),
  116ea6:	4c 89 ee             	mov    %r13,%rsi
  116ea9:	48 8d bd c0 fe ff ff 	lea    -0x140(%rbp),%rdi
  return reinterpret_cast<const T*>(tensor->data.raw);
  116eb0:	49 8b 5d 00          	mov    0x0(%r13),%rbx
  116eb4:	e8 8c 06 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  116eb9:	4d 85 e4             	test   %r12,%r12
  116ebc:	0f 84 43 ff ff ff    	je     116e05 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24>
  return reinterpret_cast<const T*>(tensor->data.raw);
  116ec2:	49 8b 04 24          	mov    (%r12),%rax
          tflite::micro::GetTensorShape(filter),
  116ec6:	4c 89 e6             	mov    %r12,%rsi
  116ec9:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
  116ed0:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
  116ed7:	e8 69 06 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  116edc:	49 8b 07             	mov    (%r15),%rax
          tflite::micro::GetTensorShape(input),
  116edf:	4c 89 fe             	mov    %r15,%rsi
  116ee2:	48 8d bd 80 fe ff ff 	lea    -0x180(%rbp),%rdi
  116ee9:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
  116ef0:	e8 50 06 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          FullyConnectedParamsFloat(params->activation),
  116ef5:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  116efc:	48 8d 7d 80          	lea    -0x80(%rbp),%rdi
  116f00:	8b 30                	mov    (%rax),%esi
  116f02:	e8 49 05 00 00       	call   117450 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
  inline int32_t DimensionsCount() const { return size_; }
  116f07:	8b 8d e0 fe ff ff    	mov    -0x120(%rbp),%ecx
  116f0d:	f3 0f 10 65 9c       	movss  -0x64(%rbp),%xmm4
  116f12:	f3 0f 10 6d a0       	movss  -0x60(%rbp),%xmm5
  116f17:	44 8b a5 a0 fe ff ff 	mov    -0x160(%rbp),%r12d
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
  116f1e:	41 89 cd             	mov    %ecx,%r13d
  116f21:	f3 0f 11 a5 78 fe ff 	movss  %xmm4,-0x188(%rbp)
  116f28:	ff 
  116f29:	f3 0f 11 ad 74 fe ff 	movss  %xmm5,-0x18c(%rbp)
  116f30:	ff 
  116f31:	41 ff cd             	dec    %r13d
  116f34:	0f 88 cb fe ff ff    	js     116e05 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  116f3a:	48 8d bd e8 fe ff ff 	lea    -0x118(%rbp),%rdi
  116f41:	83 f9 05             	cmp    $0x5,%ecx
  116f44:	7e 07                	jle    116f4d <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16c>
  116f46:	48 8b bd e8 fe ff ff 	mov    -0x118(%rbp),%rdi
  116f4d:	31 c0                	xor    %eax,%eax
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  116f4f:	41 bf 01 00 00 00    	mov    $0x1,%r15d
  for (int i = 0; i < dims_count; ++i) {
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
  116f55:	be 01 00 00 00       	mov    $0x1,%esi
  116f5a:	41 39 c5             	cmp    %eax,%r13d
  116f5d:	74 03                	je     116f62 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x181>
  116f5f:	8b 34 87             	mov    (%rdi,%rax,4),%esi
  for (int i = 0; i < dims_count; ++i) {
  116f62:	48 ff c0             	inc    %rax
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
  116f65:	44 0f af fe          	imul   %esi,%r15d
  for (int i = 0; i < dims_count; ++i) {
  116f69:	39 c1                	cmp    %eax,%ecx
  116f6b:	7f e8                	jg     116f55 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x174>
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
  116f6d:	41 8d 74 24 fe       	lea    -0x2(%r12),%esi
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
  116f72:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
  116f79:	e8 16 8d ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  116f7e:	44 89 ee             	mov    %r13d,%esi
  116f81:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  116f88:	89 85 70 fe ff ff    	mov    %eax,-0x190(%rbp)
  116f8e:	e8 01 8d ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  116f93:	41 89 c5             	mov    %eax,%r13d
  116f96:	39 85 70 fe ff ff    	cmp    %eax,-0x190(%rbp)
  116f9c:	0f 85 63 fe ff ff    	jne    116e05 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24>
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
  116fa2:	41 8d 74 24 ff       	lea    -0x1(%r12),%esi
  116fa7:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
  116fae:	e8 e1 8c ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int b = 0; b < batches; ++b) {
  116fb3:	31 f6                	xor    %esi,%esi
  116fb5:	31 ff                	xor    %edi,%edi
  116fb7:	45 31 c9             	xor    %r9d,%r9d
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
  116fba:	89 c2                	mov    %eax,%edx
  for (int b = 0; b < batches; ++b) {
  116fbc:	45 39 f9             	cmp    %r15d,%r9d
  116fbf:	0f 8d 8f 00 00 00    	jge    117054 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x273>
  116fc5:	48 63 c7             	movslq %edi,%rax
  116fc8:	48 8b 8d 68 fe ff ff 	mov    -0x198(%rbp),%rcx
  116fcf:	45 31 e4             	xor    %r12d,%r12d
  116fd2:	4d 8d 04 86          	lea    (%r14,%rax,4),%r8
  116fd6:	48 63 c6             	movslq %esi,%rax
  116fd9:	4c 8d 14 81          	lea    (%rcx,%rax,4),%r10
  116fdd:	31 c0                	xor    %eax,%eax
    for (int out_c = 0; out_c < output_depth; ++out_c) {
  116fdf:	41 39 c5             	cmp    %eax,%r13d
  116fe2:	7e 63                	jle    117047 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x266>
  116fe4:	4c 8b 9d 60 fe ff ff 	mov    -0x1a0(%rbp),%r11
  116feb:	49 63 cc             	movslq %r12d,%rcx
      float total = 0.f;
  116fee:	0f 57 c0             	xorps  %xmm0,%xmm0
  116ff1:	4d 8d 1c 8b          	lea    (%r11,%rcx,4),%r11
    for (int out_c = 0; out_c < output_depth; ++out_c) {
  116ff5:	31 c9                	xor    %ecx,%ecx
      for (int d = 0; d < accum_depth; ++d) {
  116ff7:	39 ca                	cmp    %ecx,%edx
  116ff9:	7e 15                	jle    117010 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22f>
        total += input_data[b * accum_depth + d] *
  116ffb:	f3 41 0f 10 0c 8a    	movss  (%r10,%rcx,4),%xmm1
  117001:	f3 41 0f 59 0c 8b    	mulss  (%r11,%rcx,4),%xmm1
  117007:	48 ff c1             	inc    %rcx
  11700a:	f3 0f 58 c1          	addss  %xmm1,%xmm0
      for (int d = 0; d < accum_depth; ++d) {
  11700e:	eb e7                	jmp    116ff7 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x216>
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
  117010:	0f 57 c9             	xorps  %xmm1,%xmm1
      if (bias_data) {
  117013:	48 85 db             	test   %rbx,%rbx
  117016:	74 05                	je     11701d <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23c>
        bias_value = bias_data[out_c];
  117018:	f3 0f 10 0c 83       	movss  (%rbx,%rax,4),%xmm1
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
  11701d:	f3 0f 58 c1          	addss  %xmm1,%xmm0
	return __b;
  117021:	f3 0f 10 95 78 fe ff 	movss  -0x188(%rbp),%xmm2
  117028:	ff 
	return __b;
  117029:	f3 0f 10 9d 74 fe ff 	movss  -0x18c(%rbp),%xmm3
  117030:	ff 
  117031:	41 01 d4             	add    %edx,%r12d
	return __b;
  117034:	f3 0f 5f d0          	maxss  %xmm0,%xmm2
	return __b;
  117038:	f3 0f 5d da          	minss  %xmm2,%xmm3
  11703c:	f3 41 0f 11 1c 80    	movss  %xmm3,(%r8,%rax,4)
    for (int out_c = 0; out_c < output_depth; ++out_c) {
  117042:	48 ff c0             	inc    %rax
  117045:	eb 98                	jmp    116fdf <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
  for (int b = 0; b < batches; ++b) {
  117047:	41 ff c1             	inc    %r9d
  11704a:	44 01 ef             	add    %r13d,%edi
  11704d:	01 d6                	add    %edx,%esi
  11704f:	e9 68 ff ff ff       	jmp    116fbc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1db>
          tflite::micro::GetTensorShape(input),
  117054:	48 8d bd 80 fe ff ff 	lea    -0x180(%rbp),%rdi
  11705b:	e8 20 8c ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
  117060:	48 8d bd a0 fe ff ff 	lea    -0x160(%rbp),%rdi
  117067:	e8 14 8c ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
  11706c:	48 8d bd c0 fe ff ff 	lea    -0x140(%rbp),%rdi
  117073:	e8 08 8c ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
  117078:	48 8d bd e0 fe ff ff 	lea    -0x120(%rbp),%rdi
  11707f:	e8 fc 8b ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
    }
  }
  return kTfLiteOk;
  117084:	31 c0                	xor    %eax,%eax
  117086:	e9 7b 03 00 00       	jmp    117406 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x625>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
  11708b:	31 d2                	xor    %edx,%edx
  11708d:	48 89 95 68 fe ff ff 	mov    %rdx,-0x198(%rbp)
  117094:	48 85 c0             	test   %rax,%rax
  117097:	74 0a                	je     1170a3 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c2>
  117099:	48 8b 00             	mov    (%rax),%rax
  11709c:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
          tflite::micro::GetTensorShape(output),
  1170a3:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
  1170aa:	e8 96 04 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  1170af:	4d 85 ed             	test   %r13,%r13
  1170b2:	0f 84 4d fd ff ff    	je     116e05 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24>
  return reinterpret_cast<const T*>(tensor->data.raw);
  1170b8:	49 8b 45 00          	mov    0x0(%r13),%rax
          tflite::micro::GetTensorShape(bias),
  1170bc:	4c 89 ee             	mov    %r13,%rsi
  1170bf:	48 8d bd 40 ff ff ff 	lea    -0xc0(%rbp),%rdi
  1170c6:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
  1170cd:	e8 73 04 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  1170d2:	4d 85 e4             	test   %r12,%r12
  1170d5:	0f 84 2a fd ff ff    	je     116e05 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24>
  return reinterpret_cast<const T*>(tensor->data.raw);
  1170db:	49 8b 04 24          	mov    (%r12),%rax
          tflite::micro::GetTensorShape(filter),
  1170df:	4c 89 e6             	mov    %r12,%rsi
  1170e2:	48 8d bd 20 ff ff ff 	lea    -0xe0(%rbp),%rdi
  1170e9:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
  1170f0:	e8 50 04 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  1170f5:	49 8b 07             	mov    (%r15),%rax
          tflite::micro::GetTensorShape(input),
  1170f8:	4c 89 fe             	mov    %r15,%rsi
  1170fb:	48 8d bd 00 ff ff ff 	lea    -0x100(%rbp),%rdi
  117102:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
  117109:	e8 37 04 00 00       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          FullyConnectedParamsQuantized(data),
  11710e:	4c 89 f6             	mov    %r14,%rsi
  117111:	48 8d 7d a8          	lea    -0x58(%rbp),%rdi
  117115:	e8 0e 03 00 00       	call   117428 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
  const int32_t input_offset = params.input_offset;
  11711a:	8b 45 a8             	mov    -0x58(%rbp),%eax
  inline int32_t DimensionsCount() const { return size_; }
  11711d:	44 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%r15d
  const int32_t filter_offset = params.weights_offset;
  const int32_t output_offset = params.output_offset;
  const int32_t output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  117124:	8b 5d b8             	mov    -0x48(%rbp),%ebx
  const int32_t output_activation_min = params.quantized_activation_min;
  117127:	44 8b 6d bc          	mov    -0x44(%rbp),%r13d
  const int32_t input_offset = params.input_offset;
  11712b:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%rbp)
  const int32_t filter_offset = params.weights_offset;
  117131:	8b 45 ac             	mov    -0x54(%rbp),%eax
  const int32_t output_activation_max = params.quantized_activation_max;
  117134:	44 8b 75 c0          	mov    -0x40(%rbp),%r14d
  const int32_t filter_offset = params.weights_offset;
  117138:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%rbp)
  const int32_t output_offset = params.output_offset;
  11713e:	8b 45 b0             	mov    -0x50(%rbp),%eax
  117141:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%rbp)
  const int32_t output_multiplier = params.output_multiplier;
  117147:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  11714a:	89 85 70 fe ff ff    	mov    %eax,-0x190(%rbp)
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
  117150:	41 83 ff 01          	cmp    $0x1,%r15d
  117154:	0f 8e ab fc ff ff    	jle    116e05 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
  11715a:	83 bd 60 ff ff ff 02 	cmpl   $0x2,-0xa0(%rbp)
  117161:	0f 85 9e fc ff ff    	jne    116e05 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
  117167:	45 39 f5             	cmp    %r14d,%r13d
  11716a:	0f 8f 95 fc ff ff    	jg     116e05 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
  117170:	31 f6                	xor    %esi,%esi
  117172:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
  117179:	e8 16 8b ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(1);
  11717e:	be 01 00 00 00       	mov    $0x1,%esi
  117183:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
  const int batches = output_shape.Dims(0);
  11718a:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%rbp)
  const int output_depth = output_shape.Dims(1);
  117190:	e8 ff 8a ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
  117195:	41 8d 77 fe          	lea    -0x2(%r15),%esi
  117199:	48 8d bd 20 ff ff ff 	lea    -0xe0(%rbp),%rdi
  const int output_depth = output_shape.Dims(1);
  1171a0:	41 89 c4             	mov    %eax,%r12d
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
  1171a3:	e8 ec 8a ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  1171a8:	41 39 c4             	cmp    %eax,%r12d
  1171ab:	0f 8f 54 fc ff ff    	jg     116e05 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  1171b1:	41 8d 77 ff          	lea    -0x1(%r15),%esi
  1171b5:	48 8d bd 20 ff ff ff 	lea    -0xe0(%rbp),%rdi
  1171bc:	e8 d3 8a ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  int right_shift = shift > 0 ? 0 : -shift;
  1171c1:	89 de                	mov    %ebx,%esi
  1171c3:	f7 de                	neg    %esi
  1171c5:	41 89 c0             	mov    %eax,%r8d
  for (int b = 0; b < batches; ++b) {
  1171c8:	31 c0                	xor    %eax,%eax
  1171ca:	85 db                	test   %ebx,%ebx
  1171cc:	0f 4e c6             	cmovle %esi,%eax
  1171cf:	31 f6                	xor    %esi,%esi
  1171d1:	45 31 d2             	xor    %r10d,%r10d
  1171d4:	89 85 78 fe ff ff    	mov    %eax,-0x188(%rbp)
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
  1171da:	8a 8d 78 fe ff ff    	mov    -0x188(%rbp),%cl
  1171e0:	b8 01 00 00 00       	mov    $0x1,%eax
  1171e5:	48 d3 e0             	shl    %cl,%rax
  1171e8:	ff c8                	dec    %eax
  1171ea:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%rbp)
  return a >> offset;
  1171f0:	d1 f8                	sar    %eax
  1171f2:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%rbp)
  1171f8:	31 c0                	xor    %eax,%eax
  1171fa:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%rbp)
  int left_shift = shift > 0 ? shift : 0;
  117200:	31 c0                	xor    %eax,%eax
  117202:	85 db                	test   %ebx,%ebx
  117204:	0f 49 c3             	cmovns %ebx,%eax
  117207:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%rbp)
  std::int64_t b_64(b);
  11720d:	48 63 85 70 fe ff ff 	movslq -0x190(%rbp),%rax
  117214:	48 89 85 18 fe ff ff 	mov    %rax,-0x1e8(%rbp)
  11721b:	44 39 95 44 fe ff ff 	cmp    %r10d,-0x1bc(%rbp)
  117222:	0f 8e 82 01 00 00    	jle    1173aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c9>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
      int32_t acc = 0;
      for (int d = 0; d < accum_depth; ++d) {
        int32_t input_val = input_data[b * accum_depth + d];
  117228:	48 63 85 5c fe ff ff 	movslq -0x1a4(%rbp),%rax
  11722f:	48 8b 95 38 fe ff ff 	mov    -0x1c8(%rbp),%rdx
  for (int b = 0; b < batches; ++b) {
  117236:	45 31 c9             	xor    %r9d,%r9d
  117239:	31 ff                	xor    %edi,%edi
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
      acc += output_offset;
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
  11723b:	48 8b 9d 68 fe ff ff 	mov    -0x198(%rbp),%rbx
        int32_t input_val = input_data[b * accum_depth + d];
  117242:	48 01 d0             	add    %rdx,%rax
  117245:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
  11724c:	48 63 c6             	movslq %esi,%rax
  11724f:	48 01 d8             	add    %rbx,%rax
  117252:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
    for (int out_c = 0; out_c < output_depth; ++out_c) {
  117259:	41 39 fc             	cmp    %edi,%r12d
  11725c:	0f 8e 36 01 00 00    	jle    117398 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5b7>
        int32_t filter_val = filter_data[out_c * accum_depth + d];
  117262:	48 8b 9d 50 fe ff ff 	mov    -0x1b0(%rbp),%rbx
  117269:	4d 63 d9             	movslq %r9d,%r11
      for (int d = 0; d < accum_depth; ++d) {
  11726c:	31 d2                	xor    %edx,%edx
      int32_t acc = 0;
  11726e:	31 c0                	xor    %eax,%eax
        int32_t filter_val = filter_data[out_c * accum_depth + d];
  117270:	49 01 db             	add    %rbx,%r11
      for (int d = 0; d < accum_depth; ++d) {
  117273:	41 39 d0             	cmp    %edx,%r8d
  117276:	7e 2d                	jle    1172a5 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4c4>
        int32_t filter_val = filter_data[out_c * accum_depth + d];
  117278:	41 0f be 0c 13       	movsbl (%r11,%rdx,1),%ecx
        acc += (filter_val + filter_offset) * (input_val + input_offset);
  11727d:	8b 9d 4c fe ff ff    	mov    -0x1b4(%rbp),%ebx
  117283:	01 d9                	add    %ebx,%ecx
        int32_t input_val = input_data[b * accum_depth + d];
  117285:	48 8b 9d 30 fe ff ff 	mov    -0x1d0(%rbp),%rbx
  11728c:	44 0f be 3c 13       	movsbl (%rbx,%rdx,1),%r15d
        acc += (filter_val + filter_offset) * (input_val + input_offset);
  117291:	8b 9d 58 fe ff ff    	mov    -0x1a8(%rbp),%ebx
  117297:	48 ff c2             	inc    %rdx
  11729a:	41 01 df             	add    %ebx,%r15d
  11729d:	41 0f af cf          	imul   %r15d,%ecx
  1172a1:	01 c8                	add    %ecx,%eax
      for (int d = 0; d < accum_depth; ++d) {
  1172a3:	eb ce                	jmp    117273 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x492>
      if (bias_data) {
  1172a5:	48 83 bd 60 fe ff ff 	cmpq   $0x0,-0x1a0(%rbp)
  1172ac:	00 
  1172ad:	74 0a                	je     1172b9 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4d8>
        acc += bias_data[out_c];
  1172af:	48 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%rdx
  1172b6:	03 04 ba             	add    (%rdx,%rdi,4),%eax
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
  1172b9:	8a 8d 24 fe ff ff    	mov    -0x1dc(%rbp),%cl
  std::int64_t ab_64 = a_64 * b_64;
  1172bf:	48 8b 95 18 fe ff ff 	mov    -0x1e8(%rbp),%rdx
  1172c6:	d3 e0                	shl    %cl,%eax
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  1172c8:	39 85 70 fe ff ff    	cmp    %eax,-0x190(%rbp)
  1172ce:	41 0f 94 c3          	sete   %r11b
  1172d2:	3d 00 00 00 80       	cmp    $0x80000000,%eax
  std::int64_t a_64(a);
  1172d7:	48 98                	cltq   
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  1172d9:	0f 94 c1             	sete   %cl
  std::int64_t ab_64 = a_64 * b_64;
  1172dc:	48 0f af c2          	imul   %rdx,%rax
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
  1172e0:	48 99                	cqto   
  1172e2:	81 e2 01 00 00 80    	and    $0x80000001,%edx
  1172e8:	81 c2 00 00 00 40    	add    $0x40000000,%edx
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  1172ee:	41 84 cb             	test   %cl,%r11b
  1172f1:	74 0b                	je     1172fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x51d>
  assert(exponent <= 31);
  1172f3:	83 bd 78 fe ff ff 1f 	cmpl   $0x1f,-0x188(%rbp)
  1172fa:	7e 44                	jle    117340 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x55f>
  1172fc:	eb 09                	jmp    117307 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x526>
  1172fe:	83 bd 78 fe ff ff 1f 	cmpl   $0x1f,-0x188(%rbp)
  117305:	7e 19                	jle    117320 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x53f>
  117307:	b9 57 fb 11 00       	mov    $0x11fb57,%ecx
  11730c:	ba 66 fb 11 00       	mov    $0x11fb66,%edx
  117311:	be 67 01 00 00       	mov    $0x167,%esi
  117316:	bf bb fb 11 00       	mov    $0x11fbbb,%edi
  11731b:	e8 50 ba fe ff       	call   102d70 <__assert_func>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  117320:	48 63 d2             	movslq %edx,%rdx
  117323:	bb 00 00 00 80       	mov    $0x80000000,%ebx
  return a & b;
  117328:	8b 8d 74 fe ff ff    	mov    -0x18c(%rbp),%ecx
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  11732e:	48 01 d0             	add    %rdx,%rax
  117331:	48 99                	cqto   
  117333:	48 f7 fb             	idiv   %rbx
  std::int32_t ab_x2_high32 =
  117336:	41 89 c3             	mov    %eax,%r11d
  return a & b;
  117339:	21 c1                	and    %eax,%ecx
  return a ? BitNot(zero) : zero;
  11733b:	c1 f8 1f             	sar    $0x1f,%eax
  11733e:	eb 0e                	jmp    11734e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x56d>
  return a & b;
  117340:	8b 8d 74 fe ff ff    	mov    -0x18c(%rbp),%ecx
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  117346:	41 bb ff ff ff 7f    	mov    $0x7fffffff,%r11d
  return a ? BitNot(zero) : zero;
  11734c:	31 c0                	xor    %eax,%eax
  return a + b;
  11734e:	8b 95 40 fe ff ff    	mov    -0x1c0(%rbp),%edx
  return a & b;
  117354:	83 e0 01             	and    $0x1,%eax
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
  117357:	48 8b 9d 28 fe ff ff 	mov    -0x1d8(%rbp),%rbx
  return a + b;
  11735e:	01 d0                	add    %edx,%eax
      acc += output_offset;
  117360:	8b 95 48 fe ff ff    	mov    -0x1b8(%rbp),%edx
  return a ? BitNot(zero) : zero;
  117366:	39 c1                	cmp    %eax,%ecx
  return a >> offset;
  117368:	8a 8d 78 fe ff ff    	mov    -0x188(%rbp),%cl
  return a & b;
  11736e:	0f 9f c0             	setg   %al
  117371:	0f b6 c0             	movzbl %al,%eax
  return a >> offset;
  117374:	41 d3 fb             	sar    %cl,%r11d
  return a + b;
  117377:	44 01 d8             	add    %r11d,%eax
  11737a:	01 d0                	add    %edx,%eax
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
  11737c:	44 39 e8             	cmp    %r13d,%eax
  11737f:	41 0f 4c c5          	cmovl  %r13d,%eax
  117383:	44 39 f0             	cmp    %r14d,%eax
  117386:	41 0f 4f c6          	cmovg  %r14d,%eax
  11738a:	45 01 c1             	add    %r8d,%r9d
  11738d:	88 04 3b             	mov    %al,(%rbx,%rdi,1)
    for (int out_c = 0; out_c < output_depth; ++out_c) {
  117390:	48 ff c7             	inc    %rdi
  117393:	e9 c1 fe ff ff       	jmp    117259 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x478>
  for (int b = 0; b < batches; ++b) {
  117398:	44 01 85 5c fe ff ff 	add    %r8d,-0x1a4(%rbp)
  11739f:	41 ff c2             	inc    %r10d
  1173a2:	44 01 e6             	add    %r12d,%esi
  1173a5:	e9 71 fe ff ff       	jmp    11721b <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x43a>
          tflite::micro::GetTensorShape(input),
  1173aa:	48 8d bd 00 ff ff ff 	lea    -0x100(%rbp),%rdi
  1173b1:	e8 ca 88 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(filter),
  1173b6:	48 8d bd 20 ff ff ff 	lea    -0xe0(%rbp),%rdi
  1173bd:	e8 be 88 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(bias),
  1173c2:	48 8d bd 40 ff ff ff 	lea    -0xc0(%rbp),%rdi
  1173c9:	e8 b2 88 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
          tflite::micro::GetTensorShape(output),
  1173ce:	48 8d bd 60 ff ff ff 	lea    -0xa0(%rbp),%rdi
  1173d5:	e9 a5 fc ff ff       	jmp    11707f <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29e>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
  1173da:	89 cf                	mov    %ecx,%edi
  1173dc:	89 8d 78 fe ff ff    	mov    %ecx,-0x188(%rbp)
  1173e2:	4c 8b 63 28          	mov    0x28(%rbx),%r12
  1173e6:	e8 96 c1 ff ff       	call   113581 <TfLiteTypeGetName>
  1173eb:	8b 8d 78 fe ff ff    	mov    -0x188(%rbp),%ecx
  1173f1:	be 0b fe 11 00       	mov    $0x11fe0b,%esi
  1173f6:	48 89 df             	mov    %rbx,%rdi
  1173f9:	48 89 c2             	mov    %rax,%rdx
  1173fc:	31 c0                	xor    %eax,%eax
  1173fe:	41 ff d4             	call   *%r12
      return kTfLiteError;
  117401:	b8 01 00 00 00       	mov    $0x1,%eax
}
  117406:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
  11740d:	5b                   	pop    %rbx
  11740e:	41 5c                	pop    %r12
  117410:	41 5d                	pop    %r13
  117412:	41 5e                	pop    %r14
  117414:	41 5f                	pop    %r15
  117416:	5d                   	pop    %rbp
  117417:	c3                   	ret    

0000000000117418 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
  117418:	48 89 f8             	mov    %rdi,%rax
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
  11741b:	be 00 c2 11 00       	mov    $0x11c200,%esi
  117420:	b9 10 00 00 00       	mov    $0x10,%ecx
  117425:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
}
  117427:	c3                   	ret    

0000000000117428 <_ZN6tflite29FullyConnectedParamsQuantizedERKNS_20OpDataFullyConnectedE>:
const int kFullyConnectedOutputTensor = 0;

FullyConnectedParams FullyConnectedParamsQuantized(
    const OpDataFullyConnected& op_data) {
  FullyConnectedParams op_params;
  op_params.input_offset = -op_data.input_zero_point;
  117428:	8b 56 14             	mov    0x14(%rsi),%edx
    const OpDataFullyConnected& op_data) {
  11742b:	48 89 f8             	mov    %rdi,%rax
  op_params.input_offset = -op_data.input_zero_point;
  11742e:	f7 da                	neg    %edx
  117430:	89 17                	mov    %edx,(%rdi)
  op_params.weights_offset = -op_data.filter_zero_point;
  117432:	8b 56 18             	mov    0x18(%rsi),%edx
  117435:	f7 da                	neg    %edx
  117437:	89 57 04             	mov    %edx,0x4(%rdi)
  op_params.output_offset = op_data.output_zero_point;
  11743a:	8b 56 1c             	mov    0x1c(%rsi),%edx
  11743d:	89 57 08             	mov    %edx,0x8(%rdi)
  op_params.output_multiplier = op_data.output_multiplier;
  117440:	48 8b 16             	mov    (%rsi),%rdx
  117443:	48 89 57 0c          	mov    %rdx,0xc(%rdi)
  op_params.output_shift = op_data.output_shift;
  op_params.quantized_activation_min = op_data.output_activation_min;
  117447:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  11744b:	48 89 57 14          	mov    %rdx,0x14(%rdi)
  op_params.quantized_activation_max = op_data.output_activation_max;
  return op_params;
}
  11744f:	c3                   	ret    

0000000000117450 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:

FullyConnectedParams FullyConnectedParamsFloat(
    TfLiteFusedActivation activation) {
  117450:	48 89 f8             	mov    %rdi,%rax
  if (activation == kTfLiteActRelu) {
  117453:	83 fe 01             	cmp    $0x1,%esi
  117456:	74 14                	je     11746c <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x1c>
  } else if (activation == kTfLiteActRelu6) {
  117458:	83 fe 03             	cmp    $0x3,%esi
  11745b:	74 1c                	je     117479 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x29>
  } else if (activation == kTfLiteActReluN1To1) {
  11745d:	f3 0f 10 0d b3 6b 00 	movss  0x6bb3(%rip),%xmm1        # 11e018 <_ZN6tflite16kConvInputTensorE+0x8>
  117464:	00 
  117465:	83 fe 02             	cmp    $0x2,%esi
  117468:	75 05                	jne    11746f <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x1f>
  11746a:	eb 1a                	jmp    117486 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x36>
  11746c:	0f 57 c9             	xorps  %xmm1,%xmm1
  11746f:	f3 0f 10 05 9d 6b 00 	movss  0x6b9d(%rip),%xmm0        # 11e014 <_ZN6tflite16kConvInputTensorE+0x4>
  117476:	00 
  117477:	eb 1d                	jmp    117496 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x46>
  117479:	f3 0f 10 05 77 6b 00 	movss  0x6b77(%rip),%xmm0        # 11dff8 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0xc>
  117480:	00 
  117481:	0f 57 c9             	xorps  %xmm1,%xmm1
  117484:	eb 10                	jmp    117496 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x46>
  117486:	f3 0f 10 0d 6e 6b 00 	movss  0x6b6e(%rip),%xmm1        # 11dffc <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x10>
  11748d:	00 
  11748e:	f3 0f 10 05 6a 6b 00 	movss  0x6b6a(%rip),%xmm0        # 11e000 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x14>
  117495:	00 
    *activation_min = 0;
  117496:	f3 0f 11 48 1c       	movss  %xmm1,0x1c(%rax)
    *activation_max = std::numeric_limits<T>::max();
  11749b:	f3 0f 11 40 20       	movss  %xmm0,0x20(%rax)
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
                           &op_params.float_activation_max);
  return op_params;
}
  1174a0:	c3                   	ret    

00000000001174a1 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
  1174a1:	55                   	push   %rbp

    return CalculateActivationRangeQuantized(context, activation, output,
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
  1174a2:	31 c0                	xor    %eax,%eax
    OpDataFullyConnected* data) {
  1174a4:	48 89 e5             	mov    %rsp,%rbp
  1174a7:	41 57                	push   %r15
  1174a9:	41 56                	push   %r14
  1174ab:	41 55                	push   %r13
  1174ad:	41 54                	push   %r12
  1174af:	53                   	push   %rbx
  1174b0:	48 83 ec 28          	sub    $0x28,%rsp
  if (data_type != kTfLiteFloat32) {
  1174b4:	ff ca                	dec    %edx
    OpDataFullyConnected* data) {
  1174b6:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  1174ba:	4c 8b 7d 10          	mov    0x10(%rbp),%r15
  1174be:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
  if (data_type != kTfLiteFloat32) {
  1174c2:	74 72                	je     117536 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x95>
  1174c4:	49 89 cd             	mov    %rcx,%r13
  1174c7:	4d 89 c4             	mov    %r8,%r12
  1174ca:	41 89 f6             	mov    %esi,%r14d
  1174cd:	4c 89 c9             	mov    %r9,%rcx
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
  1174d0:	4d 89 f8             	mov    %r15,%r8
  1174d3:	4c 8d 4d c8          	lea    -0x38(%rbp),%r9
  1174d7:	4c 89 e2             	mov    %r12,%rdx
  1174da:	4c 89 ee             	mov    %r13,%rsi
    double real_multiplier = 0.0;
  1174dd:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  1174e4:	00 
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
  1174e5:	e8 60 c2 ff ff       	call   11374a <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
  1174ea:	85 c0                	test   %eax,%eax
  1174ec:	75 48                	jne    117536 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x95>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
  1174ee:	f2 0f 10 45 c8       	movsd  -0x38(%rbp),%xmm0
  1174f3:	48 8d 73 04          	lea    0x4(%rbx),%rsi
  1174f7:	48 89 df             	mov    %rbx,%rdi
  1174fa:	e8 97 c0 ff ff       	call   113596 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    data->input_zero_point = input->params.zero_point;
  1174ff:	41 8b 45 1c          	mov    0x1c(%r13),%eax
  117503:	89 43 14             	mov    %eax,0x14(%rbx)
    TFLITE_DCHECK(filter->params.zero_point == 0);
  117506:	41 83 7c 24 1c 00    	cmpl   $0x0,0x1c(%r12)
  11750c:	74 05                	je     117513 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x72>
  11750e:	e8 b1 a8 ff ff       	call   111dc4 <abort>
    data->filter_zero_point = filter->params.zero_point;
  117513:	31 c0                	xor    %eax,%eax
    return CalculateActivationRangeQuantized(context, activation, output,
  117515:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  117519:	48 8d 4b 08          	lea    0x8(%rbx),%rcx
  11751d:	4c 8d 43 0c          	lea    0xc(%rbx),%r8
    data->filter_zero_point = filter->params.zero_point;
  117521:	89 43 18             	mov    %eax,0x18(%rbx)
    data->output_zero_point = output->params.zero_point;
  117524:	41 8b 47 1c          	mov    0x1c(%r15),%eax
    return CalculateActivationRangeQuantized(context, activation, output,
  117528:	4c 89 fa             	mov    %r15,%rdx
  11752b:	44 89 f6             	mov    %r14d,%esi
    data->output_zero_point = output->params.zero_point;
  11752e:	89 43 1c             	mov    %eax,0x1c(%rbx)
    return CalculateActivationRangeQuantized(context, activation, output,
  117531:	e8 81 c2 ff ff       	call   1137b7 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
}
  117536:	48 83 c4 28          	add    $0x28,%rsp
  11753a:	5b                   	pop    %rbx
  11753b:	41 5c                	pop    %r12
  11753d:	41 5d                	pop    %r13
  11753f:	41 5e                	pop    %r14
  117541:	41 5f                	pop    %r15
  117543:	5d                   	pop    %rbp
  117544:	c3                   	ret    

0000000000117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
  117545:	55                   	push   %rbp
  117546:	48 89 e5             	mov    %rsp,%rbp
  117549:	41 55                	push   %r13
  11754b:	41 54                	push   %r12
  11754d:	53                   	push   %rbx
  11754e:	48 89 fb             	mov    %rdi,%rbx
  117551:	41 50                	push   %r8
  if (tensor == nullptr || tensor->dims == nullptr) {
  117553:	48 85 f6             	test   %rsi,%rsi
  117556:	74 09                	je     117561 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x1c>
  117558:	4c 8b 6e 08          	mov    0x8(%rsi),%r13
  11755c:	4d 85 ed             	test   %r13,%r13
  11755f:	75 06                	jne    117567 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x22>
  RuntimeShape() : size_(0) {}
  117561:	31 c9                	xor    %ecx,%ecx
  117563:	89 0b                	mov    %ecx,(%rbx)
  117565:	eb 39                	jmp    1175a0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x5b>
    return RuntimeShape();
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  117567:	4d 63 65 00          	movslq 0x0(%r13),%r12
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  11756b:	49 83 c5 04          	add    $0x4,%r13
  const int dims_size = dims->size;
  11756f:	4c 89 e0             	mov    %r12,%rax
    size_ = dimensions_count;
  117572:	44 89 23             	mov    %r12d,(%rbx)
      dims_pointer_ = new int32_t[dimensions_count];
  117575:	49 c1 e4 02          	shl    $0x2,%r12
    if (dimensions_count > kMaxSmallSize) {
  117579:	83 f8 05             	cmp    $0x5,%eax
  11757c:	7f 06                	jg     117584 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3f>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  11757e:	48 8d 43 08          	lea    0x8(%rbx),%rax
  117582:	eb 11                	jmp    117595 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x50>
      dims_pointer_ = new int32_t[dimensions_count];
  117584:	4c 89 e7             	mov    %r12,%rdi
  117587:	e8 0d 37 00 00       	call   11ac99 <_Znam>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  11758c:	83 3b 05             	cmpl   $0x5,(%rbx)
      dims_pointer_ = new int32_t[dimensions_count];
  11758f:	48 89 43 08          	mov    %rax,0x8(%rbx)
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  117593:	7e e9                	jle    11757e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x39>
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  117595:	48 89 c7             	mov    %rax,%rdi
  117598:	4c 89 ee             	mov    %r13,%rsi
  11759b:	4c 89 e1             	mov    %r12,%rcx
  11759e:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  return RuntimeShape(dims_size, dims_data);
}
  1175a0:	5a                   	pop    %rdx
  1175a1:	48 89 d8             	mov    %rbx,%rax
  1175a4:	5b                   	pop    %rbx
  1175a5:	41 5c                	pop    %r12
  1175a7:	41 5d                	pop    %r13
  1175a9:	5d                   	pop    %rbp
  1175aa:	c3                   	ret    

00000000001175ab <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
  switch (padding) {
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
  1175ab:	b0 01                	mov    $0x1,%al
  switch (padding) {
  1175ad:	83 ff 01             	cmp    $0x1,%edi
  1175b0:	74 08                	je     1175ba <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0xf>
  1175b2:	83 ff 02             	cmp    $0x2,%edi
  1175b5:	0f 94 c0             	sete   %al
  1175b8:	01 c0                	add    %eax,%eax
      return PaddingType::kValid;
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
  }
}
  1175ba:	c3                   	ret    

00000000001175bb <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcm>:
  }
  return kTfLiteOk;
}

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  1175bb:	48 8b 47 70          	mov    0x70(%rdi),%rax
  1175bf:	48 85 c0             	test   %rax,%rax
  1175c2:	75 09                	jne    1175cd <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcm+0x12>
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  1175c4:	55                   	push   %rbp
  1175c5:	48 89 e5             	mov    %rsp,%rbp
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  1175c8:	e8 f7 a7 ff ff       	call   111dc4 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpDataPooling));
  1175cd:	be 20 00 00 00       	mov    $0x20,%esi
  1175d2:	ff e0                	jmp    *%rax

00000000001175d4 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
  1175d4:	55                   	push   %rbp
  1175d5:	48 89 e5             	mov    %rsp,%rbp
  1175d8:	41 55                	push   %r13
  1175da:	41 54                	push   %r12
  1175dc:	53                   	push   %rbx
  1175dd:	48 83 ec 18          	sub    $0x18,%rsp
  TFLITE_DCHECK(node->builtin_data != nullptr);
  1175e1:	4c 8b 6e 28          	mov    0x28(%rsi),%r13
  1175e5:	4d 85 ed             	test   %r13,%r13
  1175e8:	75 05                	jne    1175ef <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x1b>
  1175ea:	e8 d5 a7 ff ff       	call   111dc4 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
  1175ef:	48 8b 4e 20          	mov    0x20(%rsi),%rcx
  1175f3:	49 89 f4             	mov    %rsi,%r12
  1175f6:	48 85 c9             	test   %rcx,%rcx
  1175f9:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  1175fd:	74 eb                	je     1175ea <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x16>
  return GetMutableEvalInput(context, node, index);
  1175ff:	8b 15 3b 6a 00 00    	mov    0x6a3b(%rip),%edx        # 11e040 <_ZN6tflite19kPoolingInputTensorE>
  117605:	48 89 fb             	mov    %rdi,%rbx
  117608:	e8 0f ce ff ff       	call   11441c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
  11760d:	8b 15 29 6a 00 00    	mov    0x6a29(%rip),%edx        # 11e03c <_ZN6tflite20kPoolingOutputTensorE>
  117613:	48 89 df             	mov    %rbx,%rdi
  117616:	4c 89 e6             	mov    %r12,%rsi
  117619:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  11761d:	e8 1d ce ff ff       	call   11443f <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  switch (input->type) {
  117622:	4c 8b 45 d8          	mov    -0x28(%rbp),%r8
  117626:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
  11762a:	49 89 c1             	mov    %rax,%r9
  switch (input->type) {
  11762d:	41 8b 78 10          	mov    0x10(%r8),%edi
  117631:	83 ff 01             	cmp    $0x1,%edi
  117634:	74 15                	je     11764b <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x77>
  117636:	83 ff 09             	cmp    $0x9,%edi
  117639:	75 22                	jne    11765d <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x89>
      AveragePoolingEvalQuantized(context, node, params, data, input, output);
  11763b:	4c 89 ea             	mov    %r13,%rdx
  11763e:	4c 89 e6             	mov    %r12,%rsi
  117641:	48 89 df             	mov    %rbx,%rdi
  117644:	e8 ad 0b 00 00       	call   1181f6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>
      break;
  117649:	eb 0e                	jmp    117659 <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0x85>
      AveragePoolingEvalFloat(context, node, params, data, input, output);
  11764b:	4c 89 ea             	mov    %r13,%rdx
  11764e:	4c 89 e6             	mov    %r12,%rsi
  117651:	48 89 df             	mov    %rbx,%rdi
  117654:	e8 37 08 00 00       	call   117e90 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>
  return kTfLiteOk;
  117659:	31 c0                	xor    %eax,%eax
  11765b:	eb 1e                	jmp    11767b <_ZN6tflite12_GLOBAL__N_111AverageEvalEP13TfLiteContextP10TfLiteNode+0xa7>
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
  11765d:	4c 8b 63 28          	mov    0x28(%rbx),%r12
  117661:	e8 1b bf ff ff       	call   113581 <TfLiteTypeGetName>
  117666:	be 5a 01 12 00       	mov    $0x12015a,%esi
  11766b:	48 89 df             	mov    %rbx,%rdi
  11766e:	48 89 c2             	mov    %rax,%rdx
  117671:	31 c0                	xor    %eax,%eax
  117673:	41 ff d4             	call   *%r12
      return kTfLiteError;
  117676:	b8 01 00 00 00       	mov    $0x1,%eax
}
  11767b:	48 83 c4 18          	add    $0x18,%rsp
  11767f:	5b                   	pop    %rbx
  117680:	41 5c                	pop    %r12
  117682:	41 5d                	pop    %r13
  117684:	5d                   	pop    %rbp
  117685:	c3                   	ret    

0000000000117686 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
  117686:	55                   	push   %rbp
  117687:	48 89 e5             	mov    %rsp,%rbp
  11768a:	41 55                	push   %r13
  11768c:	41 54                	push   %r12
  11768e:	53                   	push   %rbx
  11768f:	48 83 ec 18          	sub    $0x18,%rsp
  TFLITE_DCHECK(node->builtin_data != nullptr);
  117693:	4c 8b 6e 28          	mov    0x28(%rsi),%r13
  117697:	4d 85 ed             	test   %r13,%r13
  11769a:	75 05                	jne    1176a1 <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x1b>
  11769c:	e8 23 a7 ff ff       	call   111dc4 <abort>
  TFLITE_DCHECK(node->user_data != nullptr);
  1176a1:	48 8b 4e 20          	mov    0x20(%rsi),%rcx
  1176a5:	49 89 f4             	mov    %rsi,%r12
  1176a8:	48 85 c9             	test   %rcx,%rcx
  1176ab:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  1176af:	74 eb                	je     11769c <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x16>
  1176b1:	8b 15 89 69 00 00    	mov    0x6989(%rip),%edx        # 11e040 <_ZN6tflite19kPoolingInputTensorE>
  1176b7:	48 89 fb             	mov    %rdi,%rbx
  1176ba:	e8 5d cd ff ff       	call   11441c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
  1176bf:	8b 15 77 69 00 00    	mov    0x6977(%rip),%edx        # 11e03c <_ZN6tflite20kPoolingOutputTensorE>
  1176c5:	48 89 df             	mov    %rbx,%rdi
  1176c8:	4c 89 e6             	mov    %r12,%rsi
  1176cb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  1176cf:	e8 6b cd ff ff       	call   11443f <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  switch (input->type) {
  1176d4:	4c 8b 45 d8          	mov    -0x28(%rbp),%r8
  1176d8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
      micro::GetEvalOutput(context, node, kPoolingOutputTensor);
  1176dc:	49 89 c1             	mov    %rax,%r9
  switch (input->type) {
  1176df:	41 8b 78 10          	mov    0x10(%r8),%edi
  1176e3:	83 ff 01             	cmp    $0x1,%edi
  1176e6:	74 15                	je     1176fd <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x77>
  1176e8:	83 ff 09             	cmp    $0x9,%edi
  1176eb:	75 22                	jne    11770f <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x89>
      MaxPoolingEvalQuantized(context, node, params, data, input, output);
  1176ed:	4c 89 ea             	mov    %r13,%rdx
  1176f0:	4c 89 e6             	mov    %r12,%rsi
  1176f3:	48 89 df             	mov    %rbx,%rdi
  1176f6:	e8 41 0f 00 00       	call   11863c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
      break;
  1176fb:	eb 0e                	jmp    11770b <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0x85>
      MaxPoolingEvalFloat(context, node, params, data, input, output);
  1176fd:	4c 89 ea             	mov    %r13,%rdx
  117700:	4c 89 e6             	mov    %r12,%rsi
  117703:	48 89 df             	mov    %rbx,%rdi
  117706:	e8 87 0e 00 00       	call   118592 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>
  return kTfLiteOk;
  11770b:	31 c0                	xor    %eax,%eax
  11770d:	eb 1e                	jmp    11772d <_ZN6tflite12_GLOBAL__N_17MaxEvalEP13TfLiteContextP10TfLiteNode+0xa7>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
  11770f:	4c 8b 63 28          	mov    0x28(%rbx),%r12
  117713:	e8 69 be ff ff       	call   113581 <TfLiteTypeGetName>
  117718:	be 83 01 12 00       	mov    $0x120183,%esi
  11771d:	48 89 df             	mov    %rbx,%rdi
  117720:	48 89 c2             	mov    %rax,%rdx
  117723:	31 c0                	xor    %eax,%eax
  117725:	41 ff d4             	call   *%r12
      return kTfLiteError;
  117728:	b8 01 00 00 00       	mov    $0x1,%eax
}
  11772d:	48 83 c4 18          	add    $0x18,%rsp
  117731:	5b                   	pop    %rbx
  117732:	41 5c                	pop    %r12
  117734:	41 5d                	pop    %r13
  117736:	5d                   	pop    %rbp
  117737:	c3                   	ret    

0000000000117738 <_ZN6tflite20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
  117738:	48 89 f8             	mov    %rdi,%rax
          /*prepare=*/PoolingPrepare,
          /*invoke=*/MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
  11773b:	be 80 c2 11 00       	mov    $0x11c280,%esi
  117740:	b9 10 00 00 00       	mov    $0x10,%ecx
  117745:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
}
  117747:	c3                   	ret    

0000000000117748 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:
  return true;
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8_t* input_data, const RuntimeShape& output_shape,
                    int8_t* output_data) {
  117748:	55                   	push   %rbp
  117749:	48 89 e5             	mov    %rsp,%rbp
  11774c:	41 57                	push   %r15
  11774e:	41 56                	push   %r14
  117750:	41 55                	push   %r13
  117752:	41 54                	push   %r12
  117754:	53                   	push   %rbx
  117755:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  TFLITE_DCHECK_LE(params.quantized_activation_min,
  11775c:	8b 47 20             	mov    0x20(%rdi),%eax
                    int8_t* output_data) {
  11775f:	48 89 75 b8          	mov    %rsi,-0x48(%rbp)
  117763:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
  TFLITE_DCHECK_LE(params.quantized_activation_min,
  11776a:	8b 57 1c             	mov    0x1c(%rdi),%edx
                    int8_t* output_data) {
  11776d:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  117771:	4c 89 85 68 ff ff ff 	mov    %r8,-0x98(%rbp)
  TFLITE_DCHECK_LE(params.quantized_activation_min,
  117778:	39 c2                	cmp    %eax,%edx
  11777a:	7e 05                	jle    117781 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x39>
  11777c:	e8 43 a6 ff ff       	call   111dc4 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
  117781:	83 fa 80             	cmp    $0xffffff80,%edx
  117784:	7c f6                	jl     11777c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x34>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
  117786:	83 f8 7f             	cmp    $0x7f,%eax
  117789:	7f f1                	jg     11777c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x34>
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
  11778b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  11778f:	83 38 04             	cmpl   $0x4,(%rax)
  117792:	75 e8                	jne    11777c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x34>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
  117794:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  117798:	83 38 04             	cmpl   $0x4,(%rax)
  11779b:	75 df                	jne    11777c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x34>
  11779d:	48 89 fb             	mov    %rdi,%rbx
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  1177a0:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  1177a4:	31 c9                	xor    %ecx,%ecx
  1177a6:	48 89 c2             	mov    %rax,%rdx
  1177a9:	31 f6                	xor    %esi,%esi
  1177ab:	e8 20 cd ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  1177b0:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  1177b4:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  1177b8:	b9 03 00 00 00       	mov    $0x3,%ecx
  1177bd:	be 03 00 00 00       	mov    $0x3,%esi
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  1177c2:	89 45 98             	mov    %eax,-0x68(%rbp)
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  1177c5:	e8 06 cd ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
  1177ca:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  1177ce:	be 01 00 00 00       	mov    $0x1,%esi
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  1177d3:	89 45 94             	mov    %eax,-0x6c(%rbp)
  const int input_height = input_shape.Dims(1);
  1177d6:	e8 b9 84 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
  1177db:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  1177df:	be 02 00 00 00       	mov    $0x2,%esi
  const int input_height = input_shape.Dims(1);
  1177e4:	89 45 90             	mov    %eax,-0x70(%rbp)
  const int input_width = input_shape.Dims(2);
  1177e7:	e8 a8 84 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
  1177ec:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  1177f0:	be 01 00 00 00       	mov    $0x1,%esi
  const int input_width = input_shape.Dims(2);
  1177f5:	89 45 8c             	mov    %eax,-0x74(%rbp)
  const int output_height = output_shape.Dims(1);
  1177f8:	e8 97 84 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
  1177fd:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  117801:	be 02 00 00 00       	mov    $0x2,%esi
  const int output_height = output_shape.Dims(1);
  117806:	89 45 88             	mov    %eax,-0x78(%rbp)
  const int output_width = output_shape.Dims(2);
  117809:	e8 86 84 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
  11780e:	31 c9                	xor    %ecx,%ecx
  const int output_width = output_shape.Dims(2);
  117810:	89 45 84             	mov    %eax,-0x7c(%rbp)
  const int stride_height = params.stride_height;
  117813:	8b 43 0c             	mov    0xc(%rbx),%eax
  for (int batch = 0; batch < batches; ++batch) {
  117816:	89 4d ac             	mov    %ecx,-0x54(%rbp)
  const int stride_height = params.stride_height;
  117819:	89 45 80             	mov    %eax,-0x80(%rbp)
  const int stride_width = params.stride_width;
  11781c:	8b 43 10             	mov    0x10(%rbx),%eax
  11781f:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
  for (int batch = 0; batch < batches; ++batch) {
  117825:	8b 7d 98             	mov    -0x68(%rbp),%edi
  117828:	39 7d ac             	cmp    %edi,-0x54(%rbp)
  11782b:	0f 8d a1 01 00 00    	jge    1179d2 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x28a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
  117831:	31 c0                	xor    %eax,%eax
  for (int batch = 0; batch < batches; ++batch) {
  117833:	45 31 ff             	xor    %r15d,%r15d
    for (int out_y = 0; out_y < output_height; ++out_y) {
  117836:	89 45 a8             	mov    %eax,-0x58(%rbp)
  117839:	8b 75 88             	mov    -0x78(%rbp),%esi
  11783c:	39 75 a8             	cmp    %esi,-0x58(%rbp)
  11783f:	0f 8d 85 01 00 00    	jge    1179ca <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x282>
      for (int out_x = 0; out_x < output_width; ++out_x) {
  117845:	31 d2                	xor    %edx,%edx
  117847:	89 55 a0             	mov    %edx,-0x60(%rbp)
  11784a:	89 55 a4             	mov    %edx,-0x5c(%rbp)
  11784d:	8b 4d 84             	mov    -0x7c(%rbp),%ecx
  117850:	39 4d a4             	cmp    %ecx,-0x5c(%rbp)
  117853:	0f 8d 63 01 00 00    	jge    1179bc <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x274>
        for (int channel = 0; channel < depth; ++channel) {
  117859:	45 31 c0             	xor    %r8d,%r8d
  11785c:	8b 45 94             	mov    -0x6c(%rbp),%eax
  11785f:	41 39 c0             	cmp    %eax,%r8d
  117862:	0f 8d 43 01 00 00    	jge    1179ab <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x263>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
  117868:	44 0f bf 63 04       	movswl 0x4(%rbx),%r12d
          const int in_y_origin =
  11786d:	44 89 f8             	mov    %r15d,%eax
          const int in_x_origin =
  117870:	44 8b 5d a0          	mov    -0x60(%rbp),%r11d
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          int8_t max = std::numeric_limits<int8_t>::lowest();
  117874:	c6 45 cf 80          	movb   $0x80,-0x31(%rbp)
              (out_x * stride_width) - params.padding_values.width;
  117878:	44 0f bf 6b 02       	movswl 0x2(%rbx),%r13d
              std::min(params.filter_width, input_width - in_x_origin);
  11787d:	44 8b 4d 8c          	mov    -0x74(%rbp),%r9d
          const int in_y_origin =
  117881:	44 29 e0             	sub    %r12d,%eax
              std::min(params.filter_height, input_height - in_y_origin);
  117884:	44 8b 75 90          	mov    -0x70(%rbp),%r14d
          const int in_y_origin =
  117888:	89 45 9c             	mov    %eax,-0x64(%rbp)
          const int filter_x_start = std::max(0, -in_x_origin);
  11788b:	8b 45 a0             	mov    -0x60(%rbp),%eax
          const int in_x_origin =
  11788e:	45 29 eb             	sub    %r13d,%r11d
          const int filter_x_start = std::max(0, -in_x_origin);
  117891:	41 29 c5             	sub    %eax,%r13d
      if (__a < __b)
  117894:	b8 00 00 00 00       	mov    $0x0,%eax
  117899:	44 0f 48 e8          	cmovs  %eax,%r13d
    min(const _Tp& __a, const _Tp& __b)
  11789d:	8b 43 18             	mov    0x18(%rbx),%eax
              std::min(params.filter_width, input_width - in_x_origin);
  1178a0:	45 29 d9             	sub    %r11d,%r9d
  1178a3:	41 39 c1             	cmp    %eax,%r9d
  1178a6:	44 0f 4f c8          	cmovg  %eax,%r9d
          const int filter_y_start = std::max(0, -in_y_origin);
  1178aa:	45 29 fc             	sub    %r15d,%r12d
      if (__a < __b)
  1178ad:	b8 00 00 00 00       	mov    $0x0,%eax
  1178b2:	44 0f 48 e0          	cmovs  %eax,%r12d
              std::min(params.filter_height, input_height - in_y_origin);
  1178b6:	8b 45 9c             	mov    -0x64(%rbp),%eax
  1178b9:	41 29 c6             	sub    %eax,%r14d
  1178bc:	8b 43 14             	mov    0x14(%rbx),%eax
  1178bf:	41 39 c6             	cmp    %eax,%r14d
  1178c2:	44 0f 4f f0          	cmovg  %eax,%r14d
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
  1178c6:	45 39 f4             	cmp    %r14d,%r12d
  1178c9:	0f 8d 97 00 00 00    	jge    117966 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x21e>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
  1178cf:	8b 45 9c             	mov    -0x64(%rbp),%eax
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  1178d2:	45 89 ea             	mov    %r13d,%r10d
              const int in_y = in_y_origin + filter_y;
  1178d5:	44 01 e0             	add    %r12d,%eax
  1178d8:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
  1178de:	8a 45 cf             	mov    -0x31(%rbp),%al
  1178e1:	88 85 7b ff ff ff    	mov    %al,-0x85(%rbp)
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  1178e7:	45 39 ca             	cmp    %r9d,%r10d
  1178ea:	7d 72                	jge    11795e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x216>
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
  1178ec:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
  1178f2:	8b 75 ac             	mov    -0x54(%rbp),%esi
              const int in_x = in_x_origin + filter_x;
  1178f5:	43 8d 0c 1a          	lea    (%r10,%r11,1),%ecx
  1178f9:	44 89 8d 54 ff ff ff 	mov    %r9d,-0xac(%rbp)
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
  117900:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
              const int in_x = in_x_origin + filter_x;
  117904:	44 89 9d 58 ff ff ff 	mov    %r11d,-0xa8(%rbp)
  11790b:	44 89 95 5c ff ff ff 	mov    %r10d,-0xa4(%rbp)
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
  117912:	44 89 85 60 ff ff ff 	mov    %r8d,-0xa0(%rbp)
  117919:	e8 45 cb ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  11791e:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
  117925:	44 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%r8d
  11792c:	48 98                	cltq   
  11792e:	44 8b 95 5c ff ff ff 	mov    -0xa4(%rbp),%r10d
  117935:	44 8b 9d 58 ff ff ff 	mov    -0xa8(%rbp),%r11d
  11793c:	48 01 c8             	add    %rcx,%rax
  11793f:	8a 8d 7b ff ff ff    	mov    -0x85(%rbp),%cl
  117945:	44 8b 8d 54 ff ff ff 	mov    -0xac(%rbp),%r9d
  11794c:	38 08                	cmp    %cl,(%rax)
  11794e:	7f 04                	jg     117954 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x20c>
      return __a;
  117950:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
              max = std::max(
  117954:	8a 00                	mov    (%rax),%al
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  117956:	41 ff c2             	inc    %r10d
              max = std::max(
  117959:	88 45 cf             	mov    %al,-0x31(%rbp)
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  11795c:	eb 80                	jmp    1178de <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x196>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
  11795e:	41 ff c4             	inc    %r12d
  117961:	e9 60 ff ff ff       	jmp    1178c6 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x17e>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
          max = std::min<int8_t>(max, params.quantized_activation_max);
  117966:	8a 53 1c             	mov    0x1c(%rbx),%dl
  117969:	8a 45 cf             	mov    -0x31(%rbp),%al
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
  11796c:	44 89 45 9c          	mov    %r8d,-0x64(%rbp)
  117970:	8b 75 ac             	mov    -0x54(%rbp),%esi
  117973:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  117976:	38 d0                	cmp    %dl,%al
  117978:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  11797c:	0f 4c c2             	cmovl  %edx,%eax
  11797f:	8a 53 20             	mov    0x20(%rbx),%dl
  117982:	38 d0                	cmp    %dl,%al
  117984:	0f 4e d0             	cmovle %eax,%edx
  117987:	41 89 d4             	mov    %edx,%r12d
  11798a:	8b 55 a8             	mov    -0x58(%rbp),%edx
  11798d:	e8 d1 ca ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  117992:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
        for (int channel = 0; channel < depth; ++channel) {
  117999:	44 8b 45 9c          	mov    -0x64(%rbp),%r8d
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
  11799d:	48 98                	cltq   
  11799f:	44 88 24 06          	mov    %r12b,(%rsi,%rax,1)
        for (int channel = 0; channel < depth; ++channel) {
  1179a3:	41 ff c0             	inc    %r8d
  1179a6:	e9 b1 fe ff ff       	jmp    11785c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x114>
      for (int out_x = 0; out_x < output_width; ++out_x) {
  1179ab:	8b bd 7c ff ff ff    	mov    -0x84(%rbp),%edi
  1179b1:	ff 45 a4             	incl   -0x5c(%rbp)
  1179b4:	01 7d a0             	add    %edi,-0x60(%rbp)
  1179b7:	e9 91 fe ff ff       	jmp    11784d <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x105>
    for (int out_y = 0; out_y < output_height; ++out_y) {
  1179bc:	8b 45 80             	mov    -0x80(%rbp),%eax
  1179bf:	ff 45 a8             	incl   -0x58(%rbp)
  1179c2:	41 01 c7             	add    %eax,%r15d
  1179c5:	e9 6f fe ff ff       	jmp    117839 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xf1>
  for (int batch = 0; batch < batches; ++batch) {
  1179ca:	ff 45 ac             	incl   -0x54(%rbp)
  1179cd:	e9 53 fe ff ff       	jmp    117825 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xdd>
              static_cast<int8_t>(max);
        }
      }
    }
  }
}
  1179d2:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  1179d9:	5b                   	pop    %rbx
  1179da:	41 5c                	pop    %r12
  1179dc:	41 5d                	pop    %r13
  1179de:	41 5e                	pop    %r14
  1179e0:	41 5f                	pop    %r15
  1179e2:	5d                   	pop    %rbp
  1179e3:	c3                   	ret    

00000000001179e4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
  1179e4:	55                   	push   %rbp
  1179e5:	48 89 e5             	mov    %rsp,%rbp
  1179e8:	41 57                	push   %r15
  1179ea:	41 56                	push   %r14
  1179ec:	41 55                	push   %r13
  1179ee:	41 54                	push   %r12
  1179f0:	53                   	push   %rbx
  1179f1:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
  1179f8:	83 3e 04             	cmpl   $0x4,(%rsi)
                    float* output_data) {
  1179fb:	48 89 75 b8          	mov    %rsi,-0x48(%rbp)
  1179ff:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
  117a06:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  117a0a:	4c 89 85 68 ff ff ff 	mov    %r8,-0x98(%rbp)
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
  117a11:	74 05                	je     117a18 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x34>
  117a13:	e8 ac a3 ff ff       	call   111dc4 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
  117a18:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  117a1c:	83 38 04             	cmpl   $0x4,(%rax)
  117a1f:	75 f2                	jne    117a13 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x2f>
  117a21:	48 89 fb             	mov    %rdi,%rbx
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  117a24:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  117a28:	31 c9                	xor    %ecx,%ecx
  117a2a:	48 89 c2             	mov    %rax,%rdx
  117a2d:	31 f6                	xor    %esi,%esi
  117a2f:	e8 9c ca ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  117a34:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  117a38:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  117a3c:	b9 03 00 00 00       	mov    $0x3,%ecx
  117a41:	be 03 00 00 00       	mov    $0x3,%esi
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  117a46:	89 45 98             	mov    %eax,-0x68(%rbp)
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  117a49:	e8 82 ca ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
  117a4e:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  117a52:	be 01 00 00 00       	mov    $0x1,%esi
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  117a57:	89 45 94             	mov    %eax,-0x6c(%rbp)
  const int input_height = input_shape.Dims(1);
  117a5a:	e8 35 82 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
  117a5f:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  117a63:	be 02 00 00 00       	mov    $0x2,%esi
  const int input_height = input_shape.Dims(1);
  117a68:	89 45 90             	mov    %eax,-0x70(%rbp)
  const int input_width = input_shape.Dims(2);
  117a6b:	e8 24 82 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
  117a70:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  117a74:	be 01 00 00 00       	mov    $0x1,%esi
  const int input_width = input_shape.Dims(2);
  117a79:	89 45 8c             	mov    %eax,-0x74(%rbp)
  const int output_height = output_shape.Dims(1);
  117a7c:	e8 13 82 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
  117a81:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
  117a85:	be 02 00 00 00       	mov    $0x2,%esi
  const int output_height = output_shape.Dims(1);
  117a8a:	89 45 88             	mov    %eax,-0x78(%rbp)
  const int output_width = output_shape.Dims(2);
  117a8d:	e8 02 82 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
  117a92:	31 c9                	xor    %ecx,%ecx
  const int output_width = output_shape.Dims(2);
  117a94:	89 45 84             	mov    %eax,-0x7c(%rbp)
  const int stride_height = params.stride_height;
  117a97:	8b 43 0c             	mov    0xc(%rbx),%eax
  for (int batch = 0; batch < batches; ++batch) {
  117a9a:	89 4d ac             	mov    %ecx,-0x54(%rbp)
  const int stride_height = params.stride_height;
  117a9d:	89 45 80             	mov    %eax,-0x80(%rbp)
  const int stride_width = params.stride_width;
  117aa0:	8b 43 10             	mov    0x10(%rbx),%eax
  117aa3:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
  for (int batch = 0; batch < batches; ++batch) {
  117aa9:	8b 75 98             	mov    -0x68(%rbp),%esi
  117aac:	39 75 ac             	cmp    %esi,-0x54(%rbp)
  117aaf:	0f 8d e2 01 00 00    	jge    117c97 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x2b3>
    for (int out_y = 0; out_y < output_height; ++out_y) {
  117ab5:	31 c0                	xor    %eax,%eax
  for (int batch = 0; batch < batches; ++batch) {
  117ab7:	45 31 f6             	xor    %r14d,%r14d
    for (int out_y = 0; out_y < output_height; ++out_y) {
  117aba:	89 45 a8             	mov    %eax,-0x58(%rbp)
  117abd:	8b 4d 88             	mov    -0x78(%rbp),%ecx
  117ac0:	39 4d a8             	cmp    %ecx,-0x58(%rbp)
  117ac3:	0f 8d c6 01 00 00    	jge    117c8f <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x2ab>
      for (int out_x = 0; out_x < output_width; ++out_x) {
  117ac9:	31 d2                	xor    %edx,%edx
    for (int out_y = 0; out_y < output_height; ++out_y) {
  117acb:	45 31 ff             	xor    %r15d,%r15d
      for (int out_x = 0; out_x < output_width; ++out_x) {
  117ace:	89 55 a4             	mov    %edx,-0x5c(%rbp)
  117ad1:	8b 55 84             	mov    -0x7c(%rbp),%edx
  117ad4:	39 55 a4             	cmp    %edx,-0x5c(%rbp)
  117ad7:	0f 8d a4 01 00 00    	jge    117c81 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x29d>
        for (int channel = 0; channel < depth; ++channel) {
  117add:	45 31 c0             	xor    %r8d,%r8d
  117ae0:	8b 45 94             	mov    -0x6c(%rbp),%eax
  117ae3:	41 39 c0             	cmp    %eax,%r8d
  117ae6:	0f 8d 84 01 00 00    	jge    117c70 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x28c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
  117aec:	44 0f bf 6b 02       	movswl 0x2(%rbx),%r13d
          const int in_x_origin =
  117af1:	44 89 f8             	mov    %r15d,%eax
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
  117af4:	44 0f bf 63 04       	movswl 0x4(%rbx),%r12d
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          float max = std::numeric_limits<float>::lowest();
  117af9:	c7 45 cc ff ff 7f ff 	movl   $0xff7fffff,-0x34(%rbp)
              std::min(params.filter_width, input_width - in_x_origin);
  117b00:	44 8b 55 8c          	mov    -0x74(%rbp),%r10d
              std::min(params.filter_height, input_height - in_y_origin);
  117b04:	44 8b 4d 90          	mov    -0x70(%rbp),%r9d
          const int in_x_origin =
  117b08:	44 29 e8             	sub    %r13d,%eax
  117b0b:	89 45 a0             	mov    %eax,-0x60(%rbp)
          const int in_y_origin =
  117b0e:	44 89 f0             	mov    %r14d,%eax
  117b11:	44 29 e0             	sub    %r12d,%eax
          const int filter_x_start = std::max(0, -in_x_origin);
  117b14:	45 29 fd             	sub    %r15d,%r13d
          const int in_y_origin =
  117b17:	89 45 9c             	mov    %eax,-0x64(%rbp)
      if (__a < __b)
  117b1a:	b8 00 00 00 00       	mov    $0x0,%eax
  117b1f:	44 0f 48 e8          	cmovs  %eax,%r13d
              std::min(params.filter_width, input_width - in_x_origin);
  117b23:	8b 45 a0             	mov    -0x60(%rbp),%eax
  117b26:	41 29 c2             	sub    %eax,%r10d
  117b29:	8b 43 18             	mov    0x18(%rbx),%eax
  117b2c:	41 39 c2             	cmp    %eax,%r10d
  117b2f:	44 0f 4f d0          	cmovg  %eax,%r10d
          const int filter_y_start = std::max(0, -in_y_origin);
  117b33:	45 29 f4             	sub    %r14d,%r12d
  117b36:	b8 00 00 00 00       	mov    $0x0,%eax
  117b3b:	44 0f 48 e0          	cmovs  %eax,%r12d
              std::min(params.filter_height, input_height - in_y_origin);
  117b3f:	8b 45 9c             	mov    -0x64(%rbp),%eax
  117b42:	41 29 c1             	sub    %eax,%r9d
  117b45:	8b 43 14             	mov    0x14(%rbx),%eax
  117b48:	41 39 c1             	cmp    %eax,%r9d
  117b4b:	44 0f 4f c8          	cmovg  %eax,%r9d
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
  117b4f:	45 39 cc             	cmp    %r9d,%r12d
  117b52:	0f 8d b3 00 00 00    	jge    117c0b <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x227>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
  117b58:	8b 45 9c             	mov    -0x64(%rbp),%eax
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  117b5b:	45 89 eb             	mov    %r13d,%r11d
              const int in_y = in_y_origin + filter_y;
  117b5e:	44 01 e0             	add    %r12d,%eax
  117b61:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  117b67:	f3 0f 10 45 cc       	movss  -0x34(%rbp),%xmm0
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  117b6c:	45 39 d3             	cmp    %r10d,%r11d
  117b6f:	0f 8d 8e 00 00 00    	jge    117c03 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x21f>
              const int in_x = in_x_origin + filter_x;
  117b75:	8b 45 a0             	mov    -0x60(%rbp),%eax
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
  117b78:	8b 75 ac             	mov    -0x54(%rbp),%esi
  117b7b:	44 89 8d 54 ff ff ff 	mov    %r9d,-0xac(%rbp)
  117b82:	8b 95 78 ff ff ff    	mov    -0x88(%rbp),%edx
  117b88:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  117b8c:	44 89 95 58 ff ff ff 	mov    %r10d,-0xa8(%rbp)
              const int in_x = in_x_origin + filter_x;
  117b93:	41 8d 0c 03          	lea    (%r11,%rax,1),%ecx
  117b97:	44 89 9d 60 ff ff ff 	mov    %r11d,-0xa0(%rbp)
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
  117b9e:	44 89 85 64 ff ff ff 	mov    %r8d,-0x9c(%rbp)
  117ba5:	f3 0f 11 85 5c ff ff 	movss  %xmm0,-0xa4(%rbp)
  117bac:	ff 
  117bad:	e8 b1 c8 ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  117bb2:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  117bb9:	f3 0f 10 85 5c ff ff 	movss  -0xa4(%rbp),%xmm0
  117bc0:	ff 
  117bc1:	48 98                	cltq   
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  117bc3:	44 8b 9d 60 ff ff ff 	mov    -0xa0(%rbp),%r11d
  117bca:	44 8b 85 64 ff ff ff 	mov    -0x9c(%rbp),%r8d
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
  117bd1:	48 8d 04 82          	lea    (%rdx,%rax,4),%rax
      return __a;
  117bd5:	48 8d 55 cc          	lea    -0x34(%rbp),%rdx
  117bd9:	44 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%r10d
  117be0:	44 8b 8d 54 ff ff ff 	mov    -0xac(%rbp),%r9d
      if (__a < __b)
  117be7:	f3 0f 10 08          	movss  (%rax),%xmm1
  117beb:	0f 2f c8             	comiss %xmm0,%xmm1
      return __a;
  117bee:	48 0f 46 c2          	cmovbe %rdx,%rax
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  117bf2:	41 ff c3             	inc    %r11d
              max = std::max(
  117bf5:	f3 0f 10 00          	movss  (%rax),%xmm0
  117bf9:	f3 0f 11 45 cc       	movss  %xmm0,-0x34(%rbp)
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  117bfe:	e9 64 ff ff ff       	jmp    117b67 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x183>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
  117c03:	41 ff c4             	inc    %r12d
  117c06:	e9 44 ff ff ff       	jmp    117b4f <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16b>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
                                           params.float_activation_max);
  117c0b:	f3 0f 10 43 28       	movss  0x28(%rbx),%xmm0
              ActivationFunctionWithMinMax(max, params.float_activation_min,
  117c10:	f3 0f 10 4d cc       	movss  -0x34(%rbp),%xmm1
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
  117c15:	44 89 45 a0          	mov    %r8d,-0x60(%rbp)
  117c19:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  117c1c:	8b 55 a8             	mov    -0x58(%rbp),%edx
  117c1f:	8b 75 ac             	mov    -0x54(%rbp),%esi
  117c22:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
                                           params.float_activation_max);
  117c26:	f3 0f 11 85 78 ff ff 	movss  %xmm0,-0x88(%rbp)
  117c2d:	ff 
              ActivationFunctionWithMinMax(max, params.float_activation_min,
  117c2e:	44 8b 63 24          	mov    0x24(%rbx),%r12d
  117c32:	f3 0f 11 4d 9c       	movss  %xmm1,-0x64(%rbp)
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
  117c37:	e8 27 c8 ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
	return __b;
  117c3c:	f3 0f 10 4d 9c       	movss  -0x64(%rbp),%xmm1
  117c41:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
  117c48:	66 41 0f 6e d4       	movd   %r12d,%xmm2
      return __a;
  117c4d:	f3 0f 10 85 78 ff ff 	movss  -0x88(%rbp),%xmm0
  117c54:	ff 
        for (int channel = 0; channel < depth; ++channel) {
  117c55:	44 8b 45 a0          	mov    -0x60(%rbp),%r8d
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
  117c59:	48 98                	cltq   
	return __b;
  117c5b:	f3 0f 5f d1          	maxss  %xmm1,%xmm2
        for (int channel = 0; channel < depth; ++channel) {
  117c5f:	41 ff c0             	inc    %r8d
      return __a;
  117c62:	f3 0f 5d c2          	minss  %xmm2,%xmm0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
  117c66:	f3 0f 11 04 81       	movss  %xmm0,(%rcx,%rax,4)
        for (int channel = 0; channel < depth; ++channel) {
  117c6b:	e9 70 fe ff ff       	jmp    117ae0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xfc>
      for (int out_x = 0; out_x < output_width; ++out_x) {
  117c70:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  117c76:	ff 45 a4             	incl   -0x5c(%rbp)
  117c79:	41 01 c7             	add    %eax,%r15d
  117c7c:	e9 50 fe ff ff       	jmp    117ad1 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xed>
    for (int out_y = 0; out_y < output_height; ++out_y) {
  117c81:	8b 45 80             	mov    -0x80(%rbp),%eax
  117c84:	ff 45 a8             	incl   -0x58(%rbp)
  117c87:	41 01 c6             	add    %eax,%r14d
  117c8a:	e9 2e fe ff ff       	jmp    117abd <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xd9>
  for (int batch = 0; batch < batches; ++batch) {
  117c8f:	ff 45 ac             	incl   -0x54(%rbp)
  117c92:	e9 12 fe ff ff       	jmp    117aa9 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xc5>
        }
      }
    }
  }
}
  117c97:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  117c9e:	5b                   	pop    %rbx
  117c9f:	41 5c                	pop    %r12
  117ca1:	41 5d                	pop    %r13
  117ca3:	41 5e                	pop    %r14
  117ca5:	41 5f                	pop    %r15
  117ca7:	5d                   	pop    %rbp
  117ca8:	c3                   	ret    

0000000000117ca9 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>:

TfLiteStatus CalculateOpDataPooling(const TfLiteContext* context,
                                    const TfLitePoolParams* params,
                                    const TfLiteTensor* input,
                                    const TfLiteTensor* output,
                                    OpDataPooling* data) {
  117ca9:	55                   	push   %rbp
  117caa:	48 89 e5             	mov    %rsp,%rbp
  117cad:	41 57                	push   %r15
  117caf:	41 56                	push   %r14
  117cb1:	41 55                	push   %r13
  117cb3:	41 54                	push   %r12
  117cb5:	53                   	push   %rbx
  117cb6:	4c 89 c3             	mov    %r8,%rbx
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
  117cb9:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  117cbf:	48 83 ec 18          	sub    $0x18,%rsp
  return t->dims->data[dim];
  117cc3:	48 8b 42 10          	mov    0x10(%rdx),%rax
  int width = SizeOfDimension(input, 2);

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
  117cc7:	44 8b 76 04          	mov    0x4(%rsi),%r14d
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
      params->filter_width, params->padding, &out_height, &out_width);
  117ccb:	8b 3e                	mov    (%rsi),%edi
      params->stride_height, params->stride_width,
  117ccd:	44 8b 7e 08          	mov    0x8(%rsi),%r15d
  117cd1:	44 8b 68 08          	mov    0x8(%rax),%r13d
  117cd5:	44 8b 60 0c          	mov    0xc(%rax),%r12d
  117cd9:	44 89 f1             	mov    %r14d,%ecx
      params->filter_width, params->padding, &out_height, &out_width);
  117cdc:	8b 46 0c             	mov    0xc(%rsi),%eax
  117cdf:	89 7d c0             	mov    %edi,-0x40(%rbp)
  117ce2:	89 45 cc             	mov    %eax,-0x34(%rbp)
      /*dilation_rate_width=*/1, height, width, params->filter_height,
  117ce5:	8b 46 10             	mov    0x10(%rsi),%eax
  117ce8:	44 89 e6             	mov    %r12d,%esi
  117ceb:	8b 55 cc             	mov    -0x34(%rbp),%edx
  117cee:	89 45 c8             	mov    %eax,-0x38(%rbp)
  117cf1:	e8 b2 d8 ff ff       	call   1155a8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
  117cf6:	8b 55 c8             	mov    -0x38(%rbp),%edx
  117cf9:	8b 7d c0             	mov    -0x40(%rbp),%edi
  117cfc:	44 89 f9             	mov    %r15d,%ecx
  117cff:	44 89 ee             	mov    %r13d,%esi
  117d02:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
  117d08:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
  117d0b:	e8 98 d8 ff ff       	call   1155a8 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
      ((out_size - 1) * stride + effective_filter_size - in_size);
  117d10:	8b 7d c8             	mov    -0x38(%rbp),%edi
  total_padding = total_padding > 0 ? total_padding : 0;
  117d13:	ba 00 00 00 00       	mov    $0x0,%edx
  117d18:	b9 00 00 00 00       	mov    $0x0,%ecx
      ((out_size - 1) * stride + effective_filter_size - in_size);
  117d1d:	ff c8                	dec    %eax
  117d1f:	41 0f af c7          	imul   %r15d,%eax
  117d23:	01 f8                	add    %edi,%eax
  117d25:	8b 7d cc             	mov    -0x34(%rbp),%edi
  int total_padding =
  117d28:	44 29 e8             	sub    %r13d,%eax
  total_padding = total_padding > 0 ? total_padding : 0;
  117d2b:	0f 48 c2             	cmovs  %edx,%eax
      ((out_size - 1) * stride + effective_filter_size - in_size);
  117d2e:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  117d31:	ff ca                	dec    %edx
  117d33:	41 0f af d6          	imul   %r14d,%edx
  117d37:	01 fa                	add    %edi,%edx
  int total_padding =
  117d39:	44 29 e2             	sub    %r12d,%edx
  total_padding = total_padding > 0 ? total_padding : 0;
  117d3c:	0f 48 d1             	cmovs  %ecx,%edx
  return total_padding / 2;
  117d3f:	89 d1                	mov    %edx,%ecx
  *offset = total_padding % 2;
  117d41:	83 e2 01             	and    $0x1,%edx
  return total_padding / 2;
  117d44:	d1 f9                	sar    %ecx
  *offset = total_padding % 2;
  117d46:	89 53 08             	mov    %edx,0x8(%rbx)
  return total_padding / 2;
  117d49:	89 0b                	mov    %ecx,(%rbx)
  117d4b:	89 c1                	mov    %eax,%ecx
  *offset = total_padding % 2;
  117d4d:	83 e0 01             	and    $0x1,%eax
  return total_padding / 2;
  117d50:	d1 f9                	sar    %ecx
  *offset = total_padding % 2;
  117d52:	89 43 0c             	mov    %eax,0xc(%rbx)

  return kTfLiteOk;
}
  117d55:	31 c0                	xor    %eax,%eax
  return total_padding / 2;
  117d57:	89 4b 04             	mov    %ecx,0x4(%rbx)
  117d5a:	48 83 c4 18          	add    $0x18,%rsp
  117d5e:	5b                   	pop    %rbx
  117d5f:	41 5c                	pop    %r12
  117d61:	41 5d                	pop    %r13
  117d63:	41 5e                	pop    %r14
  117d65:	41 5f                	pop    %r15
  117d67:	5d                   	pop    %rbp
  117d68:	c3                   	ret    

0000000000117d69 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus PoolingPrepare(TfLiteContext* context, TfLiteNode* node) {
  117d69:	55                   	push   %rbp
  117d6a:	48 89 e5             	mov    %rsp,%rbp
  117d6d:	41 57                	push   %r15
  117d6f:	41 56                	push   %r14
  117d71:	41 55                	push   %r13
  117d73:	41 54                	push   %r12
  117d75:	53                   	push   %rbx
  117d76:	48 83 ec 18          	sub    $0x18,%rsp
  TFLITE_DCHECK(node->builtin_data != nullptr);
  117d7a:	4c 8b 7e 28          	mov    0x28(%rsi),%r15
  117d7e:	4d 85 ff             	test   %r15,%r15
  117d81:	75 05                	jne    117d88 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x1f>
  117d83:	e8 3c a0 ff ff       	call   111dc4 <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  TFLITE_DCHECK(node->user_data != nullptr);
  117d88:	4c 8b 66 20          	mov    0x20(%rsi),%r12
  117d8c:	4d 85 e4             	test   %r12,%r12
  117d8f:	74 f2                	je     117d83 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x1a>
  OpDataPooling* data = static_cast<OpDataPooling*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kPoolingInputTensor);
  117d91:	31 d2                	xor    %edx,%edx
  117d93:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
  117d97:	48 89 fb             	mov    %rdi,%rbx
  117d9a:	e8 24 b9 ff ff       	call   1136c3 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
  117d9f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  117da3:	48 85 c0             	test   %rax,%rax
  const TfLiteTensor* input = GetInput(context, node, kPoolingInputTensor);
  117da6:	49 89 c6             	mov    %rax,%r14
  TF_LITE_ENSURE(context, input != nullptr);
  117da9:	75 0d                	jne    117db8 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x4f>
  117dab:	41 b8 b1 fe 11 00    	mov    $0x11feb1,%r8d
  117db1:	b9 3a 00 00 00       	mov    $0x3a,%ecx
  117db6:	eb 1a                	jmp    117dd2 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x69>
  TfLiteTensor* output = GetOutput(context, node, kPoolingOutputTensor);
  117db8:	31 d2                	xor    %edx,%edx
  117dba:	48 89 df             	mov    %rbx,%rdi
  117dbd:	e8 09 b9 ff ff       	call   1136cb <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
  117dc2:	48 85 c0             	test   %rax,%rax
  117dc5:	75 28                	jne    117def <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x86>
  117dc7:	41 b8 d4 fe 11 00    	mov    $0x11fed4,%r8d
  117dcd:	b9 3c 00 00 00       	mov    $0x3c,%ecx
  117dd2:	ba a4 01 12 00       	mov    $0x1201a4,%edx
  117dd7:	be d1 f5 11 00       	mov    $0x11f5d1,%esi
  117ddc:	48 89 df             	mov    %rbx,%rdi
  117ddf:	31 c0                	xor    %eax,%eax
  117de1:	ff 53 28             	call   *0x28(%rbx)
  TF_LITE_ENSURE(context, input != nullptr);
  117de4:	41 bd 01 00 00 00    	mov    $0x1,%r13d
  117dea:	e9 8f 00 00 00       	jmp    117e7e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x115>

  TF_LITE_ENSURE_STATUS(
  117def:	4d 89 e0             	mov    %r12,%r8
  117df2:	48 89 c1             	mov    %rax,%rcx
  117df5:	4c 89 f2             	mov    %r14,%rdx
  117df8:	4c 89 fe             	mov    %r15,%rsi
  117dfb:	48 89 df             	mov    %rbx,%rdi
  117dfe:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  117e02:	e8 a2 fe ff ff       	call   117ca9 <_ZN6tflite22CalculateOpDataPoolingEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorS8_PNS_13OpDataPoolingE>
  117e07:	41 89 c5             	mov    %eax,%r13d
  117e0a:	85 c0                	test   %eax,%eax
  117e0c:	75 70                	jne    117e7e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x115>
      CalculateOpDataPooling(context, params, input, output, data));

  if (input->type == kTfLiteFloat32) {
  117e0e:	41 8b 06             	mov    (%r14),%eax
  117e11:	4c 8b 4d c8          	mov    -0x38(%rbp),%r9
  117e15:	83 f8 01             	cmp    $0x1,%eax
  117e18:	75 46                	jne    117e60 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xf7>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
  117e1a:	41 8b 47 14          	mov    0x14(%r15),%eax
  if (activation == kTfLiteActRelu) {
  117e1e:	83 f8 01             	cmp    $0x1,%eax
  117e21:	75 0b                	jne    117e2e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xc5>
    *activation_min = 0;
  117e23:	b8 ff ff 7f 7f       	mov    $0x7f7fffff,%eax
  117e28:	48 c1 e0 20          	shl    $0x20,%rax
  117e2c:	eb 2b                	jmp    117e59 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xf0>
  } else if (activation == kTfLiteActRelu6) {
  117e2e:	83 f8 03             	cmp    $0x3,%eax
  117e31:	75 0b                	jne    117e3e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xd5>
    *activation_min = 0;
  117e33:	b8 03 01 00 00       	mov    $0x103,%eax
  117e38:	48 c1 e0 36          	shl    $0x36,%rax
  117e3c:	eb 1b                	jmp    117e59 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xf0>
  } else if (activation == kTfLiteActReluN1To1) {
  117e3e:	83 f8 02             	cmp    $0x2,%eax
  117e41:	75 0c                	jne    117e4f <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xe6>
    *activation_min = -1;
  117e43:	48 b8 00 00 80 bf 00 	movabs $0x3f800000bf800000,%rax
  117e4a:	00 80 3f 
  117e4d:	eb 0a                	jmp    117e59 <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0xf0>
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
  117e4f:	48 b8 ff ff 7f ff ff 	movabs $0x7f7fffffff7fffff,%rax
  117e56:	ff 7f 7f 
  117e59:	49 89 44 24 18       	mov    %rax,0x18(%r12)
  117e5e:	eb 1e                	jmp    117e7e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x115>
                             &data->activation_max_f32);
  } else if (input->type == kTfLiteInt8) {
  117e60:	83 f8 09             	cmp    $0x9,%eax
  117e63:	75 19                	jne    117e7e <_ZN6tflite14PoolingPrepareEP13TfLiteContextP10TfLiteNode+0x115>
    CalculateActivationRangeQuantized(context, params->activation, output,
  117e65:	41 8b 77 14          	mov    0x14(%r15),%esi
  117e69:	49 8d 4c 24 10       	lea    0x10(%r12),%rcx
  117e6e:	4c 89 ca             	mov    %r9,%rdx
  117e71:	48 89 df             	mov    %rbx,%rdi
  117e74:	4d 8d 44 24 14       	lea    0x14(%r12),%r8
  117e79:	e8 39 b9 ff ff       	call   1137b7 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
                                      &data->activation_min,
                                      &data->activation_max);
  }

  return kTfLiteOk;
}
  117e7e:	48 83 c4 18          	add    $0x18,%rsp
  117e82:	44 89 e8             	mov    %r13d,%eax
  117e85:	5b                   	pop    %rbx
  117e86:	41 5c                	pop    %r12
  117e88:	41 5d                	pop    %r13
  117e8a:	41 5e                	pop    %r14
  117e8c:	41 5f                	pop    %r15
  117e8e:	5d                   	pop    %rbp
  117e8f:	c3                   	ret    

0000000000117e90 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_>:
void AveragePoolingEvalFloat(const TfLiteContext* context,
                             const TfLiteNode* node,
                             const TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
  117e90:	55                   	push   %rbp
  117e91:	4c 89 ce             	mov    %r9,%rsi
  117e94:	48 89 e5             	mov    %rsp,%rbp
  117e97:	41 57                	push   %r15
  117e99:	41 56                	push   %r14
  117e9b:	41 55                	push   %r13
  117e9d:	41 54                	push   %r12
  117e9f:	53                   	push   %rbx
  117ea0:	4c 89 c3             	mov    %r8,%rbx
  117ea3:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
  PoolParams op_params;
  op_params.stride_height = params->stride_height;
  op_params.stride_width = params->stride_width;
  op_params.filter_height = params->filter_height;
  117eaa:	8b 42 10             	mov    0x10(%rdx),%eax
  op_params.filter_width = params->filter_width;
  op_params.padding_values.height = data->padding.height;
  op_params.padding_values.width = data->padding.width;
  op_params.float_activation_min = data->activation_min_f32;
  117ead:	f3 0f 10 69 18       	movss  0x18(%rcx),%xmm5
  op_params.float_activation_max = data->activation_max_f32;
  117eb2:	f3 0f 10 71 1c       	movss  0x1c(%rcx),%xmm6
  op_params.stride_height = params->stride_height;
  117eb7:	44 8b 72 08          	mov    0x8(%rdx),%r14d
  op_params.filter_height = params->filter_height;
  117ebb:	89 45 84             	mov    %eax,-0x7c(%rbp)
  op_params.filter_width = params->filter_width;
  117ebe:	8b 42 0c             	mov    0xc(%rdx),%eax
  op_params.stride_width = params->stride_width;
  117ec1:	44 8b 7a 04          	mov    0x4(%rdx),%r15d
  op_params.float_activation_min = data->activation_min_f32;
  117ec5:	f3 0f 11 ad 68 ff ff 	movss  %xmm5,-0x98(%rbp)
  117ecc:	ff 
  op_params.filter_width = params->filter_width;
  117ecd:	89 45 80             	mov    %eax,-0x80(%rbp)
  op_params.padding_values.height = data->padding.height;
  117ed0:	8b 41 04             	mov    0x4(%rcx),%eax
  op_params.float_activation_max = data->activation_max_f32;
  117ed3:	f3 0f 11 b5 64 ff ff 	movss  %xmm6,-0x9c(%rbp)
  117eda:	ff 
  op_params.padding_values.height = data->padding.height;
  117edb:	66 89 85 6e ff ff ff 	mov    %ax,-0x92(%rbp)
  op_params.padding_values.width = data->padding.width;
  117ee2:	8b 01                	mov    (%rcx),%eax
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
  117ee4:	31 c9                	xor    %ecx,%ecx
  117ee6:	48 89 8d 78 ff ff ff 	mov    %rcx,-0x88(%rbp)
  117eed:	66 89 85 6c ff ff ff 	mov    %ax,-0x94(%rbp)
  117ef4:	4d 85 c9             	test   %r9,%r9
  117ef7:	74 0a                	je     117f03 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x73>
  117ef9:	49 8b 01             	mov    (%r9),%rax
  117efc:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
  117f03:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
  117f07:	e8 39 f6 ff ff       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  117f0c:	48 85 db             	test   %rbx,%rbx
  117f0f:	75 05                	jne    117f16 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x86>
  117f11:	e8 ae 9e ff ff       	call   111dc4 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
  117f16:	48 8b 03             	mov    (%rbx),%rax
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
  117f19:	48 89 de             	mov    %rbx,%rsi
  117f1c:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  117f20:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  117f27:	e8 19 f6 ff ff       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
  117f2c:	83 7d 90 04          	cmpl   $0x4,-0x70(%rbp)
  117f30:	75 df                	jne    117f11 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x81>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
  117f32:	83 7d b0 04          	cmpl   $0x4,-0x50(%rbp)
  117f36:	75 d9                	jne    117f11 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x81>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  117f38:	31 c9                	xor    %ecx,%ecx
  117f3a:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  117f3e:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  117f42:	31 f6                	xor    %esi,%esi
  117f44:	e8 87 c5 ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  117f49:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  117f4d:	b9 03 00 00 00       	mov    $0x3,%ecx
  117f52:	be 03 00 00 00       	mov    $0x3,%esi
  117f57:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  117f5b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  117f61:	e8 6a c5 ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
  117f66:	be 01 00 00 00       	mov    $0x1,%esi
  117f6b:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  117f6f:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%rbp)
  const int input_height = input_shape.Dims(1);
  117f75:	e8 1a 7d ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
  117f7a:	be 02 00 00 00       	mov    $0x2,%esi
  117f7f:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  const int input_height = input_shape.Dims(1);
  117f83:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
  const int input_width = input_shape.Dims(2);
  117f89:	e8 06 7d ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
  117f8e:	be 01 00 00 00       	mov    $0x1,%esi
  117f93:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
  const int input_width = input_shape.Dims(2);
  117f97:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
  const int output_height = output_shape.Dims(1);
  117f9d:	e8 f2 7c ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
  117fa2:	be 02 00 00 00       	mov    $0x2,%esi
  117fa7:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
  const int output_height = output_shape.Dims(1);
  117fab:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
  const int output_width = output_shape.Dims(2);
  117fb1:	e8 de 7c ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
  117fb6:	31 d2                	xor    %edx,%edx
  const int output_width = output_shape.Dims(2);
  117fb8:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  for (int batch = 0; batch < batches; ++batch) {
  117fbe:	89 55 8c             	mov    %edx,-0x74(%rbp)
  117fc1:	8b 5d 8c             	mov    -0x74(%rbp),%ebx
  117fc4:	39 9d 60 ff ff ff    	cmp    %ebx,-0xa0(%rbp)
  117fca:	7f 24                	jg     117ff0 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x160>
  117fcc:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  117fd0:	e8 ab 7c ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(output),
  117fd5:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
  117fd9:	e8 a2 7c ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<float>(output));
}
  117fde:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  117fe5:	5b                   	pop    %rbx
  117fe6:	41 5c                	pop    %r12
  117fe8:	41 5d                	pop    %r13
  117fea:	41 5e                	pop    %r14
  117fec:	41 5f                	pop    %r15
  117fee:	5d                   	pop    %rbp
  117fef:	c3                   	ret    
  117ff0:	0f bf 9d 6e ff ff ff 	movswl -0x92(%rbp),%ebx
  117ff7:	89 d8                	mov    %ebx,%eax
  117ff9:	f7 d8                	neg    %eax
  117ffb:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
    for (int out_y = 0; out_y < output_height; ++out_y) {
  118001:	31 c0                	xor    %eax,%eax
  118003:	89 45 88             	mov    %eax,-0x78(%rbp)
  118006:	8b 75 88             	mov    -0x78(%rbp),%esi
  118009:	39 b5 50 ff ff ff    	cmp    %esi,-0xb0(%rbp)
  11800f:	0f 8e d9 01 00 00    	jle    1181ee <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x35e>
      if (__a < __b)
  118015:	31 c0                	xor    %eax,%eax
  118017:	85 db                	test   %ebx,%ebx
  118019:	8b 55 84             	mov    -0x7c(%rbp),%edx
  11801c:	44 0f bf a5 6c ff ff 	movswl -0x94(%rbp),%r12d
  118023:	ff 
  118024:	0f 49 c3             	cmovns %ebx,%eax
  118027:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
  11802d:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
  118033:	01 d8                	add    %ebx,%eax
  118035:	39 d0                	cmp    %edx,%eax
  118037:	0f 4f c2             	cmovg  %edx,%eax
      for (int out_x = 0; out_x < output_width; ++out_x) {
  11803a:	45 31 ed             	xor    %r13d,%r13d
  11803d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
  118043:	44 89 e0             	mov    %r12d,%eax
  118046:	f7 d8                	neg    %eax
  118048:	89 85 70 ff ff ff    	mov    %eax,-0x90(%rbp)
  11804e:	44 39 ad 4c ff ff ff 	cmp    %r13d,-0xb4(%rbp)
  118055:	0f 8e 81 01 00 00    	jle    1181dc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x34c>
  11805b:	31 c0                	xor    %eax,%eax
  11805d:	45 85 e4             	test   %r12d,%r12d
  118060:	8b 55 80             	mov    -0x80(%rbp),%edx
  118063:	41 0f 49 c4          	cmovns %r12d,%eax
  118067:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
  11806d:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
  118073:	44 01 e0             	add    %r12d,%eax
  118076:	39 d0                	cmp    %edx,%eax
  118078:	0f 4f c2             	cmovg  %edx,%eax
        for (int channel = 0; channel < depth; ++channel) {
  11807b:	45 31 c0             	xor    %r8d,%r8d
  11807e:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
  118084:	44 39 85 5c ff ff ff 	cmp    %r8d,-0xa4(%rbp)
  11808b:	0f 8e 39 01 00 00    	jle    1181ca <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x33a>
          float filter_count = 0;
  118091:	0f 57 c9             	xorps  %xmm1,%xmm1
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
  118094:	44 8b 95 3c ff ff ff 	mov    -0xc4(%rbp),%r10d
          float total = 0.f;
  11809b:	0f 28 c1             	movaps %xmm1,%xmm0
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
  11809e:	44 39 95 40 ff ff ff 	cmp    %r10d,-0xc0(%rbp)
  1180a5:	0f 8e af 00 00 00    	jle    11815a <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2ca>
              const int in_y = in_y_origin + filter_y;
  1180ab:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  1180b1:	44 8b 9d 44 ff ff ff 	mov    -0xbc(%rbp),%r11d
              const int in_y = in_y_origin + filter_y;
  1180b8:	44 01 d0             	add    %r10d,%eax
  1180bb:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  1180c1:	44 39 9d 48 ff ff ff 	cmp    %r11d,-0xb8(%rbp)
  1180c8:	0f 8e 84 00 00 00    	jle    118152 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2c2>
              const int in_x = in_x_origin + filter_x;
  1180ce:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
  1180d4:	8b 95 38 ff ff ff    	mov    -0xc8(%rbp),%edx
  1180da:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  1180de:	44 89 95 24 ff ff ff 	mov    %r10d,-0xdc(%rbp)
  1180e5:	8b 75 8c             	mov    -0x74(%rbp),%esi
              const int in_x = in_x_origin + filter_x;
  1180e8:	44 89 9d 28 ff ff ff 	mov    %r11d,-0xd8(%rbp)
  1180ef:	41 8d 0c 03          	lea    (%r11,%rax,1),%ecx
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
  1180f3:	44 89 85 2c ff ff ff 	mov    %r8d,-0xd4(%rbp)
  1180fa:	f3 0f 11 8d 1c ff ff 	movss  %xmm1,-0xe4(%rbp)
  118101:	ff 
  118102:	f3 0f 11 85 20 ff ff 	movss  %xmm0,-0xe0(%rbp)
  118109:	ff 
  11810a:	e8 54 c3 ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              total +=
  11810f:	48 8b 8d 30 ff ff ff 	mov    -0xd0(%rbp),%rcx
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  118116:	44 8b 9d 28 ff ff ff 	mov    -0xd8(%rbp),%r11d
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
  11811d:	48 98                	cltq   
              total +=
  11811f:	f3 0f 10 85 20 ff ff 	movss  -0xe0(%rbp),%xmm0
  118126:	ff 
              filter_count++;
  118127:	f3 0f 10 8d 1c ff ff 	movss  -0xe4(%rbp),%xmm1
  11812e:	ff 
              total +=
  11812f:	f3 0f 58 04 81       	addss  (%rcx,%rax,4),%xmm0
              filter_count++;
  118134:	f3 0f 58 0d c4 5e 00 	addss  0x5ec4(%rip),%xmm1        # 11e000 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE+0x14>
  11813b:	00 
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  11813c:	41 ff c3             	inc    %r11d
  11813f:	44 8b 85 2c ff ff ff 	mov    -0xd4(%rbp),%r8d
  118146:	44 8b 95 24 ff ff ff 	mov    -0xdc(%rbp),%r10d
  11814d:	e9 6f ff ff ff       	jmp    1180c1 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x231>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
  118152:	41 ff c2             	inc    %r10d
  118155:	e9 44 ff ff ff       	jmp    11809e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x20e>
          if (filter_count == 0) return false;
  11815a:	0f 57 d2             	xorps  %xmm2,%xmm2
  11815d:	0f 2e ca             	ucomiss %xmm2,%xmm1
  118160:	7a 06                	jp     118168 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x2d8>
  118162:	0f 84 64 fe ff ff    	je     117fcc <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x13c>
          const float average = total / filter_count;
  118168:	f3 0f 5e c1          	divss  %xmm1,%xmm0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
  11816c:	8b 75 8c             	mov    -0x74(%rbp),%esi
  11816f:	8b 55 88             	mov    -0x78(%rbp),%edx
  118172:	44 89 e9             	mov    %r13d,%ecx
  118175:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
  118179:	44 89 85 38 ff ff ff 	mov    %r8d,-0xc8(%rbp)
          const float average = total / filter_count;
  118180:	f3 0f 11 85 2c ff ff 	movss  %xmm0,-0xd4(%rbp)
  118187:	ff 
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
  118188:	e8 d6 c2 ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
	return __b;
  11818d:	f3 0f 10 9d 68 ff ff 	movss  -0x98(%rbp),%xmm3
  118194:	ff 
  118195:	f3 0f 10 85 2c ff ff 	movss  -0xd4(%rbp),%xmm0
  11819c:	ff 
  11819d:	48 8b b5 78 ff ff ff 	mov    -0x88(%rbp),%rsi
	return __b;
  1181a4:	f3 0f 10 a5 64 ff ff 	movss  -0x9c(%rbp),%xmm4
  1181ab:	ff 
  1181ac:	48 98                	cltq   
	return __b;
  1181ae:	f3 0f 5f d8          	maxss  %xmm0,%xmm3
        for (int channel = 0; channel < depth; ++channel) {
  1181b2:	44 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%r8d
  1181b9:	41 ff c0             	inc    %r8d
	return __b;
  1181bc:	f3 0f 5d e3          	minss  %xmm3,%xmm4
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
  1181c0:	f3 0f 11 24 86       	movss  %xmm4,(%rsi,%rax,4)
        for (int channel = 0; channel < depth; ++channel) {
  1181c5:	e9 ba fe ff ff       	jmp    118084 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1f4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
  1181ca:	44 01 bd 70 ff ff ff 	add    %r15d,-0x90(%rbp)
  1181d1:	41 ff c5             	inc    %r13d
  1181d4:	45 29 fc             	sub    %r15d,%r12d
  1181d7:	e9 72 fe ff ff       	jmp    11804e <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x1be>
    for (int out_y = 0; out_y < output_height; ++out_y) {
  1181dc:	ff 45 88             	incl   -0x78(%rbp)
  1181df:	44 29 f3             	sub    %r14d,%ebx
  1181e2:	44 01 b5 74 ff ff ff 	add    %r14d,-0x8c(%rbp)
  1181e9:	e9 18 fe ff ff       	jmp    118006 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x176>
  for (int batch = 0; batch < batches; ++batch) {
  1181ee:	ff 45 8c             	incl   -0x74(%rbp)
  1181f1:	e9 cb fd ff ff       	jmp    117fc1 <_ZN6tflite23AveragePoolingEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSC_+0x131>

00000000001181f6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_>:

void AveragePoolingEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
                                 const TfLitePoolParams* params,
                                 const OpDataPooling* data,
                                 const TfLiteEvalTensor* input,
                                 TfLiteEvalTensor* output) {
  1181f6:	55                   	push   %rbp
  1181f7:	48 89 e5             	mov    %rsp,%rbp
  1181fa:	41 57                	push   %r15
  1181fc:	41 56                	push   %r14
  1181fe:	41 55                	push   %r13
  118200:	41 54                	push   %r12
  118202:	53                   	push   %rbx
  118203:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  TFLITE_DCHECK(input->type == kTfLiteInt8);
  11820a:	41 83 78 10 09       	cmpl   $0x9,0x10(%r8)
  11820f:	74 05                	je     118216 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x20>
  118211:	e8 ae 9b ff ff       	call   111dc4 <abort>

  PoolParams op_params;
  op_params.stride_height = params->stride_height;
  118216:	8b 42 08             	mov    0x8(%rdx),%eax
  118219:	4c 89 c3             	mov    %r8,%rbx
  11821c:	4d 89 cf             	mov    %r9,%r15
  11821f:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  op_params.stride_width = params->stride_width;
  118225:	8b 42 04             	mov    0x4(%rdx),%eax
  118228:	89 85 70 ff ff ff    	mov    %eax,-0x90(%rbp)
  op_params.filter_height = params->filter_height;
  11822e:	8b 42 10             	mov    0x10(%rdx),%eax
  118231:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  op_params.filter_width = params->filter_width;
  118237:	8b 42 0c             	mov    0xc(%rdx),%eax
  11823a:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
  op_params.padding_values.height = data->padding.height;
  118240:	8b 41 04             	mov    0x4(%rcx),%eax
  118243:	66 89 85 5e ff ff ff 	mov    %ax,-0xa2(%rbp)
  op_params.padding_values.width = data->padding.width;
  11824a:	8b 01                	mov    (%rcx),%eax
  11824c:	66 89 85 5c ff ff ff 	mov    %ax,-0xa4(%rbp)
  op_params.quantized_activation_min = data->activation_min;
  118253:	8b 41 10             	mov    0x10(%rcx),%eax
  118256:	89 45 88             	mov    %eax,-0x78(%rbp)
  op_params.quantized_activation_max = data->activation_max;
  118259:	8b 41 14             	mov    0x14(%rcx),%eax
  11825c:	89 45 84             	mov    %eax,-0x7c(%rbp)
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
  11825f:	4d 85 c9             	test   %r9,%r9
  118262:	75 0d                	jne    118271 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x7b>

  reference_integer_ops::AveragePool(
      op_params, tflite::micro::GetTensorShape(input),
      tflite::micro::GetTensorData<int8_t>(input),
      tflite::micro::GetTensorShape(output),
  118264:	31 f6                	xor    %esi,%esi
  118266:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
  11826a:	e8 d6 f2 ff ff       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  11826f:	eb 12                	jmp    118283 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x8d>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
  118271:	4d 8b 21             	mov    (%r9),%r12
  118274:	4c 89 ce             	mov    %r9,%rsi
  118277:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
  11827b:	e8 c5 f2 ff ff       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  118280:	4d 89 e7             	mov    %r12,%r15
  return reinterpret_cast<const T*>(tensor->data.raw);
  118283:	48 8b 03             	mov    (%rbx),%rax
      op_params, tflite::micro::GetTensorShape(input),
  118286:	48 89 de             	mov    %rbx,%rsi
  118289:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  11828d:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  118294:	e8 ac f2 ff ff       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
  118299:	8b 75 84             	mov    -0x7c(%rbp),%esi
  11829c:	39 75 88             	cmp    %esi,-0x78(%rbp)
  11829f:	0f 8f 6c ff ff ff    	jg     118211 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1b>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
  1182a5:	83 7d 90 04          	cmpl   $0x4,-0x70(%rbp)
  1182a9:	0f 85 62 ff ff ff    	jne    118211 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1b>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
  1182af:	83 7d b0 04          	cmpl   $0x4,-0x50(%rbp)
  1182b3:	0f 85 58 ff ff ff    	jne    118211 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1b>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  1182b9:	31 c9                	xor    %ecx,%ecx
  1182bb:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  1182bf:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  1182c3:	31 f6                	xor    %esi,%esi
  1182c5:	e8 06 c2 ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  1182ca:	b9 03 00 00 00       	mov    $0x3,%ecx
  1182cf:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  1182d3:	be 03 00 00 00       	mov    $0x3,%esi
  1182d8:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  1182dc:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%rbp)
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  1182e2:	e8 e9 c1 ff ff       	call   1144d0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
  1182e7:	be 01 00 00 00       	mov    $0x1,%esi
  1182ec:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
  1182f0:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
  const int input_height = input_shape.Dims(1);
  1182f6:	e8 99 79 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
  1182fb:	be 02 00 00 00       	mov    $0x2,%esi
  118300:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  const int input_height = input_shape.Dims(1);
  118304:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
  const int input_width = input_shape.Dims(2);
  11830a:	e8 85 79 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
  11830f:	be 01 00 00 00       	mov    $0x1,%esi
  118314:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
  const int input_width = input_shape.Dims(2);
  118318:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  const int output_height = output_shape.Dims(1);
  11831e:	e8 71 79 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
  118323:	be 02 00 00 00       	mov    $0x2,%esi
  118328:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
  const int output_height = output_shape.Dims(1);
  11832c:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
  const int output_width = output_shape.Dims(2);
  118332:	e8 5d 79 ff ff       	call   10fc94 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
  118337:	31 c9                	xor    %ecx,%ecx
  const int output_width = output_shape.Dims(2);
  118339:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
  for (int batch = 0; batch < batches; ++batch) {
  11833f:	89 4d 8c             	mov    %ecx,-0x74(%rbp)
  118342:	8b 5d 8c             	mov    -0x74(%rbp),%ebx
  118345:	39 9d 58 ff ff ff    	cmp    %ebx,-0xa8(%rbp)
  11834b:	7f 24                	jg     118371 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x17b>
  11834d:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  118351:	e8 2a 79 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(output),
  118356:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
  11835a:	e8 21 79 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(output));
}
  11835f:	48 81 c4 b8 00 00 00 	add    $0xb8,%rsp
  118366:	5b                   	pop    %rbx
  118367:	41 5c                	pop    %r12
  118369:	41 5d                	pop    %r13
  11836b:	41 5e                	pop    %r14
  11836d:	41 5f                	pop    %r15
  11836f:	5d                   	pop    %rbp
  118370:	c3                   	ret    
  118371:	44 0f bf ad 5e ff ff 	movswl -0xa2(%rbp),%r13d
  118378:	ff 
  118379:	44 89 e8             	mov    %r13d,%eax
  11837c:	f7 d8                	neg    %eax
  11837e:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
    for (int out_y = 0; out_y < output_height; ++out_y) {
  118384:	31 c0                	xor    %eax,%eax
  118386:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
  11838c:	8b 8d 7c ff ff ff    	mov    -0x84(%rbp),%ecx
  118392:	39 8d 48 ff ff ff    	cmp    %ecx,-0xb8(%rbp)
  118398:	0f 8e ec 01 00 00    	jle    11858a <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x394>
      if (__a < __b)
  11839e:	31 c0                	xor    %eax,%eax
  1183a0:	45 85 ed             	test   %r13d,%r13d
  1183a3:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  1183a9:	44 0f bf 8d 5c ff ff 	movswl -0xa4(%rbp),%r9d
  1183b0:	ff 
  1183b1:	41 0f 49 c5          	cmovns %r13d,%eax
  1183b5:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
  1183bb:	8b 85 50 ff ff ff    	mov    -0xb0(%rbp),%eax
  1183c1:	44 01 e8             	add    %r13d,%eax
  1183c4:	39 d0                	cmp    %edx,%eax
  1183c6:	0f 4f c2             	cmovg  %edx,%eax
      for (int out_x = 0; out_x < output_width; ++out_x) {
  1183c9:	31 d2                	xor    %edx,%edx
  1183cb:	89 55 80             	mov    %edx,-0x80(%rbp)
  1183ce:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
  1183d4:	44 89 c8             	mov    %r9d,%eax
  1183d7:	f7 d8                	neg    %eax
  1183d9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  1183df:	8b 75 80             	mov    -0x80(%rbp),%esi
  1183e2:	39 b5 44 ff ff ff    	cmp    %esi,-0xbc(%rbp)
  1183e8:	0f 8e 82 01 00 00    	jle    118570 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x37a>
  1183ee:	31 c0                	xor    %eax,%eax
  1183f0:	45 85 c9             	test   %r9d,%r9d
  1183f3:	41 0f 49 c1          	cmovns %r9d,%eax
  1183f7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%rbp)
  1183fd:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  118403:	46 8d 34 08          	lea    (%rax,%r9,1),%r14d
  118407:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
  11840d:	41 39 c6             	cmp    %eax,%r14d
  118410:	44 0f 4f f0          	cmovg  %eax,%r14d
        for (int channel = 0; channel < depth; ++channel) {
  118414:	45 31 c0             	xor    %r8d,%r8d
  118417:	44 39 85 54 ff ff ff 	cmp    %r8d,-0xac(%rbp)
  11841e:	0f 8e 35 01 00 00    	jle    118559 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x363>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
  118424:	44 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%r10d
          int32_t acc = 0;
  11842b:	31 db                	xor    %ebx,%ebx
          int filter_count = 0;
  11842d:	45 31 e4             	xor    %r12d,%r12d
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
  118430:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
  118436:	41 39 c2             	cmp    %eax,%r10d
  118439:	0f 8d a1 00 00 00    	jge    1184e0 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x2ea>
              const int in_y = in_y_origin + filter_y;
  11843f:	8b 85 64 ff ff ff    	mov    -0x9c(%rbp),%eax
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  118445:	44 8b 9d 78 ff ff ff 	mov    -0x88(%rbp),%r11d
              const int in_y = in_y_origin + filter_y;
  11844c:	44 01 d0             	add    %r10d,%eax
  11844f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%rbp)
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  118455:	45 39 f3             	cmp    %r14d,%r11d
  118458:	7d 68                	jge    1184c2 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x2cc>
              const int in_x = in_x_origin + filter_x;
  11845a:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
  118460:	8b 75 8c             	mov    -0x74(%rbp),%esi
  118463:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  118467:	44 89 8d 20 ff ff ff 	mov    %r9d,-0xe0(%rbp)
  11846e:	8b 95 30 ff ff ff    	mov    -0xd0(%rbp),%edx
  118474:	44 89 95 24 ff ff ff 	mov    %r10d,-0xdc(%rbp)
              const int in_x = in_x_origin + filter_x;
  11847b:	41 8d 0c 03          	lea    (%r11,%rax,1),%ecx
  11847f:	44 89 9d 28 ff ff ff 	mov    %r11d,-0xd8(%rbp)
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
  118486:	44 89 85 2c ff ff ff 	mov    %r8d,-0xd4(%rbp)
  11848d:	e8 d1 bf ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              acc +=
  118492:	48 8b b5 38 ff ff ff 	mov    -0xc8(%rbp),%rsi
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  118499:	44 8b 9d 28 ff ff ff 	mov    -0xd8(%rbp),%r11d
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
  1184a0:	48 98                	cltq   
  1184a2:	44 8b 85 2c ff ff ff 	mov    -0xd4(%rbp),%r8d
  1184a9:	44 8b 95 24 ff ff ff 	mov    -0xdc(%rbp),%r10d
              acc +=
  1184b0:	0f be 04 06          	movsbl (%rsi,%rax,1),%eax
  1184b4:	44 8b 8d 20 ff ff ff 	mov    -0xe0(%rbp),%r9d
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  1184bb:	41 ff c3             	inc    %r11d
              acc +=
  1184be:	01 c3                	add    %eax,%ebx
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
  1184c0:	eb 93                	jmp    118455 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x25f>
  1184c2:	8b b5 78 ff ff ff    	mov    -0x88(%rbp),%esi
  1184c8:	44 89 f0             	mov    %r14d,%eax
  1184cb:	31 d2                	xor    %edx,%edx
  1184cd:	29 f0                	sub    %esi,%eax
  1184cf:	44 39 f6             	cmp    %r14d,%esi
  1184d2:	0f 4f c2             	cmovg  %edx,%eax
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
  1184d5:	41 ff c2             	inc    %r10d
  1184d8:	41 01 c4             	add    %eax,%r12d
  1184db:	e9 50 ff ff ff       	jmp    118430 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x23a>
          if (filter_count == 0) return false;
  1184e0:	45 85 e4             	test   %r12d,%r12d
  1184e3:	0f 84 64 fe ff ff    	je     11834d <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x157>
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
  1184e9:	85 db                	test   %ebx,%ebx
  1184eb:	7e 09                	jle    1184f6 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x300>
  1184ed:	44 89 e0             	mov    %r12d,%eax
  1184f0:	d1 f8                	sar    %eax
  1184f2:	01 d8                	add    %ebx,%eax
  1184f4:	eb 0f                	jmp    118505 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x30f>
                        : (acc - filter_count / 2) / filter_count;
  1184f6:	44 89 e0             	mov    %r12d,%eax
  1184f9:	b9 02 00 00 00       	mov    $0x2,%ecx
  1184fe:	99                   	cltd   
  1184ff:	f7 f9                	idiv   %ecx
  118501:	29 c3                	sub    %eax,%ebx
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
  118503:	89 d8                	mov    %ebx,%eax
  118505:	99                   	cltd   
  118506:	8b 75 84             	mov    -0x7c(%rbp),%esi
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
  118509:	8b 4d 80             	mov    -0x80(%rbp),%ecx
  11850c:	48 8d 7d b0          	lea    -0x50(%rbp),%rdi
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
  118510:	41 f7 fc             	idiv   %r12d
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
  118513:	8b 95 7c ff ff ff    	mov    -0x84(%rbp),%edx
  118519:	44 89 8d 2c ff ff ff 	mov    %r9d,-0xd4(%rbp)
  118520:	44 89 85 30 ff ff ff 	mov    %r8d,-0xd0(%rbp)
  118527:	39 45 88             	cmp    %eax,-0x78(%rbp)
  11852a:	0f 4d 45 88          	cmovge -0x78(%rbp),%eax
  11852e:	39 f0                	cmp    %esi,%eax
  118530:	0f 4f c6             	cmovg  %esi,%eax
  118533:	8b 75 8c             	mov    -0x74(%rbp),%esi
  118536:	89 c3                	mov    %eax,%ebx
  118538:	e8 26 bf ff ff       	call   114463 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
        for (int channel = 0; channel < depth; ++channel) {
  11853d:	44 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%r8d
  118544:	44 8b 8d 2c ff ff ff 	mov    -0xd4(%rbp),%r9d
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
  11854b:	48 98                	cltq   
  11854d:	41 88 1c 07          	mov    %bl,(%r15,%rax,1)
        for (int channel = 0; channel < depth; ++channel) {
  118551:	41 ff c0             	inc    %r8d
  118554:	e9 be fe ff ff       	jmp    118417 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x221>
      for (int out_x = 0; out_x < output_width; ++out_x) {
  118559:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  11855f:	ff 45 80             	incl   -0x80(%rbp)
  118562:	01 85 60 ff ff ff    	add    %eax,-0xa0(%rbp)
  118568:	41 29 c1             	sub    %eax,%r9d
  11856b:	e9 6f fe ff ff       	jmp    1183df <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x1e9>
    for (int out_y = 0; out_y < output_height; ++out_y) {
  118570:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  118576:	ff 85 7c ff ff ff    	incl   -0x84(%rbp)
  11857c:	01 85 64 ff ff ff    	add    %eax,-0x9c(%rbp)
  118582:	41 29 c5             	sub    %eax,%r13d
  118585:	e9 02 fe ff ff       	jmp    11838c <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x196>
  for (int batch = 0; batch < batches; ++batch) {
  11858a:	ff 45 8c             	incl   -0x74(%rbp)
  11858d:	e9 b0 fd ff ff       	jmp    118342 <_ZN6tflite27AveragePoolingEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPSB_+0x14c>

0000000000118592 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:

void MaxPoolingEvalFloat(TfLiteContext* context, TfLiteNode* node,
                         TfLitePoolParams* params, const OpDataPooling* data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
  118592:	55                   	push   %rbp
  118593:	4c 89 ce             	mov    %r9,%rsi
  118596:	48 89 e5             	mov    %rsp,%rbp
  118599:	41 55                	push   %r13
  11859b:	41 54                	push   %r12
  11859d:	45 31 e4             	xor    %r12d,%r12d
  1185a0:	53                   	push   %rbx
  1185a1:	4c 89 c3             	mov    %r8,%rbx
  1185a4:	48 83 ec 78          	sub    $0x78,%rsp
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
  1185a8:	8b 42 08             	mov    0x8(%rdx),%eax
  1185ab:	89 45 c0             	mov    %eax,-0x40(%rbp)
  op_params.stride_width = params->stride_width;
  1185ae:	8b 42 04             	mov    0x4(%rdx),%eax
  1185b1:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  op_params.filter_height = params->filter_height;
  1185b4:	8b 42 10             	mov    0x10(%rdx),%eax
  1185b7:	89 45 c8             	mov    %eax,-0x38(%rbp)
  op_params.filter_width = params->filter_width;
  1185ba:	8b 42 0c             	mov    0xc(%rdx),%eax
  1185bd:	89 45 cc             	mov    %eax,-0x34(%rbp)
  op_params.padding_values.height = data->padding.height;
  1185c0:	8b 41 04             	mov    0x4(%rcx),%eax
  1185c3:	66 89 45 b8          	mov    %ax,-0x48(%rbp)
  op_params.padding_values.width = data->padding.width;
  1185c7:	8b 01                	mov    (%rcx),%eax
  1185c9:	66 89 45 b6          	mov    %ax,-0x4a(%rbp)
  op_params.float_activation_min = data->activation_min_f32;
  1185cd:	48 8b 41 18          	mov    0x18(%rcx),%rax
  1185d1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
  1185d5:	4d 85 c9             	test   %r9,%r9
  1185d8:	74 03                	je     1185dd <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x4b>
  1185da:	4d 8b 21             	mov    (%r9),%r12
  op_params.float_activation_max = data->activation_max_f32;
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
  1185dd:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  1185e1:	e8 5f ef ff ff       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  1185e6:	48 85 db             	test   %rbx,%rbx
  1185e9:	75 05                	jne    1185f0 <_ZN6tflite19MaxPoolingEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x5e>
  1185eb:	e8 d4 97 ff ff       	call   111dc4 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
  1185f0:	4c 8b 2b             	mov    (%rbx),%r13
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
  1185f3:	48 89 de             	mov    %rbx,%rsi
  1185f6:	48 8d bd 70 ff ff ff 	lea    -0x90(%rbp),%rdi
  1185fd:	e8 43 ef ff ff       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  118602:	4d 89 e0             	mov    %r12,%r8
  118605:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  118609:	48 8d 7d b4          	lea    -0x4c(%rbp),%rdi
  11860d:	4c 89 ea             	mov    %r13,%rdx
  118610:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
  118617:	e8 c8 f3 ff ff       	call   1179e4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
  11861c:	48 8d bd 70 ff ff ff 	lea    -0x90(%rbp),%rdi
  118623:	e8 58 76 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
                         tflite::micro::GetTensorShape(output),
  118628:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  11862c:	e8 4f 76 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
                         tflite::micro::GetTensorData<float>(output));
}
  118631:	48 83 c4 78          	add    $0x78,%rsp
  118635:	5b                   	pop    %rbx
  118636:	41 5c                	pop    %r12
  118638:	41 5d                	pop    %r13
  11863a:	5d                   	pop    %rbp
  11863b:	c3                   	ret    

000000000011863c <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_>:

void MaxPoolingEvalQuantized(TfLiteContext* context, TfLiteNode* node,
                             TfLitePoolParams* params,
                             const OpDataPooling* data,
                             const TfLiteEvalTensor* input,
                             TfLiteEvalTensor* output) {
  11863c:	55                   	push   %rbp
  11863d:	4c 89 ce             	mov    %r9,%rsi
  118640:	48 89 e5             	mov    %rsp,%rbp
  118643:	41 55                	push   %r13
  118645:	41 54                	push   %r12
  118647:	45 31 e4             	xor    %r12d,%r12d
  11864a:	53                   	push   %rbx
  11864b:	4c 89 c3             	mov    %r8,%rbx
  11864e:	48 83 ec 78          	sub    $0x78,%rsp
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
  118652:	8b 42 08             	mov    0x8(%rdx),%eax
  118655:	89 45 c0             	mov    %eax,-0x40(%rbp)
  op_params.stride_width = params->stride_width;
  118658:	8b 42 04             	mov    0x4(%rdx),%eax
  11865b:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  op_params.filter_height = params->filter_height;
  11865e:	8b 42 10             	mov    0x10(%rdx),%eax
  118661:	89 45 c8             	mov    %eax,-0x38(%rbp)
  op_params.filter_width = params->filter_width;
  118664:	8b 42 0c             	mov    0xc(%rdx),%eax
  118667:	89 45 cc             	mov    %eax,-0x34(%rbp)
  op_params.padding_values.height = data->padding.height;
  11866a:	8b 41 04             	mov    0x4(%rcx),%eax
  11866d:	66 89 45 b8          	mov    %ax,-0x48(%rbp)
  op_params.padding_values.width = data->padding.width;
  118671:	8b 01                	mov    (%rcx),%eax
  118673:	66 89 45 b6          	mov    %ax,-0x4a(%rbp)
  op_params.quantized_activation_min = data->activation_min;
  118677:	48 8b 41 10          	mov    0x10(%rcx),%rax
  11867b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
  11867f:	4d 85 c9             	test   %r9,%r9
  118682:	74 03                	je     118687 <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x4b>
  118684:	4d 8b 21             	mov    (%r9),%r12
  op_params.quantized_activation_max = data->activation_max;

  reference_integer_ops::MaxPool(op_params,
                                 tflite::micro::GetTensorShape(input),
                                 tflite::micro::GetTensorData<int8_t>(input),
                                 tflite::micro::GetTensorShape(output),
  118687:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  11868b:	e8 b5 ee ff ff       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  118690:	48 85 db             	test   %rbx,%rbx
  118693:	75 05                	jne    11869a <_ZN6tflite23MaxPoolingEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPKNS_13OpDataPoolingEPK16TfLiteEvalTensorPS9_+0x5e>
  118695:	e8 2a 97 ff ff       	call   111dc4 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
  11869a:	4c 8b 2b             	mov    (%rbx),%r13
                                 tflite::micro::GetTensorShape(input),
  11869d:	48 89 de             	mov    %rbx,%rsi
  1186a0:	48 8d bd 70 ff ff ff 	lea    -0x90(%rbp),%rdi
  1186a7:	e8 99 ee ff ff       	call   117545 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::MaxPool(op_params,
  1186ac:	4d 89 e0             	mov    %r12,%r8
  1186af:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  1186b3:	48 8d 7d b4          	lea    -0x4c(%rbp),%rdi
  1186b7:	4c 89 ea             	mov    %r13,%rdx
  1186ba:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
  1186c1:	e8 82 f0 ff ff       	call   117748 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
                                 tflite::micro::GetTensorShape(input),
  1186c6:	48 8d bd 70 ff ff ff 	lea    -0x90(%rbp),%rdi
  1186cd:	e8 ae 75 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
                                 tflite::micro::GetTensorShape(output),
  1186d2:	48 8d 7d 90          	lea    -0x70(%rbp),%rdi
  1186d6:	e8 a5 75 ff ff       	call   10fc80 <_ZN6tflite12RuntimeShapeD1Ev>
                                 tflite::micro::GetTensorData<int8_t>(output));
}
  1186db:	48 83 c4 78          	add    $0x78,%rsp
  1186df:	5b                   	pop    %rbx
  1186e0:	41 5c                	pop    %r12
  1186e2:	41 5d                	pop    %r13
  1186e4:	5d                   	pop    %rbp
  1186e5:	c3                   	ret    

00000000001186e6 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  1186e6:	55                   	push   %rbp
  1186e7:	48 89 e5             	mov    %rsp,%rbp
  1186ea:	41 55                	push   %r13
  1186ec:	41 54                	push   %r12
  1186ee:	53                   	push   %rbx
  1186ef:	48 83 ec 18          	sub    $0x18,%rsp
  TFLITE_DCHECK(context != nullptr);
  1186f3:	48 85 ff             	test   %rdi,%rdi
  1186f6:	75 05                	jne    1186fd <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x17>
  1186f8:	e8 c7 96 ff ff       	call   111dc4 <abort>
  1186fd:	49 89 f5             	mov    %rsi,%r13
  TFLITE_DCHECK(node != nullptr);
  118700:	48 85 f6             	test   %rsi,%rsi
  118703:	74 f3                	je     1186f8 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x12>
  return context->GetEvalTensor(context, node->inputs->data[index]);
  118705:	48 8b 06             	mov    (%rsi),%rax
  118708:	48 89 fb             	mov    %rdi,%rbx
  11870b:	8b 70 04             	mov    0x4(%rax),%esi
  11870e:	ff 97 a8 00 00 00    	call   *0xa8(%rdi)
  return context->GetEvalTensor(context, node->outputs->data[index]);
  118714:	48 89 df             	mov    %rbx,%rdi
  return context->GetEvalTensor(context, node->inputs->data[index]);
  118717:	49 89 c4             	mov    %rax,%r12
  return context->GetEvalTensor(context, node->outputs->data[index]);
  11871a:	49 8b 45 08          	mov    0x8(%r13),%rax
  11871e:	8b 70 04             	mov    0x4(%rax),%esi
  118721:	ff 93 a8 00 00 00    	call   *0xa8(%rbx)
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
  118727:	41 8b 7c 24 10       	mov    0x10(%r12),%edi
  11872c:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  118730:	49 89 c5             	mov    %rax,%r13
  118733:	e8 75 a3 ff ff       	call   112aad <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePm>
  118738:	89 c3                	mov    %eax,%ebx
  11873a:	85 c0                	test   %eax,%eax
  11873c:	75 3a                	jne    118778 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x92>
  input_bytes *= ElementCount(*input->dims);
  11873e:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
  118743:	e8 b3 a9 ff ff       	call   1130fb <_ZN6tflite12ElementCountERK14TfLiteIntArray>

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
  118748:	31 d2                	xor    %edx,%edx
  input_bytes *= ElementCount(*input->dims);
  11874a:	48 98                	cltq   
  11874c:	48 0f af 45 d8       	imul   -0x28(%rbp),%rax
  118751:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  if (input->data.raw != output->data.raw) {
  118755:	49 8b 45 00          	mov    0x0(%r13),%rax
  118759:	49 39 04 24          	cmp    %rax,(%r12)
  11875d:	74 19                	je     118778 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x92>
    for (size_t i = 0; i < input_bytes; ++i) {
  11875f:	48 3b 55 d8          	cmp    -0x28(%rbp),%rdx
  118763:	73 13                	jae    118778 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x92>
      output->data.raw[i] = input->data.raw[i];
  118765:	49 8b 04 24          	mov    (%r12),%rax
  118769:	8a 0c 10             	mov    (%rax,%rdx,1),%cl
  11876c:	49 8b 45 00          	mov    0x0(%r13),%rax
  118770:	88 0c 10             	mov    %cl,(%rax,%rdx,1)
    for (size_t i = 0; i < input_bytes; ++i) {
  118773:	48 ff c2             	inc    %rdx
  118776:	eb e7                	jmp    11875f <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x79>
    }
  }
  return kTfLiteOk;
}
  118778:	48 83 c4 18          	add    $0x18,%rsp
  11877c:	89 d8                	mov    %ebx,%eax
  11877e:	5b                   	pop    %rbx
  11877f:	41 5c                	pop    %r12
  118781:	41 5d                	pop    %r13
  118783:	5d                   	pop    %rbp
  118784:	c3                   	ret    

0000000000118785 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
  118785:	55                   	push   %rbp
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  118786:	31 d2                	xor    %edx,%edx
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
  118788:	48 89 e5             	mov    %rsp,%rbp
  11878b:	41 56                	push   %r14
  11878d:	41 55                	push   %r13
  11878f:	49 89 f5             	mov    %rsi,%r13
  118792:	41 54                	push   %r12
  118794:	53                   	push   %rbx
  118795:	48 89 fb             	mov    %rdi,%rbx
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
  118798:	e8 26 af ff ff       	call   1136c3 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
  11879d:	48 85 c0             	test   %rax,%rax
  1187a0:	75 0d                	jne    1187af <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x2a>
  1187a2:	41 b8 b1 fe 11 00    	mov    $0x11feb1,%r8d
  1187a8:	b9 23 00 00 00       	mov    $0x23,%ecx
  1187ad:	eb 23                	jmp    1187d2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x4d>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  1187af:	31 d2                	xor    %edx,%edx
  1187b1:	4c 89 ee             	mov    %r13,%rsi
  1187b4:	48 89 df             	mov    %rbx,%rdi
  1187b7:	49 89 c4             	mov    %rax,%r12
  1187ba:	e8 0c af ff ff       	call   1136cb <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  1187bf:	49 89 c1             	mov    %rax,%r9
  TF_LITE_ENSURE(context, output != nullptr);
  1187c2:	48 85 c0             	test   %rax,%rax
  1187c5:	75 27                	jne    1187ee <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x69>
  1187c7:	41 b8 d4 fe 11 00    	mov    $0x11fed4,%r8d
  1187cd:	b9 25 00 00 00       	mov    $0x25,%ecx
  1187d2:	ba f9 01 12 00       	mov    $0x1201f9,%edx
  1187d7:	be d1 f5 11 00       	mov    $0x11f5d1,%esi
  1187dc:	48 89 df             	mov    %rbx,%rdi
  1187df:	31 c0                	xor    %eax,%eax
  1187e1:	ff 53 28             	call   *0x28(%rbx)
  TF_LITE_ENSURE(context, input != nullptr);
  1187e4:	b8 01 00 00 00       	mov    $0x1,%eax
  1187e9:	e9 1e 01 00 00       	jmp    11890c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x187>
  int num_input_elements = NumElements(input);
  1187ee:	49 8b 54 24 10       	mov    0x10(%r12),%rdx
  for (int i = 0; i < dims->size; ++i) {
  1187f3:	31 c0                	xor    %eax,%eax
  int64_t count = 1;
  1187f5:	b9 01 00 00 00       	mov    $0x1,%ecx
  for (int i = 0; i < dims->size; ++i) {
  1187fa:	8b 32                	mov    (%rdx),%esi
  1187fc:	39 c6                	cmp    %eax,%esi
  1187fe:	7e 0e                	jle    11880e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x89>
    count *= dims->data[i];
  118800:	48 63 7c 82 04       	movslq 0x4(%rdx,%rax,4),%rdi
  118805:	48 ff c0             	inc    %rax
  118808:	48 0f af cf          	imul   %rdi,%rcx
  for (int i = 0; i < dims->size; ++i) {
  11880c:	eb ee                	jmp    1187fc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x77>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
  11880e:	49 8b 45 00          	mov    0x0(%r13),%rax
  TfLiteIntArray* output_shape = output->dims;
  118812:	4d 8b 41 10          	mov    0x10(%r9),%r8
      output_shape->size == 1 && output_shape->data[0] == 0) {
  118816:	83 38 01             	cmpl   $0x1,(%rax)
  118819:	75 12                	jne    11882d <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
  11881b:	41 83 38 01          	cmpl   $0x1,(%r8)
  11881f:	75 0c                	jne    11882d <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
      output_shape->size == 1 && output_shape->data[0] == 0) {
  118821:	41 83 78 04 00       	cmpl   $0x0,0x4(%r8)
  118826:	75 05                	jne    11882d <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
    output_shape->size = 0;
  118828:	31 f6                	xor    %esi,%esi
  11882a:	41 89 30             	mov    %esi,(%r8)
  for (int i = 0; i < output_shape->size; ++i) {
  11882d:	45 8b 10             	mov    (%r8),%r10d
  118830:	31 c0                	xor    %eax,%eax
  int stretch_dim = -1;
  118832:	48 83 cf ff          	or     $0xffffffffffffffff,%rdi
  int num_output_elements = 1;
  118836:	be 01 00 00 00       	mov    $0x1,%esi
  for (int i = 0; i < output_shape->size; ++i) {
  11883b:	41 39 c2             	cmp    %eax,%r10d
  11883e:	7e 44                	jle    118884 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xff>
    int value = output_shape->data[i];
  118840:	41 8b 54 80 04       	mov    0x4(%r8,%rax,4),%edx
    if (value == -1) {
  118845:	83 fa ff             	cmp    $0xffffffff,%edx
  118848:	75 32                	jne    11887c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf7>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
  11884a:	83 ff ff             	cmp    $0xffffffff,%edi
  11884d:	75 05                	jne    118854 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xcf>
  11884f:	48 63 f8             	movslq %eax,%rdi
  118852:	eb 2b                	jmp    11887f <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfa>
  118854:	6a ff                	push   $0xffffffffffffffff
  118856:	41 b9 47 02 12 00    	mov    $0x120247,%r9d
  11885c:	41 b8 4a 02 12 00    	mov    $0x12024a,%r8d
  118862:	31 c0                	xor    %eax,%eax
  118864:	57                   	push   %rdi
  118865:	b9 3a 00 00 00       	mov    $0x3a,%ecx
  11886a:	ba f9 01 12 00       	mov    $0x1201f9,%edx
  11886f:	be da f7 11 00       	mov    $0x11f7da,%esi
  118874:	48 89 df             	mov    %rbx,%rdi
  118877:	e9 86 00 00 00       	jmp    118902 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17d>
      num_output_elements *= value;
  11887c:	0f af f2             	imul   %edx,%esi
  for (int i = 0; i < output_shape->size; ++i) {
  11887f:	48 ff c0             	inc    %rax
  118882:	eb b7                	jmp    11883b <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb6>
  if (stretch_dim != -1) {
  118884:	83 ff ff             	cmp    $0xffffffff,%edi
  118887:	74 0d                	je     118896 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x111>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
  118889:	89 c8                	mov    %ecx,%eax
  11888b:	99                   	cltd   
  11888c:	f7 fe                	idiv   %esi
  11888e:	41 89 44 b8 04       	mov    %eax,0x4(%r8,%rdi,4)
    num_output_elements *= output_shape->data[stretch_dim];
  118893:	0f af f0             	imul   %eax,%esi
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  118896:	41 8b 39             	mov    (%r9),%edi
  118899:	41 39 3c 24          	cmp    %edi,(%r12)
  11889d:	74 3d                	je     1188dc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x157>
  11889f:	4c 8b 73 28          	mov    0x28(%rbx),%r14
  1188a3:	e8 d9 ac ff ff       	call   113581 <TfLiteTypeGetName>
  1188a8:	41 8b 3c 24          	mov    (%r12),%edi
  1188ac:	49 89 c5             	mov    %rax,%r13
  1188af:	e8 cd ac ff ff       	call   113581 <TfLiteTypeGetName>
  1188b4:	41 55                	push   %r13
  1188b6:	41 b9 2b fd 11 00    	mov    $0x11fd2b,%r9d
  1188bc:	48 89 df             	mov    %rbx,%rdi
  1188bf:	50                   	push   %rax
  1188c0:	41 b8 38 fd 11 00    	mov    $0x11fd38,%r8d
  1188c6:	b9 45 00 00 00       	mov    $0x45,%ecx
  1188cb:	31 c0                	xor    %eax,%eax
  1188cd:	ba f9 01 12 00       	mov    $0x1201f9,%edx
  1188d2:	be b9 00 12 00       	mov    $0x1200b9,%esi
  1188d7:	41 ff d6             	call   *%r14
  1188da:	eb 29                	jmp    118905 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>
  return kTfLiteOk;
  1188dc:	31 c0                	xor    %eax,%eax
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
  1188de:	39 ce                	cmp    %ecx,%esi
  1188e0:	74 2a                	je     11890c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x187>
  1188e2:	56                   	push   %rsi
  1188e3:	41 b9 56 02 12 00    	mov    $0x120256,%r9d
  1188e9:	41 b8 6a 02 12 00    	mov    $0x12026a,%r8d
  1188ef:	48 89 df             	mov    %rbx,%rdi
  1188f2:	51                   	push   %rcx
  1188f3:	ba f9 01 12 00       	mov    $0x1201f9,%edx
  1188f8:	b9 46 00 00 00       	mov    $0x46,%ecx
  1188fd:	be da f7 11 00       	mov    $0x11f7da,%esi
  118902:	ff 53 28             	call   *0x28(%rbx)
  118905:	58                   	pop    %rax
  118906:	5a                   	pop    %rdx
  118907:	e9 d8 fe ff ff       	jmp    1187e4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5f>
}
  11890c:	48 8d 65 e0          	lea    -0x20(%rbp),%rsp
  118910:	5b                   	pop    %rbx
  118911:	41 5c                	pop    %r12
  118913:	41 5d                	pop    %r13
  118915:	41 5e                	pop    %r14
  118917:	5d                   	pop    %rbp
  118918:	c3                   	ret    

0000000000118919 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  118919:	55                   	push   %rbp
  11891a:	48 89 e5             	mov    %rsp,%rbp
  11891d:	41 55                	push   %r13
  11891f:	53                   	push   %rbx
  118920:	48 89 fb             	mov    %rdi,%rbx
  118923:	48 83 ec 10          	sub    $0x10,%rsp
  118927:	48 8b 06             	mov    (%rsi),%rax
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
  11892a:	8b 00                	mov    (%rax),%eax
  11892c:	ff c8                	dec    %eax
  11892e:	83 f8 01             	cmp    $0x1,%eax
  118931:	76 1c                	jbe    11894f <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x36>
  118933:	41 b8 7d 02 12 00    	mov    $0x12027d,%r8d
  118939:	b9 4b 00 00 00       	mov    $0x4b,%ecx
  11893e:	ba f9 01 12 00       	mov    $0x1201f9,%edx
  118943:	31 c0                	xor    %eax,%eax
  118945:	be d1 f5 11 00       	mov    $0x11f5d1,%esi
  11894a:	ff 57 28             	call   *0x28(%rdi)
  11894d:	eb 30                	jmp    11897f <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x66>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
  11894f:	48 8b 46 08          	mov    0x8(%rsi),%rax
  118953:	8b 00                	mov    (%rax),%eax
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  118955:	83 f8 01             	cmp    $0x1,%eax
  118958:	74 2c                	je     118986 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x6d>
  11895a:	6a 01                	push   $0x1
  11895c:	41 b9 48 02 12 00    	mov    $0x120248,%r9d
  118962:	41 b8 aa 02 12 00    	mov    $0x1202aa,%r8d
  118968:	b9 4c 00 00 00       	mov    $0x4c,%ecx
  11896d:	50                   	push   %rax
  11896e:	ba f9 01 12 00       	mov    $0x1201f9,%edx
  118973:	be da f7 11 00       	mov    $0x11f7da,%esi
  118978:	31 c0                	xor    %eax,%eax
  11897a:	ff 57 28             	call   *0x28(%rdi)
  11897d:	58                   	pop    %rax
  11897e:	5a                   	pop    %rdx
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
  11897f:	b8 01 00 00 00       	mov    $0x1,%eax
  118984:	eb 45                	jmp    1189cb <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xb2>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  118986:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  11898a:	e8 f6 fd ff ff       	call   118785 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
  11898f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  118993:	85 c0                	test   %eax,%eax
  118995:	74 34                	je     1189cb <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xb2>
  118997:	48 89 df             	mov    %rbx,%rdi
  11899a:	4c 8b 6b 28          	mov    0x28(%rbx),%r13
  11899e:	e8 e2 fd ff ff       	call   118785 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
  1189a3:	6a 00                	push   $0x0
  1189a5:	41 b9 bb 02 12 00    	mov    $0x1202bb,%r9d
  1189ab:	48 89 df             	mov    %rbx,%rdi
  1189ae:	50                   	push   %rax
  1189af:	41 b8 c5 02 12 00    	mov    $0x1202c5,%r8d
  1189b5:	b9 4d 00 00 00       	mov    $0x4d,%ecx
  1189ba:	31 c0                	xor    %eax,%eax
  1189bc:	ba f9 01 12 00       	mov    $0x1201f9,%edx
  1189c1:	be da f7 11 00       	mov    $0x11f7da,%esi
  1189c6:	41 ff d5             	call   *%r13
  1189c9:	eb b2                	jmp    11897d <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x64>
}
  1189cb:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  1189cf:	5b                   	pop    %rbx
  1189d0:	41 5d                	pop    %r13
  1189d2:	5d                   	pop    %rbp
  1189d3:	c3                   	ret    

00000000001189d4 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
  1189d4:	48 89 f8             	mov    %rdi,%rax
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
  1189d7:	be c0 c2 11 00       	mov    $0x11c2c0,%esi
  1189dc:	b9 10 00 00 00       	mov    $0x10,%ecx
  1189e1:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
}
  1189e3:	c3                   	ret    

00000000001189e4 <z_impl_k_busy_wait>:
#include <zephyr/drivers/timer/system_timer.h>
#include <zephyr/sys_clock.h>
#include <kernel_arch_interface.h>

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
  1189e4:	55                   	push   %rbp
  1189e5:	48 89 e5             	mov    %rsp,%rbp
  1189e8:	41 54                	push   %r12
  1189ea:	53                   	push   %rbx
  1189eb:	89 fb                	mov    %edi,%ebx
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
  1189ed:	85 db                	test   %ebx,%ebx
  1189ef:	74 2c                	je     118a1d <z_impl_k_busy_wait+0x39>
extern uint32_t sys_clock_cycle_get_32(void);

__pinned_func
static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
  1189f1:	e8 9e 9f ff ff       	call   112994 <sys_clock_cycle_get_32>
  1189f6:	41 89 c4             	mov    %eax,%r12d
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
		(uint64_t)sys_clock_hw_cycles_per_sec() /
  1189f9:	48 63 05 60 9f 02 00 	movslq 0x29f60(%rip),%rax        # 142960 <z_clock_hw_cycles_per_sec>
  118a00:	b9 40 42 0f 00       	mov    $0xf4240,%ecx
	uint32_t cycles_to_wait = (uint32_t)(
  118a05:	31 d2                	xor    %edx,%edx
		(uint64_t)usec_to_wait *
  118a07:	48 0f af c3          	imul   %rbx,%rax
	uint32_t cycles_to_wait = (uint32_t)(
  118a0b:	48 f7 f1             	div    %rcx
  118a0e:	48 89 c3             	mov    %rax,%rbx
  118a11:	e8 7e 9f ff ff       	call   112994 <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
  118a16:	44 29 e0             	sub    %r12d,%eax
  118a19:	39 d8                	cmp    %ebx,%eax
  118a1b:	72 f4                	jb     118a11 <z_impl_k_busy_wait+0x2d>
		arch_nop();
	}
#endif

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
  118a1d:	5b                   	pop    %rbx
  118a1e:	41 5c                	pop    %r12
  118a20:	5d                   	pop    %rbp
  118a21:	c3                   	ret    

0000000000118a22 <z_device_state_init>:
void z_device_state_init(void)
{
	STRUCT_SECTION_FOREACH(device, dev) {
		z_object_init(dev);
	}
}
  118a22:	c3                   	ret    

0000000000118a23 <z_device_is_ready>:
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
		return false;
  118a23:	31 c0                	xor    %eax,%eax
	if (dev == NULL) {
  118a25:	48 85 ff             	test   %rdi,%rdi
  118a28:	74 17                	je     118a41 <z_device_is_ready+0x1e>
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
  118a2a:	48 8b 57 18          	mov    0x18(%rdi),%rdx
  118a2e:	31 c0                	xor    %eax,%eax
  118a30:	f6 42 01 01          	testb  $0x1,0x1(%rdx)
  118a34:	74 08                	je     118a3e <z_device_is_ready+0x1b>
  118a36:	31 c0                	xor    %eax,%eax
  118a38:	80 3a 00             	cmpb   $0x0,(%rdx)
  118a3b:	0f 94 c0             	sete   %al
  118a3e:	83 e0 01             	and    $0x1,%eax
}
  118a41:	c3                   	ret    

0000000000118a42 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
  118a42:	55                   	push   %rbp
  118a43:	48 89 e5             	mov    %rsp,%rbp
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
  118a46:	e8 07 8c ff ff       	call   111652 <arch_system_halt>

0000000000118a4b <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
  118a4b:	55                   	push   %rbp
  118a4c:	48 89 e5             	mov    %rsp,%rbp
  118a4f:	41 56                	push   %r14
  118a51:	53                   	push   %rbx
  118a52:	48 83 ec 10          	sub    $0x10,%rsp
  118a56:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  118a59:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
  118a5d:	9c                   	pushf  
  118a5e:	fa                   	cli    
  118a5f:	41 5e                	pop    %r14
	return z_impl_z_current_get();
  118a61:	e8 2a 09 00 00       	call   119390 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
  118a66:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  118a6a:	8b 7d e4             	mov    -0x1c(%rbp),%edi
  118a6d:	48 89 c3             	mov    %rax,%rbx
  118a70:	e8 cd ff ff ff       	call   118a42 <k_sys_fatal_error_handler>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  118a75:	41 0f ba e6 09       	bt     $0x9,%r14d
  118a7a:	73 01                	jae    118a7d <z_fatal_error+0x32>
		__asm__ volatile ("sti" ::: "memory");
  118a7c:	fb                   	sti    
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
  118a7d:	58                   	pop    %rax
	z_impl_k_thread_abort(thread);
  118a7e:	48 89 df             	mov    %rbx,%rdi
  118a81:	5a                   	pop    %rdx
  118a82:	5b                   	pop    %rbx
  118a83:	41 5e                	pop    %r14
  118a85:	5d                   	pop    %rbp
  118a86:	e9 ef 16 00 00       	jmp    11a17a <z_impl_k_thread_abort>

0000000000118a8b <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
  118a8b:	55                   	push   %rbp
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
  118a8c:	89 f8                	mov    %edi,%eax
{
  118a8e:	48 89 e5             	mov    %rsp,%rbp
  118a91:	41 55                	push   %r13
  118a93:	41 54                	push   %r12
  118a95:	53                   	push   %rbx
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
  118a96:	8d 5f 01             	lea    0x1(%rdi),%ebx
{
  118a99:	52                   	push   %rdx
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
  118a9a:	4c 8b 24 c5 a0 cd 11 	mov    0x11cda0(,%rax,8),%r12
  118aa1:	00 
  118aa2:	4c 3b 24 dd a0 cd 11 	cmp    0x11cda0(,%rbx,8),%r12
  118aa9:	00 
  118aaa:	73 45                	jae    118af1 <z_sys_init_run_level+0x66>
		const struct device *dev = entry->dev;
  118aac:	4d 8b 6c 24 08       	mov    0x8(%r12),%r13

		if (dev != NULL) {
			int rc = 0;

			if (entry->init_fn.dev != NULL) {
  118ab1:	49 8b 04 24          	mov    (%r12),%rax
		if (dev != NULL) {
  118ab5:	4d 85 ed             	test   %r13,%r13
  118ab8:	74 2f                	je     118ae9 <z_sys_init_run_level+0x5e>
			if (entry->init_fn.dev != NULL) {
  118aba:	48 85 c0             	test   %rax,%rax
  118abd:	74 20                	je     118adf <z_sys_init_run_level+0x54>
				rc = entry->init_fn.dev(dev);
  118abf:	4c 89 ef             	mov    %r13,%rdi
  118ac2:	ff d0                	call   *%rax
				/* Mark device initialized. If initialization
				 * failed, record the error condition.
				 */
				if (rc != 0) {
  118ac4:	85 c0                	test   %eax,%eax
  118ac6:	74 17                	je     118adf <z_sys_init_run_level+0x54>
					if (rc < 0) {
  118ac8:	89 c2                	mov    %eax,%edx
						rc = -rc;
					}
					if (rc > UINT8_MAX) {
						rc = UINT8_MAX;
					}
					dev->state->init_res = rc;
  118aca:	49 8b 4d 18          	mov    0x18(%r13),%rcx
					if (rc < 0) {
  118ace:	f7 da                	neg    %edx
  118ad0:	0f 49 c2             	cmovns %edx,%eax
					if (rc > UINT8_MAX) {
  118ad3:	ba ff 00 00 00       	mov    $0xff,%edx
  118ad8:	39 d0                	cmp    %edx,%eax
  118ada:	0f 4f c2             	cmovg  %edx,%eax
					dev->state->init_res = rc;
  118add:	88 01                	mov    %al,(%rcx)
				}
			}

			dev->state->initialized = true;
  118adf:	49 8b 45 18          	mov    0x18(%r13),%rax
  118ae3:	80 48 01 01          	orb    $0x1,0x1(%rax)

			if (rc == 0) {
  118ae7:	eb 02                	jmp    118aeb <z_sys_init_run_level+0x60>
				/* Run automatic device runtime enablement */
				(void)pm_device_runtime_auto_enable(dev);
			}
		} else {
			(void)entry->init_fn.sys();
  118ae9:	ff d0                	call   *%rax
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
  118aeb:	49 83 c4 10          	add    $0x10,%r12
  118aef:	eb b1                	jmp    118aa2 <z_sys_init_run_level+0x17>
		}
	}
}
  118af1:	58                   	pop    %rax
  118af2:	5b                   	pop    %rbx
  118af3:	41 5c                	pop    %r12
  118af5:	41 5d                	pop    %r13
  118af7:	5d                   	pop    %rbp
  118af8:	c3                   	ret    

0000000000118af9 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
  118af9:	55                   	push   %rbp
  118afa:	48 89 e5             	mov    %rsp,%rbp
	/* Invoked here such that backing store or eviction algorithms may
	 * initialize kernel objects, and that all POST_KERNEL and later tasks
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
  118afd:	e8 8e 20 00 00       	call   11ab90 <z_mem_manage_init>
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
  118b02:	bf 03 00 00 00       	mov    $0x3,%edi
	z_sys_post_kernel = true;
  118b07:	c6 05 5b d7 00 00 01 	movb   $0x1,0xd75b(%rip)        # 126269 <z_sys_post_kernel>
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
  118b0e:	e8 78 ff ff ff       	call   118a8b <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
  118b13:	e8 14 21 00 00       	call   11ac2c <boot_banner>

#if defined(CONFIG_CPP)
	void z_cpp_init_static(void);
	z_cpp_init_static();
  118b18:	e8 7f 79 ff ff       	call   11049c <z_cpp_init_static>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
  118b1d:	bf 04 00 00 00       	mov    $0x4,%edi
  118b22:	e8 64 ff ff ff       	call   118a8b <z_sys_init_run_level>

	z_init_static_threads();
  118b27:	e8 bd 02 00 00       	call   118de9 <z_init_static_threads>
	__ASSERT_NO_MSG(arch_mem_coherent(&_kernel));
#endif

#ifdef CONFIG_SMP
	if (!IS_ENABLED(CONFIG_SMP_BOOT_DELAY)) {
		z_smp_init();
  118b2c:	e8 54 18 00 00       	call   11a385 <z_smp_init>
	}
	z_sys_init_run_level(INIT_LEVEL_SMP);
  118b31:	bf 05 00 00 00       	mov    $0x5,%edi
  118b36:	e8 50 ff ff ff       	call   118a8b <z_sys_init_run_level>
#endif

#ifdef CONFIG_MMU
	z_mem_manage_boot_finish();
  118b3b:	e8 eb 20 00 00       	call   11ac2b <z_mem_manage_boot_finish>
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
  118b40:	e8 7d 76 ff ff       	call   1101c2 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
  118b45:	80 25 ac ac 00 00 fe 	andb   $0xfe,0xacac(%rip)        # 1237f8 <z_main_thread+0x18>

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
  118b4c:	5d                   	pop    %rbp
  118b4d:	c3                   	ret    

0000000000118b4e <z_early_memset>:
{
  118b4e:	48 89 d1             	mov    %rdx,%rcx

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
  118b51:	89 f0                	mov    %esi,%eax
  118b53:	f3 aa                	rep stos %al,%es:(%rdi)
}
  118b55:	c3                   	ret    

0000000000118b56 <z_bss_zero>:
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
  118b56:	ba 70 62 12 00       	mov    $0x126270,%edx
  118b5b:	31 f6                	xor    %esi,%esi
  118b5d:	bf 00 20 12 00       	mov    $0x122000,%edi
  118b62:	48 81 ea 00 20 12 00 	sub    $0x122000,%rdx
  118b69:	e9 e0 ff ff ff       	jmp    118b4e <z_early_memset>

0000000000118b6e <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
  118b6e:	55                   	push   %rbp
	z_setup_new_thread(thread, stack,
  118b6f:	45 31 c9             	xor    %r9d,%r9d
  118b72:	b9 a2 8e 11 00       	mov    $0x118ea2,%ecx
  118b77:	ba 00 10 00 00       	mov    $0x1000,%edx
{
  118b7c:	48 89 e5             	mov    %rsp,%rbp
  118b7f:	41 56                	push   %r14
  118b81:	41 55                	push   %r13
  118b83:	4c 63 ef             	movslq %edi,%r13
  118b86:	41 54                	push   %r12
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
  118b88:	4d 6b e5 28          	imul   $0x28,%r13,%r12
	k_thread_stack_t *stack = z_idle_stacks[i];
  118b8c:	4c 89 ee             	mov    %r13,%rsi
{
  118b8f:	53                   	push   %rbx
	struct k_thread *thread = &z_idle_threads[i];
  118b90:	49 69 dd 20 03 00 00 	imul   $0x320,%r13,%rbx
	k_thread_stack_t *stack = z_idle_stacks[i];
  118b97:	48 c1 e6 0c          	shl    $0xc,%rsi
	z_setup_new_thread(thread, stack,
  118b9b:	6a 00                	push   $0x0
	k_thread_stack_t *stack = z_idle_stacks[i];
  118b9d:	48 81 c6 70 e2 12 00 	add    $0x12e270,%rsi
	z_setup_new_thread(thread, stack,
  118ba4:	6a 01                	push   $0x1
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
  118ba6:	49 81 c4 00 3b 12 00 	add    $0x123b00,%r12
	z_setup_new_thread(thread, stack,
  118bad:	6a 0f                	push   $0xf
	struct k_thread *thread = &z_idle_threads[i];
  118baf:	48 81 c3 a0 31 12 00 	add    $0x1231a0,%rbx
	z_setup_new_thread(thread, stack,
  118bb6:	4d 89 e0             	mov    %r12,%r8
  118bb9:	6a 00                	push   $0x0
  118bbb:	48 89 df             	mov    %rbx,%rdi
  118bbe:	e8 98 01 00 00       	call   118d5b <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
  118bc3:	80 63 19 fb          	andb   $0xfb,0x19(%rbx)
  118bc7:	48 83 c4 20          	add    $0x20,%rsp
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
  118bcb:	45 88 6c 24 20       	mov    %r13b,0x20(%r12)
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
  118bd0:	49 c1 e5 0e          	shl    $0xe,%r13
  118bd4:	49 8d 85 70 a2 12 00 	lea    0x12a270(%r13),%rax
	thread->base.is_idle = 1U;
  118bdb:	c6 43 20 01          	movb   $0x1,0x20(%rbx)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
  118bdf:	49 89 5c 24 18       	mov    %rbx,0x18(%r12)
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
  118be4:	49 89 44 24 08       	mov    %rax,0x8(%r12)
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
  118be9:	f0 48 ff 05 df d5 00 	lock incq 0xd5df(%rip)        # 1261d0 <_cpus_active>
  118bf0:	00 
	/*
	 * Increment number of CPUs active. The pm subsystem
	 * will keep track of this from here.
	 */
	atomic_inc(&_cpus_active);
}
  118bf1:	48 8d 65 e0          	lea    -0x20(%rbp),%rsp
  118bf5:	5b                   	pop    %rbx
  118bf6:	41 5c                	pop    %r12
  118bf8:	41 5d                	pop    %r13
  118bfa:	41 5e                	pop    %r14
  118bfc:	5d                   	pop    %rbp
  118bfd:	c3                   	ret    

0000000000118bfe <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
  118bfe:	55                   	push   %rbp
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
  118bff:	31 ff                	xor    %edi,%edi
{
  118c01:	48 89 e5             	mov    %rsp,%rbp
  118c04:	41 55                	push   %r13
  118c06:	41 54                	push   %r12
  118c08:	53                   	push   %rbx
  118c09:	48 81 ec 28 03 00 00 	sub    $0x328,%rsp
	z_sys_init_run_level(INIT_LEVEL_EARLY);
  118c10:	e8 76 fe ff ff       	call   118a8b <z_sys_init_run_level>
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
  118c15:	31 d2                	xor    %edx,%edx
	dummy_thread->base.user_options = K_ESSENTIAL;
  118c17:	66 c7 85 d8 fc ff ff 	movw   $0x101,-0x328(%rbp)
  118c1e:	01 01 
	dummy_thread->resource_pool = NULL;
  118c20:	48 89 95 80 fd ff ff 	mov    %rdx,-0x280(%rbp)

static inline struct _cpu *arch_curr_cpu(void)
{
	struct _cpu *cpu;

	__asm__ volatile("movq %%gs:(%c1), %0"
  118c27:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  118c2e:	00 00 

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
  118c30:	48 8d 95 c0 fc ff ff 	lea    -0x340(%rbp),%rdx
  118c37:	48 89 50 10          	mov    %rdx,0x10(%rax)
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
  118c3b:	e8 e2 fd ff ff       	call   118a22 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
  118c40:	bf 01 00 00 00       	mov    $0x1,%edi
  118c45:	e8 41 fe ff ff       	call   118a8b <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
  118c4a:	bf 02 00 00 00       	mov    $0x2,%edi
  118c4f:	e8 37 fe ff ff       	call   118a8b <z_sys_init_run_level>
	z_sched_init();
  118c54:	e8 20 07 00 00       	call   119379 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
  118c59:	68 e2 02 12 00       	push   $0x1202e2
  118c5e:	45 31 c9             	xor    %r9d,%r9d
  118c61:	45 31 c0             	xor    %r8d,%r8d
  118c64:	6a 01                	push   $0x1
  118c66:	b9 f9 8a 11 00       	mov    $0x118af9,%ecx
  118c6b:	ba 00 08 00 00       	mov    $0x800,%edx
  118c70:	be 70 02 13 00       	mov    $0x130270,%esi
  118c75:	6a 00                	push   $0x0
  118c77:	bf e0 37 12 00       	mov    $0x1237e0,%edi
  118c7c:	6a 00                	push   $0x0
  118c7e:	e8 d8 00 00 00       	call   118d5b <z_setup_new_thread>
  118c83:	48 83 c4 20          	add    $0x20,%rsp
	z_ready_thread(&z_main_thread);
  118c87:	bf e0 37 12 00       	mov    $0x1237e0,%edi
  118c8c:	80 25 66 ab 00 00 fb 	andb   $0xfb,0xab66(%rip)        # 1237f9 <z_main_thread+0x19>
  118c93:	e8 3c 0e 00 00       	call   119ad4 <z_ready_thread>
	z_init_cpu(0);
  118c98:	31 ff                	xor    %edi,%edi
  118c9a:	e8 cf fe ff ff       	call   118b6e <z_init_cpu>
  118c9f:	9c                   	pushf  
  118ca0:	fa                   	cli    
  118ca1:	58                   	pop    %rax
	return z_impl_z_current_get();
  118ca2:	e8 e9 06 00 00       	call   119390 <z_impl_z_current_get>
	old_thread->swap_retval = -EAGAIN;
  118ca7:	c7 80 b4 00 00 00 f5 	movl   $0xfffffff5,0xb4(%rax)
  118cae:	ff ff ff 
  118cb1:	49 89 c4             	mov    %rax,%r12
  118cb4:	9c                   	pushf  
  118cb5:	fa                   	cli    
  118cb6:	58                   	pop    %rax
	return __atomic_compare_exchange_n(target, &old_value, new_value,
  118cb7:	45 31 ed             	xor    %r13d,%r13d
  118cba:	ba 01 00 00 00       	mov    $0x1,%edx
  118cbf:	4c 89 e8             	mov    %r13,%rax
  118cc2:	f0 48 0f b1 15 15 d5 	lock cmpxchg %rdx,0xd515(%rip)        # 1261e0 <sched_spinlock>
  118cc9:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  118ccb:	74 07                	je     118cd4 <z_cstart+0xd6>
		arch_spin_relax();
  118ccd:	e8 de 01 00 00       	call   118eb0 <arch_spin_relax>
  118cd2:	eb e6                	jmp    118cba <z_cstart+0xbc>
	new_thread = z_swap_next_thread();
  118cd4:	e8 e6 07 00 00       	call   1194bf <z_swap_next_thread>
  118cd9:	48 89 c3             	mov    %rax,%rbx
	if (new_thread != old_thread) {
  118cdc:	4c 39 e0             	cmp    %r12,%rax
  118cdf:	74 72                	je     118d53 <z_cstart+0x155>
  118ce1:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  118ce8:	00 00 
		_current_cpu->swap_ok = 0;
  118cea:	c6 40 21 00          	movb   $0x0,0x21(%rax)
  118cee:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  118cf5:	00 00 
		new_thread->base.cpu = arch_curr_cpu()->id;
  118cf7:	8a 40 20             	mov    0x20(%rax),%al
  118cfa:	88 43 21             	mov    %al,0x21(%rbx)
	while (*shp == NULL) {
  118cfd:	48 83 bb b8 00 00 00 	cmpq   $0x0,0xb8(%rbx)
  118d04:	00 
  118d05:	75 07                	jne    118d0e <z_cstart+0x110>
		arch_spin_relax();
  118d07:	e8 a4 01 00 00       	call   118eb0 <arch_spin_relax>
  118d0c:	eb ef                	jmp    118cfd <z_cstart+0xff>
  118d0e:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  118d15:	00 00 
		_current_cpu->current = new_thread;
  118d17:	48 89 58 10          	mov    %rbx,0x10(%rax)
		z_reset_time_slice(new_thread);
  118d1b:	48 89 df             	mov    %rbx,%rdi
  118d1e:	e8 7a 05 00 00       	call   11929d <z_reset_time_slice>
		z_requeue_current(old_thread);
  118d23:	4c 89 e7             	mov    %r12,%rdi
  118d26:	e8 07 05 00 00       	call   119232 <z_requeue_current>
			new_thread->switch_handle = NULL;
  118d2b:	31 c0                	xor    %eax,%eax
		void *newsh = new_thread->switch_handle;
  118d2d:	48 8b bb b8 00 00 00 	mov    0xb8(%rbx),%rdi
			new_thread->switch_handle = NULL;
  118d34:	48 89 83 b8 00 00 00 	mov    %rax,0xb8(%rbx)
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
  118d3b:	31 c0                	xor    %eax,%eax
  118d3d:	48 87 05 9c d4 00 00 	xchg   %rax,0xd49c(%rip)        # 1261e0 <sched_spinlock>
		arch_switch(newsh, &old_thread->switch_handle);
  118d44:	49 8d b4 24 b8 00 00 	lea    0xb8(%r12),%rsi
  118d4b:	00 

extern void z_x86_switch(void *switch_to, void **switched_from);

static inline void arch_switch(void *switch_to, void **switched_from)
{
	z_x86_switch(switch_to, switched_from);
  118d4c:	e8 85 84 ee ff       	call   11d6 <z_x86_switch>
}
  118d51:	eb 07                	jmp    118d5a <z_cstart+0x15c>
  118d53:	4c 87 2d 86 d4 00 00 	xchg   %r13,0xd486(%rip)        # 1261e0 <sched_spinlock>
  118d5a:	fb                   	sti    

0000000000118d5b <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
  118d5b:	55                   	push   %rbp
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
  118d5c:	48 8d 87 a0 00 00 00 	lea    0xa0(%rdi),%rax
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
  118d63:	48 83 c2 0f          	add    $0xf,%rdx
  118d67:	48 83 e2 f0          	and    $0xfffffffffffffff0,%rdx
{
  118d6b:	48 89 e5             	mov    %rsp,%rbp
  118d6e:	41 54                	push   %r12
	stack_ptr = (char *)stack + stack_obj_size;
  118d70:	4c 8d 24 16          	lea    (%rsi,%rdx,1),%r12
{
  118d74:	53                   	push   %rbx
  118d75:	48 89 fb             	mov    %rdi,%rbx
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
  118d78:	4c 89 e2             	mov    %r12,%rdx
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
  118d7b:	48 89 87 a0 00 00 00 	mov    %rax,0xa0(%rdi)
	list->tail = (sys_dnode_t *)list;
  118d82:	48 89 87 a8 00 00 00 	mov    %rax,0xa8(%rdi)

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
  118d89:	31 c0                	xor    %eax,%eax
  118d8b:	48 89 47 10          	mov    %rax,0x10(%rdi)
	thread_base->user_options = (uint8_t)options;
  118d8f:	8b 45 20             	mov    0x20(%rbp),%eax
	thread_base->thread_state = (uint8_t)initial_state;
  118d92:	c6 47 19 04          	movb   $0x4,0x19(%rdi)
	thread_base->user_options = (uint8_t)options;
  118d96:	88 47 18             	mov    %al,0x18(%rdi)

	thread_base->prio = priority;
  118d99:	8b 45 18             	mov    0x18(%rbp),%eax

	thread_base->sched_locked = 0U;
  118d9c:	c6 47 1b 00          	movb   $0x0,0x1b(%rdi)
	thread_base->prio = priority;
  118da0:	88 47 1a             	mov    %al,0x1a(%rdi)

#ifdef CONFIG_SMP
	thread_base->is_idle = 0;
  118da3:	c6 47 20 00          	movb   $0x0,0x20(%rdi)
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
  118da7:	31 ff                	xor    %edi,%edi
  118da9:	48 89 7b 30          	mov    %rdi,0x30(%rbx)
  118dad:	48 89 7b 38          	mov    %rdi,0x38(%rbx)
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
  118db1:	48 89 df             	mov    %rbx,%rdi
  118db4:	41 52                	push   %r10
  118db6:	ff 75 10             	push   0x10(%rbp)
  118db9:	e8 da 8d ff ff       	call   111b98 <arch_new_thread>
  118dbe:	41 5b                	pop    %r11
  118dc0:	58                   	pop    %rax
	new_thread->init_data = NULL;
  118dc1:	31 c0                	xor    %eax,%eax
  118dc3:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
  118dca:	e8 c1 05 00 00       	call   119390 <z_impl_z_current_get>
	new_thread->resource_pool = _current->resource_pool;
  118dcf:	48 8b 80 c0 00 00 00 	mov    0xc0(%rax),%rax
  118dd6:	48 89 83 c0 00 00 00 	mov    %rax,0xc0(%rbx)
}
  118ddd:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  118de1:	4c 89 e0             	mov    %r12,%rax
  118de4:	5b                   	pop    %rbx
  118de5:	41 5c                	pop    %r12
  118de7:	5d                   	pop    %rbp
  118de8:	c3                   	ret    

0000000000118de9 <z_init_static_threads>:
{
  118de9:	55                   	push   %rbp
  118dea:	48 89 e5             	mov    %rsp,%rbp
  118ded:	41 54                	push   %r12
  118def:	53                   	push   %rbx
	_FOREACH_STATIC_THREAD(thread_data) {
  118df0:	bb 10 c1 11 00       	mov    $0x11c110,%ebx
  118df5:	48 81 fb 10 c1 11 00 	cmp    $0x11c110,%rbx
  118dfc:	73 3d                	jae    118e3b <z_init_static_threads+0x52>
		z_setup_new_thread(
  118dfe:	48 8b 4b 18          	mov    0x18(%rbx),%rcx
  118e02:	8b 53 10             	mov    0x10(%rbx),%edx
  118e05:	48 8b 73 08          	mov    0x8(%rbx),%rsi
  118e09:	ff 73 48             	push   0x48(%rbx)
  118e0c:	8b 43 3c             	mov    0x3c(%rbx),%eax
  118e0f:	50                   	push   %rax
  118e10:	8b 43 38             	mov    0x38(%rbx),%eax
  118e13:	50                   	push   %rax
  118e14:	ff 73 30             	push   0x30(%rbx)
  118e17:	4c 8b 4b 28          	mov    0x28(%rbx),%r9
  118e1b:	4c 8b 43 20          	mov    0x20(%rbx),%r8
  118e1f:	48 8b 3b             	mov    (%rbx),%rdi
  118e22:	e8 34 ff ff ff       	call   118d5b <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
  118e27:	48 8b 03             	mov    (%rbx),%rax
		z_setup_new_thread(
  118e2a:	48 83 c4 20          	add    $0x20,%rsp
		thread_data->init_thread->init_data = thread_data;
  118e2e:	48 89 98 98 00 00 00 	mov    %rbx,0x98(%rax)
	_FOREACH_STATIC_THREAD(thread_data) {
  118e35:	48 83 c3 50          	add    $0x50,%rbx
  118e39:	eb ba                	jmp    118df5 <z_init_static_threads+0xc>
	k_sched_lock();
  118e3b:	e8 3a 06 00 00       	call   11947a <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
  118e40:	bb 10 c1 11 00       	mov    $0x11c110,%ebx
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
  118e45:	41 bc 0a 00 00 00    	mov    $0xa,%r12d
  118e4b:	48 81 fb 10 c1 11 00 	cmp    $0x11c110,%rbx
  118e52:	73 41                	jae    118e95 <z_init_static_threads+0xac>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
  118e54:	8b 43 40             	mov    0x40(%rbx),%eax
  118e57:	83 f8 ff             	cmp    $0xffffffff,%eax
  118e5a:	74 33                	je     118e8f <z_init_static_threads+0xa6>
					    K_MSEC(thread_data->init_delay));
  118e5c:	31 d2                	xor    %edx,%edx
  118e5e:	85 c0                	test   %eax,%eax
			schedule_new_thread(thread_data->init_thread,
  118e60:	48 8b 3b             	mov    (%rbx),%rdi
					    K_MSEC(thread_data->init_delay));
  118e63:	0f 48 c2             	cmovs  %edx,%eax
  118e66:	48 63 c8             	movslq %eax,%rcx
		t += off;
  118e69:	48 8d 41 09          	lea    0x9(%rcx),%rax
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
  118e6d:	48 85 c9             	test   %rcx,%rcx
  118e70:	75 07                	jne    118e79 <z_init_static_threads+0x90>
	z_sched_start(thread);
  118e72:	e8 b9 0c 00 00       	call   119b30 <z_sched_start>
}
  118e77:	eb 16                	jmp    118e8f <z_init_static_threads+0xa6>
			return t / ((uint64_t)from_hz / to_hz);
  118e79:	31 d2                	xor    %edx,%edx

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
  118e7b:	48 83 c7 30          	add    $0x30,%rdi
  118e7f:	be 33 9c 11 00       	mov    $0x119c33,%esi
  118e84:	49 f7 f4             	div    %r12
  118e87:	48 89 c2             	mov    %rax,%rdx
  118e8a:	e8 b8 15 00 00       	call   11a447 <z_add_timeout>
	_FOREACH_STATIC_THREAD(thread_data) {
  118e8f:	48 83 c3 50          	add    $0x50,%rbx
  118e93:	eb b6                	jmp    118e4b <z_init_static_threads+0x62>
}
  118e95:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  118e99:	5b                   	pop    %rbx
  118e9a:	41 5c                	pop    %r12
  118e9c:	5d                   	pop    %rbp
	k_sched_unlock();
  118e9d:	e9 30 08 00 00       	jmp    1196d2 <k_sched_unlock>

0000000000118ea2 <idle>:
	sys_clock_idle_exit();
#endif
}

void idle(void *unused1, void *unused2, void *unused3)
{
  118ea2:	55                   	push   %rbp
  118ea3:	48 89 e5             	mov    %rsp,%rbp
  118ea6:	9c                   	pushf  
  118ea7:	fa                   	cli    
  118ea8:	58                   	pop    %rax
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
  118ea9:	e8 61 87 ff ff       	call   11160f <arch_cpu_idle>
  118eae:	eb f6                	jmp    118ea6 <idle+0x4>

0000000000118eb0 <arch_spin_relax>:
	return rv.value;
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
  118eb0:	90                   	nop
{
	__ASSERT(!arch_irq_unlocked(arch_irq_lock()),
		 "this is meant to be called with IRQs disabled");

	arch_nop();
}
  118eb1:	c3                   	ret    

0000000000118eb2 <atomic_clear.constprop.0.isra.0>:
  118eb2:	31 c0                	xor    %eax,%eax
  118eb4:	48 87 05 1d d3 00 00 	xchg   %rax,0xd31d(%rip)        # 1261d8 <lock>
}
  118ebb:	c3                   	ret    

0000000000118ebc <adjust_owner_prio.isra.0>:
	return new_prio;
}

static bool adjust_owner_prio(struct k_mutex *mutex, int32_t new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
  118ebc:	0f be 47 1a          	movsbl 0x1a(%rdi),%eax
  118ec0:	39 f0                	cmp    %esi,%eax
  118ec2:	74 05                	je     118ec9 <adjust_owner_prio.isra.0+0xd>
		LOG_DBG("%p (ready (y/n): %c) prio changed to %d (was %d)",
			mutex->owner, z_is_thread_ready(mutex->owner) ?
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		return z_set_prio(mutex->owner, new_prio);
  118ec4:	e9 29 10 00 00       	jmp    119ef2 <z_set_prio>
	}
	return false;
}
  118ec9:	31 c0                	xor    %eax,%eax
  118ecb:	c3                   	ret    

0000000000118ecc <z_impl_k_mutex_init>:
	mutex->owner = NULL;
  118ecc:	31 c0                	xor    %eax,%eax
	mutex->lock_count = 0U;
  118ece:	31 d2                	xor    %edx,%edx
	list->head = (sys_dnode_t *)list;
  118ed0:	48 89 3f             	mov    %rdi,(%rdi)
	mutex->owner = NULL;
  118ed3:	48 89 47 10          	mov    %rax,0x10(%rdi)
}
  118ed7:	31 c0                	xor    %eax,%eax
	mutex->lock_count = 0U;
  118ed9:	89 57 18             	mov    %edx,0x18(%rdi)
	list->tail = (sys_dnode_t *)list;
  118edc:	48 89 7f 08          	mov    %rdi,0x8(%rdi)
}
  118ee0:	c3                   	ret    

0000000000118ee1 <z_impl_k_mutex_lock>:

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
  118ee1:	55                   	push   %rbp
  118ee2:	48 89 e5             	mov    %rsp,%rbp
  118ee5:	41 57                	push   %r15
  118ee7:	41 56                	push   %r14
  118ee9:	41 55                	push   %r13
  118eeb:	41 54                	push   %r12
  118eed:	49 89 f4             	mov    %rsi,%r12
  118ef0:	53                   	push   %rbx
  118ef1:	48 89 fb             	mov    %rdi,%rbx
  118ef4:	48 83 ec 18          	sub    $0x18,%rsp
  118ef8:	9c                   	pushf  
  118ef9:	fa                   	cli    
  118efa:	41 5f                	pop    %r15
	k.key = arch_irq_lock();
  118efc:	44 89 7d cc          	mov    %r15d,-0x34(%rbp)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
  118f00:	45 31 f6             	xor    %r14d,%r14d
  118f03:	ba 01 00 00 00       	mov    $0x1,%edx
  118f08:	4c 89 f0             	mov    %r14,%rax
  118f0b:	f0 48 0f b1 15 c4 d2 	lock cmpxchg %rdx,0xd2c4(%rip)        # 1261d8 <lock>
  118f12:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  118f14:	74 07                	je     118f1d <z_impl_k_mutex_lock+0x3c>
		arch_spin_relax();
  118f16:	e8 95 ff ff ff       	call   118eb0 <arch_spin_relax>
  118f1b:	eb e6                	jmp    118f03 <z_impl_k_mutex_lock+0x22>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
  118f1d:	44 8b 73 18          	mov    0x18(%rbx),%r14d
  118f21:	45 85 f6             	test   %r14d,%r14d
  118f24:	74 15                	je     118f3b <z_impl_k_mutex_lock+0x5a>
  118f26:	4c 8b 6b 10          	mov    0x10(%rbx),%r13
	return z_impl_z_current_get();
  118f2a:	e8 61 04 00 00       	call   119390 <z_impl_z_current_get>
  118f2f:	49 39 c5             	cmp    %rax,%r13
  118f32:	74 12                	je     118f46 <z_impl_k_mutex_lock+0x65>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
  118f34:	4d 85 e4             	test   %r12,%r12
  118f37:	75 50                	jne    118f89 <z_impl_k_mutex_lock+0xa8>
  118f39:	eb 37                	jmp    118f72 <z_impl_k_mutex_lock+0x91>
  118f3b:	e8 50 04 00 00       	call   119390 <z_impl_z_current_get>
					_current->base.prio :
  118f40:	0f be 40 1a          	movsbl 0x1a(%rax),%eax
  118f44:	eb 03                	jmp    118f49 <z_impl_k_mutex_lock+0x68>
  118f46:	8b 43 1c             	mov    0x1c(%rbx),%eax
		mutex->lock_count++;
  118f49:	41 ff c6             	inc    %r14d
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
  118f4c:	89 43 1c             	mov    %eax,0x1c(%rbx)
		mutex->lock_count++;
  118f4f:	44 89 73 18          	mov    %r14d,0x18(%rbx)
  118f53:	e8 38 04 00 00       	call   119390 <z_impl_z_current_get>
		mutex->owner = _current;
  118f58:	48 89 43 10          	mov    %rax,0x10(%rbx)
	atomic_clear(&l->locked);
  118f5c:	e8 51 ff ff ff       	call   118eb2 <atomic_clear.constprop.0.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  118f61:	41 0f ba e7 09       	bt     $0x9,%r15d
  118f66:	72 07                	jb     118f6f <z_impl_k_mutex_lock+0x8e>
		return 0;
  118f68:	31 c0                	xor    %eax,%eax
  118f6a:	e9 e2 00 00 00       	jmp    119051 <z_impl_k_mutex_lock+0x170>
		__asm__ volatile ("sti" ::: "memory");
  118f6f:	fb                   	sti    
  118f70:	eb f6                	jmp    118f68 <z_impl_k_mutex_lock+0x87>
  118f72:	e8 3b ff ff ff       	call   118eb2 <atomic_clear.constprop.0.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  118f77:	41 0f ba e7 09       	bt     $0x9,%r15d
  118f7c:	73 01                	jae    118f7f <z_impl_k_mutex_lock+0x9e>
		__asm__ volatile ("sti" ::: "memory");
  118f7e:	fb                   	sti    
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
  118f7f:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
  118f84:	e9 c8 00 00 00       	jmp    119051 <z_impl_k_mutex_lock+0x170>
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mutex, lock, mutex, timeout);

	new_prio = new_prio_for_inheritance(_current->base.prio,
  118f89:	0f be 70 1a          	movsbl 0x1a(%rax),%esi
  118f8d:	41 0f be 55 1a       	movsbl 0x1a(%r13),%edx
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
  118f92:	b8 81 ff ff ff       	mov    $0xffffff81,%eax
  118f97:	39 d6                	cmp    %edx,%esi
  118f99:	0f 4f f2             	cmovg  %edx,%esi
  118f9c:	39 c6                	cmp    %eax,%esi
  118f9e:	0f 4c f0             	cmovl  %eax,%esi
	bool resched = false;
  118fa1:	45 31 f6             	xor    %r14d,%r14d
					    mutex->owner->base.prio);

	LOG_DBG("adjusting prio up on mutex %p", mutex);

	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
  118fa4:	39 f2                	cmp    %esi,%edx
  118fa6:	7e 0c                	jle    118fb4 <z_impl_k_mutex_lock+0xd3>
		resched = adjust_owner_prio(mutex, new_prio);
  118fa8:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  118fac:	e8 0b ff ff ff       	call   118ebc <adjust_owner_prio.isra.0>
  118fb1:	41 89 c6             	mov    %eax,%r14d
	}

	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
  118fb4:	8b 75 cc             	mov    -0x34(%rbp),%esi
  118fb7:	4c 89 e1             	mov    %r12,%rcx
  118fba:	48 89 da             	mov    %rbx,%rdx
  118fbd:	bf d8 61 12 00       	mov    $0x1261d8,%edi
  118fc2:	e8 94 08 00 00       	call   11985b <z_pend_curr>
	LOG_DBG("on mutex %p got_mutex value: %d", mutex, got_mutex);

	LOG_DBG("%p got mutex %p (y/n): %c", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
  118fc7:	85 c0                	test   %eax,%eax
  118fc9:	74 9d                	je     118f68 <z_impl_k_mutex_lock+0x87>
  118fcb:	9c                   	pushf  
  118fcc:	fa                   	cli    
  118fcd:	41 5c                	pop    %r12
  118fcf:	45 31 ff             	xor    %r15d,%r15d
	k.key = arch_irq_lock();
  118fd2:	45 89 e5             	mov    %r12d,%r13d
  118fd5:	ba 01 00 00 00       	mov    $0x1,%edx
  118fda:	4c 89 f8             	mov    %r15,%rax
  118fdd:	f0 48 0f b1 15 f2 d1 	lock cmpxchg %rdx,0xd1f2(%rip)        # 1261d8 <lock>
  118fe4:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  118fe6:	74 07                	je     118fef <z_impl_k_mutex_lock+0x10e>
		arch_spin_relax();
  118fe8:	e8 c3 fe ff ff       	call   118eb0 <arch_spin_relax>
  118fed:	eb e6                	jmp    118fd5 <z_impl_k_mutex_lock+0xf4>

	/*
	 * Check if mutex was unlocked after this thread was unpended.
	 * If so, skip adjusting owner's priority down.
	 */
	if (likely(mutex->owner != NULL)) {
  118fef:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  118ff3:	48 85 ff             	test   %rdi,%rdi
  118ff6:	74 45                	je     11903d <z_impl_k_mutex_lock+0x15c>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
  118ff8:	48 8b 03             	mov    (%rbx),%rax
		struct k_thread *waiter = z_waitq_head(&mutex->wait_q);

		new_prio = (waiter != NULL) ?
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
  118ffb:	8b 73 1c             	mov    0x1c(%rbx),%esi
  118ffe:	48 85 c0             	test   %rax,%rax
  119001:	74 18                	je     11901b <z_impl_k_mutex_lock+0x13a>
  119003:	48 39 c3             	cmp    %rax,%rbx
  119006:	74 13                	je     11901b <z_impl_k_mutex_lock+0x13a>
  119008:	0f be 40 1a          	movsbl 0x1a(%rax),%eax
  11900c:	39 c6                	cmp    %eax,%esi
  11900e:	0f 4f f0             	cmovg  %eax,%esi
  119011:	b8 81 ff ff ff       	mov    $0xffffff81,%eax
  119016:	39 c6                	cmp    %eax,%esi
  119018:	0f 4c f0             	cmovl  %eax,%esi
			mutex->owner_orig_prio;

		LOG_DBG("adjusting prio down on mutex %p", mutex);

		resched = adjust_owner_prio(mutex, new_prio) || resched;
  11901b:	e8 9c fe ff ff       	call   118ebc <adjust_owner_prio.isra.0>
  119020:	45 84 f6             	test   %r14b,%r14b
  119023:	75 04                	jne    119029 <z_impl_k_mutex_lock+0x148>
  119025:	84 c0                	test   %al,%al
  119027:	74 19                	je     119042 <z_impl_k_mutex_lock+0x161>
	}

	if (resched) {
		z_reschedule(&lock, key);
  119029:	44 89 ee             	mov    %r13d,%esi
  11902c:	bf d8 61 12 00       	mov    $0x1261d8,%edi
  119031:	e8 ec 07 00 00       	call   119822 <z_reschedule>
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
  119036:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
  11903b:	eb 14                	jmp    119051 <z_impl_k_mutex_lock+0x170>
	if (resched) {
  11903d:	45 84 f6             	test   %r14b,%r14b
  119040:	eb e5                	jmp    119027 <z_impl_k_mutex_lock+0x146>
	atomic_clear(&l->locked);
  119042:	e8 6b fe ff ff       	call   118eb2 <atomic_clear.constprop.0.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  119047:	41 0f ba e4 09       	bt     $0x9,%r12d
  11904c:	73 e8                	jae    119036 <z_impl_k_mutex_lock+0x155>
		__asm__ volatile ("sti" ::: "memory");
  11904e:	fb                   	sti    
  11904f:	eb e5                	jmp    119036 <z_impl_k_mutex_lock+0x155>
}
  119051:	48 83 c4 18          	add    $0x18,%rsp
  119055:	5b                   	pop    %rbx
  119056:	41 5c                	pop    %r12
  119058:	41 5d                	pop    %r13
  11905a:	41 5e                	pop    %r14
  11905c:	41 5f                	pop    %r15
  11905e:	5d                   	pop    %rbp
  11905f:	c3                   	ret    

0000000000119060 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
  119060:	55                   	push   %rbp
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, -EINVAL);

		return -EINVAL;
  119061:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
{
  119066:	48 89 e5             	mov    %rsp,%rbp
  119069:	41 56                	push   %r14
  11906b:	41 55                	push   %r13
  11906d:	41 54                	push   %r12
  11906f:	53                   	push   %rbx
	CHECKIF(mutex->owner == NULL) {
  119070:	4c 8b 67 10          	mov    0x10(%rdi),%r12
  119074:	4d 85 e4             	test   %r12,%r12
  119077:	0f 84 a3 00 00 00    	je     119120 <z_impl_k_mutex_unlock+0xc0>
  11907d:	48 89 fb             	mov    %rdi,%rbx
  119080:	e8 0b 03 00 00       	call   119390 <z_impl_z_current_get>
  119085:	48 89 c2             	mov    %rax,%rdx
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, -EPERM);

		return -EPERM;
  119088:	83 c8 ff             	or     $0xffffffff,%eax
	CHECKIF(mutex->owner != _current) {
  11908b:	49 39 d4             	cmp    %rdx,%r12
  11908e:	0f 85 8c 00 00 00    	jne    119120 <z_impl_k_mutex_unlock+0xc0>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
  119094:	8b 43 18             	mov    0x18(%rbx),%eax
  119097:	83 f8 01             	cmp    $0x1,%eax
  11909a:	76 09                	jbe    1190a5 <z_impl_k_mutex_unlock+0x45>
		mutex->lock_count--;
  11909c:	ff c8                	dec    %eax
  11909e:	89 43 18             	mov    %eax,0x18(%rbx)


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
  1190a1:	31 c0                	xor    %eax,%eax
  1190a3:	eb 7b                	jmp    119120 <z_impl_k_mutex_unlock+0xc0>
  1190a5:	9c                   	pushf  
  1190a6:	fa                   	cli    
  1190a7:	41 5c                	pop    %r12
  1190a9:	45 31 f6             	xor    %r14d,%r14d
	k.key = arch_irq_lock();
  1190ac:	45 89 e5             	mov    %r12d,%r13d
  1190af:	ba 01 00 00 00       	mov    $0x1,%edx
  1190b4:	4c 89 f0             	mov    %r14,%rax
  1190b7:	f0 48 0f b1 15 18 d1 	lock cmpxchg %rdx,0xd118(%rip)        # 1261d8 <lock>
  1190be:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  1190c0:	74 07                	je     1190c9 <z_impl_k_mutex_unlock+0x69>
		arch_spin_relax();
  1190c2:	e8 e9 fd ff ff       	call   118eb0 <arch_spin_relax>
  1190c7:	eb e6                	jmp    1190af <z_impl_k_mutex_unlock+0x4f>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
  1190c9:	8b 73 1c             	mov    0x1c(%rbx),%esi
  1190cc:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
  1190d0:	e8 e7 fd ff ff       	call   118ebc <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
  1190d5:	48 89 df             	mov    %rbx,%rdi
  1190d8:	e8 2d 02 00 00       	call   11930a <z_unpend_first_thread>
	mutex->owner = new_owner;
  1190dd:	48 89 43 10          	mov    %rax,0x10(%rbx)
	new_owner = z_unpend_first_thread(&mutex->wait_q);
  1190e1:	48 89 c7             	mov    %rax,%rdi
	if (new_owner != NULL) {
  1190e4:	48 85 c0             	test   %rax,%rax
  1190e7:	74 23                	je     11910c <z_impl_k_mutex_unlock+0xac>
		mutex->owner_orig_prio = new_owner->base.prio;
  1190e9:	0f be 40 1a          	movsbl 0x1a(%rax),%eax
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
  1190ed:	31 d2                	xor    %edx,%edx
  1190ef:	89 43 1c             	mov    %eax,0x1c(%rbx)
  1190f2:	89 97 b4 00 00 00    	mov    %edx,0xb4(%rdi)
		z_ready_thread(new_owner);
  1190f8:	e8 d7 09 00 00       	call   119ad4 <z_ready_thread>
		z_reschedule(&lock, key);
  1190fd:	44 89 ee             	mov    %r13d,%esi
  119100:	bf d8 61 12 00       	mov    $0x1261d8,%edi
  119105:	e8 18 07 00 00       	call   119822 <z_reschedule>
  11910a:	eb 95                	jmp    1190a1 <z_impl_k_mutex_unlock+0x41>
		mutex->lock_count = 0U;
  11910c:	31 c0                	xor    %eax,%eax
  11910e:	89 43 18             	mov    %eax,0x18(%rbx)
	atomic_clear(&l->locked);
  119111:	e8 9c fd ff ff       	call   118eb2 <atomic_clear.constprop.0.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  119116:	41 0f ba e4 09       	bt     $0x9,%r12d
  11911b:	73 84                	jae    1190a1 <z_impl_k_mutex_unlock+0x41>
		__asm__ volatile ("sti" ::: "memory");
  11911d:	fb                   	sti    
  11911e:	eb 81                	jmp    1190a1 <z_impl_k_mutex_unlock+0x41>
}
  119120:	5b                   	pop    %rbx
  119121:	41 5c                	pop    %r12
  119123:	41 5d                	pop    %r13
  119125:	41 5e                	pop    %r14
  119127:	5d                   	pop    %rbp
  119128:	c3                   	ret    

0000000000119129 <sys_dlist_remove>:
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
  119129:	48 8b 07             	mov    (%rdi),%rax
	sys_dnode_t *const prev = node->prev;
  11912c:	48 8b 57 08          	mov    0x8(%rdi),%rdx

	prev->next = next;
  119130:	48 89 02             	mov    %rax,(%rdx)
	next->prev = prev;
  119133:	48 89 50 08          	mov    %rdx,0x8(%rax)
	node->prev = NULL;
  119137:	31 c0                	xor    %eax,%eax
  119139:	48 89 07             	mov    %rax,(%rdi)
  11913c:	48 89 47 08          	mov    %rax,0x8(%rdi)
	sys_dnode_init(node);
}
  119140:	c3                   	ret    

0000000000119141 <arch_is_in_isr>:
	 * (note deliberate lack of gcc size suffix on the
	 * instructions, we need to work with both architectures here)
	 */
	bool ret;

	__asm__ volatile ("pushf; cli");
  119141:	9c                   	pushf  
  119142:	fa                   	cli    
  119143:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  11914a:	00 00 
	ret = arch_curr_cpu()->nested != 0;
  11914c:	83 38 00             	cmpl   $0x0,(%rax)
  11914f:	0f 95 c0             	setne  %al
	__asm__ volatile ("popf");
  119152:	9d                   	popf   
	return ret;
#else
	return _kernel.cpus[0].nested != 0U;
#endif
}
  119153:	c3                   	ret    

0000000000119154 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
  119154:	31 c0                	xor    %eax,%eax
  119156:	66 83 7f 1a 7f       	cmpw   $0x7f,0x1a(%rdi)
  11915b:	77 27                	ja     119184 <sliceable+0x30>
	int ret = slice_ticks;
  11915d:	8b 05 f9 d0 00 00    	mov    0xd0f9(%rip),%eax        # 12625c <slice_ticks>
		&& slice_time(thread) != 0
  119163:	85 c0                	test   %eax,%eax
  119165:	74 1d                	je     119184 <sliceable+0x30>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
  119167:	0f be 57 1a          	movsbl 0x1a(%rdi),%edx
		&& !z_is_idle_thread_object(thread);
  11916b:	31 c0                	xor    %eax,%eax
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
  11916d:	39 15 e5 d0 00 00    	cmp    %edx,0xd0e5(%rip)        # 126258 <slice_max_prio>
  119173:	7f 0f                	jg     119184 <sliceable+0x30>
		&& !z_is_thread_prevented_from_running(thread)
  119175:	f6 47 19 1f          	testb  $0x1f,0x19(%rdi)
  119179:	75 09                	jne    119184 <sliceable+0x30>
		&& !z_is_idle_thread_object(thread);
  11917b:	31 c0                	xor    %eax,%eax
  11917d:	80 7f 20 00          	cmpb   $0x0,0x20(%rdi)
  119181:	0f 94 c0             	sete   %al
	bool ret = is_preempt(thread)
  119184:	83 e0 01             	and    $0x1,%eax
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
  119187:	c3                   	ret    

0000000000119188 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
  119188:	48 81 ef 80 3b 12 00 	sub    $0x123b80,%rdi
  11918f:	48 c1 ff 05          	sar    $0x5,%rdi

	slice_expired[cpu] = true;
  119193:	48 63 c7             	movslq %edi,%rax
  119196:	c6 80 6a 62 12 00 01 	movb   $0x1,0x12626a(%rax)
  11919d:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  1191a4:	00 00 

	/* We need an IPI if we just handled a timeslice expiration
	 * for a different CPU.  Ideally this would be able to target
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
  1191a6:	0f b6 40 20          	movzbl 0x20(%rax),%eax
  1191aa:	39 f8                	cmp    %edi,%eax
  1191ac:	74 07                	je     1191b5 <slice_timeout+0x2d>
		_kernel.pending_ipi = true;
  1191ae:	c6 05 ab a9 00 00 01 	movb   $0x1,0xa9ab(%rip)        # 123b60 <_kernel+0x60>
		flag_ipi();
	}
}
  1191b5:	c3                   	ret    

00000000001191b6 <thread_active_elsewhere>:
  1191b6:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  1191bd:	00 00 
	/* True if the thread is currently running on another CPU.
	 * There are more scalable designs to answer this question in
	 * constant time, but this is fine for now.
	 */
#ifdef CONFIG_SMP
	int currcpu = _current_cpu->id;
  1191bf:	0f b6 50 20          	movzbl 0x20(%rax),%edx

	unsigned int num_cpus = arch_num_cpus();

	for (int i = 0; i < num_cpus; i++) {
		if ((i != currcpu) &&
  1191c3:	85 d2                	test   %edx,%edx
  1191c5:	74 11                	je     1191d8 <thread_active_elsewhere+0x22>
  1191c7:	48 3b 3d 42 a9 00 00 	cmp    0xa942(%rip),%rdi        # 123b10 <_kernel+0x10>
		    (_kernel.cpus[i].current == thread)) {
			return true;
  1191ce:	b0 01                	mov    $0x1,%al
		if ((i != currcpu) &&
  1191d0:	74 10                	je     1191e2 <thread_active_elsewhere+0x2c>
		}
	}
#endif
	return false;
  1191d2:	31 c0                	xor    %eax,%eax
		if ((i != currcpu) &&
  1191d4:	ff ca                	dec    %edx
  1191d6:	74 0a                	je     1191e2 <thread_active_elsewhere+0x2c>
  1191d8:	48 39 3d 59 a9 00 00 	cmp    %rdi,0xa959(%rip)        # 123b38 <_kernel+0x38>
  1191df:	0f 94 c0             	sete   %al
}
  1191e2:	c3                   	ret    

00000000001191e3 <unpend_thread_no_timeout>:
		pend_locked(thread, wait_q, timeout);
	}
}

static inline void unpend_thread_no_timeout(struct k_thread *thread)
{
  1191e3:	55                   	push   %rbp
  1191e4:	48 89 e5             	mov    %rsp,%rbp

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
  1191e7:	e8 3d ff ff ff       	call   119129 <sys_dlist_remove>
	thread->base.pended_on = NULL;
  1191ec:	31 c0                	xor    %eax,%eax
	thread->base.thread_state &= ~_THREAD_PENDING;
  1191ee:	80 67 19 fd          	andb   $0xfd,0x19(%rdi)
}
  1191f2:	5d                   	pop    %rbp
	thread->base.pended_on = NULL;
  1191f3:	48 89 47 10          	mov    %rax,0x10(%rdi)
}
  1191f7:	c3                   	ret    

00000000001191f8 <z_sched_switch_spin>:
{
  1191f8:	55                   	push   %rbp
  1191f9:	48 89 e5             	mov    %rsp,%rbp
  1191fc:	53                   	push   %rbx
  1191fd:	48 89 fb             	mov    %rdi,%rbx
  119200:	52                   	push   %rdx
	while (*shp == NULL) {
  119201:	48 83 bb b8 00 00 00 	cmpq   $0x0,0xb8(%rbx)
  119208:	00 
  119209:	75 07                	jne    119212 <z_sched_switch_spin+0x1a>
		arch_spin_relax();
  11920b:	e8 a0 fc ff ff       	call   118eb0 <arch_spin_relax>
  119210:	eb ef                	jmp    119201 <z_sched_switch_spin+0x9>
}
  119212:	58                   	pop    %rax
  119213:	5b                   	pop    %rbx
  119214:	5d                   	pop    %rbp
  119215:	c3                   	ret    

0000000000119216 <signal_pending_ipi>:
		if (_kernel.pending_ipi) {
  119216:	80 3d 43 a9 00 00 00 	cmpb   $0x0,0xa943(%rip)        # 123b60 <_kernel+0x60>
  11921d:	74 0c                	je     11922b <signal_pending_ipi+0x15>
			_kernel.pending_ipi = false;
  11921f:	c6 05 3a a9 00 00 00 	movb   $0x0,0xa93a(%rip)        # 123b60 <_kernel+0x60>
			arch_sched_ipi();
  119226:	e9 37 89 ff ff       	jmp    111b62 <arch_sched_ipi>
}
  11922b:	c3                   	ret    

000000000011922c <atomic_clear.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
  11922c:	31 c0                	xor    %eax,%eax
  11922e:	48 87 07             	xchg   %rax,(%rdi)
}
  119231:	c3                   	ret    

0000000000119232 <z_requeue_current>:
	if (z_is_thread_queued(curr)) {
  119232:	80 7f 19 00          	cmpb   $0x0,0x19(%rdi)
  119236:	79 60                	jns    119298 <z_requeue_current+0x66>
	return list->head == list;
  119238:	48 8b 05 11 a9 00 00 	mov    0xa911(%rip),%rax        # 123b50 <_kernel+0x50>
	return sys_dlist_is_empty(list) ? NULL : list->head;
  11923f:	48 3d 50 3b 12 00    	cmp    $0x123b50,%rax
  119245:	75 02                	jne    119249 <z_requeue_current+0x17>
  119247:	31 c0                	xor    %eax,%eax
	return (node == list->tail) ? NULL : node->next;
  119249:	48 8b 15 08 a9 00 00 	mov    0xa908(%rip),%rdx        # 123b58 <_kernel+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
  119250:	48 85 c0             	test   %rax,%rax
  119253:	74 2e                	je     119283 <z_requeue_current+0x51>
	int32_t b1 = thread_1->base.prio;
  119255:	0f be 4f 1a          	movsbl 0x1a(%rdi),%ecx
	int32_t b2 = thread_2->base.prio;
  119259:	0f be 70 1a          	movsbl 0x1a(%rax),%esi
	if (b1 != b2) {
  11925d:	39 f1                	cmp    %esi,%ecx
  11925f:	74 18                	je     119279 <z_requeue_current+0x47>
		if (z_sched_prio_cmp(thread, t) > 0) {
  119261:	39 ce                	cmp    %ecx,%esi
  119263:	7e 14                	jle    119279 <z_requeue_current+0x47>
	sys_dnode_t *const prev = successor->prev;
  119265:	48 8b 50 08          	mov    0x8(%rax),%rdx
	node->next = successor;
  119269:	48 89 07             	mov    %rax,(%rdi)
	node->prev = prev;
  11926c:	48 89 57 08          	mov    %rdx,0x8(%rdi)
	prev->next = node;
  119270:	48 89 3a             	mov    %rdi,(%rdx)
	successor->prev = node;
  119273:	48 89 78 08          	mov    %rdi,0x8(%rax)
}
  119277:	eb 1f                	jmp    119298 <z_requeue_current+0x66>
	return (node == list->tail) ? NULL : node->next;
  119279:	48 39 d0             	cmp    %rdx,%rax
  11927c:	74 05                	je     119283 <z_requeue_current+0x51>
  11927e:	48 8b 00             	mov    (%rax),%rax
  119281:	eb cd                	jmp    119250 <z_requeue_current+0x1e>
	node->next = list;
  119283:	48 c7 07 50 3b 12 00 	movq   $0x123b50,(%rdi)
	node->prev = tail;
  11928a:	48 89 57 08          	mov    %rdx,0x8(%rdi)
	tail->next = node;
  11928e:	48 89 3a             	mov    %rdi,(%rdx)
	list->tail = node;
  119291:	48 89 3d c0 a8 00 00 	mov    %rdi,0xa8c0(%rip)        # 123b58 <_kernel+0x58>
	signal_pending_ipi();
  119298:	e9 79 ff ff ff       	jmp    119216 <signal_pending_ipi>

000000000011929d <z_reset_time_slice>:
{
  11929d:	55                   	push   %rbp
  11929e:	48 89 e5             	mov    %rsp,%rbp
  1192a1:	41 55                	push   %r13
  1192a3:	49 89 fd             	mov    %rdi,%r13
  1192a6:	41 54                	push   %r12
  1192a8:	53                   	push   %rbx
  1192a9:	56                   	push   %rsi
  1192aa:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  1192b1:	00 00 
	int cpu = _current_cpu->id;
  1192b3:	0f b6 58 20          	movzbl 0x20(%rax),%ebx
  1192b7:	49 89 dc             	mov    %rbx,%r12
	z_abort_timeout(&slice_timeouts[cpu]);
  1192ba:	48 c1 e3 05          	shl    $0x5,%rbx
  1192be:	48 81 c3 80 3b 12 00 	add    $0x123b80,%rbx
  1192c5:	48 89 df             	mov    %rbx,%rdi
  1192c8:	e8 93 12 00 00       	call   11a560 <z_abort_timeout>
	if (sliceable(curr)) {
  1192cd:	4c 89 ef             	mov    %r13,%rdi
	slice_expired[cpu] = false;
  1192d0:	41 c6 84 24 6a 62 12 	movb   $0x0,0x12626a(%r12)
  1192d7:	00 00 
	if (sliceable(curr)) {
  1192d9:	e8 76 fe ff ff       	call   119154 <sliceable>
  1192de:	84 c0                	test   %al,%al
  1192e0:	74 20                	je     119302 <z_reset_time_slice+0x65>
			      K_TICKS(slice_time(curr) - 1));
  1192e2:	8b 05 74 cf 00 00    	mov    0xcf74(%rip),%eax        # 12625c <slice_ticks>
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
  1192e8:	48 89 df             	mov    %rbx,%rdi
}
  1192eb:	59                   	pop    %rcx
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
  1192ec:	be 88 91 11 00       	mov    $0x119188,%esi
}
  1192f1:	5b                   	pop    %rbx
  1192f2:	41 5c                	pop    %r12
			      K_TICKS(slice_time(curr) - 1));
  1192f4:	8d 50 ff             	lea    -0x1(%rax),%edx
}
  1192f7:	41 5d                	pop    %r13
  1192f9:	5d                   	pop    %rbp
			      K_TICKS(slice_time(curr) - 1));
  1192fa:	48 63 d2             	movslq %edx,%rdx
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
  1192fd:	e9 45 11 00 00       	jmp    11a447 <z_add_timeout>
}
  119302:	58                   	pop    %rax
  119303:	5b                   	pop    %rbx
  119304:	41 5c                	pop    %r12
  119306:	41 5d                	pop    %r13
  119308:	5d                   	pop    %rbp
  119309:	c3                   	ret    

000000000011930a <z_unpend_first_thread>:
{
  11930a:	55                   	push   %rbp
  11930b:	48 89 e5             	mov    %rsp,%rbp
  11930e:	41 55                	push   %r13
  119310:	41 54                	push   %r12
  119312:	49 89 fc             	mov    %rdi,%r12
  119315:	53                   	push   %rbx
  119316:	51                   	push   %rcx
  119317:	9c                   	pushf  
  119318:	fa                   	cli    
  119319:	41 5d                	pop    %r13
	return __atomic_compare_exchange_n(target, &old_value, new_value,
  11931b:	31 db                	xor    %ebx,%ebx
  11931d:	ba 01 00 00 00       	mov    $0x1,%edx
  119322:	48 89 d8             	mov    %rbx,%rax
  119325:	f0 48 0f b1 15 b2 ce 	lock cmpxchg %rdx,0xceb2(%rip)        # 1261e0 <sched_spinlock>
  11932c:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  11932e:	74 07                	je     119337 <z_unpend_first_thread+0x2d>
		arch_spin_relax();
  119330:	e8 7b fb ff ff       	call   118eb0 <arch_spin_relax>
  119335:	eb e6                	jmp    11931d <z_unpend_first_thread+0x13>
	return list->head == list;
  119337:	49 8b 1c 24          	mov    (%r12),%rbx
		if (thread != NULL) {
  11933b:	49 39 dc             	cmp    %rbx,%r12
  11933e:	74 2a                	je     11936a <z_unpend_first_thread+0x60>
  119340:	48 85 db             	test   %rbx,%rbx
  119343:	74 25                	je     11936a <z_unpend_first_thread+0x60>
			unpend_thread_no_timeout(thread);
  119345:	48 89 df             	mov    %rbx,%rdi
  119348:	e8 96 fe ff ff       	call   1191e3 <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
  11934d:	48 8d 7b 30          	lea    0x30(%rbx),%rdi
  119351:	e8 0a 12 00 00       	call   11a560 <z_abort_timeout>
	atomic_clear(&l->locked);
  119356:	bf e0 61 12 00       	mov    $0x1261e0,%edi
  11935b:	e8 cc fe ff ff       	call   11922c <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  119360:	41 0f ba e5 09       	bt     $0x9,%r13d
  119365:	73 07                	jae    11936e <z_unpend_first_thread+0x64>
		__asm__ volatile ("sti" ::: "memory");
  119367:	fb                   	sti    
	return thread;
  119368:	eb 04                	jmp    11936e <z_unpend_first_thread+0x64>
	return sys_dlist_is_empty(list) ? NULL : list->head;
  11936a:	31 db                	xor    %ebx,%ebx
  11936c:	eb e8                	jmp    119356 <z_unpend_first_thread+0x4c>
}
  11936e:	5a                   	pop    %rdx
  11936f:	48 89 d8             	mov    %rbx,%rax
  119372:	5b                   	pop    %rbx
  119373:	41 5c                	pop    %r12
  119375:	41 5d                	pop    %r13
  119377:	5d                   	pop    %rbp
  119378:	c3                   	ret    

0000000000119379 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
  119379:	48 c7 05 cc a7 00 00 	movq   $0x123b50,0xa7cc(%rip)        # 123b50 <_kernel+0x50>
  119380:	50 3b 12 00 
	list->tail = (sys_dnode_t *)list;
  119384:	48 c7 05 c9 a7 00 00 	movq   $0x123b50,0xa7c9(%rip)        # 123b58 <_kernel+0x58>
  11938b:	50 3b 12 00 
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
  11938f:	c3                   	ret    

0000000000119390 <z_impl_z_current_get>:
  119390:	9c                   	pushf  
  119391:	fa                   	cli    
  119392:	5a                   	pop    %rdx
  119393:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  11939a:	00 00 
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11939c:	0f ba e2 09          	bt     $0x9,%edx
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
  1193a0:	48 8b 40 10          	mov    0x10(%rax),%rax
  1193a4:	73 01                	jae    1193a7 <z_impl_z_current_get+0x17>
		__asm__ volatile ("sti" ::: "memory");
  1193a6:	fb                   	sti    

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
  1193a7:	c3                   	ret    

00000000001193a8 <z_current_get>:
  1193a8:	e9 e3 ff ff ff       	jmp    119390 <z_impl_z_current_get>

00000000001193ad <unready_thread>:
{
  1193ad:	55                   	push   %rbp
	return (thread->base.thread_state & state) != 0U;
  1193ae:	40 8a 77 19          	mov    0x19(%rdi),%sil
  1193b2:	48 89 e5             	mov    %rsp,%rbp
	return !IS_ENABLED(CONFIG_SMP) || th != _current;
  1193b5:	e8 ee ff ff ff       	call   1193a8 <z_current_get>
  1193ba:	48 89 c1             	mov    %rax,%rcx
	if (z_is_thread_queued(thread)) {
  1193bd:	40 84 f6             	test   %sil,%sil
  1193c0:	79 11                	jns    1193d3 <unready_thread+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
  1193c2:	83 e6 7f             	and    $0x7f,%esi
  1193c5:	40 88 77 19          	mov    %sil,0x19(%rdi)
	if (should_queue_thread(thread)) {
  1193c9:	48 39 c7             	cmp    %rax,%rdi
  1193cc:	74 05                	je     1193d3 <unready_thread+0x26>
	sys_dlist_remove(&thread->base.qnode_dlist);
  1193ce:	e8 56 fd ff ff       	call   119129 <sys_dlist_remove>
  1193d3:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  1193da:	00 00 
	update_cache(thread == _current);
  1193dc:	48 39 cf             	cmp    %rcx,%rdi
	_current_cpu->swap_ok = preempt_ok;
  1193df:	0f 94 40 21          	sete   0x21(%rax)
}
  1193e3:	5d                   	pop    %rbp
  1193e4:	c3                   	ret    

00000000001193e5 <add_to_waitq_locked>:
{
  1193e5:	55                   	push   %rbp
  1193e6:	49 89 f0             	mov    %rsi,%r8
  1193e9:	48 89 e5             	mov    %rsp,%rbp
	unready_thread(thread);
  1193ec:	e8 bc ff ff ff       	call   1193ad <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
  1193f1:	80 4f 19 02          	orb    $0x2,0x19(%rdi)
	if (wait_q != NULL) {
  1193f5:	4d 85 c0             	test   %r8,%r8
  1193f8:	74 52                	je     11944c <add_to_waitq_locked+0x67>
		thread->base.pended_on = wait_q;
  1193fa:	4c 89 47 10          	mov    %r8,0x10(%rdi)
	return list->head == list;
  1193fe:	49 8b 00             	mov    (%r8),%rax
	return sys_dlist_is_empty(list) ? NULL : list->head;
  119401:	49 39 c0             	cmp    %rax,%r8
  119404:	74 34                	je     11943a <add_to_waitq_locked+0x55>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
  119406:	48 85 c0             	test   %rax,%rax
  119409:	74 2f                	je     11943a <add_to_waitq_locked+0x55>
	int32_t b1 = thread_1->base.prio;
  11940b:	0f be 57 1a          	movsbl 0x1a(%rdi),%edx
	int32_t b2 = thread_2->base.prio;
  11940f:	0f be 48 1a          	movsbl 0x1a(%rax),%ecx
	if (b1 != b2) {
  119413:	39 ca                	cmp    %ecx,%edx
  119415:	74 18                	je     11942f <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
  119417:	39 d1                	cmp    %edx,%ecx
  119419:	7e 14                	jle    11942f <add_to_waitq_locked+0x4a>
	sys_dnode_t *const prev = successor->prev;
  11941b:	48 8b 50 08          	mov    0x8(%rax),%rdx
	node->next = successor;
  11941f:	48 89 07             	mov    %rax,(%rdi)
	node->prev = prev;
  119422:	48 89 57 08          	mov    %rdx,0x8(%rdi)
	prev->next = node;
  119426:	48 89 3a             	mov    %rdi,(%rdx)
	successor->prev = node;
  119429:	48 89 78 08          	mov    %rdi,0x8(%rax)
}
  11942d:	eb 1d                	jmp    11944c <add_to_waitq_locked+0x67>
	return (node == list->tail) ? NULL : node->next;
  11942f:	49 3b 40 08          	cmp    0x8(%r8),%rax
  119433:	74 05                	je     11943a <add_to_waitq_locked+0x55>
  119435:	48 8b 00             	mov    (%rax),%rax
  119438:	eb cc                	jmp    119406 <add_to_waitq_locked+0x21>
	sys_dnode_t *const tail = list->tail;
  11943a:	49 8b 40 08          	mov    0x8(%r8),%rax
	node->next = list;
  11943e:	4c 89 07             	mov    %r8,(%rdi)
	node->prev = tail;
  119441:	48 89 47 08          	mov    %rax,0x8(%rdi)
	tail->next = node;
  119445:	48 89 38             	mov    %rdi,(%rax)
	list->tail = node;
  119448:	49 89 78 08          	mov    %rdi,0x8(%r8)
}
  11944c:	5d                   	pop    %rbp
  11944d:	c3                   	ret    

000000000011944e <pend_locked>:
{
  11944e:	55                   	push   %rbp
  11944f:	48 89 e5             	mov    %rsp,%rbp
  119452:	48 83 ec 10          	sub    $0x10,%rsp
  119456:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
	add_to_waitq_locked(thread, wait_q);
  11945a:	e8 86 ff ff ff       	call   1193e5 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
  11945f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  119463:	48 83 fa ff          	cmp    $0xffffffffffffffff,%rdx
  119467:	74 0f                	je     119478 <pend_locked+0x2a>
}
  119469:	c9                   	leave  
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
  11946a:	48 83 c7 30          	add    $0x30,%rdi
  11946e:	be 33 9c 11 00       	mov    $0x119c33,%esi
  119473:	e9 cf 0f 00 00       	jmp    11a447 <z_add_timeout>
  119478:	c9                   	leave  
  119479:	c3                   	ret    

000000000011947a <k_sched_lock>:
{
  11947a:	55                   	push   %rbp
  11947b:	48 89 e5             	mov    %rsp,%rbp
  11947e:	41 54                	push   %r12
  119480:	53                   	push   %rbx
  119481:	9c                   	pushf  
  119482:	fa                   	cli    
  119483:	5b                   	pop    %rbx
  119484:	45 31 e4             	xor    %r12d,%r12d
  119487:	ba 01 00 00 00       	mov    $0x1,%edx
  11948c:	4c 89 e0             	mov    %r12,%rax
  11948f:	f0 48 0f b1 15 48 cd 	lock cmpxchg %rdx,0xcd48(%rip)        # 1261e0 <sched_spinlock>
  119496:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  119498:	74 07                	je     1194a1 <k_sched_lock+0x27>
		arch_spin_relax();
  11949a:	e8 11 fa ff ff       	call   118eb0 <arch_spin_relax>
  11949f:	eb e6                	jmp    119487 <k_sched_lock+0xd>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
  1194a1:	e8 02 ff ff ff       	call   1193a8 <z_current_get>
  1194a6:	fe 48 1b             	decb   0x1b(%rax)
	atomic_clear(&l->locked);
  1194a9:	bf e0 61 12 00       	mov    $0x1261e0,%edi
  1194ae:	e8 79 fd ff ff       	call   11922c <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  1194b3:	0f ba e3 09          	bt     $0x9,%ebx
  1194b7:	73 01                	jae    1194ba <k_sched_lock+0x40>
		__asm__ volatile ("sti" ::: "memory");
  1194b9:	fb                   	sti    
}
  1194ba:	5b                   	pop    %rbx
  1194bb:	41 5c                	pop    %r12
  1194bd:	5d                   	pop    %rbp
  1194be:	c3                   	ret    

00000000001194bf <z_swap_next_thread>:
{
  1194bf:	55                   	push   %rbp
  1194c0:	48 89 e5             	mov    %rsp,%rbp
  1194c3:	53                   	push   %rbx
  1194c4:	51                   	push   %rcx
	return list->head == list;
  1194c5:	48 8b 0d 84 a6 00 00 	mov    0xa684(%rip),%rcx        # 123b50 <_kernel+0x50>
	bool queued = z_is_thread_queued(_current);
  1194cc:	e8 d7 fe ff ff       	call   1193a8 <z_current_get>
  1194d1:	48 89 c3             	mov    %rax,%rbx
	return (thread->base.thread_state & state) != 0U;
  1194d4:	8a 40 19             	mov    0x19(%rax),%al
  1194d7:	89 c2                	mov    %eax,%edx
  1194d9:	83 e2 1f             	and    $0x1f,%edx
	return sys_dlist_is_empty(list) ? NULL : list->head;
  1194dc:	48 81 f9 50 3b 12 00 	cmp    $0x123b50,%rcx
  1194e3:	74 05                	je     1194ea <z_swap_next_thread+0x2b>
	if (thread == NULL) {
  1194e5:	48 85 c9             	test   %rcx,%rcx
  1194e8:	75 0d                	jne    1194f7 <z_swap_next_thread+0x38>
  1194ea:	65 48 8b 0c 25 68 00 	mov    %gs:0x68,%rcx
  1194f1:	00 00 
		thread = _current_cpu->idle_thread;
  1194f3:	48 8b 49 18          	mov    0x18(%rcx),%rcx
	if (active) {
  1194f7:	84 d2                	test   %dl,%dl
  1194f9:	74 0b                	je     119506 <z_swap_next_thread+0x47>
	if (thread != _current && active &&
  1194fb:	48 39 d9             	cmp    %rbx,%rcx
  1194fe:	0f 85 87 00 00 00    	jne    11958b <z_swap_next_thread+0xcc>
  119504:	eb 47                	jmp    11954d <z_swap_next_thread+0x8e>
	int32_t b1 = thread_1->base.prio;
  119506:	0f be 53 1a          	movsbl 0x1a(%rbx),%edx
	int32_t b2 = thread_2->base.prio;
  11950a:	0f be 71 1a          	movsbl 0x1a(%rcx),%esi
	if (b1 != b2) {
  11950e:	39 f2                	cmp    %esi,%edx
  119510:	74 06                	je     119518 <z_swap_next_thread+0x59>
		if ((cmp > 0) || ((cmp == 0) && !_current_cpu->swap_ok)) {
  119512:	39 d6                	cmp    %edx,%esi
  119514:	7f 11                	jg     119527 <z_swap_next_thread+0x68>
  119516:	eb 1a                	jmp    119532 <z_swap_next_thread+0x73>
  119518:	65 48 8b 14 25 68 00 	mov    %gs:0x68,%rdx
  11951f:	00 00 
  119521:	80 7a 21 00          	cmpb   $0x0,0x21(%rdx)
  119525:	75 0b                	jne    119532 <z_swap_next_thread+0x73>
  119527:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  11952e:	00 00 
	if (preempt_ok != 0) {
  119530:	eb 1b                	jmp    11954d <z_swap_next_thread+0x8e>
  119532:	65 48 8b 14 25 68 00 	mov    %gs:0x68,%rdx
  119539:	00 00 
  11953b:	80 7a 21 00          	cmpb   $0x0,0x21(%rdx)
  11953f:	75 07                	jne    119548 <z_swap_next_thread+0x89>
	if (is_preempt(_current) || is_metairq(thread)) {
  119541:	66 83 7b 1a 7f       	cmpw   $0x7f,0x1a(%rbx)
  119546:	77 05                	ja     11954d <z_swap_next_thread+0x8e>
	if (thread != _current && active &&
  119548:	48 39 d9             	cmp    %rbx,%rcx
  11954b:	75 21                	jne    11956e <z_swap_next_thread+0xaf>
  11954d:	8a 43 19             	mov    0x19(%rbx),%al
	if (z_is_thread_queued(thread)) {
  119550:	84 c0                	test   %al,%al
  119552:	79 06                	jns    11955a <z_swap_next_thread+0x9b>
	thread->base.thread_state &= ~_THREAD_QUEUED;
  119554:	83 e0 7f             	and    $0x7f,%eax
  119557:	88 43 19             	mov    %al,0x19(%rbx)
  11955a:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119561:	00 00 
	_current_cpu->swap_ok = false;
  119563:	c6 40 21 00          	movb   $0x0,0x21(%rax)
		signal_pending_ipi();
  119567:	e8 aa fc ff ff       	call   119216 <signal_pending_ipi>
	return ret;
  11956c:	eb 42                	jmp    1195b0 <z_swap_next_thread+0xf1>
		!z_is_idle_thread_object(_current) && !queued) {
  11956e:	80 7b 20 00          	cmpb   $0x0,0x20(%rbx)
  119572:	75 17                	jne    11958b <z_swap_next_thread+0xcc>
  119574:	84 c0                	test   %al,%al
  119576:	78 13                	js     11958b <z_swap_next_thread+0xcc>
	thread->base.thread_state |= _THREAD_QUEUED;
  119578:	83 c8 80             	or     $0xffffff80,%eax
  11957b:	88 43 19             	mov    %al,0x19(%rbx)
  11957e:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119585:	00 00 
		_current_cpu->swap_ok = true;
  119587:	c6 40 21 01          	movb   $0x1,0x21(%rax)
  11958b:	8a 41 19             	mov    0x19(%rcx),%al
	if (z_is_thread_queued(thread)) {
  11958e:	84 c0                	test   %al,%al
  119590:	79 0e                	jns    1195a0 <z_swap_next_thread+0xe1>
	thread->base.thread_state &= ~_THREAD_QUEUED;
  119592:	83 e0 7f             	and    $0x7f,%eax
	sys_dlist_remove(&thread->base.qnode_dlist);
  119595:	48 89 cf             	mov    %rcx,%rdi
	thread->base.thread_state &= ~_THREAD_QUEUED;
  119598:	88 41 19             	mov    %al,0x19(%rcx)
	sys_dlist_remove(&thread->base.qnode_dlist);
  11959b:	e8 89 fb ff ff       	call   119129 <sys_dlist_remove>
  1195a0:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  1195a7:	00 00 
	_current_cpu->swap_ok = false;
  1195a9:	c6 40 21 00          	movb   $0x0,0x21(%rax)
	if (ret == _current) {
  1195ad:	48 89 cb             	mov    %rcx,%rbx
}
  1195b0:	48 89 d8             	mov    %rbx,%rax
  1195b3:	5a                   	pop    %rdx
  1195b4:	5b                   	pop    %rbx
  1195b5:	5d                   	pop    %rbp
  1195b6:	c3                   	ret    

00000000001195b7 <z_swap_irqlock>:
{
  1195b7:	55                   	push   %rbp
  1195b8:	48 89 e5             	mov    %rsp,%rbp
  1195bb:	41 55                	push   %r13
  1195bd:	41 89 fd             	mov    %edi,%r13d
  1195c0:	41 54                	push   %r12
  1195c2:	53                   	push   %rbx
  1195c3:	56                   	push   %rsi
	old_thread = _current;
  1195c4:	e8 df fd ff ff       	call   1193a8 <z_current_get>
	old_thread->swap_retval = -EAGAIN;
  1195c9:	c7 80 b4 00 00 00 f5 	movl   $0xfffffff5,0xb4(%rax)
  1195d0:	ff ff ff 
	old_thread = _current;
  1195d3:	49 89 c4             	mov    %rax,%r12
  1195d6:	9c                   	pushf  
  1195d7:	fa                   	cli    
  1195d8:	58                   	pop    %rax
  1195d9:	31 db                	xor    %ebx,%ebx
  1195db:	ba 01 00 00 00       	mov    $0x1,%edx
  1195e0:	48 89 d8             	mov    %rbx,%rax
  1195e3:	f0 48 0f b1 15 f4 cb 	lock cmpxchg %rdx,0xcbf4(%rip)        # 1261e0 <sched_spinlock>
  1195ea:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  1195ec:	74 07                	je     1195f5 <z_swap_irqlock+0x3e>
		arch_spin_relax();
  1195ee:	e8 bd f8 ff ff       	call   118eb0 <arch_spin_relax>
  1195f3:	eb e6                	jmp    1195db <z_swap_irqlock+0x24>
	new_thread = z_swap_next_thread();
  1195f5:	e8 c5 fe ff ff       	call   1194bf <z_swap_next_thread>
  1195fa:	48 89 c3             	mov    %rax,%rbx
	if (new_thread != old_thread) {
  1195fd:	49 39 c4             	cmp    %rax,%r12
  119600:	74 75                	je     119677 <z_swap_irqlock+0xc0>
  119602:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119609:	00 00 
		_current_cpu->swap_ok = 0;
  11960b:	c6 40 21 00          	movb   $0x0,0x21(%rax)
  11960f:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119616:	00 00 
		new_thread->base.cpu = arch_curr_cpu()->id;
  119618:	8a 40 20             	mov    0x20(%rax),%al
			z_smp_release_global_lock(new_thread);
  11961b:	48 89 df             	mov    %rbx,%rdi
		new_thread->base.cpu = arch_curr_cpu()->id;
  11961e:	88 43 21             	mov    %al,0x21(%rbx)
			z_smp_release_global_lock(new_thread);
  119621:	e8 4e 0d 00 00       	call   11a374 <z_smp_release_global_lock>
		z_sched_switch_spin(new_thread);
  119626:	48 89 df             	mov    %rbx,%rdi
  119629:	e8 ca fb ff ff       	call   1191f8 <z_sched_switch_spin>
  11962e:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119635:	00 00 
		_current_cpu->current = new_thread;
  119637:	48 89 58 10          	mov    %rbx,0x10(%rax)
		z_reset_time_slice(new_thread);
  11963b:	48 89 df             	mov    %rbx,%rdi
  11963e:	e8 5a fc ff ff       	call   11929d <z_reset_time_slice>
		z_requeue_current(old_thread);
  119643:	4c 89 e7             	mov    %r12,%rdi
  119646:	e8 e7 fb ff ff       	call   119232 <z_requeue_current>
			new_thread->switch_handle = NULL;
  11964b:	31 c9                	xor    %ecx,%ecx
		void *newsh = new_thread->switch_handle;
  11964d:	48 8b 93 b8 00 00 00 	mov    0xb8(%rbx),%rdx
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
#endif
#ifdef CONFIG_SMP
	atomic_clear(&l->locked);
  119654:	bf e0 61 12 00       	mov    $0x1261e0,%edi
			new_thread->switch_handle = NULL;
  119659:	48 89 8b b8 00 00 00 	mov    %rcx,0xb8(%rbx)
		arch_switch(newsh, &old_thread->switch_handle);
  119660:	49 8d b4 24 b8 00 00 	lea    0xb8(%r12),%rsi
  119667:	00 
  119668:	e8 bf fb ff ff       	call   11922c <atomic_clear.isra.0>
	z_x86_switch(switch_to, switched_from);
  11966d:	48 89 d7             	mov    %rdx,%rdi
  119670:	e8 61 7b ee ff       	call   11d6 <z_x86_switch>
}
  119675:	eb 0a                	jmp    119681 <z_swap_irqlock+0xca>
  119677:	bf e0 61 12 00       	mov    $0x1261e0,%edi
  11967c:	e8 ab fb ff ff       	call   11922c <atomic_clear.isra.0>
		irq_unlock(key);
  119681:	44 89 ef             	mov    %r13d,%edi
  119684:	e8 b9 0c 00 00       	call   11a342 <z_smp_global_unlock>
	return do_swap(key, NULL, false);
  119689:	41 8b 84 24 b4 00 00 	mov    0xb4(%r12),%eax
  119690:	00 
}
  119691:	5a                   	pop    %rdx
  119692:	5b                   	pop    %rbx
  119693:	41 5c                	pop    %r12
  119695:	41 5d                	pop    %r13
  119697:	5d                   	pop    %rbp
  119698:	c3                   	ret    

0000000000119699 <z_reschedule_irqlock>:
{
  119699:	55                   	push   %rbp
  11969a:	48 89 e5             	mov    %rsp,%rbp
  11969d:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  1196a4:	00 00 
	return arch_irq_unlocked(key) && !arch_is_in_isr();
  1196a6:	0f ba e7 09          	bt     $0x9,%edi
	_current_cpu->swap_ok = 0;
  1196aa:	c6 40 21 00          	movb   $0x0,0x21(%rax)
	return arch_irq_unlocked(key) && !arch_is_in_isr();
  1196ae:	73 0f                	jae    1196bf <z_reschedule_irqlock+0x26>
  1196b0:	e8 8c fa ff ff       	call   119141 <arch_is_in_isr>
  1196b5:	84 c0                	test   %al,%al
  1196b7:	75 06                	jne    1196bf <z_reschedule_irqlock+0x26>
}
  1196b9:	5d                   	pop    %rbp
		z_swap_irqlock(key);
  1196ba:	e9 f8 fe ff ff       	jmp    1195b7 <z_swap_irqlock>
		irq_unlock(key);
  1196bf:	e8 7e 0c 00 00       	call   11a342 <z_smp_global_unlock>
}
  1196c4:	5d                   	pop    %rbp
		signal_pending_ipi();
  1196c5:	e9 4c fb ff ff       	jmp    119216 <signal_pending_ipi>

00000000001196ca <z_reschedule_unlocked>:
  1196ca:	9c                   	pushf  
  1196cb:	fa                   	cli    
  1196cc:	5f                   	pop    %rdi
	(void) z_reschedule_irqlock(arch_irq_lock());
  1196cd:	e9 c7 ff ff ff       	jmp    119699 <z_reschedule_irqlock>

00000000001196d2 <k_sched_unlock>:
{
  1196d2:	55                   	push   %rbp
  1196d3:	48 89 e5             	mov    %rsp,%rbp
  1196d6:	41 54                	push   %r12
  1196d8:	53                   	push   %rbx
  1196d9:	9c                   	pushf  
  1196da:	fa                   	cli    
  1196db:	5b                   	pop    %rbx
  1196dc:	45 31 e4             	xor    %r12d,%r12d
  1196df:	ba 01 00 00 00       	mov    $0x1,%edx
  1196e4:	4c 89 e0             	mov    %r12,%rax
  1196e7:	f0 48 0f b1 15 f0 ca 	lock cmpxchg %rdx,0xcaf0(%rip)        # 1261e0 <sched_spinlock>
  1196ee:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  1196f0:	74 07                	je     1196f9 <k_sched_unlock+0x27>
		arch_spin_relax();
  1196f2:	e8 b9 f7 ff ff       	call   118eb0 <arch_spin_relax>
  1196f7:	eb e6                	jmp    1196df <k_sched_unlock+0xd>
		++_current->base.sched_locked;
  1196f9:	e8 aa fc ff ff       	call   1193a8 <z_current_get>
  1196fe:	fe 40 1b             	incb   0x1b(%rax)
  119701:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119708:	00 00 
	_current_cpu->swap_ok = preempt_ok;
  11970a:	c6 40 21 00          	movb   $0x0,0x21(%rax)
	atomic_clear(&l->locked);
  11970e:	bf e0 61 12 00       	mov    $0x1261e0,%edi
  119713:	e8 14 fb ff ff       	call   11922c <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  119718:	0f ba e3 09          	bt     $0x9,%ebx
  11971c:	73 01                	jae    11971f <k_sched_unlock+0x4d>
		__asm__ volatile ("sti" ::: "memory");
  11971e:	fb                   	sti    
}
  11971f:	5b                   	pop    %rbx
  119720:	41 5c                	pop    %r12
  119722:	5d                   	pop    %rbp
	z_reschedule_unlocked();
  119723:	e9 a2 ff ff ff       	jmp    1196ca <z_reschedule_unlocked>

0000000000119728 <z_swap>:
{
  119728:	55                   	push   %rbp
  119729:	48 89 e5             	mov    %rsp,%rbp
  11972c:	41 55                	push   %r13
  11972e:	41 89 f5             	mov    %esi,%r13d
  119731:	41 54                	push   %r12
  119733:	53                   	push   %rbx
  119734:	41 50                	push   %r8
	old_thread = _current;
  119736:	e8 6d fc ff ff       	call   1193a8 <z_current_get>
	old_thread->swap_retval = -EAGAIN;
  11973b:	c7 80 b4 00 00 00 f5 	movl   $0xfffffff5,0xb4(%rax)
  119742:	ff ff ff 
	old_thread = _current;
  119745:	49 89 c4             	mov    %rax,%r12
	if (is_spinlock && lock != NULL && lock != &sched_spinlock) {
  119748:	48 85 ff             	test   %rdi,%rdi
  11974b:	0f 84 8c 00 00 00    	je     1197dd <z_swap+0xb5>
  119751:	48 81 ff e0 61 12 00 	cmp    $0x1261e0,%rdi
  119758:	75 7e                	jne    1197d8 <z_swap+0xb0>
	new_thread = z_swap_next_thread();
  11975a:	e8 60 fd ff ff       	call   1194bf <z_swap_next_thread>
  11975f:	48 89 c3             	mov    %rax,%rbx
	if (new_thread != old_thread) {
  119762:	49 39 c4             	cmp    %rax,%r12
  119765:	0f 84 95 00 00 00    	je     119800 <z_swap+0xd8>
  11976b:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119772:	00 00 
		_current_cpu->swap_ok = 0;
  119774:	c6 40 21 00          	movb   $0x0,0x21(%rax)
  119778:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  11977f:	00 00 
		new_thread->base.cpu = arch_curr_cpu()->id;
  119781:	8a 40 20             	mov    0x20(%rax),%al
		z_sched_switch_spin(new_thread);
  119784:	48 89 df             	mov    %rbx,%rdi
		new_thread->base.cpu = arch_curr_cpu()->id;
  119787:	88 43 21             	mov    %al,0x21(%rbx)
		z_sched_switch_spin(new_thread);
  11978a:	e8 69 fa ff ff       	call   1191f8 <z_sched_switch_spin>
  11978f:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119796:	00 00 
		_current_cpu->current = new_thread;
  119798:	48 89 58 10          	mov    %rbx,0x10(%rax)
		z_reset_time_slice(new_thread);
  11979c:	48 89 df             	mov    %rbx,%rdi
  11979f:	e8 f9 fa ff ff       	call   11929d <z_reset_time_slice>
		z_requeue_current(old_thread);
  1197a4:	4c 89 e7             	mov    %r12,%rdi
  1197a7:	e8 86 fa ff ff       	call   119232 <z_requeue_current>
			new_thread->switch_handle = NULL;
  1197ac:	31 c9                	xor    %ecx,%ecx
		void *newsh = new_thread->switch_handle;
  1197ae:	48 8b 93 b8 00 00 00 	mov    0xb8(%rbx),%rdx
	atomic_clear(&l->locked);
  1197b5:	bf e0 61 12 00       	mov    $0x1261e0,%edi
			new_thread->switch_handle = NULL;
  1197ba:	48 89 8b b8 00 00 00 	mov    %rcx,0xb8(%rbx)
		arch_switch(newsh, &old_thread->switch_handle);
  1197c1:	49 8d b4 24 b8 00 00 	lea    0xb8(%r12),%rsi
  1197c8:	00 
  1197c9:	e8 5e fa ff ff       	call   11922c <atomic_clear.isra.0>
	z_x86_switch(switch_to, switched_from);
  1197ce:	48 89 d7             	mov    %rdx,%rdi
  1197d1:	e8 00 7a ee ff       	call   11d6 <z_x86_switch>
}
  1197d6:	eb 32                	jmp    11980a <z_swap+0xe2>
  1197d8:	e8 4f fa ff ff       	call   11922c <atomic_clear.isra.0>
  1197dd:	9c                   	pushf  
  1197de:	fa                   	cli    
  1197df:	58                   	pop    %rax
  1197e0:	31 db                	xor    %ebx,%ebx
  1197e2:	ba 01 00 00 00       	mov    $0x1,%edx
  1197e7:	48 89 d8             	mov    %rbx,%rax
  1197ea:	f0 48 0f b1 15 ed c9 	lock cmpxchg %rdx,0xc9ed(%rip)        # 1261e0 <sched_spinlock>
  1197f1:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  1197f3:	0f 84 61 ff ff ff    	je     11975a <z_swap+0x32>
		arch_spin_relax();
  1197f9:	e8 b2 f6 ff ff       	call   118eb0 <arch_spin_relax>
  1197fe:	eb e2                	jmp    1197e2 <z_swap+0xba>
	atomic_clear(&l->locked);
  119800:	bf e0 61 12 00       	mov    $0x1261e0,%edi
  119805:	e8 22 fa ff ff       	call   11922c <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11980a:	41 0f ba e5 09       	bt     $0x9,%r13d
  11980f:	73 01                	jae    119812 <z_swap+0xea>
		__asm__ volatile ("sti" ::: "memory");
  119811:	fb                   	sti    
	return do_swap(key.key, lock, true);
  119812:	41 8b 84 24 b4 00 00 	mov    0xb4(%r12),%eax
  119819:	00 
}
  11981a:	5a                   	pop    %rdx
  11981b:	5b                   	pop    %rbx
  11981c:	41 5c                	pop    %r12
  11981e:	41 5d                	pop    %r13
  119820:	5d                   	pop    %rbp
  119821:	c3                   	ret    

0000000000119822 <z_reschedule>:
{
  119822:	55                   	push   %rbp
  119823:	48 89 e5             	mov    %rsp,%rbp
  119826:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  11982d:	00 00 
	return arch_irq_unlocked(key) && !arch_is_in_isr();
  11982f:	0f ba e6 09          	bt     $0x9,%esi
	_current_cpu->swap_ok = 0;
  119833:	c6 40 21 00          	movb   $0x0,0x21(%rax)
	return arch_irq_unlocked(key) && !arch_is_in_isr();
  119837:	73 17                	jae    119850 <z_reschedule+0x2e>
  119839:	e8 03 f9 ff ff       	call   119141 <arch_is_in_isr>
  11983e:	84 c0                	test   %al,%al
  119840:	75 06                	jne    119848 <z_reschedule+0x26>
}
  119842:	5d                   	pop    %rbp
		z_swap(lock, key);
  119843:	e9 e0 fe ff ff       	jmp    119728 <z_swap>
	atomic_clear(&l->locked);
  119848:	e8 df f9 ff ff       	call   11922c <atomic_clear.isra.0>
  11984d:	fb                   	sti    
  11984e:	eb 05                	jmp    119855 <z_reschedule+0x33>
  119850:	e8 d7 f9 ff ff       	call   11922c <atomic_clear.isra.0>
}
  119855:	5d                   	pop    %rbp
		signal_pending_ipi();
  119856:	e9 bb f9 ff ff       	jmp    119216 <signal_pending_ipi>

000000000011985b <z_pend_curr>:
{
  11985b:	55                   	push   %rbp
  11985c:	48 89 e5             	mov    %rsp,%rbp
  11985f:	41 57                	push   %r15
  119861:	41 56                	push   %r14
  119863:	49 89 ce             	mov    %rcx,%r14
  119866:	41 55                	push   %r13
  119868:	49 89 d5             	mov    %rdx,%r13
  11986b:	41 54                	push   %r12
  11986d:	49 89 fc             	mov    %rdi,%r12
  119870:	53                   	push   %rbx
  119871:	89 f3                	mov    %esi,%ebx
  119873:	41 50                	push   %r8
  119875:	9c                   	pushf  
  119876:	fa                   	cli    
  119877:	58                   	pop    %rax
  119878:	45 31 ff             	xor    %r15d,%r15d
  11987b:	ba 01 00 00 00       	mov    $0x1,%edx
  119880:	4c 89 f8             	mov    %r15,%rax
  119883:	f0 48 0f b1 15 54 c9 	lock cmpxchg %rdx,0xc954(%rip)        # 1261e0 <sched_spinlock>
  11988a:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  11988c:	74 07                	je     119895 <z_pend_curr+0x3a>
		arch_spin_relax();
  11988e:	e8 1d f6 ff ff       	call   118eb0 <arch_spin_relax>
  119893:	eb e6                	jmp    11987b <z_pend_curr+0x20>
	pend_locked(_current, wait_q, timeout);
  119895:	e8 0e fb ff ff       	call   1193a8 <z_current_get>
  11989a:	4c 89 ee             	mov    %r13,%rsi
  11989d:	4c 89 f2             	mov    %r14,%rdx
  1198a0:	48 89 c7             	mov    %rax,%rdi
  1198a3:	e8 a6 fb ff ff       	call   11944e <pend_locked>
	atomic_clear(&l->locked);
  1198a8:	4c 89 e7             	mov    %r12,%rdi
	return z_swap(&sched_spinlock, key);
  1198ab:	89 de                	mov    %ebx,%esi
  1198ad:	e8 7a f9 ff ff       	call   11922c <atomic_clear.isra.0>
}
  1198b2:	58                   	pop    %rax
	return z_swap(&sched_spinlock, key);
  1198b3:	bf e0 61 12 00       	mov    $0x1261e0,%edi
}
  1198b8:	5b                   	pop    %rbx
  1198b9:	41 5c                	pop    %r12
  1198bb:	41 5d                	pop    %r13
  1198bd:	41 5e                	pop    %r14
  1198bf:	41 5f                	pop    %r15
  1198c1:	5d                   	pop    %rbp
	return z_swap(&sched_spinlock, key);
  1198c2:	e9 61 fe ff ff       	jmp    119728 <z_swap>

00000000001198c7 <move_thread_to_end_of_prio_q>:
{
  1198c7:	55                   	push   %rbp
	return (thread->base.thread_state & state) != 0U;
  1198c8:	40 8a 77 19          	mov    0x19(%rdi),%sil
  1198cc:	48 89 e5             	mov    %rsp,%rbp
	return !IS_ENABLED(CONFIG_SMP) || th != _current;
  1198cf:	e8 d4 fa ff ff       	call   1193a8 <z_current_get>
  1198d4:	48 89 c1             	mov    %rax,%rcx
	if (z_is_thread_queued(thread)) {
  1198d7:	40 84 f6             	test   %sil,%sil
  1198da:	78 0b                	js     1198e7 <move_thread_to_end_of_prio_q+0x20>
	thread->base.thread_state |= _THREAD_QUEUED;
  1198dc:	80 4f 19 80          	orb    $0x80,0x19(%rdi)
	if (should_queue_thread(thread)) {
  1198e0:	48 39 c7             	cmp    %rax,%rdi
  1198e3:	75 2e                	jne    119913 <move_thread_to_end_of_prio_q+0x4c>
  1198e5:	eb 1d                	jmp    119904 <move_thread_to_end_of_prio_q+0x3d>
	thread->base.thread_state &= ~_THREAD_QUEUED;
  1198e7:	83 e6 7f             	and    $0x7f,%esi
  1198ea:	40 88 77 19          	mov    %sil,0x19(%rdi)
	if (should_queue_thread(thread)) {
  1198ee:	48 39 c7             	cmp    %rax,%rdi
  1198f1:	75 06                	jne    1198f9 <move_thread_to_end_of_prio_q+0x32>
	thread->base.thread_state |= _THREAD_QUEUED;
  1198f3:	80 4f 19 80          	orb    $0x80,0x19(%rdi)
	if (should_queue_thread(thread)) {
  1198f7:	eb 0b                	jmp    119904 <move_thread_to_end_of_prio_q+0x3d>
	sys_dlist_remove(&thread->base.qnode_dlist);
  1198f9:	e8 2b f8 ff ff       	call   119129 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
  1198fe:	80 4f 19 80          	orb    $0x80,0x19(%rdi)
	if (should_queue_thread(thread)) {
  119902:	eb 0f                	jmp    119913 <move_thread_to_end_of_prio_q+0x4c>
  119904:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  11990b:	00 00 
		_current_cpu->swap_ok = true;
  11990d:	c6 40 21 01          	movb   $0x1,0x21(%rax)
  119911:	eb 64                	jmp    119977 <move_thread_to_end_of_prio_q+0xb0>
	return list->head == list;
  119913:	48 8b 15 36 a2 00 00 	mov    0xa236(%rip),%rdx        # 123b50 <_kernel+0x50>
	return sys_dlist_is_empty(list) ? NULL : list->head;
  11991a:	48 81 fa 50 3b 12 00 	cmp    $0x123b50,%rdx
  119921:	75 02                	jne    119925 <move_thread_to_end_of_prio_q+0x5e>
  119923:	31 d2                	xor    %edx,%edx
	return (node == list->tail) ? NULL : node->next;
  119925:	48 8b 05 2c a2 00 00 	mov    0xa22c(%rip),%rax        # 123b58 <_kernel+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
  11992c:	48 85 d2             	test   %rdx,%rdx
  11992f:	74 31                	je     119962 <move_thread_to_end_of_prio_q+0x9b>
	int32_t b1 = thread_1->base.prio;
  119931:	0f be 77 1a          	movsbl 0x1a(%rdi),%esi
	int32_t b2 = thread_2->base.prio;
  119935:	44 0f be 42 1a       	movsbl 0x1a(%rdx),%r8d
	if (b1 != b2) {
  11993a:	44 39 c6             	cmp    %r8d,%esi
  11993d:	74 19                	je     119958 <move_thread_to_end_of_prio_q+0x91>
		if (z_sched_prio_cmp(thread, t) > 0) {
  11993f:	41 39 f0             	cmp    %esi,%r8d
  119942:	7e 14                	jle    119958 <move_thread_to_end_of_prio_q+0x91>
	sys_dnode_t *const prev = successor->prev;
  119944:	48 8b 42 08          	mov    0x8(%rdx),%rax
	node->next = successor;
  119948:	48 89 17             	mov    %rdx,(%rdi)
	node->prev = prev;
  11994b:	48 89 47 08          	mov    %rax,0x8(%rdi)
	prev->next = node;
  11994f:	48 89 38             	mov    %rdi,(%rax)
	successor->prev = node;
  119952:	48 89 7a 08          	mov    %rdi,0x8(%rdx)
}
  119956:	eb 1f                	jmp    119977 <move_thread_to_end_of_prio_q+0xb0>
	return (node == list->tail) ? NULL : node->next;
  119958:	48 39 c2             	cmp    %rax,%rdx
  11995b:	74 05                	je     119962 <move_thread_to_end_of_prio_q+0x9b>
  11995d:	48 8b 12             	mov    (%rdx),%rdx
  119960:	eb ca                	jmp    11992c <move_thread_to_end_of_prio_q+0x65>
	node->next = list;
  119962:	48 c7 07 50 3b 12 00 	movq   $0x123b50,(%rdi)
	node->prev = tail;
  119969:	48 89 47 08          	mov    %rax,0x8(%rdi)
	tail->next = node;
  11996d:	48 89 38             	mov    %rdi,(%rax)
	list->tail = node;
  119970:	48 89 3d e1 a1 00 00 	mov    %rdi,0xa1e1(%rip)        # 123b58 <_kernel+0x58>
  119977:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  11997e:	00 00 
	update_cache(thread == _current);
  119980:	48 39 cf             	cmp    %rcx,%rdi
	_current_cpu->swap_ok = preempt_ok;
  119983:	0f 94 40 21          	sete   0x21(%rax)
}
  119987:	5d                   	pop    %rbp
  119988:	c3                   	ret    

0000000000119989 <z_time_slice>:
{
  119989:	55                   	push   %rbp
  11998a:	48 89 e5             	mov    %rsp,%rbp
  11998d:	41 54                	push   %r12
  11998f:	53                   	push   %rbx
  119990:	9c                   	pushf  
  119991:	fa                   	cli    
  119992:	5b                   	pop    %rbx
  119993:	45 31 e4             	xor    %r12d,%r12d
  119996:	ba 01 00 00 00       	mov    $0x1,%edx
  11999b:	4c 89 e0             	mov    %r12,%rax
  11999e:	f0 48 0f b1 15 39 c8 	lock cmpxchg %rdx,0xc839(%rip)        # 1261e0 <sched_spinlock>
  1199a5:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  1199a7:	74 07                	je     1199b0 <z_time_slice+0x27>
		arch_spin_relax();
  1199a9:	e8 02 f5 ff ff       	call   118eb0 <arch_spin_relax>
  1199ae:	eb e6                	jmp    119996 <z_time_slice+0xd>
  1199b0:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  1199b7:	00 00 
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
  1199b9:	0f b6 40 20          	movzbl 0x20(%rax),%eax
  1199bd:	80 b8 6a 62 12 00 00 	cmpb   $0x0,0x12626a(%rax)
  1199c4:	74 21                	je     1199e7 <z_time_slice+0x5e>
	struct k_thread *curr = _current;
  1199c6:	e8 dd f9 ff ff       	call   1193a8 <z_current_get>
  1199cb:	48 89 c7             	mov    %rax,%rdi
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
  1199ce:	e8 81 f7 ff ff       	call   119154 <sliceable>
  1199d3:	84 c0                	test   %al,%al
  1199d5:	74 10                	je     1199e7 <z_time_slice+0x5e>
		if (!z_is_thread_prevented_from_running(curr)) {
  1199d7:	f6 47 19 1f          	testb  $0x1f,0x19(%rdi)
  1199db:	75 05                	jne    1199e2 <z_time_slice+0x59>
			move_thread_to_end_of_prio_q(curr);
  1199dd:	e8 e5 fe ff ff       	call   1198c7 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
  1199e2:	e8 b6 f8 ff ff       	call   11929d <z_reset_time_slice>
	atomic_clear(&l->locked);
  1199e7:	bf e0 61 12 00       	mov    $0x1261e0,%edi
  1199ec:	e8 3b f8 ff ff       	call   11922c <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  1199f1:	0f ba e3 09          	bt     $0x9,%ebx
  1199f5:	73 01                	jae    1199f8 <z_time_slice+0x6f>
		__asm__ volatile ("sti" ::: "memory");
  1199f7:	fb                   	sti    
}
  1199f8:	5b                   	pop    %rbx
  1199f9:	41 5c                	pop    %r12
  1199fb:	5d                   	pop    %rbp
  1199fc:	c3                   	ret    

00000000001199fd <z_sched_ipi>:
{
  1199fd:	55                   	push   %rbp
  1199fe:	48 89 e5             	mov    %rsp,%rbp
	if (sliceable(_current)) {
  119a01:	e8 a2 f9 ff ff       	call   1193a8 <z_current_get>
  119a06:	48 89 c7             	mov    %rax,%rdi
  119a09:	e8 46 f7 ff ff       	call   119154 <sliceable>
  119a0e:	84 c0                	test   %al,%al
  119a10:	74 06                	je     119a18 <z_sched_ipi+0x1b>
}
  119a12:	5d                   	pop    %rbp
		z_time_slice();
  119a13:	e9 71 ff ff ff       	jmp    119989 <z_time_slice>
}
  119a18:	5d                   	pop    %rbp
  119a19:	c3                   	ret    

0000000000119a1a <ready_thread>:
  119a1a:	8a 47 19             	mov    0x19(%rdi),%al
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
  119a1d:	84 c0                	test   %al,%al
  119a1f:	0f 88 ae 00 00 00    	js     119ad3 <ready_thread+0xb9>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
  119a25:	a8 1f                	test   $0x1f,%al
  119a27:	0f 85 a6 00 00 00    	jne    119ad3 <ready_thread+0xb9>
	return node->next != NULL;
  119a2d:	48 8b 4f 30          	mov    0x30(%rdi),%rcx
  119a31:	48 85 c9             	test   %rcx,%rcx
  119a34:	0f 85 99 00 00 00    	jne    119ad3 <ready_thread+0xb9>
{
  119a3a:	55                   	push   %rbp
	thread->base.thread_state |= _THREAD_QUEUED;
  119a3b:	83 c8 80             	or     $0xffffff80,%eax
  119a3e:	88 47 19             	mov    %al,0x19(%rdi)
{
  119a41:	48 89 e5             	mov    %rsp,%rbp
	return !IS_ENABLED(CONFIG_SMP) || th != _current;
  119a44:	e8 5f f9 ff ff       	call   1193a8 <z_current_get>
	if (should_queue_thread(thread)) {
  119a49:	48 39 c7             	cmp    %rax,%rdi
  119a4c:	74 76                	je     119ac4 <ready_thread+0xaa>
	return list->head == list;
  119a4e:	48 8b 05 fb a0 00 00 	mov    0xa0fb(%rip),%rax        # 123b50 <_kernel+0x50>
	return sys_dlist_is_empty(list) ? NULL : list->head;
  119a55:	48 3d 50 3b 12 00    	cmp    $0x123b50,%rax
  119a5b:	48 0f 45 c8          	cmovne %rax,%rcx
	return (node == list->tail) ? NULL : node->next;
  119a5f:	48 8b 05 f2 a0 00 00 	mov    0xa0f2(%rip),%rax        # 123b58 <_kernel+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
  119a66:	48 85 c9             	test   %rcx,%rcx
  119a69:	74 2e                	je     119a99 <ready_thread+0x7f>
	int32_t b1 = thread_1->base.prio;
  119a6b:	0f be 57 1a          	movsbl 0x1a(%rdi),%edx
	int32_t b2 = thread_2->base.prio;
  119a6f:	0f be 71 1a          	movsbl 0x1a(%rcx),%esi
	if (b1 != b2) {
  119a73:	39 f2                	cmp    %esi,%edx
  119a75:	74 18                	je     119a8f <ready_thread+0x75>
		if (z_sched_prio_cmp(thread, t) > 0) {
  119a77:	39 d6                	cmp    %edx,%esi
  119a79:	7e 14                	jle    119a8f <ready_thread+0x75>
	sys_dnode_t *const prev = successor->prev;
  119a7b:	48 8b 41 08          	mov    0x8(%rcx),%rax
	node->next = successor;
  119a7f:	48 89 0f             	mov    %rcx,(%rdi)
	node->prev = prev;
  119a82:	48 89 47 08          	mov    %rax,0x8(%rdi)
	prev->next = node;
  119a86:	48 89 38             	mov    %rdi,(%rax)
	successor->prev = node;
  119a89:	48 89 79 08          	mov    %rdi,0x8(%rcx)
}
  119a8d:	eb 1f                	jmp    119aae <ready_thread+0x94>
	return (node == list->tail) ? NULL : node->next;
  119a8f:	48 39 c8             	cmp    %rcx,%rax
  119a92:	74 05                	je     119a99 <ready_thread+0x7f>
  119a94:	48 8b 09             	mov    (%rcx),%rcx
  119a97:	eb cd                	jmp    119a66 <ready_thread+0x4c>
	node->next = list;
  119a99:	48 c7 07 50 3b 12 00 	movq   $0x123b50,(%rdi)
	node->prev = tail;
  119aa0:	48 89 47 08          	mov    %rax,0x8(%rdi)
	tail->next = node;
  119aa4:	48 89 38             	mov    %rdi,(%rax)
	list->tail = node;
  119aa7:	48 89 3d aa a0 00 00 	mov    %rdi,0xa0aa(%rip)        # 123b58 <_kernel+0x58>
  119aae:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119ab5:	00 00 
	_current_cpu->swap_ok = preempt_ok;
  119ab7:	c6 40 21 00          	movb   $0x0,0x21(%rax)
}
  119abb:	5d                   	pop    %rbp
		_kernel.pending_ipi = true;
  119abc:	c6 05 9d a0 00 00 01 	movb   $0x1,0xa09d(%rip)        # 123b60 <_kernel+0x60>
}
  119ac3:	c3                   	ret    
  119ac4:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119acb:	00 00 
		_current_cpu->swap_ok = true;
  119acd:	c6 40 21 01          	movb   $0x1,0x21(%rax)
  119ad1:	eb db                	jmp    119aae <ready_thread+0x94>
  119ad3:	c3                   	ret    

0000000000119ad4 <z_ready_thread>:
{
  119ad4:	55                   	push   %rbp
  119ad5:	48 89 e5             	mov    %rsp,%rbp
  119ad8:	41 55                	push   %r13
  119ada:	41 54                	push   %r12
  119adc:	53                   	push   %rbx
  119add:	48 89 fb             	mov    %rdi,%rbx
  119ae0:	52                   	push   %rdx
  119ae1:	9c                   	pushf  
  119ae2:	fa                   	cli    
  119ae3:	41 5d                	pop    %r13
  119ae5:	45 31 e4             	xor    %r12d,%r12d
  119ae8:	ba 01 00 00 00       	mov    $0x1,%edx
  119aed:	4c 89 e0             	mov    %r12,%rax
  119af0:	f0 48 0f b1 15 e7 c6 	lock cmpxchg %rdx,0xc6e7(%rip)        # 1261e0 <sched_spinlock>
  119af7:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  119af9:	74 07                	je     119b02 <z_ready_thread+0x2e>
		arch_spin_relax();
  119afb:	e8 b0 f3 ff ff       	call   118eb0 <arch_spin_relax>
  119b00:	eb e6                	jmp    119ae8 <z_ready_thread+0x14>
		if (!thread_active_elsewhere(thread)) {
  119b02:	48 89 df             	mov    %rbx,%rdi
  119b05:	e8 ac f6 ff ff       	call   1191b6 <thread_active_elsewhere>
  119b0a:	84 c0                	test   %al,%al
  119b0c:	75 08                	jne    119b16 <z_ready_thread+0x42>
			ready_thread(thread);
  119b0e:	48 89 df             	mov    %rbx,%rdi
  119b11:	e8 04 ff ff ff       	call   119a1a <ready_thread>
	atomic_clear(&l->locked);
  119b16:	bf e0 61 12 00       	mov    $0x1261e0,%edi
  119b1b:	e8 0c f7 ff ff       	call   11922c <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  119b20:	41 0f ba e5 09       	bt     $0x9,%r13d
  119b25:	73 01                	jae    119b28 <z_ready_thread+0x54>
		__asm__ volatile ("sti" ::: "memory");
  119b27:	fb                   	sti    
}
  119b28:	58                   	pop    %rax
  119b29:	5b                   	pop    %rbx
  119b2a:	41 5c                	pop    %r12
  119b2c:	41 5d                	pop    %r13
  119b2e:	5d                   	pop    %rbp
  119b2f:	c3                   	ret    

0000000000119b30 <z_sched_start>:
{
  119b30:	55                   	push   %rbp
  119b31:	48 89 e5             	mov    %rsp,%rbp
  119b34:	41 56                	push   %r14
  119b36:	41 55                	push   %r13
  119b38:	41 54                	push   %r12
  119b3a:	48 83 ec 18          	sub    $0x18,%rsp
  119b3e:	9c                   	pushf  
  119b3f:	fa                   	cli    
  119b40:	41 5c                	pop    %r12
  119b42:	45 31 f6             	xor    %r14d,%r14d
	k.key = arch_irq_lock();
  119b45:	45 89 e5             	mov    %r12d,%r13d
  119b48:	ba 01 00 00 00       	mov    $0x1,%edx
  119b4d:	4c 89 f0             	mov    %r14,%rax
  119b50:	f0 48 0f b1 15 87 c6 	lock cmpxchg %rdx,0xc687(%rip)        # 1261e0 <sched_spinlock>
  119b57:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  119b59:	74 0f                	je     119b6a <z_sched_start+0x3a>
  119b5b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
		arch_spin_relax();
  119b5f:	e8 4c f3 ff ff       	call   118eb0 <arch_spin_relax>
  119b64:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  119b68:	eb de                	jmp    119b48 <z_sched_start+0x18>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
  119b6a:	8a 47 19             	mov    0x19(%rdi),%al
	if (z_has_thread_started(thread)) {
  119b6d:	a8 04                	test   $0x4,%al
  119b6f:	75 14                	jne    119b85 <z_sched_start+0x55>
	atomic_clear(&l->locked);
  119b71:	bf e0 61 12 00       	mov    $0x1261e0,%edi
  119b76:	e8 b1 f6 ff ff       	call   11922c <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  119b7b:	41 0f ba e4 09       	bt     $0x9,%r12d
  119b80:	73 26                	jae    119ba8 <z_sched_start+0x78>
		__asm__ volatile ("sti" ::: "memory");
  119b82:	fb                   	sti    
  119b83:	eb 23                	jmp    119ba8 <z_sched_start+0x78>
	thread->base.thread_state &= ~_THREAD_PRESTART;
  119b85:	83 e0 fb             	and    $0xfffffffb,%eax
  119b88:	88 47 19             	mov    %al,0x19(%rdi)
	ready_thread(thread);
  119b8b:	e8 8a fe ff ff       	call   119a1a <ready_thread>
}
  119b90:	48 83 c4 18          	add    $0x18,%rsp
	z_reschedule(&sched_spinlock, key);
  119b94:	44 89 ee             	mov    %r13d,%esi
  119b97:	bf e0 61 12 00       	mov    $0x1261e0,%edi
}
  119b9c:	41 5c                	pop    %r12
  119b9e:	41 5d                	pop    %r13
  119ba0:	41 5e                	pop    %r14
  119ba2:	5d                   	pop    %rbp
	z_reschedule(&sched_spinlock, key);
  119ba3:	e9 7a fc ff ff       	jmp    119822 <z_reschedule>
}
  119ba8:	48 83 c4 18          	add    $0x18,%rsp
  119bac:	41 5c                	pop    %r12
  119bae:	41 5d                	pop    %r13
  119bb0:	41 5e                	pop    %r14
  119bb2:	5d                   	pop    %rbp
  119bb3:	c3                   	ret    

0000000000119bb4 <z_sched_wake_thread>:
{
  119bb4:	55                   	push   %rbp
  119bb5:	48 89 e5             	mov    %rsp,%rbp
  119bb8:	41 56                	push   %r14
  119bba:	41 55                	push   %r13
  119bbc:	41 54                	push   %r12
  119bbe:	41 89 f4             	mov    %esi,%r12d
  119bc1:	53                   	push   %rbx
  119bc2:	48 89 fb             	mov    %rdi,%rbx
  119bc5:	9c                   	pushf  
  119bc6:	fa                   	cli    
  119bc7:	41 5d                	pop    %r13
  119bc9:	45 31 f6             	xor    %r14d,%r14d
  119bcc:	ba 01 00 00 00       	mov    $0x1,%edx
  119bd1:	4c 89 f0             	mov    %r14,%rax
  119bd4:	f0 48 0f b1 15 03 c6 	lock cmpxchg %rdx,0xc603(%rip)        # 1261e0 <sched_spinlock>
  119bdb:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  119bdd:	74 07                	je     119be6 <z_sched_wake_thread+0x32>
		arch_spin_relax();
  119bdf:	e8 cc f2 ff ff       	call   118eb0 <arch_spin_relax>
  119be4:	eb e6                	jmp    119bcc <z_sched_wake_thread+0x18>
		if (!killed) {
  119be6:	f6 43 19 28          	testb  $0x28,0x19(%rbx)
  119bea:	75 2c                	jne    119c18 <z_sched_wake_thread+0x64>
			if (thread->base.pended_on != NULL) {
  119bec:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
  119bf1:	74 08                	je     119bfb <z_sched_wake_thread+0x47>
				unpend_thread_no_timeout(thread);
  119bf3:	48 89 df             	mov    %rbx,%rdi
  119bf6:	e8 e8 f5 ff ff       	call   1191e3 <unpend_thread_no_timeout>
  119bfb:	8a 53 19             	mov    0x19(%rbx),%dl
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
  119bfe:	89 d0                	mov    %edx,%eax
  119c00:	83 e0 eb             	and    $0xffffffeb,%eax
			if (is_timeout) {
  119c03:	45 84 e4             	test   %r12b,%r12b
  119c06:	75 05                	jne    119c0d <z_sched_wake_thread+0x59>
	thread->base.thread_state &= ~_THREAD_PRESTART;
  119c08:	89 d0                	mov    %edx,%eax
  119c0a:	83 e0 fb             	and    $0xfffffffb,%eax
  119c0d:	88 43 19             	mov    %al,0x19(%rbx)
			ready_thread(thread);
  119c10:	48 89 df             	mov    %rbx,%rdi
  119c13:	e8 02 fe ff ff       	call   119a1a <ready_thread>
	atomic_clear(&l->locked);
  119c18:	bf e0 61 12 00       	mov    $0x1261e0,%edi
  119c1d:	e8 0a f6 ff ff       	call   11922c <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  119c22:	41 0f ba e5 09       	bt     $0x9,%r13d
  119c27:	73 01                	jae    119c2a <z_sched_wake_thread+0x76>
		__asm__ volatile ("sti" ::: "memory");
  119c29:	fb                   	sti    
}
  119c2a:	5b                   	pop    %rbx
  119c2b:	41 5c                	pop    %r12
  119c2d:	41 5d                	pop    %r13
  119c2f:	41 5e                	pop    %r14
  119c31:	5d                   	pop    %rbp
  119c32:	c3                   	ret    

0000000000119c33 <z_thread_timeout>:
	struct k_thread *thread = CONTAINER_OF(timeout,
  119c33:	48 83 ef 30          	sub    $0x30,%rdi
	z_sched_wake_thread(thread, true);
  119c37:	be 01 00 00 00       	mov    $0x1,%esi
  119c3c:	e9 73 ff ff ff       	jmp    119bb4 <z_sched_wake_thread>

0000000000119c41 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
  119c41:	8a 47 19             	mov    0x19(%rdi),%al
  119c44:	a8 08                	test   $0x8,%al
  119c46:	0f 85 9f 00 00 00    	jne    119ceb <end_thread+0xaa>
{
  119c4c:	55                   	push   %rbp
		thread->base.thread_state |= _THREAD_DEAD;
		thread->base.thread_state &= ~_THREAD_ABORTING;
  119c4d:	89 c2                	mov    %eax,%edx
  119c4f:	83 e2 df             	and    $0xffffffdf,%edx
{
  119c52:	48 89 e5             	mov    %rsp,%rbp
  119c55:	41 55                	push   %r13
  119c57:	41 54                	push   %r12
  119c59:	53                   	push   %rbx
  119c5a:	48 89 fb             	mov    %rdi,%rbx
  119c5d:	51                   	push   %rcx
		if (z_is_thread_queued(thread)) {
  119c5e:	80 ca 08             	or     $0x8,%dl
  119c61:	78 05                	js     119c68 <end_thread+0x27>
		thread->base.thread_state &= ~_THREAD_ABORTING;
  119c63:	88 57 19             	mov    %dl,0x19(%rdi)
  119c66:	eb 18                	jmp    119c80 <end_thread+0x3f>
	thread->base.thread_state &= ~_THREAD_QUEUED;
  119c68:	83 e0 5f             	and    $0x5f,%eax
  119c6b:	83 c8 08             	or     $0x8,%eax
  119c6e:	88 47 19             	mov    %al,0x19(%rdi)
	return !IS_ENABLED(CONFIG_SMP) || th != _current;
  119c71:	e8 32 f7 ff ff       	call   1193a8 <z_current_get>
	if (should_queue_thread(thread)) {
  119c76:	48 39 c7             	cmp    %rax,%rdi
  119c79:	74 05                	je     119c80 <end_thread+0x3f>
	sys_dlist_remove(&thread->base.qnode_dlist);
  119c7b:	e8 a9 f4 ff ff       	call   119129 <sys_dlist_remove>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
  119c80:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
  119c85:	74 08                	je     119c8f <end_thread+0x4e>
			unpend_thread_no_timeout(thread);
  119c87:	48 89 df             	mov    %rbx,%rdi
  119c8a:	e8 54 f5 ff ff       	call   1191e3 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
  119c8f:	48 8d 7b 30          	lea    0x30(%rbx),%rdi
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
  119c93:	4c 8d ab a0 00 00 00 	lea    0xa0(%rbx),%r13
  119c9a:	e8 c1 08 00 00       	call   11a560 <z_abort_timeout>
	return list->head == list;
  119c9f:	4c 8b a3 a0 00 00 00 	mov    0xa0(%rbx),%r12
	while ((thread = z_waitq_head(wait_q)) != NULL) {
  119ca6:	4d 85 e4             	test   %r12,%r12
  119ca9:	74 2b                	je     119cd6 <end_thread+0x95>
  119cab:	4d 39 ec             	cmp    %r13,%r12
  119cae:	74 26                	je     119cd6 <end_thread+0x95>
		unpend_thread_no_timeout(thread);
  119cb0:	4c 89 e7             	mov    %r12,%rdi
  119cb3:	e8 2b f5 ff ff       	call   1191e3 <unpend_thread_no_timeout>
  119cb8:	49 8d 7c 24 30       	lea    0x30(%r12),%rdi
  119cbd:	e8 9e 08 00 00       	call   11a560 <z_abort_timeout>
  119cc2:	31 d2                	xor    %edx,%edx
		ready_thread(thread);
  119cc4:	4c 89 e7             	mov    %r12,%rdi
  119cc7:	41 89 94 24 b4 00 00 	mov    %edx,0xb4(%r12)
  119cce:	00 
  119ccf:	e8 46 fd ff ff       	call   119a1a <ready_thread>
  119cd4:	eb c9                	jmp    119c9f <end_thread+0x5e>
  119cd6:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119cdd:	00 00 
	_current_cpu->swap_ok = preempt_ok;
  119cdf:	c6 40 21 01          	movb   $0x1,0x21(%rax)
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
  119ce3:	58                   	pop    %rax
  119ce4:	5b                   	pop    %rbx
  119ce5:	41 5c                	pop    %r12
  119ce7:	41 5d                	pop    %r13
  119ce9:	5d                   	pop    %rbp
  119cea:	c3                   	ret    
  119ceb:	c3                   	ret    

0000000000119cec <z_get_next_switch_handle>:
{
  119cec:	55                   	push   %rbp
  119ced:	48 89 e5             	mov    %rsp,%rbp
  119cf0:	41 56                	push   %r14
  119cf2:	41 55                	push   %r13
  119cf4:	49 89 fd             	mov    %rdi,%r13
  119cf7:	41 54                	push   %r12
  119cf9:	53                   	push   %rbx
  119cfa:	9c                   	pushf  
  119cfb:	fa                   	cli    
  119cfc:	41 5e                	pop    %r14
  119cfe:	31 db                	xor    %ebx,%ebx
  119d00:	ba 01 00 00 00       	mov    $0x1,%edx
  119d05:	48 89 d8             	mov    %rbx,%rax
  119d08:	f0 48 0f b1 15 cf c4 	lock cmpxchg %rdx,0xc4cf(%rip)        # 1261e0 <sched_spinlock>
  119d0f:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  119d11:	74 07                	je     119d1a <z_get_next_switch_handle+0x2e>
		arch_spin_relax();
  119d13:	e8 98 f1 ff ff       	call   118eb0 <arch_spin_relax>
  119d18:	eb e6                	jmp    119d00 <z_get_next_switch_handle+0x14>
		struct k_thread *old_thread = _current, *new_thread;
  119d1a:	e8 89 f6 ff ff       	call   1193a8 <z_current_get>
  119d1f:	48 89 c3             	mov    %rax,%rbx
		if (is_aborting(_current)) {
  119d22:	f6 40 19 20          	testb  $0x20,0x19(%rax)
  119d26:	74 08                	je     119d30 <z_get_next_switch_handle+0x44>
			end_thread(_current);
  119d28:	48 89 df             	mov    %rbx,%rdi
  119d2b:	e8 11 ff ff ff       	call   119c41 <end_thread>
	return (thread->base.thread_state & state) != 0U;
  119d30:	8a 43 19             	mov    0x19(%rbx),%al
			old_thread->switch_handle = NULL;
  119d33:	31 d2                	xor    %edx,%edx
  119d35:	4c 8b 25 14 9e 00 00 	mov    0x9e14(%rip),%r12        # 123b50 <_kernel+0x50>
  119d3c:	48 89 93 b8 00 00 00 	mov    %rdx,0xb8(%rbx)
  119d43:	89 c2                	mov    %eax,%edx
  119d45:	83 e2 1f             	and    $0x1f,%edx
	return sys_dlist_is_empty(list) ? NULL : list->head;
  119d48:	49 81 fc 50 3b 12 00 	cmp    $0x123b50,%r12
  119d4f:	74 05                	je     119d56 <z_get_next_switch_handle+0x6a>
	if (thread == NULL) {
  119d51:	4d 85 e4             	test   %r12,%r12
  119d54:	75 0d                	jne    119d63 <z_get_next_switch_handle+0x77>
  119d56:	65 48 8b 0c 25 68 00 	mov    %gs:0x68,%rcx
  119d5d:	00 00 
		thread = _current_cpu->idle_thread;
  119d5f:	4c 8b 61 18          	mov    0x18(%rcx),%r12
	if (active) {
  119d63:	84 d2                	test   %dl,%dl
  119d65:	74 0b                	je     119d72 <z_get_next_switch_handle+0x86>
	if (thread != _current && active &&
  119d67:	4c 39 e3             	cmp    %r12,%rbx
  119d6a:	0f 85 90 00 00 00    	jne    119e00 <z_get_next_switch_handle+0x114>
  119d70:	eb 4e                	jmp    119dc0 <z_get_next_switch_handle+0xd4>
	int32_t b1 = thread_1->base.prio;
  119d72:	0f be 53 1a          	movsbl 0x1a(%rbx),%edx
	int32_t b2 = thread_2->base.prio;
  119d76:	41 0f be 4c 24 1a    	movsbl 0x1a(%r12),%ecx
	if (b1 != b2) {
  119d7c:	39 ca                	cmp    %ecx,%edx
  119d7e:	74 06                	je     119d86 <z_get_next_switch_handle+0x9a>
		if ((cmp > 0) || ((cmp == 0) && !_current_cpu->swap_ok)) {
  119d80:	39 d1                	cmp    %edx,%ecx
  119d82:	7f 11                	jg     119d95 <z_get_next_switch_handle+0xa9>
  119d84:	eb 1a                	jmp    119da0 <z_get_next_switch_handle+0xb4>
  119d86:	65 48 8b 14 25 68 00 	mov    %gs:0x68,%rdx
  119d8d:	00 00 
  119d8f:	80 7a 21 00          	cmpb   $0x0,0x21(%rdx)
  119d93:	75 0b                	jne    119da0 <z_get_next_switch_handle+0xb4>
  119d95:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119d9c:	00 00 
	if (preempt_ok != 0) {
  119d9e:	eb 1d                	jmp    119dbd <z_get_next_switch_handle+0xd1>
  119da0:	65 48 8b 14 25 68 00 	mov    %gs:0x68,%rdx
  119da7:	00 00 
  119da9:	80 7a 21 00          	cmpb   $0x0,0x21(%rdx)
  119dad:	75 07                	jne    119db6 <z_get_next_switch_handle+0xca>
	if (is_preempt(_current) || is_metairq(thread)) {
  119daf:	66 83 7b 1a 7f       	cmpw   $0x7f,0x1a(%rbx)
  119db4:	77 07                	ja     119dbd <z_get_next_switch_handle+0xd1>
	if (thread != _current && active &&
  119db6:	4c 39 e3             	cmp    %r12,%rbx
  119db9:	75 28                	jne    119de3 <z_get_next_switch_handle+0xf7>
  119dbb:	eb 03                	jmp    119dc0 <z_get_next_switch_handle+0xd4>
  119dbd:	49 89 dc             	mov    %rbx,%r12
  119dc0:	41 8a 44 24 19       	mov    0x19(%r12),%al
	if (z_is_thread_queued(thread)) {
  119dc5:	84 c0                	test   %al,%al
  119dc7:	79 08                	jns    119dd1 <z_get_next_switch_handle+0xe5>
	thread->base.thread_state &= ~_THREAD_QUEUED;
  119dc9:	83 e0 7f             	and    $0x7f,%eax
  119dcc:	41 88 44 24 19       	mov    %al,0x19(%r12)
  119dd1:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119dd8:	00 00 
	_current_cpu->swap_ok = false;
  119dda:	c6 40 21 00          	movb   $0x0,0x21(%rax)
		if (old_thread != new_thread) {
  119dde:	e9 d3 00 00 00       	jmp    119eb6 <z_get_next_switch_handle+0x1ca>
		!z_is_idle_thread_object(_current) && !queued) {
  119de3:	80 7b 20 00          	cmpb   $0x0,0x20(%rbx)
  119de7:	75 17                	jne    119e00 <z_get_next_switch_handle+0x114>
  119de9:	84 c0                	test   %al,%al
  119deb:	78 13                	js     119e00 <z_get_next_switch_handle+0x114>
	thread->base.thread_state |= _THREAD_QUEUED;
  119ded:	83 c8 80             	or     $0xffffff80,%eax
  119df0:	88 43 19             	mov    %al,0x19(%rbx)
  119df3:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119dfa:	00 00 
		_current_cpu->swap_ok = true;
  119dfc:	c6 40 21 01          	movb   $0x1,0x21(%rax)
  119e00:	41 8a 44 24 19       	mov    0x19(%r12),%al
	if (z_is_thread_queued(thread)) {
  119e05:	84 c0                	test   %al,%al
  119e07:	79 10                	jns    119e19 <z_get_next_switch_handle+0x12d>
	thread->base.thread_state &= ~_THREAD_QUEUED;
  119e09:	83 e0 7f             	and    $0x7f,%eax
	sys_dlist_remove(&thread->base.qnode_dlist);
  119e0c:	4c 89 e7             	mov    %r12,%rdi
	thread->base.thread_state &= ~_THREAD_QUEUED;
  119e0f:	41 88 44 24 19       	mov    %al,0x19(%r12)
	sys_dlist_remove(&thread->base.qnode_dlist);
  119e14:	e8 10 f3 ff ff       	call   119129 <sys_dlist_remove>
  119e19:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119e20:	00 00 
	_current_cpu->swap_ok = false;
  119e22:	c6 40 21 00          	movb   $0x0,0x21(%rax)
			z_sched_switch_spin(new_thread);
  119e26:	4c 89 e7             	mov    %r12,%rdi
  119e29:	e8 ca f3 ff ff       	call   1191f8 <z_sched_switch_spin>
  119e2e:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119e35:	00 00 
			_current_cpu->swap_ok = 0;
  119e37:	c6 40 21 00          	movb   $0x0,0x21(%rax)
  119e3b:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119e42:	00 00 
	_current_cpu->current = new_thread;
  119e44:	4c 89 60 10          	mov    %r12,0x10(%rax)
			z_reset_time_slice(new_thread);
  119e48:	4c 89 e7             	mov    %r12,%rdi
  119e4b:	e8 4d f4 ff ff       	call   11929d <z_reset_time_slice>
			if (z_is_thread_queued(old_thread)) {
  119e50:	80 7b 19 00          	cmpb   $0x0,0x19(%rbx)
  119e54:	79 60                	jns    119eb6 <z_get_next_switch_handle+0x1ca>
	return list->head == list;
  119e56:	48 8b 05 f3 9c 00 00 	mov    0x9cf3(%rip),%rax        # 123b50 <_kernel+0x50>
	return sys_dlist_is_empty(list) ? NULL : list->head;
  119e5d:	48 3d 50 3b 12 00    	cmp    $0x123b50,%rax
  119e63:	75 02                	jne    119e67 <z_get_next_switch_handle+0x17b>
  119e65:	31 c0                	xor    %eax,%eax
	return (node == list->tail) ? NULL : node->next;
  119e67:	48 8b 15 ea 9c 00 00 	mov    0x9cea(%rip),%rdx        # 123b58 <_kernel+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
  119e6e:	48 85 c0             	test   %rax,%rax
  119e71:	74 2e                	je     119ea1 <z_get_next_switch_handle+0x1b5>
	int32_t b1 = thread_1->base.prio;
  119e73:	0f be 4b 1a          	movsbl 0x1a(%rbx),%ecx
	int32_t b2 = thread_2->base.prio;
  119e77:	0f be 70 1a          	movsbl 0x1a(%rax),%esi
	if (b1 != b2) {
  119e7b:	39 f1                	cmp    %esi,%ecx
  119e7d:	74 18                	je     119e97 <z_get_next_switch_handle+0x1ab>
		if (z_sched_prio_cmp(thread, t) > 0) {
  119e7f:	39 ce                	cmp    %ecx,%esi
  119e81:	7e 14                	jle    119e97 <z_get_next_switch_handle+0x1ab>
	sys_dnode_t *const prev = successor->prev;
  119e83:	48 8b 50 08          	mov    0x8(%rax),%rdx
	node->next = successor;
  119e87:	48 89 03             	mov    %rax,(%rbx)
	node->prev = prev;
  119e8a:	48 89 53 08          	mov    %rdx,0x8(%rbx)
	prev->next = node;
  119e8e:	48 89 1a             	mov    %rbx,(%rdx)
	successor->prev = node;
  119e91:	48 89 58 08          	mov    %rbx,0x8(%rax)
}
  119e95:	eb 1f                	jmp    119eb6 <z_get_next_switch_handle+0x1ca>
	return (node == list->tail) ? NULL : node->next;
  119e97:	48 39 d0             	cmp    %rdx,%rax
  119e9a:	74 05                	je     119ea1 <z_get_next_switch_handle+0x1b5>
  119e9c:	48 8b 00             	mov    (%rax),%rax
  119e9f:	eb cd                	jmp    119e6e <z_get_next_switch_handle+0x182>
	node->next = list;
  119ea1:	48 c7 03 50 3b 12 00 	movq   $0x123b50,(%rbx)
	node->prev = tail;
  119ea8:	48 89 53 08          	mov    %rdx,0x8(%rbx)
	tail->next = node;
  119eac:	48 89 1a             	mov    %rbx,(%rdx)
	list->tail = node;
  119eaf:	48 89 1d a2 9c 00 00 	mov    %rbx,0x9ca2(%rip)        # 123b58 <_kernel+0x58>
			new_thread->switch_handle = NULL;
  119eb6:	31 c0                	xor    %eax,%eax
		old_thread->switch_handle = interrupted;
  119eb8:	4c 89 ab b8 00 00 00 	mov    %r13,0xb8(%rbx)
	atomic_clear(&l->locked);
  119ebf:	bf e0 61 12 00       	mov    $0x1261e0,%edi
		ret = new_thread->switch_handle;
  119ec4:	49 8b 9c 24 b8 00 00 	mov    0xb8(%r12),%rbx
  119ecb:	00 
			new_thread->switch_handle = NULL;
  119ecc:	49 89 84 24 b8 00 00 	mov    %rax,0xb8(%r12)
  119ed3:	00 
  119ed4:	e8 53 f3 ff ff       	call   11922c <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  119ed9:	41 0f ba e6 09       	bt     $0x9,%r14d
  119ede:	73 01                	jae    119ee1 <z_get_next_switch_handle+0x1f5>
		__asm__ volatile ("sti" ::: "memory");
  119ee0:	fb                   	sti    
	signal_pending_ipi();
  119ee1:	e8 30 f3 ff ff       	call   119216 <signal_pending_ipi>
}
  119ee6:	48 89 d8             	mov    %rbx,%rax
  119ee9:	5b                   	pop    %rbx
  119eea:	41 5c                	pop    %r12
  119eec:	41 5d                	pop    %r13
  119eee:	41 5e                	pop    %r14
  119ef0:	5d                   	pop    %rbp
  119ef1:	c3                   	ret    

0000000000119ef2 <z_set_prio>:
{
  119ef2:	55                   	push   %rbp
  119ef3:	48 89 e5             	mov    %rsp,%rbp
  119ef6:	41 56                	push   %r14
  119ef8:	41 55                	push   %r13
  119efa:	41 54                	push   %r12
  119efc:	41 89 f4             	mov    %esi,%r12d
  119eff:	53                   	push   %rbx
  119f00:	48 89 fb             	mov    %rdi,%rbx
  119f03:	9c                   	pushf  
  119f04:	fa                   	cli    
  119f05:	41 5d                	pop    %r13
  119f07:	45 31 f6             	xor    %r14d,%r14d
  119f0a:	ba 01 00 00 00       	mov    $0x1,%edx
  119f0f:	4c 89 f0             	mov    %r14,%rax
  119f12:	f0 48 0f b1 15 c5 c2 	lock cmpxchg %rdx,0xc2c5(%rip)        # 1261e0 <sched_spinlock>
  119f19:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  119f1b:	74 07                	je     119f24 <z_set_prio+0x32>
		arch_spin_relax();
  119f1d:	e8 8e ef ff ff       	call   118eb0 <arch_spin_relax>
  119f22:	eb e6                	jmp    119f0a <z_set_prio+0x18>
	uint8_t state = thread->base.thread_state;
  119f24:	8a 43 19             	mov    0x19(%rbx),%al
				thread->base.prio = prio;
  119f27:	44 89 e6             	mov    %r12d,%esi
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
  119f2a:	a8 1f                	test   $0x1f,%al
  119f2c:	75 13                	jne    119f41 <z_set_prio+0x4f>
	return node->next != NULL;
  119f2e:	48 8b 4b 30          	mov    0x30(%rbx),%rcx
  119f32:	48 85 c9             	test   %rcx,%rcx
  119f35:	75 0a                	jne    119f41 <z_set_prio+0x4f>
			if (!IS_ENABLED(CONFIG_SMP) || z_is_thread_queued(thread)) {
  119f37:	84 c0                	test   %al,%al
  119f39:	0f 89 a6 00 00 00    	jns    119fe5 <z_set_prio+0xf3>
  119f3f:	eb 0b                	jmp    119f4c <z_set_prio+0x5a>
			thread->base.prio = prio;
  119f41:	44 88 63 1a          	mov    %r12b,0x1a(%rbx)
  119f45:	31 d2                	xor    %edx,%edx
  119f47:	e9 ac 00 00 00       	jmp    119ff8 <z_set_prio+0x106>
	thread->base.thread_state &= ~_THREAD_QUEUED;
  119f4c:	83 e0 7f             	and    $0x7f,%eax
  119f4f:	88 43 19             	mov    %al,0x19(%rbx)
	return !IS_ENABLED(CONFIG_SMP) || th != _current;
  119f52:	e8 51 f4 ff ff       	call   1193a8 <z_current_get>
	if (should_queue_thread(thread)) {
  119f57:	48 39 c3             	cmp    %rax,%rbx
  119f5a:	75 17                	jne    119f73 <z_set_prio+0x81>
	thread->base.thread_state |= _THREAD_QUEUED;
  119f5c:	80 4b 19 80          	orb    $0x80,0x19(%rbx)
				thread->base.prio = prio;
  119f60:	44 88 63 1a          	mov    %r12b,0x1a(%rbx)
  119f64:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119f6b:	00 00 
		_current_cpu->swap_ok = true;
  119f6d:	c6 40 21 01          	movb   $0x1,0x21(%rax)
  119f71:	eb 76                	jmp    119fe9 <z_set_prio+0xf7>
	sys_dlist_remove(&thread->base.qnode_dlist);
  119f73:	48 89 df             	mov    %rbx,%rdi
  119f76:	e8 ae f1 ff ff       	call   119129 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
  119f7b:	80 4b 19 80          	orb    $0x80,0x19(%rbx)
				thread->base.prio = prio;
  119f7f:	44 88 63 1a          	mov    %r12b,0x1a(%rbx)
	return list->head == list;
  119f83:	48 8b 05 c6 9b 00 00 	mov    0x9bc6(%rip),%rax        # 123b50 <_kernel+0x50>
	return (node == list->tail) ? NULL : node->next;
  119f8a:	48 8b 15 c7 9b 00 00 	mov    0x9bc7(%rip),%rdx        # 123b58 <_kernel+0x58>
	return sys_dlist_is_empty(list) ? NULL : list->head;
  119f91:	48 3d 50 3b 12 00    	cmp    $0x123b50,%rax
  119f97:	48 0f 45 c8          	cmovne %rax,%rcx
	int32_t b1 = thread_1->base.prio;
  119f9b:	40 0f be c6          	movsbl %sil,%eax
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
  119f9f:	48 85 c9             	test   %rcx,%rcx
  119fa2:	74 2a                	je     119fce <z_set_prio+0xdc>
	int32_t b2 = thread_2->base.prio;
  119fa4:	0f be 71 1a          	movsbl 0x1a(%rcx),%esi
	if (b1 != b2) {
  119fa8:	39 f0                	cmp    %esi,%eax
  119faa:	74 18                	je     119fc4 <z_set_prio+0xd2>
		if (z_sched_prio_cmp(thread, t) > 0) {
  119fac:	39 c6                	cmp    %eax,%esi
  119fae:	7e 14                	jle    119fc4 <z_set_prio+0xd2>
	sys_dnode_t *const prev = successor->prev;
  119fb0:	48 8b 41 08          	mov    0x8(%rcx),%rax
	node->next = successor;
  119fb4:	48 89 0b             	mov    %rcx,(%rbx)
	node->prev = prev;
  119fb7:	48 89 43 08          	mov    %rax,0x8(%rbx)
	prev->next = node;
  119fbb:	48 89 18             	mov    %rbx,(%rax)
	successor->prev = node;
  119fbe:	48 89 59 08          	mov    %rbx,0x8(%rcx)
}
  119fc2:	eb 25                	jmp    119fe9 <z_set_prio+0xf7>
	return (node == list->tail) ? NULL : node->next;
  119fc4:	48 39 d1             	cmp    %rdx,%rcx
  119fc7:	74 05                	je     119fce <z_set_prio+0xdc>
  119fc9:	48 8b 09             	mov    (%rcx),%rcx
  119fcc:	eb d1                	jmp    119f9f <z_set_prio+0xad>
	node->next = list;
  119fce:	48 c7 03 50 3b 12 00 	movq   $0x123b50,(%rbx)
	node->prev = tail;
  119fd5:	48 89 53 08          	mov    %rdx,0x8(%rbx)
	tail->next = node;
  119fd9:	48 89 1a             	mov    %rbx,(%rdx)
	list->tail = node;
  119fdc:	48 89 1d 75 9b 00 00 	mov    %rbx,0x9b75(%rip)        # 123b58 <_kernel+0x58>
}
  119fe3:	eb 04                	jmp    119fe9 <z_set_prio+0xf7>
				thread->base.prio = prio;
  119fe5:	44 88 63 1a          	mov    %r12b,0x1a(%rbx)
  119fe9:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  119ff0:	00 00 
	_current_cpu->swap_ok = preempt_ok;
  119ff2:	c6 40 21 01          	movb   $0x1,0x21(%rax)
  119ff6:	b2 01                	mov    $0x1,%dl
	atomic_clear(&l->locked);
  119ff8:	bf e0 61 12 00       	mov    $0x1261e0,%edi
  119ffd:	e8 2a f2 ff ff       	call   11922c <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11a002:	41 0f ba e5 09       	bt     $0x9,%r13d
  11a007:	73 01                	jae    11a00a <z_set_prio+0x118>
		__asm__ volatile ("sti" ::: "memory");
  11a009:	fb                   	sti    
}
  11a00a:	5b                   	pop    %rbx
  11a00b:	89 d0                	mov    %edx,%eax
  11a00d:	41 5c                	pop    %r12
  11a00f:	41 5d                	pop    %r13
  11a011:	41 5e                	pop    %r14
  11a013:	5d                   	pop    %rbp
  11a014:	c3                   	ret    

000000000011a015 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
  11a015:	55                   	push   %rbp
  11a016:	48 89 e5             	mov    %rsp,%rbp
  11a019:	41 56                	push   %r14
  11a01b:	41 55                	push   %r13
  11a01d:	41 54                	push   %r12
  11a01f:	53                   	push   %rbx
  11a020:	48 89 fb             	mov    %rdi,%rbx
  11a023:	9c                   	pushf  
  11a024:	fa                   	cli    
  11a025:	41 5c                	pop    %r12
  11a027:	45 31 ed             	xor    %r13d,%r13d
	k.key = arch_irq_lock();
  11a02a:	45 89 e6             	mov    %r12d,%r14d
  11a02d:	ba 01 00 00 00       	mov    $0x1,%edx
  11a032:	4c 89 e8             	mov    %r13,%rax
  11a035:	f0 48 0f b1 15 a2 c1 	lock cmpxchg %rdx,0xc1a2(%rip)        # 1261e0 <sched_spinlock>
  11a03c:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  11a03e:	74 07                	je     11a047 <z_thread_abort+0x32>
		arch_spin_relax();
  11a040:	e8 6b ee ff ff       	call   118eb0 <arch_spin_relax>
  11a045:	eb e6                	jmp    11a02d <z_thread_abort+0x18>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
  11a047:	f6 43 18 01          	testb  $0x1,0x18(%rbx)
  11a04b:	74 1b                	je     11a068 <z_thread_abort+0x53>
	atomic_clear(&l->locked);
  11a04d:	bf e0 61 12 00       	mov    $0x1261e0,%edi
  11a052:	e8 d5 f1 ff ff       	call   11922c <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11a057:	41 0f ba e4 09       	bt     $0x9,%r12d
  11a05c:	73 01                	jae    11a05f <z_thread_abort+0x4a>
		__asm__ volatile ("sti" ::: "memory");
  11a05e:	fb                   	sti    
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
  11a05f:	48 c7 c0 04 00 00 00 	mov    $0x4,%rax
  11a066:	cd 20                	int    $0x20
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
  11a068:	8a 43 19             	mov    0x19(%rbx),%al
  11a06b:	a8 08                	test   $0x8,%al
  11a06d:	0f 85 ec 00 00 00    	jne    11a15f <z_thread_abort+0x14a>
		k_spin_unlock(&sched_spinlock, key);
		return;
	}

#ifdef CONFIG_SMP
	if (is_aborting(thread) && thread == _current && arch_is_in_isr()) {
  11a073:	a8 20                	test   $0x20,%al
  11a075:	74 1b                	je     11a092 <z_thread_abort+0x7d>
  11a077:	e8 2c f3 ff ff       	call   1193a8 <z_current_get>
  11a07c:	48 39 c3             	cmp    %rax,%rbx
  11a07f:	75 11                	jne    11a092 <z_thread_abort+0x7d>
  11a081:	e8 bb f0 ff ff       	call   119141 <arch_is_in_isr>
  11a086:	84 c0                	test   %al,%al
  11a088:	74 08                	je     11a092 <z_thread_abort+0x7d>
		/* Another CPU is spinning for us, don't deadlock */
		end_thread(thread);
  11a08a:	48 89 df             	mov    %rbx,%rdi
  11a08d:	e8 af fb ff ff       	call   119c41 <end_thread>
	}

	bool active = thread_active_elsewhere(thread);
  11a092:	48 89 df             	mov    %rbx,%rdi
  11a095:	e8 1c f1 ff ff       	call   1191b6 <thread_active_elsewhere>
  11a09a:	41 89 c5             	mov    %eax,%r13d

	if (active) {
  11a09d:	84 c0                	test   %al,%al
  11a09f:	74 09                	je     11a0aa <z_thread_abort+0x95>
		/* It's running somewhere else, flag and poke */
		thread->base.thread_state |= _THREAD_ABORTING;
  11a0a1:	80 4b 19 20          	orb    $0x20,0x19(%rbx)

		/* We're going to spin, so need a true synchronous IPI
		 * here, not deferred!
		 */
#ifdef CONFIG_SCHED_IPI_SUPPORTED
		arch_sched_ipi();
  11a0a5:	e8 b8 7a ff ff       	call   111b62 <arch_sched_ipi>
#endif
	}

	if (is_aborting(thread) && thread != _current) {
  11a0aa:	f6 43 19 20          	testb  $0x20,0x19(%rbx)
  11a0ae:	0f 84 83 00 00 00    	je     11a137 <z_thread_abort+0x122>
  11a0b4:	e8 ef f2 ff ff       	call   1193a8 <z_current_get>
  11a0b9:	48 89 c7             	mov    %rax,%rdi
  11a0bc:	48 39 d8             	cmp    %rbx,%rax
  11a0bf:	74 76                	je     11a137 <z_thread_abort+0x122>
		if (arch_is_in_isr()) {
  11a0c1:	e8 7b f0 ff ff       	call   119141 <arch_is_in_isr>
  11a0c6:	84 c0                	test   %al,%al
  11a0c8:	74 47                	je     11a111 <z_thread_abort+0xfc>
  11a0ca:	bf e0 61 12 00       	mov    $0x1261e0,%edi
  11a0cf:	e8 58 f1 ff ff       	call   11922c <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11a0d4:	41 0f ba e4 09       	bt     $0x9,%r12d
  11a0d9:	73 01                	jae    11a0dc <z_thread_abort+0xc7>
		__asm__ volatile ("sti" ::: "memory");
  11a0db:	fb                   	sti    
  11a0dc:	8a 43 19             	mov    0x19(%rbx),%al
  11a0df:	83 e0 20             	and    $0x20,%eax
			/* ISRs can only spin waiting another CPU */
			k_spin_unlock(&sched_spinlock, key);
			while (is_aborting(thread)) {
  11a0e2:	84 c0                	test   %al,%al
  11a0e4:	75 fc                	jne    11a0e2 <z_thread_abort+0xcd>
  11a0e6:	9c                   	pushf  
  11a0e7:	fa                   	cli    
  11a0e8:	41 5c                	pop    %r12
  11a0ea:	45 31 ed             	xor    %r13d,%r13d
  11a0ed:	ba 01 00 00 00       	mov    $0x1,%edx
  11a0f2:	4c 89 e8             	mov    %r13,%rax
  11a0f5:	f0 48 0f b1 15 e2 c0 	lock cmpxchg %rdx,0xc0e2(%rip)        # 1261e0 <sched_spinlock>
  11a0fc:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  11a0fe:	74 07                	je     11a107 <z_thread_abort+0xf2>
		arch_spin_relax();
  11a100:	e8 ab ed ff ff       	call   118eb0 <arch_spin_relax>
  11a105:	eb e6                	jmp    11a0ed <z_thread_abort+0xd8>

			/* Now we know it's dying, but not necessarily
			 * dead.  Wait for the switch to happen!
			 */
			key = k_spin_lock(&sched_spinlock);
			z_sched_switch_spin(thread);
  11a107:	48 89 df             	mov    %rbx,%rdi
  11a10a:	e8 e9 f0 ff ff       	call   1191f8 <z_sched_switch_spin>
	atomic_clear(&l->locked);
  11a10f:	eb 4e                	jmp    11a15f <z_thread_abort+0x14a>
			k_spin_unlock(&sched_spinlock, key);
		} else if (active) {
  11a111:	45 84 ed             	test   %r13b,%r13b
  11a114:	74 5b                	je     11a171 <z_thread_abort+0x15c>
			/* Threads can join */
			add_to_waitq_locked(_current, &thread->join_queue);
  11a116:	48 8d b3 a0 00 00 00 	lea    0xa0(%rbx),%rsi
  11a11d:	e8 c3 f2 ff ff       	call   1193e5 <add_to_waitq_locked>
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
  11a122:	5b                   	pop    %rbx
			z_swap(&sched_spinlock, key);
  11a123:	44 89 f6             	mov    %r14d,%esi
}
  11a126:	41 5c                	pop    %r12
			z_swap(&sched_spinlock, key);
  11a128:	bf e0 61 12 00       	mov    $0x1261e0,%edi
}
  11a12d:	41 5d                	pop    %r13
  11a12f:	41 5e                	pop    %r14
  11a131:	5d                   	pop    %rbp
			z_swap(&sched_spinlock, key);
  11a132:	e9 f1 f5 ff ff       	jmp    119728 <z_swap>
	end_thread(thread);
  11a137:	48 89 df             	mov    %rbx,%rdi
  11a13a:	e8 02 fb ff ff       	call   119c41 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
  11a13f:	e8 64 f2 ff ff       	call   1193a8 <z_current_get>
  11a144:	48 39 c3             	cmp    %rax,%rbx
  11a147:	75 16                	jne    11a15f <z_thread_abort+0x14a>
  11a149:	e8 f3 ef ff ff       	call   119141 <arch_is_in_isr>
  11a14e:	84 c0                	test   %al,%al
  11a150:	75 0d                	jne    11a15f <z_thread_abort+0x14a>
		z_swap(&sched_spinlock, key);
  11a152:	44 89 f6             	mov    %r14d,%esi
  11a155:	bf e0 61 12 00       	mov    $0x1261e0,%edi
  11a15a:	e8 c9 f5 ff ff       	call   119728 <z_swap>
  11a15f:	bf e0 61 12 00       	mov    $0x1261e0,%edi
  11a164:	e8 c3 f0 ff ff       	call   11922c <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11a169:	41 0f ba e4 09       	bt     $0x9,%r12d
  11a16e:	73 01                	jae    11a171 <z_thread_abort+0x15c>
		__asm__ volatile ("sti" ::: "memory");
  11a170:	fb                   	sti    
}
  11a171:	5b                   	pop    %rbx
  11a172:	41 5c                	pop    %r12
  11a174:	41 5d                	pop    %r13
  11a176:	41 5e                	pop    %r14
  11a178:	5d                   	pop    %rbp
  11a179:	c3                   	ret    

000000000011a17a <z_impl_k_thread_abort>:
#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(struct k_thread *thread)
{
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_thread, abort, thread);

	z_thread_abort(thread);
  11a17a:	e9 96 fe ff ff       	jmp    11a015 <z_thread_abort>

000000000011a17f <local_delay>:

/* Tiny delay that relaxes bus traffic to avoid spamming a shared
 * memory bus looking at an atomic variable
 */
static inline void local_delay(void)
{
  11a17f:	55                   	push   %rbp
	for (volatile int i = 0; i < 1000; i++) {
  11a180:	31 c0                	xor    %eax,%eax
{
  11a182:	48 89 e5             	mov    %rsp,%rbp
	for (volatile int i = 0; i < 1000; i++) {
  11a185:	89 45 fc             	mov    %eax,-0x4(%rbp)
  11a188:	8b 45 fc             	mov    -0x4(%rbp),%eax
  11a18b:	3d e7 03 00 00       	cmp    $0x3e7,%eax
  11a190:	7f 0a                	jg     11a19c <local_delay+0x1d>
  11a192:	8b 45 fc             	mov    -0x4(%rbp),%eax
  11a195:	ff c0                	inc    %eax
  11a197:	89 45 fc             	mov    %eax,-0x4(%rbp)
  11a19a:	eb ec                	jmp    11a188 <local_delay+0x9>
	}
}
  11a19c:	5d                   	pop    %rbp
  11a19d:	c3                   	ret    

000000000011a19e <atomic_clear.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
  11a19e:	31 c0                	xor    %eax,%eax
  11a1a0:	48 87 07             	xchg   %rax,(%rdi)
}
  11a1a3:	c3                   	ret    

000000000011a1a4 <start_cpu.constprop.0>:
	z_swap_unlocked();

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
}

static void start_cpu(int id, atomic_t *start_flag)
  11a1a4:	55                   	push   %rbp
  11a1a5:	48 89 e5             	mov    %rsp,%rbp
  11a1a8:	53                   	push   %rbx
  11a1a9:	89 fb                	mov    %edi,%ebx
  11a1ab:	52                   	push   %rdx
{
	z_init_cpu(id);
  11a1ac:	e8 bd e9 ff ff       	call   118b6e <z_init_cpu>
	(void)atomic_clear(&ready_flag);
	arch_start_cpu(id, z_interrupt_stacks[id], CONFIG_ISR_STACK_SIZE,
  11a1b1:	48 63 f3             	movslq %ebx,%rsi
	(void)atomic_clear(&ready_flag);
  11a1b4:	bf e8 61 12 00       	mov    $0x1261e8,%edi
	arch_start_cpu(id, z_interrupt_stacks[id], CONFIG_ISR_STACK_SIZE,
  11a1b9:	41 b8 f0 61 12 00    	mov    $0x1261f0,%r8d
  11a1bf:	48 c1 e6 0e          	shl    $0xe,%rsi
  11a1c3:	b9 f7 a1 11 00       	mov    $0x11a1f7,%ecx
  11a1c8:	ba 00 40 00 00       	mov    $0x4000,%edx
	(void)atomic_clear(&ready_flag);
  11a1cd:	e8 cc ff ff ff       	call   11a19e <atomic_clear.isra.0>
	arch_start_cpu(id, z_interrupt_stacks[id], CONFIG_ISR_STACK_SIZE,
  11a1d2:	48 81 c6 70 62 12 00 	add    $0x126270,%rsi
  11a1d9:	89 df                	mov    %ebx,%edi
  11a1db:	e8 8e 77 ff ff       	call   11196e <arch_start_cpu>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
  11a1e0:	48 8b 05 01 c0 00 00 	mov    0xc001(%rip),%rax        # 1261e8 <ready_flag>
		       smp_init_top, start_flag);
	while (!atomic_get(&ready_flag)) {
  11a1e7:	48 85 c0             	test   %rax,%rax
  11a1ea:	75 07                	jne    11a1f3 <start_cpu.constprop.0+0x4f>
		local_delay();
  11a1ec:	e8 8e ff ff ff       	call   11a17f <local_delay>
  11a1f1:	eb ed                	jmp    11a1e0 <start_cpu.constprop.0+0x3c>
	}
}
  11a1f3:	58                   	pop    %rax
  11a1f4:	5b                   	pop    %rbx
  11a1f5:	5d                   	pop    %rbp
  11a1f6:	c3                   	ret    

000000000011a1f7 <smp_init_top>:
{
  11a1f7:	55                   	push   %rbp
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
  11a1f8:	b8 01 00 00 00       	mov    $0x1,%eax
  11a1fd:	48 89 e5             	mov    %rsp,%rbp
  11a200:	41 54                	push   %r12
  11a202:	53                   	push   %rbx
  11a203:	48 81 ec 20 03 00 00 	sub    $0x320,%rsp
  11a20a:	48 87 05 d7 bf 00 00 	xchg   %rax,0xbfd7(%rip)        # 1261e8 <ready_flag>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
  11a211:	48 8b 07             	mov    (%rdi),%rax
	while (!atomic_get(cpu_start_flag)) {
  11a214:	48 85 c0             	test   %rax,%rax
  11a217:	75 07                	jne    11a220 <smp_init_top+0x29>
		local_delay();
  11a219:	e8 61 ff ff ff       	call   11a17f <local_delay>
  11a21e:	eb f1                	jmp    11a211 <smp_init_top+0x1a>
	dummy_thread->base.user_options = K_ESSENTIAL;
  11a220:	66 c7 85 e8 fc ff ff 	movw   $0x101,-0x318(%rbp)
  11a227:	01 01 
	dummy_thread->resource_pool = NULL;
  11a229:	31 d2                	xor    %edx,%edx
  11a22b:	48 89 95 90 fd ff ff 	mov    %rdx,-0x270(%rbp)
  11a232:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  11a239:	00 00 
	_current_cpu->current = dummy_thread;
  11a23b:	48 8d 95 d0 fc ff ff 	lea    -0x330(%rbp),%rdx
  11a242:	48 89 50 10          	mov    %rdx,0x10(%rax)
	smp_timer_init();
  11a246:	e8 49 86 ff ff       	call   112894 <smp_timer_init>
  11a24b:	9c                   	pushf  
  11a24c:	fa                   	cli    
  11a24d:	58                   	pop    %rax
  11a24e:	e8 3d f1 ff ff       	call   119390 <z_impl_z_current_get>
	old_thread->swap_retval = -EAGAIN;
  11a253:	c7 80 b4 00 00 00 f5 	movl   $0xfffffff5,0xb4(%rax)
  11a25a:	ff ff ff 
  11a25d:	49 89 c4             	mov    %rax,%r12
  11a260:	9c                   	pushf  
  11a261:	fa                   	cli    
  11a262:	58                   	pop    %rax
	return __atomic_compare_exchange_n(target, &old_value, new_value,
  11a263:	31 db                	xor    %ebx,%ebx
  11a265:	ba 01 00 00 00       	mov    $0x1,%edx
  11a26a:	48 89 d8             	mov    %rbx,%rax
  11a26d:	f0 48 0f b1 15 6a bf 	lock cmpxchg %rdx,0xbf6a(%rip)        # 1261e0 <sched_spinlock>
  11a274:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  11a276:	74 07                	je     11a27f <smp_init_top+0x88>
		arch_spin_relax();
  11a278:	e8 33 ec ff ff       	call   118eb0 <arch_spin_relax>
  11a27d:	eb e6                	jmp    11a265 <smp_init_top+0x6e>
	new_thread = z_swap_next_thread();
  11a27f:	e8 3b f2 ff ff       	call   1194bf <z_swap_next_thread>
  11a284:	48 89 c3             	mov    %rax,%rbx
	if (new_thread != old_thread) {
  11a287:	4c 39 e0             	cmp    %r12,%rax
  11a28a:	74 76                	je     11a302 <smp_init_top+0x10b>
  11a28c:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  11a293:	00 00 
		_current_cpu->swap_ok = 0;
  11a295:	c6 40 21 00          	movb   $0x0,0x21(%rax)
  11a299:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  11a2a0:	00 00 
		new_thread->base.cpu = arch_curr_cpu()->id;
  11a2a2:	8a 40 20             	mov    0x20(%rax),%al
  11a2a5:	88 43 21             	mov    %al,0x21(%rbx)
	while (*shp == NULL) {
  11a2a8:	48 83 bb b8 00 00 00 	cmpq   $0x0,0xb8(%rbx)
  11a2af:	00 
  11a2b0:	75 07                	jne    11a2b9 <smp_init_top+0xc2>
		arch_spin_relax();
  11a2b2:	e8 f9 eb ff ff       	call   118eb0 <arch_spin_relax>
  11a2b7:	eb ef                	jmp    11a2a8 <smp_init_top+0xb1>
  11a2b9:	65 48 8b 04 25 68 00 	mov    %gs:0x68,%rax
  11a2c0:	00 00 
		_current_cpu->current = new_thread;
  11a2c2:	48 89 58 10          	mov    %rbx,0x10(%rax)
		z_reset_time_slice(new_thread);
  11a2c6:	48 89 df             	mov    %rbx,%rdi
  11a2c9:	e8 cf ef ff ff       	call   11929d <z_reset_time_slice>
		z_requeue_current(old_thread);
  11a2ce:	4c 89 e7             	mov    %r12,%rdi
  11a2d1:	e8 5c ef ff ff       	call   119232 <z_requeue_current>
			new_thread->switch_handle = NULL;
  11a2d6:	31 c0                	xor    %eax,%eax
		void *newsh = new_thread->switch_handle;
  11a2d8:	48 8b 93 b8 00 00 00 	mov    0xb8(%rbx),%rdx
	atomic_clear(&l->locked);
  11a2df:	bf e0 61 12 00       	mov    $0x1261e0,%edi
			new_thread->switch_handle = NULL;
  11a2e4:	48 89 83 b8 00 00 00 	mov    %rax,0xb8(%rbx)
		arch_switch(newsh, &old_thread->switch_handle);
  11a2eb:	49 8d b4 24 b8 00 00 	lea    0xb8(%r12),%rsi
  11a2f2:	00 
  11a2f3:	e8 a6 fe ff ff       	call   11a19e <atomic_clear.isra.0>
	z_x86_switch(switch_to, switched_from);
  11a2f8:	48 89 d7             	mov    %rdx,%rdi
  11a2fb:	e8 d6 6e ee ff       	call   11d6 <z_x86_switch>
}
  11a300:	eb 0a                	jmp    11a30c <smp_init_top+0x115>
  11a302:	bf e0 61 12 00       	mov    $0x1261e0,%edi
  11a307:	e8 92 fe ff ff       	call   11a19e <atomic_clear.isra.0>
  11a30c:	fb                   	sti    

000000000011a30d <z_smp_global_lock>:
{
  11a30d:	55                   	push   %rbp
  11a30e:	48 89 e5             	mov    %rsp,%rbp
  11a311:	53                   	push   %rbx
  11a312:	51                   	push   %rcx
  11a313:	9c                   	pushf  
  11a314:	fa                   	cli    
  11a315:	5b                   	pop    %rbx
  11a316:	e8 75 f0 ff ff       	call   119390 <z_impl_z_current_get>
	if (!_current->base.global_lock_count) {
  11a31b:	80 78 22 00          	cmpb   $0x0,0x22(%rax)
  11a31f:	48 89 c2             	mov    %rax,%rdx
  11a322:	75 15                	jne    11a339 <z_smp_global_lock+0x2c>
  11a324:	31 c9                	xor    %ecx,%ecx
  11a326:	be 01 00 00 00       	mov    $0x1,%esi
  11a32b:	48 89 c8             	mov    %rcx,%rax
  11a32e:	f0 48 0f b1 35 c1 be 	lock cmpxchg %rsi,0xbec1(%rip)        # 1261f8 <global_lock>
  11a335:	00 00 
		while (!atomic_cas(&global_lock, 0, 1)) {
  11a337:	75 f2                	jne    11a32b <z_smp_global_lock+0x1e>
	_current->base.global_lock_count++;
  11a339:	fe 42 22             	incb   0x22(%rdx)
}
  11a33c:	89 d8                	mov    %ebx,%eax
  11a33e:	5a                   	pop    %rdx
  11a33f:	5b                   	pop    %rbx
  11a340:	5d                   	pop    %rbp
  11a341:	c3                   	ret    

000000000011a342 <z_smp_global_unlock>:
{
  11a342:	55                   	push   %rbp
  11a343:	48 89 e5             	mov    %rsp,%rbp
  11a346:	53                   	push   %rbx
  11a347:	89 fb                	mov    %edi,%ebx
  11a349:	52                   	push   %rdx
  11a34a:	e8 41 f0 ff ff       	call   119390 <z_impl_z_current_get>
	if (_current->base.global_lock_count != 0U) {
  11a34f:	8a 50 22             	mov    0x22(%rax),%dl
  11a352:	84 d2                	test   %dl,%dl
  11a354:	74 13                	je     11a369 <z_smp_global_unlock+0x27>
		_current->base.global_lock_count--;
  11a356:	ff ca                	dec    %edx
  11a358:	88 50 22             	mov    %dl,0x22(%rax)
		if (!_current->base.global_lock_count) {
  11a35b:	84 d2                	test   %dl,%dl
  11a35d:	75 0a                	jne    11a369 <z_smp_global_unlock+0x27>
			atomic_clear(&global_lock);
  11a35f:	bf f8 61 12 00       	mov    $0x1261f8,%edi
  11a364:	e8 35 fe ff ff       	call   11a19e <atomic_clear.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11a369:	0f ba e3 09          	bt     $0x9,%ebx
  11a36d:	73 01                	jae    11a370 <z_smp_global_unlock+0x2e>
		__asm__ volatile ("sti" ::: "memory");
  11a36f:	fb                   	sti    
}
  11a370:	58                   	pop    %rax
  11a371:	5b                   	pop    %rbx
  11a372:	5d                   	pop    %rbp
  11a373:	c3                   	ret    

000000000011a374 <z_smp_release_global_lock>:
	if (!thread->base.global_lock_count) {
  11a374:	80 7f 22 00          	cmpb   $0x0,0x22(%rdi)
  11a378:	75 0a                	jne    11a384 <z_smp_release_global_lock+0x10>
		atomic_clear(&global_lock);
  11a37a:	bf f8 61 12 00       	mov    $0x1261f8,%edi
  11a37f:	e9 1a fe ff ff       	jmp    11a19e <atomic_clear.isra.0>
}
  11a384:	c3                   	ret    

000000000011a385 <z_smp_init>:
	(void)atomic_set(&start_flag, 1); /* async, don't care */
	start_cpu(id, &start_flag);
}

void z_smp_init(void)
{
  11a385:	55                   	push   %rbp
	(void)atomic_clear(&start_flag);
  11a386:	bf f0 61 12 00       	mov    $0x1261f0,%edi
{
  11a38b:	48 89 e5             	mov    %rsp,%rbp
	(void)atomic_clear(&start_flag);
  11a38e:	e8 0b fe ff ff       	call   11a19e <atomic_clear.isra.0>

	unsigned int num_cpus = arch_num_cpus();

	for (int i = 1; i < num_cpus; i++) {
		start_cpu(i, &start_flag);
  11a393:	bf 01 00 00 00       	mov    $0x1,%edi
  11a398:	e8 07 fe ff ff       	call   11a1a4 <start_cpu.constprop.0>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
  11a39d:	b8 01 00 00 00       	mov    $0x1,%eax
  11a3a2:	48 87 05 47 be 00 00 	xchg   %rax,0xbe47(%rip)        # 1261f0 <start_flag>
	}
	(void)atomic_set(&start_flag, 1);
}
  11a3a9:	5d                   	pop    %rbp
  11a3aa:	c3                   	ret    

000000000011a3ab <elapsed>:
	 *
	 * The distinction is implemented by looking at announce_remaining which
	 * will be non-zero while sys_clock_announce() is executing and zero
	 * otherwise.
	 */
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
  11a3ab:	83 3d ae be 00 00 00 	cmpl   $0x0,0xbeae(%rip)        # 126260 <announce_remaining>
  11a3b2:	75 05                	jne    11a3b9 <elapsed+0xe>
  11a3b4:	e9 82 85 ff ff       	jmp    11293b <sys_clock_elapsed>
}
  11a3b9:	31 c0                	xor    %eax,%eax
  11a3bb:	c3                   	ret    

000000000011a3bc <next_timeout>:

static int32_t next_timeout(void)
{
  11a3bc:	55                   	push   %rbp
  11a3bd:	48 89 e5             	mov    %rsp,%rbp
  11a3c0:	53                   	push   %rbx
  11a3c1:	51                   	push   %rcx
	return list->head == list;
  11a3c2:	48 8b 1d 27 85 02 00 	mov    0x28527(%rip),%rbx        # 1428f0 <timeout_list>
	return sys_dlist_is_empty(list) ? NULL : list->head;
  11a3c9:	48 81 fb f0 28 14 00 	cmp    $0x1428f0,%rbx
  11a3d0:	75 07                	jne    11a3d9 <next_timeout+0x1d>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
  11a3d2:	e8 d4 ff ff ff       	call   11a3ab <elapsed>
	int32_t ret;

	if ((to == NULL) ||
  11a3d7:	eb 25                	jmp    11a3fe <next_timeout+0x42>
	int32_t ticks_elapsed = elapsed();
  11a3d9:	e8 cd ff ff ff       	call   11a3ab <elapsed>
	if ((to == NULL) ||
  11a3de:	48 85 db             	test   %rbx,%rbx
  11a3e1:	74 1b                	je     11a3fe <next_timeout+0x42>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
  11a3e3:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  11a3e7:	48 98                	cltq   
  11a3e9:	48 29 c2             	sub    %rax,%rdx
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
  11a3ec:	b8 00 00 00 00       	mov    $0x0,%eax
  11a3f1:	48 0f 49 c2          	cmovns %rdx,%rax
	if ((to == NULL) ||
  11a3f5:	48 81 fa ff ff ff 7f 	cmp    $0x7fffffff,%rdx
  11a3fc:	7e 05                	jle    11a403 <next_timeout+0x47>
		ret = MAX_WAIT;
  11a3fe:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
	}

	return ret;
}
  11a403:	5a                   	pop    %rdx
  11a404:	5b                   	pop    %rbx
  11a405:	5d                   	pop    %rbp
  11a406:	c3                   	ret    

000000000011a407 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
  11a407:	48 85 ff             	test   %rdi,%rdi
  11a40a:	74 19                	je     11a425 <remove_timeout+0x1e>
	return (node == list->tail) ? NULL : node->next;
  11a40c:	48 3b 3d e5 84 02 00 	cmp    0x284e5(%rip),%rdi        # 1428f8 <timeout_list+0x8>
  11a413:	74 10                	je     11a425 <remove_timeout+0x1e>
  11a415:	48 8b 07             	mov    (%rdi),%rax
	if (next(t) != NULL) {
  11a418:	48 85 c0             	test   %rax,%rax
  11a41b:	74 08                	je     11a425 <remove_timeout+0x1e>
		next(t)->dticks += t->dticks;
  11a41d:	48 8b 57 18          	mov    0x18(%rdi),%rdx
  11a421:	48 01 50 18          	add    %rdx,0x18(%rax)
	sys_dnode_t *const next = node->next;
  11a425:	48 8b 07             	mov    (%rdi),%rax
	sys_dnode_t *const prev = node->prev;
  11a428:	48 8b 57 08          	mov    0x8(%rdi),%rdx
	prev->next = next;
  11a42c:	48 89 02             	mov    %rax,(%rdx)
	next->prev = prev;
  11a42f:	48 89 50 08          	mov    %rdx,0x8(%rax)
	node->prev = NULL;
  11a433:	31 c0                	xor    %eax,%eax
  11a435:	48 89 07             	mov    %rax,(%rdi)
  11a438:	48 89 47 08          	mov    %rax,0x8(%rdi)
}
  11a43c:	c3                   	ret    

000000000011a43d <atomic_clear.constprop.0.isra.0>:
  11a43d:	31 c0                	xor    %eax,%eax
  11a43f:	48 87 05 ba bd 00 00 	xchg   %rax,0xbdba(%rip)        # 126200 <timeout_lock>
}
  11a446:	c3                   	ret    

000000000011a447 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
  11a447:	48 83 fa ff          	cmp    $0xffffffffffffffff,%rdx
  11a44b:	0f 84 0e 01 00 00    	je     11a55f <z_add_timeout+0x118>
{
  11a451:	55                   	push   %rbp
  11a452:	48 89 e5             	mov    %rsp,%rbp
  11a455:	41 56                	push   %r14
  11a457:	41 55                	push   %r13
  11a459:	49 89 d5             	mov    %rdx,%r13
  11a45c:	41 54                	push   %r12
  11a45e:	53                   	push   %rbx
  11a45f:	48 89 fb             	mov    %rdi,%rbx
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
  11a462:	48 89 77 10          	mov    %rsi,0x10(%rdi)
  11a466:	9c                   	pushf  
  11a467:	fa                   	cli    
  11a468:	41 5c                	pop    %r12
	return __atomic_compare_exchange_n(target, &old_value, new_value,
  11a46a:	45 31 f6             	xor    %r14d,%r14d
  11a46d:	ba 01 00 00 00       	mov    $0x1,%edx
  11a472:	4c 89 f0             	mov    %r14,%rax
  11a475:	f0 48 0f b1 15 82 bd 	lock cmpxchg %rdx,0xbd82(%rip)        # 126200 <timeout_lock>
  11a47c:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  11a47e:	74 07                	je     11a487 <z_add_timeout+0x40>
		arch_spin_relax();
  11a480:	e8 2b ea ff ff       	call   118eb0 <arch_spin_relax>
  11a485:	eb e6                	jmp    11a46d <z_add_timeout+0x26>

	K_SPINLOCK(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
  11a487:	49 83 fd fe          	cmp    $0xfffffffffffffffe,%r13
  11a48b:	7f 1f                	jg     11a4ac <z_add_timeout+0x65>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
  11a48d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
  11a494:	48 2b 05 6d bd 00 00 	sub    0xbd6d(%rip),%rax        # 126208 <curr_tick>

			to->dticks = MAX(1, ticks);
  11a49b:	ba 01 00 00 00       	mov    $0x1,%edx
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
  11a4a0:	4c 29 e8             	sub    %r13,%rax
			to->dticks = MAX(1, ticks);
  11a4a3:	48 85 c0             	test   %rax,%rax
  11a4a6:	48 0f 4e c2          	cmovle %rdx,%rax
  11a4aa:	eb 0c                	jmp    11a4b8 <z_add_timeout+0x71>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
  11a4ac:	e8 fa fe ff ff       	call   11a3ab <elapsed>
  11a4b1:	48 98                	cltq   
  11a4b3:	49 8d 44 05 01       	lea    0x1(%r13,%rax,1),%rax
			to->dticks = MAX(1, ticks);
  11a4b8:	48 89 43 18          	mov    %rax,0x18(%rbx)
	return list->head == list;
  11a4bc:	48 8b 05 2d 84 02 00 	mov    0x2842d(%rip),%rax        # 1428f0 <timeout_list>
	return sys_dlist_is_empty(list) ? NULL : list->head;
  11a4c3:	48 3d f0 28 14 00    	cmp    $0x1428f0,%rax
  11a4c9:	75 02                	jne    11a4cd <z_add_timeout+0x86>
  11a4cb:	31 c0                	xor    %eax,%eax
	return (node == list->tail) ? NULL : node->next;
  11a4cd:	48 8b 35 24 84 02 00 	mov    0x28424(%rip),%rsi        # 1428f8 <timeout_list+0x8>
		}

		for (t = first(); t != NULL; t = next(t)) {
  11a4d4:	48 85 c0             	test   %rax,%rax
  11a4d7:	74 39                	je     11a512 <z_add_timeout+0xcb>
			if (t->dticks > to->dticks) {
  11a4d9:	48 8b 48 18          	mov    0x18(%rax),%rcx
  11a4dd:	48 8b 53 18          	mov    0x18(%rbx),%rdx
  11a4e1:	48 39 d1             	cmp    %rdx,%rcx
  11a4e4:	7e 1b                	jle    11a501 <z_add_timeout+0xba>
				t->dticks -= to->dticks;
  11a4e6:	48 29 d1             	sub    %rdx,%rcx
	sys_dnode_t *const prev = successor->prev;
  11a4e9:	48 8b 50 08          	mov    0x8(%rax),%rdx
  11a4ed:	48 89 48 18          	mov    %rcx,0x18(%rax)
	node->prev = prev;
  11a4f1:	48 89 53 08          	mov    %rdx,0x8(%rbx)
	node->next = successor;
  11a4f5:	48 89 03             	mov    %rax,(%rbx)
	prev->next = node;
  11a4f8:	48 89 1a             	mov    %rbx,(%rdx)
	successor->prev = node;
  11a4fb:	48 89 58 08          	mov    %rbx,0x8(%rax)
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
  11a4ff:	eb 26                	jmp    11a527 <z_add_timeout+0xe0>
			to->dticks -= t->dticks;
  11a501:	48 29 ca             	sub    %rcx,%rdx
  11a504:	48 89 53 18          	mov    %rdx,0x18(%rbx)
	return (node == list->tail) ? NULL : node->next;
  11a508:	48 39 f0             	cmp    %rsi,%rax
  11a50b:	74 05                	je     11a512 <z_add_timeout+0xcb>
  11a50d:	48 8b 00             	mov    (%rax),%rax
  11a510:	eb c2                	jmp    11a4d4 <z_add_timeout+0x8d>
	node->next = list;
  11a512:	48 c7 03 f0 28 14 00 	movq   $0x1428f0,(%rbx)
	node->prev = tail;
  11a519:	48 89 73 08          	mov    %rsi,0x8(%rbx)
	tail->next = node;
  11a51d:	48 89 1e             	mov    %rbx,(%rsi)
	list->tail = node;
  11a520:	48 89 1d d1 83 02 00 	mov    %rbx,0x283d1(%rip)        # 1428f8 <timeout_list+0x8>
	return list->head == list;
  11a527:	48 8b 05 c2 83 02 00 	mov    0x283c2(%rip),%rax        # 1428f0 <timeout_list>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
  11a52e:	48 3d f0 28 14 00    	cmp    $0x1428f0,%rax
  11a534:	74 13                	je     11a549 <z_add_timeout+0x102>
  11a536:	48 39 c3             	cmp    %rax,%rbx
  11a539:	75 0e                	jne    11a549 <z_add_timeout+0x102>
			sys_clock_set_timeout(next_timeout(), false);
  11a53b:	e8 7c fe ff ff       	call   11a3bc <next_timeout>
  11a540:	31 f6                	xor    %esi,%esi
  11a542:	89 c7                	mov    %eax,%edi
  11a544:	e8 4c 83 ff ff       	call   112895 <sys_clock_set_timeout>
	atomic_clear(&l->locked);
  11a549:	e8 ef fe ff ff       	call   11a43d <atomic_clear.constprop.0.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11a54e:	41 0f ba e4 09       	bt     $0x9,%r12d
  11a553:	73 01                	jae    11a556 <z_add_timeout+0x10f>
		__asm__ volatile ("sti" ::: "memory");
  11a555:	fb                   	sti    
		}
	}
}
  11a556:	5b                   	pop    %rbx
  11a557:	41 5c                	pop    %r12
  11a559:	41 5d                	pop    %r13
  11a55b:	41 5e                	pop    %r14
  11a55d:	5d                   	pop    %rbp
  11a55e:	c3                   	ret    
  11a55f:	c3                   	ret    

000000000011a560 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
  11a560:	55                   	push   %rbp
  11a561:	48 89 e5             	mov    %rsp,%rbp
  11a564:	41 55                	push   %r13
  11a566:	41 54                	push   %r12
  11a568:	48 83 ec 10          	sub    $0x10,%rsp
  11a56c:	9c                   	pushf  
  11a56d:	fa                   	cli    
  11a56e:	41 5c                	pop    %r12
  11a570:	45 31 ed             	xor    %r13d,%r13d
  11a573:	ba 01 00 00 00       	mov    $0x1,%edx
  11a578:	4c 89 e8             	mov    %r13,%rax
  11a57b:	f0 48 0f b1 15 7c bc 	lock cmpxchg %rdx,0xbc7c(%rip)        # 126200 <timeout_lock>
  11a582:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  11a584:	74 0f                	je     11a595 <z_abort_timeout+0x35>
  11a586:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
		arch_spin_relax();
  11a58a:	e8 21 e9 ff ff       	call   118eb0 <arch_spin_relax>
  11a58f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  11a593:	eb de                	jmp    11a573 <z_abort_timeout+0x13>
	int ret = -EINVAL;

	K_SPINLOCK(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
  11a595:	48 83 3f 00          	cmpq   $0x0,(%rdi)
	int ret = -EINVAL;
  11a599:	ba ea ff ff ff       	mov    $0xffffffea,%edx
		if (sys_dnode_is_linked(&to->node)) {
  11a59e:	74 07                	je     11a5a7 <z_abort_timeout+0x47>
			remove_timeout(to);
  11a5a0:	e8 62 fe ff ff       	call   11a407 <remove_timeout>
			ret = 0;
  11a5a5:	31 d2                	xor    %edx,%edx
	atomic_clear(&l->locked);
  11a5a7:	e8 91 fe ff ff       	call   11a43d <atomic_clear.constprop.0.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11a5ac:	41 0f ba e4 09       	bt     $0x9,%r12d
  11a5b1:	73 01                	jae    11a5b4 <z_abort_timeout+0x54>
		__asm__ volatile ("sti" ::: "memory");
  11a5b3:	fb                   	sti    
		}
	}

	return ret;
}
  11a5b4:	89 d0                	mov    %edx,%eax
  11a5b6:	5a                   	pop    %rdx
  11a5b7:	59                   	pop    %rcx
  11a5b8:	41 5c                	pop    %r12
  11a5ba:	41 5d                	pop    %r13
  11a5bc:	5d                   	pop    %rbp
  11a5bd:	c3                   	ret    

000000000011a5be <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
  11a5be:	55                   	push   %rbp
  11a5bf:	48 89 e5             	mov    %rsp,%rbp
  11a5c2:	41 56                	push   %r14
  11a5c4:	41 55                	push   %r13
  11a5c6:	41 54                	push   %r12
  11a5c8:	53                   	push   %rbx
  11a5c9:	89 fb                	mov    %edi,%ebx
  11a5cb:	9c                   	pushf  
  11a5cc:	fa                   	cli    
  11a5cd:	41 5c                	pop    %r12
  11a5cf:	45 31 f6             	xor    %r14d,%r14d
	k.key = arch_irq_lock();
  11a5d2:	45 89 e5             	mov    %r12d,%r13d
  11a5d5:	ba 01 00 00 00       	mov    $0x1,%edx
  11a5da:	4c 89 f0             	mov    %r14,%rax
  11a5dd:	f0 48 0f b1 15 1a bc 	lock cmpxchg %rdx,0xbc1a(%rip)        # 126200 <timeout_lock>
  11a5e4:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  11a5e6:	74 07                	je     11a5ef <sys_clock_announce+0x31>
		arch_spin_relax();
  11a5e8:	e8 c3 e8 ff ff       	call   118eb0 <arch_spin_relax>
  11a5ed:	eb e6                	jmp    11a5d5 <sys_clock_announce+0x17>
	 * systems someone might be already running the loop.  Don't
	 * race (which will cause paralllel execution of "sequential"
	 * timeouts and confuse apps), just increment the tick count
	 * and return.
	 */
	if (IS_ENABLED(CONFIG_SMP) && (announce_remaining != 0)) {
  11a5ef:	8b 05 6b bc 00 00    	mov    0xbc6b(%rip),%eax        # 126260 <announce_remaining>
  11a5f5:	85 c0                	test   %eax,%eax
  11a5f7:	74 1e                	je     11a617 <sys_clock_announce+0x59>
		announce_remaining += ticks;
  11a5f9:	01 d8                	add    %ebx,%eax
  11a5fb:	89 05 5f bc 00 00    	mov    %eax,0xbc5f(%rip)        # 126260 <announce_remaining>
	atomic_clear(&l->locked);
  11a601:	e8 37 fe ff ff       	call   11a43d <atomic_clear.constprop.0.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11a606:	41 0f ba e4 09       	bt     $0x9,%r12d
  11a60b:	0f 83 06 01 00 00    	jae    11a717 <sys_clock_announce+0x159>
		__asm__ volatile ("sti" ::: "memory");
  11a611:	fb                   	sti    
  11a612:	e9 00 01 00 00       	jmp    11a717 <sys_clock_announce+0x159>
  11a617:	48 8b 0d d2 82 02 00 	mov    0x282d2(%rip),%rcx        # 1428f0 <timeout_list>
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
  11a61e:	89 1d 3c bc 00 00    	mov    %ebx,0xbc3c(%rip)        # 126260 <announce_remaining>
	return sys_dlist_is_empty(list) ? NULL : list->head;
  11a624:	48 81 f9 f0 28 14 00 	cmp    $0x1428f0,%rcx
  11a62b:	75 02                	jne    11a62f <sys_clock_announce+0x71>
  11a62d:	31 c9                	xor    %ecx,%ecx
  11a62f:	45 31 f6             	xor    %r14d,%r14d

	struct _timeout *t = first();

	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
  11a632:	44 89 eb             	mov    %r13d,%ebx
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
  11a635:	48 8b 15 cc bb 00 00 	mov    0xbbcc(%rip),%rdx        # 126208 <curr_tick>
	     (t != NULL) && (t->dticks <= announce_remaining);
  11a63c:	8b 05 1e bc 00 00    	mov    0xbc1e(%rip),%eax        # 126260 <announce_remaining>
  11a642:	81 e3 00 02 00 00    	and    $0x200,%ebx
  11a648:	48 85 c9             	test   %rcx,%rcx
  11a64b:	0f 84 8d 00 00 00    	je     11a6de <sys_clock_announce+0x120>
  11a651:	4c 8b 61 18          	mov    0x18(%rcx),%r12
  11a655:	48 63 f0             	movslq %eax,%rsi
  11a658:	49 39 f4             	cmp    %rsi,%r12
  11a65b:	7f 7d                	jg     11a6da <sys_clock_announce+0x11c>
		curr_tick += dt;
  11a65d:	49 63 c4             	movslq %r12d,%rax
		t->dticks = 0;
		remove_timeout(t);
  11a660:	48 89 cf             	mov    %rcx,%rdi
		curr_tick += dt;
  11a663:	48 01 d0             	add    %rdx,%rax
		t->dticks = 0;
  11a666:	31 d2                	xor    %edx,%edx
  11a668:	48 89 51 18          	mov    %rdx,0x18(%rcx)
		curr_tick += dt;
  11a66c:	48 89 05 95 bb 00 00 	mov    %rax,0xbb95(%rip)        # 126208 <curr_tick>
		remove_timeout(t);
  11a673:	e8 8f fd ff ff       	call   11a407 <remove_timeout>
  11a678:	e8 c0 fd ff ff       	call   11a43d <atomic_clear.constprop.0.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11a67d:	85 db                	test   %ebx,%ebx
  11a67f:	74 01                	je     11a682 <sys_clock_announce+0xc4>
		__asm__ volatile ("sti" ::: "memory");
  11a681:	fb                   	sti    

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
  11a682:	48 89 cf             	mov    %rcx,%rdi
  11a685:	ff 51 10             	call   *0x10(%rcx)
  11a688:	9c                   	pushf  
  11a689:	fa                   	cli    
  11a68a:	5b                   	pop    %rbx
	k.key = arch_irq_lock();
  11a68b:	41 89 dd             	mov    %ebx,%r13d
  11a68e:	ba 01 00 00 00       	mov    $0x1,%edx
  11a693:	4c 89 f0             	mov    %r14,%rax
  11a696:	f0 48 0f b1 15 61 bb 	lock cmpxchg %rdx,0xbb61(%rip)        # 126200 <timeout_lock>
  11a69d:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  11a69f:	74 07                	je     11a6a8 <sys_clock_announce+0xea>
		arch_spin_relax();
  11a6a1:	e8 0a e8 ff ff       	call   118eb0 <arch_spin_relax>
  11a6a6:	eb e6                	jmp    11a68e <sys_clock_announce+0xd0>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
  11a6a8:	8b 05 b2 bb 00 00    	mov    0xbbb2(%rip),%eax        # 126260 <announce_remaining>
	return list->head == list;
  11a6ae:	48 8b 0d 3b 82 02 00 	mov    0x2823b(%rip),%rcx        # 1428f0 <timeout_list>
  11a6b5:	44 29 e0             	sub    %r12d,%eax
  11a6b8:	89 05 a2 bb 00 00    	mov    %eax,0xbba2(%rip)        # 126260 <announce_remaining>
	return sys_dlist_is_empty(list) ? NULL : list->head;
  11a6be:	48 81 f9 f0 28 14 00 	cmp    $0x1428f0,%rcx
  11a6c5:	0f 85 67 ff ff ff    	jne    11a632 <sys_clock_announce+0x74>
		curr_tick += dt;
  11a6cb:	48 8b 15 36 bb 00 00 	mov    0xbb36(%rip),%rdx        # 126208 <curr_tick>
  11a6d2:	81 e3 00 02 00 00    	and    $0x200,%ebx
  11a6d8:	eb 04                	jmp    11a6de <sys_clock_announce+0x120>
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
  11a6da:	48 29 71 18          	sub    %rsi,0x18(%rcx)
	}

	curr_tick += announce_remaining;
  11a6de:	48 98                	cltq   
  11a6e0:	48 01 d0             	add    %rdx,%rax
  11a6e3:	48 89 05 1e bb 00 00 	mov    %rax,0xbb1e(%rip)        # 126208 <curr_tick>
	announce_remaining = 0;
  11a6ea:	31 c0                	xor    %eax,%eax
  11a6ec:	89 05 6e bb 00 00    	mov    %eax,0xbb6e(%rip)        # 126260 <announce_remaining>

	sys_clock_set_timeout(next_timeout(), false);
  11a6f2:	e8 c5 fc ff ff       	call   11a3bc <next_timeout>
  11a6f7:	31 f6                	xor    %esi,%esi
  11a6f9:	89 c7                	mov    %eax,%edi
  11a6fb:	e8 95 81 ff ff       	call   112895 <sys_clock_set_timeout>
	atomic_clear(&l->locked);
  11a700:	e8 38 fd ff ff       	call   11a43d <atomic_clear.constprop.0.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11a705:	85 db                	test   %ebx,%ebx
  11a707:	74 01                	je     11a70a <sys_clock_announce+0x14c>
		__asm__ volatile ("sti" ::: "memory");
  11a709:	fb                   	sti    
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
  11a70a:	5b                   	pop    %rbx
  11a70b:	41 5c                	pop    %r12
  11a70d:	41 5d                	pop    %r13
  11a70f:	41 5e                	pop    %r14
  11a711:	5d                   	pop    %rbp
	z_time_slice();
  11a712:	e9 72 f2 ff ff       	jmp    119989 <z_time_slice>
}
  11a717:	5b                   	pop    %rbx
  11a718:	41 5c                	pop    %r12
  11a71a:	41 5d                	pop    %r13
  11a71c:	41 5e                	pop    %r14
  11a71e:	5d                   	pop    %rbp
  11a71f:	c3                   	ret    

000000000011a720 <virt_region_free>:

	virt_region_inited = true;
}

static void virt_region_free(void *vaddr, size_t size)
{
  11a720:	55                   	push   %rbp
	size_t offset, num_bits;
	uint8_t *vaddr_u8 = (uint8_t *)vaddr;

	if (unlikely(!virt_region_inited)) {
  11a721:	80 3d 44 bb 00 00 00 	cmpb   $0x0,0xbb44(%rip)        # 12626c <virt_region_inited>
{
  11a728:	48 89 e5             	mov    %rsp,%rbp
  11a72b:	41 54                	push   %r12
  11a72d:	49 89 fc             	mov    %rdi,%r12
  11a730:	53                   	push   %rbx
  11a731:	48 89 f3             	mov    %rsi,%rbx
	if (unlikely(!virt_region_inited)) {
  11a734:	75 2a                	jne    11a760 <virt_region_free+0x40>
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  11a736:	ba 00 00 80 00       	mov    $0x800000,%edx
	num_bits /= CONFIG_MMU_PAGE_SIZE;
  11a73b:	be 00 a0 14 00       	mov    $0x14a000,%esi
	(void)sys_bitarray_set_region(&virt_region_bitmap,
  11a740:	bf 00 29 14 00       	mov    $0x142900,%edi
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  11a745:	48 81 ea 00 a0 14 00 	sub    $0x14a000,%rdx
	num_bits /= CONFIG_MMU_PAGE_SIZE;
  11a74c:	48 c1 ee 0c          	shr    $0xc,%rsi
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  11a750:	48 c1 ea 0c          	shr    $0xc,%rdx
	(void)sys_bitarray_set_region(&virt_region_bitmap,
  11a754:	e8 c9 63 ff ff       	call   110b22 <sys_bitarray_set_region>
	virt_region_inited = true;
  11a759:	c6 05 0c bb 00 00 01 	movb   $0x1,0xbb0c(%rip)        # 12626c <virt_region_inited>
#ifndef CONFIG_KERNEL_DIRECT_MAP
	__ASSERT((vaddr_u8 >= Z_VIRT_REGION_START_ADDR)
		 && ((vaddr_u8 + size - 1) < Z_VIRT_REGION_END_ADDR),
		 "invalid virtual address region %p (%zu)", vaddr_u8, size);
#endif
	if (!((vaddr_u8 >= Z_VIRT_REGION_START_ADDR)
  11a760:	49 81 fc 00 a0 14 00 	cmp    $0x14a000,%r12
  11a767:	72 31                	jb     11a79a <virt_region_free+0x7a>
	      && ((vaddr_u8 + size - 1) < Z_VIRT_REGION_END_ADDR))) {
  11a769:	49 8d 44 1c ff       	lea    -0x1(%r12,%rbx,1),%rax
	if (!((vaddr_u8 >= Z_VIRT_REGION_START_ADDR)
  11a76e:	48 3d ff ff 7f 00    	cmp    $0x7fffff,%rax
  11a774:	77 24                	ja     11a79a <virt_region_free+0x7a>
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  11a776:	ba 00 00 80 00       	mov    $0x800000,%edx
		return;
	}

	offset = virt_to_bitmap_offset(vaddr, size);
	num_bits = size / CONFIG_MMU_PAGE_SIZE;
	(void)sys_bitarray_free(&virt_region_bitmap, num_bits, offset);
  11a77b:	bf 00 29 14 00       	mov    $0x142900,%edi
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  11a780:	48 29 da             	sub    %rbx,%rdx
	num_bits = size / CONFIG_MMU_PAGE_SIZE;
  11a783:	48 c1 eb 0c          	shr    $0xc,%rbx
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  11a787:	4c 29 e2             	sub    %r12,%rdx
	num_bits = size / CONFIG_MMU_PAGE_SIZE;
  11a78a:	48 89 de             	mov    %rbx,%rsi
}
  11a78d:	5b                   	pop    %rbx
  11a78e:	41 5c                	pop    %r12
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  11a790:	48 c1 ea 0c          	shr    $0xc,%rdx
}
  11a794:	5d                   	pop    %rbp
	(void)sys_bitarray_free(&virt_region_bitmap, num_bits, offset);
  11a795:	e9 f2 61 ff ff       	jmp    11098c <sys_bitarray_free>
}
  11a79a:	5b                   	pop    %rbx
  11a79b:	41 5c                	pop    %r12
  11a79d:	5d                   	pop    %rbp
  11a79e:	c3                   	ret    

000000000011a79f <free_page_frame_list_put>:
	return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
	parent->next = child;
  11a79f:	31 c0                	xor    %eax,%eax
  11a7a1:	48 89 07             	mov    %rax,(%rdi)
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
  11a7a4:	48 8b 05 6d b9 00 00 	mov    0xb96d(%rip),%rax        # 126118 <free_page_frame_list+0x8>
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
  11a7ab:	48 85 c0             	test   %rax,%rax
  11a7ae:	75 10                	jne    11a7c0 <free_page_frame_list_put+0x21>
	list->tail = node;
  11a7b0:	48 89 3d 61 b9 00 00 	mov    %rdi,0xb961(%rip)        # 126118 <free_page_frame_list+0x8>
	list->head = node;
  11a7b7:	48 89 3d 52 b9 00 00 	mov    %rdi,0xb952(%rip)        # 126110 <free_page_frame_list>
}
  11a7be:	eb 0a                	jmp    11a7ca <free_page_frame_list_put+0x2b>
	parent->next = child;
  11a7c0:	48 89 38             	mov    %rdi,(%rax)
	list->tail = node;
  11a7c3:	48 89 3d 4e b9 00 00 	mov    %rdi,0xb94e(%rip)        # 126118 <free_page_frame_list+0x8>
		 "unavailable page put on free list");
	/* The structure is packed, which ensures that this is true */
	void *node = pf;

	sys_slist_append(&free_page_frame_list, node);
	z_free_page_count++;
  11a7ca:	48 ff 05 3f ba 00 00 	incq   0xba3f(%rip)        # 126210 <z_free_page_count>
}
  11a7d1:	c3                   	ret    

000000000011a7d2 <atomic_clear.constprop.0.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
  11a7d2:	31 c0                	xor    %eax,%eax
  11a7d4:	48 87 05 3d ba 00 00 	xchg   %rax,0xba3d(%rip)        # 126218 <z_mm_lock>
}
  11a7db:	c3                   	ret    

000000000011a7dc <virt_region_alloc>:
{
  11a7dc:	55                   	push   %rbp
  11a7dd:	48 89 e5             	mov    %rsp,%rbp
  11a7e0:	41 57                	push   %r15
  11a7e2:	41 56                	push   %r14
  11a7e4:	49 89 f6             	mov    %rsi,%r14
  11a7e7:	41 55                	push   %r13
  11a7e9:	49 89 fd             	mov    %rdi,%r13
  11a7ec:	41 54                	push   %r12
  11a7ee:	53                   	push   %rbx
  11a7ef:	48 83 ec 18          	sub    $0x18,%rsp
	if (unlikely(!virt_region_inited)) {
  11a7f3:	80 3d 72 ba 00 00 00 	cmpb   $0x0,0xba72(%rip)        # 12626c <virt_region_inited>
  11a7fa:	75 2a                	jne    11a826 <virt_region_alloc+0x4a>
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  11a7fc:	ba 00 00 80 00       	mov    $0x800000,%edx
	num_bits /= CONFIG_MMU_PAGE_SIZE;
  11a801:	be 00 a0 14 00       	mov    $0x14a000,%esi
	(void)sys_bitarray_set_region(&virt_region_bitmap,
  11a806:	bf 00 29 14 00       	mov    $0x142900,%edi
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  11a80b:	48 81 ea 00 a0 14 00 	sub    $0x14a000,%rdx
	num_bits /= CONFIG_MMU_PAGE_SIZE;
  11a812:	48 c1 ee 0c          	shr    $0xc,%rsi
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  11a816:	48 c1 ea 0c          	shr    $0xc,%rdx
	(void)sys_bitarray_set_region(&virt_region_bitmap,
  11a81a:	e8 03 63 ff ff       	call   110b22 <sys_bitarray_set_region>
	virt_region_inited = true;
  11a81f:	c6 05 46 ba 00 00 01 	movb   $0x1,0xba46(%rip)        # 12626c <virt_region_inited>
	num_bits = (size + align - CONFIG_MMU_PAGE_SIZE) / CONFIG_MMU_PAGE_SIZE;
  11a826:	4b 8d b4 35 00 f0 ff 	lea    -0x1000(%r13,%r14,1),%rsi
  11a82d:	ff 
	ret = sys_bitarray_alloc(&virt_region_bitmap, num_bits, &offset);
  11a82e:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  11a832:	bf 00 29 14 00       	mov    $0x142900,%edi
	alloc_size = num_bits * CONFIG_MMU_PAGE_SIZE;
  11a837:	49 89 f7             	mov    %rsi,%r15
	num_bits = (size + align - CONFIG_MMU_PAGE_SIZE) / CONFIG_MMU_PAGE_SIZE;
  11a83a:	48 c1 ee 0c          	shr    $0xc,%rsi
	alloc_size = num_bits * CONFIG_MMU_PAGE_SIZE;
  11a83e:	49 81 e7 00 f0 ff ff 	and    $0xfffffffffffff000,%r15
	ret = sys_bitarray_alloc(&virt_region_bitmap, num_bits, &offset);
  11a845:	e8 3d 60 ff ff       	call   110887 <sys_bitarray_alloc>
	if (ret != 0) {
  11a84a:	85 c0                	test   %eax,%eax
  11a84c:	75 6e                	jne    11a8bc <virt_region_alloc+0xe0>
	       - (offset * CONFIG_MMU_PAGE_SIZE) - size;
  11a84e:	bb 00 08 00 00       	mov    $0x800,%ebx
  11a853:	48 2b 5d c8          	sub    -0x38(%rbp),%rbx
  11a857:	48 c1 e3 0c          	shl    $0xc,%rbx
  11a85b:	48 89 df             	mov    %rbx,%rdi
  11a85e:	4c 29 ff             	sub    %r15,%rdi
	if (alloc_size > size) {
  11a861:	4d 39 fd             	cmp    %r15,%r13
  11a864:	73 39                	jae    11a89f <virt_region_alloc+0xc3>
		uintptr_t aligned_dest_addr = ROUND_UP(dest_addr, align);
  11a866:	4e 8d 64 37 ff       	lea    -0x1(%rdi,%r14,1),%r12
  11a86b:	31 d2                	xor    %edx,%edx
		virt_region_free(UINT_TO_POINTER(dest_addr),
  11a86d:	4c 89 fe             	mov    %r15,%rsi
		uintptr_t aligned_dest_addr = ROUND_UP(dest_addr, align);
  11a870:	4c 89 e0             	mov    %r12,%rax
		virt_region_free(UINT_TO_POINTER(dest_addr),
  11a873:	48 29 de             	sub    %rbx,%rsi
		uintptr_t aligned_dest_addr = ROUND_UP(dest_addr, align);
  11a876:	49 f7 f6             	div    %r14
  11a879:	49 29 d4             	sub    %rdx,%r12
		virt_region_free(UINT_TO_POINTER(dest_addr),
  11a87c:	4c 01 e6             	add    %r12,%rsi
  11a87f:	e8 9c fe ff ff       	call   11a720 <virt_region_free>
		if (((dest_addr + alloc_size) - (aligned_dest_addr + size)) > 0) {
  11a884:	4b 8d 3c 2c          	lea    (%r12,%r13,1),%rdi
  11a888:	48 39 fb             	cmp    %rdi,%rbx
  11a88b:	75 05                	jne    11a892 <virt_region_alloc+0xb6>
		dest_addr = aligned_dest_addr;
  11a88d:	4c 89 e7             	mov    %r12,%rdi
  11a890:	eb 0d                	jmp    11a89f <virt_region_alloc+0xc3>
			virt_region_free(UINT_TO_POINTER(aligned_dest_addr + size),
  11a892:	48 29 fb             	sub    %rdi,%rbx
  11a895:	48 89 de             	mov    %rbx,%rsi
  11a898:	e8 83 fe ff ff       	call   11a720 <virt_region_free>
  11a89d:	eb ee                	jmp    11a88d <virt_region_alloc+0xb1>
	return UINT_TO_POINTER(dest_addr);
  11a89f:	48 89 f8             	mov    %rdi,%rax
	if (dest_addr < POINTER_TO_UINT(Z_VIRT_REGION_START_ADDR)) {
  11a8a2:	48 81 ff 00 a0 14 00 	cmp    $0x14a000,%rdi
  11a8a9:	73 13                	jae    11a8be <virt_region_alloc+0xe2>
		(void)sys_bitarray_free(&virt_region_bitmap, size, offset);
  11a8ab:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  11a8af:	4c 89 ee             	mov    %r13,%rsi
  11a8b2:	bf 00 29 14 00       	mov    $0x142900,%edi
  11a8b7:	e8 d0 60 ff ff       	call   11098c <sys_bitarray_free>
		return NULL;
  11a8bc:	31 c0                	xor    %eax,%eax
}
  11a8be:	48 83 c4 18          	add    $0x18,%rsp
  11a8c2:	5b                   	pop    %rbx
  11a8c3:	41 5c                	pop    %r12
  11a8c5:	41 5d                	pop    %r13
  11a8c7:	41 5e                	pop    %r14
  11a8c9:	41 5f                	pop    %r15
  11a8cb:	5d                   	pop    %rbp
  11a8cc:	c3                   	ret    

000000000011a8cd <k_mem_map>:

	return 0;
}

void *k_mem_map(size_t size, uint32_t flags)
{
  11a8cd:	55                   	push   %rbp
  11a8ce:	48 89 e5             	mov    %rsp,%rbp
  11a8d1:	41 57                	push   %r15
  11a8d3:	41 56                	push   %r14
  11a8d5:	41 55                	push   %r13
  11a8d7:	49 89 fd             	mov    %rdi,%r13
  11a8da:	41 54                	push   %r12
  11a8dc:	41 89 f4             	mov    %esi,%r12d
  11a8df:	53                   	push   %rbx
  11a8e0:	48 83 ec 28          	sub    $0x28,%rsp
  11a8e4:	9c                   	pushf  
  11a8e5:	fa                   	cli    
  11a8e6:	8f 45 c0             	pop    -0x40(%rbp)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
  11a8e9:	31 db                	xor    %ebx,%ebx
  11a8eb:	ba 01 00 00 00       	mov    $0x1,%edx
  11a8f0:	48 89 d8             	mov    %rbx,%rax
  11a8f3:	f0 48 0f b1 15 1c b9 	lock cmpxchg %rdx,0xb91c(%rip)        # 126218 <z_mm_lock>
  11a8fa:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  11a8fc:	74 07                	je     11a905 <k_mem_map+0x38>
		arch_spin_relax();
  11a8fe:	e8 ad e5 ff ff       	call   118eb0 <arch_spin_relax>
  11a903:	eb e6                	jmp    11a8eb <k_mem_map+0x1e>
	key = k_spin_lock(&z_mm_lock);

	/* Need extra for the guard pages (before and after) which we
	 * won't map.
	 */
	total_size = size + CONFIG_MMU_PAGE_SIZE * 2;
  11a905:	49 8d bd 00 20 00 00 	lea    0x2000(%r13),%rdi

	dst = virt_region_alloc(total_size, CONFIG_MMU_PAGE_SIZE);
  11a90c:	be 00 10 00 00       	mov    $0x1000,%esi
  11a911:	e8 c6 fe ff ff       	call   11a7dc <virt_region_alloc>
  11a916:	48 89 c3             	mov    %rax,%rbx
	if (dst == NULL) {
  11a919:	48 85 c0             	test   %rax,%rax
  11a91c:	75 07                	jne    11a925 <k_mem_map+0x58>
	dst = virt_region_alloc(total_size, CONFIG_MMU_PAGE_SIZE);
  11a91e:	31 db                	xor    %ebx,%ebx
  11a920:	e9 dc 00 00 00       	jmp    11aa01 <k_mem_map+0x134>
	}

	/* Unmap both guard pages to make sure accessing them
	 * will generate fault.
	 */
	arch_mem_unmap(dst, CONFIG_MMU_PAGE_SIZE);
  11a925:	48 89 c7             	mov    %rax,%rdi
  11a928:	be 00 10 00 00       	mov    $0x1000,%esi
	arch_mem_unmap(dst + CONFIG_MMU_PAGE_SIZE + size,
  11a92d:	4e 8d ac 2b 00 10 00 	lea    0x1000(%rbx,%r13,1),%r13
  11a934:	00 
		       CONFIG_MMU_PAGE_SIZE);

	/* Skip over the "before" guard page in returned address. */
	dst += CONFIG_MMU_PAGE_SIZE;
  11a935:	48 81 c3 00 10 00 00 	add    $0x1000,%rbx
	arch_mem_unmap(dst, CONFIG_MMU_PAGE_SIZE);
  11a93c:	e8 2b 6f ff ff       	call   11186c <arch_mem_unmap>
	arch_mem_unmap(dst + CONFIG_MMU_PAGE_SIZE + size,
  11a941:	4c 89 ef             	mov    %r13,%rdi

	VIRT_FOREACH(dst, size, pos) {
  11a944:	49 89 de             	mov    %rbx,%r14
	arch_mem_unmap(dst + CONFIG_MMU_PAGE_SIZE + size,
  11a947:	be 00 10 00 00       	mov    $0x1000,%esi
  11a94c:	e8 1b 6f ff ff       	call   11186c <arch_mem_unmap>
	return (uintptr_t)((pf - z_page_frames) * CONFIG_MMU_PAGE_SIZE) +
  11a951:	49 bf 39 8e e3 38 8e 	movabs $0x8e38e38e38e38e39,%r15
  11a958:	e3 38 8e 
	VIRT_FOREACH(dst, size, pos) {
  11a95b:	4d 39 ee             	cmp    %r13,%r14
  11a95e:	0f 83 9d 00 00 00    	jae    11aa01 <k_mem_map+0x134>
	bool lock = (flags & K_MEM_MAP_LOCK) != 0U;
  11a964:	44 89 e0             	mov    %r12d,%eax
	return list->head;
  11a967:	4c 8b 05 a2 b7 00 00 	mov    0xb7a2(%rip),%r8        # 126110 <free_page_frame_list>
  11a96e:	25 00 00 02 00       	and    $0x20000,%eax
  11a973:	89 45 cc             	mov    %eax,-0x34(%rbp)
	bool uninit = (flags & K_MEM_MAP_UNINIT) != 0U;
  11a976:	44 89 e0             	mov    %r12d,%eax
  11a979:	25 00 00 01 00       	and    $0x10000,%eax
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
  11a97e:	4d 85 c0             	test   %r8,%r8
  11a981:	74 9b                	je     11a91e <k_mem_map+0x51>
	return node->next;
  11a983:	49 8b 10             	mov    (%r8),%rdx
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
  11a986:	4c 3b 05 8b b7 00 00 	cmp    0xb78b(%rip),%r8        # 126118 <free_page_frame_list+0x8>
	list->head = node;
  11a98d:	48 89 15 7c b7 00 00 	mov    %rdx,0xb77c(%rip)        # 126110 <free_page_frame_list>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
  11a994:	75 07                	jne    11a99d <k_mem_map+0xd0>
	list->tail = node;
  11a996:	48 89 15 7b b7 00 00 	mov    %rdx,0xb77b(%rip)        # 126118 <free_page_frame_list+0x8>
  11a99d:	4c 89 c6             	mov    %r8,%rsi
	arch_mem_map(addr, phys, CONFIG_MMU_PAGE_SIZE, flags | K_MEM_CACHE_WB);
  11a9a0:	44 89 e1             	mov    %r12d,%ecx
  11a9a3:	ba 00 10 00 00       	mov    $0x1000,%edx
  11a9a8:	4c 89 f7             	mov    %r14,%rdi
  11a9ab:	48 81 ee c0 3c 12 00 	sub    $0x123cc0,%rsi
		z_free_page_count--;
  11a9b2:	48 ff 0d 57 b8 00 00 	decq   0xb857(%rip)        # 126210 <z_free_page_count>
  11a9b9:	49 0f af f7          	imul   %r15,%rsi
  11a9bd:	89 45 c8             	mov    %eax,-0x38(%rbp)
  11a9c0:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  11a9c4:	48 c1 e6 0c          	shl    $0xc,%rsi
	arch_mem_map(addr, phys, CONFIG_MMU_PAGE_SIZE, flags | K_MEM_CACHE_WB);
  11a9c8:	e8 3e 6e ff ff       	call   11180b <arch_mem_map>
	if (lock) {
  11a9cd:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  11a9d1:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  11a9d5:	8b 45 c8             	mov    -0x38(%rbp),%eax
  11a9d8:	74 05                	je     11a9df <k_mem_map+0x112>
		pf->flags |= Z_PAGE_FRAME_PINNED;
  11a9da:	41 80 48 08 01       	orb    $0x1,0x8(%r8)
	pf->flags |= Z_PAGE_FRAME_MAPPED;
  11a9df:	41 80 48 08 04       	orb    $0x4,0x8(%r8)
	pf->addr = addr;
  11a9e4:	4d 89 30             	mov    %r14,(%r8)
	if (!uninit) {
  11a9e7:	85 c0                	test   %eax,%eax
  11a9e9:	75 0a                	jne    11a9f5 <k_mem_map+0x128>
  11a9eb:	b9 00 04 00 00       	mov    $0x400,%ecx
  11a9f0:	4c 89 f7             	mov    %r14,%rdi
  11a9f3:	f3 ab                	rep stos %eax,%es:(%rdi)
	VIRT_FOREACH(dst, size, pos) {
  11a9f5:	49 81 c6 00 10 00 00 	add    $0x1000,%r14
  11a9fc:	e9 5a ff ff ff       	jmp    11a95b <k_mem_map+0x8e>
	atomic_clear(&l->locked);
  11aa01:	e8 cc fd ff ff       	call   11a7d2 <atomic_clear.constprop.0.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11aa06:	0f ba 65 c0 09       	btl    $0x9,-0x40(%rbp)
  11aa0b:	73 01                	jae    11aa0e <k_mem_map+0x141>
		__asm__ volatile ("sti" ::: "memory");
  11aa0d:	fb                   	sti    
		}
	}
out:
	k_spin_unlock(&z_mm_lock, key);
	return dst;
}
  11aa0e:	48 83 c4 28          	add    $0x28,%rsp
  11aa12:	48 89 d8             	mov    %rbx,%rax
  11aa15:	5b                   	pop    %rbx
  11aa16:	41 5c                	pop    %r12
  11aa18:	41 5d                	pop    %r13
  11aa1a:	41 5e                	pop    %r14
  11aa1c:	41 5f                	pop    %r15
  11aa1e:	5d                   	pop    %rbp
  11aa1f:	c3                   	ret    

000000000011aa20 <k_mem_free_get>:
out:
	k_spin_unlock(&z_mm_lock, key);
}

size_t k_mem_free_get(void)
{
  11aa20:	55                   	push   %rbp
  11aa21:	48 89 e5             	mov    %rsp,%rbp
  11aa24:	41 54                	push   %r12
  11aa26:	53                   	push   %rbx
  11aa27:	9c                   	pushf  
  11aa28:	fa                   	cli    
  11aa29:	5b                   	pop    %rbx
  11aa2a:	45 31 e4             	xor    %r12d,%r12d
  11aa2d:	ba 01 00 00 00       	mov    $0x1,%edx
  11aa32:	4c 89 e0             	mov    %r12,%rax
  11aa35:	f0 48 0f b1 15 da b7 	lock cmpxchg %rdx,0xb7da(%rip)        # 126218 <z_mm_lock>
  11aa3c:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  11aa3e:	74 07                	je     11aa47 <k_mem_free_get+0x27>
		arch_spin_relax();
  11aa40:	e8 6b e4 ff ff       	call   118eb0 <arch_spin_relax>
  11aa45:	eb e6                	jmp    11aa2d <k_mem_free_get+0xd>
		ret = z_free_page_count - CONFIG_DEMAND_PAGING_PAGE_FRAMES_RESERVE;
	} else {
		ret = 0;
	}
#else
	ret = z_free_page_count;
  11aa47:	48 8b 15 c2 b7 00 00 	mov    0xb7c2(%rip),%rdx        # 126210 <z_free_page_count>
	atomic_clear(&l->locked);
  11aa4e:	e8 7f fd ff ff       	call   11a7d2 <atomic_clear.constprop.0.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11aa53:	0f ba e3 09          	bt     $0x9,%ebx
  11aa57:	73 01                	jae    11aa5a <k_mem_free_get+0x3a>
		__asm__ volatile ("sti" ::: "memory");
  11aa59:	fb                   	sti    
#endif
	k_spin_unlock(&z_mm_lock, key);

	return ret * (size_t)CONFIG_MMU_PAGE_SIZE;
  11aa5a:	48 89 d0             	mov    %rdx,%rax
}
  11aa5d:	5b                   	pop    %rbx
  11aa5e:	41 5c                	pop    %r12
	return ret * (size_t)CONFIG_MMU_PAGE_SIZE;
  11aa60:	48 c1 e0 0c          	shl    $0xc,%rax
}
  11aa64:	5d                   	pop    %rbp
  11aa65:	c3                   	ret    

000000000011aa66 <arch_virt_region_align>:
{
	ARG_UNUSED(phys);
	ARG_UNUSED(size);

	return CONFIG_MMU_PAGE_SIZE;
}
  11aa66:	b8 00 10 00 00       	mov    $0x1000,%eax
  11aa6b:	c3                   	ret    

000000000011aa6c <k_mem_region_align>:
 * Miscellaneous
 */

size_t k_mem_region_align(uintptr_t *aligned_addr, size_t *aligned_size,
			  uintptr_t addr, size_t size, size_t align)
{
  11aa6c:	48 89 d0             	mov    %rdx,%rax
  11aa6f:	31 d2                	xor    %edx,%edx
  11aa71:	49 f7 f0             	div    %r8
	size_t addr_offset;

	/* The actual mapped region must be page-aligned. Round down the
	 * physical address and pad the region size appropriately
	 */
	*aligned_addr = ROUND_DOWN(addr, align);
  11aa74:	49 0f af c0          	imul   %r8,%rax
  11aa78:	49 89 d1             	mov    %rdx,%r9
  11aa7b:	48 89 07             	mov    %rax,(%rdi)
	addr_offset = addr - *aligned_addr;
	*aligned_size = ROUND_UP(size + addr_offset, align);
  11aa7e:	49 8d 44 08 ff       	lea    -0x1(%r8,%rcx,1),%rax
  11aa83:	48 01 d0             	add    %rdx,%rax
  11aa86:	31 d2                	xor    %edx,%edx
  11aa88:	49 f7 f0             	div    %r8
  11aa8b:	49 0f af c0          	imul   %r8,%rax
  11aa8f:	48 89 06             	mov    %rax,(%rsi)

	return addr_offset;
}
  11aa92:	4c 89 c8             	mov    %r9,%rax
  11aa95:	c3                   	ret    

000000000011aa96 <z_phys_map>:
{
  11aa96:	55                   	push   %rbp
	addr_offset = k_mem_region_align(&aligned_phys, &aligned_size,
  11aa97:	41 b8 00 10 00 00    	mov    $0x1000,%r8d
{
  11aa9d:	48 89 e5             	mov    %rsp,%rbp
  11aaa0:	41 57                	push   %r15
  11aaa2:	41 56                	push   %r14
  11aaa4:	41 55                	push   %r13
  11aaa6:	49 89 fd             	mov    %rdi,%r13
	addr_offset = k_mem_region_align(&aligned_phys, &aligned_size,
  11aaa9:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
{
  11aaad:	41 54                	push   %r12
  11aaaf:	53                   	push   %rbx
  11aab0:	48 83 ec 28          	sub    $0x28,%rsp
  11aab4:	89 4d bc             	mov    %ecx,-0x44(%rbp)
	addr_offset = k_mem_region_align(&aligned_phys, &aligned_size,
  11aab7:	48 89 d1             	mov    %rdx,%rcx
  11aaba:	48 89 f2             	mov    %rsi,%rdx
  11aabd:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
  11aac1:	e8 a6 ff ff ff       	call   11aa6c <k_mem_region_align>
	align_boundary = arch_virt_region_align(aligned_phys, aligned_size);
  11aac6:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  11aaca:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
	addr_offset = k_mem_region_align(&aligned_phys, &aligned_size,
  11aace:	49 89 c6             	mov    %rax,%r14
	align_boundary = arch_virt_region_align(aligned_phys, aligned_size);
  11aad1:	31 c0                	xor    %eax,%eax
  11aad3:	e8 8e ff ff ff       	call   11aa66 <arch_virt_region_align>
  11aad8:	49 89 c4             	mov    %rax,%r12
  11aadb:	9c                   	pushf  
  11aadc:	fa                   	cli    
  11aadd:	41 5f                	pop    %r15
  11aadf:	31 db                	xor    %ebx,%ebx
  11aae1:	ba 01 00 00 00       	mov    $0x1,%edx
  11aae6:	48 89 d8             	mov    %rbx,%rax
  11aae9:	f0 48 0f b1 15 26 b7 	lock cmpxchg %rdx,0xb726(%rip)        # 126218 <z_mm_lock>
  11aaf0:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  11aaf2:	74 07                	je     11aafb <z_phys_map+0x65>
		arch_spin_relax();
  11aaf4:	e8 b7 e3 ff ff       	call   118eb0 <arch_spin_relax>
  11aaf9:	eb e6                	jmp    11aae1 <z_phys_map+0x4b>
			num_bits = aligned_size / CONFIG_MMU_PAGE_SIZE;
  11aafb:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
	if (flags & K_MEM_DIRECT_MAP) {
  11aaff:	f6 45 bc 40          	testb  $0x40,-0x44(%rbp)
  11ab03:	74 39                	je     11ab3e <z_phys_map+0xa8>
		dest_addr = (uint8_t *)aligned_phys;
  11ab05:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
		if (!(dest_addr + aligned_size < Z_VIRT_RAM_START ||
  11ab09:	49 81 fc 00 00 80 00 	cmp    $0x800000,%r12
  11ab10:	77 3f                	ja     11ab51 <z_phys_map+0xbb>
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  11ab12:	49 8d 04 1c          	lea    (%r12,%rbx,1),%rax
  11ab16:	ba 00 00 80 00       	mov    $0x800000,%edx
			num_bits = aligned_size / CONFIG_MMU_PAGE_SIZE;
  11ab1b:	48 89 de             	mov    %rbx,%rsi
			if (sys_bitarray_test_and_set_region(
  11ab1e:	b9 01 00 00 00       	mov    $0x1,%ecx
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  11ab23:	48 29 c2             	sub    %rax,%rdx
			num_bits = aligned_size / CONFIG_MMU_PAGE_SIZE;
  11ab26:	48 c1 ee 0c          	shr    $0xc,%rsi
			if (sys_bitarray_test_and_set_region(
  11ab2a:	bf 00 29 14 00       	mov    $0x142900,%edi
		- POINTER_TO_UINT(vaddr) - size) / CONFIG_MMU_PAGE_SIZE;
  11ab2f:	48 c1 ea 0c          	shr    $0xc,%rdx
			if (sys_bitarray_test_and_set_region(
  11ab33:	e8 16 5f ff ff       	call   110a4e <sys_bitarray_test_and_set_region>
  11ab38:	85 c0                	test   %eax,%eax
  11ab3a:	74 15                	je     11ab51 <z_phys_map+0xbb>
  11ab3c:	eb 49                	jmp    11ab87 <z_phys_map+0xf1>
		dest_addr = virt_region_alloc(aligned_size, align_boundary);
  11ab3e:	4c 89 e6             	mov    %r12,%rsi
  11ab41:	48 89 df             	mov    %rbx,%rdi
  11ab44:	e8 93 fc ff ff       	call   11a7dc <virt_region_alloc>
  11ab49:	49 89 c4             	mov    %rax,%r12
		if (!dest_addr) {
  11ab4c:	48 85 c0             	test   %rax,%rax
  11ab4f:	74 36                	je     11ab87 <z_phys_map+0xf1>
	arch_mem_map(dest_addr, aligned_phys, aligned_size, flags);
  11ab51:	8b 4d bc             	mov    -0x44(%rbp),%ecx
  11ab54:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  11ab58:	48 89 da             	mov    %rbx,%rdx
  11ab5b:	4c 89 e7             	mov    %r12,%rdi
  11ab5e:	e8 a8 6c ff ff       	call   11180b <arch_mem_map>
	atomic_clear(&l->locked);
  11ab63:	e8 6a fc ff ff       	call   11a7d2 <atomic_clear.constprop.0.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11ab68:	41 0f ba e7 09       	bt     $0x9,%r15d
  11ab6d:	73 01                	jae    11ab70 <z_phys_map+0xda>
		__asm__ volatile ("sti" ::: "memory");
  11ab6f:	fb                   	sti    
	*virt_ptr = dest_addr + addr_offset;
  11ab70:	4f 8d 04 34          	lea    (%r12,%r14,1),%r8
  11ab74:	4d 89 45 00          	mov    %r8,0x0(%r13)
}
  11ab78:	48 83 c4 28          	add    $0x28,%rsp
  11ab7c:	5b                   	pop    %rbx
  11ab7d:	41 5c                	pop    %r12
  11ab7f:	41 5d                	pop    %r13
  11ab81:	41 5e                	pop    %r14
  11ab83:	41 5f                	pop    %r15
  11ab85:	5d                   	pop    %rbp
  11ab86:	c3                   	ret    
	k_panic();
  11ab87:	48 c7 c0 04 00 00 00 	mov    $0x4,%rax
  11ab8e:	cd 20                	int    $0x20

000000000011ab90 <z_mem_manage_init>:
	}
}
#endif /* CONFIG_LINKER_USE_BOOT_SECTION) || CONFIG_LINKER_USE_PINNED_SECTION */

void z_mem_manage_init(void)
{
  11ab90:	55                   	push   %rbp
  11ab91:	48 89 e5             	mov    %rsp,%rbp
  11ab94:	41 54                	push   %r12
  11ab96:	53                   	push   %rbx
  11ab97:	9c                   	pushf  
  11ab98:	fa                   	cli    
  11ab99:	5b                   	pop    %rbx
  11ab9a:	45 31 e4             	xor    %r12d,%r12d
  11ab9d:	ba 01 00 00 00       	mov    $0x1,%edx
  11aba2:	4c 89 e0             	mov    %r12,%rax
  11aba5:	f0 48 0f b1 15 6a b6 	lock cmpxchg %rdx,0xb66a(%rip)        # 126218 <z_mm_lock>
  11abac:	00 00 
	while (!atomic_cas(&l->locked, 0, 1)) {
  11abae:	74 07                	je     11abb7 <z_mem_manage_init+0x27>
		arch_spin_relax();
  11abb0:	e8 fb e2 ff ff       	call   118eb0 <arch_spin_relax>
  11abb5:	eb e6                	jmp    11ab9d <z_mem_manage_init+0xd>
	list->tail = NULL;
  11abb7:	31 c0                	xor    %eax,%eax
  11abb9:	48 89 05 50 b5 00 00 	mov    %rax,0xb550(%rip)        # 126110 <free_page_frame_list>
  11abc0:	48 89 05 51 b5 00 00 	mov    %rax,0xb551(%rip)        # 126118 <free_page_frame_list+0x8>

#ifdef CONFIG_ARCH_HAS_RESERVED_PAGE_FRAMES
	/* If some page frames are unavailable for use as memory, arch
	 * code will mark Z_PAGE_FRAME_RESERVED in their flags
	 */
	arch_reserved_pages_update();
  11abc7:	e8 b6 6c ff ff       	call   111882 <arch_reserved_pages_update>

#ifdef CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT
	/* All pages composing the Zephyr image are mapped at boot in a
	 * predictable way. This can change at runtime.
	 */
	VIRT_FOREACH(Z_KERNEL_VIRT_START, Z_KERNEL_VIRT_SIZE, addr)
  11abcc:	b8 00 00 10 00       	mov    $0x100000,%eax
  11abd1:	48 3d 00 a0 14 00    	cmp    $0x14a000,%rax
  11abd7:	73 21                	jae    11abfa <z_mem_manage_init+0x6a>
	return &z_page_frames[(phys - Z_PHYS_RAM_START) /
  11abd9:	48 89 c2             	mov    %rax,%rdx
  11abdc:	48 c1 ea 0c          	shr    $0xc,%rdx
	pf->flags |= Z_PAGE_FRAME_MAPPED;
  11abe0:	48 8d 14 d2          	lea    (%rdx,%rdx,8),%rdx
	pf->addr = addr;
  11abe4:	48 89 82 c0 3c 12 00 	mov    %rax,0x123cc0(%rdx)
	VIRT_FOREACH(Z_KERNEL_VIRT_START, Z_KERNEL_VIRT_SIZE, addr)
  11abeb:	48 05 00 10 00 00    	add    $0x1000,%rax
		 * code/data pages which are pinned in memory and
		 * may not be evicted. This will contain critical CPU data
		 * structures, and any code used to perform page fault
		 * handling, page-ins, etc.
		 */
		pf->flags |= Z_PAGE_FRAME_PINNED;
  11abf1:	80 8a c8 3c 12 00 05 	orb    $0x5,0x123cc8(%rdx)
	VIRT_FOREACH(Z_KERNEL_VIRT_START, Z_KERNEL_VIRT_SIZE, addr)
  11abf8:	eb d7                	jmp    11abd1 <z_mem_manage_init+0x41>
#endif

	/* Any remaining pages that aren't mapped, reserved, or pinned get
	 * added to the free pages list
	 */
	Z_PAGE_FRAME_FOREACH(phys, pf) {
  11abfa:	ba c0 3c 12 00       	mov    $0x123cc0,%edx
		if (z_page_frame_is_available(pf)) {
  11abff:	80 7a 08 00          	cmpb   $0x0,0x8(%rdx)
  11ac03:	75 08                	jne    11ac0d <z_mem_manage_init+0x7d>
			free_page_frame_list_put(pf);
  11ac05:	48 89 d7             	mov    %rdx,%rdi
  11ac08:	e8 92 fb ff ff       	call   11a79f <free_page_frame_list_put>
	Z_PAGE_FRAME_FOREACH(phys, pf) {
  11ac0d:	48 83 c2 09          	add    $0x9,%rdx
  11ac11:	48 81 fa c0 60 12 00 	cmp    $0x1260c0,%rdx
  11ac18:	75 e5                	jne    11abff <z_mem_manage_init+0x6f>
	atomic_clear(&l->locked);
  11ac1a:	e8 b3 fb ff ff       	call   11a7d2 <atomic_clear.constprop.0.isra.0>
	if ((key & 0x00000200U) != 0U) { /* 'IF' bit */
  11ac1f:	0f ba e3 09          	bt     $0x9,%ebx
  11ac23:	73 01                	jae    11ac26 <z_mem_manage_init+0x96>
		__asm__ volatile ("sti" ::: "memory");
  11ac25:	fb                   	sti    
	 * and the BSS pages can be brought into physical
	 * memory to be cleared.
	 */
	z_bss_zero();
#endif
}
  11ac26:	5b                   	pop    %rbx
  11ac27:	41 5c                	pop    %r12
  11ac29:	5d                   	pop    %rbp
  11ac2a:	c3                   	ret    

000000000011ac2b <z_mem_manage_boot_finish>:
	/* At the end of boot process, unpin the boot sections
	 * as they don't need to be in memory all the time anymore.
	 */
	mark_linker_section_pinned(lnkr_boot_start, lnkr_boot_end, false);
#endif
}
  11ac2b:	c3                   	ret    

000000000011ac2c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
  11ac2c:	bf ea 02 12 00       	mov    $0x1202ea,%edi
  11ac31:	31 c0                	xor    %eax,%eax
  11ac33:	e9 2b 59 ff ff       	jmp    110563 <printk>

000000000011ac38 <_ZdlPv>:
  11ac38:	e9 53 88 fe ff       	jmp    103490 <free>

000000000011ac3d <_ZdaPv>:
  11ac3d:	e9 f6 ff ff ff       	jmp    11ac38 <_ZdlPv>

000000000011ac42 <_Znwm>:
  11ac42:	55                   	push   %rbp
  11ac43:	48 85 ff             	test   %rdi,%rdi
  11ac46:	b8 01 00 00 00       	mov    $0x1,%eax
  11ac4b:	48 0f 45 c7          	cmovne %rdi,%rax
  11ac4f:	48 89 e5             	mov    %rsp,%rbp
  11ac52:	53                   	push   %rbx
  11ac53:	48 89 c3             	mov    %rax,%rbx
  11ac56:	51                   	push   %rcx
  11ac57:	48 89 df             	mov    %rbx,%rdi
  11ac5a:	e8 21 88 fe ff       	call   103480 <malloc>
  11ac5f:	48 85 c0             	test   %rax,%rax
  11ac62:	75 31                	jne    11ac95 <_Znwm+0x53>
  11ac64:	e8 3a 0a 00 00       	call   11b6a3 <_ZSt15get_new_handlerv>
  11ac69:	48 85 c0             	test   %rax,%rax
  11ac6c:	75 23                	jne    11ac91 <_Znwm+0x4f>
  11ac6e:	bf 08 00 00 00       	mov    $0x8,%edi
  11ac73:	e8 2b 00 00 00       	call   11aca3 <__cxa_allocate_exception>
  11ac78:	ba e8 fc 10 00       	mov    $0x10fce8,%edx
  11ac7d:	be d0 d6 11 00       	mov    $0x11d6d0,%esi
  11ac82:	48 c7 00 f8 d6 11 00 	movq   $0x11d6f8,(%rax)
  11ac89:	48 89 c7             	mov    %rax,%rdi
  11ac8c:	e8 c5 09 00 00       	call   11b656 <__cxa_throw>
  11ac91:	ff d0                	call   *%rax
  11ac93:	eb c2                	jmp    11ac57 <_Znwm+0x15>
  11ac95:	5a                   	pop    %rdx
  11ac96:	5b                   	pop    %rbx
  11ac97:	5d                   	pop    %rbp
  11ac98:	c3                   	ret    

000000000011ac99 <_Znam>:
  11ac99:	e9 a4 ff ff ff       	jmp    11ac42 <_Znwm>

000000000011ac9e <_ZdlPvm>:
  11ac9e:	e9 95 ff ff ff       	jmp    11ac38 <_ZdlPv>

000000000011aca3 <__cxa_allocate_exception>:
  11aca3:	55                   	push   %rbp
  11aca4:	48 89 e5             	mov    %rsp,%rbp
  11aca7:	53                   	push   %rbx
  11aca8:	48 8d 9f 80 00 00 00 	lea    0x80(%rdi),%rbx
  11acaf:	51                   	push   %rcx
  11acb0:	48 89 df             	mov    %rbx,%rdi
  11acb3:	e8 c8 87 fe ff       	call   103480 <malloc>
  11acb8:	48 89 c2             	mov    %rax,%rdx
  11acbb:	48 85 c0             	test   %rax,%rax
  11acbe:	75 15                	jne    11acd5 <__cxa_allocate_exception+0x32>
  11acc0:	48 89 df             	mov    %rbx,%rdi
  11acc3:	e8 e0 50 ff ff       	call   10fda8 <_ZN12_GLOBAL__N_14pool8allocateEm.constprop.0>
  11acc8:	48 89 c2             	mov    %rax,%rdx
  11accb:	48 85 c0             	test   %rax,%rax
  11acce:	75 05                	jne    11acd5 <__cxa_allocate_exception+0x32>
  11acd0:	e8 cb 08 00 00       	call   11b5a0 <_ZSt9terminatev>
  11acd5:	31 c0                	xor    %eax,%eax
  11acd7:	48 89 d7             	mov    %rdx,%rdi
  11acda:	b9 20 00 00 00       	mov    $0x20,%ecx
  11acdf:	f3 ab                	rep stos %eax,%es:(%rdi)
  11ace1:	48 8d 82 80 00 00 00 	lea    0x80(%rdx),%rax
  11ace8:	5a                   	pop    %rdx
  11ace9:	5b                   	pop    %rbx
  11acea:	5d                   	pop    %rbp
  11aceb:	c3                   	ret    

000000000011acec <__cxa_free_exception>:
  11acec:	48 8b 05 dd b3 00 00 	mov    0xb3dd(%rip),%rax        # 1260d0 <_ZN12_GLOBAL__N_114emergency_poolE+0x10>
  11acf3:	48 83 c7 80          	add    $0xffffffffffffff80,%rdi
  11acf7:	48 39 f8             	cmp    %rdi,%rax
  11acfa:	73 11                	jae    11ad0d <__cxa_free_exception+0x21>
  11acfc:	48 03 05 d5 b3 00 00 	add    0xb3d5(%rip),%rax        # 1260d8 <_ZN12_GLOBAL__N_114emergency_poolE+0x18>
  11ad03:	48 39 c7             	cmp    %rax,%rdi
  11ad06:	73 05                	jae    11ad0d <__cxa_free_exception+0x21>
  11ad08:	e9 07 50 ff ff       	jmp    10fd14 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
  11ad0d:	e9 7e 87 fe ff       	jmp    103490 <free>

000000000011ad12 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
  11ad12:	55                   	push   %rbp
  11ad13:	bf c0 11 00 00       	mov    $0x11c0,%edi
  11ad18:	48 c7 05 b5 b3 00 00 	movq   $0x11c0,0xb3b5(%rip)        # 1260d8 <_ZN12_GLOBAL__N_114emergency_poolE+0x18>
  11ad1f:	c0 11 00 00 
  11ad23:	48 89 e5             	mov    %rsp,%rbp
  11ad26:	e8 55 87 fe ff       	call   103480 <malloc>
  11ad2b:	48 89 05 9e b3 00 00 	mov    %rax,0xb39e(%rip)        # 1260d0 <_ZN12_GLOBAL__N_114emergency_poolE+0x10>
  11ad32:	48 85 c0             	test   %rax,%rax
  11ad35:	75 12                	jne    11ad49 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x37>
  11ad37:	31 c9                	xor    %ecx,%ecx
  11ad39:	48 89 0d 98 b3 00 00 	mov    %rcx,0xb398(%rip)        # 1260d8 <_ZN12_GLOBAL__N_114emergency_poolE+0x18>
  11ad40:	48 89 0d 81 b3 00 00 	mov    %rcx,0xb381(%rip)        # 1260c8 <_ZN12_GLOBAL__N_114emergency_poolE+0x8>
  11ad47:	eb 14                	jmp    11ad5d <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x4b>
  11ad49:	31 d2                	xor    %edx,%edx
  11ad4b:	48 89 05 76 b3 00 00 	mov    %rax,0xb376(%rip)        # 1260c8 <_ZN12_GLOBAL__N_114emergency_poolE+0x8>
  11ad52:	48 c7 00 c0 11 00 00 	movq   $0x11c0,(%rax)
  11ad59:	48 89 50 08          	mov    %rdx,0x8(%rax)
  11ad5d:	5d                   	pop    %rbp
  11ad5e:	c3                   	ret    

000000000011ad5f <__cxa_begin_catch>:
  11ad5f:	55                   	push   %rbp
  11ad60:	48 89 e5             	mov    %rsp,%rbp
  11ad63:	53                   	push   %rbx
  11ad64:	48 89 fb             	mov    %rdi,%rbx
  11ad67:	51                   	push   %rcx
  11ad68:	e8 57 00 00 00       	call   11adc4 <__cxa_get_globals>
  11ad6d:	48 8d 73 b0          	lea    -0x50(%rbx),%rsi
  11ad71:	48 b9 00 d5 d4 bc bc 	movabs $0xb8b1aabcbcd4d500,%rcx
  11ad78:	aa b1 b8 
  11ad7b:	48 03 0b             	add    (%rbx),%rcx
  11ad7e:	48 8b 10             	mov    (%rax),%rdx
  11ad81:	48 83 f9 01          	cmp    $0x1,%rcx
  11ad85:	76 0f                	jbe    11ad96 <__cxa_begin_catch+0x37>
  11ad87:	48 85 d2             	test   %rdx,%rdx
  11ad8a:	74 05                	je     11ad91 <__cxa_begin_catch+0x32>
  11ad8c:	e8 0f 08 00 00       	call   11b5a0 <_ZSt9terminatev>
  11ad91:	48 89 30             	mov    %rsi,(%rax)
  11ad94:	eb 27                	jmp    11adbd <__cxa_begin_catch+0x5e>
  11ad96:	8b 7b d8             	mov    -0x28(%rbx),%edi
  11ad99:	8d 4f 01             	lea    0x1(%rdi),%ecx
  11ad9c:	85 ff                	test   %edi,%edi
  11ad9e:	79 07                	jns    11ada7 <__cxa_begin_catch+0x48>
  11ada0:	b9 01 00 00 00       	mov    $0x1,%ecx
  11ada5:	29 f9                	sub    %edi,%ecx
  11ada7:	89 4b d8             	mov    %ecx,-0x28(%rbx)
  11adaa:	ff 48 08             	decl   0x8(%rax)
  11adad:	48 39 f2             	cmp    %rsi,%rdx
  11adb0:	74 07                	je     11adb9 <__cxa_begin_catch+0x5a>
  11adb2:	48 89 53 d0          	mov    %rdx,-0x30(%rbx)
  11adb6:	48 89 30             	mov    %rsi,(%rax)
  11adb9:	48 8b 53 f8          	mov    -0x8(%rbx),%rdx
  11adbd:	48 89 d0             	mov    %rdx,%rax
  11adc0:	5a                   	pop    %rdx
  11adc1:	5b                   	pop    %rbx
  11adc2:	5d                   	pop    %rbp
  11adc3:	c3                   	ret    

000000000011adc4 <__cxa_get_globals>:
  11adc4:	b8 20 61 12 00       	mov    $0x126120,%eax
  11adc9:	c3                   	ret    

000000000011adca <_GLOBAL__sub_I___cxa_get_globals_fast>:
  11adca:	ba 70 61 12 00       	mov    $0x126170,%edx
  11adcf:	be 20 61 12 00       	mov    $0x126120,%esi
  11add4:	bf 18 fe 10 00       	mov    $0x10fe18,%edi
  11add9:	e9 16 57 ff ff       	jmp    1104f4 <__cxa_atexit>

000000000011adde <_ZL12read_uleb128PKhPm>:
  11adde:	48 89 f8             	mov    %rdi,%rax
  11ade1:	31 d2                	xor    %edx,%edx
  11ade3:	31 c9                	xor    %ecx,%ecx
  11ade5:	44 8a 00             	mov    (%rax),%r8b
  11ade8:	48 ff c0             	inc    %rax
  11adeb:	4c 89 c7             	mov    %r8,%rdi
  11adee:	83 e7 7f             	and    $0x7f,%edi
  11adf1:	48 d3 e7             	shl    %cl,%rdi
  11adf4:	83 c1 07             	add    $0x7,%ecx
  11adf7:	48 09 fa             	or     %rdi,%rdx
  11adfa:	45 84 c0             	test   %r8b,%r8b
  11adfd:	78 e6                	js     11ade5 <_ZL12read_uleb128PKhPm+0x7>
  11adff:	48 89 16             	mov    %rdx,(%rsi)
  11ae02:	c3                   	ret    

000000000011ae03 <_ZL12read_sleb128PKhPl>:
  11ae03:	48 89 f8             	mov    %rdi,%rax
  11ae06:	31 d2                	xor    %edx,%edx
  11ae08:	31 c9                	xor    %ecx,%ecx
  11ae0a:	40 8a 38             	mov    (%rax),%dil
  11ae0d:	48 ff c0             	inc    %rax
  11ae10:	49 89 f8             	mov    %rdi,%r8
  11ae13:	41 83 e0 7f          	and    $0x7f,%r8d
  11ae17:	49 d3 e0             	shl    %cl,%r8
  11ae1a:	83 c1 07             	add    $0x7,%ecx
  11ae1d:	4c 09 c2             	or     %r8,%rdx
  11ae20:	40 84 ff             	test   %dil,%dil
  11ae23:	78 e5                	js     11ae0a <_ZL12read_sleb128PKhPl+0x7>
  11ae25:	83 f9 3f             	cmp    $0x3f,%ecx
  11ae28:	77 10                	ja     11ae3a <_ZL12read_sleb128PKhPl+0x37>
  11ae2a:	40 80 e7 40          	and    $0x40,%dil
  11ae2e:	74 0a                	je     11ae3a <_ZL12read_sleb128PKhPl+0x37>
  11ae30:	48 83 cf ff          	or     $0xffffffffffffffff,%rdi
  11ae34:	48 d3 e7             	shl    %cl,%rdi
  11ae37:	48 09 fa             	or     %rdi,%rdx
  11ae3a:	48 89 16             	mov    %rdx,(%rsi)
  11ae3d:	c3                   	ret    

000000000011ae3e <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
  11ae3e:	55                   	push   %rbp
  11ae3f:	48 89 e5             	mov    %rsp,%rbp
  11ae42:	41 55                	push   %r13
  11ae44:	49 89 fd             	mov    %rdi,%r13
  11ae47:	48 89 f7             	mov    %rsi,%rdi
  11ae4a:	41 54                	push   %r12
  11ae4c:	49 89 d4             	mov    %rdx,%r12
  11ae4f:	48 83 ec 20          	sub    $0x20,%rsp
  11ae53:	48 8b 02             	mov    (%rdx),%rax
  11ae56:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  11ae5a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  11ae5e:	48 8b 06             	mov    (%rsi),%rax
  11ae61:	ff 50 10             	call   *0x10(%rax)
  11ae64:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  11ae68:	84 c0                	test   %al,%al
  11ae6a:	74 0b                	je     11ae77 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x39>
  11ae6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11ae70:	48 8b 00             	mov    (%rax),%rax
  11ae73:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  11ae77:	49 8b 45 00          	mov    0x0(%r13),%rax
  11ae7b:	b9 01 00 00 00       	mov    $0x1,%ecx
  11ae80:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
  11ae84:	4c 89 ef             	mov    %r13,%rdi
  11ae87:	ff 50 20             	call   *0x20(%rax)
  11ae8a:	84 c0                	test   %al,%al
  11ae8c:	74 08                	je     11ae96 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x58>
  11ae8e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  11ae92:	49 89 14 24          	mov    %rdx,(%r12)
  11ae96:	48 83 c4 20          	add    $0x20,%rsp
  11ae9a:	41 5c                	pop    %r12
  11ae9c:	41 5d                	pop    %r13
  11ae9e:	5d                   	pop    %rbp
  11ae9f:	c3                   	ret    

000000000011aea0 <_ZL28read_encoded_value_with_basehmPKhPm>:
  11aea0:	49 89 d1             	mov    %rdx,%r9
  11aea3:	49 89 ca             	mov    %rcx,%r10
  11aea6:	40 80 ff 50          	cmp    $0x50,%dil
  11aeaa:	75 13                	jne    11aebf <_ZL28read_encoded_value_with_basehmPKhPm+0x1f>
  11aeac:	48 8d 42 07          	lea    0x7(%rdx),%rax
  11aeb0:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
  11aeb4:	48 8b 10             	mov    (%rax),%rdx
  11aeb7:	48 83 c0 08          	add    $0x8,%rax
  11aebb:	48 89 11             	mov    %rdx,(%rcx)
  11aebe:	c3                   	ret    
  11aebf:	55                   	push   %rbp
  11aec0:	89 f8                	mov    %edi,%eax
  11aec2:	41 89 fb             	mov    %edi,%r11d
  11aec5:	83 e0 0f             	and    $0xf,%eax
  11aec8:	48 89 e5             	mov    %rsp,%rbp
  11aecb:	53                   	push   %rbx
  11aecc:	48 83 ec 18          	sub    $0x18,%rsp
  11aed0:	3c 0c                	cmp    $0xc,%al
  11aed2:	77 52                	ja     11af26 <_ZL28read_encoded_value_with_basehmPKhPm+0x86>
  11aed4:	0f b6 c0             	movzbl %al,%eax
  11aed7:	48 89 f3             	mov    %rsi,%rbx
  11aeda:	ff 24 c5 50 d7 11 00 	jmp    *0x11d750(,%rax,8)
  11aee1:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  11aee5:	48 89 d7             	mov    %rdx,%rdi
  11aee8:	e8 f1 fe ff ff       	call   11adde <_ZL12read_uleb128PKhPm>
  11aeed:	eb 0c                	jmp    11aefb <_ZL28read_encoded_value_with_basehmPKhPm+0x5b>
  11aeef:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  11aef3:	48 89 d7             	mov    %rdx,%rdi
  11aef6:	e8 08 ff ff ff       	call   11ae03 <_ZL12read_sleb128PKhPl>
  11aefb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  11aeff:	eb 2a                	jmp    11af2b <_ZL28read_encoded_value_with_basehmPKhPm+0x8b>
  11af01:	0f b7 12             	movzwl (%rdx),%edx
  11af04:	eb 08                	jmp    11af0e <_ZL28read_encoded_value_with_basehmPKhPm+0x6e>
  11af06:	8b 12                	mov    (%rdx),%edx
  11af08:	eb 0d                	jmp    11af17 <_ZL28read_encoded_value_with_basehmPKhPm+0x77>
  11af0a:	48 0f bf 12          	movswq (%rdx),%rdx
  11af0e:	49 8d 41 02          	lea    0x2(%r9),%rax
  11af12:	eb 17                	jmp    11af2b <_ZL28read_encoded_value_with_basehmPKhPm+0x8b>
  11af14:	48 63 12             	movslq (%rdx),%rdx
  11af17:	49 8d 41 04          	lea    0x4(%r9),%rax
  11af1b:	eb 0e                	jmp    11af2b <_ZL28read_encoded_value_with_basehmPKhPm+0x8b>
  11af1d:	48 8b 12             	mov    (%rdx),%rdx
  11af20:	49 8d 41 08          	lea    0x8(%r9),%rax
  11af24:	eb 05                	jmp    11af2b <_ZL28read_encoded_value_with_basehmPKhPm+0x8b>
  11af26:	e8 99 6e ff ff       	call   111dc4 <abort>
  11af2b:	48 85 d2             	test   %rdx,%rdx
  11af2e:	74 18                	je     11af48 <_ZL28read_encoded_value_with_basehmPKhPm+0xa8>
  11af30:	44 89 d9             	mov    %r11d,%ecx
  11af33:	83 e1 70             	and    $0x70,%ecx
  11af36:	80 f9 10             	cmp    $0x10,%cl
  11af39:	49 0f 44 d9          	cmove  %r9,%rbx
  11af3d:	48 01 da             	add    %rbx,%rdx
  11af40:	45 84 db             	test   %r11b,%r11b
  11af43:	79 03                	jns    11af48 <_ZL28read_encoded_value_with_basehmPKhPm+0xa8>
  11af45:	48 8b 12             	mov    (%rdx),%rdx
  11af48:	49 89 12             	mov    %rdx,(%r10)
  11af4b:	48 83 c4 18          	add    $0x18,%rsp
  11af4f:	5b                   	pop    %rbx
  11af50:	5d                   	pop    %rbp
  11af51:	c3                   	ret    

000000000011af52 <_ZL15get_ttype_entryP16lsda_header_infom>:
  11af52:	55                   	push   %rbp
  11af53:	48 89 e5             	mov    %rsp,%rbp
  11af56:	48 83 ec 10          	sub    $0x10,%rsp
  11af5a:	44 0f b6 47 28       	movzbl 0x28(%rdi),%r8d
  11af5f:	41 80 f8 ff          	cmp    $0xff,%r8b
  11af63:	74 2f                	je     11af94 <_ZL15get_ttype_entryP16lsda_header_infom+0x42>
  11af65:	44 89 c2             	mov    %r8d,%edx
  11af68:	83 e2 07             	and    $0x7,%edx
  11af6b:	80 fa 02             	cmp    $0x2,%dl
  11af6e:	74 28                	je     11af98 <_ZL15get_ttype_entryP16lsda_header_infom+0x46>
  11af70:	77 09                	ja     11af7b <_ZL15get_ttype_entryP16lsda_header_infom+0x29>
  11af72:	b8 08 00 00 00       	mov    $0x8,%eax
  11af77:	84 d2                	test   %dl,%dl
  11af79:	eb 12                	jmp    11af8d <_ZL15get_ttype_entryP16lsda_header_infom+0x3b>
  11af7b:	b8 04 00 00 00       	mov    $0x4,%eax
  11af80:	80 fa 03             	cmp    $0x3,%dl
  11af83:	74 18                	je     11af9d <_ZL15get_ttype_entryP16lsda_header_infom+0x4b>
  11af85:	b8 08 00 00 00       	mov    $0x8,%eax
  11af8a:	80 fa 04             	cmp    $0x4,%dl
  11af8d:	74 0e                	je     11af9d <_ZL15get_ttype_entryP16lsda_header_infom+0x4b>
  11af8f:	e8 30 6e ff ff       	call   111dc4 <abort>
  11af94:	31 c0                	xor    %eax,%eax
  11af96:	eb 05                	jmp    11af9d <_ZL15get_ttype_entryP16lsda_header_infom+0x4b>
  11af98:	b8 02 00 00 00       	mov    $0x2,%eax
  11af9d:	48 0f af c6          	imul   %rsi,%rax
  11afa1:	48 8b 57 18          	mov    0x18(%rdi),%rdx
  11afa5:	48 8b 77 10          	mov    0x10(%rdi),%rsi
  11afa9:	48 8d 4d f8          	lea    -0x8(%rbp),%rcx
  11afad:	44 89 c7             	mov    %r8d,%edi
  11afb0:	48 29 c2             	sub    %rax,%rdx
  11afb3:	e8 e8 fe ff ff       	call   11aea0 <_ZL28read_encoded_value_with_basehmPKhPm>
  11afb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  11afbc:	c9                   	leave  
  11afbd:	c3                   	ret    

000000000011afbe <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
  11afbe:	55                   	push   %rbp
  11afbf:	48 f7 d1             	not    %rcx
  11afc2:	48 89 e5             	mov    %rsp,%rbp
  11afc5:	41 55                	push   %r13
  11afc7:	49 89 f5             	mov    %rsi,%r13
  11afca:	41 54                	push   %r12
  11afcc:	49 89 fc             	mov    %rdi,%r12
  11afcf:	53                   	push   %rbx
  11afd0:	48 83 ec 28          	sub    $0x28,%rsp
  11afd4:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  11afd8:	48 8b 5f 18          	mov    0x18(%rdi),%rbx
  11afdc:	48 01 cb             	add    %rcx,%rbx
  11afdf:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  11afe3:	48 89 df             	mov    %rbx,%rdi
  11afe6:	e8 f3 fd ff ff       	call   11adde <_ZL12read_uleb128PKhPm>
  11afeb:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  11afef:	48 89 c3             	mov    %rax,%rbx
  11aff2:	48 85 f6             	test   %rsi,%rsi
  11aff5:	74 1d                	je     11b014 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x56>
  11aff7:	4c 89 e7             	mov    %r12,%rdi
  11affa:	e8 53 ff ff ff       	call   11af52 <_ZL15get_ttype_entryP16lsda_header_infom>
  11afff:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  11b003:	4c 89 ee             	mov    %r13,%rsi
  11b006:	48 89 c7             	mov    %rax,%rdi
  11b009:	e8 30 fe ff ff       	call   11ae3e <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
  11b00e:	84 c0                	test   %al,%al
  11b010:	74 cd                	je     11afdf <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x21>
  11b012:	eb 02                	jmp    11b016 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x58>
  11b014:	31 c0                	xor    %eax,%eax
  11b016:	48 83 c4 28          	add    $0x28,%rsp
  11b01a:	5b                   	pop    %rbx
  11b01b:	41 5c                	pop    %r12
  11b01d:	41 5d                	pop    %r13
  11b01f:	5d                   	pop    %rbp
  11b020:	c3                   	ret    

000000000011b021 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
  11b021:	40 80 ff ff          	cmp    $0xff,%dil
  11b025:	74 44                	je     11b06b <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4a>
  11b027:	83 e7 70             	and    $0x70,%edi
  11b02a:	40 80 ff 30          	cmp    $0x30,%dil
  11b02e:	74 22                	je     11b052 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x31>
  11b030:	77 0a                	ja     11b03c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1b>
  11b032:	40 80 ff 20          	cmp    $0x20,%dil
  11b036:	74 12                	je     11b04a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x29>
  11b038:	76 31                	jbe    11b06b <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4a>
  11b03a:	eb 26                	jmp    11b062 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x41>
  11b03c:	40 80 ff 40          	cmp    $0x40,%dil
  11b040:	74 18                	je     11b05a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x39>
  11b042:	40 80 ff 50          	cmp    $0x50,%dil
  11b046:	74 23                	je     11b06b <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4a>
  11b048:	eb 18                	jmp    11b062 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x41>
  11b04a:	48 89 f7             	mov    %rsi,%rdi
  11b04d:	e9 5e 67 fe ff       	jmp    1017b0 <_Unwind_GetTextRelBase>
  11b052:	48 89 f7             	mov    %rsi,%rdi
  11b055:	e9 4e 67 fe ff       	jmp    1017a8 <_Unwind_GetDataRelBase>
  11b05a:	48 89 f7             	mov    %rsi,%rdi
  11b05d:	e9 1f 67 fe ff       	jmp    101781 <_Unwind_GetRegionStart>
  11b062:	55                   	push   %rbp
  11b063:	48 89 e5             	mov    %rsp,%rbp
  11b066:	e8 59 6d ff ff       	call   111dc4 <abort>
  11b06b:	31 c0                	xor    %eax,%eax
  11b06d:	c3                   	ret    

000000000011b06e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPm>:
  11b06e:	55                   	push   %rbp
  11b06f:	48 89 e5             	mov    %rsp,%rbp
  11b072:	53                   	push   %rbx
  11b073:	40 0f b6 de          	movzbl %sil,%ebx
  11b077:	48 89 fe             	mov    %rdi,%rsi
  11b07a:	89 df                	mov    %ebx,%edi
  11b07c:	48 83 ec 18          	sub    $0x18,%rsp
  11b080:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  11b084:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  11b088:	e8 94 ff ff ff       	call   11b021 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
  11b08d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  11b091:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  11b095:	89 df                	mov    %ebx,%edi
  11b097:	48 83 c4 18          	add    $0x18,%rsp
  11b09b:	48 89 c6             	mov    %rax,%rsi
  11b09e:	5b                   	pop    %rbx
  11b09f:	5d                   	pop    %rbp
  11b0a0:	e9 fb fd ff ff       	jmp    11aea0 <_ZL28read_encoded_value_with_basehmPKhPm>

000000000011b0a5 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
  11b0a5:	55                   	push   %rbp
  11b0a6:	31 c0                	xor    %eax,%eax
  11b0a8:	48 89 e5             	mov    %rsp,%rbp
  11b0ab:	41 55                	push   %r13
  11b0ad:	49 89 f5             	mov    %rsi,%r13
  11b0b0:	53                   	push   %rbx
  11b0b1:	48 89 d3             	mov    %rdx,%rbx
  11b0b4:	48 83 ec 20          	sub    $0x20,%rsp
  11b0b8:	48 85 ff             	test   %rdi,%rdi
  11b0bb:	74 0d                	je     11b0ca <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x25>
  11b0bd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11b0c1:	e8 bb 66 fe ff       	call   101781 <_Unwind_GetRegionStart>
  11b0c6:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  11b0ca:	48 89 03             	mov    %rax,(%rbx)
  11b0cd:	41 0f b6 75 00       	movzbl 0x0(%r13),%esi
  11b0d2:	49 8d 55 01          	lea    0x1(%r13),%rdx
  11b0d6:	40 80 fe ff          	cmp    $0xff,%sil
  11b0da:	74 0e                	je     11b0ea <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x45>
  11b0dc:	48 8d 4b 08          	lea    0x8(%rbx),%rcx
  11b0e0:	e8 89 ff ff ff       	call   11b06e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPm>
  11b0e5:	48 89 c2             	mov    %rax,%rdx
  11b0e8:	eb 04                	jmp    11b0ee <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x49>
  11b0ea:	48 89 43 08          	mov    %rax,0x8(%rbx)
  11b0ee:	48 8d 7a 01          	lea    0x1(%rdx),%rdi
  11b0f2:	8a 12                	mov    (%rdx),%dl
  11b0f4:	31 c0                	xor    %eax,%eax
  11b0f6:	88 53 28             	mov    %dl,0x28(%rbx)
  11b0f9:	fe c2                	inc    %dl
  11b0fb:	74 13                	je     11b110 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x6b>
  11b0fd:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  11b101:	e8 d8 fc ff ff       	call   11adde <_ZL12read_uleb128PKhPm>
  11b106:	48 89 c7             	mov    %rax,%rdi
  11b109:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  11b10d:	48 01 f8             	add    %rdi,%rax
  11b110:	48 89 43 18          	mov    %rax,0x18(%rbx)
  11b114:	8a 17                	mov    (%rdi),%dl
  11b116:	48 8d 47 01          	lea    0x1(%rdi),%rax
  11b11a:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  11b11e:	48 89 c7             	mov    %rax,%rdi
  11b121:	88 53 29             	mov    %dl,0x29(%rbx)
  11b124:	e8 b5 fc ff ff       	call   11adde <_ZL12read_uleb128PKhPm>
  11b129:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  11b12d:	48 01 c2             	add    %rax,%rdx
  11b130:	48 89 53 20          	mov    %rdx,0x20(%rbx)
  11b134:	48 83 c4 20          	add    $0x20,%rsp
  11b138:	5b                   	pop    %rbx
  11b139:	41 5d                	pop    %r13
  11b13b:	5d                   	pop    %rbp
  11b13c:	c3                   	ret    

000000000011b13d <__gxx_personality_v0>:
  11b13d:	55                   	push   %rbp
  11b13e:	45 31 c9             	xor    %r9d,%r9d
  11b141:	48 89 e5             	mov    %rsp,%rbp
  11b144:	41 57                	push   %r15
  11b146:	41 56                	push   %r14
  11b148:	41 55                	push   %r13
  11b14a:	41 54                	push   %r12
  11b14c:	53                   	push   %rbx
  11b14d:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  11b154:	4c 89 85 68 ff ff ff 	mov    %r8,-0x98(%rbp)
  11b15b:	45 31 c0             	xor    %r8d,%r8d
  11b15e:	ff cf                	dec    %edi
  11b160:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  11b167:	44 89 8d 74 ff ff ff 	mov    %r9d,-0x8c(%rbp)
  11b16e:	0f 85 b4 03 00 00    	jne    11b528 <__gxx_personality_v0+0x3eb>
  11b174:	48 b8 00 d5 d4 bc bc 	movabs $0xb8b1aabcbcd4d500,%rax
  11b17b:	aa b1 b8 
  11b17e:	41 89 f5             	mov    %esi,%r13d
  11b181:	48 89 cb             	mov    %rcx,%rbx
  11b184:	48 01 d0             	add    %rdx,%rax
  11b187:	48 83 f8 01          	cmp    $0x1,%rax
  11b18b:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  11b192:	0f 96 85 4e ff ff ff 	setbe  -0xb2(%rbp)
  11b199:	83 fe 06             	cmp    $0x6,%esi
  11b19c:	0f 94 c0             	sete   %al
  11b19f:	22 85 4e ff ff ff    	and    -0xb2(%rbp),%al
  11b1a5:	88 85 4f ff ff ff    	mov    %al,-0xb1(%rbp)
  11b1ab:	74 1d                	je     11b1ca <__gxx_personality_v0+0x8d>
  11b1ad:	4c 8b 61 f0          	mov    -0x10(%rcx),%r12
  11b1b1:	44 8b 79 dc          	mov    -0x24(%rcx),%r15d
  11b1b5:	4c 8b 71 e8          	mov    -0x18(%rcx),%r14
  11b1b9:	4d 85 e4             	test   %r12,%r12
  11b1bc:	0f 85 ec 02 00 00    	jne    11b4ae <__gxx_personality_v0+0x371>
  11b1c2:	48 89 df             	mov    %rbx,%rdi
  11b1c5:	e8 e1 04 00 00       	call   11b6ab <__cxa_call_terminate>
  11b1ca:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  11b1d1:	e8 a3 65 fe ff       	call   101779 <_Unwind_GetLanguageSpecificData>
  11b1d6:	49 89 c6             	mov    %rax,%r14
  11b1d9:	48 85 c0             	test   %rax,%rax
  11b1dc:	0f 84 43 02 00 00    	je     11b425 <__gxx_personality_v0+0x2e8>
  11b1e2:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  11b1e9:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  11b1ed:	48 89 c6             	mov    %rax,%rsi
  11b1f0:	e8 b0 fe ff ff       	call   11b0a5 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  11b1f5:	0f b6 7d c8          	movzbl -0x38(%rbp),%edi
  11b1f9:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
  11b200:	49 89 c7             	mov    %rax,%r15
  11b203:	e8 19 fe ff ff       	call   11b021 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
  11b208:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  11b20f:	48 8d b5 74 ff ff ff 	lea    -0x8c(%rbp),%rsi
  11b216:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  11b21a:	e8 3a 65 fe ff       	call   101759 <_Unwind_GetIPInfo>
  11b21f:	83 bd 74 ff ff ff 00 	cmpl   $0x0,-0x8c(%rbp)
  11b226:	49 89 c4             	mov    %rax,%r12
  11b229:	75 7a                	jne    11b2a5 <__gxx_personality_v0+0x168>
  11b22b:	49 ff cc             	dec    %r12
  11b22e:	eb 75                	jmp    11b2a5 <__gxx_personality_v0+0x168>
  11b230:	0f b6 45 c9          	movzbl -0x37(%rbp),%eax
  11b234:	4c 89 fa             	mov    %r15,%rdx
  11b237:	31 ff                	xor    %edi,%edi
  11b239:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
  11b23d:	4c 89 8d 58 ff ff ff 	mov    %r9,-0xa8(%rbp)
  11b244:	89 c6                	mov    %eax,%esi
  11b246:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  11b24c:	e8 1d fe ff ff       	call   11b06e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPm>
  11b251:	8b b5 60 ff ff ff    	mov    -0xa0(%rbp),%esi
  11b257:	31 ff                	xor    %edi,%edi
  11b259:	48 8d 4d 88          	lea    -0x78(%rbp),%rcx
  11b25d:	48 89 c2             	mov    %rax,%rdx
  11b260:	e8 09 fe ff ff       	call   11b06e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPm>
  11b265:	8b b5 60 ff ff ff    	mov    -0xa0(%rbp),%esi
  11b26b:	31 ff                	xor    %edi,%edi
  11b26d:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  11b271:	48 89 c2             	mov    %rax,%rdx
  11b274:	e8 f5 fd ff ff       	call   11b06e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPm>
  11b279:	48 8d 75 98          	lea    -0x68(%rbp),%rsi
  11b27d:	48 89 c7             	mov    %rax,%rdi
  11b280:	e8 59 fb ff ff       	call   11adde <_ZL12read_uleb128PKhPm>
  11b285:	4c 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%r9
  11b28c:	49 89 c7             	mov    %rax,%r15
  11b28f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  11b293:	48 03 45 a0          	add    -0x60(%rbp),%rax
  11b297:	49 39 c4             	cmp    %rax,%r12
  11b29a:	72 4f                	jb     11b2eb <__gxx_personality_v0+0x1ae>
  11b29c:	48 03 45 88          	add    -0x78(%rbp),%rax
  11b2a0:	49 39 c4             	cmp    %rax,%r12
  11b2a3:	72 0e                	jb     11b2b3 <__gxx_personality_v0+0x176>
  11b2a5:	4c 8b 4d c0          	mov    -0x40(%rbp),%r9
  11b2a9:	4d 39 cf             	cmp    %r9,%r15
  11b2ac:	72 82                	jb     11b230 <__gxx_personality_v0+0xf3>
  11b2ae:	e9 7c 01 00 00       	jmp    11b42f <__gxx_personality_v0+0x2f2>
  11b2b3:	4c 8b 65 90          	mov    -0x70(%rbp),%r12
  11b2b7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  11b2bb:	4d 85 e4             	test   %r12,%r12
  11b2be:	0f 84 61 01 00 00    	je     11b425 <__gxx_personality_v0+0x2e8>
  11b2c4:	4c 03 65 a8          	add    -0x58(%rbp),%r12
  11b2c8:	48 85 c0             	test   %rax,%rax
  11b2cb:	74 16                	je     11b2e3 <__gxx_personality_v0+0x1a6>
  11b2cd:	49 8d 44 01 ff       	lea    -0x1(%r9,%rax,1),%rax
  11b2d2:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  11b2d9:	4d 85 e4             	test   %r12,%r12
  11b2dc:	75 12                	jne    11b2f0 <__gxx_personality_v0+0x1b3>
  11b2de:	e9 42 01 00 00       	jmp    11b425 <__gxx_personality_v0+0x2e8>
  11b2e3:	4d 85 e4             	test   %r12,%r12
  11b2e6:	e9 34 01 00 00       	jmp    11b41f <__gxx_personality_v0+0x2e2>
  11b2eb:	4d 89 cf             	mov    %r9,%r15
  11b2ee:	eb b5                	jmp    11b2a5 <__gxx_personality_v0+0x168>
  11b2f0:	44 89 e8             	mov    %r13d,%eax
  11b2f3:	41 bf 30 d7 11 00    	mov    $0x11d730,%r15d
  11b2f9:	83 e0 08             	and    $0x8,%eax
  11b2fc:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
  11b302:	75 28                	jne    11b32c <__gxx_personality_v0+0x1ef>
  11b304:	48 83 bd 50 ff ff ff 	cmpq   $0x1,-0xb0(%rbp)
  11b30b:	01 
  11b30c:	41 bf 40 d7 11 00    	mov    $0x11d740,%r15d
  11b312:	77 18                	ja     11b32c <__gxx_personality_v0+0x1ef>
  11b314:	48 8d 43 20          	lea    0x20(%rbx),%rax
  11b318:	f6 03 01             	testb  $0x1,(%rbx)
  11b31b:	74 04                	je     11b321 <__gxx_personality_v0+0x1e4>
  11b31d:	48 8b 43 b0          	mov    -0x50(%rbx),%rax
  11b321:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  11b328:	4c 8b 78 90          	mov    -0x70(%rax),%r15
  11b32c:	48 8b bd 58 ff ff ff 	mov    -0xa8(%rbp),%rdi
  11b333:	48 8d 75 88          	lea    -0x78(%rbp),%rsi
  11b337:	e8 c7 fa ff ff       	call   11ae03 <_ZL12read_sleb128PKhPl>
  11b33c:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  11b340:	48 89 c7             	mov    %rax,%rdi
  11b343:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  11b34a:	e8 b4 fa ff ff       	call   11ae03 <_ZL12read_sleb128PKhPl>
  11b34f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  11b353:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  11b35a:	48 85 c0             	test   %rax,%rax
  11b35d:	0f 84 8f 00 00 00    	je     11b3f2 <__gxx_personality_v0+0x2b5>
  11b363:	7e 35                	jle    11b39a <__gxx_personality_v0+0x25d>
  11b365:	48 8d 7d a0          	lea    -0x60(%rbp),%rdi
  11b369:	48 89 c6             	mov    %rax,%rsi
  11b36c:	e8 e1 fb ff ff       	call   11af52 <_ZL15get_ttype_entryP16lsda_header_infom>
  11b371:	48 89 c7             	mov    %rax,%rdi
  11b374:	48 85 c0             	test   %rax,%rax
  11b377:	0f 84 bf 01 00 00    	je     11b53c <__gxx_personality_v0+0x3ff>
  11b37d:	4d 85 ff             	test   %r15,%r15
  11b380:	74 77                	je     11b3f9 <__gxx_personality_v0+0x2bc>
  11b382:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  11b389:	4c 89 fe             	mov    %r15,%rsi
  11b38c:	e8 ad fa ff ff       	call   11ae3e <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
  11b391:	84 c0                	test   %al,%al
  11b393:	74 64                	je     11b3f9 <__gxx_personality_v0+0x2bc>
  11b395:	e9 a2 01 00 00       	jmp    11b53c <__gxx_personality_v0+0x3ff>
  11b39a:	83 bd 48 ff ff ff 00 	cmpl   $0x0,-0xb8(%rbp)
  11b3a1:	0f 94 c0             	sete   %al
  11b3a4:	84 85 4e ff ff ff    	test   %al,-0xb2(%rbp)
  11b3aa:	74 23                	je     11b3cf <__gxx_personality_v0+0x292>
  11b3ac:	4d 85 ff             	test   %r15,%r15
  11b3af:	74 1e                	je     11b3cf <__gxx_personality_v0+0x292>
  11b3b1:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  11b3b8:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  11b3bf:	4c 89 fe             	mov    %r15,%rsi
  11b3c2:	48 8d 7d a0          	lea    -0x60(%rbp),%rdi
  11b3c6:	e8 f3 fb ff ff       	call   11afbe <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
  11b3cb:	84 c0                	test   %al,%al
  11b3cd:	eb 1c                	jmp    11b3eb <__gxx_personality_v0+0x2ae>
  11b3cf:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
  11b3d6:	48 8d 75 98          	lea    -0x68(%rbp),%rsi
  11b3da:	48 f7 d7             	not    %rdi
  11b3dd:	48 03 7d b8          	add    -0x48(%rbp),%rdi
  11b3e1:	e8 f8 f9 ff ff       	call   11adde <_ZL12read_uleb128PKhPm>
  11b3e6:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
  11b3eb:	75 0c                	jne    11b3f9 <__gxx_personality_v0+0x2bc>
  11b3ed:	e9 4a 01 00 00       	jmp    11b53c <__gxx_personality_v0+0x3ff>
  11b3f2:	c6 85 4f ff ff ff 01 	movb   $0x1,-0xb1(%rbp)
  11b3f9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  11b3fd:	48 85 c0             	test   %rax,%rax
  11b400:	74 16                	je     11b418 <__gxx_personality_v0+0x2db>
  11b402:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
  11b409:	48 01 c1             	add    %rax,%rcx
  11b40c:	48 89 8d 58 ff ff ff 	mov    %rcx,-0xa8(%rbp)
  11b413:	e9 14 ff ff ff       	jmp    11b32c <__gxx_personality_v0+0x1ef>
  11b418:	80 bd 4f ff ff ff 00 	cmpb   $0x0,-0xb1(%rbp)
  11b41f:	0f 85 32 01 00 00    	jne    11b557 <__gxx_personality_v0+0x41a>
  11b425:	b8 08 00 00 00       	mov    $0x8,%eax
  11b42a:	e9 3f 01 00 00       	jmp    11b56e <__gxx_personality_v0+0x431>
  11b42f:	45 89 ef             	mov    %r13d,%r15d
  11b432:	41 83 e7 01          	and    $0x1,%r15d
  11b436:	74 45                	je     11b47d <__gxx_personality_v0+0x340>
  11b438:	31 c0                	xor    %eax,%eax
  11b43a:	45 31 ff             	xor    %r15d,%r15d
  11b43d:	45 31 e4             	xor    %r12d,%r12d
  11b440:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  11b447:	48 83 bd 50 ff ff ff 	cmpq   $0x1,-0xb0(%rbp)
  11b44e:	01 
  11b44f:	77 22                	ja     11b473 <__gxx_personality_v0+0x336>
  11b451:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  11b458:	44 89 7b dc          	mov    %r15d,-0x24(%rbx)
  11b45c:	4c 89 73 e8          	mov    %r14,-0x18(%rbx)
  11b460:	48 89 43 e0          	mov    %rax,-0x20(%rbx)
  11b464:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  11b46b:	4c 89 63 f0          	mov    %r12,-0x10(%rbx)
  11b46f:	48 89 43 f8          	mov    %rax,-0x8(%rbx)
  11b473:	b8 06 00 00 00       	mov    $0x6,%eax
  11b478:	e9 f1 00 00 00       	jmp    11b56e <__gxx_personality_v0+0x431>
  11b47d:	45 31 e4             	xor    %r12d,%r12d
  11b480:	b8 01 00 00 00       	mov    $0x1,%eax
  11b485:	41 80 e5 08          	and    $0x8,%r13b
  11b489:	75 0a                	jne    11b495 <__gxx_personality_v0+0x358>
  11b48b:	48 83 bd 50 ff ff ff 	cmpq   $0x1,-0xb0(%rbp)
  11b492:	01 
  11b493:	76 12                	jbe    11b4a7 <__gxx_personality_v0+0x36a>
  11b495:	ff c8                	dec    %eax
  11b497:	0f 84 9a 00 00 00    	je     11b537 <__gxx_personality_v0+0x3fa>
  11b49d:	45 85 ff             	test   %r15d,%r15d
  11b4a0:	79 4b                	jns    11b4ed <__gxx_personality_v0+0x3b0>
  11b4a2:	e8 1d 01 00 00       	call   11b5c4 <_ZSt10unexpectedv>
  11b4a7:	ff c8                	dec    %eax
  11b4a9:	e9 0e fd ff ff       	jmp    11b1bc <__gxx_personality_v0+0x7f>
  11b4ae:	45 85 ff             	test   %r15d,%r15d
  11b4b1:	79 3a                	jns    11b4ed <__gxx_personality_v0+0x3b0>
  11b4b3:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  11b4ba:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  11b4be:	4c 89 f6             	mov    %r14,%rsi
  11b4c1:	e8 df fb ff ff       	call   11b0a5 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  11b4c6:	44 0f b6 6d c8       	movzbl -0x38(%rbp),%r13d
  11b4cb:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
  11b4d2:	44 89 ef             	mov    %r13d,%edi
  11b4d5:	e8 47 fb ff ff       	call   11b021 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
  11b4da:	48 8b b5 68 ff ff ff 	mov    -0x98(%rbp),%rsi
  11b4e1:	44 89 ef             	mov    %r13d,%edi
  11b4e4:	e8 38 fb ff ff       	call   11b021 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
  11b4e9:	48 89 43 f0          	mov    %rax,-0x10(%rbx)
  11b4ed:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  11b4f4:	48 89 da             	mov    %rbx,%rdx
  11b4f7:	31 f6                	xor    %esi,%esi
  11b4f9:	e8 17 62 fe ff       	call   101715 <_Unwind_SetGR>
  11b4fe:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  11b505:	49 63 d7             	movslq %r15d,%rdx
  11b508:	be 01 00 00 00       	mov    $0x1,%esi
  11b50d:	e8 03 62 fe ff       	call   101715 <_Unwind_SetGR>
  11b512:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
  11b519:	4c 89 e6             	mov    %r12,%rsi
  11b51c:	e8 50 62 fe ff       	call   101771 <_Unwind_SetIP>
  11b521:	b8 07 00 00 00       	mov    $0x7,%eax
  11b526:	eb 46                	jmp    11b56e <__gxx_personality_v0+0x431>
  11b528:	b8 03 00 00 00       	mov    $0x3,%eax
  11b52d:	eb 3f                	jmp    11b56e <__gxx_personality_v0+0x431>
  11b52f:	48 89 c7             	mov    %rax,%rdi
  11b532:	e8 28 f8 ff ff       	call   11ad5f <__cxa_begin_catch>
  11b537:	e8 64 00 00 00       	call   11b5a0 <_ZSt9terminatev>
  11b53c:	44 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%r15d
  11b543:	b8 03 00 00 00       	mov    $0x3,%eax
  11b548:	41 f6 c5 01          	test   $0x1,%r13b
  11b54c:	0f 84 33 ff ff ff    	je     11b485 <__gxx_personality_v0+0x348>
  11b552:	e9 f0 fe ff ff       	jmp    11b447 <__gxx_personality_v0+0x30a>
  11b557:	41 f6 c5 01          	test   $0x1,%r13b
  11b55b:	0f 85 c4 fe ff ff    	jne    11b425 <__gxx_personality_v0+0x2e8>
  11b561:	45 31 ff             	xor    %r15d,%r15d
  11b564:	b8 02 00 00 00       	mov    $0x2,%eax
  11b569:	e9 17 ff ff ff       	jmp    11b485 <__gxx_personality_v0+0x348>
  11b56e:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  11b575:	5b                   	pop    %rbx
  11b576:	41 5c                	pop    %r12
  11b578:	41 5d                	pop    %r13
  11b57a:	41 5e                	pop    %r14
  11b57c:	41 5f                	pop    %r15
  11b57e:	5d                   	pop    %rbp
  11b57f:	c3                   	ret    

000000000011b580 <_ZN10__cxxabiv111__terminateEPFvvE>:
  11b580:	55                   	push   %rbp
  11b581:	48 89 e5             	mov    %rsp,%rbp
  11b584:	ff d7                	call   *%rdi
  11b586:	e8 39 68 ff ff       	call   111dc4 <abort>
  11b58b:	48 89 c7             	mov    %rax,%rdi
  11b58e:	e8 cc f7 ff ff       	call   11ad5f <__cxa_begin_catch>
  11b593:	e8 2c 68 ff ff       	call   111dc4 <abort>

000000000011b598 <_ZSt13get_terminatev>:
  11b598:	48 8b 05 a1 73 02 00 	mov    0x273a1(%rip),%rax        # 142940 <_ZN10__cxxabiv119__terminate_handlerE>
  11b59f:	c3                   	ret    

000000000011b5a0 <_ZSt9terminatev>:
  11b5a0:	55                   	push   %rbp
  11b5a1:	48 89 e5             	mov    %rsp,%rbp
  11b5a4:	e8 ef ff ff ff       	call   11b598 <_ZSt13get_terminatev>
  11b5a9:	48 89 c7             	mov    %rax,%rdi
  11b5ac:	e8 cf ff ff ff       	call   11b580 <_ZN10__cxxabiv111__terminateEPFvvE>

000000000011b5b1 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
  11b5b1:	55                   	push   %rbp
  11b5b2:	48 89 e5             	mov    %rsp,%rbp
  11b5b5:	ff d7                	call   *%rdi
  11b5b7:	e8 e4 ff ff ff       	call   11b5a0 <_ZSt9terminatev>

000000000011b5bc <_ZSt14get_unexpectedv>:
  11b5bc:	48 8b 05 75 73 02 00 	mov    0x27375(%rip),%rax        # 142938 <_ZN10__cxxabiv120__unexpected_handlerE>
  11b5c3:	c3                   	ret    

000000000011b5c4 <_ZSt10unexpectedv>:
  11b5c4:	55                   	push   %rbp
  11b5c5:	48 89 e5             	mov    %rsp,%rbp
  11b5c8:	e8 ef ff ff ff       	call   11b5bc <_ZSt14get_unexpectedv>
  11b5cd:	48 89 c7             	mov    %rax,%rdi
  11b5d0:	e8 dc ff ff ff       	call   11b5b1 <_ZN10__cxxabiv112__unexpectedEPFvvE>

000000000011b5d5 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
  11b5d5:	55                   	push   %rbp
  11b5d6:	48 89 e5             	mov    %rsp,%rbp
  11b5d9:	53                   	push   %rbx
  11b5da:	51                   	push   %rcx
  11b5db:	83 ff 01             	cmp    $0x1,%edi
  11b5de:	76 09                	jbe    11b5e9 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x14>
  11b5e0:	48 8b 7e c8          	mov    -0x38(%rsi),%rdi
  11b5e4:	e8 97 ff ff ff       	call   11b580 <_ZN10__cxxabiv111__terminateEPFvvE>
  11b5e9:	f0 ff 4e a0          	lock decl -0x60(%rsi)
  11b5ed:	75 1d                	jne    11b60c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x37>
  11b5ef:	48 8b 46 b8          	mov    -0x48(%rsi),%rax
  11b5f3:	48 8d 5e 20          	lea    0x20(%rsi),%rbx
  11b5f7:	48 85 c0             	test   %rax,%rax
  11b5fa:	74 05                	je     11b601 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x2c>
  11b5fc:	48 89 df             	mov    %rbx,%rdi
  11b5ff:	ff d0                	call   *%rax
  11b601:	5a                   	pop    %rdx
  11b602:	48 89 df             	mov    %rbx,%rdi
  11b605:	5b                   	pop    %rbx
  11b606:	5d                   	pop    %rbp
  11b607:	e9 e0 f6 ff ff       	jmp    11acec <__cxa_free_exception>
  11b60c:	58                   	pop    %rax
  11b60d:	5b                   	pop    %rbx
  11b60e:	5d                   	pop    %rbp
  11b60f:	c3                   	ret    

000000000011b610 <__cxa_init_primary_exception>:
  11b610:	55                   	push   %rbp
  11b611:	31 c9                	xor    %ecx,%ecx
  11b613:	48 89 e5             	mov    %rsp,%rbp
  11b616:	53                   	push   %rbx
  11b617:	48 89 fb             	mov    %rdi,%rbx
  11b61a:	50                   	push   %rax
  11b61b:	48 89 77 90          	mov    %rsi,-0x70(%rdi)
  11b61f:	89 4f 80             	mov    %ecx,-0x80(%rdi)
  11b622:	48 89 57 98          	mov    %rdx,-0x68(%rdi)
  11b626:	e8 91 ff ff ff       	call   11b5bc <_ZSt14get_unexpectedv>
  11b62b:	48 89 43 a0          	mov    %rax,-0x60(%rbx)
  11b62f:	e8 64 ff ff ff       	call   11b598 <_ZSt13get_terminatev>
  11b634:	48 c7 43 e8 d5 b5 11 	movq   $0x11b5d5,-0x18(%rbx)
  11b63b:	00 
  11b63c:	48 89 43 a8          	mov    %rax,-0x58(%rbx)
  11b640:	48 b8 00 2b 2b 43 43 	movabs $0x474e5543432b2b00,%rax
  11b647:	55 4e 47 
  11b64a:	48 89 43 e0          	mov    %rax,-0x20(%rbx)
  11b64e:	48 8d 43 80          	lea    -0x80(%rbx),%rax
  11b652:	5e                   	pop    %rsi
  11b653:	5b                   	pop    %rbx
  11b654:	5d                   	pop    %rbp
  11b655:	c3                   	ret    

000000000011b656 <__cxa_throw>:
  11b656:	55                   	push   %rbp
  11b657:	48 89 e5             	mov    %rsp,%rbp
  11b65a:	53                   	push   %rbx
  11b65b:	48 83 ec 28          	sub    $0x28,%rsp
  11b65f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11b663:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  11b667:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  11b66b:	e8 54 f7 ff ff       	call   11adc4 <__cxa_get_globals>
  11b670:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  11b674:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  11b678:	ff 40 08             	incl   0x8(%rax)
  11b67b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  11b67f:	e8 8c ff ff ff       	call   11b610 <__cxa_init_primary_exception>
  11b684:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  11b68a:	48 8d 58 60          	lea    0x60(%rax),%rbx
  11b68e:	48 89 df             	mov    %rbx,%rdi
  11b691:	e8 f4 61 fe ff       	call   10188a <_Unwind_RaiseException>
  11b696:	48 89 df             	mov    %rbx,%rdi
  11b699:	e8 c1 f6 ff ff       	call   11ad5f <__cxa_begin_catch>
  11b69e:	e8 fd fe ff ff       	call   11b5a0 <_ZSt9terminatev>

000000000011b6a3 <_ZSt15get_new_handlerv>:
  11b6a3:	48 8b 05 76 ab 00 00 	mov    0xab76(%rip),%rax        # 126220 <_ZN12_GLOBAL__N_113__new_handlerE>
  11b6aa:	c3                   	ret    

000000000011b6ab <__cxa_call_terminate>:
  11b6ab:	55                   	push   %rbp
  11b6ac:	48 89 e5             	mov    %rsp,%rbp
  11b6af:	53                   	push   %rbx
  11b6b0:	50                   	push   %rax
  11b6b1:	48 85 ff             	test   %rdi,%rdi
  11b6b4:	74 24                	je     11b6da <__cxa_call_terminate+0x2f>
  11b6b6:	48 89 fb             	mov    %rdi,%rbx
  11b6b9:	e8 a1 f6 ff ff       	call   11ad5f <__cxa_begin_catch>
  11b6be:	48 b8 00 d5 d4 bc bc 	movabs $0xb8b1aabcbcd4d500,%rax
  11b6c5:	aa b1 b8 
  11b6c8:	48 03 03             	add    (%rbx),%rax
  11b6cb:	48 83 f8 01          	cmp    $0x1,%rax
  11b6cf:	77 09                	ja     11b6da <__cxa_call_terminate+0x2f>
  11b6d1:	48 8b 7b c8          	mov    -0x38(%rbx),%rdi
  11b6d5:	e8 a6 fe ff ff       	call   11b580 <_ZN10__cxxabiv111__terminateEPFvvE>
  11b6da:	e8 c1 fe ff ff       	call   11b5a0 <_ZSt9terminatev>
  11b6df:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b6e6:	00 00 00 
  11b6e9:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b6f0:	00 00 00 
  11b6f3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b6fa:	00 00 00 
  11b6fd:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b704:	00 00 00 
  11b707:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b70e:	00 00 00 
  11b711:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b718:	00 00 00 
  11b71b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b722:	00 00 00 
  11b725:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b72c:	00 00 00 
  11b72f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b736:	00 00 00 
  11b739:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b740:	00 00 00 
  11b743:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b74a:	00 00 00 
  11b74d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b754:	00 00 00 
  11b757:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b75e:	00 00 00 
  11b761:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b768:	00 00 00 
  11b76b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b772:	00 00 00 
  11b775:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b77c:	00 00 00 
  11b77f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b786:	00 00 00 
  11b789:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b790:	00 00 00 
  11b793:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b79a:	00 00 00 
  11b79d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b7a4:	00 00 00 
  11b7a7:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b7ae:	00 00 00 
  11b7b1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b7b8:	00 00 00 
  11b7bb:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b7c2:	00 00 00 
  11b7c5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b7cc:	00 00 00 
  11b7cf:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b7d6:	00 00 00 
  11b7d9:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b7e0:	00 00 00 
  11b7e3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b7ea:	00 00 00 
  11b7ed:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b7f4:	00 00 00 
  11b7f7:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b7fe:	00 00 00 
  11b801:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b808:	00 00 00 
  11b80b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b812:	00 00 00 
  11b815:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b81c:	00 00 00 
  11b81f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b826:	00 00 00 
  11b829:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b830:	00 00 00 
  11b833:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b83a:	00 00 00 
  11b83d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b844:	00 00 00 
  11b847:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b84e:	00 00 00 
  11b851:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b858:	00 00 00 
  11b85b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b862:	00 00 00 
  11b865:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b86c:	00 00 00 
  11b86f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b876:	00 00 00 
  11b879:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b880:	00 00 00 
  11b883:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b88a:	00 00 00 
  11b88d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b894:	00 00 00 
  11b897:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b89e:	00 00 00 
  11b8a1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b8a8:	00 00 00 
  11b8ab:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b8b2:	00 00 00 
  11b8b5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b8bc:	00 00 00 
  11b8bf:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b8c6:	00 00 00 
  11b8c9:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b8d0:	00 00 00 
  11b8d3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b8da:	00 00 00 
  11b8dd:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b8e4:	00 00 00 
  11b8e7:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b8ee:	00 00 00 
  11b8f1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b8f8:	00 00 00 
  11b8fb:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b902:	00 00 00 
  11b905:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b90c:	00 00 00 
  11b90f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b916:	00 00 00 
  11b919:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b920:	00 00 00 
  11b923:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b92a:	00 00 00 
  11b92d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b934:	00 00 00 
  11b937:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b93e:	00 00 00 
  11b941:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b948:	00 00 00 
  11b94b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b952:	00 00 00 
  11b955:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b95c:	00 00 00 
  11b95f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b966:	00 00 00 
  11b969:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b970:	00 00 00 
  11b973:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b97a:	00 00 00 
  11b97d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b984:	00 00 00 
  11b987:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b98e:	00 00 00 
  11b991:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b998:	00 00 00 
  11b99b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b9a2:	00 00 00 
  11b9a5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b9ac:	00 00 00 
  11b9af:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b9b6:	00 00 00 
  11b9b9:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b9c0:	00 00 00 
  11b9c3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b9ca:	00 00 00 
  11b9cd:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b9d4:	00 00 00 
  11b9d7:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b9de:	00 00 00 
  11b9e1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b9e8:	00 00 00 
  11b9eb:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b9f2:	00 00 00 
  11b9f5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11b9fc:	00 00 00 
  11b9ff:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11ba06:	00 00 00 
  11ba09:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11ba10:	00 00 00 
  11ba13:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11ba1a:	00 00 00 
  11ba1d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11ba24:	00 00 00 
  11ba27:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11ba2e:	00 00 00 
  11ba31:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11ba38:	00 00 00 
  11ba3b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11ba42:	00 00 00 
  11ba45:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11ba4c:	00 00 00 
  11ba4f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11ba56:	00 00 00 
  11ba59:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11ba60:	00 00 00 
  11ba63:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11ba6a:	00 00 00 
  11ba6d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11ba74:	00 00 00 
  11ba77:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11ba7e:	00 00 00 
  11ba81:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11ba88:	00 00 00 
  11ba8b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11ba92:	00 00 00 
  11ba95:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11ba9c:	00 00 00 
  11ba9f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11baa6:	00 00 00 
  11baa9:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bab0:	00 00 00 
  11bab3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11baba:	00 00 00 
  11babd:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bac4:	00 00 00 
  11bac7:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bace:	00 00 00 
  11bad1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bad8:	00 00 00 
  11badb:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bae2:	00 00 00 
  11bae5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11baec:	00 00 00 
  11baef:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11baf6:	00 00 00 
  11baf9:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bb00:	00 00 00 
  11bb03:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bb0a:	00 00 00 
  11bb0d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bb14:	00 00 00 
  11bb17:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bb1e:	00 00 00 
  11bb21:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bb28:	00 00 00 
  11bb2b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bb32:	00 00 00 
  11bb35:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bb3c:	00 00 00 
  11bb3f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bb46:	00 00 00 
  11bb49:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bb50:	00 00 00 
  11bb53:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bb5a:	00 00 00 
  11bb5d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bb64:	00 00 00 
  11bb67:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bb6e:	00 00 00 
  11bb71:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bb78:	00 00 00 
  11bb7b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bb82:	00 00 00 
  11bb85:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bb8c:	00 00 00 
  11bb8f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bb96:	00 00 00 
  11bb99:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bba0:	00 00 00 
  11bba3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bbaa:	00 00 00 
  11bbad:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bbb4:	00 00 00 
  11bbb7:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bbbe:	00 00 00 
  11bbc1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bbc8:	00 00 00 
  11bbcb:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bbd2:	00 00 00 
  11bbd5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bbdc:	00 00 00 
  11bbdf:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bbe6:	00 00 00 
  11bbe9:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bbf0:	00 00 00 
  11bbf3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bbfa:	00 00 00 
  11bbfd:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bc04:	00 00 00 
  11bc07:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bc0e:	00 00 00 
  11bc11:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bc18:	00 00 00 
  11bc1b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bc22:	00 00 00 
  11bc25:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bc2c:	00 00 00 
  11bc2f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bc36:	00 00 00 
  11bc39:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bc40:	00 00 00 
  11bc43:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bc4a:	00 00 00 
  11bc4d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bc54:	00 00 00 
  11bc57:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bc5e:	00 00 00 
  11bc61:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bc68:	00 00 00 
  11bc6b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bc72:	00 00 00 
  11bc75:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bc7c:	00 00 00 
  11bc7f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bc86:	00 00 00 
  11bc89:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bc90:	00 00 00 
  11bc93:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bc9a:	00 00 00 
  11bc9d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bca4:	00 00 00 
  11bca7:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bcae:	00 00 00 
  11bcb1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bcb8:	00 00 00 
  11bcbb:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bcc2:	00 00 00 
  11bcc5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bccc:	00 00 00 
  11bccf:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bcd6:	00 00 00 
  11bcd9:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bce0:	00 00 00 
  11bce3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bcea:	00 00 00 
  11bced:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bcf4:	00 00 00 
  11bcf7:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bcfe:	00 00 00 
  11bd01:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bd08:	00 00 00 
  11bd0b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bd12:	00 00 00 
  11bd15:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bd1c:	00 00 00 
  11bd1f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bd26:	00 00 00 
  11bd29:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bd30:	00 00 00 
  11bd33:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bd3a:	00 00 00 
  11bd3d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bd44:	00 00 00 
  11bd47:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bd4e:	00 00 00 
  11bd51:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bd58:	00 00 00 
  11bd5b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bd62:	00 00 00 
  11bd65:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bd6c:	00 00 00 
  11bd6f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bd76:	00 00 00 
  11bd79:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bd80:	00 00 00 
  11bd83:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bd8a:	00 00 00 
  11bd8d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bd94:	00 00 00 
  11bd97:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bd9e:	00 00 00 
  11bda1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bda8:	00 00 00 
  11bdab:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bdb2:	00 00 00 
  11bdb5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bdbc:	00 00 00 
  11bdbf:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bdc6:	00 00 00 
  11bdc9:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bdd0:	00 00 00 
  11bdd3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bdda:	00 00 00 
  11bddd:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bde4:	00 00 00 
  11bde7:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bdee:	00 00 00 
  11bdf1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bdf8:	00 00 00 
  11bdfb:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11be02:	00 00 00 
  11be05:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11be0c:	00 00 00 
  11be0f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11be16:	00 00 00 
  11be19:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11be20:	00 00 00 
  11be23:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11be2a:	00 00 00 
  11be2d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11be34:	00 00 00 
  11be37:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11be3e:	00 00 00 
  11be41:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11be48:	00 00 00 
  11be4b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11be52:	00 00 00 
  11be55:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11be5c:	00 00 00 
  11be5f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11be66:	00 00 00 
  11be69:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11be70:	00 00 00 
  11be73:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11be7a:	00 00 00 
  11be7d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11be84:	00 00 00 
  11be87:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11be8e:	00 00 00 
  11be91:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11be98:	00 00 00 
  11be9b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bea2:	00 00 00 
  11bea5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11beac:	00 00 00 
  11beaf:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11beb6:	00 00 00 
  11beb9:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bec0:	00 00 00 
  11bec3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11beca:	00 00 00 
  11becd:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bed4:	00 00 00 
  11bed7:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bede:	00 00 00 
  11bee1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bee8:	00 00 00 
  11beeb:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bef2:	00 00 00 
  11bef5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11befc:	00 00 00 
  11beff:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bf06:	00 00 00 
  11bf09:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bf10:	00 00 00 
  11bf13:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bf1a:	00 00 00 
  11bf1d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bf24:	00 00 00 
  11bf27:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bf2e:	00 00 00 
  11bf31:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bf38:	00 00 00 
  11bf3b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bf42:	00 00 00 
  11bf45:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bf4c:	00 00 00 
  11bf4f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bf56:	00 00 00 
  11bf59:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bf60:	00 00 00 
  11bf63:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bf6a:	00 00 00 
  11bf6d:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bf74:	00 00 00 
  11bf77:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bf7e:	00 00 00 
  11bf81:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bf88:	00 00 00 
  11bf8b:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bf92:	00 00 00 
  11bf95:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bf9c:	00 00 00 
  11bf9f:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bfa6:	00 00 00 
  11bfa9:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bfb0:	00 00 00 
  11bfb3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bfba:	00 00 00 
  11bfbd:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bfc4:	00 00 00 
  11bfc7:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bfce:	00 00 00 
  11bfd1:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bfd8:	00 00 00 
  11bfdb:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bfe2:	00 00 00 
  11bfe5:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bfec:	00 00 00 
  11bfef:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
  11bff6:	00 00 00 
  11bff9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
